
Debug/Project_keypad:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
#include "stm32f4xx_rcc.h"

__attribute__((naked)) __attribute__((section (".start_section")) )
void startup ( void ) 
{
__asm__ volatile(" LDR R0,=0x2001C000\n");		/* set stack */
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <startup+0xc>)
__asm__ volatile(" MOV SP,R0\n");
20000002:	4685      	mov	sp, r0
__asm__ volatile(" BL main\n");					/* call main */
20000004:	f000 f90a 	bl	2000021c <main>
__asm__ 
20000008:	e7fe      	b.n	20000008 <startup+0x8>
volatile(".L1: B .L1\n");				/* never return */
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <app_init>:

void app_init(void){	
20000010:	b5b0      	push	{r4, r5, r7, lr}
20000012:	b086      	sub	sp, #24
20000014:	af00      	add	r7, sp, #0
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
20000016:	2101      	movs	r1, #1
20000018:	2010      	movs	r0, #16
2000001a:	f000 ff63 	bl	20000ee4 <RCC_AHB1PeriphClockCmd>
	GPIO_InitTypeDef keypad_In;
	GPIO_InitTypeDef keypad_Out;
	GPIO_InitTypeDef out7seg;
	
	GPIO_StructInit(&keypad_In); // COLUMN 0-3 pin as input
2000001e:	2410      	movs	r4, #16
20000020:	193b      	adds	r3, r7, r4
20000022:	0018      	movs	r0, r3
20000024:	f000 fa47 	bl	200004b6 <GPIO_StructInit>
	GPIO_StructInit(&keypad_Out); //ROW 4-7 as output
20000028:	2508      	movs	r5, #8
2000002a:	197b      	adds	r3, r7, r5
2000002c:	0018      	movs	r0, r3
2000002e:	f000 fa42 	bl	200004b6 <GPIO_StructInit>
	GPIO_StructInit(&out7seg);
20000032:	003b      	movs	r3, r7
20000034:	0018      	movs	r0, r3
20000036:	f000 fa3e 	bl	200004b6 <GPIO_StructInit>
	
	keypad_In.GPIO_Pin = GPIO_Pin_0| GPIO_Pin_1| GPIO_Pin_2| GPIO_Pin_3;
2000003a:	0021      	movs	r1, r4
2000003c:	187b      	adds	r3, r7, r1
2000003e:	220f      	movs	r2, #15
20000040:	601a      	str	r2, [r3, #0]
	keypad_Out.GPIO_Pin = GPIO_Pin_4| GPIO_Pin_5| GPIO_Pin_6| GPIO_Pin_7;
20000042:	0028      	movs	r0, r5
20000044:	183b      	adds	r3, r7, r0
20000046:	22f0      	movs	r2, #240	; 0xf0
20000048:	601a      	str	r2, [r3, #0]
	out7seg.GPIO_Pin	=   GPIO_Pin_8| GPIO_Pin_9| GPIO_Pin_10| GPIO_Pin_11|
2000004a:	003b      	movs	r3, r7
2000004c:	22ff      	movs	r2, #255	; 0xff
2000004e:	0212      	lsls	r2, r2, #8
20000050:	601a      	str	r2, [r3, #0]
				GPIO_Pin_12| GPIO_Pin_13| GPIO_Pin_14| GPIO_Pin_15;
	
	keypad_In.GPIO_PuPd = GPIO_PuPd_DOWN; //PULLDOWN 
20000052:	187b      	adds	r3, r7, r1
20000054:	2202      	movs	r2, #2
20000056:	71da      	strb	r2, [r3, #7]
	
	keypad_In.GPIO_OType = GPIO_OType_PP; //push/pull
20000058:	187b      	adds	r3, r7, r1
2000005a:	2200      	movs	r2, #0
2000005c:	719a      	strb	r2, [r3, #6]
	keypad_Out.GPIO_OType = GPIO_OType_PP; //OPEN DRAIN
2000005e:	183b      	adds	r3, r7, r0
20000060:	2200      	movs	r2, #0
20000062:	719a      	strb	r2, [r3, #6]
	
	keypad_In.GPIO_Mode = GPIO_Mode_IN;
20000064:	187b      	adds	r3, r7, r1
20000066:	2200      	movs	r2, #0
20000068:	711a      	strb	r2, [r3, #4]
	keypad_Out.GPIO_Mode = GPIO_Mode_OUT;
2000006a:	0004      	movs	r4, r0
2000006c:	183b      	adds	r3, r7, r0
2000006e:	2201      	movs	r2, #1
20000070:	711a      	strb	r2, [r3, #4]
	out7seg.GPIO_Mode	= GPIO_Mode_OUT;
20000072:	003b      	movs	r3, r7
20000074:	2201      	movs	r2, #1
20000076:	711a      	strb	r2, [r3, #4]

	GPIO_Init(GPIOE, &keypad_In);
20000078:	187b      	adds	r3, r7, r1
2000007a:	4a0a      	ldr	r2, [pc, #40]	; (200000a4 <app_init+0x94>)
2000007c:	0019      	movs	r1, r3
2000007e:	0010      	movs	r0, r2
20000080:	f000 f98c 	bl	2000039c <GPIO_Init>
	GPIO_Init(GPIOE, &keypad_Out);
20000084:	193b      	adds	r3, r7, r4
20000086:	4a07      	ldr	r2, [pc, #28]	; (200000a4 <app_init+0x94>)
20000088:	0019      	movs	r1, r3
2000008a:	0010      	movs	r0, r2
2000008c:	f000 f986 	bl	2000039c <GPIO_Init>
	GPIO_Init(GPIOE, &out7seg);
20000090:	003b      	movs	r3, r7
20000092:	4a04      	ldr	r2, [pc, #16]	; (200000a4 <app_init+0x94>)
20000094:	0019      	movs	r1, r3
20000096:	0010      	movs	r0, r2
20000098:	f000 f980 	bl	2000039c <GPIO_Init>
}
2000009c:	46c0      	nop			; (mov r8, r8)
2000009e:	46bd      	mov	sp, r7
200000a0:	b006      	add	sp, #24
200000a2:	bdb0      	pop	{r4, r5, r7, pc}
200000a4:	40021000 	andmi	r1, r2, r0

200000a8 <keyboardActivate>:
void keyboardActivate(unsigned int row){
200000a8:	b580      	push	{r7, lr}
200000aa:	b082      	sub	sp, #8
200000ac:	af00      	add	r7, sp, #0
200000ae:	6078      	str	r0, [r7, #4]
200000b0:	687b      	ldr	r3, [r7, #4]
200000b2:	2b04      	cmp	r3, #4
200000b4:	d823      	bhi.n	200000fe <keyboardActivate+0x56>
200000b6:	687b      	ldr	r3, [r7, #4]
200000b8:	009a      	lsls	r2, r3, #2
200000ba:	4b13      	ldr	r3, [pc, #76]	; (20000108 <keyboardActivate+0x60>)
200000bc:	18d3      	adds	r3, r2, r3
200000be:	681b      	ldr	r3, [r3, #0]
200000c0:	469f      	mov	pc, r3
	//Aktivera angiven rad hos tangentbordet eller deaktivera samtliga
	switch(row){
		case 1: GPIO_SetBits(GPIOE,GPIO_Pin_4); break; //GPIO_SetBits(GPIOD,GPIO_Pin_4)
200000c2:	4b12      	ldr	r3, [pc, #72]	; (2000010c <keyboardActivate+0x64>)
200000c4:	2110      	movs	r1, #16
200000c6:	0018      	movs	r0, r3
200000c8:	f000 fa87 	bl	200005da <GPIO_SetBits>
200000cc:	e017      	b.n	200000fe <keyboardActivate+0x56>
		case 2: GPIO_SetBits(GPIOE,GPIO_Pin_5); break; //GPIO_SetBits(GPIOD,GPIO_Pin_5)
200000ce:	4b0f      	ldr	r3, [pc, #60]	; (2000010c <keyboardActivate+0x64>)
200000d0:	2120      	movs	r1, #32
200000d2:	0018      	movs	r0, r3
200000d4:	f000 fa81 	bl	200005da <GPIO_SetBits>
200000d8:	e011      	b.n	200000fe <keyboardActivate+0x56>
		case 3: GPIO_SetBits(GPIOE,GPIO_Pin_6); break; //GPIO_SetBits(GPIOD,GPIO_Pin_6)
200000da:	4b0c      	ldr	r3, [pc, #48]	; (2000010c <keyboardActivate+0x64>)
200000dc:	2140      	movs	r1, #64	; 0x40
200000de:	0018      	movs	r0, r3
200000e0:	f000 fa7b 	bl	200005da <GPIO_SetBits>
200000e4:	e00b      	b.n	200000fe <keyboardActivate+0x56>
		case 4: GPIO_SetBits(GPIOE,GPIO_Pin_7); break; //GPIO_SetBits(GPIOD,GPIO_Pin_7)
200000e6:	4b09      	ldr	r3, [pc, #36]	; (2000010c <keyboardActivate+0x64>)
200000e8:	2180      	movs	r1, #128	; 0x80
200000ea:	0018      	movs	r0, r3
200000ec:	f000 fa75 	bl	200005da <GPIO_SetBits>
200000f0:	e005      	b.n	200000fe <keyboardActivate+0x56>
		case 0: GPIO_Write(GPIOE, 0x0000); break;
200000f2:	4b06      	ldr	r3, [pc, #24]	; (2000010c <keyboardActivate+0x64>)
200000f4:	2100      	movs	r1, #0
200000f6:	0018      	movs	r0, r3
200000f8:	f000 faaa 	bl	20000650 <GPIO_Write>
200000fc:	46c0      	nop			; (mov r8, r8)
	}
}
200000fe:	46c0      	nop			; (mov r8, r8)
20000100:	46bd      	mov	sp, r7
20000102:	b002      	add	sp, #8
20000104:	bd80      	pop	{r7, pc}
20000106:	46c0      	nop			; (mov r8, r8)
20000108:	20002068 	andcs	r2, r0, r8, rrx
2000010c:	40021000 	andmi	r1, r2, r0

20000110 <keyboardGetColumn>:
int keyboardGetColumn(void){
20000110:	b580      	push	{r7, lr}
20000112:	af00      	add	r7, sp, #0
	//Om någon tangent i den aktiverade raden är nedtryckt
	// returneras dess kolumnnummer. Annars 0.	
	if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_3)){
20000114:	4b13      	ldr	r3, [pc, #76]	; (20000164 <keyboardGetColumn+0x54>)
20000116:	2108      	movs	r1, #8
20000118:	0018      	movs	r0, r3
2000011a:	f000 fa08 	bl	2000052e <GPIO_ReadInputDataBit>
2000011e:	1e03      	subs	r3, r0, #0
20000120:	d001      	beq.n	20000126 <keyboardGetColumn+0x16>
		return 4;}
20000122:	2304      	movs	r3, #4
20000124:	e01b      	b.n	2000015e <keyboardGetColumn+0x4e>
	if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_2)){
20000126:	4b0f      	ldr	r3, [pc, #60]	; (20000164 <keyboardGetColumn+0x54>)
20000128:	2104      	movs	r1, #4
2000012a:	0018      	movs	r0, r3
2000012c:	f000 f9ff 	bl	2000052e <GPIO_ReadInputDataBit>
20000130:	1e03      	subs	r3, r0, #0
20000132:	d001      	beq.n	20000138 <keyboardGetColumn+0x28>
		return 3;}
20000134:	2303      	movs	r3, #3
20000136:	e012      	b.n	2000015e <keyboardGetColumn+0x4e>
	if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_1)){
20000138:	4b0a      	ldr	r3, [pc, #40]	; (20000164 <keyboardGetColumn+0x54>)
2000013a:	2102      	movs	r1, #2
2000013c:	0018      	movs	r0, r3
2000013e:	f000 f9f6 	bl	2000052e <GPIO_ReadInputDataBit>
20000142:	1e03      	subs	r3, r0, #0
20000144:	d001      	beq.n	2000014a <keyboardGetColumn+0x3a>
		return 2;}
20000146:	2302      	movs	r3, #2
20000148:	e009      	b.n	2000015e <keyboardGetColumn+0x4e>
	if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_0)){
2000014a:	4b06      	ldr	r3, [pc, #24]	; (20000164 <keyboardGetColumn+0x54>)
2000014c:	2101      	movs	r1, #1
2000014e:	0018      	movs	r0, r3
20000150:	f000 f9ed 	bl	2000052e <GPIO_ReadInputDataBit>
20000154:	1e03      	subs	r3, r0, #0
20000156:	d001      	beq.n	2000015c <keyboardGetColumn+0x4c>
		return 1;}
20000158:	2301      	movs	r3, #1
2000015a:	e000      	b.n	2000015e <keyboardGetColumn+0x4e>
	return 0;
2000015c:	2300      	movs	r3, #0
	}
2000015e:	0018      	movs	r0, r3
20000160:	46bd      	mov	sp, r7
20000162:	bd80      	pop	{r7, pc}
20000164:	40021000 	andmi	r1, r2, r0

20000168 <keyboard>:
	
void keyboard(void){
20000168:	b580      	push	{r7, lr}
2000016a:	b092      	sub	sp, #72	; 0x48
2000016c:	af00      	add	r7, sp, #0
	unsigned const char *key[] = {"1","2","3","0xA","4","5","6","0xB","7","8","9","0xC","0xE","0","0xF","0xD"};
2000016e:	003a      	movs	r2, r7
20000170:	4b18      	ldr	r3, [pc, #96]	; (200001d4 <keyboard+0x6c>)
20000172:	0010      	movs	r0, r2
20000174:	0019      	movs	r1, r3
20000176:	2340      	movs	r3, #64	; 0x40
20000178:	001a      	movs	r2, r3
2000017a:	f001 ff43 	bl	20002004 <memcpy>
	int row, col;
	for(row=1; row<5; row++){
2000017e:	2301      	movs	r3, #1
20000180:	647b      	str	r3, [r7, #68]	; 0x44
20000182:	e01d      	b.n	200001c0 <keyboard+0x58>
		keyboardActivate(row);
20000184:	6c7b      	ldr	r3, [r7, #68]	; 0x44
20000186:	0018      	movs	r0, r3
20000188:	f7ff ff8e 	bl	200000a8 <keyboardActivate>
		if(col = keyboardGetColumn()){
2000018c:	f7ff ffc0 	bl	20000110 <keyboardGetColumn>
20000190:	0003      	movs	r3, r0
20000192:	643b      	str	r3, [r7, #64]	; 0x40
20000194:	6c3b      	ldr	r3, [r7, #64]	; 0x40
20000196:	2b00      	cmp	r3, #0
20000198:	d00f      	beq.n	200001ba <keyboard+0x52>
			keyboardActivate(0);
2000019a:	2000      	movs	r0, #0
2000019c:	f7ff ff84 	bl	200000a8 <keyboardActivate>
			print(key[4*(row-1) + (col-1)]);
200001a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
200001a2:	3b01      	subs	r3, #1
200001a4:	009a      	lsls	r2, r3, #2
200001a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
200001a8:	3b01      	subs	r3, #1
200001aa:	18d2      	adds	r2, r2, r3
200001ac:	003b      	movs	r3, r7
200001ae:	0092      	lsls	r2, r2, #2
200001b0:	58d3      	ldr	r3, [r2, r3]
200001b2:	0018      	movs	r0, r3
200001b4:	f001 f986 	bl	200014c4 <print>
			return (key[4*(row-1) + (col-1)]);
200001b8:	e009      	b.n	200001ce <keyboard+0x66>
	for(row=1; row<5; row++){
200001ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
200001bc:	3301      	adds	r3, #1
200001be:	647b      	str	r3, [r7, #68]	; 0x44
200001c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
200001c2:	2b04      	cmp	r3, #4
200001c4:	ddde      	ble.n	20000184 <keyboard+0x1c>
		}
	}
	keyboardActivate(0);
200001c6:	2000      	movs	r0, #0
200001c8:	f7ff ff6e 	bl	200000a8 <keyboardActivate>
	return 0xFF;
200001cc:	46c0      	nop			; (mov r8, r8)
}
200001ce:	46bd      	mov	sp, r7
200001d0:	b012      	add	sp, #72	; 0x48
200001d2:	bd80      	pop	{r7, pc}
200001d4:	2000207c 	andcs	r2, r0, ip, ror r0

200001d8 <out7seg>:


void out7seg(unsigned char c){
200001d8:	b5b0      	push	{r4, r5, r7, lr}
200001da:	b08a      	sub	sp, #40	; 0x28
200001dc:	af00      	add	r7, sp, #0
200001de:	0002      	movs	r2, r0
200001e0:	1dfb      	adds	r3, r7, #7
200001e2:	701a      	strb	r2, [r3, #0]
	//Segment-array över hur siffrorna skall synas på skärmen
    unsigned short result[] = {0x3F00, 0x0600, 0x5B00, 0x4F00,
200001e4:	2108      	movs	r1, #8
200001e6:	187b      	adds	r3, r7, r1
200001e8:	4a0a      	ldr	r2, [pc, #40]	; (20000214 <out7seg+0x3c>)
200001ea:	ca31      	ldmia	r2!, {r0, r4, r5}
200001ec:	c331      	stmia	r3!, {r0, r4, r5}
200001ee:	ca31      	ldmia	r2!, {r0, r4, r5}
200001f0:	c331      	stmia	r3!, {r0, r4, r5}
200001f2:	ca11      	ldmia	r2!, {r0, r4}
200001f4:	c311      	stmia	r3!, {r0, r4}
							0x6600, 0x6D00, 0x7D00, 0x0700, 0x7F00, 
							0x6F00, 0x7700, 0x7C00, 0x5800, 0x5E00, 0x8000, 0x7600};
	if(c > 0xFF00){
         GPIO_Write(GPIOE, 0x00);
    }else{
        GPIO_Write(GPIOE, result[c]);
200001f6:	1dfb      	adds	r3, r7, #7
200001f8:	781a      	ldrb	r2, [r3, #0]
200001fa:	187b      	adds	r3, r7, r1
200001fc:	0052      	lsls	r2, r2, #1
200001fe:	5ad3      	ldrh	r3, [r2, r3]
20000200:	4a05      	ldr	r2, [pc, #20]	; (20000218 <out7seg+0x40>)
20000202:	0019      	movs	r1, r3
20000204:	0010      	movs	r0, r2
20000206:	f000 fa23 	bl	20000650 <GPIO_Write>
    }	 
}
2000020a:	46c0      	nop			; (mov r8, r8)
2000020c:	46bd      	mov	sp, r7
2000020e:	b00a      	add	sp, #40	; 0x28
20000210:	bdb0      	pop	{r4, r5, r7, pc}
20000212:	46c0      	nop			; (mov r8, r8)
20000214:	200020bc 	strhcs	r2, [r0], -ip
20000218:	40021000 	andmi	r1, r2, r0

2000021c <main>:
void main(void){
2000021c:	b580      	push	{r7, lr}
2000021e:	af00      	add	r7, sp, #0
	app_init();
20000220:	f7ff fef6 	bl	20000010 <app_init>
	while(1){
		keyboard();
20000224:	f7ff ffa0 	bl	20000168 <keyboard>
20000228:	e7fc      	b.n	20000224 <main+0x8>
2000022a:	46c0      	nop			; (mov r8, r8)

2000022c <GPIO_DeInit>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices.  
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
2000022c:	b580      	push	{r7, lr}
2000022e:	b082      	sub	sp, #8
20000230:	af00      	add	r7, sp, #0
20000232:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
20000234:	687b      	ldr	r3, [r7, #4]
20000236:	4a4e      	ldr	r2, [pc, #312]	; (20000370 <GPIO_DeInit+0x144>)
20000238:	4293      	cmp	r3, r2
2000023a:	d108      	bne.n	2000024e <GPIO_DeInit+0x22>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
2000023c:	2101      	movs	r1, #1
2000023e:	2001      	movs	r0, #1
20000240:	f000 fef0 	bl	20001024 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
20000244:	2100      	movs	r1, #0
20000246:	2001      	movs	r0, #1
20000248:	f000 feec 	bl	20001024 <RCC_AHB1PeriphResetCmd>
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
2000024c:	e08c      	b.n	20000368 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOB)
2000024e:	687b      	ldr	r3, [r7, #4]
20000250:	4a48      	ldr	r2, [pc, #288]	; (20000374 <GPIO_DeInit+0x148>)
20000252:	4293      	cmp	r3, r2
20000254:	d108      	bne.n	20000268 <GPIO_DeInit+0x3c>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
20000256:	2101      	movs	r1, #1
20000258:	2002      	movs	r0, #2
2000025a:	f000 fee3 	bl	20001024 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
2000025e:	2100      	movs	r1, #0
20000260:	2002      	movs	r0, #2
20000262:	f000 fedf 	bl	20001024 <RCC_AHB1PeriphResetCmd>
}
20000266:	e07f      	b.n	20000368 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOC)
20000268:	687b      	ldr	r3, [r7, #4]
2000026a:	4a43      	ldr	r2, [pc, #268]	; (20000378 <GPIO_DeInit+0x14c>)
2000026c:	4293      	cmp	r3, r2
2000026e:	d108      	bne.n	20000282 <GPIO_DeInit+0x56>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
20000270:	2101      	movs	r1, #1
20000272:	2004      	movs	r0, #4
20000274:	f000 fed6 	bl	20001024 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
20000278:	2100      	movs	r1, #0
2000027a:	2004      	movs	r0, #4
2000027c:	f000 fed2 	bl	20001024 <RCC_AHB1PeriphResetCmd>
}
20000280:	e072      	b.n	20000368 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOD)
20000282:	687b      	ldr	r3, [r7, #4]
20000284:	4a3d      	ldr	r2, [pc, #244]	; (2000037c <GPIO_DeInit+0x150>)
20000286:	4293      	cmp	r3, r2
20000288:	d108      	bne.n	2000029c <GPIO_DeInit+0x70>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
2000028a:	2101      	movs	r1, #1
2000028c:	2008      	movs	r0, #8
2000028e:	f000 fec9 	bl	20001024 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
20000292:	2100      	movs	r1, #0
20000294:	2008      	movs	r0, #8
20000296:	f000 fec5 	bl	20001024 <RCC_AHB1PeriphResetCmd>
}
2000029a:	e065      	b.n	20000368 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOE)
2000029c:	687b      	ldr	r3, [r7, #4]
2000029e:	4a38      	ldr	r2, [pc, #224]	; (20000380 <GPIO_DeInit+0x154>)
200002a0:	4293      	cmp	r3, r2
200002a2:	d108      	bne.n	200002b6 <GPIO_DeInit+0x8a>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
200002a4:	2101      	movs	r1, #1
200002a6:	2010      	movs	r0, #16
200002a8:	f000 febc 	bl	20001024 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
200002ac:	2100      	movs	r1, #0
200002ae:	2010      	movs	r0, #16
200002b0:	f000 feb8 	bl	20001024 <RCC_AHB1PeriphResetCmd>
}
200002b4:	e058      	b.n	20000368 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOF)
200002b6:	687b      	ldr	r3, [r7, #4]
200002b8:	4a32      	ldr	r2, [pc, #200]	; (20000384 <GPIO_DeInit+0x158>)
200002ba:	4293      	cmp	r3, r2
200002bc:	d108      	bne.n	200002d0 <GPIO_DeInit+0xa4>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
200002be:	2101      	movs	r1, #1
200002c0:	2020      	movs	r0, #32
200002c2:	f000 feaf 	bl	20001024 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
200002c6:	2100      	movs	r1, #0
200002c8:	2020      	movs	r0, #32
200002ca:	f000 feab 	bl	20001024 <RCC_AHB1PeriphResetCmd>
}
200002ce:	e04b      	b.n	20000368 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOG)
200002d0:	687b      	ldr	r3, [r7, #4]
200002d2:	4a2d      	ldr	r2, [pc, #180]	; (20000388 <GPIO_DeInit+0x15c>)
200002d4:	4293      	cmp	r3, r2
200002d6:	d108      	bne.n	200002ea <GPIO_DeInit+0xbe>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
200002d8:	2101      	movs	r1, #1
200002da:	2040      	movs	r0, #64	; 0x40
200002dc:	f000 fea2 	bl	20001024 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
200002e0:	2100      	movs	r1, #0
200002e2:	2040      	movs	r0, #64	; 0x40
200002e4:	f000 fe9e 	bl	20001024 <RCC_AHB1PeriphResetCmd>
}
200002e8:	e03e      	b.n	20000368 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOH)
200002ea:	687b      	ldr	r3, [r7, #4]
200002ec:	4a27      	ldr	r2, [pc, #156]	; (2000038c <GPIO_DeInit+0x160>)
200002ee:	4293      	cmp	r3, r2
200002f0:	d108      	bne.n	20000304 <GPIO_DeInit+0xd8>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
200002f2:	2101      	movs	r1, #1
200002f4:	2080      	movs	r0, #128	; 0x80
200002f6:	f000 fe95 	bl	20001024 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
200002fa:	2100      	movs	r1, #0
200002fc:	2080      	movs	r0, #128	; 0x80
200002fe:	f000 fe91 	bl	20001024 <RCC_AHB1PeriphResetCmd>
}
20000302:	e031      	b.n	20000368 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOI)
20000304:	687b      	ldr	r3, [r7, #4]
20000306:	4a22      	ldr	r2, [pc, #136]	; (20000390 <GPIO_DeInit+0x164>)
20000308:	4293      	cmp	r3, r2
2000030a:	d10c      	bne.n	20000326 <GPIO_DeInit+0xfa>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
2000030c:	2380      	movs	r3, #128	; 0x80
2000030e:	005b      	lsls	r3, r3, #1
20000310:	2101      	movs	r1, #1
20000312:	0018      	movs	r0, r3
20000314:	f000 fe86 	bl	20001024 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
20000318:	2380      	movs	r3, #128	; 0x80
2000031a:	005b      	lsls	r3, r3, #1
2000031c:	2100      	movs	r1, #0
2000031e:	0018      	movs	r0, r3
20000320:	f000 fe80 	bl	20001024 <RCC_AHB1PeriphResetCmd>
}
20000324:	e020      	b.n	20000368 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOJ)
20000326:	687b      	ldr	r3, [r7, #4]
20000328:	4a1a      	ldr	r2, [pc, #104]	; (20000394 <GPIO_DeInit+0x168>)
2000032a:	4293      	cmp	r3, r2
2000032c:	d10c      	bne.n	20000348 <GPIO_DeInit+0x11c>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, ENABLE);
2000032e:	2380      	movs	r3, #128	; 0x80
20000330:	009b      	lsls	r3, r3, #2
20000332:	2101      	movs	r1, #1
20000334:	0018      	movs	r0, r3
20000336:	f000 fe75 	bl	20001024 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, DISABLE);
2000033a:	2380      	movs	r3, #128	; 0x80
2000033c:	009b      	lsls	r3, r3, #2
2000033e:	2100      	movs	r1, #0
20000340:	0018      	movs	r0, r3
20000342:	f000 fe6f 	bl	20001024 <RCC_AHB1PeriphResetCmd>
}
20000346:	e00f      	b.n	20000368 <GPIO_DeInit+0x13c>
    if (GPIOx == GPIOK)
20000348:	687b      	ldr	r3, [r7, #4]
2000034a:	4a13      	ldr	r2, [pc, #76]	; (20000398 <GPIO_DeInit+0x16c>)
2000034c:	4293      	cmp	r3, r2
2000034e:	d10b      	bne.n	20000368 <GPIO_DeInit+0x13c>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
20000350:	2380      	movs	r3, #128	; 0x80
20000352:	00db      	lsls	r3, r3, #3
20000354:	2101      	movs	r1, #1
20000356:	0018      	movs	r0, r3
20000358:	f000 fe64 	bl	20001024 <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
2000035c:	2380      	movs	r3, #128	; 0x80
2000035e:	00db      	lsls	r3, r3, #3
20000360:	2100      	movs	r1, #0
20000362:	0018      	movs	r0, r3
20000364:	f000 fe5e 	bl	20001024 <RCC_AHB1PeriphResetCmd>
}
20000368:	46c0      	nop			; (mov r8, r8)
2000036a:	46bd      	mov	sp, r7
2000036c:	b002      	add	sp, #8
2000036e:	bd80      	pop	{r7, pc}
20000370:	40020000 	andmi	r0, r2, r0
20000374:	40020400 	andmi	r0, r2, r0, lsl #8
20000378:	40020800 	andmi	r0, r2, r0, lsl #16
2000037c:	40020c00 	andmi	r0, r2, r0, lsl #24
20000380:	40021000 	andmi	r1, r2, r0
20000384:	40021400 	andmi	r1, r2, r0, lsl #8
20000388:	40021800 	andmi	r1, r2, r0, lsl #16
2000038c:	40021c00 	andmi	r1, r2, r0, lsl #24
20000390:	40022000 	andmi	r2, r2, r0
20000394:	40022400 	andmi	r2, r2, r0, lsl #8
20000398:	40022800 	andmi	r2, r2, r0, lsl #16

2000039c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
2000039c:	b580      	push	{r7, lr}
2000039e:	b086      	sub	sp, #24
200003a0:	af00      	add	r7, sp, #0
200003a2:	6078      	str	r0, [r7, #4]
200003a4:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
200003a6:	2300      	movs	r3, #0
200003a8:	617b      	str	r3, [r7, #20]
200003aa:	2300      	movs	r3, #0
200003ac:	613b      	str	r3, [r7, #16]
200003ae:	2300      	movs	r3, #0
200003b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
200003b2:	2300      	movs	r3, #0
200003b4:	617b      	str	r3, [r7, #20]
200003b6:	e076      	b.n	200004a6 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
200003b8:	2201      	movs	r2, #1
200003ba:	697b      	ldr	r3, [r7, #20]
200003bc:	409a      	lsls	r2, r3
200003be:	0013      	movs	r3, r2
200003c0:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
200003c2:	683b      	ldr	r3, [r7, #0]
200003c4:	681a      	ldr	r2, [r3, #0]
200003c6:	693b      	ldr	r3, [r7, #16]
200003c8:	4013      	ands	r3, r2
200003ca:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
200003cc:	68fa      	ldr	r2, [r7, #12]
200003ce:	693b      	ldr	r3, [r7, #16]
200003d0:	429a      	cmp	r2, r3
200003d2:	d165      	bne.n	200004a0 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
200003d4:	687b      	ldr	r3, [r7, #4]
200003d6:	681b      	ldr	r3, [r3, #0]
200003d8:	697a      	ldr	r2, [r7, #20]
200003da:	0052      	lsls	r2, r2, #1
200003dc:	2103      	movs	r1, #3
200003de:	4091      	lsls	r1, r2
200003e0:	000a      	movs	r2, r1
200003e2:	43d2      	mvns	r2, r2
200003e4:	401a      	ands	r2, r3
200003e6:	687b      	ldr	r3, [r7, #4]
200003e8:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
200003ea:	687b      	ldr	r3, [r7, #4]
200003ec:	681a      	ldr	r2, [r3, #0]
200003ee:	683b      	ldr	r3, [r7, #0]
200003f0:	791b      	ldrb	r3, [r3, #4]
200003f2:	0019      	movs	r1, r3
200003f4:	697b      	ldr	r3, [r7, #20]
200003f6:	005b      	lsls	r3, r3, #1
200003f8:	4099      	lsls	r1, r3
200003fa:	000b      	movs	r3, r1
200003fc:	431a      	orrs	r2, r3
200003fe:	687b      	ldr	r3, [r7, #4]
20000400:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
20000402:	683b      	ldr	r3, [r7, #0]
20000404:	791b      	ldrb	r3, [r3, #4]
20000406:	2b01      	cmp	r3, #1
20000408:	d003      	beq.n	20000412 <GPIO_Init+0x76>
2000040a:	683b      	ldr	r3, [r7, #0]
2000040c:	791b      	ldrb	r3, [r3, #4]
2000040e:	2b02      	cmp	r3, #2
20000410:	d12e      	bne.n	20000470 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
20000412:	687b      	ldr	r3, [r7, #4]
20000414:	689b      	ldr	r3, [r3, #8]
20000416:	697a      	ldr	r2, [r7, #20]
20000418:	0052      	lsls	r2, r2, #1
2000041a:	2103      	movs	r1, #3
2000041c:	4091      	lsls	r1, r2
2000041e:	000a      	movs	r2, r1
20000420:	43d2      	mvns	r2, r2
20000422:	401a      	ands	r2, r3
20000424:	687b      	ldr	r3, [r7, #4]
20000426:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
20000428:	687b      	ldr	r3, [r7, #4]
2000042a:	689a      	ldr	r2, [r3, #8]
2000042c:	683b      	ldr	r3, [r7, #0]
2000042e:	795b      	ldrb	r3, [r3, #5]
20000430:	0019      	movs	r1, r3
20000432:	697b      	ldr	r3, [r7, #20]
20000434:	005b      	lsls	r3, r3, #1
20000436:	4099      	lsls	r1, r3
20000438:	000b      	movs	r3, r1
2000043a:	431a      	orrs	r2, r3
2000043c:	687b      	ldr	r3, [r7, #4]
2000043e:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
20000440:	687b      	ldr	r3, [r7, #4]
20000442:	685b      	ldr	r3, [r3, #4]
20000444:	697a      	ldr	r2, [r7, #20]
20000446:	b292      	uxth	r2, r2
20000448:	0011      	movs	r1, r2
2000044a:	2201      	movs	r2, #1
2000044c:	408a      	lsls	r2, r1
2000044e:	43d2      	mvns	r2, r2
20000450:	401a      	ands	r2, r3
20000452:	687b      	ldr	r3, [r7, #4]
20000454:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
20000456:	687b      	ldr	r3, [r7, #4]
20000458:	685b      	ldr	r3, [r3, #4]
2000045a:	683a      	ldr	r2, [r7, #0]
2000045c:	7992      	ldrb	r2, [r2, #6]
2000045e:	0011      	movs	r1, r2
20000460:	697a      	ldr	r2, [r7, #20]
20000462:	b292      	uxth	r2, r2
20000464:	4091      	lsls	r1, r2
20000466:	000a      	movs	r2, r1
20000468:	b292      	uxth	r2, r2
2000046a:	431a      	orrs	r2, r3
2000046c:	687b      	ldr	r3, [r7, #4]
2000046e:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
20000470:	687b      	ldr	r3, [r7, #4]
20000472:	68db      	ldr	r3, [r3, #12]
20000474:	697a      	ldr	r2, [r7, #20]
20000476:	b292      	uxth	r2, r2
20000478:	0052      	lsls	r2, r2, #1
2000047a:	2103      	movs	r1, #3
2000047c:	4091      	lsls	r1, r2
2000047e:	000a      	movs	r2, r1
20000480:	43d2      	mvns	r2, r2
20000482:	401a      	ands	r2, r3
20000484:	687b      	ldr	r3, [r7, #4]
20000486:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
20000488:	687b      	ldr	r3, [r7, #4]
2000048a:	68da      	ldr	r2, [r3, #12]
2000048c:	683b      	ldr	r3, [r7, #0]
2000048e:	79db      	ldrb	r3, [r3, #7]
20000490:	0019      	movs	r1, r3
20000492:	697b      	ldr	r3, [r7, #20]
20000494:	005b      	lsls	r3, r3, #1
20000496:	4099      	lsls	r1, r3
20000498:	000b      	movs	r3, r1
2000049a:	431a      	orrs	r2, r3
2000049c:	687b      	ldr	r3, [r7, #4]
2000049e:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
200004a0:	697b      	ldr	r3, [r7, #20]
200004a2:	3301      	adds	r3, #1
200004a4:	617b      	str	r3, [r7, #20]
200004a6:	697b      	ldr	r3, [r7, #20]
200004a8:	2b0f      	cmp	r3, #15
200004aa:	d985      	bls.n	200003b8 <GPIO_Init+0x1c>
    }
  }
}
200004ac:	46c0      	nop			; (mov r8, r8)
200004ae:	46c0      	nop			; (mov r8, r8)
200004b0:	46bd      	mov	sp, r7
200004b2:	b006      	add	sp, #24
200004b4:	bd80      	pop	{r7, pc}

200004b6 <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
200004b6:	b580      	push	{r7, lr}
200004b8:	b082      	sub	sp, #8
200004ba:	af00      	add	r7, sp, #0
200004bc:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
200004be:	687b      	ldr	r3, [r7, #4]
200004c0:	4a08      	ldr	r2, [pc, #32]	; (200004e4 <GPIO_StructInit+0x2e>)
200004c2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
200004c4:	687b      	ldr	r3, [r7, #4]
200004c6:	2200      	movs	r2, #0
200004c8:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
200004ca:	687b      	ldr	r3, [r7, #4]
200004cc:	2200      	movs	r2, #0
200004ce:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
200004d0:	687b      	ldr	r3, [r7, #4]
200004d2:	2200      	movs	r2, #0
200004d4:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
200004d6:	687b      	ldr	r3, [r7, #4]
200004d8:	2200      	movs	r2, #0
200004da:	71da      	strb	r2, [r3, #7]
}
200004dc:	46c0      	nop			; (mov r8, r8)
200004de:	46bd      	mov	sp, r7
200004e0:	b002      	add	sp, #8
200004e2:	bd80      	pop	{r7, pc}
200004e4:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>

200004e8 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
200004e8:	b580      	push	{r7, lr}
200004ea:	b084      	sub	sp, #16
200004ec:	af00      	add	r7, sp, #0
200004ee:	6078      	str	r0, [r7, #4]
200004f0:	000a      	movs	r2, r1
200004f2:	1cbb      	adds	r3, r7, #2
200004f4:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmp = 0x00010000;
200004f6:	2380      	movs	r3, #128	; 0x80
200004f8:	025b      	lsls	r3, r3, #9
200004fa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
200004fc:	1cbb      	adds	r3, r7, #2
200004fe:	881a      	ldrh	r2, [r3, #0]
20000500:	68fb      	ldr	r3, [r7, #12]
20000502:	4313      	orrs	r3, r2
20000504:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
20000506:	68fa      	ldr	r2, [r7, #12]
20000508:	687b      	ldr	r3, [r7, #4]
2000050a:	61da      	str	r2, [r3, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
2000050c:	1cbb      	adds	r3, r7, #2
2000050e:	881a      	ldrh	r2, [r3, #0]
20000510:	687b      	ldr	r3, [r7, #4]
20000512:	61da      	str	r2, [r3, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
20000514:	68fa      	ldr	r2, [r7, #12]
20000516:	687b      	ldr	r3, [r7, #4]
20000518:	61da      	str	r2, [r3, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
2000051a:	687b      	ldr	r3, [r7, #4]
2000051c:	69db      	ldr	r3, [r3, #28]
2000051e:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
20000520:	687b      	ldr	r3, [r7, #4]
20000522:	69db      	ldr	r3, [r3, #28]
20000524:	60fb      	str	r3, [r7, #12]
}
20000526:	46c0      	nop			; (mov r8, r8)
20000528:	46bd      	mov	sp, r7
2000052a:	b004      	add	sp, #16
2000052c:	bd80      	pop	{r7, pc}

2000052e <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
2000052e:	b580      	push	{r7, lr}
20000530:	b084      	sub	sp, #16
20000532:	af00      	add	r7, sp, #0
20000534:	6078      	str	r0, [r7, #4]
20000536:	000a      	movs	r2, r1
20000538:	1cbb      	adds	r3, r7, #2
2000053a:	801a      	strh	r2, [r3, #0]
  uint8_t bitstatus = 0x00;
2000053c:	210f      	movs	r1, #15
2000053e:	187b      	adds	r3, r7, r1
20000540:	2200      	movs	r2, #0
20000542:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
20000544:	687b      	ldr	r3, [r7, #4]
20000546:	691b      	ldr	r3, [r3, #16]
20000548:	1cba      	adds	r2, r7, #2
2000054a:	8812      	ldrh	r2, [r2, #0]
2000054c:	4013      	ands	r3, r2
2000054e:	d003      	beq.n	20000558 <GPIO_ReadInputDataBit+0x2a>
  {
    bitstatus = (uint8_t)Bit_SET;
20000550:	187b      	adds	r3, r7, r1
20000552:	2201      	movs	r2, #1
20000554:	701a      	strb	r2, [r3, #0]
20000556:	e003      	b.n	20000560 <GPIO_ReadInputDataBit+0x32>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
20000558:	230f      	movs	r3, #15
2000055a:	18fb      	adds	r3, r7, r3
2000055c:	2200      	movs	r2, #0
2000055e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
20000560:	230f      	movs	r3, #15
20000562:	18fb      	adds	r3, r7, r3
20000564:	781b      	ldrb	r3, [r3, #0]
}
20000566:	0018      	movs	r0, r3
20000568:	46bd      	mov	sp, r7
2000056a:	b004      	add	sp, #16
2000056c:	bd80      	pop	{r7, pc}

2000056e <GPIO_ReadInputData>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
2000056e:	b580      	push	{r7, lr}
20000570:	b082      	sub	sp, #8
20000572:	af00      	add	r7, sp, #0
20000574:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
20000576:	687b      	ldr	r3, [r7, #4]
20000578:	691b      	ldr	r3, [r3, #16]
2000057a:	b29b      	uxth	r3, r3
}
2000057c:	0018      	movs	r0, r3
2000057e:	46bd      	mov	sp, r7
20000580:	b002      	add	sp, #8
20000582:	bd80      	pop	{r7, pc}

20000584 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *          This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20000584:	b580      	push	{r7, lr}
20000586:	b084      	sub	sp, #16
20000588:	af00      	add	r7, sp, #0
2000058a:	6078      	str	r0, [r7, #4]
2000058c:	000a      	movs	r2, r1
2000058e:	1cbb      	adds	r3, r7, #2
20000590:	801a      	strh	r2, [r3, #0]
  uint8_t bitstatus = 0x00;
20000592:	210f      	movs	r1, #15
20000594:	187b      	adds	r3, r7, r1
20000596:	2200      	movs	r2, #0
20000598:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if (((GPIOx->ODR) & GPIO_Pin) != (uint32_t)Bit_RESET)
2000059a:	687b      	ldr	r3, [r7, #4]
2000059c:	695b      	ldr	r3, [r3, #20]
2000059e:	1cba      	adds	r2, r7, #2
200005a0:	8812      	ldrh	r2, [r2, #0]
200005a2:	4013      	ands	r3, r2
200005a4:	d003      	beq.n	200005ae <GPIO_ReadOutputDataBit+0x2a>
  {
    bitstatus = (uint8_t)Bit_SET;
200005a6:	187b      	adds	r3, r7, r1
200005a8:	2201      	movs	r2, #1
200005aa:	701a      	strb	r2, [r3, #0]
200005ac:	e003      	b.n	200005b6 <GPIO_ReadOutputDataBit+0x32>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
200005ae:	230f      	movs	r3, #15
200005b0:	18fb      	adds	r3, r7, r3
200005b2:	2200      	movs	r2, #0
200005b4:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
200005b6:	230f      	movs	r3, #15
200005b8:	18fb      	adds	r3, r7, r3
200005ba:	781b      	ldrb	r3, [r3, #0]
}
200005bc:	0018      	movs	r0, r3
200005be:	46bd      	mov	sp, r7
200005c0:	b004      	add	sp, #16
200005c2:	bd80      	pop	{r7, pc}

200005c4 <GPIO_ReadOutputData>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
200005c4:	b580      	push	{r7, lr}
200005c6:	b082      	sub	sp, #8
200005c8:	af00      	add	r7, sp, #0
200005ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
200005cc:	687b      	ldr	r3, [r7, #4]
200005ce:	695b      	ldr	r3, [r3, #20]
200005d0:	b29b      	uxth	r3, r3
}
200005d2:	0018      	movs	r0, r3
200005d4:	46bd      	mov	sp, r7
200005d6:	b002      	add	sp, #8
200005d8:	bd80      	pop	{r7, pc}

200005da <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
200005da:	b580      	push	{r7, lr}
200005dc:	b082      	sub	sp, #8
200005de:	af00      	add	r7, sp, #0
200005e0:	6078      	str	r0, [r7, #4]
200005e2:	000a      	movs	r2, r1
200005e4:	1cbb      	adds	r3, r7, #2
200005e6:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
200005e8:	687b      	ldr	r3, [r7, #4]
200005ea:	1cba      	adds	r2, r7, #2
200005ec:	8812      	ldrh	r2, [r2, #0]
200005ee:	831a      	strh	r2, [r3, #24]
}
200005f0:	46c0      	nop			; (mov r8, r8)
200005f2:	46bd      	mov	sp, r7
200005f4:	b002      	add	sp, #8
200005f6:	bd80      	pop	{r7, pc}

200005f8 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
200005f8:	b580      	push	{r7, lr}
200005fa:	b082      	sub	sp, #8
200005fc:	af00      	add	r7, sp, #0
200005fe:	6078      	str	r0, [r7, #4]
20000600:	000a      	movs	r2, r1
20000602:	1cbb      	adds	r3, r7, #2
20000604:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
20000606:	687b      	ldr	r3, [r7, #4]
20000608:	1cba      	adds	r2, r7, #2
2000060a:	8812      	ldrh	r2, [r2, #0]
2000060c:	835a      	strh	r2, [r3, #26]
}
2000060e:	46c0      	nop			; (mov r8, r8)
20000610:	46bd      	mov	sp, r7
20000612:	b002      	add	sp, #8
20000614:	bd80      	pop	{r7, pc}

20000616 <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
20000616:	b580      	push	{r7, lr}
20000618:	b082      	sub	sp, #8
2000061a:	af00      	add	r7, sp, #0
2000061c:	6078      	str	r0, [r7, #4]
2000061e:	0008      	movs	r0, r1
20000620:	0011      	movs	r1, r2
20000622:	1cbb      	adds	r3, r7, #2
20000624:	1c02      	adds	r2, r0, #0
20000626:	801a      	strh	r2, [r3, #0]
20000628:	1c7b      	adds	r3, r7, #1
2000062a:	1c0a      	adds	r2, r1, #0
2000062c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
2000062e:	1c7b      	adds	r3, r7, #1
20000630:	781b      	ldrb	r3, [r3, #0]
20000632:	2b00      	cmp	r3, #0
20000634:	d004      	beq.n	20000640 <GPIO_WriteBit+0x2a>
  {
    GPIOx->BSRRL = GPIO_Pin;
20000636:	687b      	ldr	r3, [r7, #4]
20000638:	1cba      	adds	r2, r7, #2
2000063a:	8812      	ldrh	r2, [r2, #0]
2000063c:	831a      	strh	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
  }
}
2000063e:	e003      	b.n	20000648 <GPIO_WriteBit+0x32>
    GPIOx->BSRRH = GPIO_Pin ;
20000640:	687b      	ldr	r3, [r7, #4]
20000642:	1cba      	adds	r2, r7, #2
20000644:	8812      	ldrh	r2, [r2, #0]
20000646:	835a      	strh	r2, [r3, #26]
}
20000648:	46c0      	nop			; (mov r8, r8)
2000064a:	46bd      	mov	sp, r7
2000064c:	b002      	add	sp, #8
2000064e:	bd80      	pop	{r7, pc}

20000650 <GPIO_Write>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
20000650:	b580      	push	{r7, lr}
20000652:	b082      	sub	sp, #8
20000654:	af00      	add	r7, sp, #0
20000656:	6078      	str	r0, [r7, #4]
20000658:	000a      	movs	r2, r1
2000065a:	1cbb      	adds	r3, r7, #2
2000065c:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
2000065e:	1cbb      	adds	r3, r7, #2
20000660:	881a      	ldrh	r2, [r3, #0]
20000662:	687b      	ldr	r3, [r7, #4]
20000664:	615a      	str	r2, [r3, #20]
}
20000666:	46c0      	nop			; (mov r8, r8)
20000668:	46bd      	mov	sp, r7
2000066a:	b002      	add	sp, #8
2000066c:	bd80      	pop	{r7, pc}

2000066e <GPIO_ToggleBits>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
2000066e:	b580      	push	{r7, lr}
20000670:	b082      	sub	sp, #8
20000672:	af00      	add	r7, sp, #0
20000674:	6078      	str	r0, [r7, #4]
20000676:	000a      	movs	r2, r1
20000678:	1cbb      	adds	r3, r7, #2
2000067a:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
2000067c:	687b      	ldr	r3, [r7, #4]
2000067e:	695a      	ldr	r2, [r3, #20]
20000680:	1cbb      	adds	r3, r7, #2
20000682:	881b      	ldrh	r3, [r3, #0]
20000684:	405a      	eors	r2, r3
20000686:	687b      	ldr	r3, [r7, #4]
20000688:	615a      	str	r2, [r3, #20]
}
2000068a:	46c0      	nop			; (mov r8, r8)
2000068c:	46bd      	mov	sp, r7
2000068e:	b002      	add	sp, #8
20000690:	bd80      	pop	{r7, pc}

20000692 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
20000692:	b580      	push	{r7, lr}
20000694:	b084      	sub	sp, #16
20000696:	af00      	add	r7, sp, #0
20000698:	6078      	str	r0, [r7, #4]
2000069a:	0008      	movs	r0, r1
2000069c:	0011      	movs	r1, r2
2000069e:	1cbb      	adds	r3, r7, #2
200006a0:	1c02      	adds	r2, r0, #0
200006a2:	801a      	strh	r2, [r3, #0]
200006a4:	1c7b      	adds	r3, r7, #1
200006a6:	1c0a      	adds	r2, r1, #0
200006a8:	701a      	strb	r2, [r3, #0]
  uint32_t temp = 0x00;
200006aa:	2300      	movs	r3, #0
200006ac:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
200006ae:	2300      	movs	r3, #0
200006b0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
200006b2:	1c7b      	adds	r3, r7, #1
200006b4:	781a      	ldrb	r2, [r3, #0]
200006b6:	1cbb      	adds	r3, r7, #2
200006b8:	881b      	ldrh	r3, [r3, #0]
200006ba:	2107      	movs	r1, #7
200006bc:	400b      	ands	r3, r1
200006be:	009b      	lsls	r3, r3, #2
200006c0:	409a      	lsls	r2, r3
200006c2:	0013      	movs	r3, r2
200006c4:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
200006c6:	1cbb      	adds	r3, r7, #2
200006c8:	881b      	ldrh	r3, [r3, #0]
200006ca:	08db      	lsrs	r3, r3, #3
200006cc:	b29b      	uxth	r3, r3
200006ce:	001a      	movs	r2, r3
200006d0:	687b      	ldr	r3, [r7, #4]
200006d2:	3208      	adds	r2, #8
200006d4:	0092      	lsls	r2, r2, #2
200006d6:	58d3      	ldr	r3, [r2, r3]
200006d8:	1cba      	adds	r2, r7, #2
200006da:	8812      	ldrh	r2, [r2, #0]
200006dc:	2107      	movs	r1, #7
200006de:	400a      	ands	r2, r1
200006e0:	0092      	lsls	r2, r2, #2
200006e2:	210f      	movs	r1, #15
200006e4:	4091      	lsls	r1, r2
200006e6:	000a      	movs	r2, r1
200006e8:	43d2      	mvns	r2, r2
200006ea:	1cb9      	adds	r1, r7, #2
200006ec:	8809      	ldrh	r1, [r1, #0]
200006ee:	08c9      	lsrs	r1, r1, #3
200006f0:	b289      	uxth	r1, r1
200006f2:	0008      	movs	r0, r1
200006f4:	401a      	ands	r2, r3
200006f6:	0011      	movs	r1, r2
200006f8:	687b      	ldr	r3, [r7, #4]
200006fa:	0002      	movs	r2, r0
200006fc:	3208      	adds	r2, #8
200006fe:	0092      	lsls	r2, r2, #2
20000700:	50d1      	str	r1, [r2, r3]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
20000702:	1cbb      	adds	r3, r7, #2
20000704:	881b      	ldrh	r3, [r3, #0]
20000706:	08db      	lsrs	r3, r3, #3
20000708:	b29b      	uxth	r3, r3
2000070a:	001a      	movs	r2, r3
2000070c:	687b      	ldr	r3, [r7, #4]
2000070e:	3208      	adds	r2, #8
20000710:	0092      	lsls	r2, r2, #2
20000712:	58d3      	ldr	r3, [r2, r3]
20000714:	68fa      	ldr	r2, [r7, #12]
20000716:	4313      	orrs	r3, r2
20000718:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
2000071a:	1cbb      	adds	r3, r7, #2
2000071c:	881b      	ldrh	r3, [r3, #0]
2000071e:	08db      	lsrs	r3, r3, #3
20000720:	b29b      	uxth	r3, r3
20000722:	001a      	movs	r2, r3
20000724:	687b      	ldr	r3, [r7, #4]
20000726:	3208      	adds	r2, #8
20000728:	0092      	lsls	r2, r2, #2
2000072a:	68b9      	ldr	r1, [r7, #8]
2000072c:	50d1      	str	r1, [r2, r3]
}
2000072e:	46c0      	nop			; (mov r8, r8)
20000730:	46bd      	mov	sp, r7
20000732:	b004      	add	sp, #16
20000734:	bd80      	pop	{r7, pc}
20000736:	46c0      	nop			; (mov r8, r8)

20000738 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
20000738:	b580      	push	{r7, lr}
2000073a:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
2000073c:	4b14      	ldr	r3, [pc, #80]	; (20000790 <RCC_DeInit+0x58>)
2000073e:	681a      	ldr	r2, [r3, #0]
20000740:	4b13      	ldr	r3, [pc, #76]	; (20000790 <RCC_DeInit+0x58>)
20000742:	2101      	movs	r1, #1
20000744:	430a      	orrs	r2, r1
20000746:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
20000748:	4b11      	ldr	r3, [pc, #68]	; (20000790 <RCC_DeInit+0x58>)
2000074a:	2200      	movs	r2, #0
2000074c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42xxx/43xxx/446xx/469xx/479xx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
2000074e:	4b10      	ldr	r3, [pc, #64]	; (20000790 <RCC_DeInit+0x58>)
20000750:	681a      	ldr	r2, [r3, #0]
20000752:	4b0f      	ldr	r3, [pc, #60]	; (20000790 <RCC_DeInit+0x58>)
20000754:	490f      	ldr	r1, [pc, #60]	; (20000794 <RCC_DeInit+0x5c>)
20000756:	400a      	ands	r2, r1
20000758:	601a      	str	r2, [r3, #0]
  
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
2000075a:	4b0d      	ldr	r3, [pc, #52]	; (20000790 <RCC_DeInit+0x58>)
2000075c:	4a0e      	ldr	r2, [pc, #56]	; (20000798 <RCC_DeInit+0x60>)
2000075e:	605a      	str	r2, [r3, #4]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F413_423xx) || defined(STM32F469_479xx)  
  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
20000760:	4a0b      	ldr	r2, [pc, #44]	; (20000790 <RCC_DeInit+0x58>)
20000762:	2384      	movs	r3, #132	; 0x84
20000764:	490d      	ldr	r1, [pc, #52]	; (2000079c <RCC_DeInit+0x64>)
20000766:	50d1      	str	r1, [r2, r3]
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE || STM32F446xx || STM32F413_423xx || STM32F469_479xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx) 
  /* Reset PLLSAICFGR register, only available for STM32F42xxx/43xxx/446xx/469xx/479xx devices */
  RCC->PLLSAICFGR = 0x24003000;
20000768:	4a09      	ldr	r2, [pc, #36]	; (20000790 <RCC_DeInit+0x58>)
2000076a:	2388      	movs	r3, #136	; 0x88
2000076c:	490c      	ldr	r1, [pc, #48]	; (200007a0 <RCC_DeInit+0x68>)
2000076e:	50d1      	str	r1, [r2, r3]
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F446xx || STM32F469_479xx */
  
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
20000770:	4b07      	ldr	r3, [pc, #28]	; (20000790 <RCC_DeInit+0x58>)
20000772:	681a      	ldr	r2, [r3, #0]
20000774:	4b06      	ldr	r3, [pc, #24]	; (20000790 <RCC_DeInit+0x58>)
20000776:	490b      	ldr	r1, [pc, #44]	; (200007a4 <RCC_DeInit+0x6c>)
20000778:	400a      	ands	r2, r1
2000077a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
2000077c:	4b04      	ldr	r3, [pc, #16]	; (20000790 <RCC_DeInit+0x58>)
2000077e:	2200      	movs	r2, #0
20000780:	60da      	str	r2, [r3, #12]

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx and STM32F413_423xx devices */
  RCC->DCKCFGR = 0x00000000;
20000782:	4a03      	ldr	r2, [pc, #12]	; (20000790 <RCC_DeInit+0x58>)
20000784:	238c      	movs	r3, #140	; 0x8c
20000786:	2100      	movs	r1, #0
20000788:	50d1      	str	r1, [r2, r3]
  
#if defined(STM32F410xx) || defined(STM32F413_423xx)
  /* Disable LPTIM and FMPI2C clock prescalers selection, only available for STM32F410xx and STM32F413_423xx devices */
  RCC->DCKCFGR2 = 0x00000000;
#endif /* STM32F410xx || STM32F413_423xx */  
}
2000078a:	46c0      	nop			; (mov r8, r8)
2000078c:	46bd      	mov	sp, r7
2000078e:	bd80      	pop	{r7, pc}
20000790:	40023800 	andmi	r3, r2, r0, lsl #16
20000794:	eaf6ffff 	b	1fdc0798 <startup-0x23f868>
20000798:	24003010 	strcs	r3, [r0], #-16
2000079c:	20003000 	andcs	r3, r0, r0
200007a0:	24003000 	strcs	r3, [r0], #-0
200007a4:	fffbffff 			; <UNDEFINED> instruction: 0xfffbffff

200007a8 <RCC_HSEConfig>:
  *            @arg RCC_HSE_ON: turn ON the HSE oscillator
  *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint8_t RCC_HSE)
{
200007a8:	b580      	push	{r7, lr}
200007aa:	b082      	sub	sp, #8
200007ac:	af00      	add	r7, sp, #0
200007ae:	0002      	movs	r2, r0
200007b0:	1dfb      	adds	r3, r7, #7
200007b2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
200007b4:	4b05      	ldr	r3, [pc, #20]	; (200007cc <RCC_HSEConfig+0x24>)
200007b6:	2200      	movs	r2, #0
200007b8:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
200007ba:	4a04      	ldr	r2, [pc, #16]	; (200007cc <RCC_HSEConfig+0x24>)
200007bc:	1dfb      	adds	r3, r7, #7
200007be:	781b      	ldrb	r3, [r3, #0]
200007c0:	7013      	strb	r3, [r2, #0]
}
200007c2:	46c0      	nop			; (mov r8, r8)
200007c4:	46bd      	mov	sp, r7
200007c6:	b002      	add	sp, #8
200007c8:	bd80      	pop	{r7, pc}
200007ca:	46c0      	nop			; (mov r8, r8)
200007cc:	40023802 	andmi	r3, r2, r2, lsl #16

200007d0 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
200007d0:	b590      	push	{r4, r7, lr}
200007d2:	b083      	sub	sp, #12
200007d4:	af00      	add	r7, sp, #0
  __IO uint32_t startupcounter = 0;
200007d6:	2300      	movs	r3, #0
200007d8:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
200007da:	1dfb      	adds	r3, r7, #7
200007dc:	2200      	movs	r2, #0
200007de:	701a      	strb	r2, [r3, #0]
  FlagStatus hsestatus = RESET;
200007e0:	1dbb      	adds	r3, r7, #6
200007e2:	2200      	movs	r2, #0
200007e4:	701a      	strb	r2, [r3, #0]
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
200007e6:	1dbc      	adds	r4, r7, #6
200007e8:	2031      	movs	r0, #49	; 0x31
200007ea:	f000 fda1 	bl	20001330 <RCC_GetFlagStatus>
200007ee:	0003      	movs	r3, r0
200007f0:	7023      	strb	r3, [r4, #0]
    startupcounter++;
200007f2:	683b      	ldr	r3, [r7, #0]
200007f4:	3301      	adds	r3, #1
200007f6:	603b      	str	r3, [r7, #0]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
200007f8:	683a      	ldr	r2, [r7, #0]
200007fa:	23a0      	movs	r3, #160	; 0xa0
200007fc:	01db      	lsls	r3, r3, #7
200007fe:	429a      	cmp	r2, r3
20000800:	d003      	beq.n	2000080a <RCC_WaitForHSEStartUp+0x3a>
20000802:	1dbb      	adds	r3, r7, #6
20000804:	781b      	ldrb	r3, [r3, #0]
20000806:	2b00      	cmp	r3, #0
20000808:	d0ed      	beq.n	200007e6 <RCC_WaitForHSEStartUp+0x16>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
2000080a:	2031      	movs	r0, #49	; 0x31
2000080c:	f000 fd90 	bl	20001330 <RCC_GetFlagStatus>
20000810:	1e03      	subs	r3, r0, #0
20000812:	d003      	beq.n	2000081c <RCC_WaitForHSEStartUp+0x4c>
  {
    status = SUCCESS;
20000814:	1dfb      	adds	r3, r7, #7
20000816:	2201      	movs	r2, #1
20000818:	701a      	strb	r2, [r3, #0]
2000081a:	e002      	b.n	20000822 <RCC_WaitForHSEStartUp+0x52>
  }
  else
  {
    status = ERROR;
2000081c:	1dfb      	adds	r3, r7, #7
2000081e:	2200      	movs	r2, #0
20000820:	701a      	strb	r2, [r3, #0]
  }
  return (status);
20000822:	1dfb      	adds	r3, r7, #7
20000824:	781b      	ldrb	r3, [r3, #0]
}
20000826:	0018      	movs	r0, r3
20000828:	46bd      	mov	sp, r7
2000082a:	b003      	add	sp, #12
2000082c:	bd90      	pop	{r4, r7, pc}

2000082e <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *         This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
2000082e:	b580      	push	{r7, lr}
20000830:	b084      	sub	sp, #16
20000832:	af00      	add	r7, sp, #0
20000834:	0002      	movs	r2, r0
20000836:	1dfb      	adds	r3, r7, #7
20000838:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0;
2000083a:	2300      	movs	r3, #0
2000083c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
2000083e:	4b0a      	ldr	r3, [pc, #40]	; (20000868 <RCC_AdjustHSICalibrationValue+0x3a>)
20000840:	681b      	ldr	r3, [r3, #0]
20000842:	60fb      	str	r3, [r7, #12]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
20000844:	68fb      	ldr	r3, [r7, #12]
20000846:	22f8      	movs	r2, #248	; 0xf8
20000848:	4393      	bics	r3, r2
2000084a:	60fb      	str	r3, [r7, #12]

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
2000084c:	1dfb      	adds	r3, r7, #7
2000084e:	781b      	ldrb	r3, [r3, #0]
20000850:	00db      	lsls	r3, r3, #3
20000852:	68fa      	ldr	r2, [r7, #12]
20000854:	4313      	orrs	r3, r2
20000856:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CR = tmpreg;
20000858:	4b03      	ldr	r3, [pc, #12]	; (20000868 <RCC_AdjustHSICalibrationValue+0x3a>)
2000085a:	68fa      	ldr	r2, [r7, #12]
2000085c:	601a      	str	r2, [r3, #0]
}
2000085e:	46c0      	nop			; (mov r8, r8)
20000860:	46bd      	mov	sp, r7
20000862:	b004      	add	sp, #16
20000864:	bd80      	pop	{r7, pc}
20000866:	46c0      	nop			; (mov r8, r8)
20000868:	40023800 	andmi	r3, r2, r0, lsl #16

2000086c <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.  
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
2000086c:	b580      	push	{r7, lr}
2000086e:	b082      	sub	sp, #8
20000870:	af00      	add	r7, sp, #0
20000872:	0002      	movs	r2, r0
20000874:	1dfb      	adds	r3, r7, #7
20000876:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
20000878:	4b03      	ldr	r3, [pc, #12]	; (20000888 <RCC_HSICmd+0x1c>)
2000087a:	1dfa      	adds	r2, r7, #7
2000087c:	7812      	ldrb	r2, [r2, #0]
2000087e:	601a      	str	r2, [r3, #0]
}
20000880:	46c0      	nop			; (mov r8, r8)
20000882:	46bd      	mov	sp, r7
20000884:	b002      	add	sp, #8
20000886:	bd80      	pop	{r7, pc}
20000888:	42470000 	submi	r0, r7, #0

2000088c <RCC_LSEConfig>:
  *            @arg RCC_LSE_ON: turn ON the LSE oscillator
  *            @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
2000088c:	b580      	push	{r7, lr}
2000088e:	b082      	sub	sp, #8
20000890:	af00      	add	r7, sp, #0
20000892:	0002      	movs	r2, r0
20000894:	1dfb      	adds	r3, r7, #7
20000896:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
20000898:	4b0c      	ldr	r3, [pc, #48]	; (200008cc <RCC_LSEConfig+0x40>)
2000089a:	2200      	movs	r2, #0
2000089c:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
2000089e:	4b0b      	ldr	r3, [pc, #44]	; (200008cc <RCC_LSEConfig+0x40>)
200008a0:	2200      	movs	r2, #0
200008a2:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
200008a4:	1dfb      	adds	r3, r7, #7
200008a6:	781b      	ldrb	r3, [r3, #0]
200008a8:	2b01      	cmp	r3, #1
200008aa:	d002      	beq.n	200008b2 <RCC_LSEConfig+0x26>
200008ac:	2b04      	cmp	r3, #4
200008ae:	d004      	beq.n	200008ba <RCC_LSEConfig+0x2e>
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;
    default:
      break;
200008b0:	e007      	b.n	200008c2 <RCC_LSEConfig+0x36>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
200008b2:	4b06      	ldr	r3, [pc, #24]	; (200008cc <RCC_LSEConfig+0x40>)
200008b4:	2201      	movs	r2, #1
200008b6:	701a      	strb	r2, [r3, #0]
      break;
200008b8:	e003      	b.n	200008c2 <RCC_LSEConfig+0x36>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
200008ba:	4b04      	ldr	r3, [pc, #16]	; (200008cc <RCC_LSEConfig+0x40>)
200008bc:	2205      	movs	r2, #5
200008be:	701a      	strb	r2, [r3, #0]
      break;
200008c0:	46c0      	nop			; (mov r8, r8)
  }
}
200008c2:	46c0      	nop			; (mov r8, r8)
200008c4:	46bd      	mov	sp, r7
200008c6:	b002      	add	sp, #8
200008c8:	bd80      	pop	{r7, pc}
200008ca:	46c0      	nop			; (mov r8, r8)
200008cc:	40023870 	andmi	r3, r2, r0, ror r8

200008d0 <RCC_LSICmd>:
  * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
  *         clock cycles. 
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
200008d0:	b580      	push	{r7, lr}
200008d2:	b082      	sub	sp, #8
200008d4:	af00      	add	r7, sp, #0
200008d6:	0002      	movs	r2, r0
200008d8:	1dfb      	adds	r3, r7, #7
200008da:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
200008dc:	4b03      	ldr	r3, [pc, #12]	; (200008ec <RCC_LSICmd+0x1c>)
200008de:	1dfa      	adds	r2, r7, #7
200008e0:	7812      	ldrb	r2, [r2, #0]
200008e2:	601a      	str	r2, [r3, #0]
}
200008e4:	46c0      	nop			; (mov r8, r8)
200008e6:	46bd      	mov	sp, r7
200008e8:	b002      	add	sp, #8
200008ea:	bd80      	pop	{r7, pc}
200008ec:	42470e80 	submi	r0, r7, #128, 28	; 0x800

200008f0 <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
200008f0:	b580      	push	{r7, lr}
200008f2:	b084      	sub	sp, #16
200008f4:	af00      	add	r7, sp, #0
200008f6:	60f8      	str	r0, [r7, #12]
200008f8:	60b9      	str	r1, [r7, #8]
200008fa:	607a      	str	r2, [r7, #4]
200008fc:	603b      	str	r3, [r7, #0]
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
200008fe:	687b      	ldr	r3, [r7, #4]
20000900:	019a      	lsls	r2, r3, #6
20000902:	68bb      	ldr	r3, [r7, #8]
20000904:	431a      	orrs	r2, r3
20000906:	683b      	ldr	r3, [r7, #0]
20000908:	085b      	lsrs	r3, r3, #1
2000090a:	3b01      	subs	r3, #1
2000090c:	041b      	lsls	r3, r3, #16
2000090e:	431a      	orrs	r2, r3
20000910:	68fb      	ldr	r3, [r7, #12]
20000912:	431a      	orrs	r2, r3
20000914:	0011      	movs	r1, r2
                 (PLLQ << 24);
20000916:	69bb      	ldr	r3, [r7, #24]
20000918:	061a      	lsls	r2, r3, #24
  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
2000091a:	4b03      	ldr	r3, [pc, #12]	; (20000928 <RCC_PLLConfig+0x38>)
2000091c:	430a      	orrs	r2, r1
2000091e:	605a      	str	r2, [r3, #4]
}
20000920:	46c0      	nop			; (mov r8, r8)
20000922:	46bd      	mov	sp, r7
20000924:	b004      	add	sp, #16
20000926:	bd80      	pop	{r7, pc}
20000928:	40023800 	andmi	r3, r2, r0, lsl #16

2000092c <RCC_PLLCmd>:
  * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
  * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
2000092c:	b580      	push	{r7, lr}
2000092e:	b082      	sub	sp, #8
20000930:	af00      	add	r7, sp, #0
20000932:	0002      	movs	r2, r0
20000934:	1dfb      	adds	r3, r7, #7
20000936:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
20000938:	4b03      	ldr	r3, [pc, #12]	; (20000948 <RCC_PLLCmd+0x1c>)
2000093a:	1dfa      	adds	r2, r7, #7
2000093c:	7812      	ldrb	r2, [r2, #0]
2000093e:	601a      	str	r2, [r3, #0]
}
20000940:	46c0      	nop			; (mov r8, r8)
20000942:	46bd      	mov	sp, r7
20000944:	b002      	add	sp, #8
20000946:	bd80      	pop	{r7, pc}
20000948:	42470060 	submi	r0, r7, #96	; 0x60

2000094c <RCC_PLLI2SConfig>:
  *         on the I2S clock frequency.
  *   
  * @retval None
  */
void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR)
{
2000094c:	b580      	push	{r7, lr}
2000094e:	b082      	sub	sp, #8
20000950:	af00      	add	r7, sp, #0
20000952:	6078      	str	r0, [r7, #4]
20000954:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
20000956:	687b      	ldr	r3, [r7, #4]
20000958:	019a      	lsls	r2, r3, #6
2000095a:	683b      	ldr	r3, [r7, #0]
2000095c:	071b      	lsls	r3, r3, #28
2000095e:	4904      	ldr	r1, [pc, #16]	; (20000970 <RCC_PLLI2SConfig+0x24>)
20000960:	4313      	orrs	r3, r2
20000962:	2284      	movs	r2, #132	; 0x84
20000964:	508b      	str	r3, [r1, r2]
}
20000966:	46c0      	nop			; (mov r8, r8)
20000968:	46bd      	mov	sp, r7
2000096a:	b002      	add	sp, #8
2000096c:	bd80      	pop	{r7, pc}
2000096e:	46c0      	nop			; (mov r8, r8)
20000970:	40023800 	andmi	r3, r2, r0, lsl #16

20000974 <RCC_PLLI2SCmd>:
  * @note   The PLLI2S is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLI2S. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
20000974:	b580      	push	{r7, lr}
20000976:	b082      	sub	sp, #8
20000978:	af00      	add	r7, sp, #0
2000097a:	0002      	movs	r2, r0
2000097c:	1dfb      	adds	r3, r7, #7
2000097e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
20000980:	4b03      	ldr	r3, [pc, #12]	; (20000990 <RCC_PLLI2SCmd+0x1c>)
20000982:	1dfa      	adds	r2, r7, #7
20000984:	7812      	ldrb	r2, [r2, #0]
20000986:	601a      	str	r2, [r3, #0]
}
20000988:	46c0      	nop			; (mov r8, r8)
2000098a:	46bd      	mov	sp, r7
2000098c:	b002      	add	sp, #8
2000098e:	bd80      	pop	{r7, pc}
20000990:	42470068 	submi	r0, r7, #104	; 0x68

20000994 <RCC_PLLSAIConfig>:
  *          This parameter must be a number between 2 and 7.
  *   
  * @retval None
  */
void RCC_PLLSAIConfig(uint32_t PLLSAIN, uint32_t PLLSAIQ, uint32_t PLLSAIR)
{
20000994:	b580      	push	{r7, lr}
20000996:	b084      	sub	sp, #16
20000998:	af00      	add	r7, sp, #0
2000099a:	60f8      	str	r0, [r7, #12]
2000099c:	60b9      	str	r1, [r7, #8]
2000099e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIN));
  assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIR));
  assert_param(IS_RCC_PLLSAIQ_VALUE(PLLSAIQ));
  
  RCC->PLLSAICFGR = (PLLSAIN << 6) | (PLLSAIQ << 24) | (PLLSAIR << 28);
200009a0:	68fb      	ldr	r3, [r7, #12]
200009a2:	019a      	lsls	r2, r3, #6
200009a4:	68bb      	ldr	r3, [r7, #8]
200009a6:	061b      	lsls	r3, r3, #24
200009a8:	431a      	orrs	r2, r3
200009aa:	687b      	ldr	r3, [r7, #4]
200009ac:	071b      	lsls	r3, r3, #28
200009ae:	4904      	ldr	r1, [pc, #16]	; (200009c0 <RCC_PLLSAIConfig+0x2c>)
200009b0:	4313      	orrs	r3, r2
200009b2:	2288      	movs	r2, #136	; 0x88
200009b4:	508b      	str	r3, [r1, r2]
}
200009b6:	46c0      	nop			; (mov r8, r8)
200009b8:	46bd      	mov	sp, r7
200009ba:	b004      	add	sp, #16
200009bc:	bd80      	pop	{r7, pc}
200009be:	46c0      	nop			; (mov r8, r8)
200009c0:	40023800 	andmi	r3, r2, r0, lsl #16

200009c4 <RCC_PLLSAICmd>:
  * @note   The PLLSAI is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLSAI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLSAICmd(FunctionalState NewState)
{
200009c4:	b580      	push	{r7, lr}
200009c6:	b082      	sub	sp, #8
200009c8:	af00      	add	r7, sp, #0
200009ca:	0002      	movs	r2, r0
200009cc:	1dfb      	adds	r3, r7, #7
200009ce:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLSAION_BB = (uint32_t)NewState;
200009d0:	4b03      	ldr	r3, [pc, #12]	; (200009e0 <RCC_PLLSAICmd+0x1c>)
200009d2:	1dfa      	adds	r2, r7, #7
200009d4:	7812      	ldrb	r2, [r2, #0]
200009d6:	601a      	str	r2, [r3, #0]
}
200009d8:	46c0      	nop			; (mov r8, r8)
200009da:	46bd      	mov	sp, r7
200009dc:	b002      	add	sp, #8
200009de:	bd80      	pop	{r7, pc}
200009e0:	42470070 	submi	r0, r7, #112	; 0x70

200009e4 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
200009e4:	b580      	push	{r7, lr}
200009e6:	b082      	sub	sp, #8
200009e8:	af00      	add	r7, sp, #0
200009ea:	0002      	movs	r2, r0
200009ec:	1dfb      	adds	r3, r7, #7
200009ee:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
200009f0:	4b03      	ldr	r3, [pc, #12]	; (20000a00 <RCC_ClockSecuritySystemCmd+0x1c>)
200009f2:	1dfa      	adds	r2, r7, #7
200009f4:	7812      	ldrb	r2, [r2, #0]
200009f6:	601a      	str	r2, [r3, #0]
}
200009f8:	46c0      	nop			; (mov r8, r8)
200009fa:	46bd      	mov	sp, r7
200009fc:	b002      	add	sp, #8
200009fe:	bd80      	pop	{r7, pc}
20000a00:	4247004c 	submi	r0, r7, #76	; 0x4c

20000a04 <RCC_MCO1Config>:
  *            @arg RCC_MCO1Div_4: division by 4 applied to MCO1 clock
  *            @arg RCC_MCO1Div_5: division by 5 applied to MCO1 clock
  * @retval None
  */
void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
{
20000a04:	b580      	push	{r7, lr}
20000a06:	b084      	sub	sp, #16
20000a08:	af00      	add	r7, sp, #0
20000a0a:	6078      	str	r0, [r7, #4]
20000a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
20000a0e:	2300      	movs	r3, #0
20000a10:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
20000a12:	4b0a      	ldr	r3, [pc, #40]	; (20000a3c <RCC_MCO1Config+0x38>)
20000a14:	689b      	ldr	r3, [r3, #8]
20000a16:	60fb      	str	r3, [r7, #12]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
20000a18:	68fb      	ldr	r3, [r7, #12]
20000a1a:	4a09      	ldr	r2, [pc, #36]	; (20000a40 <RCC_MCO1Config+0x3c>)
20000a1c:	4013      	ands	r3, r2
20000a1e:	60fb      	str	r3, [r7, #12]

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
20000a20:	687a      	ldr	r2, [r7, #4]
20000a22:	683b      	ldr	r3, [r7, #0]
20000a24:	4313      	orrs	r3, r2
20000a26:	68fa      	ldr	r2, [r7, #12]
20000a28:	4313      	orrs	r3, r2
20000a2a:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
20000a2c:	4b03      	ldr	r3, [pc, #12]	; (20000a3c <RCC_MCO1Config+0x38>)
20000a2e:	68fa      	ldr	r2, [r7, #12]
20000a30:	609a      	str	r2, [r3, #8]

#if defined(STM32F410xx)
  RCC_MCO1Cmd(ENABLE);
#endif /* STM32F410xx */   
}
20000a32:	46c0      	nop			; (mov r8, r8)
20000a34:	46bd      	mov	sp, r7
20000a36:	b004      	add	sp, #16
20000a38:	bd80      	pop	{r7, pc}
20000a3a:	46c0      	nop			; (mov r8, r8)
20000a3c:	40023800 	andmi	r3, r2, r0, lsl #16
20000a40:	f89fffff 			; <UNDEFINED> instruction: 0xf89fffff

20000a44 <RCC_MCO2Config>:
  * @note  For STM32F410xx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)
{
20000a44:	b580      	push	{r7, lr}
20000a46:	b084      	sub	sp, #16
20000a48:	af00      	add	r7, sp, #0
20000a4a:	6078      	str	r0, [r7, #4]
20000a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
20000a4e:	2300      	movs	r3, #0
20000a50:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
20000a52:	4b0a      	ldr	r3, [pc, #40]	; (20000a7c <RCC_MCO2Config+0x38>)
20000a54:	689b      	ldr	r3, [r3, #8]
20000a56:	60fb      	str	r3, [r7, #12]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
20000a58:	68fb      	ldr	r3, [r7, #12]
20000a5a:	015b      	lsls	r3, r3, #5
20000a5c:	095b      	lsrs	r3, r3, #5
20000a5e:	60fb      	str	r3, [r7, #12]

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
20000a60:	687a      	ldr	r2, [r7, #4]
20000a62:	683b      	ldr	r3, [r7, #0]
20000a64:	4313      	orrs	r3, r2
20000a66:	68fa      	ldr	r2, [r7, #12]
20000a68:	4313      	orrs	r3, r2
20000a6a:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
20000a6c:	4b03      	ldr	r3, [pc, #12]	; (20000a7c <RCC_MCO2Config+0x38>)
20000a6e:	68fa      	ldr	r2, [r7, #12]
20000a70:	609a      	str	r2, [r3, #8]

#if defined(STM32F410xx)
  RCC_MCO2Cmd(ENABLE);
#endif /* STM32F410xx */   
}
20000a72:	46c0      	nop			; (mov r8, r8)
20000a74:	46bd      	mov	sp, r7
20000a76:	b004      	add	sp, #16
20000a78:	bd80      	pop	{r7, pc}
20000a7a:	46c0      	nop			; (mov r8, r8)
20000a7c:	40023800 	andmi	r3, r2, r0, lsl #16

20000a80 <RCC_SYSCLKConfig>:
  *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source (RCC_SYSCLKSource_PLLPCLK for STM32F446xx devices)
  *            @arg RCC_SYSCLKSource_PLLRCLK: PLL R selected as system clock source only for STM32F412xG, STM32F413_423xx and STM32F446xx devices
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
20000a80:	b580      	push	{r7, lr}
20000a82:	b084      	sub	sp, #16
20000a84:	af00      	add	r7, sp, #0
20000a86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000a88:	2300      	movs	r3, #0
20000a8a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
20000a8c:	4b08      	ldr	r3, [pc, #32]	; (20000ab0 <RCC_SYSCLKConfig+0x30>)
20000a8e:	689b      	ldr	r3, [r3, #8]
20000a90:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
20000a92:	68fb      	ldr	r3, [r7, #12]
20000a94:	2203      	movs	r2, #3
20000a96:	4393      	bics	r3, r2
20000a98:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
20000a9a:	68fa      	ldr	r2, [r7, #12]
20000a9c:	687b      	ldr	r3, [r7, #4]
20000a9e:	4313      	orrs	r3, r2
20000aa0:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
20000aa2:	4b03      	ldr	r3, [pc, #12]	; (20000ab0 <RCC_SYSCLKConfig+0x30>)
20000aa4:	68fa      	ldr	r2, [r7, #12]
20000aa6:	609a      	str	r2, [r3, #8]
}
20000aa8:	46c0      	nop			; (mov r8, r8)
20000aaa:	46bd      	mov	sp, r7
20000aac:	b004      	add	sp, #16
20000aae:	bd80      	pop	{r7, pc}
20000ab0:	40023800 	andmi	r3, r2, r0, lsl #16

20000ab4 <RCC_GetSYSCLKSource>:
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock (PLL P for STM32F446xx devices)
  *              - 0x0C: PLL R used as system clock (only for STM32F412xG, STM32F413_423xx and STM32F446xx devices)
  */
uint8_t RCC_GetSYSCLKSource(void)
{
20000ab4:	b580      	push	{r7, lr}
20000ab6:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
20000ab8:	4b04      	ldr	r3, [pc, #16]	; (20000acc <RCC_GetSYSCLKSource+0x18>)
20000aba:	689b      	ldr	r3, [r3, #8]
20000abc:	b2db      	uxtb	r3, r3
20000abe:	220c      	movs	r2, #12
20000ac0:	4013      	ands	r3, r2
20000ac2:	b2db      	uxtb	r3, r3
}
20000ac4:	0018      	movs	r0, r3
20000ac6:	46bd      	mov	sp, r7
20000ac8:	bd80      	pop	{r7, pc}
20000aca:	46c0      	nop			; (mov r8, r8)
20000acc:	40023800 	andmi	r3, r2, r0, lsl #16

20000ad0 <RCC_HCLKConfig>:
  *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
20000ad0:	b580      	push	{r7, lr}
20000ad2:	b084      	sub	sp, #16
20000ad4:	af00      	add	r7, sp, #0
20000ad6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000ad8:	2300      	movs	r3, #0
20000ada:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
20000adc:	4b08      	ldr	r3, [pc, #32]	; (20000b00 <RCC_HCLKConfig+0x30>)
20000ade:	689b      	ldr	r3, [r3, #8]
20000ae0:	60fb      	str	r3, [r7, #12]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
20000ae2:	68fb      	ldr	r3, [r7, #12]
20000ae4:	22f0      	movs	r2, #240	; 0xf0
20000ae6:	4393      	bics	r3, r2
20000ae8:	60fb      	str	r3, [r7, #12]

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
20000aea:	68fa      	ldr	r2, [r7, #12]
20000aec:	687b      	ldr	r3, [r7, #4]
20000aee:	4313      	orrs	r3, r2
20000af0:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
20000af2:	4b03      	ldr	r3, [pc, #12]	; (20000b00 <RCC_HCLKConfig+0x30>)
20000af4:	68fa      	ldr	r2, [r7, #12]
20000af6:	609a      	str	r2, [r3, #8]
}
20000af8:	46c0      	nop			; (mov r8, r8)
20000afa:	46bd      	mov	sp, r7
20000afc:	b004      	add	sp, #16
20000afe:	bd80      	pop	{r7, pc}
20000b00:	40023800 	andmi	r3, r2, r0, lsl #16

20000b04 <RCC_PCLK1Config>:
  *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
20000b04:	b580      	push	{r7, lr}
20000b06:	b084      	sub	sp, #16
20000b08:	af00      	add	r7, sp, #0
20000b0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000b0c:	2300      	movs	r3, #0
20000b0e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
20000b10:	4b08      	ldr	r3, [pc, #32]	; (20000b34 <RCC_PCLK1Config+0x30>)
20000b12:	689b      	ldr	r3, [r3, #8]
20000b14:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
20000b16:	68fb      	ldr	r3, [r7, #12]
20000b18:	4a07      	ldr	r2, [pc, #28]	; (20000b38 <RCC_PCLK1Config+0x34>)
20000b1a:	4013      	ands	r3, r2
20000b1c:	60fb      	str	r3, [r7, #12]

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
20000b1e:	68fa      	ldr	r2, [r7, #12]
20000b20:	687b      	ldr	r3, [r7, #4]
20000b22:	4313      	orrs	r3, r2
20000b24:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
20000b26:	4b03      	ldr	r3, [pc, #12]	; (20000b34 <RCC_PCLK1Config+0x30>)
20000b28:	68fa      	ldr	r2, [r7, #12]
20000b2a:	609a      	str	r2, [r3, #8]
}
20000b2c:	46c0      	nop			; (mov r8, r8)
20000b2e:	46bd      	mov	sp, r7
20000b30:	b004      	add	sp, #16
20000b32:	bd80      	pop	{r7, pc}
20000b34:	40023800 	andmi	r3, r2, r0, lsl #16
20000b38:	ffffe3ff 			; <UNDEFINED> instruction: 0xffffe3ff

20000b3c <RCC_PCLK2Config>:
  *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
20000b3c:	b580      	push	{r7, lr}
20000b3e:	b084      	sub	sp, #16
20000b40:	af00      	add	r7, sp, #0
20000b42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000b44:	2300      	movs	r3, #0
20000b46:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
20000b48:	4b09      	ldr	r3, [pc, #36]	; (20000b70 <RCC_PCLK2Config+0x34>)
20000b4a:	689b      	ldr	r3, [r3, #8]
20000b4c:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
20000b4e:	68fb      	ldr	r3, [r7, #12]
20000b50:	4a08      	ldr	r2, [pc, #32]	; (20000b74 <RCC_PCLK2Config+0x38>)
20000b52:	4013      	ands	r3, r2
20000b54:	60fb      	str	r3, [r7, #12]

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
20000b56:	687b      	ldr	r3, [r7, #4]
20000b58:	00db      	lsls	r3, r3, #3
20000b5a:	68fa      	ldr	r2, [r7, #12]
20000b5c:	4313      	orrs	r3, r2
20000b5e:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
20000b60:	4b03      	ldr	r3, [pc, #12]	; (20000b70 <RCC_PCLK2Config+0x34>)
20000b62:	68fa      	ldr	r2, [r7, #12]
20000b64:	609a      	str	r2, [r3, #8]
}
20000b66:	46c0      	nop			; (mov r8, r8)
20000b68:	46bd      	mov	sp, r7
20000b6a:	b004      	add	sp, #16
20000b6c:	bd80      	pop	{r7, pc}
20000b6e:	46c0      	nop			; (mov r8, r8)
20000b70:	40023800 	andmi	r3, r2, r0, lsl #16
20000b74:	ffff1fff 			; <UNDEFINED> instruction: 0xffff1fff

20000b78 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
20000b78:	b580      	push	{r7, lr}
20000b7a:	b088      	sub	sp, #32
20000b7c:	af00      	add	r7, sp, #0
20000b7e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
20000b80:	2300      	movs	r3, #0
20000b82:	61bb      	str	r3, [r7, #24]
20000b84:	2300      	movs	r3, #0
20000b86:	617b      	str	r3, [r7, #20]
20000b88:	2300      	movs	r3, #0
20000b8a:	61fb      	str	r3, [r7, #28]
20000b8c:	2302      	movs	r3, #2
20000b8e:	613b      	str	r3, [r7, #16]
20000b90:	2300      	movs	r3, #0
20000b92:	60fb      	str	r3, [r7, #12]
20000b94:	2302      	movs	r3, #2
20000b96:	60bb      	str	r3, [r7, #8]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
20000b98:	4b4c      	ldr	r3, [pc, #304]	; (20000ccc <RCC_GetClocksFreq+0x154>)
20000b9a:	689b      	ldr	r3, [r3, #8]
20000b9c:	220c      	movs	r2, #12
20000b9e:	4013      	ands	r3, r2
20000ba0:	61bb      	str	r3, [r7, #24]
  
  switch (tmp)
20000ba2:	69bb      	ldr	r3, [r7, #24]
20000ba4:	2b08      	cmp	r3, #8
20000ba6:	d011      	beq.n	20000bcc <RCC_GetClocksFreq+0x54>
20000ba8:	69bb      	ldr	r3, [r7, #24]
20000baa:	2b08      	cmp	r3, #8
20000bac:	d848      	bhi.n	20000c40 <RCC_GetClocksFreq+0xc8>
20000bae:	69bb      	ldr	r3, [r7, #24]
20000bb0:	2b00      	cmp	r3, #0
20000bb2:	d003      	beq.n	20000bbc <RCC_GetClocksFreq+0x44>
20000bb4:	69bb      	ldr	r3, [r7, #24]
20000bb6:	2b04      	cmp	r3, #4
20000bb8:	d004      	beq.n	20000bc4 <RCC_GetClocksFreq+0x4c>
20000bba:	e041      	b.n	20000c40 <RCC_GetClocksFreq+0xc8>
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
20000bbc:	687b      	ldr	r3, [r7, #4]
20000bbe:	4a44      	ldr	r2, [pc, #272]	; (20000cd0 <RCC_GetClocksFreq+0x158>)
20000bc0:	601a      	str	r2, [r3, #0]
    break;
20000bc2:	e041      	b.n	20000c48 <RCC_GetClocksFreq+0xd0>
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
20000bc4:	687b      	ldr	r3, [r7, #4]
20000bc6:	4a43      	ldr	r2, [pc, #268]	; (20000cd4 <RCC_GetClocksFreq+0x15c>)
20000bc8:	601a      	str	r2, [r3, #0]
    break;
20000bca:	e03d      	b.n	20000c48 <RCC_GetClocksFreq+0xd0>
  case 0x08:  /* PLL P used as system clock  source */
    
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
20000bcc:	4b3f      	ldr	r3, [pc, #252]	; (20000ccc <RCC_GetClocksFreq+0x154>)
20000bce:	685b      	ldr	r3, [r3, #4]
20000bd0:	0d9b      	lsrs	r3, r3, #22
20000bd2:	2201      	movs	r2, #1
20000bd4:	4013      	ands	r3, r2
20000bd6:	60fb      	str	r3, [r7, #12]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
20000bd8:	4b3c      	ldr	r3, [pc, #240]	; (20000ccc <RCC_GetClocksFreq+0x154>)
20000bda:	685b      	ldr	r3, [r3, #4]
20000bdc:	223f      	movs	r2, #63	; 0x3f
20000bde:	4013      	ands	r3, r2
20000be0:	60bb      	str	r3, [r7, #8]
    
    if (pllsource != 0)
20000be2:	68fb      	ldr	r3, [r7, #12]
20000be4:	2b00      	cmp	r3, #0
20000be6:	d00d      	beq.n	20000c04 <RCC_GetClocksFreq+0x8c>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
20000be8:	68b9      	ldr	r1, [r7, #8]
20000bea:	483a      	ldr	r0, [pc, #232]	; (20000cd4 <RCC_GetClocksFreq+0x15c>)
20000bec:	f001 f97e 	bl	20001eec <__udivsi3>
20000bf0:	0003      	movs	r3, r0
20000bf2:	001a      	movs	r2, r3
20000bf4:	4b35      	ldr	r3, [pc, #212]	; (20000ccc <RCC_GetClocksFreq+0x154>)
20000bf6:	685b      	ldr	r3, [r3, #4]
20000bf8:	099b      	lsrs	r3, r3, #6
20000bfa:	05db      	lsls	r3, r3, #23
20000bfc:	0ddb      	lsrs	r3, r3, #23
20000bfe:	4353      	muls	r3, r2
20000c00:	61fb      	str	r3, [r7, #28]
20000c02:	e00c      	b.n	20000c1e <RCC_GetClocksFreq+0xa6>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
20000c04:	68b9      	ldr	r1, [r7, #8]
20000c06:	4832      	ldr	r0, [pc, #200]	; (20000cd0 <RCC_GetClocksFreq+0x158>)
20000c08:	f001 f970 	bl	20001eec <__udivsi3>
20000c0c:	0003      	movs	r3, r0
20000c0e:	001a      	movs	r2, r3
20000c10:	4b2e      	ldr	r3, [pc, #184]	; (20000ccc <RCC_GetClocksFreq+0x154>)
20000c12:	685b      	ldr	r3, [r3, #4]
20000c14:	099b      	lsrs	r3, r3, #6
20000c16:	05db      	lsls	r3, r3, #23
20000c18:	0ddb      	lsrs	r3, r3, #23
20000c1a:	4353      	muls	r3, r2
20000c1c:	61fb      	str	r3, [r7, #28]
    }
    
    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
20000c1e:	4b2b      	ldr	r3, [pc, #172]	; (20000ccc <RCC_GetClocksFreq+0x154>)
20000c20:	685b      	ldr	r3, [r3, #4]
20000c22:	0c1b      	lsrs	r3, r3, #16
20000c24:	2203      	movs	r2, #3
20000c26:	4013      	ands	r3, r2
20000c28:	3301      	adds	r3, #1
20000c2a:	005b      	lsls	r3, r3, #1
20000c2c:	613b      	str	r3, [r7, #16]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
20000c2e:	6939      	ldr	r1, [r7, #16]
20000c30:	69f8      	ldr	r0, [r7, #28]
20000c32:	f001 f95b 	bl	20001eec <__udivsi3>
20000c36:	0003      	movs	r3, r0
20000c38:	001a      	movs	r2, r3
20000c3a:	687b      	ldr	r3, [r7, #4]
20000c3c:	601a      	str	r2, [r3, #0]
    break;
20000c3e:	e003      	b.n	20000c48 <RCC_GetClocksFreq+0xd0>
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;    
    break;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    
  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
20000c40:	687b      	ldr	r3, [r7, #4]
20000c42:	4a23      	ldr	r2, [pc, #140]	; (20000cd0 <RCC_GetClocksFreq+0x158>)
20000c44:	601a      	str	r2, [r3, #0]
    break;
20000c46:	46c0      	nop			; (mov r8, r8)
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
  
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
20000c48:	4b20      	ldr	r3, [pc, #128]	; (20000ccc <RCC_GetClocksFreq+0x154>)
20000c4a:	689b      	ldr	r3, [r3, #8]
20000c4c:	22f0      	movs	r2, #240	; 0xf0
20000c4e:	4013      	ands	r3, r2
20000c50:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
20000c52:	69bb      	ldr	r3, [r7, #24]
20000c54:	091b      	lsrs	r3, r3, #4
20000c56:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
20000c58:	4a1f      	ldr	r2, [pc, #124]	; (20000cd8 <RCC_GetClocksFreq+0x160>)
20000c5a:	69bb      	ldr	r3, [r7, #24]
20000c5c:	18d3      	adds	r3, r2, r3
20000c5e:	781b      	ldrb	r3, [r3, #0]
20000c60:	b2db      	uxtb	r3, r3
20000c62:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
20000c64:	687b      	ldr	r3, [r7, #4]
20000c66:	681a      	ldr	r2, [r3, #0]
20000c68:	697b      	ldr	r3, [r7, #20]
20000c6a:	40da      	lsrs	r2, r3
20000c6c:	687b      	ldr	r3, [r7, #4]
20000c6e:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
20000c70:	4b16      	ldr	r3, [pc, #88]	; (20000ccc <RCC_GetClocksFreq+0x154>)
20000c72:	689a      	ldr	r2, [r3, #8]
20000c74:	23e0      	movs	r3, #224	; 0xe0
20000c76:	015b      	lsls	r3, r3, #5
20000c78:	4013      	ands	r3, r2
20000c7a:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
20000c7c:	69bb      	ldr	r3, [r7, #24]
20000c7e:	0a9b      	lsrs	r3, r3, #10
20000c80:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
20000c82:	4a15      	ldr	r2, [pc, #84]	; (20000cd8 <RCC_GetClocksFreq+0x160>)
20000c84:	69bb      	ldr	r3, [r7, #24]
20000c86:	18d3      	adds	r3, r2, r3
20000c88:	781b      	ldrb	r3, [r3, #0]
20000c8a:	b2db      	uxtb	r3, r3
20000c8c:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
20000c8e:	687b      	ldr	r3, [r7, #4]
20000c90:	685a      	ldr	r2, [r3, #4]
20000c92:	697b      	ldr	r3, [r7, #20]
20000c94:	40da      	lsrs	r2, r3
20000c96:	687b      	ldr	r3, [r7, #4]
20000c98:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
20000c9a:	4b0c      	ldr	r3, [pc, #48]	; (20000ccc <RCC_GetClocksFreq+0x154>)
20000c9c:	689a      	ldr	r2, [r3, #8]
20000c9e:	23e0      	movs	r3, #224	; 0xe0
20000ca0:	021b      	lsls	r3, r3, #8
20000ca2:	4013      	ands	r3, r2
20000ca4:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
20000ca6:	69bb      	ldr	r3, [r7, #24]
20000ca8:	0b5b      	lsrs	r3, r3, #13
20000caa:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
20000cac:	4a0a      	ldr	r2, [pc, #40]	; (20000cd8 <RCC_GetClocksFreq+0x160>)
20000cae:	69bb      	ldr	r3, [r7, #24]
20000cb0:	18d3      	adds	r3, r2, r3
20000cb2:	781b      	ldrb	r3, [r3, #0]
20000cb4:	b2db      	uxtb	r3, r3
20000cb6:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
20000cb8:	687b      	ldr	r3, [r7, #4]
20000cba:	685a      	ldr	r2, [r3, #4]
20000cbc:	697b      	ldr	r3, [r7, #20]
20000cbe:	40da      	lsrs	r2, r3
20000cc0:	687b      	ldr	r3, [r7, #4]
20000cc2:	60da      	str	r2, [r3, #12]
}
20000cc4:	46c0      	nop			; (mov r8, r8)
20000cc6:	46bd      	mov	sp, r7
20000cc8:	b008      	add	sp, #32
20000cca:	bd80      	pop	{r7, pc}
20000ccc:	40023800 	andmi	r3, r2, r0, lsl #16
20000cd0:	00f42400 	rscseq	r2, r4, r0, lsl #8
20000cd4:	017d7840 	cmneq	sp, r0, asr #16
20000cd8:	20002018 	andcs	r2, r0, r8, lsl r0

20000cdc <RCC_RTCCLKConfig>:
  *         RTC clock source).
  *  
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
20000cdc:	b580      	push	{r7, lr}
20000cde:	b084      	sub	sp, #16
20000ce0:	af00      	add	r7, sp, #0
20000ce2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000ce4:	2300      	movs	r3, #0
20000ce6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
20000ce8:	687a      	ldr	r2, [r7, #4]
20000cea:	23c0      	movs	r3, #192	; 0xc0
20000cec:	009b      	lsls	r3, r3, #2
20000cee:	401a      	ands	r2, r3
20000cf0:	23c0      	movs	r3, #192	; 0xc0
20000cf2:	009b      	lsls	r3, r3, #2
20000cf4:	429a      	cmp	r2, r3
20000cf6:	d10f      	bne.n	20000d18 <RCC_RTCCLKConfig+0x3c>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
20000cf8:	4b0d      	ldr	r3, [pc, #52]	; (20000d30 <RCC_RTCCLKConfig+0x54>)
20000cfa:	689b      	ldr	r3, [r3, #8]
20000cfc:	60fb      	str	r3, [r7, #12]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
20000cfe:	68fb      	ldr	r3, [r7, #12]
20000d00:	4a0c      	ldr	r2, [pc, #48]	; (20000d34 <RCC_RTCCLKConfig+0x58>)
20000d02:	4013      	ands	r3, r2
20000d04:	60fb      	str	r3, [r7, #12]

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
20000d06:	687b      	ldr	r3, [r7, #4]
20000d08:	4a0b      	ldr	r2, [pc, #44]	; (20000d38 <RCC_RTCCLKConfig+0x5c>)
20000d0a:	4013      	ands	r3, r2
20000d0c:	68fa      	ldr	r2, [r7, #12]
20000d0e:	4313      	orrs	r3, r2
20000d10:	60fb      	str	r3, [r7, #12]

    /* Store the new value */
    RCC->CFGR = tmpreg;
20000d12:	4b07      	ldr	r3, [pc, #28]	; (20000d30 <RCC_RTCCLKConfig+0x54>)
20000d14:	68fa      	ldr	r2, [r7, #12]
20000d16:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
20000d18:	4b05      	ldr	r3, [pc, #20]	; (20000d30 <RCC_RTCCLKConfig+0x54>)
20000d1a:	6f19      	ldr	r1, [r3, #112]	; 0x70
20000d1c:	687b      	ldr	r3, [r7, #4]
20000d1e:	051b      	lsls	r3, r3, #20
20000d20:	0d1a      	lsrs	r2, r3, #20
20000d22:	4b03      	ldr	r3, [pc, #12]	; (20000d30 <RCC_RTCCLKConfig+0x54>)
20000d24:	430a      	orrs	r2, r1
20000d26:	671a      	str	r2, [r3, #112]	; 0x70
}
20000d28:	46c0      	nop			; (mov r8, r8)
20000d2a:	46bd      	mov	sp, r7
20000d2c:	b004      	add	sp, #16
20000d2e:	bd80      	pop	{r7, pc}
20000d30:	40023800 	andmi	r3, r2, r0, lsl #16
20000d34:	ffe0ffff 			; <UNDEFINED> instruction: 0xffe0ffff
20000d38:	0ffffcff 	svceq	0x00fffcff

20000d3c <RCC_RTCCLKCmd>:
  *         using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
20000d3c:	b580      	push	{r7, lr}
20000d3e:	b082      	sub	sp, #8
20000d40:	af00      	add	r7, sp, #0
20000d42:	0002      	movs	r2, r0
20000d44:	1dfb      	adds	r3, r7, #7
20000d46:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
20000d48:	4b03      	ldr	r3, [pc, #12]	; (20000d58 <RCC_RTCCLKCmd+0x1c>)
20000d4a:	1dfa      	adds	r2, r7, #7
20000d4c:	7812      	ldrb	r2, [r2, #0]
20000d4e:	601a      	str	r2, [r3, #0]
}
20000d50:	46c0      	nop			; (mov r8, r8)
20000d52:	46bd      	mov	sp, r7
20000d54:	b002      	add	sp, #8
20000d56:	bd80      	pop	{r7, pc}
20000d58:	42470e3c 	submi	r0, r7, #60, 28	; 0x3c0

20000d5c <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
20000d5c:	b580      	push	{r7, lr}
20000d5e:	b082      	sub	sp, #8
20000d60:	af00      	add	r7, sp, #0
20000d62:	0002      	movs	r2, r0
20000d64:	1dfb      	adds	r3, r7, #7
20000d66:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
20000d68:	4b03      	ldr	r3, [pc, #12]	; (20000d78 <RCC_BackupResetCmd+0x1c>)
20000d6a:	1dfa      	adds	r2, r7, #7
20000d6c:	7812      	ldrb	r2, [r2, #0]
20000d6e:	601a      	str	r2, [r3, #0]
}
20000d70:	46c0      	nop			; (mov r8, r8)
20000d72:	46bd      	mov	sp, r7
20000d74:	b002      	add	sp, #8
20000d76:	bd80      	pop	{r7, pc}
20000d78:	42470e40 	submi	r0, r7, #64, 28	; 0x400

20000d7c <RCC_I2SCLKConfig>:
  *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as I2S clock source
  * @retval None
  */
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
20000d7c:	b580      	push	{r7, lr}
20000d7e:	b082      	sub	sp, #8
20000d80:	af00      	add	r7, sp, #0
20000d82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;  
20000d84:	4b03      	ldr	r3, [pc, #12]	; (20000d94 <RCC_I2SCLKConfig+0x18>)
20000d86:	687a      	ldr	r2, [r7, #4]
20000d88:	601a      	str	r2, [r3, #0]
}
20000d8a:	46c0      	nop			; (mov r8, r8)
20000d8c:	46bd      	mov	sp, r7
20000d8e:	b002      	add	sp, #8
20000d90:	bd80      	pop	{r7, pc}
20000d92:	46c0      	nop			; (mov r8, r8)
20000d94:	4247015c 	submi	r0, r7, #92, 2

20000d98 <RCC_SAIBlockACLKConfig>:
  *            @arg RCC_SAIACLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as SAI1 Block A clock
  * @retval None
  */
void RCC_SAIBlockACLKConfig(uint32_t RCC_SAIBlockACLKSource)
{
20000d98:	b580      	push	{r7, lr}
20000d9a:	b084      	sub	sp, #16
20000d9c:	af00      	add	r7, sp, #0
20000d9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000da0:	2300      	movs	r3, #0
20000da2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIACLK_SOURCE(RCC_SAIBlockACLKSource));
  
  tmpreg = RCC->DCKCFGR;
20000da4:	4a09      	ldr	r2, [pc, #36]	; (20000dcc <RCC_SAIBlockACLKConfig+0x34>)
20000da6:	238c      	movs	r3, #140	; 0x8c
20000da8:	58d3      	ldr	r3, [r2, r3]
20000daa:	60fb      	str	r3, [r7, #12]

  /* Clear RCC_DCKCFGR_SAI1ASRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1ASRC;
20000dac:	68fb      	ldr	r3, [r7, #12]
20000dae:	4a08      	ldr	r2, [pc, #32]	; (20000dd0 <RCC_SAIBlockACLKConfig+0x38>)
20000db0:	4013      	ands	r3, r2
20000db2:	60fb      	str	r3, [r7, #12]

  /* Set SAI Block A source selection value */
  tmpreg |= RCC_SAIBlockACLKSource;
20000db4:	68fa      	ldr	r2, [r7, #12]
20000db6:	687b      	ldr	r3, [r7, #4]
20000db8:	4313      	orrs	r3, r2
20000dba:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
20000dbc:	4903      	ldr	r1, [pc, #12]	; (20000dcc <RCC_SAIBlockACLKConfig+0x34>)
20000dbe:	228c      	movs	r2, #140	; 0x8c
20000dc0:	68fb      	ldr	r3, [r7, #12]
20000dc2:	508b      	str	r3, [r1, r2]
}
20000dc4:	46c0      	nop			; (mov r8, r8)
20000dc6:	46bd      	mov	sp, r7
20000dc8:	b004      	add	sp, #16
20000dca:	bd80      	pop	{r7, pc}
20000dcc:	40023800 	andmi	r3, r2, r0, lsl #16
20000dd0:	ffcfffff 			; <UNDEFINED> instruction: 0xffcfffff

20000dd4 <RCC_SAIBlockBCLKConfig>:
  *            @arg RCC_SAIBCLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as SAI1 Block B clock
  * @retval None
  */
void RCC_SAIBlockBCLKConfig(uint32_t RCC_SAIBlockBCLKSource)
{
20000dd4:	b580      	push	{r7, lr}
20000dd6:	b084      	sub	sp, #16
20000dd8:	af00      	add	r7, sp, #0
20000dda:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000ddc:	2300      	movs	r3, #0
20000dde:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIBCLK_SOURCE(RCC_SAIBlockBCLKSource));
  
  tmpreg = RCC->DCKCFGR;
20000de0:	4a09      	ldr	r2, [pc, #36]	; (20000e08 <RCC_SAIBlockBCLKConfig+0x34>)
20000de2:	238c      	movs	r3, #140	; 0x8c
20000de4:	58d3      	ldr	r3, [r2, r3]
20000de6:	60fb      	str	r3, [r7, #12]

  /* Clear RCC_DCKCFGR_SAI1BSRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1BSRC;
20000de8:	68fb      	ldr	r3, [r7, #12]
20000dea:	4a08      	ldr	r2, [pc, #32]	; (20000e0c <RCC_SAIBlockBCLKConfig+0x38>)
20000dec:	4013      	ands	r3, r2
20000dee:	60fb      	str	r3, [r7, #12]

  /* Set SAI Block B source selection value */
  tmpreg |= RCC_SAIBlockBCLKSource;
20000df0:	68fa      	ldr	r2, [r7, #12]
20000df2:	687b      	ldr	r3, [r7, #4]
20000df4:	4313      	orrs	r3, r2
20000df6:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
20000df8:	4903      	ldr	r1, [pc, #12]	; (20000e08 <RCC_SAIBlockBCLKConfig+0x34>)
20000dfa:	228c      	movs	r2, #140	; 0x8c
20000dfc:	68fb      	ldr	r3, [r7, #12]
20000dfe:	508b      	str	r3, [r1, r2]
}
20000e00:	46c0      	nop			; (mov r8, r8)
20000e02:	46bd      	mov	sp, r7
20000e04:	b004      	add	sp, #16
20000e06:	bd80      	pop	{r7, pc}
20000e08:	40023800 	andmi	r3, r2, r0, lsl #16
20000e0c:	ff3fffff 			; <UNDEFINED> instruction: 0xff3fffff

20000e10 <RCC_SAIPLLI2SClkDivConfig>:
  *          SAI1 clock frequency = f(PLLI2S_Q) / RCC_PLLI2SDivQ 
  *              
  * @retval None
  */
void RCC_SAIPLLI2SClkDivConfig(uint32_t RCC_PLLI2SDivQ)  
{
20000e10:	b580      	push	{r7, lr}
20000e12:	b084      	sub	sp, #16
20000e14:	af00      	add	r7, sp, #0
20000e16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000e18:	2300      	movs	r3, #0
20000e1a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(RCC_PLLI2SDivQ));
  
  tmpreg = RCC->DCKCFGR;
20000e1c:	4a0a      	ldr	r2, [pc, #40]	; (20000e48 <RCC_SAIPLLI2SClkDivConfig+0x38>)
20000e1e:	238c      	movs	r3, #140	; 0x8c
20000e20:	58d3      	ldr	r3, [r2, r3]
20000e22:	60fb      	str	r3, [r7, #12]

  /* Clear PLLI2SDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLI2SDIVQ);
20000e24:	68fb      	ldr	r3, [r7, #12]
20000e26:	221f      	movs	r2, #31
20000e28:	4393      	bics	r3, r2
20000e2a:	60fb      	str	r3, [r7, #12]

  /* Set PLLI2SDIVQ values */
  tmpreg |= (RCC_PLLI2SDivQ - 1);
20000e2c:	687b      	ldr	r3, [r7, #4]
20000e2e:	3b01      	subs	r3, #1
20000e30:	68fa      	ldr	r2, [r7, #12]
20000e32:	4313      	orrs	r3, r2
20000e34:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
20000e36:	4904      	ldr	r1, [pc, #16]	; (20000e48 <RCC_SAIPLLI2SClkDivConfig+0x38>)
20000e38:	228c      	movs	r2, #140	; 0x8c
20000e3a:	68fb      	ldr	r3, [r7, #12]
20000e3c:	508b      	str	r3, [r1, r2]
}
20000e3e:	46c0      	nop			; (mov r8, r8)
20000e40:	46bd      	mov	sp, r7
20000e42:	b004      	add	sp, #16
20000e44:	bd80      	pop	{r7, pc}
20000e46:	46c0      	nop			; (mov r8, r8)
20000e48:	40023800 	andmi	r3, r2, r0, lsl #16

20000e4c <RCC_SAIPLLSAIClkDivConfig>:
  *          SAI1 clock frequency = f(PLLSAI_Q) / RCC_PLLSAIDivQ  
  *              
  * @retval None
  */
void RCC_SAIPLLSAIClkDivConfig(uint32_t RCC_PLLSAIDivQ)  
{
20000e4c:	b580      	push	{r7, lr}
20000e4e:	b084      	sub	sp, #16
20000e50:	af00      	add	r7, sp, #0
20000e52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000e54:	2300      	movs	r3, #0
20000e56:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(RCC_PLLSAIDivQ));
  
  tmpreg = RCC->DCKCFGR;
20000e58:	4a0a      	ldr	r2, [pc, #40]	; (20000e84 <RCC_SAIPLLSAIClkDivConfig+0x38>)
20000e5a:	238c      	movs	r3, #140	; 0x8c
20000e5c:	58d3      	ldr	r3, [r2, r3]
20000e5e:	60fb      	str	r3, [r7, #12]

  /* Clear PLLI2SDIVQ[4:0] and PLLSAIDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLSAIDIVQ);
20000e60:	68fb      	ldr	r3, [r7, #12]
20000e62:	4a09      	ldr	r2, [pc, #36]	; (20000e88 <RCC_SAIPLLSAIClkDivConfig+0x3c>)
20000e64:	4013      	ands	r3, r2
20000e66:	60fb      	str	r3, [r7, #12]

  /* Set PLLSAIDIVQ values */
  tmpreg |= ((RCC_PLLSAIDivQ - 1) << 8);
20000e68:	687b      	ldr	r3, [r7, #4]
20000e6a:	3b01      	subs	r3, #1
20000e6c:	021b      	lsls	r3, r3, #8
20000e6e:	68fa      	ldr	r2, [r7, #12]
20000e70:	4313      	orrs	r3, r2
20000e72:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
20000e74:	4903      	ldr	r1, [pc, #12]	; (20000e84 <RCC_SAIPLLSAIClkDivConfig+0x38>)
20000e76:	228c      	movs	r2, #140	; 0x8c
20000e78:	68fb      	ldr	r3, [r7, #12]
20000e7a:	508b      	str	r3, [r1, r2]
}
20000e7c:	46c0      	nop			; (mov r8, r8)
20000e7e:	46bd      	mov	sp, r7
20000e80:	b004      	add	sp, #16
20000e82:	bd80      	pop	{r7, pc}
20000e84:	40023800 	andmi	r3, r2, r0, lsl #16
20000e88:	ffffe0ff 			; <UNDEFINED> instruction: 0xffffe0ff

20000e8c <RCC_LTDCCLKDivConfig>:
  *            @arg RCC_PLLSAIDivR_Div16: LTDC clock = f(PLLSAI_R)/16
  *            
  * @retval None
  */
void RCC_LTDCCLKDivConfig(uint32_t RCC_PLLSAIDivR)
{
20000e8c:	b580      	push	{r7, lr}
20000e8e:	b084      	sub	sp, #16
20000e90:	af00      	add	r7, sp, #0
20000e92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000e94:	2300      	movs	r3, #0
20000e96:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVR_VALUE(RCC_PLLSAIDivR));
  
  tmpreg = RCC->DCKCFGR;
20000e98:	4a09      	ldr	r2, [pc, #36]	; (20000ec0 <RCC_LTDCCLKDivConfig+0x34>)
20000e9a:	238c      	movs	r3, #140	; 0x8c
20000e9c:	58d3      	ldr	r3, [r2, r3]
20000e9e:	60fb      	str	r3, [r7, #12]

  /* Clear PLLSAIDIVR[2:0] bits */
  tmpreg &= ~RCC_DCKCFGR_PLLSAIDIVR;
20000ea0:	68fb      	ldr	r3, [r7, #12]
20000ea2:	4a08      	ldr	r2, [pc, #32]	; (20000ec4 <RCC_LTDCCLKDivConfig+0x38>)
20000ea4:	4013      	ands	r3, r2
20000ea6:	60fb      	str	r3, [r7, #12]

  /* Set PLLSAIDIVR values */
  tmpreg |= RCC_PLLSAIDivR;
20000ea8:	68fa      	ldr	r2, [r7, #12]
20000eaa:	687b      	ldr	r3, [r7, #4]
20000eac:	4313      	orrs	r3, r2
20000eae:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
20000eb0:	4903      	ldr	r1, [pc, #12]	; (20000ec0 <RCC_LTDCCLKDivConfig+0x34>)
20000eb2:	228c      	movs	r2, #140	; 0x8c
20000eb4:	68fb      	ldr	r3, [r7, #12]
20000eb6:	508b      	str	r3, [r1, r2]
}
20000eb8:	46c0      	nop			; (mov r8, r8)
20000eba:	46bd      	mov	sp, r7
20000ebc:	b004      	add	sp, #16
20000ebe:	bd80      	pop	{r7, pc}
20000ec0:	40023800 	andmi	r3, r2, r0, lsl #16
20000ec4:	fffcffff 			; <UNDEFINED> instruction: 0xfffcffff

20000ec8 <RCC_TIMCLKPresConfig>:
  *                 else it is equal to [(HPRE * PPREx) / 4] if PPREx is corresponding 
  *                 to division by 8 or more.
  * @retval None
  */
void RCC_TIMCLKPresConfig(uint32_t RCC_TIMCLKPrescaler)
{
20000ec8:	b580      	push	{r7, lr}
20000eca:	b082      	sub	sp, #8
20000ecc:	af00      	add	r7, sp, #0
20000ece:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_TIMCLK_PRESCALER(RCC_TIMCLKPrescaler));

  *(__IO uint32_t *) DCKCFGR_TIMPRE_BB = RCC_TIMCLKPrescaler;
20000ed0:	4b03      	ldr	r3, [pc, #12]	; (20000ee0 <RCC_TIMCLKPresConfig+0x18>)
20000ed2:	687a      	ldr	r2, [r7, #4]
20000ed4:	601a      	str	r2, [r3, #0]
}
20000ed6:	46c0      	nop			; (mov r8, r8)
20000ed8:	46bd      	mov	sp, r7
20000eda:	b002      	add	sp, #8
20000edc:	bd80      	pop	{r7, pc}
20000ede:	46c0      	nop			; (mov r8, r8)
20000ee0:	424711e0 	submi	r1, r7, #224, 2	; 0x38

20000ee4 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
20000ee4:	b580      	push	{r7, lr}
20000ee6:	b082      	sub	sp, #8
20000ee8:	af00      	add	r7, sp, #0
20000eea:	6078      	str	r0, [r7, #4]
20000eec:	000a      	movs	r2, r1
20000eee:	1cfb      	adds	r3, r7, #3
20000ef0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000ef2:	1cfb      	adds	r3, r7, #3
20000ef4:	781b      	ldrb	r3, [r3, #0]
20000ef6:	2b00      	cmp	r3, #0
20000ef8:	d006      	beq.n	20000f08 <RCC_AHB1PeriphClockCmd+0x24>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
20000efa:	4b09      	ldr	r3, [pc, #36]	; (20000f20 <RCC_AHB1PeriphClockCmd+0x3c>)
20000efc:	6b19      	ldr	r1, [r3, #48]	; 0x30
20000efe:	4b08      	ldr	r3, [pc, #32]	; (20000f20 <RCC_AHB1PeriphClockCmd+0x3c>)
20000f00:	687a      	ldr	r2, [r7, #4]
20000f02:	430a      	orrs	r2, r1
20000f04:	631a      	str	r2, [r3, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
20000f06:	e006      	b.n	20000f16 <RCC_AHB1PeriphClockCmd+0x32>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
20000f08:	4b05      	ldr	r3, [pc, #20]	; (20000f20 <RCC_AHB1PeriphClockCmd+0x3c>)
20000f0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20000f0c:	687b      	ldr	r3, [r7, #4]
20000f0e:	43d9      	mvns	r1, r3
20000f10:	4b03      	ldr	r3, [pc, #12]	; (20000f20 <RCC_AHB1PeriphClockCmd+0x3c>)
20000f12:	400a      	ands	r2, r1
20000f14:	631a      	str	r2, [r3, #48]	; 0x30
}
20000f16:	46c0      	nop			; (mov r8, r8)
20000f18:	46bd      	mov	sp, r7
20000f1a:	b002      	add	sp, #8
20000f1c:	bd80      	pop	{r7, pc}
20000f1e:	46c0      	nop			; (mov r8, r8)
20000f20:	40023800 	andmi	r3, r2, r0, lsl #16

20000f24 <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
20000f24:	b580      	push	{r7, lr}
20000f26:	b082      	sub	sp, #8
20000f28:	af00      	add	r7, sp, #0
20000f2a:	6078      	str	r0, [r7, #4]
20000f2c:	000a      	movs	r2, r1
20000f2e:	1cfb      	adds	r3, r7, #3
20000f30:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20000f32:	1cfb      	adds	r3, r7, #3
20000f34:	781b      	ldrb	r3, [r3, #0]
20000f36:	2b00      	cmp	r3, #0
20000f38:	d006      	beq.n	20000f48 <RCC_AHB2PeriphClockCmd+0x24>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
20000f3a:	4b09      	ldr	r3, [pc, #36]	; (20000f60 <RCC_AHB2PeriphClockCmd+0x3c>)
20000f3c:	6b59      	ldr	r1, [r3, #52]	; 0x34
20000f3e:	4b08      	ldr	r3, [pc, #32]	; (20000f60 <RCC_AHB2PeriphClockCmd+0x3c>)
20000f40:	687a      	ldr	r2, [r7, #4]
20000f42:	430a      	orrs	r2, r1
20000f44:	635a      	str	r2, [r3, #52]	; 0x34
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
  }
}
20000f46:	e006      	b.n	20000f56 <RCC_AHB2PeriphClockCmd+0x32>
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
20000f48:	4b05      	ldr	r3, [pc, #20]	; (20000f60 <RCC_AHB2PeriphClockCmd+0x3c>)
20000f4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
20000f4c:	687b      	ldr	r3, [r7, #4]
20000f4e:	43d9      	mvns	r1, r3
20000f50:	4b03      	ldr	r3, [pc, #12]	; (20000f60 <RCC_AHB2PeriphClockCmd+0x3c>)
20000f52:	400a      	ands	r2, r1
20000f54:	635a      	str	r2, [r3, #52]	; 0x34
}
20000f56:	46c0      	nop			; (mov r8, r8)
20000f58:	46bd      	mov	sp, r7
20000f5a:	b002      	add	sp, #8
20000f5c:	bd80      	pop	{r7, pc}
20000f5e:	46c0      	nop			; (mov r8, r8)
20000f60:	40023800 	andmi	r3, r2, r0, lsl #16

20000f64 <RCC_AHB3PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
20000f64:	b580      	push	{r7, lr}
20000f66:	b082      	sub	sp, #8
20000f68:	af00      	add	r7, sp, #0
20000f6a:	6078      	str	r0, [r7, #4]
20000f6c:	000a      	movs	r2, r1
20000f6e:	1cfb      	adds	r3, r7, #3
20000f70:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20000f72:	1cfb      	adds	r3, r7, #3
20000f74:	781b      	ldrb	r3, [r3, #0]
20000f76:	2b00      	cmp	r3, #0
20000f78:	d006      	beq.n	20000f88 <RCC_AHB3PeriphClockCmd+0x24>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
20000f7a:	4b09      	ldr	r3, [pc, #36]	; (20000fa0 <RCC_AHB3PeriphClockCmd+0x3c>)
20000f7c:	6b99      	ldr	r1, [r3, #56]	; 0x38
20000f7e:	4b08      	ldr	r3, [pc, #32]	; (20000fa0 <RCC_AHB3PeriphClockCmd+0x3c>)
20000f80:	687a      	ldr	r2, [r7, #4]
20000f82:	430a      	orrs	r2, r1
20000f84:	639a      	str	r2, [r3, #56]	; 0x38
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
  }
}
20000f86:	e006      	b.n	20000f96 <RCC_AHB3PeriphClockCmd+0x32>
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
20000f88:	4b05      	ldr	r3, [pc, #20]	; (20000fa0 <RCC_AHB3PeriphClockCmd+0x3c>)
20000f8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
20000f8c:	687b      	ldr	r3, [r7, #4]
20000f8e:	43d9      	mvns	r1, r3
20000f90:	4b03      	ldr	r3, [pc, #12]	; (20000fa0 <RCC_AHB3PeriphClockCmd+0x3c>)
20000f92:	400a      	ands	r2, r1
20000f94:	639a      	str	r2, [r3, #56]	; 0x38
}
20000f96:	46c0      	nop			; (mov r8, r8)
20000f98:	46bd      	mov	sp, r7
20000f9a:	b002      	add	sp, #8
20000f9c:	bd80      	pop	{r7, pc}
20000f9e:	46c0      	nop			; (mov r8, r8)
20000fa0:	40023800 	andmi	r3, r2, r0, lsl #16

20000fa4 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
20000fa4:	b580      	push	{r7, lr}
20000fa6:	b082      	sub	sp, #8
20000fa8:	af00      	add	r7, sp, #0
20000faa:	6078      	str	r0, [r7, #4]
20000fac:	000a      	movs	r2, r1
20000fae:	1cfb      	adds	r3, r7, #3
20000fb0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20000fb2:	1cfb      	adds	r3, r7, #3
20000fb4:	781b      	ldrb	r3, [r3, #0]
20000fb6:	2b00      	cmp	r3, #0
20000fb8:	d006      	beq.n	20000fc8 <RCC_APB1PeriphClockCmd+0x24>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
20000fba:	4b09      	ldr	r3, [pc, #36]	; (20000fe0 <RCC_APB1PeriphClockCmd+0x3c>)
20000fbc:	6c19      	ldr	r1, [r3, #64]	; 0x40
20000fbe:	4b08      	ldr	r3, [pc, #32]	; (20000fe0 <RCC_APB1PeriphClockCmd+0x3c>)
20000fc0:	687a      	ldr	r2, [r7, #4]
20000fc2:	430a      	orrs	r2, r1
20000fc4:	641a      	str	r2, [r3, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
20000fc6:	e006      	b.n	20000fd6 <RCC_APB1PeriphClockCmd+0x32>
    RCC->APB1ENR &= ~RCC_APB1Periph;
20000fc8:	4b05      	ldr	r3, [pc, #20]	; (20000fe0 <RCC_APB1PeriphClockCmd+0x3c>)
20000fca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
20000fcc:	687b      	ldr	r3, [r7, #4]
20000fce:	43d9      	mvns	r1, r3
20000fd0:	4b03      	ldr	r3, [pc, #12]	; (20000fe0 <RCC_APB1PeriphClockCmd+0x3c>)
20000fd2:	400a      	ands	r2, r1
20000fd4:	641a      	str	r2, [r3, #64]	; 0x40
}
20000fd6:	46c0      	nop			; (mov r8, r8)
20000fd8:	46bd      	mov	sp, r7
20000fda:	b002      	add	sp, #8
20000fdc:	bd80      	pop	{r7, pc}
20000fde:	46c0      	nop			; (mov r8, r8)
20000fe0:	40023800 	andmi	r3, r2, r0, lsl #16

20000fe4 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
20000fe4:	b580      	push	{r7, lr}
20000fe6:	b082      	sub	sp, #8
20000fe8:	af00      	add	r7, sp, #0
20000fea:	6078      	str	r0, [r7, #4]
20000fec:	000a      	movs	r2, r1
20000fee:	1cfb      	adds	r3, r7, #3
20000ff0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20000ff2:	1cfb      	adds	r3, r7, #3
20000ff4:	781b      	ldrb	r3, [r3, #0]
20000ff6:	2b00      	cmp	r3, #0
20000ff8:	d006      	beq.n	20001008 <RCC_APB2PeriphClockCmd+0x24>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
20000ffa:	4b09      	ldr	r3, [pc, #36]	; (20001020 <RCC_APB2PeriphClockCmd+0x3c>)
20000ffc:	6c59      	ldr	r1, [r3, #68]	; 0x44
20000ffe:	4b08      	ldr	r3, [pc, #32]	; (20001020 <RCC_APB2PeriphClockCmd+0x3c>)
20001000:	687a      	ldr	r2, [r7, #4]
20001002:	430a      	orrs	r2, r1
20001004:	645a      	str	r2, [r3, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
20001006:	e006      	b.n	20001016 <RCC_APB2PeriphClockCmd+0x32>
    RCC->APB2ENR &= ~RCC_APB2Periph;
20001008:	4b05      	ldr	r3, [pc, #20]	; (20001020 <RCC_APB2PeriphClockCmd+0x3c>)
2000100a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
2000100c:	687b      	ldr	r3, [r7, #4]
2000100e:	43d9      	mvns	r1, r3
20001010:	4b03      	ldr	r3, [pc, #12]	; (20001020 <RCC_APB2PeriphClockCmd+0x3c>)
20001012:	400a      	ands	r2, r1
20001014:	645a      	str	r2, [r3, #68]	; 0x44
}
20001016:	46c0      	nop			; (mov r8, r8)
20001018:	46bd      	mov	sp, r7
2000101a:	b002      	add	sp, #8
2000101c:	bd80      	pop	{r7, pc}
2000101e:	46c0      	nop			; (mov r8, r8)
20001020:	40023800 	andmi	r3, r2, r0, lsl #16

20001024 <RCC_AHB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
20001024:	b580      	push	{r7, lr}
20001026:	b082      	sub	sp, #8
20001028:	af00      	add	r7, sp, #0
2000102a:	6078      	str	r0, [r7, #4]
2000102c:	000a      	movs	r2, r1
2000102e:	1cfb      	adds	r3, r7, #3
20001030:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20001032:	1cfb      	adds	r3, r7, #3
20001034:	781b      	ldrb	r3, [r3, #0]
20001036:	2b00      	cmp	r3, #0
20001038:	d006      	beq.n	20001048 <RCC_AHB1PeriphResetCmd+0x24>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
2000103a:	4b09      	ldr	r3, [pc, #36]	; (20001060 <RCC_AHB1PeriphResetCmd+0x3c>)
2000103c:	6919      	ldr	r1, [r3, #16]
2000103e:	4b08      	ldr	r3, [pc, #32]	; (20001060 <RCC_AHB1PeriphResetCmd+0x3c>)
20001040:	687a      	ldr	r2, [r7, #4]
20001042:	430a      	orrs	r2, r1
20001044:	611a      	str	r2, [r3, #16]
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
  }
}
20001046:	e006      	b.n	20001056 <RCC_AHB1PeriphResetCmd+0x32>
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
20001048:	4b05      	ldr	r3, [pc, #20]	; (20001060 <RCC_AHB1PeriphResetCmd+0x3c>)
2000104a:	691a      	ldr	r2, [r3, #16]
2000104c:	687b      	ldr	r3, [r7, #4]
2000104e:	43d9      	mvns	r1, r3
20001050:	4b03      	ldr	r3, [pc, #12]	; (20001060 <RCC_AHB1PeriphResetCmd+0x3c>)
20001052:	400a      	ands	r2, r1
20001054:	611a      	str	r2, [r3, #16]
}
20001056:	46c0      	nop			; (mov r8, r8)
20001058:	46bd      	mov	sp, r7
2000105a:	b002      	add	sp, #8
2000105c:	bd80      	pop	{r7, pc}
2000105e:	46c0      	nop			; (mov r8, r8)
20001060:	40023800 	andmi	r3, r2, r0, lsl #16

20001064 <RCC_AHB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
20001064:	b580      	push	{r7, lr}
20001066:	b082      	sub	sp, #8
20001068:	af00      	add	r7, sp, #0
2000106a:	6078      	str	r0, [r7, #4]
2000106c:	000a      	movs	r2, r1
2000106e:	1cfb      	adds	r3, r7, #3
20001070:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20001072:	1cfb      	adds	r3, r7, #3
20001074:	781b      	ldrb	r3, [r3, #0]
20001076:	2b00      	cmp	r3, #0
20001078:	d006      	beq.n	20001088 <RCC_AHB2PeriphResetCmd+0x24>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
2000107a:	4b09      	ldr	r3, [pc, #36]	; (200010a0 <RCC_AHB2PeriphResetCmd+0x3c>)
2000107c:	6959      	ldr	r1, [r3, #20]
2000107e:	4b08      	ldr	r3, [pc, #32]	; (200010a0 <RCC_AHB2PeriphResetCmd+0x3c>)
20001080:	687a      	ldr	r2, [r7, #4]
20001082:	430a      	orrs	r2, r1
20001084:	615a      	str	r2, [r3, #20]
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
  }
}
20001086:	e006      	b.n	20001096 <RCC_AHB2PeriphResetCmd+0x32>
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
20001088:	4b05      	ldr	r3, [pc, #20]	; (200010a0 <RCC_AHB2PeriphResetCmd+0x3c>)
2000108a:	695a      	ldr	r2, [r3, #20]
2000108c:	687b      	ldr	r3, [r7, #4]
2000108e:	43d9      	mvns	r1, r3
20001090:	4b03      	ldr	r3, [pc, #12]	; (200010a0 <RCC_AHB2PeriphResetCmd+0x3c>)
20001092:	400a      	ands	r2, r1
20001094:	615a      	str	r2, [r3, #20]
}
20001096:	46c0      	nop			; (mov r8, r8)
20001098:	46bd      	mov	sp, r7
2000109a:	b002      	add	sp, #8
2000109c:	bd80      	pop	{r7, pc}
2000109e:	46c0      	nop			; (mov r8, r8)
200010a0:	40023800 	andmi	r3, r2, r0, lsl #16

200010a4 <RCC_AHB3PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
200010a4:	b580      	push	{r7, lr}
200010a6:	b082      	sub	sp, #8
200010a8:	af00      	add	r7, sp, #0
200010aa:	6078      	str	r0, [r7, #4]
200010ac:	000a      	movs	r2, r1
200010ae:	1cfb      	adds	r3, r7, #3
200010b0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
200010b2:	1cfb      	adds	r3, r7, #3
200010b4:	781b      	ldrb	r3, [r3, #0]
200010b6:	2b00      	cmp	r3, #0
200010b8:	d006      	beq.n	200010c8 <RCC_AHB3PeriphResetCmd+0x24>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
200010ba:	4b09      	ldr	r3, [pc, #36]	; (200010e0 <RCC_AHB3PeriphResetCmd+0x3c>)
200010bc:	6999      	ldr	r1, [r3, #24]
200010be:	4b08      	ldr	r3, [pc, #32]	; (200010e0 <RCC_AHB3PeriphResetCmd+0x3c>)
200010c0:	687a      	ldr	r2, [r7, #4]
200010c2:	430a      	orrs	r2, r1
200010c4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
  }
}
200010c6:	e006      	b.n	200010d6 <RCC_AHB3PeriphResetCmd+0x32>
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
200010c8:	4b05      	ldr	r3, [pc, #20]	; (200010e0 <RCC_AHB3PeriphResetCmd+0x3c>)
200010ca:	699a      	ldr	r2, [r3, #24]
200010cc:	687b      	ldr	r3, [r7, #4]
200010ce:	43d9      	mvns	r1, r3
200010d0:	4b03      	ldr	r3, [pc, #12]	; (200010e0 <RCC_AHB3PeriphResetCmd+0x3c>)
200010d2:	400a      	ands	r2, r1
200010d4:	619a      	str	r2, [r3, #24]
}
200010d6:	46c0      	nop			; (mov r8, r8)
200010d8:	46bd      	mov	sp, r7
200010da:	b002      	add	sp, #8
200010dc:	bd80      	pop	{r7, pc}
200010de:	46c0      	nop			; (mov r8, r8)
200010e0:	40023800 	andmi	r3, r2, r0, lsl #16

200010e4 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
200010e4:	b580      	push	{r7, lr}
200010e6:	b082      	sub	sp, #8
200010e8:	af00      	add	r7, sp, #0
200010ea:	6078      	str	r0, [r7, #4]
200010ec:	000a      	movs	r2, r1
200010ee:	1cfb      	adds	r3, r7, #3
200010f0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
200010f2:	1cfb      	adds	r3, r7, #3
200010f4:	781b      	ldrb	r3, [r3, #0]
200010f6:	2b00      	cmp	r3, #0
200010f8:	d006      	beq.n	20001108 <RCC_APB1PeriphResetCmd+0x24>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
200010fa:	4b09      	ldr	r3, [pc, #36]	; (20001120 <RCC_APB1PeriphResetCmd+0x3c>)
200010fc:	6a19      	ldr	r1, [r3, #32]
200010fe:	4b08      	ldr	r3, [pc, #32]	; (20001120 <RCC_APB1PeriphResetCmd+0x3c>)
20001100:	687a      	ldr	r2, [r7, #4]
20001102:	430a      	orrs	r2, r1
20001104:	621a      	str	r2, [r3, #32]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
20001106:	e006      	b.n	20001116 <RCC_APB1PeriphResetCmd+0x32>
    RCC->APB1RSTR &= ~RCC_APB1Periph;
20001108:	4b05      	ldr	r3, [pc, #20]	; (20001120 <RCC_APB1PeriphResetCmd+0x3c>)
2000110a:	6a1a      	ldr	r2, [r3, #32]
2000110c:	687b      	ldr	r3, [r7, #4]
2000110e:	43d9      	mvns	r1, r3
20001110:	4b03      	ldr	r3, [pc, #12]	; (20001120 <RCC_APB1PeriphResetCmd+0x3c>)
20001112:	400a      	ands	r2, r1
20001114:	621a      	str	r2, [r3, #32]
}
20001116:	46c0      	nop			; (mov r8, r8)
20001118:	46bd      	mov	sp, r7
2000111a:	b002      	add	sp, #8
2000111c:	bd80      	pop	{r7, pc}
2000111e:	46c0      	nop			; (mov r8, r8)
20001120:	40023800 	andmi	r3, r2, r0, lsl #16

20001124 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
20001124:	b580      	push	{r7, lr}
20001126:	b082      	sub	sp, #8
20001128:	af00      	add	r7, sp, #0
2000112a:	6078      	str	r0, [r7, #4]
2000112c:	000a      	movs	r2, r1
2000112e:	1cfb      	adds	r3, r7, #3
20001130:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20001132:	1cfb      	adds	r3, r7, #3
20001134:	781b      	ldrb	r3, [r3, #0]
20001136:	2b00      	cmp	r3, #0
20001138:	d006      	beq.n	20001148 <RCC_APB2PeriphResetCmd+0x24>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
2000113a:	4b09      	ldr	r3, [pc, #36]	; (20001160 <RCC_APB2PeriphResetCmd+0x3c>)
2000113c:	6a59      	ldr	r1, [r3, #36]	; 0x24
2000113e:	4b08      	ldr	r3, [pc, #32]	; (20001160 <RCC_APB2PeriphResetCmd+0x3c>)
20001140:	687a      	ldr	r2, [r7, #4]
20001142:	430a      	orrs	r2, r1
20001144:	625a      	str	r2, [r3, #36]	; 0x24
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
20001146:	e006      	b.n	20001156 <RCC_APB2PeriphResetCmd+0x32>
    RCC->APB2RSTR &= ~RCC_APB2Periph;
20001148:	4b05      	ldr	r3, [pc, #20]	; (20001160 <RCC_APB2PeriphResetCmd+0x3c>)
2000114a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
2000114c:	687b      	ldr	r3, [r7, #4]
2000114e:	43d9      	mvns	r1, r3
20001150:	4b03      	ldr	r3, [pc, #12]	; (20001160 <RCC_APB2PeriphResetCmd+0x3c>)
20001152:	400a      	ands	r2, r1
20001154:	625a      	str	r2, [r3, #36]	; 0x24
}
20001156:	46c0      	nop			; (mov r8, r8)
20001158:	46bd      	mov	sp, r7
2000115a:	b002      	add	sp, #8
2000115c:	bd80      	pop	{r7, pc}
2000115e:	46c0      	nop			; (mov r8, r8)
20001160:	40023800 	andmi	r3, r2, r0, lsl #16

20001164 <RCC_AHB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
20001164:	b580      	push	{r7, lr}
20001166:	b082      	sub	sp, #8
20001168:	af00      	add	r7, sp, #0
2000116a:	6078      	str	r0, [r7, #4]
2000116c:	000a      	movs	r2, r1
2000116e:	1cfb      	adds	r3, r7, #3
20001170:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20001172:	1cfb      	adds	r3, r7, #3
20001174:	781b      	ldrb	r3, [r3, #0]
20001176:	2b00      	cmp	r3, #0
20001178:	d006      	beq.n	20001188 <RCC_AHB1PeriphClockLPModeCmd+0x24>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
2000117a:	4b09      	ldr	r3, [pc, #36]	; (200011a0 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
2000117c:	6d19      	ldr	r1, [r3, #80]	; 0x50
2000117e:	4b08      	ldr	r3, [pc, #32]	; (200011a0 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
20001180:	687a      	ldr	r2, [r7, #4]
20001182:	430a      	orrs	r2, r1
20001184:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
  }
}
20001186:	e006      	b.n	20001196 <RCC_AHB1PeriphClockLPModeCmd+0x32>
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
20001188:	4b05      	ldr	r3, [pc, #20]	; (200011a0 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
2000118a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
2000118c:	687b      	ldr	r3, [r7, #4]
2000118e:	43d9      	mvns	r1, r3
20001190:	4b03      	ldr	r3, [pc, #12]	; (200011a0 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
20001192:	400a      	ands	r2, r1
20001194:	651a      	str	r2, [r3, #80]	; 0x50
}
20001196:	46c0      	nop			; (mov r8, r8)
20001198:	46bd      	mov	sp, r7
2000119a:	b002      	add	sp, #8
2000119c:	bd80      	pop	{r7, pc}
2000119e:	46c0      	nop			; (mov r8, r8)
200011a0:	40023800 	andmi	r3, r2, r0, lsl #16

200011a4 <RCC_AHB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
200011a4:	b580      	push	{r7, lr}
200011a6:	b082      	sub	sp, #8
200011a8:	af00      	add	r7, sp, #0
200011aa:	6078      	str	r0, [r7, #4]
200011ac:	000a      	movs	r2, r1
200011ae:	1cfb      	adds	r3, r7, #3
200011b0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
200011b2:	1cfb      	adds	r3, r7, #3
200011b4:	781b      	ldrb	r3, [r3, #0]
200011b6:	2b00      	cmp	r3, #0
200011b8:	d006      	beq.n	200011c8 <RCC_AHB2PeriphClockLPModeCmd+0x24>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
200011ba:	4b09      	ldr	r3, [pc, #36]	; (200011e0 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
200011bc:	6d59      	ldr	r1, [r3, #84]	; 0x54
200011be:	4b08      	ldr	r3, [pc, #32]	; (200011e0 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
200011c0:	687a      	ldr	r2, [r7, #4]
200011c2:	430a      	orrs	r2, r1
200011c4:	655a      	str	r2, [r3, #84]	; 0x54
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
  }
}
200011c6:	e006      	b.n	200011d6 <RCC_AHB2PeriphClockLPModeCmd+0x32>
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
200011c8:	4b05      	ldr	r3, [pc, #20]	; (200011e0 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
200011ca:	6d5a      	ldr	r2, [r3, #84]	; 0x54
200011cc:	687b      	ldr	r3, [r7, #4]
200011ce:	43d9      	mvns	r1, r3
200011d0:	4b03      	ldr	r3, [pc, #12]	; (200011e0 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
200011d2:	400a      	ands	r2, r1
200011d4:	655a      	str	r2, [r3, #84]	; 0x54
}
200011d6:	46c0      	nop			; (mov r8, r8)
200011d8:	46bd      	mov	sp, r7
200011da:	b002      	add	sp, #8
200011dc:	bd80      	pop	{r7, pc}
200011de:	46c0      	nop			; (mov r8, r8)
200011e0:	40023800 	andmi	r3, r2, r0, lsl #16

200011e4 <RCC_AHB3PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
200011e4:	b580      	push	{r7, lr}
200011e6:	b082      	sub	sp, #8
200011e8:	af00      	add	r7, sp, #0
200011ea:	6078      	str	r0, [r7, #4]
200011ec:	000a      	movs	r2, r1
200011ee:	1cfb      	adds	r3, r7, #3
200011f0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
200011f2:	1cfb      	adds	r3, r7, #3
200011f4:	781b      	ldrb	r3, [r3, #0]
200011f6:	2b00      	cmp	r3, #0
200011f8:	d006      	beq.n	20001208 <RCC_AHB3PeriphClockLPModeCmd+0x24>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
200011fa:	4b09      	ldr	r3, [pc, #36]	; (20001220 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
200011fc:	6d99      	ldr	r1, [r3, #88]	; 0x58
200011fe:	4b08      	ldr	r3, [pc, #32]	; (20001220 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
20001200:	687a      	ldr	r2, [r7, #4]
20001202:	430a      	orrs	r2, r1
20001204:	659a      	str	r2, [r3, #88]	; 0x58
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
  }
}
20001206:	e006      	b.n	20001216 <RCC_AHB3PeriphClockLPModeCmd+0x32>
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
20001208:	4b05      	ldr	r3, [pc, #20]	; (20001220 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
2000120a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
2000120c:	687b      	ldr	r3, [r7, #4]
2000120e:	43d9      	mvns	r1, r3
20001210:	4b03      	ldr	r3, [pc, #12]	; (20001220 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
20001212:	400a      	ands	r2, r1
20001214:	659a      	str	r2, [r3, #88]	; 0x58
}
20001216:	46c0      	nop			; (mov r8, r8)
20001218:	46bd      	mov	sp, r7
2000121a:	b002      	add	sp, #8
2000121c:	bd80      	pop	{r7, pc}
2000121e:	46c0      	nop			; (mov r8, r8)
20001220:	40023800 	andmi	r3, r2, r0, lsl #16

20001224 <RCC_APB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
20001224:	b580      	push	{r7, lr}
20001226:	b082      	sub	sp, #8
20001228:	af00      	add	r7, sp, #0
2000122a:	6078      	str	r0, [r7, #4]
2000122c:	000a      	movs	r2, r1
2000122e:	1cfb      	adds	r3, r7, #3
20001230:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20001232:	1cfb      	adds	r3, r7, #3
20001234:	781b      	ldrb	r3, [r3, #0]
20001236:	2b00      	cmp	r3, #0
20001238:	d006      	beq.n	20001248 <RCC_APB1PeriphClockLPModeCmd+0x24>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
2000123a:	4b09      	ldr	r3, [pc, #36]	; (20001260 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
2000123c:	6e19      	ldr	r1, [r3, #96]	; 0x60
2000123e:	4b08      	ldr	r3, [pc, #32]	; (20001260 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
20001240:	687a      	ldr	r2, [r7, #4]
20001242:	430a      	orrs	r2, r1
20001244:	661a      	str	r2, [r3, #96]	; 0x60
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
  }
}
20001246:	e006      	b.n	20001256 <RCC_APB1PeriphClockLPModeCmd+0x32>
    RCC->APB1LPENR &= ~RCC_APB1Periph;
20001248:	4b05      	ldr	r3, [pc, #20]	; (20001260 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
2000124a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
2000124c:	687b      	ldr	r3, [r7, #4]
2000124e:	43d9      	mvns	r1, r3
20001250:	4b03      	ldr	r3, [pc, #12]	; (20001260 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
20001252:	400a      	ands	r2, r1
20001254:	661a      	str	r2, [r3, #96]	; 0x60
}
20001256:	46c0      	nop			; (mov r8, r8)
20001258:	46bd      	mov	sp, r7
2000125a:	b002      	add	sp, #8
2000125c:	bd80      	pop	{r7, pc}
2000125e:	46c0      	nop			; (mov r8, r8)
20001260:	40023800 	andmi	r3, r2, r0, lsl #16

20001264 <RCC_APB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
20001264:	b580      	push	{r7, lr}
20001266:	b082      	sub	sp, #8
20001268:	af00      	add	r7, sp, #0
2000126a:	6078      	str	r0, [r7, #4]
2000126c:	000a      	movs	r2, r1
2000126e:	1cfb      	adds	r3, r7, #3
20001270:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20001272:	1cfb      	adds	r3, r7, #3
20001274:	781b      	ldrb	r3, [r3, #0]
20001276:	2b00      	cmp	r3, #0
20001278:	d006      	beq.n	20001288 <RCC_APB2PeriphClockLPModeCmd+0x24>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
2000127a:	4b09      	ldr	r3, [pc, #36]	; (200012a0 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
2000127c:	6e59      	ldr	r1, [r3, #100]	; 0x64
2000127e:	4b08      	ldr	r3, [pc, #32]	; (200012a0 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
20001280:	687a      	ldr	r2, [r7, #4]
20001282:	430a      	orrs	r2, r1
20001284:	665a      	str	r2, [r3, #100]	; 0x64
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
  }
}
20001286:	e006      	b.n	20001296 <RCC_APB2PeriphClockLPModeCmd+0x32>
    RCC->APB2LPENR &= ~RCC_APB2Periph;
20001288:	4b05      	ldr	r3, [pc, #20]	; (200012a0 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
2000128a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
2000128c:	687b      	ldr	r3, [r7, #4]
2000128e:	43d9      	mvns	r1, r3
20001290:	4b03      	ldr	r3, [pc, #12]	; (200012a0 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
20001292:	400a      	ands	r2, r1
20001294:	665a      	str	r2, [r3, #100]	; 0x64
}
20001296:	46c0      	nop			; (mov r8, r8)
20001298:	46bd      	mov	sp, r7
2000129a:	b002      	add	sp, #8
2000129c:	bd80      	pop	{r7, pc}
2000129e:	46c0      	nop			; (mov r8, r8)
200012a0:	40023800 	andmi	r3, r2, r0, lsl #16

200012a4 <RCC_LSEModeConfig>:
  *            @arg RCC_LSE_LOWPOWER_MODE:  LSE oscillator in low power mode.
  *            @arg RCC_LSE_HIGHDRIVE_MODE: LSE oscillator in High Drive mode.
  * @retval None
  */
void RCC_LSEModeConfig(uint8_t RCC_Mode)
{
200012a4:	b580      	push	{r7, lr}
200012a6:	b082      	sub	sp, #8
200012a8:	af00      	add	r7, sp, #0
200012aa:	0002      	movs	r2, r0
200012ac:	1dfb      	adds	r3, r7, #7
200012ae:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_LSE_MODE(RCC_Mode));
  
  if(RCC_Mode == RCC_LSE_HIGHDRIVE_MODE)
200012b0:	1dfb      	adds	r3, r7, #7
200012b2:	781b      	ldrb	r3, [r3, #0]
200012b4:	2b01      	cmp	r3, #1
200012b6:	d106      	bne.n	200012c6 <RCC_LSEModeConfig+0x22>
  {
    SET_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
200012b8:	4b08      	ldr	r3, [pc, #32]	; (200012dc <RCC_LSEModeConfig+0x38>)
200012ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
200012bc:	4b07      	ldr	r3, [pc, #28]	; (200012dc <RCC_LSEModeConfig+0x38>)
200012be:	2108      	movs	r1, #8
200012c0:	430a      	orrs	r2, r1
200012c2:	671a      	str	r2, [r3, #112]	; 0x70
  }
  else
  {
    CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
  }
}
200012c4:	e005      	b.n	200012d2 <RCC_LSEModeConfig+0x2e>
    CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
200012c6:	4b05      	ldr	r3, [pc, #20]	; (200012dc <RCC_LSEModeConfig+0x38>)
200012c8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
200012ca:	4b04      	ldr	r3, [pc, #16]	; (200012dc <RCC_LSEModeConfig+0x38>)
200012cc:	2108      	movs	r1, #8
200012ce:	438a      	bics	r2, r1
200012d0:	671a      	str	r2, [r3, #112]	; 0x70
}
200012d2:	46c0      	nop			; (mov r8, r8)
200012d4:	46bd      	mov	sp, r7
200012d6:	b002      	add	sp, #8
200012d8:	bd80      	pop	{r7, pc}
200012da:	46c0      	nop			; (mov r8, r8)
200012dc:	40023800 	andmi	r3, r2, r0, lsl #16

200012e0 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
200012e0:	b580      	push	{r7, lr}
200012e2:	b082      	sub	sp, #8
200012e4:	af00      	add	r7, sp, #0
200012e6:	0002      	movs	r2, r0
200012e8:	1dfb      	adds	r3, r7, #7
200012ea:	701a      	strb	r2, [r3, #0]
200012ec:	1dbb      	adds	r3, r7, #6
200012ee:	1c0a      	adds	r2, r1, #0
200012f0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
200012f2:	1dbb      	adds	r3, r7, #6
200012f4:	781b      	ldrb	r3, [r3, #0]
200012f6:	2b00      	cmp	r3, #0
200012f8:	d009      	beq.n	2000130e <RCC_ITConfig+0x2e>
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
200012fa:	4b0c      	ldr	r3, [pc, #48]	; (2000132c <RCC_ITConfig+0x4c>)
200012fc:	781b      	ldrb	r3, [r3, #0]
200012fe:	b2da      	uxtb	r2, r3
20001300:	490a      	ldr	r1, [pc, #40]	; (2000132c <RCC_ITConfig+0x4c>)
20001302:	1dfb      	adds	r3, r7, #7
20001304:	781b      	ldrb	r3, [r3, #0]
20001306:	4313      	orrs	r3, r2
20001308:	b2db      	uxtb	r3, r3
2000130a:	700b      	strb	r3, [r1, #0]
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
  }
}
2000130c:	e00a      	b.n	20001324 <RCC_ITConfig+0x44>
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
2000130e:	4b07      	ldr	r3, [pc, #28]	; (2000132c <RCC_ITConfig+0x4c>)
20001310:	781b      	ldrb	r3, [r3, #0]
20001312:	b2db      	uxtb	r3, r3
20001314:	1dfa      	adds	r2, r7, #7
20001316:	7812      	ldrb	r2, [r2, #0]
20001318:	43d2      	mvns	r2, r2
2000131a:	b2d2      	uxtb	r2, r2
2000131c:	4903      	ldr	r1, [pc, #12]	; (2000132c <RCC_ITConfig+0x4c>)
2000131e:	4013      	ands	r3, r2
20001320:	b2db      	uxtb	r3, r3
20001322:	700b      	strb	r3, [r1, #0]
}
20001324:	46c0      	nop			; (mov r8, r8)
20001326:	46bd      	mov	sp, r7
20001328:	b002      	add	sp, #8
2000132a:	bd80      	pop	{r7, pc}
2000132c:	4002380d 	andmi	r3, r2, sp, lsl #16

20001330 <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
20001330:	b580      	push	{r7, lr}
20001332:	b086      	sub	sp, #24
20001334:	af00      	add	r7, sp, #0
20001336:	0002      	movs	r2, r0
20001338:	1dfb      	adds	r3, r7, #7
2000133a:	701a      	strb	r2, [r3, #0]
  uint32_t tmp = 0;
2000133c:	2300      	movs	r3, #0
2000133e:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
20001340:	2300      	movs	r3, #0
20001342:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
20001344:	2313      	movs	r3, #19
20001346:	18fb      	adds	r3, r7, r3
20001348:	2200      	movs	r2, #0
2000134a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
2000134c:	1dfb      	adds	r3, r7, #7
2000134e:	781b      	ldrb	r3, [r3, #0]
20001350:	095b      	lsrs	r3, r3, #5
20001352:	b2db      	uxtb	r3, r3
20001354:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
20001356:	68fb      	ldr	r3, [r7, #12]
20001358:	2b01      	cmp	r3, #1
2000135a:	d103      	bne.n	20001364 <RCC_GetFlagStatus+0x34>
  {
    statusreg = RCC->CR;
2000135c:	4b14      	ldr	r3, [pc, #80]	; (200013b0 <RCC_GetFlagStatus+0x80>)
2000135e:	681b      	ldr	r3, [r3, #0]
20001360:	617b      	str	r3, [r7, #20]
20001362:	e009      	b.n	20001378 <RCC_GetFlagStatus+0x48>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
20001364:	68fb      	ldr	r3, [r7, #12]
20001366:	2b02      	cmp	r3, #2
20001368:	d103      	bne.n	20001372 <RCC_GetFlagStatus+0x42>
  {
    statusreg = RCC->BDCR;
2000136a:	4b11      	ldr	r3, [pc, #68]	; (200013b0 <RCC_GetFlagStatus+0x80>)
2000136c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000136e:	617b      	str	r3, [r7, #20]
20001370:	e002      	b.n	20001378 <RCC_GetFlagStatus+0x48>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
20001372:	4b0f      	ldr	r3, [pc, #60]	; (200013b0 <RCC_GetFlagStatus+0x80>)
20001374:	6f5b      	ldr	r3, [r3, #116]	; 0x74
20001376:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
20001378:	1dfb      	adds	r3, r7, #7
2000137a:	781b      	ldrb	r3, [r3, #0]
2000137c:	221f      	movs	r2, #31
2000137e:	4013      	ands	r3, r2
20001380:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
20001382:	697a      	ldr	r2, [r7, #20]
20001384:	68fb      	ldr	r3, [r7, #12]
20001386:	40da      	lsrs	r2, r3
20001388:	0013      	movs	r3, r2
2000138a:	2201      	movs	r2, #1
2000138c:	4013      	ands	r3, r2
2000138e:	d004      	beq.n	2000139a <RCC_GetFlagStatus+0x6a>
  {
    bitstatus = SET;
20001390:	2313      	movs	r3, #19
20001392:	18fb      	adds	r3, r7, r3
20001394:	2201      	movs	r2, #1
20001396:	701a      	strb	r2, [r3, #0]
20001398:	e003      	b.n	200013a2 <RCC_GetFlagStatus+0x72>
  }
  else
  {
    bitstatus = RESET;
2000139a:	2313      	movs	r3, #19
2000139c:	18fb      	adds	r3, r7, r3
2000139e:	2200      	movs	r2, #0
200013a0:	701a      	strb	r2, [r3, #0]
  }
  /* Return the flag status */
  return bitstatus;
200013a2:	2313      	movs	r3, #19
200013a4:	18fb      	adds	r3, r7, r3
200013a6:	781b      	ldrb	r3, [r3, #0]
}
200013a8:	0018      	movs	r0, r3
200013aa:	46bd      	mov	sp, r7
200013ac:	b006      	add	sp, #24
200013ae:	bd80      	pop	{r7, pc}
200013b0:	40023800 	andmi	r3, r2, r0, lsl #16

200013b4 <RCC_ClearFlag>:
  *         RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
200013b4:	b580      	push	{r7, lr}
200013b6:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
200013b8:	4b04      	ldr	r3, [pc, #16]	; (200013cc <RCC_ClearFlag+0x18>)
200013ba:	6f5a      	ldr	r2, [r3, #116]	; 0x74
200013bc:	4b03      	ldr	r3, [pc, #12]	; (200013cc <RCC_ClearFlag+0x18>)
200013be:	2180      	movs	r1, #128	; 0x80
200013c0:	0449      	lsls	r1, r1, #17
200013c2:	430a      	orrs	r2, r1
200013c4:	675a      	str	r2, [r3, #116]	; 0x74
}
200013c6:	46c0      	nop			; (mov r8, r8)
200013c8:	46bd      	mov	sp, r7
200013ca:	bd80      	pop	{r7, pc}
200013cc:	40023800 	andmi	r3, r2, r0, lsl #16

200013d0 <RCC_GetITStatus>:
  *            @arg RCC_IT_PLLSAIRDY: PLLSAI clock ready interrupt (only for STM32F42xxx/43xxx/446xx/469xx/479xx devices)
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
200013d0:	b580      	push	{r7, lr}
200013d2:	b084      	sub	sp, #16
200013d4:	af00      	add	r7, sp, #0
200013d6:	0002      	movs	r2, r0
200013d8:	1dfb      	adds	r3, r7, #7
200013da:	701a      	strb	r2, [r3, #0]
  ITStatus bitstatus = RESET;
200013dc:	210f      	movs	r1, #15
200013de:	187b      	adds	r3, r7, r1
200013e0:	2200      	movs	r2, #0
200013e2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
200013e4:	4b0a      	ldr	r3, [pc, #40]	; (20001410 <RCC_GetITStatus+0x40>)
200013e6:	68db      	ldr	r3, [r3, #12]
200013e8:	1dfa      	adds	r2, r7, #7
200013ea:	7812      	ldrb	r2, [r2, #0]
200013ec:	4013      	ands	r3, r2
200013ee:	d003      	beq.n	200013f8 <RCC_GetITStatus+0x28>
  {
    bitstatus = SET;
200013f0:	187b      	adds	r3, r7, r1
200013f2:	2201      	movs	r2, #1
200013f4:	701a      	strb	r2, [r3, #0]
200013f6:	e003      	b.n	20001400 <RCC_GetITStatus+0x30>
  }
  else
  {
    bitstatus = RESET;
200013f8:	230f      	movs	r3, #15
200013fa:	18fb      	adds	r3, r7, r3
200013fc:	2200      	movs	r2, #0
200013fe:	701a      	strb	r2, [r3, #0]
  }
  /* Return the RCC_IT status */
  return  bitstatus;
20001400:	230f      	movs	r3, #15
20001402:	18fb      	adds	r3, r7, r3
20001404:	781b      	ldrb	r3, [r3, #0]
}
20001406:	0018      	movs	r0, r3
20001408:	46bd      	mov	sp, r7
2000140a:	b004      	add	sp, #16
2000140c:	bd80      	pop	{r7, pc}
2000140e:	46c0      	nop			; (mov r8, r8)
20001410:	40023800 	andmi	r3, r2, r0, lsl #16

20001414 <RCC_ClearITPendingBit>:
  *            @arg RCC_IT_PLLSAIRDY: PLLSAI ready interrupt (only for STM32F42xxx/43xxx/446xx/469xx/479xx devices) 
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
20001414:	b580      	push	{r7, lr}
20001416:	b082      	sub	sp, #8
20001418:	af00      	add	r7, sp, #0
2000141a:	0002      	movs	r2, r0
2000141c:	1dfb      	adds	r3, r7, #7
2000141e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
20001420:	4a03      	ldr	r2, [pc, #12]	; (20001430 <RCC_ClearITPendingBit+0x1c>)
20001422:	1dfb      	adds	r3, r7, #7
20001424:	781b      	ldrb	r3, [r3, #0]
20001426:	7013      	strb	r3, [r2, #0]
}
20001428:	46c0      	nop			; (mov r8, r8)
2000142a:	46bd      	mov	sp, r7
2000142c:	b002      	add	sp, #8
2000142e:	bd80      	pop	{r7, pc}
20001430:	4002380e 	andmi	r3, r2, lr, lsl #16

20001434 <out_char>:
    volatile unsigned short gtpr;
} USART;

#define USART1  ((USART *) 0x40011000) 

void out_char( char c ) {
20001434:	b580      	push	{r7, lr}
20001436:	b082      	sub	sp, #8
20001438:	af00      	add	r7, sp, #0
2000143a:	0002      	movs	r2, r0
2000143c:	1dfb      	adds	r3, r7, #7
2000143e:	701a      	strb	r2, [r3, #0]
    // wait until usart1 is ready
    while (( USART1->sr & 0x80) == 0);
20001440:	46c0      	nop			; (mov r8, r8)
20001442:	4b0b      	ldr	r3, [pc, #44]	; (20001470 <out_char+0x3c>)
20001444:	881b      	ldrh	r3, [r3, #0]
20001446:	b29b      	uxth	r3, r3
20001448:	001a      	movs	r2, r3
2000144a:	2380      	movs	r3, #128	; 0x80
2000144c:	4013      	ands	r3, r2
2000144e:	d0f8      	beq.n	20001442 <out_char+0xe>
    // write character to usart1 
    USART1->dr = (unsigned short) c;
20001450:	4a07      	ldr	r2, [pc, #28]	; (20001470 <out_char+0x3c>)
20001452:	1dfb      	adds	r3, r7, #7
20001454:	781b      	ldrb	r3, [r3, #0]
20001456:	b29b      	uxth	r3, r3
20001458:	8093      	strh	r3, [r2, #4]
    if( c == '\n')
2000145a:	1dfb      	adds	r3, r7, #7
2000145c:	781b      	ldrb	r3, [r3, #0]
2000145e:	2b0a      	cmp	r3, #10
20001460:	d102      	bne.n	20001468 <out_char+0x34>
        out_char('\r');
20001462:	200d      	movs	r0, #13
20001464:	f7ff ffe6 	bl	20001434 <out_char>
}
20001468:	46c0      	nop			; (mov r8, r8)
2000146a:	46bd      	mov	sp, r7
2000146c:	b002      	add	sp, #8
2000146e:	bd80      	pop	{r7, pc}
20001470:	40011000 	andmi	r1, r1, r0

20001474 <test_char>:

char test_char(void) {
20001474:	b580      	push	{r7, lr}
20001476:	af00      	add	r7, sp, #0
    // if character arrived at usart1, return it
    if( (USART1->sr & 0x20)==0)
20001478:	4b07      	ldr	r3, [pc, #28]	; (20001498 <test_char+0x24>)
2000147a:	881b      	ldrh	r3, [r3, #0]
2000147c:	b29b      	uxth	r3, r3
2000147e:	001a      	movs	r2, r3
20001480:	2320      	movs	r3, #32
20001482:	4013      	ands	r3, r2
20001484:	d101      	bne.n	2000148a <test_char+0x16>
        return 0;
20001486:	2300      	movs	r3, #0
20001488:	e003      	b.n	20001492 <test_char+0x1e>
    return (char) USART1->dr;
2000148a:	4b03      	ldr	r3, [pc, #12]	; (20001498 <test_char+0x24>)
2000148c:	889b      	ldrh	r3, [r3, #4]
2000148e:	b29b      	uxth	r3, r3
20001490:	b2db      	uxtb	r3, r3
}
20001492:	0018      	movs	r0, r3
20001494:	46bd      	mov	sp, r7
20001496:	bd80      	pop	{r7, pc}
20001498:	40011000 	andmi	r1, r1, r0

2000149c <_getchar>:

char _getchar(void) {
2000149c:	b580      	push	{r7, lr}
2000149e:	af00      	add	r7, sp, #0
    // wait until character arrived at usart1, then return it
    while( (USART1->sr & 0x20)==0);
200014a0:	46c0      	nop			; (mov r8, r8)
200014a2:	4b07      	ldr	r3, [pc, #28]	; (200014c0 <_getchar+0x24>)
200014a4:	881b      	ldrh	r3, [r3, #0]
200014a6:	b29b      	uxth	r3, r3
200014a8:	001a      	movs	r2, r3
200014aa:	2320      	movs	r3, #32
200014ac:	4013      	ands	r3, r2
200014ae:	d0f8      	beq.n	200014a2 <_getchar+0x6>
    return (char) USART1->dr;
200014b0:	4b03      	ldr	r3, [pc, #12]	; (200014c0 <_getchar+0x24>)
200014b2:	889b      	ldrh	r3, [r3, #4]
200014b4:	b29b      	uxth	r3, r3
200014b6:	b2db      	uxtb	r3, r3
}
200014b8:	0018      	movs	r0, r3
200014ba:	46bd      	mov	sp, r7
200014bc:	bd80      	pop	{r7, pc}
200014be:	46c0      	nop			; (mov r8, r8)
200014c0:	40011000 	andmi	r1, r1, r0

200014c4 <print>:

void print(char* s){
200014c4:	b580      	push	{r7, lr}
200014c6:	b082      	sub	sp, #8
200014c8:	af00      	add	r7, sp, #0
200014ca:	6078      	str	r0, [r7, #4]
    while (*s != '\0')
200014cc:	e006      	b.n	200014dc <print+0x18>
        out_char(*(s++));
200014ce:	687b      	ldr	r3, [r7, #4]
200014d0:	1c5a      	adds	r2, r3, #1
200014d2:	607a      	str	r2, [r7, #4]
200014d4:	781b      	ldrb	r3, [r3, #0]
200014d6:	0018      	movs	r0, r3
200014d8:	f7ff ffac 	bl	20001434 <out_char>
    while (*s != '\0')
200014dc:	687b      	ldr	r3, [r7, #4]
200014de:	781b      	ldrb	r3, [r3, #0]
200014e0:	2b00      	cmp	r3, #0
200014e2:	d1f4      	bne.n	200014ce <print+0xa>
200014e4:	46c0      	nop			; (mov r8, r8)
200014e6:	46c0      	nop			; (mov r8, r8)
200014e8:	46bd      	mov	sp, r7
200014ea:	b002      	add	sp, #8
200014ec:	bd80      	pop	{r7, pc}
200014ee:	46c0      	nop			; (mov r8, r8)

200014f0 <USART_DeInit>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
200014f0:	b580      	push	{r7, lr}
200014f2:	b082      	sub	sp, #8
200014f4:	af00      	add	r7, sp, #0
200014f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
200014f8:	687b      	ldr	r3, [r7, #4]
200014fa:	4a41      	ldr	r2, [pc, #260]	; (20001600 <USART_DeInit+0x110>)
200014fc:	4293      	cmp	r3, r2
200014fe:	d108      	bne.n	20001512 <USART_DeInit+0x22>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
20001500:	2101      	movs	r1, #1
20001502:	2010      	movs	r0, #16
20001504:	f7ff fe0e 	bl	20001124 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
20001508:	2100      	movs	r1, #0
2000150a:	2010      	movs	r0, #16
2000150c:	f7ff fe0a 	bl	20001124 <RCC_APB2PeriphResetCmd>
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
    }
  }
}
20001510:	e071      	b.n	200015f6 <USART_DeInit+0x106>
  else if (USARTx == USART2)
20001512:	687b      	ldr	r3, [r7, #4]
20001514:	4a3b      	ldr	r2, [pc, #236]	; (20001604 <USART_DeInit+0x114>)
20001516:	4293      	cmp	r3, r2
20001518:	d10c      	bne.n	20001534 <USART_DeInit+0x44>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
2000151a:	2380      	movs	r3, #128	; 0x80
2000151c:	029b      	lsls	r3, r3, #10
2000151e:	2101      	movs	r1, #1
20001520:	0018      	movs	r0, r3
20001522:	f7ff fddf 	bl	200010e4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
20001526:	2380      	movs	r3, #128	; 0x80
20001528:	029b      	lsls	r3, r3, #10
2000152a:	2100      	movs	r1, #0
2000152c:	0018      	movs	r0, r3
2000152e:	f7ff fdd9 	bl	200010e4 <RCC_APB1PeriphResetCmd>
}
20001532:	e060      	b.n	200015f6 <USART_DeInit+0x106>
  else if (USARTx == USART3)
20001534:	687b      	ldr	r3, [r7, #4]
20001536:	4a34      	ldr	r2, [pc, #208]	; (20001608 <USART_DeInit+0x118>)
20001538:	4293      	cmp	r3, r2
2000153a:	d10c      	bne.n	20001556 <USART_DeInit+0x66>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
2000153c:	2380      	movs	r3, #128	; 0x80
2000153e:	02db      	lsls	r3, r3, #11
20001540:	2101      	movs	r1, #1
20001542:	0018      	movs	r0, r3
20001544:	f7ff fdce 	bl	200010e4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
20001548:	2380      	movs	r3, #128	; 0x80
2000154a:	02db      	lsls	r3, r3, #11
2000154c:	2100      	movs	r1, #0
2000154e:	0018      	movs	r0, r3
20001550:	f7ff fdc8 	bl	200010e4 <RCC_APB1PeriphResetCmd>
}
20001554:	e04f      	b.n	200015f6 <USART_DeInit+0x106>
  else if (USARTx == UART4)
20001556:	687b      	ldr	r3, [r7, #4]
20001558:	4a2c      	ldr	r2, [pc, #176]	; (2000160c <USART_DeInit+0x11c>)
2000155a:	4293      	cmp	r3, r2
2000155c:	d10c      	bne.n	20001578 <USART_DeInit+0x88>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
2000155e:	2380      	movs	r3, #128	; 0x80
20001560:	031b      	lsls	r3, r3, #12
20001562:	2101      	movs	r1, #1
20001564:	0018      	movs	r0, r3
20001566:	f7ff fdbd 	bl	200010e4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
2000156a:	2380      	movs	r3, #128	; 0x80
2000156c:	031b      	lsls	r3, r3, #12
2000156e:	2100      	movs	r1, #0
20001570:	0018      	movs	r0, r3
20001572:	f7ff fdb7 	bl	200010e4 <RCC_APB1PeriphResetCmd>
}
20001576:	e03e      	b.n	200015f6 <USART_DeInit+0x106>
  else if (USARTx == UART5)
20001578:	687b      	ldr	r3, [r7, #4]
2000157a:	4a25      	ldr	r2, [pc, #148]	; (20001610 <USART_DeInit+0x120>)
2000157c:	4293      	cmp	r3, r2
2000157e:	d10c      	bne.n	2000159a <USART_DeInit+0xaa>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
20001580:	2380      	movs	r3, #128	; 0x80
20001582:	035b      	lsls	r3, r3, #13
20001584:	2101      	movs	r1, #1
20001586:	0018      	movs	r0, r3
20001588:	f7ff fdac 	bl	200010e4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
2000158c:	2380      	movs	r3, #128	; 0x80
2000158e:	035b      	lsls	r3, r3, #13
20001590:	2100      	movs	r1, #0
20001592:	0018      	movs	r0, r3
20001594:	f7ff fda6 	bl	200010e4 <RCC_APB1PeriphResetCmd>
}
20001598:	e02d      	b.n	200015f6 <USART_DeInit+0x106>
  else if (USARTx == USART6)
2000159a:	687b      	ldr	r3, [r7, #4]
2000159c:	4a1d      	ldr	r2, [pc, #116]	; (20001614 <USART_DeInit+0x124>)
2000159e:	4293      	cmp	r3, r2
200015a0:	d108      	bne.n	200015b4 <USART_DeInit+0xc4>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
200015a2:	2101      	movs	r1, #1
200015a4:	2020      	movs	r0, #32
200015a6:	f7ff fdbd 	bl	20001124 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
200015aa:	2100      	movs	r1, #0
200015ac:	2020      	movs	r0, #32
200015ae:	f7ff fdb9 	bl	20001124 <RCC_APB2PeriphResetCmd>
}
200015b2:	e020      	b.n	200015f6 <USART_DeInit+0x106>
  else if (USARTx == UART7)
200015b4:	687b      	ldr	r3, [r7, #4]
200015b6:	4a18      	ldr	r2, [pc, #96]	; (20001618 <USART_DeInit+0x128>)
200015b8:	4293      	cmp	r3, r2
200015ba:	d10c      	bne.n	200015d6 <USART_DeInit+0xe6>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, ENABLE);
200015bc:	2380      	movs	r3, #128	; 0x80
200015be:	05db      	lsls	r3, r3, #23
200015c0:	2101      	movs	r1, #1
200015c2:	0018      	movs	r0, r3
200015c4:	f7ff fd8e 	bl	200010e4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, DISABLE);
200015c8:	2380      	movs	r3, #128	; 0x80
200015ca:	05db      	lsls	r3, r3, #23
200015cc:	2100      	movs	r1, #0
200015ce:	0018      	movs	r0, r3
200015d0:	f7ff fd88 	bl	200010e4 <RCC_APB1PeriphResetCmd>
}
200015d4:	e00f      	b.n	200015f6 <USART_DeInit+0x106>
    if (USARTx == UART8)
200015d6:	687b      	ldr	r3, [r7, #4]
200015d8:	4a10      	ldr	r2, [pc, #64]	; (2000161c <USART_DeInit+0x12c>)
200015da:	4293      	cmp	r3, r2
200015dc:	d10b      	bne.n	200015f6 <USART_DeInit+0x106>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
200015de:	2380      	movs	r3, #128	; 0x80
200015e0:	061b      	lsls	r3, r3, #24
200015e2:	2101      	movs	r1, #1
200015e4:	0018      	movs	r0, r3
200015e6:	f7ff fd7d 	bl	200010e4 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
200015ea:	2380      	movs	r3, #128	; 0x80
200015ec:	061b      	lsls	r3, r3, #24
200015ee:	2100      	movs	r1, #0
200015f0:	0018      	movs	r0, r3
200015f2:	f7ff fd77 	bl	200010e4 <RCC_APB1PeriphResetCmd>
}
200015f6:	46c0      	nop			; (mov r8, r8)
200015f8:	46bd      	mov	sp, r7
200015fa:	b002      	add	sp, #8
200015fc:	bd80      	pop	{r7, pc}
200015fe:	46c0      	nop			; (mov r8, r8)
20001600:	40011000 	andmi	r1, r1, r0
20001604:	40004400 	andmi	r4, r0, r0, lsl #8
20001608:	40004800 	andmi	r4, r0, r0, lsl #16
2000160c:	40004c00 	andmi	r4, r0, r0, lsl #24
20001610:	40005000 	andmi	r5, r0, r0
20001614:	40011400 	andmi	r1, r1, r0, lsl #8
20001618:	40007800 	andmi	r7, r0, r0, lsl #16
2000161c:	40007c00 	andmi	r7, r0, r0, lsl #24

20001620 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
20001620:	b580      	push	{r7, lr}
20001622:	b08a      	sub	sp, #40	; 0x28
20001624:	af00      	add	r7, sp, #0
20001626:	6078      	str	r0, [r7, #4]
20001628:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
2000162a:	2300      	movs	r3, #0
2000162c:	627b      	str	r3, [r7, #36]	; 0x24
2000162e:	2300      	movs	r3, #0
20001630:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
20001632:	2300      	movs	r3, #0
20001634:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
20001636:	2300      	movs	r3, #0
20001638:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
2000163a:	687b      	ldr	r3, [r7, #4]
2000163c:	8a1b      	ldrh	r3, [r3, #16]
2000163e:	b29b      	uxth	r3, r3
20001640:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
20001642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001644:	4a56      	ldr	r2, [pc, #344]	; (200017a0 <USART_Init+0x180>)
20001646:	4013      	ands	r3, r2
20001648:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
2000164a:	683b      	ldr	r3, [r7, #0]
2000164c:	88db      	ldrh	r3, [r3, #6]
2000164e:	001a      	movs	r2, r3
20001650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001652:	4313      	orrs	r3, r2
20001654:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
20001656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001658:	b29a      	uxth	r2, r3
2000165a:	687b      	ldr	r3, [r7, #4]
2000165c:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
2000165e:	687b      	ldr	r3, [r7, #4]
20001660:	899b      	ldrh	r3, [r3, #12]
20001662:	b29b      	uxth	r3, r3
20001664:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
20001666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001668:	4a4e      	ldr	r2, [pc, #312]	; (200017a4 <USART_Init+0x184>)
2000166a:	4013      	ands	r3, r2
2000166c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
2000166e:	683b      	ldr	r3, [r7, #0]
20001670:	889a      	ldrh	r2, [r3, #4]
20001672:	683b      	ldr	r3, [r7, #0]
20001674:	891b      	ldrh	r3, [r3, #8]
20001676:	4313      	orrs	r3, r2
20001678:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
2000167a:	683b      	ldr	r3, [r7, #0]
2000167c:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
2000167e:	4313      	orrs	r3, r2
20001680:	b29b      	uxth	r3, r3
20001682:	001a      	movs	r2, r3
20001684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001686:	4313      	orrs	r3, r2
20001688:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
2000168a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000168c:	b29a      	uxth	r2, r3
2000168e:	687b      	ldr	r3, [r7, #4]
20001690:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
20001692:	687b      	ldr	r3, [r7, #4]
20001694:	8a9b      	ldrh	r3, [r3, #20]
20001696:	b29b      	uxth	r3, r3
20001698:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
2000169a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000169c:	4a42      	ldr	r2, [pc, #264]	; (200017a8 <USART_Init+0x188>)
2000169e:	4013      	ands	r3, r2
200016a0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
200016a2:	683b      	ldr	r3, [r7, #0]
200016a4:	899b      	ldrh	r3, [r3, #12]
200016a6:	001a      	movs	r2, r3
200016a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200016aa:	4313      	orrs	r3, r2
200016ac:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
200016ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200016b0:	b29a      	uxth	r2, r3
200016b2:	687b      	ldr	r3, [r7, #4]
200016b4:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
200016b6:	2308      	movs	r3, #8
200016b8:	18fb      	adds	r3, r7, r3
200016ba:	0018      	movs	r0, r3
200016bc:	f7ff fa5c 	bl	20000b78 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
200016c0:	687b      	ldr	r3, [r7, #4]
200016c2:	4a3a      	ldr	r2, [pc, #232]	; (200017ac <USART_Init+0x18c>)
200016c4:	4293      	cmp	r3, r2
200016c6:	d003      	beq.n	200016d0 <USART_Init+0xb0>
200016c8:	687b      	ldr	r3, [r7, #4]
200016ca:	4a39      	ldr	r2, [pc, #228]	; (200017b0 <USART_Init+0x190>)
200016cc:	4293      	cmp	r3, r2
200016ce:	d104      	bne.n	200016da <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
200016d0:	2308      	movs	r3, #8
200016d2:	18fb      	adds	r3, r7, r3
200016d4:	68db      	ldr	r3, [r3, #12]
200016d6:	623b      	str	r3, [r7, #32]
200016d8:	e003      	b.n	200016e2 <USART_Init+0xc2>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
200016da:	2308      	movs	r3, #8
200016dc:	18fb      	adds	r3, r7, r3
200016de:	689b      	ldr	r3, [r3, #8]
200016e0:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
200016e2:	687b      	ldr	r3, [r7, #4]
200016e4:	899b      	ldrh	r3, [r3, #12]
200016e6:	b29b      	uxth	r3, r3
200016e8:	b21b      	sxth	r3, r3
200016ea:	2b00      	cmp	r3, #0
200016ec:	da0f      	bge.n	2000170e <USART_Init+0xee>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
200016ee:	6a3a      	ldr	r2, [r7, #32]
200016f0:	0013      	movs	r3, r2
200016f2:	009b      	lsls	r3, r3, #2
200016f4:	189b      	adds	r3, r3, r2
200016f6:	009a      	lsls	r2, r3, #2
200016f8:	189a      	adds	r2, r3, r2
200016fa:	683b      	ldr	r3, [r7, #0]
200016fc:	681b      	ldr	r3, [r3, #0]
200016fe:	005b      	lsls	r3, r3, #1
20001700:	0019      	movs	r1, r3
20001702:	0010      	movs	r0, r2
20001704:	f000 fbf2 	bl	20001eec <__udivsi3>
20001708:	0003      	movs	r3, r0
2000170a:	61fb      	str	r3, [r7, #28]
2000170c:	e00e      	b.n	2000172c <USART_Init+0x10c>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
2000170e:	6a3a      	ldr	r2, [r7, #32]
20001710:	0013      	movs	r3, r2
20001712:	009b      	lsls	r3, r3, #2
20001714:	189b      	adds	r3, r3, r2
20001716:	009a      	lsls	r2, r3, #2
20001718:	189a      	adds	r2, r3, r2
2000171a:	683b      	ldr	r3, [r7, #0]
2000171c:	681b      	ldr	r3, [r3, #0]
2000171e:	009b      	lsls	r3, r3, #2
20001720:	0019      	movs	r1, r3
20001722:	0010      	movs	r0, r2
20001724:	f000 fbe2 	bl	20001eec <__udivsi3>
20001728:	0003      	movs	r3, r0
2000172a:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
2000172c:	69fb      	ldr	r3, [r7, #28]
2000172e:	2164      	movs	r1, #100	; 0x64
20001730:	0018      	movs	r0, r3
20001732:	f000 fbdb 	bl	20001eec <__udivsi3>
20001736:	0003      	movs	r3, r0
20001738:	011b      	lsls	r3, r3, #4
2000173a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
2000173c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000173e:	091b      	lsrs	r3, r3, #4
20001740:	2264      	movs	r2, #100	; 0x64
20001742:	4353      	muls	r3, r2
20001744:	69fa      	ldr	r2, [r7, #28]
20001746:	1ad3      	subs	r3, r2, r3
20001748:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
2000174a:	687b      	ldr	r3, [r7, #4]
2000174c:	899b      	ldrh	r3, [r3, #12]
2000174e:	b29b      	uxth	r3, r3
20001750:	b21b      	sxth	r3, r3
20001752:	2b00      	cmp	r3, #0
20001754:	da0e      	bge.n	20001774 <USART_Init+0x154>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
20001756:	69bb      	ldr	r3, [r7, #24]
20001758:	00db      	lsls	r3, r3, #3
2000175a:	3332      	adds	r3, #50	; 0x32
2000175c:	2164      	movs	r1, #100	; 0x64
2000175e:	0018      	movs	r0, r3
20001760:	f000 fbc4 	bl	20001eec <__udivsi3>
20001764:	0003      	movs	r3, r0
20001766:	001a      	movs	r2, r3
20001768:	2307      	movs	r3, #7
2000176a:	4013      	ands	r3, r2
2000176c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
2000176e:	4313      	orrs	r3, r2
20001770:	627b      	str	r3, [r7, #36]	; 0x24
20001772:	e00d      	b.n	20001790 <USART_Init+0x170>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
20001774:	69bb      	ldr	r3, [r7, #24]
20001776:	011b      	lsls	r3, r3, #4
20001778:	3332      	adds	r3, #50	; 0x32
2000177a:	2164      	movs	r1, #100	; 0x64
2000177c:	0018      	movs	r0, r3
2000177e:	f000 fbb5 	bl	20001eec <__udivsi3>
20001782:	0003      	movs	r3, r0
20001784:	001a      	movs	r2, r3
20001786:	230f      	movs	r3, #15
20001788:	4013      	ands	r3, r2
2000178a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
2000178c:	4313      	orrs	r3, r2
2000178e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
20001790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001792:	b29a      	uxth	r2, r3
20001794:	687b      	ldr	r3, [r7, #4]
20001796:	811a      	strh	r2, [r3, #8]
}
20001798:	46c0      	nop			; (mov r8, r8)
2000179a:	46bd      	mov	sp, r7
2000179c:	b00a      	add	sp, #40	; 0x28
2000179e:	bd80      	pop	{r7, pc}
200017a0:	ffffcfff 			; <UNDEFINED> instruction: 0xffffcfff
200017a4:	ffffe9f3 			; <UNDEFINED> instruction: 0xffffe9f3
200017a8:	fffffcff 			; <UNDEFINED> instruction: 0xfffffcff
200017ac:	40011000 	andmi	r1, r1, r0
200017b0:	40011400 	andmi	r1, r1, r0, lsl #8

200017b4 <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
200017b4:	b580      	push	{r7, lr}
200017b6:	b082      	sub	sp, #8
200017b8:	af00      	add	r7, sp, #0
200017ba:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
200017bc:	687b      	ldr	r3, [r7, #4]
200017be:	2296      	movs	r2, #150	; 0x96
200017c0:	0192      	lsls	r2, r2, #6
200017c2:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
200017c4:	687b      	ldr	r3, [r7, #4]
200017c6:	2200      	movs	r2, #0
200017c8:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
200017ca:	687b      	ldr	r3, [r7, #4]
200017cc:	2200      	movs	r2, #0
200017ce:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
200017d0:	687b      	ldr	r3, [r7, #4]
200017d2:	2200      	movs	r2, #0
200017d4:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
200017d6:	687b      	ldr	r3, [r7, #4]
200017d8:	220c      	movs	r2, #12
200017da:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
200017dc:	687b      	ldr	r3, [r7, #4]
200017de:	2200      	movs	r2, #0
200017e0:	819a      	strh	r2, [r3, #12]
}
200017e2:	46c0      	nop			; (mov r8, r8)
200017e4:	46bd      	mov	sp, r7
200017e6:	b002      	add	sp, #8
200017e8:	bd80      	pop	{r7, pc}

200017ea <USART_ClockInit>:
  *         contains the configuration information for the specified  USART peripheral.
  * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
200017ea:	b580      	push	{r7, lr}
200017ec:	b084      	sub	sp, #16
200017ee:	af00      	add	r7, sp, #0
200017f0:	6078      	str	r0, [r7, #4]
200017f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
200017f4:	2300      	movs	r3, #0
200017f6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
200017f8:	687b      	ldr	r3, [r7, #4]
200017fa:	8a1b      	ldrh	r3, [r3, #16]
200017fc:	b29b      	uxth	r3, r3
200017fe:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
20001800:	68fb      	ldr	r3, [r7, #12]
20001802:	4a0e      	ldr	r2, [pc, #56]	; (2000183c <USART_ClockInit+0x52>)
20001804:	4013      	ands	r3, r2
20001806:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
20001808:	683b      	ldr	r3, [r7, #0]
2000180a:	881a      	ldrh	r2, [r3, #0]
2000180c:	683b      	ldr	r3, [r7, #0]
2000180e:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
20001810:	4313      	orrs	r3, r2
20001812:	b29a      	uxth	r2, r3
20001814:	683b      	ldr	r3, [r7, #0]
20001816:	889b      	ldrh	r3, [r3, #4]
20001818:	4313      	orrs	r3, r2
2000181a:	b29a      	uxth	r2, r3
2000181c:	683b      	ldr	r3, [r7, #0]
2000181e:	88db      	ldrh	r3, [r3, #6]
20001820:	4313      	orrs	r3, r2
20001822:	b29b      	uxth	r3, r3
20001824:	001a      	movs	r2, r3
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
20001826:	68fb      	ldr	r3, [r7, #12]
20001828:	4313      	orrs	r3, r2
2000182a:	60fb      	str	r3, [r7, #12]
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
2000182c:	68fb      	ldr	r3, [r7, #12]
2000182e:	b29a      	uxth	r2, r3
20001830:	687b      	ldr	r3, [r7, #4]
20001832:	821a      	strh	r2, [r3, #16]
}
20001834:	46c0      	nop			; (mov r8, r8)
20001836:	46bd      	mov	sp, r7
20001838:	b004      	add	sp, #16
2000183a:	bd80      	pop	{r7, pc}
2000183c:	fffff0ff 			; <UNDEFINED> instruction: 0xfffff0ff

20001840 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
20001840:	b580      	push	{r7, lr}
20001842:	b082      	sub	sp, #8
20001844:	af00      	add	r7, sp, #0
20001846:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
20001848:	687b      	ldr	r3, [r7, #4]
2000184a:	2200      	movs	r2, #0
2000184c:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
2000184e:	687b      	ldr	r3, [r7, #4]
20001850:	2200      	movs	r2, #0
20001852:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
20001854:	687b      	ldr	r3, [r7, #4]
20001856:	2200      	movs	r2, #0
20001858:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
2000185a:	687b      	ldr	r3, [r7, #4]
2000185c:	2200      	movs	r2, #0
2000185e:	80da      	strh	r2, [r3, #6]
}
20001860:	46c0      	nop			; (mov r8, r8)
20001862:	46bd      	mov	sp, r7
20001864:	b002      	add	sp, #8
20001866:	bd80      	pop	{r7, pc}

20001868 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
20001868:	b580      	push	{r7, lr}
2000186a:	b082      	sub	sp, #8
2000186c:	af00      	add	r7, sp, #0
2000186e:	6078      	str	r0, [r7, #4]
20001870:	000a      	movs	r2, r1
20001872:	1cfb      	adds	r3, r7, #3
20001874:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
20001876:	1cfb      	adds	r3, r7, #3
20001878:	781b      	ldrb	r3, [r3, #0]
2000187a:	2b00      	cmp	r3, #0
2000187c:	d009      	beq.n	20001892 <USART_Cmd+0x2a>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
2000187e:	687b      	ldr	r3, [r7, #4]
20001880:	899b      	ldrh	r3, [r3, #12]
20001882:	b29b      	uxth	r3, r3
20001884:	2280      	movs	r2, #128	; 0x80
20001886:	0192      	lsls	r2, r2, #6
20001888:	4313      	orrs	r3, r2
2000188a:	b29a      	uxth	r2, r3
2000188c:	687b      	ldr	r3, [r7, #4]
2000188e:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
20001890:	e007      	b.n	200018a2 <USART_Cmd+0x3a>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
20001892:	687b      	ldr	r3, [r7, #4]
20001894:	899b      	ldrh	r3, [r3, #12]
20001896:	b29b      	uxth	r3, r3
20001898:	4a04      	ldr	r2, [pc, #16]	; (200018ac <USART_Cmd+0x44>)
2000189a:	4013      	ands	r3, r2
2000189c:	b29a      	uxth	r2, r3
2000189e:	687b      	ldr	r3, [r7, #4]
200018a0:	819a      	strh	r2, [r3, #12]
}
200018a2:	46c0      	nop			; (mov r8, r8)
200018a4:	46bd      	mov	sp, r7
200018a6:	b002      	add	sp, #8
200018a8:	bd80      	pop	{r7, pc}
200018aa:	46c0      	nop			; (mov r8, r8)
200018ac:	ffffdfff 			; <UNDEFINED> instruction: 0xffffdfff

200018b0 <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock. 
  * @note   The function is used for IrDA mode with UART4 and UART5.   
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{ 
200018b0:	b580      	push	{r7, lr}
200018b2:	b082      	sub	sp, #8
200018b4:	af00      	add	r7, sp, #0
200018b6:	6078      	str	r0, [r7, #4]
200018b8:	000a      	movs	r2, r1
200018ba:	1cfb      	adds	r3, r7, #3
200018bc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
200018be:	687b      	ldr	r3, [r7, #4]
200018c0:	8b1b      	ldrh	r3, [r3, #24]
200018c2:	b29b      	uxth	r3, r3
200018c4:	22ff      	movs	r2, #255	; 0xff
200018c6:	4393      	bics	r3, r2
200018c8:	b29a      	uxth	r2, r3
200018ca:	687b      	ldr	r3, [r7, #4]
200018cc:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
200018ce:	687b      	ldr	r3, [r7, #4]
200018d0:	8b1b      	ldrh	r3, [r3, #24]
200018d2:	b29a      	uxth	r2, r3
200018d4:	1cfb      	adds	r3, r7, #3
200018d6:	781b      	ldrb	r3, [r3, #0]
200018d8:	b29b      	uxth	r3, r3
200018da:	4313      	orrs	r3, r2
200018dc:	b29a      	uxth	r2, r3
200018de:	687b      	ldr	r3, [r7, #4]
200018e0:	831a      	strh	r2, [r3, #24]
}
200018e2:	46c0      	nop			; (mov r8, r8)
200018e4:	46bd      	mov	sp, r7
200018e6:	b002      	add	sp, #8
200018e8:	bd80      	pop	{r7, pc}

200018ea <USART_OverSampling8Cmd>:
  * @param  NewState: new state of the USART 8x oversampling mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
200018ea:	b580      	push	{r7, lr}
200018ec:	b082      	sub	sp, #8
200018ee:	af00      	add	r7, sp, #0
200018f0:	6078      	str	r0, [r7, #4]
200018f2:	000a      	movs	r2, r1
200018f4:	1cfb      	adds	r3, r7, #3
200018f6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
200018f8:	1cfb      	adds	r3, r7, #3
200018fa:	781b      	ldrb	r3, [r3, #0]
200018fc:	2b00      	cmp	r3, #0
200018fe:	d008      	beq.n	20001912 <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
20001900:	687b      	ldr	r3, [r7, #4]
20001902:	899b      	ldrh	r3, [r3, #12]
20001904:	b29b      	uxth	r3, r3
20001906:	4a09      	ldr	r2, [pc, #36]	; (2000192c <USART_OverSampling8Cmd+0x42>)
20001908:	4313      	orrs	r3, r2
2000190a:	b29a      	uxth	r2, r3
2000190c:	687b      	ldr	r3, [r7, #4]
2000190e:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
  }
}  
20001910:	e007      	b.n	20001922 <USART_OverSampling8Cmd+0x38>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
20001912:	687b      	ldr	r3, [r7, #4]
20001914:	899b      	ldrh	r3, [r3, #12]
20001916:	b29b      	uxth	r3, r3
20001918:	045b      	lsls	r3, r3, #17
2000191a:	0c5b      	lsrs	r3, r3, #17
2000191c:	b29a      	uxth	r2, r3
2000191e:	687b      	ldr	r3, [r7, #4]
20001920:	819a      	strh	r2, [r3, #12]
}  
20001922:	46c0      	nop			; (mov r8, r8)
20001924:	46bd      	mov	sp, r7
20001926:	b002      	add	sp, #8
20001928:	bd80      	pop	{r7, pc}
2000192a:	46c0      	nop			; (mov r8, r8)
2000192c:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000

20001930 <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
20001930:	b580      	push	{r7, lr}
20001932:	b082      	sub	sp, #8
20001934:	af00      	add	r7, sp, #0
20001936:	6078      	str	r0, [r7, #4]
20001938:	000a      	movs	r2, r1
2000193a:	1cfb      	adds	r3, r7, #3
2000193c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
2000193e:	1cfb      	adds	r3, r7, #3
20001940:	781b      	ldrb	r3, [r3, #0]
20001942:	2b00      	cmp	r3, #0
20001944:	d009      	beq.n	2000195a <USART_OneBitMethodCmd+0x2a>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
20001946:	687b      	ldr	r3, [r7, #4]
20001948:	8a9b      	ldrh	r3, [r3, #20]
2000194a:	b29b      	uxth	r3, r3
2000194c:	2280      	movs	r2, #128	; 0x80
2000194e:	0112      	lsls	r2, r2, #4
20001950:	4313      	orrs	r3, r2
20001952:	b29a      	uxth	r2, r3
20001954:	687b      	ldr	r3, [r7, #4]
20001956:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
  }
}
20001958:	e007      	b.n	2000196a <USART_OneBitMethodCmd+0x3a>
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
2000195a:	687b      	ldr	r3, [r7, #4]
2000195c:	8a9b      	ldrh	r3, [r3, #20]
2000195e:	b29b      	uxth	r3, r3
20001960:	4a04      	ldr	r2, [pc, #16]	; (20001974 <USART_OneBitMethodCmd+0x44>)
20001962:	4013      	ands	r3, r2
20001964:	b29a      	uxth	r2, r3
20001966:	687b      	ldr	r3, [r7, #4]
20001968:	829a      	strh	r2, [r3, #20]
}
2000196a:	46c0      	nop			; (mov r8, r8)
2000196c:	46bd      	mov	sp, r7
2000196e:	b002      	add	sp, #8
20001970:	bd80      	pop	{r7, pc}
20001972:	46c0      	nop			; (mov r8, r8)
20001974:	fffff7ff 			; <UNDEFINED> instruction: 0xfffff7ff

20001978 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
20001978:	b580      	push	{r7, lr}
2000197a:	b082      	sub	sp, #8
2000197c:	af00      	add	r7, sp, #0
2000197e:	6078      	str	r0, [r7, #4]
20001980:	000a      	movs	r2, r1
20001982:	1cbb      	adds	r3, r7, #2
20001984:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
20001986:	1cbb      	adds	r3, r7, #2
20001988:	881b      	ldrh	r3, [r3, #0]
2000198a:	05db      	lsls	r3, r3, #23
2000198c:	0ddb      	lsrs	r3, r3, #23
2000198e:	b29a      	uxth	r2, r3
20001990:	687b      	ldr	r3, [r7, #4]
20001992:	809a      	strh	r2, [r3, #4]
}
20001994:	46c0      	nop			; (mov r8, r8)
20001996:	46bd      	mov	sp, r7
20001998:	b002      	add	sp, #8
2000199a:	bd80      	pop	{r7, pc}

2000199c <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
2000199c:	b580      	push	{r7, lr}
2000199e:	b082      	sub	sp, #8
200019a0:	af00      	add	r7, sp, #0
200019a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
200019a4:	687b      	ldr	r3, [r7, #4]
200019a6:	889b      	ldrh	r3, [r3, #4]
200019a8:	b29b      	uxth	r3, r3
200019aa:	05db      	lsls	r3, r3, #23
200019ac:	0ddb      	lsrs	r3, r3, #23
200019ae:	b29b      	uxth	r3, r3
}
200019b0:	0018      	movs	r0, r3
200019b2:	46bd      	mov	sp, r7
200019b4:	b002      	add	sp, #8
200019b6:	bd80      	pop	{r7, pc}

200019b8 <USART_SetAddress>:
  *         UART peripheral.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
200019b8:	b580      	push	{r7, lr}
200019ba:	b082      	sub	sp, #8
200019bc:	af00      	add	r7, sp, #0
200019be:	6078      	str	r0, [r7, #4]
200019c0:	000a      	movs	r2, r1
200019c2:	1cfb      	adds	r3, r7, #3
200019c4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
200019c6:	687b      	ldr	r3, [r7, #4]
200019c8:	8a1b      	ldrh	r3, [r3, #16]
200019ca:	b29b      	uxth	r3, r3
200019cc:	220f      	movs	r2, #15
200019ce:	4393      	bics	r3, r2
200019d0:	b29a      	uxth	r2, r3
200019d2:	687b      	ldr	r3, [r7, #4]
200019d4:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
200019d6:	687b      	ldr	r3, [r7, #4]
200019d8:	8a1b      	ldrh	r3, [r3, #16]
200019da:	b29a      	uxth	r2, r3
200019dc:	1cfb      	adds	r3, r7, #3
200019de:	781b      	ldrb	r3, [r3, #0]
200019e0:	b29b      	uxth	r3, r3
200019e2:	4313      	orrs	r3, r2
200019e4:	b29a      	uxth	r2, r3
200019e6:	687b      	ldr	r3, [r7, #4]
200019e8:	821a      	strh	r2, [r3, #16]
}
200019ea:	46c0      	nop			; (mov r8, r8)
200019ec:	46bd      	mov	sp, r7
200019ee:	b002      	add	sp, #8
200019f0:	bd80      	pop	{r7, pc}

200019f2 <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
200019f2:	b580      	push	{r7, lr}
200019f4:	b082      	sub	sp, #8
200019f6:	af00      	add	r7, sp, #0
200019f8:	6078      	str	r0, [r7, #4]
200019fa:	000a      	movs	r2, r1
200019fc:	1cfb      	adds	r3, r7, #3
200019fe:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
20001a00:	1cfb      	adds	r3, r7, #3
20001a02:	781b      	ldrb	r3, [r3, #0]
20001a04:	2b00      	cmp	r3, #0
20001a06:	d008      	beq.n	20001a1a <USART_ReceiverWakeUpCmd+0x28>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
20001a08:	687b      	ldr	r3, [r7, #4]
20001a0a:	899b      	ldrh	r3, [r3, #12]
20001a0c:	b29b      	uxth	r3, r3
20001a0e:	2202      	movs	r2, #2
20001a10:	4313      	orrs	r3, r2
20001a12:	b29a      	uxth	r2, r3
20001a14:	687b      	ldr	r3, [r7, #4]
20001a16:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
  }
}
20001a18:	e007      	b.n	20001a2a <USART_ReceiverWakeUpCmd+0x38>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
20001a1a:	687b      	ldr	r3, [r7, #4]
20001a1c:	899b      	ldrh	r3, [r3, #12]
20001a1e:	b29b      	uxth	r3, r3
20001a20:	2202      	movs	r2, #2
20001a22:	4393      	bics	r3, r2
20001a24:	b29a      	uxth	r2, r3
20001a26:	687b      	ldr	r3, [r7, #4]
20001a28:	819a      	strh	r2, [r3, #12]
}
20001a2a:	46c0      	nop			; (mov r8, r8)
20001a2c:	46bd      	mov	sp, r7
20001a2e:	b002      	add	sp, #8
20001a30:	bd80      	pop	{r7, pc}

20001a32 <USART_WakeUpConfig>:
  *            @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *            @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
20001a32:	b580      	push	{r7, lr}
20001a34:	b082      	sub	sp, #8
20001a36:	af00      	add	r7, sp, #0
20001a38:	6078      	str	r0, [r7, #4]
20001a3a:	000a      	movs	r2, r1
20001a3c:	1cbb      	adds	r3, r7, #2
20001a3e:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
20001a40:	687b      	ldr	r3, [r7, #4]
20001a42:	899b      	ldrh	r3, [r3, #12]
20001a44:	b29b      	uxth	r3, r3
20001a46:	4a09      	ldr	r2, [pc, #36]	; (20001a6c <USART_WakeUpConfig+0x3a>)
20001a48:	4013      	ands	r3, r2
20001a4a:	b29a      	uxth	r2, r3
20001a4c:	687b      	ldr	r3, [r7, #4]
20001a4e:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
20001a50:	687b      	ldr	r3, [r7, #4]
20001a52:	899b      	ldrh	r3, [r3, #12]
20001a54:	b29a      	uxth	r2, r3
20001a56:	1cbb      	adds	r3, r7, #2
20001a58:	881b      	ldrh	r3, [r3, #0]
20001a5a:	4313      	orrs	r3, r2
20001a5c:	b29a      	uxth	r2, r3
20001a5e:	687b      	ldr	r3, [r7, #4]
20001a60:	819a      	strh	r2, [r3, #12]
}
20001a62:	46c0      	nop			; (mov r8, r8)
20001a64:	46bd      	mov	sp, r7
20001a66:	b002      	add	sp, #8
20001a68:	bd80      	pop	{r7, pc}
20001a6a:	46c0      	nop			; (mov r8, r8)
20001a6c:	fffff7ff 			; <UNDEFINED> instruction: 0xfffff7ff

20001a70 <USART_LINBreakDetectLengthConfig>:
  *            @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *            @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
20001a70:	b580      	push	{r7, lr}
20001a72:	b082      	sub	sp, #8
20001a74:	af00      	add	r7, sp, #0
20001a76:	6078      	str	r0, [r7, #4]
20001a78:	000a      	movs	r2, r1
20001a7a:	1cbb      	adds	r3, r7, #2
20001a7c:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
20001a7e:	687b      	ldr	r3, [r7, #4]
20001a80:	8a1b      	ldrh	r3, [r3, #16]
20001a82:	b29b      	uxth	r3, r3
20001a84:	2220      	movs	r2, #32
20001a86:	4393      	bics	r3, r2
20001a88:	b29a      	uxth	r2, r3
20001a8a:	687b      	ldr	r3, [r7, #4]
20001a8c:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
20001a8e:	687b      	ldr	r3, [r7, #4]
20001a90:	8a1b      	ldrh	r3, [r3, #16]
20001a92:	b29a      	uxth	r2, r3
20001a94:	1cbb      	adds	r3, r7, #2
20001a96:	881b      	ldrh	r3, [r3, #0]
20001a98:	4313      	orrs	r3, r2
20001a9a:	b29a      	uxth	r2, r3
20001a9c:	687b      	ldr	r3, [r7, #4]
20001a9e:	821a      	strh	r2, [r3, #16]
}
20001aa0:	46c0      	nop			; (mov r8, r8)
20001aa2:	46bd      	mov	sp, r7
20001aa4:	b002      	add	sp, #8
20001aa6:	bd80      	pop	{r7, pc}

20001aa8 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
20001aa8:	b580      	push	{r7, lr}
20001aaa:	b082      	sub	sp, #8
20001aac:	af00      	add	r7, sp, #0
20001aae:	6078      	str	r0, [r7, #4]
20001ab0:	000a      	movs	r2, r1
20001ab2:	1cfb      	adds	r3, r7, #3
20001ab4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
20001ab6:	1cfb      	adds	r3, r7, #3
20001ab8:	781b      	ldrb	r3, [r3, #0]
20001aba:	2b00      	cmp	r3, #0
20001abc:	d009      	beq.n	20001ad2 <USART_LINCmd+0x2a>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
20001abe:	687b      	ldr	r3, [r7, #4]
20001ac0:	8a1b      	ldrh	r3, [r3, #16]
20001ac2:	b29b      	uxth	r3, r3
20001ac4:	2280      	movs	r2, #128	; 0x80
20001ac6:	01d2      	lsls	r2, r2, #7
20001ac8:	4313      	orrs	r3, r2
20001aca:	b29a      	uxth	r2, r3
20001acc:	687b      	ldr	r3, [r7, #4]
20001ace:	821a      	strh	r2, [r3, #16]
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
  }
}
20001ad0:	e007      	b.n	20001ae2 <USART_LINCmd+0x3a>
    USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
20001ad2:	687b      	ldr	r3, [r7, #4]
20001ad4:	8a1b      	ldrh	r3, [r3, #16]
20001ad6:	b29b      	uxth	r3, r3
20001ad8:	4a04      	ldr	r2, [pc, #16]	; (20001aec <USART_LINCmd+0x44>)
20001ada:	4013      	ands	r3, r2
20001adc:	b29a      	uxth	r2, r3
20001ade:	687b      	ldr	r3, [r7, #4]
20001ae0:	821a      	strh	r2, [r3, #16]
}
20001ae2:	46c0      	nop			; (mov r8, r8)
20001ae4:	46bd      	mov	sp, r7
20001ae6:	b002      	add	sp, #8
20001ae8:	bd80      	pop	{r7, pc}
20001aea:	46c0      	nop			; (mov r8, r8)
20001aec:	ffffbfff 			; <UNDEFINED> instruction: 0xffffbfff

20001af0 <USART_SendBreak>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
20001af0:	b580      	push	{r7, lr}
20001af2:	b082      	sub	sp, #8
20001af4:	af00      	add	r7, sp, #0
20001af6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= USART_CR1_SBK;
20001af8:	687b      	ldr	r3, [r7, #4]
20001afa:	899b      	ldrh	r3, [r3, #12]
20001afc:	b29b      	uxth	r3, r3
20001afe:	2201      	movs	r2, #1
20001b00:	4313      	orrs	r3, r2
20001b02:	b29a      	uxth	r2, r3
20001b04:	687b      	ldr	r3, [r7, #4]
20001b06:	819a      	strh	r2, [r3, #12]
}
20001b08:	46c0      	nop			; (mov r8, r8)
20001b0a:	46bd      	mov	sp, r7
20001b0c:	b002      	add	sp, #8
20001b0e:	bd80      	pop	{r7, pc}

20001b10 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
20001b10:	b580      	push	{r7, lr}
20001b12:	b082      	sub	sp, #8
20001b14:	af00      	add	r7, sp, #0
20001b16:	6078      	str	r0, [r7, #4]
20001b18:	000a      	movs	r2, r1
20001b1a:	1cfb      	adds	r3, r7, #3
20001b1c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
20001b1e:	1cfb      	adds	r3, r7, #3
20001b20:	781b      	ldrb	r3, [r3, #0]
20001b22:	2b00      	cmp	r3, #0
20001b24:	d008      	beq.n	20001b38 <USART_HalfDuplexCmd+0x28>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
20001b26:	687b      	ldr	r3, [r7, #4]
20001b28:	8a9b      	ldrh	r3, [r3, #20]
20001b2a:	b29b      	uxth	r3, r3
20001b2c:	2208      	movs	r2, #8
20001b2e:	4313      	orrs	r3, r2
20001b30:	b29a      	uxth	r2, r3
20001b32:	687b      	ldr	r3, [r7, #4]
20001b34:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
  }
}
20001b36:	e007      	b.n	20001b48 <USART_HalfDuplexCmd+0x38>
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
20001b38:	687b      	ldr	r3, [r7, #4]
20001b3a:	8a9b      	ldrh	r3, [r3, #20]
20001b3c:	b29b      	uxth	r3, r3
20001b3e:	2208      	movs	r2, #8
20001b40:	4393      	bics	r3, r2
20001b42:	b29a      	uxth	r2, r3
20001b44:	687b      	ldr	r3, [r7, #4]
20001b46:	829a      	strh	r2, [r3, #20]
}
20001b48:	46c0      	nop			; (mov r8, r8)
20001b4a:	46bd      	mov	sp, r7
20001b4c:	b002      	add	sp, #8
20001b4e:	bd80      	pop	{r7, pc}

20001b50 <USART_SetGuardTime>:
  *         UART peripheral.
  * @param  USART_GuardTime: specifies the guard time.   
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{    
20001b50:	b580      	push	{r7, lr}
20001b52:	b082      	sub	sp, #8
20001b54:	af00      	add	r7, sp, #0
20001b56:	6078      	str	r0, [r7, #4]
20001b58:	000a      	movs	r2, r1
20001b5a:	1cfb      	adds	r3, r7, #3
20001b5c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
20001b5e:	687b      	ldr	r3, [r7, #4]
20001b60:	8b1b      	ldrh	r3, [r3, #24]
20001b62:	b29b      	uxth	r3, r3
20001b64:	22ff      	movs	r2, #255	; 0xff
20001b66:	4013      	ands	r3, r2
20001b68:	b29a      	uxth	r2, r3
20001b6a:	687b      	ldr	r3, [r7, #4]
20001b6c:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
20001b6e:	687b      	ldr	r3, [r7, #4]
20001b70:	8b1b      	ldrh	r3, [r3, #24]
20001b72:	b29a      	uxth	r2, r3
20001b74:	1cfb      	adds	r3, r7, #3
20001b76:	781b      	ldrb	r3, [r3, #0]
20001b78:	b29b      	uxth	r3, r3
20001b7a:	021b      	lsls	r3, r3, #8
20001b7c:	b29b      	uxth	r3, r3
20001b7e:	4313      	orrs	r3, r2
20001b80:	b29a      	uxth	r2, r3
20001b82:	687b      	ldr	r3, [r7, #4]
20001b84:	831a      	strh	r2, [r3, #24]
}
20001b86:	46c0      	nop			; (mov r8, r8)
20001b88:	46bd      	mov	sp, r7
20001b8a:	b002      	add	sp, #8
20001b8c:	bd80      	pop	{r7, pc}

20001b8e <USART_SmartCardCmd>:
  * @param  NewState: new state of the Smart Card mode.
  *          This parameter can be: ENABLE or DISABLE.      
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
20001b8e:	b580      	push	{r7, lr}
20001b90:	b082      	sub	sp, #8
20001b92:	af00      	add	r7, sp, #0
20001b94:	6078      	str	r0, [r7, #4]
20001b96:	000a      	movs	r2, r1
20001b98:	1cfb      	adds	r3, r7, #3
20001b9a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20001b9c:	1cfb      	adds	r3, r7, #3
20001b9e:	781b      	ldrb	r3, [r3, #0]
20001ba0:	2b00      	cmp	r3, #0
20001ba2:	d008      	beq.n	20001bb6 <USART_SmartCardCmd+0x28>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
20001ba4:	687b      	ldr	r3, [r7, #4]
20001ba6:	8a9b      	ldrh	r3, [r3, #20]
20001ba8:	b29b      	uxth	r3, r3
20001baa:	2220      	movs	r2, #32
20001bac:	4313      	orrs	r3, r2
20001bae:	b29a      	uxth	r2, r3
20001bb0:	687b      	ldr	r3, [r7, #4]
20001bb2:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
  }
}
20001bb4:	e007      	b.n	20001bc6 <USART_SmartCardCmd+0x38>
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
20001bb6:	687b      	ldr	r3, [r7, #4]
20001bb8:	8a9b      	ldrh	r3, [r3, #20]
20001bba:	b29b      	uxth	r3, r3
20001bbc:	2220      	movs	r2, #32
20001bbe:	4393      	bics	r3, r2
20001bc0:	b29a      	uxth	r2, r3
20001bc2:	687b      	ldr	r3, [r7, #4]
20001bc4:	829a      	strh	r2, [r3, #20]
}
20001bc6:	46c0      	nop			; (mov r8, r8)
20001bc8:	46bd      	mov	sp, r7
20001bca:	b002      	add	sp, #8
20001bcc:	bd80      	pop	{r7, pc}

20001bce <USART_SmartCardNACKCmd>:
  * @param  NewState: new state of the NACK transmission.
  *          This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
20001bce:	b580      	push	{r7, lr}
20001bd0:	b082      	sub	sp, #8
20001bd2:	af00      	add	r7, sp, #0
20001bd4:	6078      	str	r0, [r7, #4]
20001bd6:	000a      	movs	r2, r1
20001bd8:	1cfb      	adds	r3, r7, #3
20001bda:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20001bdc:	1cfb      	adds	r3, r7, #3
20001bde:	781b      	ldrb	r3, [r3, #0]
20001be0:	2b00      	cmp	r3, #0
20001be2:	d008      	beq.n	20001bf6 <USART_SmartCardNACKCmd+0x28>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
20001be4:	687b      	ldr	r3, [r7, #4]
20001be6:	8a9b      	ldrh	r3, [r3, #20]
20001be8:	b29b      	uxth	r3, r3
20001bea:	2210      	movs	r2, #16
20001bec:	4313      	orrs	r3, r2
20001bee:	b29a      	uxth	r2, r3
20001bf0:	687b      	ldr	r3, [r7, #4]
20001bf2:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
  }
}
20001bf4:	e007      	b.n	20001c06 <USART_SmartCardNACKCmd+0x38>
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
20001bf6:	687b      	ldr	r3, [r7, #4]
20001bf8:	8a9b      	ldrh	r3, [r3, #20]
20001bfa:	b29b      	uxth	r3, r3
20001bfc:	2210      	movs	r2, #16
20001bfe:	4393      	bics	r3, r2
20001c00:	b29a      	uxth	r2, r3
20001c02:	687b      	ldr	r3, [r7, #4]
20001c04:	829a      	strh	r2, [r3, #20]
}
20001c06:	46c0      	nop			; (mov r8, r8)
20001c08:	46bd      	mov	sp, r7
20001c0a:	b002      	add	sp, #8
20001c0c:	bd80      	pop	{r7, pc}

20001c0e <USART_IrDAConfig>:
  *            @arg USART_IrDAMode_LowPower
  *            @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
20001c0e:	b580      	push	{r7, lr}
20001c10:	b082      	sub	sp, #8
20001c12:	af00      	add	r7, sp, #0
20001c14:	6078      	str	r0, [r7, #4]
20001c16:	000a      	movs	r2, r1
20001c18:	1cbb      	adds	r3, r7, #2
20001c1a:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
20001c1c:	687b      	ldr	r3, [r7, #4]
20001c1e:	8a9b      	ldrh	r3, [r3, #20]
20001c20:	b29b      	uxth	r3, r3
20001c22:	2204      	movs	r2, #4
20001c24:	4393      	bics	r3, r2
20001c26:	b29a      	uxth	r2, r3
20001c28:	687b      	ldr	r3, [r7, #4]
20001c2a:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
20001c2c:	687b      	ldr	r3, [r7, #4]
20001c2e:	8a9b      	ldrh	r3, [r3, #20]
20001c30:	b29a      	uxth	r2, r3
20001c32:	1cbb      	adds	r3, r7, #2
20001c34:	881b      	ldrh	r3, [r3, #0]
20001c36:	4313      	orrs	r3, r2
20001c38:	b29a      	uxth	r2, r3
20001c3a:	687b      	ldr	r3, [r7, #4]
20001c3c:	829a      	strh	r2, [r3, #20]
}
20001c3e:	46c0      	nop			; (mov r8, r8)
20001c40:	46bd      	mov	sp, r7
20001c42:	b002      	add	sp, #8
20001c44:	bd80      	pop	{r7, pc}

20001c46 <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
20001c46:	b580      	push	{r7, lr}
20001c48:	b082      	sub	sp, #8
20001c4a:	af00      	add	r7, sp, #0
20001c4c:	6078      	str	r0, [r7, #4]
20001c4e:	000a      	movs	r2, r1
20001c50:	1cfb      	adds	r3, r7, #3
20001c52:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
20001c54:	1cfb      	adds	r3, r7, #3
20001c56:	781b      	ldrb	r3, [r3, #0]
20001c58:	2b00      	cmp	r3, #0
20001c5a:	d008      	beq.n	20001c6e <USART_IrDACmd+0x28>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
20001c5c:	687b      	ldr	r3, [r7, #4]
20001c5e:	8a9b      	ldrh	r3, [r3, #20]
20001c60:	b29b      	uxth	r3, r3
20001c62:	2202      	movs	r2, #2
20001c64:	4313      	orrs	r3, r2
20001c66:	b29a      	uxth	r2, r3
20001c68:	687b      	ldr	r3, [r7, #4]
20001c6a:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
  }
}
20001c6c:	e007      	b.n	20001c7e <USART_IrDACmd+0x38>
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
20001c6e:	687b      	ldr	r3, [r7, #4]
20001c70:	8a9b      	ldrh	r3, [r3, #20]
20001c72:	b29b      	uxth	r3, r3
20001c74:	2202      	movs	r2, #2
20001c76:	4393      	bics	r3, r2
20001c78:	b29a      	uxth	r2, r3
20001c7a:	687b      	ldr	r3, [r7, #4]
20001c7c:	829a      	strh	r2, [r3, #20]
}
20001c7e:	46c0      	nop			; (mov r8, r8)
20001c80:	46bd      	mov	sp, r7
20001c82:	b002      	add	sp, #8
20001c84:	bd80      	pop	{r7, pc}

20001c86 <USART_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.   
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
20001c86:	b580      	push	{r7, lr}
20001c88:	b082      	sub	sp, #8
20001c8a:	af00      	add	r7, sp, #0
20001c8c:	6078      	str	r0, [r7, #4]
20001c8e:	0008      	movs	r0, r1
20001c90:	0011      	movs	r1, r2
20001c92:	1cbb      	adds	r3, r7, #2
20001c94:	1c02      	adds	r2, r0, #0
20001c96:	801a      	strh	r2, [r3, #0]
20001c98:	1c7b      	adds	r3, r7, #1
20001c9a:	1c0a      	adds	r2, r1, #0
20001c9c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
20001c9e:	1c7b      	adds	r3, r7, #1
20001ca0:	781b      	ldrb	r3, [r3, #0]
20001ca2:	2b00      	cmp	r3, #0
20001ca4:	d009      	beq.n	20001cba <USART_DMACmd+0x34>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
20001ca6:	687b      	ldr	r3, [r7, #4]
20001ca8:	8a9b      	ldrh	r3, [r3, #20]
20001caa:	b29a      	uxth	r2, r3
20001cac:	1cbb      	adds	r3, r7, #2
20001cae:	881b      	ldrh	r3, [r3, #0]
20001cb0:	4313      	orrs	r3, r2
20001cb2:	b29a      	uxth	r2, r3
20001cb4:	687b      	ldr	r3, [r7, #4]
20001cb6:	829a      	strh	r2, [r3, #20]
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
  }
}
20001cb8:	e00a      	b.n	20001cd0 <USART_DMACmd+0x4a>
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
20001cba:	687b      	ldr	r3, [r7, #4]
20001cbc:	8a9b      	ldrh	r3, [r3, #20]
20001cbe:	b29b      	uxth	r3, r3
20001cc0:	1cba      	adds	r2, r7, #2
20001cc2:	8812      	ldrh	r2, [r2, #0]
20001cc4:	43d2      	mvns	r2, r2
20001cc6:	b292      	uxth	r2, r2
20001cc8:	4013      	ands	r3, r2
20001cca:	b29a      	uxth	r2, r3
20001ccc:	687b      	ldr	r3, [r7, #4]
20001cce:	829a      	strh	r2, [r3, #20]
}
20001cd0:	46c0      	nop			; (mov r8, r8)
20001cd2:	46bd      	mov	sp, r7
20001cd4:	b002      	add	sp, #8
20001cd6:	bd80      	pop	{r7, pc}

20001cd8 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
20001cd8:	b580      	push	{r7, lr}
20001cda:	b086      	sub	sp, #24
20001cdc:	af00      	add	r7, sp, #0
20001cde:	6078      	str	r0, [r7, #4]
20001ce0:	0008      	movs	r0, r1
20001ce2:	0011      	movs	r1, r2
20001ce4:	1cbb      	adds	r3, r7, #2
20001ce6:	1c02      	adds	r2, r0, #0
20001ce8:	801a      	strh	r2, [r3, #0]
20001cea:	1c7b      	adds	r3, r7, #1
20001cec:	1c0a      	adds	r2, r1, #0
20001cee:	701a      	strb	r2, [r3, #0]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
20001cf0:	2300      	movs	r3, #0
20001cf2:	613b      	str	r3, [r7, #16]
20001cf4:	2300      	movs	r3, #0
20001cf6:	60fb      	str	r3, [r7, #12]
20001cf8:	2300      	movs	r3, #0
20001cfa:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
20001cfc:	2300      	movs	r3, #0
20001cfe:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
20001d00:	687b      	ldr	r3, [r7, #4]
20001d02:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
20001d04:	1cbb      	adds	r3, r7, #2
20001d06:	881b      	ldrh	r3, [r3, #0]
20001d08:	b2db      	uxtb	r3, r3
20001d0a:	095b      	lsrs	r3, r3, #5
20001d0c:	b2db      	uxtb	r3, r3
20001d0e:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
20001d10:	1cbb      	adds	r3, r7, #2
20001d12:	881b      	ldrh	r3, [r3, #0]
20001d14:	221f      	movs	r2, #31
20001d16:	4013      	ands	r3, r2
20001d18:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
20001d1a:	2201      	movs	r2, #1
20001d1c:	68fb      	ldr	r3, [r7, #12]
20001d1e:	409a      	lsls	r2, r3
20001d20:	0013      	movs	r3, r2
20001d22:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
20001d24:	693b      	ldr	r3, [r7, #16]
20001d26:	2b01      	cmp	r3, #1
20001d28:	d103      	bne.n	20001d32 <USART_ITConfig+0x5a>
  {
    usartxbase += 0x0C;
20001d2a:	697b      	ldr	r3, [r7, #20]
20001d2c:	330c      	adds	r3, #12
20001d2e:	617b      	str	r3, [r7, #20]
20001d30:	e009      	b.n	20001d46 <USART_ITConfig+0x6e>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
20001d32:	693b      	ldr	r3, [r7, #16]
20001d34:	2b02      	cmp	r3, #2
20001d36:	d103      	bne.n	20001d40 <USART_ITConfig+0x68>
  {
    usartxbase += 0x10;
20001d38:	697b      	ldr	r3, [r7, #20]
20001d3a:	3310      	adds	r3, #16
20001d3c:	617b      	str	r3, [r7, #20]
20001d3e:	e002      	b.n	20001d46 <USART_ITConfig+0x6e>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
20001d40:	697b      	ldr	r3, [r7, #20]
20001d42:	3314      	adds	r3, #20
20001d44:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
20001d46:	1c7b      	adds	r3, r7, #1
20001d48:	781b      	ldrb	r3, [r3, #0]
20001d4a:	2b00      	cmp	r3, #0
20001d4c:	d006      	beq.n	20001d5c <USART_ITConfig+0x84>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
20001d4e:	697b      	ldr	r3, [r7, #20]
20001d50:	6819      	ldr	r1, [r3, #0]
20001d52:	697b      	ldr	r3, [r7, #20]
20001d54:	68ba      	ldr	r2, [r7, #8]
20001d56:	430a      	orrs	r2, r1
20001d58:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
20001d5a:	e006      	b.n	20001d6a <USART_ITConfig+0x92>
    *(__IO uint32_t*)usartxbase &= ~itmask;
20001d5c:	697b      	ldr	r3, [r7, #20]
20001d5e:	681a      	ldr	r2, [r3, #0]
20001d60:	68bb      	ldr	r3, [r7, #8]
20001d62:	43d9      	mvns	r1, r3
20001d64:	697b      	ldr	r3, [r7, #20]
20001d66:	400a      	ands	r2, r1
20001d68:	601a      	str	r2, [r3, #0]
}
20001d6a:	46c0      	nop			; (mov r8, r8)
20001d6c:	46bd      	mov	sp, r7
20001d6e:	b006      	add	sp, #24
20001d70:	bd80      	pop	{r7, pc}

20001d72 <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
20001d72:	b580      	push	{r7, lr}
20001d74:	b084      	sub	sp, #16
20001d76:	af00      	add	r7, sp, #0
20001d78:	6078      	str	r0, [r7, #4]
20001d7a:	000a      	movs	r2, r1
20001d7c:	1cbb      	adds	r3, r7, #2
20001d7e:	801a      	strh	r2, [r3, #0]
  FlagStatus bitstatus = RESET;
20001d80:	210f      	movs	r1, #15
20001d82:	187b      	adds	r3, r7, r1
20001d84:	2200      	movs	r2, #0
20001d86:	701a      	strb	r2, [r3, #0]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
20001d88:	687b      	ldr	r3, [r7, #4]
20001d8a:	881b      	ldrh	r3, [r3, #0]
20001d8c:	b29b      	uxth	r3, r3
20001d8e:	1cba      	adds	r2, r7, #2
20001d90:	8812      	ldrh	r2, [r2, #0]
20001d92:	4013      	ands	r3, r2
20001d94:	b29b      	uxth	r3, r3
20001d96:	2b00      	cmp	r3, #0
20001d98:	d003      	beq.n	20001da2 <USART_GetFlagStatus+0x30>
  {
    bitstatus = SET;
20001d9a:	187b      	adds	r3, r7, r1
20001d9c:	2201      	movs	r2, #1
20001d9e:	701a      	strb	r2, [r3, #0]
20001da0:	e003      	b.n	20001daa <USART_GetFlagStatus+0x38>
  }
  else
  {
    bitstatus = RESET;
20001da2:	230f      	movs	r3, #15
20001da4:	18fb      	adds	r3, r7, r3
20001da6:	2200      	movs	r2, #0
20001da8:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
20001daa:	230f      	movs	r3, #15
20001dac:	18fb      	adds	r3, r7, r3
20001dae:	781b      	ldrb	r3, [r3, #0]
}
20001db0:	0018      	movs	r0, r3
20001db2:	46bd      	mov	sp, r7
20001db4:	b004      	add	sp, #16
20001db6:	bd80      	pop	{r7, pc}

20001db8 <USART_ClearFlag>:
  *          (USART_SendData()).
  *   
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
20001db8:	b580      	push	{r7, lr}
20001dba:	b082      	sub	sp, #8
20001dbc:	af00      	add	r7, sp, #0
20001dbe:	6078      	str	r0, [r7, #4]
20001dc0:	000a      	movs	r2, r1
20001dc2:	1cbb      	adds	r3, r7, #2
20001dc4:	801a      	strh	r2, [r3, #0]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
20001dc6:	1cbb      	adds	r3, r7, #2
20001dc8:	881b      	ldrh	r3, [r3, #0]
20001dca:	43db      	mvns	r3, r3
20001dcc:	b29a      	uxth	r2, r3
20001dce:	687b      	ldr	r3, [r7, #4]
20001dd0:	801a      	strh	r2, [r3, #0]
}
20001dd2:	46c0      	nop			; (mov r8, r8)
20001dd4:	46bd      	mov	sp, r7
20001dd6:	b002      	add	sp, #8
20001dd8:	bd80      	pop	{r7, pc}

20001dda <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
20001dda:	b580      	push	{r7, lr}
20001ddc:	b086      	sub	sp, #24
20001dde:	af00      	add	r7, sp, #0
20001de0:	6078      	str	r0, [r7, #4]
20001de2:	000a      	movs	r2, r1
20001de4:	1cbb      	adds	r3, r7, #2
20001de6:	801a      	strh	r2, [r3, #0]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
20001de8:	2300      	movs	r3, #0
20001dea:	60fb      	str	r3, [r7, #12]
20001dec:	2300      	movs	r3, #0
20001dee:	617b      	str	r3, [r7, #20]
20001df0:	2300      	movs	r3, #0
20001df2:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
20001df4:	2313      	movs	r3, #19
20001df6:	18fb      	adds	r3, r7, r3
20001df8:	2200      	movs	r2, #0
20001dfa:	701a      	strb	r2, [r3, #0]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
20001dfc:	1cbb      	adds	r3, r7, #2
20001dfe:	881b      	ldrh	r3, [r3, #0]
20001e00:	b2db      	uxtb	r3, r3
20001e02:	095b      	lsrs	r3, r3, #5
20001e04:	b2db      	uxtb	r3, r3
20001e06:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
20001e08:	1cbb      	adds	r3, r7, #2
20001e0a:	881b      	ldrh	r3, [r3, #0]
20001e0c:	221f      	movs	r2, #31
20001e0e:	4013      	ands	r3, r2
20001e10:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
20001e12:	2201      	movs	r2, #1
20001e14:	697b      	ldr	r3, [r7, #20]
20001e16:	409a      	lsls	r2, r3
20001e18:	0013      	movs	r3, r2
20001e1a:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
20001e1c:	68bb      	ldr	r3, [r7, #8]
20001e1e:	2b01      	cmp	r3, #1
20001e20:	d107      	bne.n	20001e32 <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR1;
20001e22:	687b      	ldr	r3, [r7, #4]
20001e24:	899b      	ldrh	r3, [r3, #12]
20001e26:	b29b      	uxth	r3, r3
20001e28:	001a      	movs	r2, r3
20001e2a:	697b      	ldr	r3, [r7, #20]
20001e2c:	4013      	ands	r3, r2
20001e2e:	617b      	str	r3, [r7, #20]
20001e30:	e011      	b.n	20001e56 <USART_GetITStatus+0x7c>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
20001e32:	68bb      	ldr	r3, [r7, #8]
20001e34:	2b02      	cmp	r3, #2
20001e36:	d107      	bne.n	20001e48 <USART_GetITStatus+0x6e>
  {
    itmask &= USARTx->CR2;
20001e38:	687b      	ldr	r3, [r7, #4]
20001e3a:	8a1b      	ldrh	r3, [r3, #16]
20001e3c:	b29b      	uxth	r3, r3
20001e3e:	001a      	movs	r2, r3
20001e40:	697b      	ldr	r3, [r7, #20]
20001e42:	4013      	ands	r3, r2
20001e44:	617b      	str	r3, [r7, #20]
20001e46:	e006      	b.n	20001e56 <USART_GetITStatus+0x7c>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
20001e48:	687b      	ldr	r3, [r7, #4]
20001e4a:	8a9b      	ldrh	r3, [r3, #20]
20001e4c:	b29b      	uxth	r3, r3
20001e4e:	001a      	movs	r2, r3
20001e50:	697b      	ldr	r3, [r7, #20]
20001e52:	4013      	ands	r3, r2
20001e54:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
20001e56:	1cbb      	adds	r3, r7, #2
20001e58:	881b      	ldrh	r3, [r3, #0]
20001e5a:	0a1b      	lsrs	r3, r3, #8
20001e5c:	b29b      	uxth	r3, r3
20001e5e:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
20001e60:	2201      	movs	r2, #1
20001e62:	68fb      	ldr	r3, [r7, #12]
20001e64:	409a      	lsls	r2, r3
20001e66:	0013      	movs	r3, r2
20001e68:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
20001e6a:	687b      	ldr	r3, [r7, #4]
20001e6c:	881b      	ldrh	r3, [r3, #0]
20001e6e:	b29b      	uxth	r3, r3
20001e70:	001a      	movs	r2, r3
20001e72:	68fb      	ldr	r3, [r7, #12]
20001e74:	4013      	ands	r3, r2
20001e76:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
20001e78:	697b      	ldr	r3, [r7, #20]
20001e7a:	2b00      	cmp	r3, #0
20001e7c:	d007      	beq.n	20001e8e <USART_GetITStatus+0xb4>
20001e7e:	68fb      	ldr	r3, [r7, #12]
20001e80:	2b00      	cmp	r3, #0
20001e82:	d004      	beq.n	20001e8e <USART_GetITStatus+0xb4>
  {
    bitstatus = SET;
20001e84:	2313      	movs	r3, #19
20001e86:	18fb      	adds	r3, r7, r3
20001e88:	2201      	movs	r2, #1
20001e8a:	701a      	strb	r2, [r3, #0]
20001e8c:	e003      	b.n	20001e96 <USART_GetITStatus+0xbc>
  }
  else
  {
    bitstatus = RESET;
20001e8e:	2313      	movs	r3, #19
20001e90:	18fb      	adds	r3, r7, r3
20001e92:	2200      	movs	r2, #0
20001e94:	701a      	strb	r2, [r3, #0]
  }
  
  return bitstatus;  
20001e96:	2313      	movs	r3, #19
20001e98:	18fb      	adds	r3, r7, r3
20001e9a:	781b      	ldrb	r3, [r3, #0]
}
20001e9c:	0018      	movs	r0, r3
20001e9e:	46bd      	mov	sp, r7
20001ea0:	b006      	add	sp, #24
20001ea2:	bd80      	pop	{r7, pc}

20001ea4 <USART_ClearITPendingBit>:
  *          (USART_SendData()).
  *  
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
20001ea4:	b580      	push	{r7, lr}
20001ea6:	b084      	sub	sp, #16
20001ea8:	af00      	add	r7, sp, #0
20001eaa:	6078      	str	r0, [r7, #4]
20001eac:	000a      	movs	r2, r1
20001eae:	1cbb      	adds	r3, r7, #2
20001eb0:	801a      	strh	r2, [r3, #0]
  uint16_t bitpos = 0x00, itmask = 0x00;
20001eb2:	210e      	movs	r1, #14
20001eb4:	187b      	adds	r3, r7, r1
20001eb6:	2200      	movs	r2, #0
20001eb8:	801a      	strh	r2, [r3, #0]
20001eba:	200c      	movs	r0, #12
20001ebc:	183b      	adds	r3, r7, r0
20001ebe:	2200      	movs	r2, #0
20001ec0:	801a      	strh	r2, [r3, #0]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
20001ec2:	187b      	adds	r3, r7, r1
20001ec4:	1cba      	adds	r2, r7, #2
20001ec6:	8812      	ldrh	r2, [r2, #0]
20001ec8:	0a12      	lsrs	r2, r2, #8
20001eca:	801a      	strh	r2, [r3, #0]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
20001ecc:	187b      	adds	r3, r7, r1
20001ece:	881b      	ldrh	r3, [r3, #0]
20001ed0:	2201      	movs	r2, #1
20001ed2:	409a      	lsls	r2, r3
20001ed4:	183b      	adds	r3, r7, r0
20001ed6:	801a      	strh	r2, [r3, #0]
  USARTx->SR = (uint16_t)~itmask;
20001ed8:	183b      	adds	r3, r7, r0
20001eda:	881b      	ldrh	r3, [r3, #0]
20001edc:	43db      	mvns	r3, r3
20001ede:	b29a      	uxth	r2, r3
20001ee0:	687b      	ldr	r3, [r7, #4]
20001ee2:	801a      	strh	r2, [r3, #0]
}
20001ee4:	46c0      	nop			; (mov r8, r8)
20001ee6:	46bd      	mov	sp, r7
20001ee8:	b004      	add	sp, #16
20001eea:	bd80      	pop	{r7, pc}

20001eec <__udivsi3>:
20001eec:	2200      	movs	r2, #0
20001eee:	0843      	lsrs	r3, r0, #1
20001ef0:	428b      	cmp	r3, r1
20001ef2:	d374      	bcc.n	20001fde <__udivsi3+0xf2>
20001ef4:	0903      	lsrs	r3, r0, #4
20001ef6:	428b      	cmp	r3, r1
20001ef8:	d35f      	bcc.n	20001fba <__udivsi3+0xce>
20001efa:	0a03      	lsrs	r3, r0, #8
20001efc:	428b      	cmp	r3, r1
20001efe:	d344      	bcc.n	20001f8a <__udivsi3+0x9e>
20001f00:	0b03      	lsrs	r3, r0, #12
20001f02:	428b      	cmp	r3, r1
20001f04:	d328      	bcc.n	20001f58 <__udivsi3+0x6c>
20001f06:	0c03      	lsrs	r3, r0, #16
20001f08:	428b      	cmp	r3, r1
20001f0a:	d30d      	bcc.n	20001f28 <__udivsi3+0x3c>
20001f0c:	22ff      	movs	r2, #255	; 0xff
20001f0e:	0209      	lsls	r1, r1, #8
20001f10:	ba12      	rev	r2, r2
20001f12:	0c03      	lsrs	r3, r0, #16
20001f14:	428b      	cmp	r3, r1
20001f16:	d302      	bcc.n	20001f1e <__udivsi3+0x32>
20001f18:	1212      	asrs	r2, r2, #8
20001f1a:	0209      	lsls	r1, r1, #8
20001f1c:	d065      	beq.n	20001fea <__udivsi3+0xfe>
20001f1e:	0b03      	lsrs	r3, r0, #12
20001f20:	428b      	cmp	r3, r1
20001f22:	d319      	bcc.n	20001f58 <__udivsi3+0x6c>
20001f24:	e000      	b.n	20001f28 <__udivsi3+0x3c>
20001f26:	0a09      	lsrs	r1, r1, #8
20001f28:	0bc3      	lsrs	r3, r0, #15
20001f2a:	428b      	cmp	r3, r1
20001f2c:	d301      	bcc.n	20001f32 <__udivsi3+0x46>
20001f2e:	03cb      	lsls	r3, r1, #15
20001f30:	1ac0      	subs	r0, r0, r3
20001f32:	4152      	adcs	r2, r2
20001f34:	0b83      	lsrs	r3, r0, #14
20001f36:	428b      	cmp	r3, r1
20001f38:	d301      	bcc.n	20001f3e <__udivsi3+0x52>
20001f3a:	038b      	lsls	r3, r1, #14
20001f3c:	1ac0      	subs	r0, r0, r3
20001f3e:	4152      	adcs	r2, r2
20001f40:	0b43      	lsrs	r3, r0, #13
20001f42:	428b      	cmp	r3, r1
20001f44:	d301      	bcc.n	20001f4a <__udivsi3+0x5e>
20001f46:	034b      	lsls	r3, r1, #13
20001f48:	1ac0      	subs	r0, r0, r3
20001f4a:	4152      	adcs	r2, r2
20001f4c:	0b03      	lsrs	r3, r0, #12
20001f4e:	428b      	cmp	r3, r1
20001f50:	d301      	bcc.n	20001f56 <__udivsi3+0x6a>
20001f52:	030b      	lsls	r3, r1, #12
20001f54:	1ac0      	subs	r0, r0, r3
20001f56:	4152      	adcs	r2, r2
20001f58:	0ac3      	lsrs	r3, r0, #11
20001f5a:	428b      	cmp	r3, r1
20001f5c:	d301      	bcc.n	20001f62 <__udivsi3+0x76>
20001f5e:	02cb      	lsls	r3, r1, #11
20001f60:	1ac0      	subs	r0, r0, r3
20001f62:	4152      	adcs	r2, r2
20001f64:	0a83      	lsrs	r3, r0, #10
20001f66:	428b      	cmp	r3, r1
20001f68:	d301      	bcc.n	20001f6e <__udivsi3+0x82>
20001f6a:	028b      	lsls	r3, r1, #10
20001f6c:	1ac0      	subs	r0, r0, r3
20001f6e:	4152      	adcs	r2, r2
20001f70:	0a43      	lsrs	r3, r0, #9
20001f72:	428b      	cmp	r3, r1
20001f74:	d301      	bcc.n	20001f7a <__udivsi3+0x8e>
20001f76:	024b      	lsls	r3, r1, #9
20001f78:	1ac0      	subs	r0, r0, r3
20001f7a:	4152      	adcs	r2, r2
20001f7c:	0a03      	lsrs	r3, r0, #8
20001f7e:	428b      	cmp	r3, r1
20001f80:	d301      	bcc.n	20001f86 <__udivsi3+0x9a>
20001f82:	020b      	lsls	r3, r1, #8
20001f84:	1ac0      	subs	r0, r0, r3
20001f86:	4152      	adcs	r2, r2
20001f88:	d2cd      	bcs.n	20001f26 <__udivsi3+0x3a>
20001f8a:	09c3      	lsrs	r3, r0, #7
20001f8c:	428b      	cmp	r3, r1
20001f8e:	d301      	bcc.n	20001f94 <__udivsi3+0xa8>
20001f90:	01cb      	lsls	r3, r1, #7
20001f92:	1ac0      	subs	r0, r0, r3
20001f94:	4152      	adcs	r2, r2
20001f96:	0983      	lsrs	r3, r0, #6
20001f98:	428b      	cmp	r3, r1
20001f9a:	d301      	bcc.n	20001fa0 <__udivsi3+0xb4>
20001f9c:	018b      	lsls	r3, r1, #6
20001f9e:	1ac0      	subs	r0, r0, r3
20001fa0:	4152      	adcs	r2, r2
20001fa2:	0943      	lsrs	r3, r0, #5
20001fa4:	428b      	cmp	r3, r1
20001fa6:	d301      	bcc.n	20001fac <__udivsi3+0xc0>
20001fa8:	014b      	lsls	r3, r1, #5
20001faa:	1ac0      	subs	r0, r0, r3
20001fac:	4152      	adcs	r2, r2
20001fae:	0903      	lsrs	r3, r0, #4
20001fb0:	428b      	cmp	r3, r1
20001fb2:	d301      	bcc.n	20001fb8 <__udivsi3+0xcc>
20001fb4:	010b      	lsls	r3, r1, #4
20001fb6:	1ac0      	subs	r0, r0, r3
20001fb8:	4152      	adcs	r2, r2
20001fba:	08c3      	lsrs	r3, r0, #3
20001fbc:	428b      	cmp	r3, r1
20001fbe:	d301      	bcc.n	20001fc4 <__udivsi3+0xd8>
20001fc0:	00cb      	lsls	r3, r1, #3
20001fc2:	1ac0      	subs	r0, r0, r3
20001fc4:	4152      	adcs	r2, r2
20001fc6:	0883      	lsrs	r3, r0, #2
20001fc8:	428b      	cmp	r3, r1
20001fca:	d301      	bcc.n	20001fd0 <__udivsi3+0xe4>
20001fcc:	008b      	lsls	r3, r1, #2
20001fce:	1ac0      	subs	r0, r0, r3
20001fd0:	4152      	adcs	r2, r2
20001fd2:	0843      	lsrs	r3, r0, #1
20001fd4:	428b      	cmp	r3, r1
20001fd6:	d301      	bcc.n	20001fdc <__udivsi3+0xf0>
20001fd8:	004b      	lsls	r3, r1, #1
20001fda:	1ac0      	subs	r0, r0, r3
20001fdc:	4152      	adcs	r2, r2
20001fde:	1a41      	subs	r1, r0, r1
20001fe0:	d200      	bcs.n	20001fe4 <__udivsi3+0xf8>
20001fe2:	4601      	mov	r1, r0
20001fe4:	4152      	adcs	r2, r2
20001fe6:	4610      	mov	r0, r2
20001fe8:	4770      	bx	lr
20001fea:	e7ff      	b.n	20001fec <__udivsi3+0x100>
20001fec:	b501      	push	{r0, lr}
20001fee:	2000      	movs	r0, #0
20001ff0:	f000 f806 	bl	20002000 <__aeabi_idiv0>
20001ff4:	bd02      	pop	{r1, pc}
20001ff6:	46c0      	nop			; (mov r8, r8)

20001ff8 <__aeabi_uidivmod>:
20001ff8:	2900      	cmp	r1, #0
20001ffa:	d0f7      	beq.n	20001fec <__udivsi3+0x100>
20001ffc:	e776      	b.n	20001eec <__udivsi3>
20001ffe:	4770      	bx	lr

20002000 <__aeabi_idiv0>:
20002000:	4770      	bx	lr
20002002:	46c0      	nop			; (mov r8, r8)

20002004 <memcpy>:
20002004:	2300      	movs	r3, #0
20002006:	b510      	push	{r4, lr}
20002008:	429a      	cmp	r2, r3
2000200a:	d100      	bne.n	2000200e <memcpy+0xa>
2000200c:	bd10      	pop	{r4, pc}
2000200e:	5ccc      	ldrb	r4, [r1, r3]
20002010:	54c4      	strb	r4, [r0, r3]
20002012:	3301      	adds	r3, #1
20002014:	e7f8      	b.n	20002008 <memcpy+0x4>
	...

20002018 <APBAHBPrescTable>:
20002018:	00000000 	andeq	r0, r0, r0
2000201c:	04030201 	streq	r0, [r3], #-513	; 0xfffffdff
20002020:	04030201 	streq	r0, [r3], #-513	; 0xfffffdff
20002024:	09080706 	stmdbeq	r8, {r1, r2, r8, r9, sl}
20002028:	00000031 	andeq	r0, r0, r1, lsr r0
2000202c:	00000032 	andeq	r0, r0, r2, lsr r0
20002030:	00000033 	andeq	r0, r0, r3, lsr r0
20002034:	00417830 	subeq	r7, r1, r0, lsr r8
20002038:	00000034 	andeq	r0, r0, r4, lsr r0
2000203c:	00000035 	andeq	r0, r0, r5, lsr r0
20002040:	00000036 	andeq	r0, r0, r6, lsr r0
20002044:	00427830 	subeq	r7, r2, r0, lsr r8
20002048:	00000037 	andeq	r0, r0, r7, lsr r0
2000204c:	00000038 	andeq	r0, r0, r8, lsr r0
20002050:	00000039 	andeq	r0, r0, r9, lsr r0
20002054:	00437830 	subeq	r7, r3, r0, lsr r8
20002058:	00457830 	subeq	r7, r5, r0, lsr r8
2000205c:	00000030 	andeq	r0, r0, r0, lsr r0
20002060:	00467830 	subeq	r7, r6, r0, lsr r8
20002064:	00447830 	subeq	r7, r4, r0, lsr r8
20002068:	200000f2 	strdcs	r0, [r0], -r2
2000206c:	200000c2 	andcs	r0, r0, r2, asr #1
20002070:	200000ce 	andcs	r0, r0, lr, asr #1
20002074:	200000da 	ldrdcs	r0, [r0], -sl
20002078:	200000e6 	andcs	r0, r0, r6, ror #1
2000207c:	20002028 	andcs	r2, r0, r8, lsr #32
20002080:	2000202c 	andcs	r2, r0, ip, lsr #32
20002084:	20002030 	andcs	r2, r0, r0, lsr r0
20002088:	20002034 	andcs	r2, r0, r4, lsr r0
2000208c:	20002038 	andcs	r2, r0, r8, lsr r0
20002090:	2000203c 	andcs	r2, r0, ip, lsr r0
20002094:	20002040 	andcs	r2, r0, r0, asr #32
20002098:	20002044 	andcs	r2, r0, r4, asr #32
2000209c:	20002048 	andcs	r2, r0, r8, asr #32
200020a0:	2000204c 	andcs	r2, r0, ip, asr #32
200020a4:	20002050 	andcs	r2, r0, r0, asr r0
200020a8:	20002054 	andcs	r2, r0, r4, asr r0
200020ac:	20002058 	andcs	r2, r0, r8, asr r0
200020b0:	2000205c 	andcs	r2, r0, ip, asr r0
200020b4:	20002060 	andcs	r2, r0, r0, rrx
200020b8:	20002064 	andcs	r2, r0, r4, rrx
200020bc:	06003f00 	streq	r3, [r0], -r0, lsl #30
200020c0:	4f005b00 	svcmi	0x00005b00
200020c4:	6d006600 	stcvs	6, cr6, [r0, #-0]
200020c8:	07007d00 	streq	r7, [r0, -r0, lsl #26]
200020cc:	6f007f00 	svcvs	0x00007f00
200020d0:	7c007700 	stcvc	7, cr7, [r0], {-0}
200020d4:	5e005800 	cdppl	8, 0, cr5, cr0, cr0, {0}
200020d8:	76008000 	strvc	r8, [r0], -r0

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	0000041d 	andeq	r0, r0, sp, lsl r4
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	00000118 	andeq	r0, r0, r8, lsl r1
      10:	0002410c 	andeq	r4, r2, ip, lsl #2
      14:	0001df00 	andeq	sp, r1, r0, lsl #30
	...
      24:	06010200 	streq	r0, [r1], -r0, lsl #4
      28:	0000010c 	andeq	r0, r0, ip, lsl #2
      2c:	0a080102 	beq	20043c <startup-0x1fdffbc4>
      30:	03000001 	movweq	r0, #1
      34:	0000002c 	andeq	r0, r0, ip, lsr #32
      38:	14050202 	strne	r0, [r5], #-514	; 0xfffffdfe
      3c:	04000000 	streq	r0, [r0], #-0
      40:	0000003c 	andeq	r0, r0, ip, lsr r0
      44:	4b193902 	blmi	64e454 <startup-0x1f9b1bac>
      48:	02000000 	andeq	r0, r0, #0
      4c:	01cc0702 	biceq	r0, ip, r2, lsl #14
      50:	01040000 	mrseq	r0, (UNDEF: 4)
      54:	02000003 	andeq	r0, r0, #3
      58:	005e184d 	subseq	r1, lr, sp, asr #16
      5c:	04020000 	streq	r0, [r2], #-0
      60:	0000b005 	andeq	fp, r0, r5
      64:	00310400 	eorseq	r0, r1, r0, lsl #8
      68:	4f020000 	svcmi	0x00020000
      6c:	00007119 	andeq	r7, r0, r9, lsl r1
      70:	07040200 	streq	r0, [r4, -r0, lsl #4]
      74:	000001a3 	andeq	r0, r0, r3, lsr #3
      78:	ab050802 	blge	142088 <startup-0x1febdf78>
      7c:	02000000 	andeq	r0, r0, #0
      80:	019e0708 	orrseq	r0, lr, r8, lsl #14
      84:	04050000 	streq	r0, [r5], #-0
      88:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
      8c:	07040200 	streq	r0, [r4, -r0, lsl #4]
      90:	000001a8 	andeq	r0, r0, r8, lsr #3
      94:	00003e04 	andeq	r3, r0, r4, lsl #28
      98:	14240300 	strtne	r0, [r4], #-768	; 0xfffffd00
      9c:	0000003f 	andeq	r0, r0, pc, lsr r0
      a0:	00009406 	andeq	r9, r0, r6, lsl #8
      a4:	03030400 	movweq	r0, #13312	; 0x3400
      a8:	2c030000 	stccs	0, cr0, [r3], {-0}
      ac:	00005213 	andeq	r5, r0, r3, lsl r2
      b0:	00a50600 	adceq	r0, r5, r0, lsl #12
      b4:	33040000 	movwcc	r0, #16384	; 0x4000
      b8:	03000000 	movweq	r0, #0
      bc:	00651430 	rsbeq	r1, r5, r0, lsr r4
      c0:	b6060000 	strlt	r0, [r6], -r0
      c4:	07000000 	streq	r0, [r0, -r0]
      c8:	0000034c 	andeq	r0, r0, ip, asr #6
      cc:	1906fa04 	stmdbne	r6, {r2, r9, fp, ip, sp, lr, pc}
      d0:	000000b1 	strheq	r0, [r0], -r1
      d4:	00027b08 	andeq	r7, r2, r8, lsl #22
      d8:	113b0500 	teqne	fp, r0, lsl #10
      dc:	000000b6 	strheq	r0, [r0], -r6
      e0:	2c010709 	stccs	7, cr0, [r1], {9}
      e4:	06000000 	streq	r0, [r0], -r0
      e8:	fc0e035f 	stc2	3, cr0, [lr], {95}	; 0x5f
      ec:	0a000000 	beq	f4 <startup-0x1fffff0c>
      f0:	00000239 	andeq	r0, r0, r9, lsr r2
      f4:	005f0a00 	subseq	r0, pc, r0, lsl #20
      f8:	00010000 	andeq	r0, r1, r0
      fc:	c306280b 	movwgt	r2, #26635	; 0x680b
     100:	01930905 	orrseq	r0, r3, r5, lsl #18
     104:	e00c0000 	and	r0, ip, r0
     108:	06000000 	streq	r0, [r0], -r0
     10c:	c21105c5 	andsgt	r0, r1, #826277888	; 0x31400000
     110:	00000000 	andeq	r0, r0, r0
     114:	00009b0c 	andeq	r9, r0, ip, lsl #22
     118:	05c60600 	strbeq	r0, [r6, #1536]	; 0x600
     11c:	0000c211 	andeq	ip, r0, r1, lsl r2
     120:	ac0c0400 	cfstrsge	mvf0, [ip], {-0}
     124:	06000002 	streq	r0, [r0], -r2
     128:	c21105c7 	andsgt	r0, r1, #834666496	; 0x31c00000
     12c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     130:	0000c70c 	andeq	ip, r0, ip, lsl #14
     134:	05c80600 	strbeq	r0, [r8, #1536]	; 0x600
     138:	0000c211 	andeq	ip, r0, r1, lsl r2
     13c:	490d0c00 	stmdbmi	sp, {sl, fp}
     140:	06005244 	streq	r5, [r0], -r4, asr #4
     144:	c21105c9 	andsgt	r0, r1, #843055104	; 0x32400000
     148:	10000000 	andne	r0, r0, r0
     14c:	52444f0d 	subpl	r4, r4, #13, 30	; 0x34
     150:	05ca0600 	strbeq	r0, [sl, #1536]	; 0x600
     154:	0000c211 	andeq	ip, r0, r1, lsl r2
     158:	e60c1400 	str	r1, [ip], -r0, lsl #8
     15c:	06000000 	streq	r0, [r0], -r0
     160:	a01105cb 	andsge	r0, r1, fp, asr #11
     164:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     168:	0000da0c 	andeq	sp, r0, ip, lsl #20
     16c:	05cc0600 	strbeq	r0, [ip, #1536]	; 0x600
     170:	0000a011 	andeq	sl, r0, r1, lsl r0
     174:	610c1a00 	tstvs	ip, r0, lsl #20
     178:	06000003 	streq	r0, [r0], -r3
     17c:	c21105cd 	andsgt	r0, r1, #859832320	; 0x33400000
     180:	1c000000 	stcne	0, cr0, [r0], {-0}
     184:	5246410d 	subpl	r4, r6, #1073741827	; 0x40000003
     188:	05ce0600 	strbeq	r0, [lr, #1536]	; 0x600
     18c:	0001a311 	andeq	sl, r1, r1, lsl r3
     190:	0e002000 	cdpeq	0, 0, cr2, cr0, cr0, {0}
     194:	000000c2 	andeq	r0, r0, r2, asr #1
     198:	000001a3 	andeq	r0, r0, r3, lsr #3
     19c:	00008d0f 	andeq	r8, r0, pc, lsl #26
     1a0:	06000100 	streq	r0, [r0], -r0, lsl #2
     1a4:	00000193 	muleq	r0, r3, r1
     1a8:	00000010 	andeq	r0, r0, r0, lsl r0
     1ac:	05cf0600 	strbeq	r0, [pc, #1536]	; 7b4 <startup-0x1ffff84c>
     1b0:	0000fc03 	andeq	pc, r0, r3, lsl #24
     1b4:	01071100 	mrseq	r1, (UNDEF: 23)
     1b8:	0000002c 	andeq	r0, r0, ip, lsr #32
     1bc:	dc014207 	sfmle	f4, 4, [r1], {7}
     1c0:	0a000001 	beq	1cc <startup-0x1ffffe34>
     1c4:	000000cd 	andeq	r0, r0, sp, asr #1
     1c8:	00b90a00 	adcseq	r0, r9, r0, lsl #20
     1cc:	0a010000 	beq	401d4 <startup-0x1ffbfe2c>
     1d0:	00000052 	andeq	r0, r0, r2, asr r0
     1d4:	00710a02 	rsbseq	r0, r1, r2, lsl #20
     1d8:	00030000 	andeq	r0, r3, r0
     1dc:	00031c04 	andeq	r1, r3, r4, lsl #24
     1e0:	02470700 	subeq	r0, r7, #0, 14
     1e4:	000001b5 			; <UNDEFINED> instruction: 0x000001b5
     1e8:	2c010711 	stccs	7, cr0, [r1], {17}
     1ec:	07000000 	streq	r0, [r0, -r0]
     1f0:	0203014f 	andeq	r0, r3, #-1073741805	; 0xc0000013
     1f4:	fc0a0000 	stc2	0, cr0, [sl], {-0}
     1f8:	00000000 	andeq	r0, r0, r0
     1fc:	00001e0a 	andeq	r1, r0, sl, lsl #28
     200:	04000100 	streq	r0, [r0], #-256	; 0xffffff00
     204:	00000089 	andeq	r0, r0, r9, lsl #1
     208:	e8025207 	stmda	r2, {r0, r1, r2, r9, ip, lr}
     20c:	11000001 	tstne	r0, r1
     210:	002c0107 	eoreq	r0, ip, r7, lsl #2
     214:	5a070000 	bpl	1c021c <startup-0x1fe3fde4>
     218:	00023601 	andeq	r3, r2, r1, lsl #12
     21c:	028b0a00 	addeq	r0, fp, #0, 20
     220:	0a000000 	beq	228 <startup-0x1ffffdd8>
     224:	0000029a 	muleq	r0, sl, r2
     228:	02200a01 	eoreq	r0, r0, #4096	; 0x1000
     22c:	0a020000 	beq	80234 <startup-0x1ff7fdcc>
     230:	000000ec 	andeq	r0, r0, ip, ror #1
     234:	c6040003 	strgt	r0, [r4], -r3
     238:	07000002 	streq	r0, [r0, -r2]
     23c:	020f025f 	andeq	r0, pc, #-268435451	; 0xf0000005
     240:	07110000 	ldreq	r0, [r1, -r0]
     244:	00002c01 	andeq	r2, r0, r1, lsl #24
     248:	016e0700 	cmneq	lr, r0, lsl #14
     24c:	00000263 	andeq	r0, r0, r3, ror #4
     250:	0002e70a 	andeq	lr, r2, sl, lsl #14
     254:	2d0a0000 	stccs	0, cr0, [sl, #-0]
     258:	01000003 	tsteq	r0, r3
     25c:	0002d80a 	andeq	sp, r2, sl, lsl #16
     260:	04000200 	streq	r0, [r0], #-512	; 0xfffffe00
     264:	0000030b 	andeq	r0, r0, fp, lsl #6
     268:	42027207 	andmi	r7, r2, #1879048192	; 0x70000000
     26c:	12000002 	andne	r0, r0, #2
     270:	09840708 	stmibeq	r4, {r3, r8, r9, sl}
     274:	000002ba 			; <UNDEFINED> instruction: 0x000002ba
     278:	0000a213 	andeq	sl, r0, r3, lsl r2
     27c:	0c860700 	stceq	7, cr0, [r6], {0}
     280:	000000b6 	strheq	r0, [r0], -r6
     284:	03661300 	cmneq	r6, #0, 6
     288:	89070000 	stmdbhi	r7, {}	; <UNPREDICTABLE>
     28c:	0001dc14 	andeq	sp, r1, r4, lsl ip
     290:	66130400 	ldrvs	r0, [r3], -r0, lsl #8
     294:	07000000 	streq	r0, [r0, -r0]
     298:	0236158c 	eorseq	r1, r6, #140, 10	; 0x23000000
     29c:	13050000 	movwne	r0, #20480	; 0x5000
     2a0:	00000047 	andeq	r0, r0, r7, asr #32
     2a4:	03158f07 	tsteq	r5, #7, 30
     2a8:	06000002 	streq	r0, [r0], -r2
     2ac:	00019413 	andeq	r9, r1, r3, lsl r4
     2b0:	14920700 	ldrne	r0, [r2], #1792	; 0x700
     2b4:	00000263 	andeq	r0, r0, r3, ror #4
     2b8:	bb040007 	bllt	1002dc <startup-0x1feffd24>
     2bc:	07000001 	streq	r0, [r0, -r1]
     2c0:	026f0294 	rsbeq	r0, pc, #148, 4	; 0x40000009
     2c4:	2c140000 	ldccs	0, cr0, [r4], {-0}
     2c8:	01000000 	mrseq	r0, (UNDEF: 0)
     2cc:	021c065e 	andseq	r0, ip, #98566144	; 0x5e00000
     2d0:	000e2000 	andeq	r2, lr, r0
     2d4:	9c010000 	stcls	0, cr0, [r1], {-0}
     2d8:	00035915 	andeq	r5, r3, r5, lsl r9
     2dc:	06530100 	ldrbeq	r0, [r3], -r0, lsl #2
     2e0:	200001d8 	ldrdcs	r0, [r0], -r8
     2e4:	00000044 	andeq	r0, r0, r4, asr #32
     2e8:	030b9c01 	movweq	r9, #48129	; 0xbc01
     2ec:	63160000 	tstvs	r6, #0
     2f0:	1c530100 	ldfnee	f0, [r3], {-0}
     2f4:	0000002c 	andeq	r0, r0, ip, lsr #32
     2f8:	174f9102 	strbne	r9, [pc, -r2, lsl #2]
     2fc:	0000000d 	andeq	r0, r0, sp
     300:	0b145501 	bleq	51570c <startup-0x1faea8f4>
     304:	02000003 	andeq	r0, r0, #3
     308:	0e005091 	mcreq	0, 0, r5, cr0, cr1, {4}
     30c:	0000004b 	andeq	r0, r0, fp, asr #32
     310:	0000031b 	andeq	r0, r0, fp, lsl r3
     314:	00008d0f 	andeq	r8, r0, pc, lsl #26
     318:	15000f00 	strne	r0, [r0, #-3840]	; 0xfffff100
     31c:	00000230 	andeq	r0, r0, r0, lsr r2
     320:	68064301 	stmdavs	r6, {r0, r8, r9, lr}
     324:	70200001 	eorvc	r0, r0, r1
     328:	01000000 	mrseq	r0, (UNDEF: 0)
     32c:	0003789c 	muleq	r3, ip, r8
     330:	656b1800 	strbvs	r1, [fp, #-2048]!	; 0xfffff800
     334:	44010079 	strmi	r0, [r1], #-121	; 0xffffff87
     338:	00037817 	andeq	r7, r3, r7, lsl r8
     33c:	b0910300 	addslt	r0, r1, r0, lsl #6
     340:	6f72187f 	svcvs	0x0072187f
     344:	45010077 	strmi	r0, [r1, #-119]	; 0xffffff89
     348:	00008606 	andeq	r8, r0, r6, lsl #12
     34c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     350:	6c6f6318 	stclvs	3, cr6, [pc], #-96	; 2f8 <startup-0x1ffffd08>
     354:	0b450100 	bleq	114075c <startup-0x1eebf8a4>
     358:	00000086 	andeq	r0, r0, r6, lsl #1
     35c:	19709102 	ldmdbne	r0!, {r1, r8, ip, pc}^
     360:	2000019a 	mulcs	r0, sl, r1
     364:	00000020 	andeq	r0, r0, r0, lsr #32
     368:	0001b51a 	andeq	fp, r1, sl, lsl r5
     36c:	044a0100 	strbeq	r0, [sl], #-256	; 0xffffff00
     370:	00000086 	andeq	r0, r0, r6, lsl #1
     374:	0000001b 	andeq	r0, r0, fp, lsl r0
     378:	0003880e 	andeq	r8, r3, lr, lsl #16
     37c:	00038800 	andeq	r8, r3, r0, lsl #16
     380:	008d0f00 	addeq	r0, sp, r0, lsl #30
     384:	000f0000 	andeq	r0, pc, r0
     388:	0033041c 	eorseq	r0, r3, ip, lsl r4
     38c:	b41d0000 	ldrlt	r0, [sp], #-0
     390:	01000002 	tsteq	r0, r2
     394:	00860535 	addeq	r0, r6, r5, lsr r5
     398:	01100000 	tsteq	r0, r0
     39c:	00582000 	subseq	r2, r8, r0
     3a0:	9c010000 	stcls	0, cr0, [r1], {-0}
     3a4:	00020f15 	andeq	r0, r2, r5, lsl pc
     3a8:	062b0100 	strteq	r0, [fp], -r0, lsl #2
     3ac:	200000a8 	andcs	r0, r0, r8, lsr #1
     3b0:	00000068 	andeq	r0, r0, r8, rrx
     3b4:	03ca9c01 	biceq	r9, sl, #256	; 0x100
     3b8:	72160000 	andsvc	r0, r6, #0
     3bc:	0100776f 	tsteq	r0, pc, ror #14
     3c0:	008d242b 	addeq	r2, sp, fp, lsr #8
     3c4:	91020000 	mrsls	r0, (UNDEF: 2)
     3c8:	f8150074 			; <UNDEFINED> instruction: 0xf8150074
     3cc:	01000002 	tsteq	r0, r2
     3d0:	0010060f 	andseq	r0, r0, pc, lsl #12
     3d4:	00982000 	addseq	r2, r8, r0
     3d8:	9c010000 	stcls	0, cr0, [r1], {-0}
     3dc:	0000040e 	andeq	r0, r0, lr, lsl #8
     3e0:	00033a17 	andeq	r3, r3, r7, lsl sl
     3e4:	13110100 	tstne	r1, #0, 2
     3e8:	000002ba 			; <UNDEFINED> instruction: 0x000002ba
     3ec:	17689102 	strbne	r9, [r8, -r2, lsl #2]!
     3f0:	0000007e 	andeq	r0, r0, lr, ror r0
     3f4:	ba131201 	blt	4c4c00 <startup-0x1fb3b400>
     3f8:	02000002 	andeq	r0, r0, #2
     3fc:	59176091 	ldmdbpl	r7, {r0, r4, r7, sp, lr}
     400:	01000003 	tsteq	r0, r3
     404:	02ba1313 	adcseq	r1, sl, #1275068416	; 0x4c000000
     408:	91020000 	mrsls	r0, (UNDEF: 2)
     40c:	441e0058 	ldrmi	r0, [lr], #-88	; 0xffffffa8
     410:	01000003 	tsteq	r0, r3
     414:	00000606 	andeq	r0, r0, r6, lsl #12
     418:	000c2000 	andeq	r2, ip, r0
     41c:	9c010000 	stcls	0, cr0, [r1], {-0}
     420:	00067b00 	andeq	r7, r6, r0, lsl #22
     424:	d7000400 	strle	r0, [r0, -r0, lsl #8]
     428:	04000001 	streq	r0, [r0], #-1
     42c:	00011801 	andeq	r1, r1, r1, lsl #16
     430:	04b50c00 	ldrteq	r0, [r5], #3072	; 0xc00
     434:	01df0000 	bicseq	r0, pc, r0
     438:	022c0000 	eoreq	r0, ip, #0
     43c:	050a2000 	streq	r2, [sl, #-0]
     440:	02ba0000 	adcseq	r0, sl, #0
     444:	01020000 	mrseq	r0, (UNDEF: 2)
     448:	00010c06 	andeq	r0, r1, r6, lsl #24
     44c:	04010300 	streq	r0, [r1], #-768	; 0xfffffd00
     450:	2b020000 	blcs	80458 <startup-0x1ff7fba8>
     454:	00003818 	andeq	r3, r0, r8, lsl r8
     458:	08010200 	stmdaeq	r1, {r9}
     45c:	0000010a 	andeq	r0, r0, sl, lsl #2
     460:	14050202 	strne	r0, [r5], #-514	; 0xfffffdfe
     464:	03000000 	movweq	r0, #0
     468:	0000003c 	andeq	r0, r0, ip, lsr r0
     46c:	52193902 	andspl	r3, r9, #32768	; 0x8000
     470:	02000000 	andeq	r0, r0, #0
     474:	01cc0702 	biceq	r0, ip, r2, lsl #14
     478:	01030000 	mrseq	r0, (UNDEF: 3)
     47c:	02000003 	andeq	r0, r0, #3
     480:	0065184d 	rsbeq	r1, r5, sp, asr #16
     484:	04020000 	streq	r0, [r2], #-0
     488:	0000b005 	andeq	fp, r0, r5
     48c:	00310300 	eorseq	r0, r1, r0, lsl #6
     490:	4f020000 	svcmi	0x00020000
     494:	00007819 	andeq	r7, r0, r9, lsl r8
     498:	07040200 	streq	r0, [r4, -r0, lsl #4]
     49c:	000001a3 	andeq	r0, r0, r3, lsr #3
     4a0:	ab050802 	blge	1424b0 <startup-0x1febdb50>
     4a4:	02000000 	andeq	r0, r0, #0
     4a8:	019e0708 	orrseq	r0, lr, r8, lsl #14
     4ac:	04040000 	streq	r0, [r4], #-0
     4b0:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
     4b4:	07040200 	streq	r0, [r4, -r0, lsl #4]
     4b8:	000001a8 	andeq	r0, r0, r8, lsr #3
     4bc:	00040303 	andeq	r0, r4, r3, lsl #6
     4c0:	13180300 	tstne	r8, #0, 6
     4c4:	0000002c 	andeq	r0, r0, ip, lsr #32
     4c8:	00003e03 	andeq	r3, r0, r3, lsl #28
     4cc:	14240300 	strtne	r0, [r4], #-768	; 0xfffffd00
     4d0:	00000046 	andeq	r0, r0, r6, asr #32
     4d4:	0000a705 	andeq	sl, r0, r5, lsl #14
     4d8:	03030300 	movweq	r0, #13056	; 0x3300
     4dc:	2c030000 	stccs	0, cr0, [r3], {-0}
     4e0:	00005913 	andeq	r5, r0, r3, lsl r9
     4e4:	00b80500 	adcseq	r0, r8, r0, lsl #10
     4e8:	33030000 	movwcc	r0, #12288	; 0x3000
     4ec:	03000000 	movweq	r0, #0
     4f0:	006c1430 	rsbeq	r1, ip, r0, lsr r4
     4f4:	c9050000 	stmdbgt	r5, {}	; <UNPREDICTABLE>
     4f8:	06000000 	streq	r0, [r0], -r0
     4fc:	0000034c 	andeq	r0, r0, ip, asr #6
     500:	1906fa04 	stmdbne	r6, {r2, r9, fp, ip, sp, lr, pc}
     504:	000000c4 	andeq	r0, r0, r4, asr #1
     508:	00027b07 	andeq	r7, r2, r7, lsl #22
     50c:	113b0500 	teqne	fp, r0, lsl #10
     510:	000000c9 	andeq	r0, r0, r9, asr #1
     514:	38010708 	stmdacc	r1, {r3, r8, r9, sl}
     518:	06000000 	streq	r0, [r0], -r0
     51c:	0f0e035f 	svceq	0x000e035f
     520:	09000001 	stmdbeq	r0, {r0}
     524:	00000239 	andeq	r0, r0, r9, lsr r2
     528:	005f0900 	subseq	r0, pc, r0, lsl #18
     52c:	00010000 	andeq	r0, r1, r0
     530:	c306280a 	movwgt	r2, #26634	; 0x680a
     534:	01a60905 			; <UNDEFINED> instruction: 0x01a60905
     538:	e00b0000 	and	r0, fp, r0
     53c:	06000000 	streq	r0, [r0], -r0
     540:	d51105c5 	ldrle	r0, [r1, #-1477]	; 0xfffffa3b
     544:	00000000 	andeq	r0, r0, r0
     548:	00009b0b 	andeq	r9, r0, fp, lsl #22
     54c:	05c60600 	strbeq	r0, [r6, #1536]	; 0x600
     550:	0000d511 	andeq	sp, r0, r1, lsl r5
     554:	ac0b0400 	cfstrsge	mvf0, [fp], {-0}
     558:	06000002 	streq	r0, [r0], -r2
     55c:	d51105c7 	ldrle	r0, [r1, #-1479]	; 0xfffffa39
     560:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     564:	0000c70b 	andeq	ip, r0, fp, lsl #14
     568:	05c80600 	strbeq	r0, [r8, #1536]	; 0x600
     56c:	0000d511 	andeq	sp, r0, r1, lsl r5
     570:	490c0c00 	stmdbmi	ip, {sl, fp}
     574:	06005244 	streq	r5, [r0], -r4, asr #4
     578:	d51105c9 	ldrle	r0, [r1, #-1481]	; 0xfffffa37
     57c:	10000000 	andne	r0, r0, r0
     580:	52444f0c 	subpl	r4, r4, #12, 30	; 0x30
     584:	05ca0600 	strbeq	r0, [sl, #1536]	; 0x600
     588:	0000d511 	andeq	sp, r0, r1, lsl r5
     58c:	e60b1400 	str	r1, [fp], -r0, lsl #8
     590:	06000000 	streq	r0, [r0], -r0
     594:	b31105cb 	tstlt	r1, #851443712	; 0x32c00000
     598:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     59c:	0000da0b 	andeq	sp, r0, fp, lsl #20
     5a0:	05cc0600 	strbeq	r0, [ip, #1536]	; 0x600
     5a4:	0000b311 	andeq	fp, r0, r1, lsl r3
     5a8:	610b1a00 	tstvs	fp, r0, lsl #20
     5ac:	06000003 	streq	r0, [r0], -r3
     5b0:	d51105cd 	ldrle	r0, [r1, #-1485]	; 0xfffffa33
     5b4:	1c000000 	stcne	0, cr0, [r0], {-0}
     5b8:	5246410c 	subpl	r4, r6, #12, 2
     5bc:	05ce0600 	strbeq	r0, [lr, #1536]	; 0x600
     5c0:	0001b611 	andeq	fp, r1, r1, lsl r6
     5c4:	0d002000 	stceq	0, cr2, [r0, #-0]
     5c8:	000000d5 	ldrdeq	r0, [r0], -r5
     5cc:	000001b6 			; <UNDEFINED> instruction: 0x000001b6
     5d0:	0000940e 	andeq	r9, r0, lr, lsl #8
     5d4:	05000100 	streq	r0, [r0, #-256]	; 0xffffff00
     5d8:	000001a6 	andeq	r0, r0, r6, lsr #3
     5dc:	0000000f 	andeq	r0, r0, pc
     5e0:	05cf0600 	strbeq	r0, [pc, #1536]	; be8 <startup-0x1ffff418>
     5e4:	00010f03 	andeq	r0, r1, r3, lsl #30
     5e8:	01071000 	mrseq	r1, (UNDEF: 7)
     5ec:	00000038 	andeq	r0, r0, r8, lsr r0
     5f0:	ef014207 	svc	0x00014207
     5f4:	09000001 	stmdbeq	r0, {r0}
     5f8:	000000cd 	andeq	r0, r0, sp, asr #1
     5fc:	00b90900 	adcseq	r0, r9, r0, lsl #18
     600:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
     604:	00000052 	andeq	r0, r0, r2, asr r0
     608:	00710902 	rsbseq	r0, r1, r2, lsl #18
     60c:	00030000 	andeq	r0, r3, r0
     610:	00031c03 	andeq	r1, r3, r3, lsl #24
     614:	02470700 	subeq	r0, r7, #0, 14
     618:	000001c8 	andeq	r0, r0, r8, asr #3
     61c:	38010710 	stmdacc	r1, {r4, r8, r9, sl}
     620:	07000000 	streq	r0, [r0, -r0]
     624:	0216014f 	andseq	r0, r6, #-1073741805	; 0xc0000013
     628:	fc090000 	stc2	0, cr0, [r9], {-0}
     62c:	00000000 	andeq	r0, r0, r0
     630:	00001e09 	andeq	r1, r0, r9, lsl #28
     634:	03000100 	movweq	r0, #256	; 0x100
     638:	00000089 	andeq	r0, r0, r9, lsl #1
     63c:	fb025207 	blx	94e62 <startup-0x1ff6b19e>
     640:	10000001 	andne	r0, r0, r1
     644:	00380107 	eorseq	r0, r8, r7, lsl #2
     648:	5a070000 	bpl	1c0650 <startup-0x1fe3f9b0>
     64c:	00024901 	andeq	r4, r2, r1, lsl #18
     650:	028b0900 	addeq	r0, fp, #0, 18
     654:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     658:	0000029a 	muleq	r0, sl, r2
     65c:	02200901 	eoreq	r0, r0, #16384	; 0x4000
     660:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
     664:	000000ec 	andeq	r0, r0, ip, ror #1
     668:	c6030003 	strgt	r0, [r3], -r3
     66c:	07000002 	streq	r0, [r0, -r2]
     670:	0222025f 	eoreq	r0, r2, #-268435451	; 0xf0000005
     674:	07100000 	ldreq	r0, [r0, -r0]
     678:	00003801 	andeq	r3, r0, r1, lsl #16
     67c:	016e0700 	cmneq	lr, r0, lsl #14
     680:	00000276 	andeq	r0, r0, r6, ror r2
     684:	0002e709 	andeq	lr, r2, r9, lsl #14
     688:	2d090000 	stccs	0, cr0, [r9, #-0]
     68c:	01000003 	tsteq	r0, r3
     690:	0002d809 	andeq	sp, r2, r9, lsl #16
     694:	03000200 	movweq	r0, #512	; 0x200
     698:	0000030b 	andeq	r0, r0, fp, lsl #6
     69c:	55027207 	strpl	r7, [r2, #-519]	; 0xfffffdf9
     6a0:	10000002 	andne	r0, r0, r2
     6a4:	00380107 	eorseq	r0, r8, r7, lsl #2
     6a8:	7a070000 	bvc	1c06b0 <startup-0x1fe3f950>
     6ac:	00029d01 	andeq	r9, r2, r1, lsl #26
     6b0:	03b70900 			; <UNDEFINED> instruction: 0x03b70900
     6b4:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     6b8:	00000377 	andeq	r0, r0, r7, ror r3
     6bc:	78030001 	stmdavc	r3, {r0}
     6c0:	07000004 	streq	r0, [r0, -r4]
     6c4:	0282027d 	addeq	r0, r2, #-805306361	; 0xd0000007
     6c8:	08110000 	ldmdaeq	r1, {}	; <UNPREDICTABLE>
     6cc:	f4098407 	vst3.8	{d8-d10}, [r9], r7
     6d0:	12000002 	andne	r0, r0, #2
     6d4:	000000a2 	andeq	r0, r0, r2, lsr #1
     6d8:	c90c8607 	stmdbgt	ip, {r0, r1, r2, r9, sl, pc}
     6dc:	00000000 	andeq	r0, r0, r0
     6e0:	00036612 	andeq	r6, r3, r2, lsl r6
     6e4:	14890700 	strne	r0, [r9], #1792	; 0x700
     6e8:	000001ef 	andeq	r0, r0, pc, ror #3
     6ec:	00661204 	rsbeq	r1, r6, r4, lsl #4
     6f0:	8c070000 	stchi	0, cr0, [r7], {-0}
     6f4:	00024915 	andeq	r4, r2, r5, lsl r9
     6f8:	47120500 	ldrmi	r0, [r2, -r0, lsl #10]
     6fc:	07000000 	streq	r0, [r0, -r0]
     700:	0216158f 	andseq	r1, r6, #599785472	; 0x23c00000
     704:	12060000 	andne	r0, r6, #0
     708:	00000194 	muleq	r0, r4, r1
     70c:	76149207 	ldrvc	r9, [r4], -r7, lsl #4
     710:	07000002 	streq	r0, [r0, -r2]
     714:	01bb0300 			; <UNDEFINED> instruction: 0x01bb0300
     718:	94070000 	strls	r0, [r7], #-0
     71c:	0002a902 	andeq	sl, r2, r2, lsl #18
     720:	05121300 	ldreq	r1, [r2, #-768]	; 0xfffffd00
     724:	43010000 	movwmi	r0, #4096	; 0x1000
     728:	06920602 	ldreq	r0, [r2], r2, lsl #12
     72c:	00a42000 	adceq	r2, r4, r0
     730:	9c010000 	stcls	0, cr0, [r1], {-0}
     734:	00000368 	andeq	r0, r0, r8, ror #6
     738:	00049814 	andeq	r9, r4, r4, lsl r8
     73c:	02430100 	subeq	r0, r3, #0, 2
     740:	00036825 	andeq	r6, r3, r5, lsr #16
     744:	6c910200 	lfmvs	f0, 4, [r1], {0}
     748:	00044314 	andeq	r4, r4, r4, lsl r3
     74c:	02430100 	subeq	r0, r3, #0, 2
     750:	0000a735 	andeq	sl, r0, r5, lsr r7
     754:	6a910200 	bvs	fe440f5c <APBAHBPrescTable+0xde43ef44>
     758:	00039314 	andeq	r9, r3, r4, lsl r3
     75c:	02430100 	subeq	r0, r3, #0, 2
     760:	00009b4d 	andeq	r9, r0, sp, asr #22
     764:	69910200 	ldmibvs	r1, {r9}
     768:	00039b15 	andeq	r9, r3, r5, lsl fp
     76c:	02450100 	subeq	r0, r5, #0, 2
     770:	0000c90c 	andeq	ip, r0, ip, lsl #18
     774:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     778:	0004ae15 	andeq	sl, r4, r5, lsl lr
     77c:	02460100 	subeq	r0, r6, #0, 2
     780:	0000c90c 	andeq	ip, r0, ip, lsl #18
     784:	70910200 	addsvc	r0, r1, r0, lsl #4
     788:	bb041600 	bllt	105f90 <startup-0x1fefa070>
     78c:	13000001 	movwne	r0, #1
     790:	0000049e 	muleq	r0, lr, r4
     794:	0601f001 	streq	pc, [r1], -r1
     798:	2000066e 	andcs	r0, r0, lr, ror #12
     79c:	00000024 	andeq	r0, r0, r4, lsr #32
     7a0:	03a69c01 			; <UNDEFINED> instruction: 0x03a69c01
     7a4:	98140000 	ldmdals	r4, {}	; <UNPREDICTABLE>
     7a8:	01000004 	tsteq	r0, r4
     7ac:	682401f0 	stmdavs	r4!, {r4, r5, r6, r7, r8}
     7b0:	02000003 	andeq	r0, r0, #3
     7b4:	a2147491 	andsge	r7, r4, #-1862270976	; 0x91000000
     7b8:	01000000 	mrseq	r0, (UNDEF: 0)
     7bc:	a73401f0 			; <UNDEFINED> instruction: 0xa73401f0
     7c0:	02000000 	andeq	r0, r0, #0
     7c4:	13007291 	movwne	r7, #657	; 0x291
     7c8:	0000048d 	andeq	r0, r0, sp, lsl #9
     7cc:	0601e001 	streq	lr, [r1], -r1
     7d0:	20000650 	andcs	r0, r0, r0, asr r6
     7d4:	0000001e 	andeq	r0, r0, lr, lsl r0
     7d8:	03de9c01 	bicseq	r9, lr, #256	; 0x100
     7dc:	98140000 	ldmdals	r4, {}	; <UNPREDICTABLE>
     7e0:	01000004 	tsteq	r0, r4
     7e4:	681f01e0 	ldmdavs	pc, {r5, r6, r7, r8}	; <UNPREDICTABLE>
     7e8:	02000003 	andeq	r0, r0, #3
     7ec:	3b147491 	blcc	51da38 <startup-0x1fae25c8>
     7f0:	01000004 	tsteq	r0, r4
     7f4:	a72f01e0 	strge	r0, [pc, -r0, ror #3]!
     7f8:	02000000 	andeq	r0, r0, #0
     7fc:	13007291 	movwne	r7, #657	; 0x291
     800:	000003c1 	andeq	r0, r0, r1, asr #7
     804:	0601c701 	streq	ip, [r1], -r1, lsl #14
     808:	20000616 	andcs	r0, r0, r6, lsl r6
     80c:	0000003a 	andeq	r0, r0, sl, lsr r0
     810:	04269c01 	strteq	r9, [r6], #-3073	; 0xfffff3ff
     814:	98140000 	ldmdals	r4, {}	; <UNPREDICTABLE>
     818:	01000004 	tsteq	r0, r4
     81c:	682201c7 	stmdavs	r2!, {r0, r1, r2, r6, r7, r8}
     820:	02000003 	andeq	r0, r0, #3
     824:	a2147491 	andsge	r7, r4, #-1862270976	; 0x91000000
     828:	01000000 	mrseq	r0, (UNDEF: 0)
     82c:	a73201c7 	ldrge	r0, [r2, -r7, asr #3]!
     830:	02000000 	andeq	r0, r0, #0
     834:	b0147291 	mulslt	r4, r1, r2
     838:	01000003 	tsteq	r0, r3
     83c:	9d4601c7 	stflse	f0, [r6, #-796]	; 0xfffffce4
     840:	02000002 	andeq	r0, r0, #2
     844:	13007191 	movwne	r7, #401	; 0x191
     848:	000003e6 	andeq	r0, r0, r6, ror #7
     84c:	0601b101 	streq	fp, [r1], -r1, lsl #2
     850:	200005f8 	strdcs	r0, [r0], -r8
     854:	0000001e 	andeq	r0, r0, lr, lsl r0
     858:	045e9c01 	ldrbeq	r9, [lr], #-3073	; 0xfffff3ff
     85c:	98140000 	ldmdals	r4, {}	; <UNPREDICTABLE>
     860:	01000004 	tsteq	r0, r4
     864:	682301b1 	stmdavs	r3!, {r0, r4, r5, r7, r8}
     868:	02000003 	andeq	r0, r0, #3
     86c:	a2147491 	andsge	r7, r4, #-1862270976	; 0x91000000
     870:	01000000 	mrseq	r0, (UNDEF: 0)
     874:	a73301b1 			; <UNDEFINED> instruction: 0xa73301b1
     878:	02000000 	andeq	r0, r0, #0
     87c:	13007291 	movwne	r7, #657	; 0x291
     880:	000003cf 	andeq	r0, r0, pc, asr #7
     884:	06019c01 	streq	r9, [r1], -r1, lsl #24
     888:	200005da 	ldrdcs	r0, [r0], -sl
     88c:	0000001e 	andeq	r0, r0, lr, lsl r0
     890:	04969c01 	ldreq	r9, [r6], #3073	; 0xc01
     894:	98140000 	ldmdals	r4, {}	; <UNPREDICTABLE>
     898:	01000004 	tsteq	r0, r4
     89c:	6821019c 	stmdavs	r1!, {r2, r3, r4, r7, r8}
     8a0:	02000003 	andeq	r0, r0, #3
     8a4:	a2147491 	andsge	r7, r4, #-1862270976	; 0x91000000
     8a8:	01000000 	mrseq	r0, (UNDEF: 0)
     8ac:	a731019c 			; <UNDEFINED> instruction: 0xa731019c
     8b0:	02000000 	andeq	r0, r0, #0
     8b4:	17007291 			; <UNDEFINED> instruction: 0x17007291
     8b8:	0000037f 	andeq	r0, r0, pc, ror r3
     8bc:	0a018801 	beq	628c8 <startup-0x1ff9d738>
     8c0:	000000a7 	andeq	r0, r0, r7, lsr #1
     8c4:	200005c4 	andcs	r0, r0, r4, asr #11
     8c8:	00000016 	andeq	r0, r0, r6, lsl r0
     8cc:	04c29c01 	strbeq	r9, [r2], #3073	; 0xc01
     8d0:	98140000 	ldmdals	r4, {}	; <UNPREDICTABLE>
     8d4:	01000004 	tsteq	r0, r4
     8d8:	682c0188 	stmdavs	ip!, {r3, r7, r8}
     8dc:	02000003 	andeq	r0, r0, #3
     8e0:	17007491 			; <UNDEFINED> instruction: 0x17007491
     8e4:	00000523 	andeq	r0, r0, r3, lsr #10
     8e8:	09016e01 	stmdbeq	r1, {r0, r9, sl, fp, sp, lr}
     8ec:	0000009b 	muleq	r0, fp, r0
     8f0:	20000584 	andcs	r0, r0, r4, lsl #11
     8f4:	00000040 	andeq	r0, r0, r0, asr #32
     8f8:	050e9c01 	streq	r9, [lr, #-3073]	; 0xfffff3ff
     8fc:	98140000 	ldmdals	r4, {}	; <UNPREDICTABLE>
     900:	01000004 	tsteq	r0, r4
     904:	682e016e 	stmdavs	lr!, {r1, r2, r3, r5, r6, r8}
     908:	02000003 	andeq	r0, r0, #3
     90c:	a2146c91 	andsge	r6, r4, #37120	; 0x9100
     910:	01000000 	mrseq	r0, (UNDEF: 0)
     914:	a73e016e 	ldrge	r0, [lr, -lr, ror #2]!
     918:	02000000 	andeq	r0, r0, #0
     91c:	21156a91 			; <UNDEFINED> instruction: 0x21156a91
     920:	01000004 	tsteq	r0, r4
     924:	9b0b0170 	blls	2c0eec <startup-0x1fd3f114>
     928:	02000000 	andeq	r0, r0, #0
     92c:	17007791 			; <UNDEFINED> instruction: 0x17007791
     930:	00000452 	andeq	r0, r0, r2, asr r4
     934:	0a015d01 	beq	57d40 <startup-0x1ffa82c0>
     938:	000000a7 	andeq	r0, r0, r7, lsr #1
     93c:	2000056e 	andcs	r0, r0, lr, ror #10
     940:	00000016 	andeq	r0, r0, r6, lsl r0
     944:	053a9c01 	ldreq	r9, [sl, #-3073]!	; 0xfffff3ff
     948:	98140000 	ldmdals	r4, {}	; <UNPREDICTABLE>
     94c:	01000004 	tsteq	r0, r4
     950:	682b015d 	stmdavs	fp!, {r0, r2, r3, r4, r6, r8}
     954:	02000003 	andeq	r0, r0, #3
     958:	17007491 			; <UNDEFINED> instruction: 0x17007491
     95c:	0000040b 	andeq	r0, r0, fp, lsl #8
     960:	09014301 	stmdbeq	r1, {r0, r8, r9, lr}
     964:	0000009b 	muleq	r0, fp, r0
     968:	2000052e 	andcs	r0, r0, lr, lsr #10
     96c:	00000040 	andeq	r0, r0, r0, asr #32
     970:	05869c01 	streq	r9, [r6, #3073]	; 0xc01
     974:	98140000 	ldmdals	r4, {}	; <UNPREDICTABLE>
     978:	01000004 	tsteq	r0, r4
     97c:	682d0143 	stmdavs	sp!, {r0, r1, r6, r8}
     980:	02000003 	andeq	r0, r0, #3
     984:	a2146c91 	andsge	r6, r4, #37120	; 0x9100
     988:	01000000 	mrseq	r0, (UNDEF: 0)
     98c:	a73d0143 	ldrge	r0, [sp, -r3, asr #2]!
     990:	02000000 	andeq	r0, r0, #0
     994:	21156a91 			; <UNDEFINED> instruction: 0x21156a91
     998:	01000004 	tsteq	r0, r4
     99c:	9b0b0145 	blls	2c0eb8 <startup-0x1fd3f148>
     9a0:	02000000 	andeq	r0, r0, #0
     9a4:	13007791 	movwne	r7, #1937	; 0x791
     9a8:	00000465 	andeq	r0, r0, r5, ror #8
     9ac:	06011501 	streq	r1, [r1], -r1, lsl #10
     9b0:	200004e8 	andcs	r0, r0, r8, ror #9
     9b4:	00000046 	andeq	r0, r0, r6, asr #32
     9b8:	05ce9c01 	strbeq	r9, [lr, #3073]	; 0xc01
     9bc:	98140000 	ldmdals	r4, {}	; <UNPREDICTABLE>
     9c0:	01000004 	tsteq	r0, r4
     9c4:	68270115 	stmdavs	r7!, {r0, r2, r4, r8}
     9c8:	02000003 	andeq	r0, r0, #3
     9cc:	a2146c91 	andsge	r6, r4, #37120	; 0x9100
     9d0:	01000000 	mrseq	r0, (UNDEF: 0)
     9d4:	a7370115 			; <UNDEFINED> instruction: 0xa7370115
     9d8:	02000000 	andeq	r0, r0, #0
     9dc:	74186a91 	ldrvc	r6, [r8], #-2705	; 0xfffff56f
     9e0:	0100706d 	tsteq	r0, sp, rrx
     9e4:	d5110117 	ldrle	r0, [r1, #-279]	; 0xfffffee9
     9e8:	02000000 	andeq	r0, r0, #0
     9ec:	19007491 	stmdbne	r0, {r0, r4, r7, sl, ip, sp, lr}
     9f0:	000003a0 	andeq	r0, r0, r0, lsr #7
     9f4:	b606fe01 	strlt	pc, [r6], -r1, lsl #28
     9f8:	32200004 	eorcc	r0, r0, #4
     9fc:	01000000 	mrseq	r0, (UNDEF: 0)
     a00:	0005f49c 	muleq	r5, ip, r4
     a04:	042b1a00 	strteq	r1, [fp], #-2560	; 0xfffff600
     a08:	fe010000 	cdp2	0, 0, cr0, cr1, cr0, {0}
     a0c:	0005f428 	andeq	pc, r5, r8, lsr #8
     a10:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     a14:	f4041600 	vst1.8	{d1-d3}, [r4], r0
     a18:	19000002 	stmdbne	r0, {r1}
     a1c:	000003dc 	ldrdeq	r0, [r0], -ip
     a20:	9c06ca01 			; <UNDEFINED> instruction: 0x9c06ca01
     a24:	1a200003 	bne	800a38 <startup-0x1f7ff5c8>
     a28:	01000001 	tsteq	r0, r1
     a2c:	00065c9c 	muleq	r6, ip, ip
     a30:	04981a00 	ldreq	r1, [r8], #2560	; 0xa00
     a34:	ca010000 	bgt	40a3c <startup-0x1ffbf5c4>
     a38:	0003681e 	andeq	r6, r3, lr, lsl r8
     a3c:	64910200 	ldrvs	r0, [r1], #512	; 0x200
     a40:	00042b1a 	andeq	r2, r4, sl, lsl fp
     a44:	37ca0100 	strbcc	r0, [sl, r0, lsl #2]
     a48:	000005f4 	strdeq	r0, [r0], -r4
     a4c:	1b609102 	blne	1824e5c <startup-0x1e7db1a4>
     a50:	00000370 	andeq	r0, r0, r0, ror r3
     a54:	c90ccc01 	stmdbgt	ip, {r0, sl, fp, lr, pc}
     a58:	02000000 	andeq	r0, r0, #0
     a5c:	701c7491 	mulsvc	ip, r1, r4
     a60:	0100736f 	tsteq	r0, pc, ror #6
     a64:	00c91bcc 	sbceq	r1, r9, ip, asr #23
     a68:	91020000 	mrsls	r0, (UNDEF: 2)
     a6c:	04821b70 	streq	r1, [r2], #2928	; 0xb70
     a70:	cc010000 	stcgt	0, cr0, [r1], {-0}
     a74:	0000c928 	andeq	ip, r0, r8, lsr #18
     a78:	6c910200 	lfmvs	f0, 4, [r1], {0}
     a7c:	03f51d00 	mvnseq	r1, #0, 26
     a80:	7f010000 	svcvc	0x00010000
     a84:	00022c06 	andeq	r2, r2, r6, lsl #24
     a88:	00017020 	andeq	r7, r1, r0, lsr #32
     a8c:	1a9c0100 	bne	fe700e94 <APBAHBPrescTable+0xde6fee7c>
     a90:	00000498 	muleq	r0, r8, r4
     a94:	68207f01 	stmdavs	r0!, {r0, r8, r9, sl, fp, ip, sp, lr}
     a98:	02000003 	andeq	r0, r0, #3
     a9c:	00007491 	muleq	r0, r1, r4
     aa0:	00000f34 	andeq	r0, r0, r4, lsr pc
     aa4:	03bd0004 			; <UNDEFINED> instruction: 0x03bd0004
     aa8:	01040000 	mrseq	r0, (UNDEF: 4)
     aac:	00000118 	andeq	r0, r0, r8, lsl r1
     ab0:	0009730c 	andeq	r7, r9, ip, lsl #6
     ab4:	0001df00 	andeq	sp, r1, r0, lsl #30
     ab8:	00073800 	andeq	r3, r7, r0, lsl #16
     abc:	000cfc20 	andeq	pc, ip, r0, lsr #24
     ac0:	0006f800 	andeq	pc, r6, r0, lsl #16
     ac4:	06010200 	streq	r0, [r1], -r0, lsl #4
     ac8:	0000010c 	andeq	r0, r0, ip, lsl #2
     acc:	00040103 	andeq	r0, r4, r3, lsl #2
     ad0:	182b0200 	stmdane	fp!, {r9}
     ad4:	00000038 	andeq	r0, r0, r8, lsr r0
     ad8:	0a080102 	beq	200ee8 <startup-0x1fdff118>
     adc:	02000001 	andeq	r0, r0, #1
     ae0:	00140502 	andseq	r0, r4, r2, lsl #10
     ae4:	3c030000 	stccc	0, cr0, [r3], {-0}
     ae8:	02000000 	andeq	r0, r0, #0
     aec:	00521939 	subseq	r1, r2, r9, lsr r9
     af0:	02020000 	andeq	r0, r2, #0
     af4:	0001cc07 	andeq	ip, r1, r7, lsl #24
     af8:	03010300 	movweq	r0, #4864	; 0x1300
     afc:	4d020000 	stcmi	0, cr0, [r2, #-0]
     b00:	00006518 	andeq	r6, r0, r8, lsl r5
     b04:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
     b08:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
     b0c:	00003103 	andeq	r3, r0, r3, lsl #2
     b10:	194f0200 	stmdbne	pc, {r9}^	; <UNPREDICTABLE>
     b14:	00000078 	andeq	r0, r0, r8, ror r0
     b18:	a3070402 	movwge	r0, #29698	; 0x7402
     b1c:	02000001 	andeq	r0, r0, #1
     b20:	00ab0508 	adceq	r0, fp, r8, lsl #10
     b24:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
     b28:	00019e07 	andeq	r9, r1, r7, lsl #28
     b2c:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
     b30:	00746e69 	rsbseq	r6, r4, r9, ror #28
     b34:	a8070402 	stmdage	r7, {r1, sl}
     b38:	03000001 	movweq	r0, #1
     b3c:	00000403 	andeq	r0, r0, r3, lsl #8
     b40:	2c131803 	ldccs	8, cr1, [r3], {3}
     b44:	05000000 	streq	r0, [r0, #-0]
     b48:	0000009b 	muleq	r0, fp, r0
     b4c:	0000a706 	andeq	sl, r0, r6, lsl #14
     b50:	003e0300 	eorseq	r0, lr, r0, lsl #6
     b54:	24030000 	strcs	r0, [r3], #-0
     b58:	00004614 	andeq	r4, r0, r4, lsl r6
     b5c:	03030300 	movweq	r0, #13056	; 0x3300
     b60:	2c030000 	stccs	0, cr0, [r3], {-0}
     b64:	00005913 	andeq	r5, r0, r3, lsl r9
     b68:	00bd0500 	adcseq	r0, sp, r0, lsl #10
     b6c:	33030000 	movwcc	r0, #12288	; 0x3000
     b70:	03000000 	movweq	r0, #0
     b74:	006c1430 	rsbeq	r1, ip, r0, lsr r4
     b78:	ce050000 	cdpgt	0, 0, cr0, cr5, cr0, {0}
     b7c:	07000000 	streq	r0, [r0, -r0]
     b80:	000000ce 	andeq	r0, r0, lr, asr #1
     b84:	000000ef 	andeq	r0, r0, pc, ror #1
     b88:	00009408 	andeq	r9, r0, r8, lsl #8
     b8c:	09000100 	stmdbeq	r0, {r8}
     b90:	0000034c 	andeq	r0, r0, ip, asr #6
     b94:	1906fa04 	stmdbne	r6, {r2, r9, fp, ip, sp, lr, pc}
     b98:	000000c9 	andeq	r0, r0, r9, asr #1
     b9c:	00027b0a 	andeq	r7, r2, sl, lsl #22
     ba0:	113b0500 	teqne	fp, r0, lsl #10
     ba4:	000000ce 	andeq	r0, r0, lr, asr #1
     ba8:	3801070b 	stmdacc	r1, {r0, r1, r3, r8, r9, sl}
     bac:	06000000 	streq	r0, [r0], -r0
     bb0:	240e035d 	strcs	r0, [lr], #-861	; 0xfffffca3
     bb4:	0c000001 	stceq	0, cr0, [r0], {1}
     bb8:	000003bb 			; <UNDEFINED> instruction: 0x000003bb
     bbc:	45530d00 	ldrbmi	r0, [r3, #-3328]	; 0xfffff300
     bc0:	00010054 	andeq	r0, r1, r4, asr r0
     bc4:	000a6a0e 	andeq	r6, sl, lr, lsl #20
     bc8:	035d0600 	cmpeq	sp, #0, 12
     bcc:	00010828 	andeq	r0, r1, r8, lsr #16
     bd0:	0bfc0e00 	bleq	fff043d8 <APBAHBPrescTable+0xdff023c0>
     bd4:	5d060000 	stcpl	0, cr0, [r6, #-0]
     bd8:	01083403 	tsteq	r8, r3, lsl #8
     bdc:	070b0000 	streq	r0, [fp, -r0]
     be0:	00003801 	andeq	r3, r0, r1, lsl #16
     be4:	035f0600 	cmpeq	pc, #0, 12
     be8:	00015a0e 	andeq	r5, r1, lr, lsl #20
     bec:	02390c00 	eorseq	r0, r9, #0, 24
     bf0:	0c000000 	stceq	0, cr0, [r0], {-0}
     bf4:	0000005f 	andeq	r0, r0, pc, asr r0
     bf8:	630e0001 	movwvs	r0, #57345	; 0xe001
     bfc:	06000009 	streq	r0, [r0], -r9
     c00:	3e2f035f 	mcrcc	3, 1, r0, cr15, cr15, {2}
     c04:	0b000001 	bleq	c10 <startup-0x1ffff3f0>
     c08:	00380107 	eorseq	r0, r8, r7, lsl #2
     c0c:	62060000 	andvs	r0, r6, #0
     c10:	01830e03 	orreq	r0, r3, r3, lsl #28
     c14:	fe0c0000 	cdp2	0, 0, cr0, cr12, cr0, {0}
     c18:	00000008 	andeq	r0, r0, r8
     c1c:	000cdb0c 	andeq	sp, ip, ip, lsl #22
     c20:	0e000100 	adfeqs	f0, f0, f0
     c24:	00000767 	andeq	r0, r0, r7, ror #14
     c28:	2c036206 	sfmcs	f6, 4, [r3], {6}
     c2c:	00000167 	andeq	r0, r0, r7, ror #2
     c30:	6406980f 	strvs	r9, [r6], #-2063	; 0xfffff7f1
     c34:	03760906 	cmneq	r6, #98304	; 0x18000
     c38:	43100000 	tstmi	r0, #0
     c3c:	66060052 			; <UNDEFINED> instruction: 0x66060052
     c40:	00da1106 	sbcseq	r1, sl, r6, lsl #2
     c44:	11000000 	mrsne	r0, (UNDEF: 0)
     c48:	0000074c 	andeq	r0, r0, ip, asr #14
     c4c:	11066706 	tstne	r6, r6, lsl #14
     c50:	000000da 	ldrdeq	r0, [r0], -sl
     c54:	0a181104 	beq	60506c <startup-0x1f9faf94>
     c58:	68060000 	stmdavs	r6, {}	; <UNPREDICTABLE>
     c5c:	00da1106 	sbcseq	r1, sl, r6, lsl #2
     c60:	10080000 	andne	r0, r8, r0
     c64:	00524943 	subseq	r4, r2, r3, asr #18
     c68:	11066906 	tstne	r6, r6, lsl #18
     c6c:	000000da 	ldrdeq	r0, [r0], -sl
     c70:	066e110c 	strbteq	r1, [lr], -ip, lsl #2
     c74:	6a060000 	bvs	180c7c <startup-0x1fe7f384>
     c78:	00da1106 	sbcseq	r1, sl, r6, lsl #2
     c7c:	11100000 	tstne	r0, r0
     c80:	00000bd9 	ldrdeq	r0, [r0], -r9
     c84:	11066b06 	tstne	r6, r6, lsl #22
     c88:	000000da 	ldrdeq	r0, [r0], -sl
     c8c:	0af01114 	beq	ffc050e4 <APBAHBPrescTable+0xdfc030cc>
     c90:	6c060000 	stcvs	0, cr0, [r6], {-0}
     c94:	00da1106 	sbcseq	r1, sl, r6, lsl #2
     c98:	11180000 	tstne	r8, r0
     c9c:	00000a1d 	andeq	r0, r0, sp, lsl sl
     ca0:	11066d06 	tstne	r6, r6, lsl #26
     ca4:	000000ce 	andeq	r0, r0, lr, asr #1
     ca8:	0c95111c 	ldfeqs	f1, [r5], {28}
     cac:	6e060000 	cdpvs	0, 0, cr0, cr6, cr0, {0}
     cb0:	00da1106 	sbcseq	r1, sl, r6, lsl #2
     cb4:	11200000 			; <UNDEFINED> instruction: 0x11200000
     cb8:	000006ae 	andeq	r0, r0, lr, lsr #13
     cbc:	11066f06 	tstne	r6, r6, lsl #30
     cc0:	000000da 	ldrdeq	r0, [r0], -sl
     cc4:	0a271124 	beq	9c515c <startup-0x1f63aea4>
     cc8:	70060000 	andvc	r0, r6, r0
     ccc:	00df1106 	sbcseq	r1, pc, r6, lsl #2
     cd0:	11280000 			; <UNDEFINED> instruction: 0x11280000
     cd4:	00000d03 	andeq	r0, r0, r3, lsl #26
     cd8:	11067106 	tstne	r6, r6, lsl #2
     cdc:	000000da 	ldrdeq	r0, [r0], -sl
     ce0:	0c0d1130 	stfeqs	f1, [sp], {48}	; 0x30
     ce4:	72060000 	andvc	r0, r6, #0
     ce8:	00da1106 	sbcseq	r1, sl, r6, lsl #2
     cec:	11340000 	teqne	r4, r0
     cf0:	0000093f 	andeq	r0, r0, pc, lsr r9
     cf4:	11067306 	tstne	r6, r6, lsl #6
     cf8:	000000da 	ldrdeq	r0, [r0], -sl
     cfc:	0a311138 	beq	c451e4 <startup-0x1f3bae1c>
     d00:	74060000 	strvc	r0, [r6], #-0
     d04:	00ce1106 	sbceq	r1, lr, r6, lsl #2
     d08:	113c0000 	teqne	ip, r0
     d0c:	00000c05 	andeq	r0, r0, r5, lsl #24
     d10:	11067506 	tstne	r6, r6, lsl #10
     d14:	000000da 	ldrdeq	r0, [r0], -sl
     d18:	0ae81140 	beq	ffa05220 <APBAHBPrescTable+0xdfa03208>
     d1c:	76060000 	strvc	r0, [r6], -r0
     d20:	00da1106 	sbcseq	r1, sl, r6, lsl #2
     d24:	11440000 	mrsne	r0, (UNDEF: 68)
     d28:	00000a3b 	andeq	r0, r0, fp, lsr sl
     d2c:	11067706 	tstne	r6, r6, lsl #14
     d30:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     d34:	06261148 	strteq	r1, [r6], -r8, asr #2
     d38:	78060000 	stmdavc	r6, {}	; <UNPREDICTABLE>
     d3c:	00da1106 	sbcseq	r1, sl, r6, lsl #2
     d40:	11500000 	cmpne	r0, r0
     d44:	00000959 	andeq	r0, r0, r9, asr r9
     d48:	11067906 	tstne	r6, r6, lsl #18
     d4c:	000000da 	ldrdeq	r0, [r0], -sl
     d50:	0c8b1154 	stfeqs	f1, [fp], {84}	; 0x54
     d54:	7a060000 	bvc	180d5c <startup-0x1fe7f2a4>
     d58:	00da1106 	sbcseq	r1, sl, r6, lsl #2
     d5c:	11580000 	cmpne	r8, r0
     d60:	00000a45 	andeq	r0, r0, r5, asr #20
     d64:	11067b06 	tstne	r6, r6, lsl #22
     d68:	000000ce 	andeq	r0, r0, lr, asr #1
     d6c:	054b115c 	strbeq	r1, [fp, #-348]	; 0xfffffea4
     d70:	7c060000 	stcvc	0, cr0, [r6], {-0}
     d74:	00da1106 	sbcseq	r1, sl, r6, lsl #2
     d78:	11600000 	cmnne	r0, r0
     d7c:	000008b1 			; <UNDEFINED> instruction: 0x000008b1
     d80:	11067d06 	tstne	r6, r6, lsl #26
     d84:	000000da 	ldrdeq	r0, [r0], -sl
     d88:	0a4f1164 	beq	13c5320 <startup-0x1ec3ace0>
     d8c:	7e060000 	cdpvc	0, 0, cr0, cr6, cr0, {0}
     d90:	00df1106 	sbcseq	r1, pc, r6, lsl #2
     d94:	11680000 	cmnne	r8, r0
     d98:	00000cb2 			; <UNDEFINED> instruction: 0x00000cb2
     d9c:	11067f06 	tstne	r6, r6, lsl #30
     da0:	000000da 	ldrdeq	r0, [r0], -sl
     da4:	53431070 	movtpl	r1, #12400	; 0x3070
     da8:	80060052 	andhi	r0, r6, r2, asr r0
     dac:	00da1106 	sbcseq	r1, sl, r6, lsl #2
     db0:	11740000 	cmnne	r4, r0
     db4:	00000a59 	andeq	r0, r0, r9, asr sl
     db8:	11068106 	tstne	r6, r6, lsl #2
     dbc:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     dc0:	0c851178 	stfeqs	f1, [r5], {120}	; 0x78
     dc4:	82060000 	andhi	r0, r6, #0
     dc8:	00da1106 	sbcseq	r1, sl, r6, lsl #2
     dcc:	11800000 	orrne	r0, r0, r0
     dd0:	0000085e 	andeq	r0, r0, lr, asr r8
     dd4:	11068306 	tstne	r6, r6, lsl #6
     dd8:	000000da 	ldrdeq	r0, [r0], -sl
     ddc:	0a121184 	beq	4853f4 <startup-0x1fb7ac0c>
     de0:	84060000 	strhi	r0, [r6], #-0
     de4:	00da1106 	sbcseq	r1, sl, r6, lsl #2
     de8:	11880000 	orrne	r0, r8, r0
     dec:	00000658 	andeq	r0, r0, r8, asr r6
     df0:	11068506 	tstne	r6, r6, lsl #10
     df4:	000000da 	ldrdeq	r0, [r0], -sl
     df8:	0ca9118c 	stfeqs	f1, [r9], #560	; 0x230
     dfc:	86060000 	strhi	r0, [r6], -r0
     e00:	00da1106 	sbcseq	r1, sl, r6, lsl #2
     e04:	11900000 	orrsne	r0, r0, r0
     e08:	00000677 	andeq	r0, r0, r7, ror r6
     e0c:	11068706 	tstne	r6, r6, lsl #14
     e10:	000000da 	ldrdeq	r0, [r0], -sl
     e14:	f80e0094 			; <UNDEFINED> instruction: 0xf80e0094
     e18:	06000007 	streq	r0, [r0], -r7
     e1c:	90030689 	andls	r0, r3, r9, lsl #13
     e20:	12000001 	andne	r0, r0, #1
     e24:	09300710 	ldmdbeq	r0!, {r4, r8, r9, sl}
     e28:	000003c1 	andeq	r0, r0, r1, asr #7
     e2c:	00058b13 	andeq	r8, r5, r3, lsl fp
     e30:	0c320700 	ldceq	7, cr0, [r2], #-0
     e34:	000000ce 	andeq	r0, r0, lr, asr #1
     e38:	07ab1300 	streq	r1, [fp, r0, lsl #6]!
     e3c:	33070000 	movwcc	r0, #28672	; 0x7000
     e40:	0000ce0c 	andeq	ip, r0, ip, lsl #28
     e44:	5f130400 	svcpl	0x00130400
     e48:	0700000b 	streq	r0, [r0, -fp]
     e4c:	00ce0c34 	sbceq	r0, lr, r4, lsr ip
     e50:	13080000 	movwne	r0, #32768	; 0x8000
     e54:	00000687 	andeq	r0, r0, r7, lsl #13
     e58:	ce0c3507 	cfsh32gt	mvfx3, mvfx12, #7
     e5c:	0c000000 	stceq	0, cr0, [r0], {-0}
     e60:	0cf10300 	ldcleq	3, cr0, [r1]
     e64:	36070000 	strcc	r0, [r7], -r0
     e68:	00038302 	andeq	r8, r3, r2, lsl #6
     e6c:	00ac0700 	adceq	r0, ip, r0, lsl #14
     e70:	03dd0000 	bicseq	r0, sp, #0
     e74:	94080000 	strls	r0, [r8], #-0
     e78:	0f000000 	svceq	0x00000000
     e7c:	03cd0600 	biceq	r0, sp, #0, 12
     e80:	dd050000 	stcle	0, cr0, [r5, #-0]
     e84:	14000003 	strne	r0, [r0], #-3
     e88:	00000b6f 	andeq	r0, r0, pc, ror #22
     e8c:	e2149901 	ands	r9, r4, #16384	; 0x4000
     e90:	05000003 	streq	r0, [r0, #-3]
     e94:	00201803 	eoreq	r1, r0, r3, lsl #16
     e98:	05f51520 	ldrbeq	r1, [r5, #1312]!	; 0x520
     e9c:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
     ea0:	1414060c 	ldrne	r0, [r4], #-1548	; 0xfffff9f4
     ea4:	00202000 	eoreq	r2, r0, r0
     ea8:	9c010000 	stcls	0, cr0, [r1], {-0}
     eac:	00000421 	andeq	r0, r0, r1, lsr #8
     eb0:	00060b16 	andeq	r0, r6, r6, lsl fp
     eb4:	0c5e0100 	ldfeqe	f0, [lr], {-0}
     eb8:	00009b24 	andeq	r9, r0, r4, lsr #22
     ebc:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     ec0:	0bf51700 	bleq	ffd46ac8 <APBAHBPrescTable+0xdfd44ab0>
     ec4:	3c010000 	stccc	0, cr0, [r1], {-0}
     ec8:	01310a0c 	teqeq	r1, ip, lsl #20
     ecc:	13d00000 	bicsne	r0, r0, #0
     ed0:	00442000 	subeq	r2, r4, r0
     ed4:	9c010000 	stcls	0, cr0, [r1], {-0}
     ed8:	0000045d 	andeq	r0, r0, sp, asr r4
     edc:	00060b16 	andeq	r0, r6, r6, lsl fp
     ee0:	0c3c0100 	ldfeqs	f0, [ip], #-0
     ee4:	00009b22 	andeq	r9, r0, r2, lsr #22
     ee8:	6f910200 	svcvs	0x00910200
     eec:	00042118 	andeq	r2, r4, r8, lsl r1
     ef0:	0c3e0100 	ldfeqs	f0, [lr], #-0
     ef4:	0001310c 	andeq	r3, r1, ip, lsl #2
     ef8:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     efc:	06601900 	strbteq	r1, [r0], -r0, lsl #18
     f00:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
     f04:	13b4060c 			; <UNDEFINED> instruction: 0x13b4060c
     f08:	001c2000 	andseq	r2, ip, r0
     f0c:	9c010000 	stcls	0, cr0, [r1], {-0}
     f10:	000a6317 	andeq	r6, sl, r7, lsl r3
     f14:	0bfb0100 	bleq	ffec131c <APBAHBPrescTable+0xdfebf304>
     f18:	0001240c 	andeq	r2, r1, ip, lsl #8
     f1c:	00133000 	andseq	r3, r3, r0
     f20:	00008420 	andeq	r8, r0, r0, lsr #8
     f24:	cc9c0100 	ldfgts	f0, [ip], {0}
     f28:	16000004 	strne	r0, [r0], -r4
     f2c:	0000073a 	andeq	r0, r0, sl, lsr r7
     f30:	260bfb01 	strcs	pc, [fp], -r1, lsl #22
     f34:	0000009b 	muleq	r0, fp, r0
     f38:	1a679102 	bne	19e5348 <startup-0x1e61acb8>
     f3c:	00706d74 	rsbseq	r6, r0, r4, ror sp
     f40:	0c0bfd01 	stceq	13, cr15, [fp], {1}
     f44:	000000ce 	andeq	r0, r0, lr, asr #1
     f48:	186c9102 	stmdane	ip!, {r1, r8, ip, pc}^
     f4c:	00000581 	andeq	r0, r0, r1, lsl #11
     f50:	0c0bfe01 	stceq	14, cr15, [fp], {1}
     f54:	000000ce 	andeq	r0, r0, lr, asr #1
     f58:	18749102 	ldmdane	r4!, {r1, r8, ip, pc}^
     f5c:	00000421 	andeq	r0, r0, r1, lsr #8
     f60:	0e0bff01 	cdpeq	15, 0, cr15, cr11, cr1, {0}
     f64:	00000124 	andeq	r0, r0, r4, lsr #2
     f68:	00739102 	rsbseq	r9, r3, r2, lsl #2
     f6c:	000cce15 	andeq	ip, ip, r5, lsl lr
     f70:	0bd60100 	bleq	ff581378 <APBAHBPrescTable+0xdf57f360>
     f74:	0012e006 	andseq	lr, r2, r6
     f78:	00005020 	andeq	r5, r0, r0, lsr #32
     f7c:	049c0100 	ldreq	r0, [ip], #256	; 0x100
     f80:	16000005 	strne	r0, [r0], -r5
     f84:	0000060b 	andeq	r0, r0, fp, lsl #12
     f88:	1b0bd601 	blne	2f6794 <startup-0x1fd0986c>
     f8c:	0000009b 	muleq	r0, fp, r0
     f90:	16779102 	ldrbtne	r9, [r7], -r2, lsl #2
     f94:	00000743 	andeq	r0, r0, r3, asr #14
     f98:	330bd601 	movwcc	sp, #46593	; 0xb601
     f9c:	0000015a 	andeq	r0, r0, sl, asr r1
     fa0:	00769102 	rsbseq	r9, r6, r2, lsl #2
     fa4:	00094715 	andeq	r4, r9, r5, lsl r7
     fa8:	0a9e0100 	beq	fe7813b0 <APBAHBPrescTable+0xde77f398>
     fac:	0012a406 	andseq	sl, r2, r6, lsl #8
     fb0:	00003c20 	andeq	r3, r0, r0, lsr #24
     fb4:	2c9c0100 	ldfcss	f0, [ip], {0}
     fb8:	16000005 	strne	r0, [r0], -r5
     fbc:	00000af9 	strdeq	r0, [r0], -r9
     fc0:	200a9e01 	andcs	r9, sl, r1, lsl #28
     fc4:	0000009b 	muleq	r0, fp, r0
     fc8:	00779102 	rsbseq	r9, r7, r2, lsl #2
     fcc:	00063b15 	andeq	r3, r6, r5, lsl fp
     fd0:	0a860100 	beq	fe1813d8 <APBAHBPrescTable+0xde17f3c0>
     fd4:	00126406 	andseq	r6, r2, r6, lsl #8
     fd8:	00004020 	andeq	r4, r0, r0, lsr #32
     fdc:	649c0100 	ldrvs	r0, [ip], #256	; 0x100
     fe0:	16000005 	strne	r0, [r0], -r5
     fe4:	00000c41 	andeq	r0, r0, r1, asr #24
     fe8:	2c0a8601 	stccs	6, cr8, [sl], {1}
     fec:	000000ce 	andeq	r0, r0, lr, asr #1
     ff0:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
     ff4:	00000743 	andeq	r0, r0, r3, asr #14
     ff8:	4c0a8601 	stcmi	6, cr8, [sl], {1}
     ffc:	0000015a 	andeq	r0, r0, sl, asr r1
    1000:	00739102 	rsbseq	r9, r3, r2, lsl #2
    1004:	000b1915 	andeq	r1, fp, r5, lsl r9
    1008:	0a520100 	beq	1481410 <startup-0x1eb7ebf0>
    100c:	00122406 	andseq	r2, r2, r6, lsl #8
    1010:	00004020 	andeq	r4, r0, r0, lsr #32
    1014:	9c9c0100 	ldflss	f0, [ip], {0}
    1018:	16000005 	strne	r0, [r0], -r5
    101c:	000007ba 			; <UNDEFINED> instruction: 0x000007ba
    1020:	2c0a5201 	sfmcs	f5, 4, [sl], {1}
    1024:	000000ce 	andeq	r0, r0, lr, asr #1
    1028:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
    102c:	00000743 	andeq	r0, r0, r3, asr #14
    1030:	4c0a5201 	sfmmi	f5, 4, [sl], {1}
    1034:	0000015a 	andeq	r0, r0, sl, asr r1
    1038:	00739102 	rsbseq	r9, r3, r2, lsl #2
    103c:	000c1515 	andeq	r1, ip, r5, lsl r5
    1040:	0a190100 	beq	641448 <startup-0x1f9bebb8>
    1044:	0011e406 	andseq	lr, r1, r6, lsl #8
    1048:	00004020 	andeq	r4, r0, r0, lsr #32
    104c:	d49c0100 	ldrle	r0, [ip], #256	; 0x100
    1050:	16000005 	strne	r0, [r0], -r5
    1054:	000008bb 			; <UNDEFINED> instruction: 0x000008bb
    1058:	2c0a1901 			; <UNDEFINED> instruction: 0x2c0a1901
    105c:	000000ce 	andeq	r0, r0, lr, asr #1
    1060:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
    1064:	00000743 	andeq	r0, r0, r3, asr #14
    1068:	4c0a1901 			; <UNDEFINED> instruction: 0x4c0a1901
    106c:	0000015a 	andeq	r0, r0, sl, asr r1
    1070:	00739102 	rsbseq	r9, r3, r2, lsl #2
    1074:	00086915 	andeq	r6, r8, r5, lsl r9
    1078:	09fb0100 	ldmibeq	fp!, {r8}^
    107c:	0011a406 	andseq	sl, r1, r6, lsl #8
    1080:	00004020 	andeq	r4, r0, r0, lsr #32
    1084:	0c9c0100 	ldfeqs	f0, [ip], {0}
    1088:	16000006 	strne	r0, [r0], -r6
    108c:	000008a2 	andeq	r0, r0, r2, lsr #17
    1090:	2c09fb01 			; <UNDEFINED> instruction: 0x2c09fb01
    1094:	000000ce 	andeq	r0, r0, lr, asr #1
    1098:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
    109c:	00000743 	andeq	r0, r0, r3, asr #14
    10a0:	4c09fb01 			; <UNDEFINED> instruction: 0x4c09fb01
    10a4:	0000015a 	andeq	r0, r0, sl, asr r1
    10a8:	00739102 	rsbseq	r9, r3, r2, lsl #2
    10ac:	000d2615 	andeq	r2, sp, r5, lsl r6
    10b0:	09db0100 	ldmibeq	fp, {r8}^
    10b4:	00116406 	andseq	r6, r1, r6, lsl #8
    10b8:	00004020 	andeq	r4, r0, r0, lsr #32
    10bc:	449c0100 	ldrmi	r0, [ip], #256	; 0x100
    10c0:	16000006 	strne	r0, [r0], -r6
    10c4:	00000617 	andeq	r0, r0, r7, lsl r6
    10c8:	2c09db01 			; <UNDEFINED> instruction: 0x2c09db01
    10cc:	000000ce 	andeq	r0, r0, lr, asr #1
    10d0:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
    10d4:	00000743 	andeq	r0, r0, r3, asr #14
    10d8:	4c09db01 			; <UNDEFINED> instruction: 0x4c09db01
    10dc:	0000015a 	andeq	r0, r0, sl, asr r1
    10e0:	00739102 	rsbseq	r9, r3, r2, lsl #2
    10e4:	0009db15 	andeq	sp, r9, r5, lsl fp
    10e8:	09aa0100 	stmibeq	sl!, {r8}
    10ec:	00112406 	andseq	r2, r1, r6, lsl #8
    10f0:	00004020 	andeq	r4, r0, r0, lsr #32
    10f4:	7c9c0100 	ldfvcs	f0, [ip], {0}
    10f8:	16000006 	strne	r0, [r0], -r6
    10fc:	00000c41 	andeq	r0, r0, r1, asr #24
    1100:	2609aa01 	strcs	sl, [r9], -r1, lsl #20
    1104:	000000ce 	andeq	r0, r0, lr, asr #1
    1108:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
    110c:	00000743 	andeq	r0, r0, r3, asr #14
    1110:	4609aa01 	strmi	sl, [r9], -r1, lsl #20
    1114:	0000015a 	andeq	r0, r0, sl, asr r1
    1118:	00739102 	rsbseq	r9, r3, r2, lsl #2
    111c:	0005b515 	andeq	fp, r5, r5, lsl r5
    1120:	097b0100 	ldmdbeq	fp!, {r8}^
    1124:	0010e406 	andseq	lr, r0, r6, lsl #8
    1128:	00004020 	andeq	r4, r0, r0, lsr #32
    112c:	b49c0100 	ldrlt	r0, [ip], #256	; 0x100
    1130:	16000006 	strne	r0, [r0], -r6
    1134:	000007ba 			; <UNDEFINED> instruction: 0x000007ba
    1138:	26097b01 	strcs	r7, [r9], -r1, lsl #22
    113c:	000000ce 	andeq	r0, r0, lr, asr #1
    1140:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
    1144:	00000743 	andeq	r0, r0, r3, asr #14
    1148:	46097b01 	strmi	r7, [r9], -r1, lsl #22
    114c:	0000015a 	andeq	r0, r0, sl, asr r1
    1150:	00739102 	rsbseq	r9, r3, r2, lsl #2
    1154:	0006c715 	andeq	ip, r6, r5, lsl r7
    1158:	09450100 	stmdbeq	r5, {r8}^
    115c:	0010a406 	andseq	sl, r0, r6, lsl #8
    1160:	00004020 	andeq	r4, r0, r0, lsr #32
    1164:	ec9c0100 	ldfs	f0, [ip], {0}
    1168:	16000006 	strne	r0, [r0], -r6
    116c:	000008bb 			; <UNDEFINED> instruction: 0x000008bb
    1170:	26094501 	strcs	r4, [r9], -r1, lsl #10
    1174:	000000ce 	andeq	r0, r0, lr, asr #1
    1178:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
    117c:	00000743 	andeq	r0, r0, r3, asr #14
    1180:	46094501 	strmi	r4, [r9], -r1, lsl #10
    1184:	0000015a 	andeq	r0, r0, sl, asr r1
    1188:	00739102 	rsbseq	r9, r3, r2, lsl #2
    118c:	000b0215 	andeq	r0, fp, r5, lsl r2
    1190:	092a0100 	stmdbeq	sl!, {r8}
    1194:	00106406 	andseq	r6, r0, r6, lsl #8
    1198:	00004020 	andeq	r4, r0, r0, lsr #32
    119c:	249c0100 	ldrcs	r0, [ip], #256	; 0x100
    11a0:	16000007 	strne	r0, [r0], -r7
    11a4:	000008a2 	andeq	r0, r0, r2, lsr #17
    11a8:	26092a01 	strcs	r2, [r9], -r1, lsl #20
    11ac:	000000ce 	andeq	r0, r0, lr, asr #1
    11b0:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
    11b4:	00000743 	andeq	r0, r0, r3, asr #14
    11b8:	46092a01 	strmi	r2, [r9], -r1, lsl #20
    11bc:	0000015a 	andeq	r0, r0, sl, asr r1
    11c0:	00739102 	rsbseq	r9, r3, r2, lsl #2
    11c4:	0006f515 	andeq	pc, r6, r5, lsl r5	; <UNPREDICTABLE>
    11c8:	090d0100 	stmdbeq	sp, {r8}
    11cc:	00102406 	andseq	r2, r0, r6, lsl #8
    11d0:	00004020 	andeq	r4, r0, r0, lsr #32
    11d4:	5c9c0100 	ldfpls	f0, [ip], {0}
    11d8:	16000007 	strne	r0, [r0], -r7
    11dc:	00000617 	andeq	r0, r0, r7, lsl r6
    11e0:	26090d01 	strcs	r0, [r9], -r1, lsl #26
    11e4:	000000ce 	andeq	r0, r0, lr, asr #1
    11e8:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
    11ec:	00000743 	andeq	r0, r0, r3, asr #14
    11f0:	46090d01 	strmi	r0, [r9], -r1, lsl #26
    11f4:	0000015a 	andeq	r0, r0, sl, asr r1
    11f8:	00739102 	rsbseq	r9, r3, r2, lsl #2
    11fc:	000bc215 	andeq	ip, fp, r5, lsl r2
    1200:	08e30100 	stmiaeq	r3!, {r8}^
    1204:	000fe406 	andeq	lr, pc, r6, lsl #8
    1208:	00004020 	andeq	r4, r0, r0, lsr #32
    120c:	949c0100 	ldrls	r0, [ip], #256	; 0x100
    1210:	16000007 	strne	r0, [r0], -r7
    1214:	00000c41 	andeq	r0, r0, r1, asr #24
    1218:	2608e301 	strcs	lr, [r8], -r1, lsl #6
    121c:	000000ce 	andeq	r0, r0, lr, asr #1
    1220:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
    1224:	00000743 	andeq	r0, r0, r3, asr #14
    1228:	4608e301 	strmi	lr, [r8], -r1, lsl #6
    122c:	0000015a 	andeq	r0, r0, sl, asr r1
    1230:	00739102 	rsbseq	r9, r3, r2, lsl #2
    1234:	000cb715 	andeq	fp, ip, r5, lsl r7
    1238:	08af0100 	stmiaeq	pc!, {r8}	; <UNPREDICTABLE>
    123c:	000fa406 	andeq	sl, pc, r6, lsl #8
    1240:	00004020 	andeq	r4, r0, r0, lsr #32
    1244:	cc9c0100 	ldfgts	f0, [ip], {0}
    1248:	16000007 	strne	r0, [r0], -r7
    124c:	000007ba 			; <UNDEFINED> instruction: 0x000007ba
    1250:	2608af01 	strcs	sl, [r8], -r1, lsl #30
    1254:	000000ce 	andeq	r0, r0, lr, asr #1
    1258:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
    125c:	00000743 	andeq	r0, r0, r3, asr #14
    1260:	4608af01 	strmi	sl, [r8], -r1, lsl #30
    1264:	0000015a 	andeq	r0, r0, sl, asr r1
    1268:	00739102 	rsbseq	r9, r3, r2, lsl #2
    126c:	000d4315 	andeq	r4, sp, r5, lsl r3
    1270:	08760100 	ldmdaeq	r6!, {r8}^
    1274:	000f6406 	andeq	r6, pc, r6, lsl #8
    1278:	00004020 	andeq	r4, r0, r0, lsr #32
    127c:	049c0100 	ldreq	r0, [ip], #256	; 0x100
    1280:	16000008 	strne	r0, [r0], -r8
    1284:	000008bb 			; <UNDEFINED> instruction: 0x000008bb
    1288:	26087601 	strcs	r7, [r8], -r1, lsl #12
    128c:	000000ce 	andeq	r0, r0, lr, asr #1
    1290:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
    1294:	00000743 	andeq	r0, r0, r3, asr #14
    1298:	46087601 	strmi	r7, [r8], -r1, lsl #12
    129c:	0000015a 	andeq	r0, r0, sl, asr r1
    12a0:	00739102 	rsbseq	r9, r3, r2, lsl #2
    12a4:	00069715 	andeq	r9, r6, r5, lsl r7
    12a8:	08580100 	ldmdaeq	r8, {r8}^
    12ac:	000f2406 	andeq	r2, pc, r6, lsl #8
    12b0:	00004020 	andeq	r4, r0, r0, lsr #32
    12b4:	3c9c0100 	ldfccs	f0, [ip], {0}
    12b8:	16000008 	strne	r0, [r0], -r8
    12bc:	000008a2 	andeq	r0, r0, r2, lsr #17
    12c0:	26085801 	strcs	r5, [r8], -r1, lsl #16
    12c4:	000000ce 	andeq	r0, r0, lr, asr #1
    12c8:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
    12cc:	00000743 	andeq	r0, r0, r3, asr #14
    12d0:	46085801 	strmi	r5, [r8], -r1, lsl #16
    12d4:	0000015a 	andeq	r0, r0, sl, asr r1
    12d8:	00739102 	rsbseq	r9, r3, r2, lsl #2
    12dc:	000ad115 	andeq	sp, sl, r5, lsl r1
    12e0:	08380100 	ldmdaeq	r8!, {r8}
    12e4:	000ee406 	andeq	lr, lr, r6, lsl #8
    12e8:	00004020 	andeq	r4, r0, r0, lsr #32
    12ec:	749c0100 	ldrvc	r0, [ip], #256	; 0x100
    12f0:	16000008 	strne	r0, [r0], -r8
    12f4:	00000617 	andeq	r0, r0, r7, lsl r6
    12f8:	26083801 	strcs	r3, [r8], -r1, lsl #16
    12fc:	000000ce 	andeq	r0, r0, lr, asr #1
    1300:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
    1304:	00000743 	andeq	r0, r0, r3, asr #14
    1308:	46083801 	strmi	r3, [r8], -r1, lsl #16
    130c:	0000015a 	andeq	r0, r0, sl, asr r1
    1310:	00739102 	rsbseq	r9, r3, r2, lsl #2
    1314:	000c5015 	andeq	r5, ip, r5, lsl r0
    1318:	080e0100 	stmdaeq	lr, {r8}
    131c:	000ec806 	andeq	ip, lr, r6, lsl #16
    1320:	00001c20 	andeq	r1, r0, r0, lsr #24
    1324:	9c9c0100 	ldflss	f0, [ip], {0}
    1328:	16000008 	strne	r0, [r0], -r8
    132c:	00000ab2 			; <UNDEFINED> instruction: 0x00000ab2
    1330:	24080e01 	strcs	r0, [r8], #-3585	; 0xfffff1ff
    1334:	000000ce 	andeq	r0, r0, lr, asr #1
    1338:	00749102 	rsbseq	r9, r4, r2, lsl #2
    133c:	00084915 	andeq	r4, r8, r5, lsl r9
    1340:	078e0100 	streq	r0, [lr, r0, lsl #2]
    1344:	000e8c06 	andeq	r8, lr, r6, lsl #24
    1348:	00003c20 	andeq	r3, r0, r0, lsr #24
    134c:	d49c0100 	ldrle	r0, [ip], #256	; 0x100
    1350:	16000008 	strne	r0, [r0], -r8
    1354:	00000572 	andeq	r0, r0, r2, ror r5
    1358:	24078e01 	strcs	r8, [r7], #-3585	; 0xfffff1ff
    135c:	000000ce 	andeq	r0, r0, lr, asr #1
    1360:	186c9102 	stmdane	ip!, {r1, r8, ip, pc}^
    1364:	00000680 	andeq	r0, r0, r0, lsl #13
    1368:	0c079001 	stceq	0, cr9, [r7], {1}
    136c:	000000ce 	andeq	r0, r0, lr, asr #1
    1370:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1374:	0005d115 	andeq	sp, r5, r5, lsl r1
    1378:	072b0100 	streq	r0, [fp, -r0, lsl #2]!
    137c:	000e4c06 	andeq	r4, lr, r6, lsl #24
    1380:	00004020 	andeq	r4, r0, r0, lsr #32
    1384:	0c9c0100 	ldfeqs	f0, [ip], {0}
    1388:	16000009 	strne	r0, [r0], -r9
    138c:	00000563 	andeq	r0, r0, r3, ror #10
    1390:	29072b01 	stmdbcs	r7, {r0, r8, r9, fp, sp}
    1394:	000000ce 	andeq	r0, r0, lr, asr #1
    1398:	186c9102 	stmdane	ip!, {r1, r8, ip, pc}^
    139c:	00000680 	andeq	r0, r0, r0, lsl #13
    13a0:	0c072d01 	stceq	13, cr2, [r7], {1}
    13a4:	000000ce 	andeq	r0, r0, lr, asr #1
    13a8:	00749102 	rsbseq	r9, r4, r2, lsl #2
    13ac:	0008d615 	andeq	sp, r8, r5, lsl r6
    13b0:	070b0100 	streq	r0, [fp, -r0, lsl #2]
    13b4:	000e1006 	andeq	r1, lr, r6
    13b8:	00003c20 	andeq	r3, r0, r0, lsr #24
    13bc:	449c0100 	ldrmi	r0, [ip], #256	; 0x100
    13c0:	16000009 	strne	r0, [r0], -r9
    13c4:	0000091f 	andeq	r0, r0, pc, lsl r9
    13c8:	29070b01 	stmdbcs	r7, {r0, r8, r9, fp}
    13cc:	000000ce 	andeq	r0, r0, lr, asr #1
    13d0:	186c9102 	stmdane	ip!, {r1, r8, ip, pc}^
    13d4:	00000680 	andeq	r0, r0, r0, lsl #13
    13d8:	0c070d01 	stceq	13, cr0, [r7], {1}
    13dc:	000000ce 	andeq	r0, r0, lr, asr #1
    13e0:	00749102 	rsbseq	r9, r4, r2, lsl #2
    13e4:	000a8315 	andeq	r8, sl, r5, lsl r3
    13e8:	06ea0100 	strbteq	r0, [sl], r0, lsl #2
    13ec:	000dd406 	andeq	sp, sp, r6, lsl #8
    13f0:	00003c20 	andeq	r3, r0, r0, lsr #24
    13f4:	7c9c0100 	ldfvcs	f0, [ip], {0}
    13f8:	16000009 	strne	r0, [r0], -r9
    13fc:	00000832 	andeq	r0, r0, r2, lsr r8
    1400:	2606ea01 	strcs	lr, [r6], -r1, lsl #20
    1404:	000000ce 	andeq	r0, r0, lr, asr #1
    1408:	186c9102 	stmdane	ip!, {r1, r8, ip, pc}^
    140c:	00000680 	andeq	r0, r0, r0, lsl #13
    1410:	0c06ec01 	stceq	12, cr14, [r6], {1}
    1414:	000000ce 	andeq	r0, r0, lr, asr #1
    1418:	00749102 	rsbseq	r9, r4, r2, lsl #2
    141c:	0006de15 	andeq	sp, r6, r5, lsl lr
    1420:	06c60100 	strbeq	r0, [r6], r0, lsl #2
    1424:	000d9806 	andeq	r9, sp, r6, lsl #16
    1428:	00003c20 	andeq	r3, r0, r0, lsr #24
    142c:	b49c0100 	ldrlt	r0, [ip], #256	; 0x100
    1430:	16000009 	strne	r0, [r0], -r9
    1434:	0000081b 	andeq	r0, r0, fp, lsl r8
    1438:	2606c601 	strcs	ip, [r6], -r1, lsl #12
    143c:	000000ce 	andeq	r0, r0, lr, asr #1
    1440:	186c9102 	stmdane	ip!, {r1, r8, ip, pc}^
    1444:	00000680 	andeq	r0, r0, r0, lsl #13
    1448:	0c06c801 	stceq	8, cr12, [r6], {1}
    144c:	000000ce 	andeq	r0, r0, lr, asr #1
    1450:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1454:	000c6515 	andeq	r6, ip, r5, lsl r5
    1458:	06ab0100 	strteq	r0, [fp], r0, lsl #2
    145c:	000d7c06 	andeq	r7, sp, r6, lsl #24
    1460:	00001c20 	andeq	r1, r0, r0, lsr #24
    1464:	dc9c0100 	ldfles	f0, [ip], {0}
    1468:	16000009 	strne	r0, [r0], -r9
    146c:	00000a01 	andeq	r0, r0, r1, lsl #20
    1470:	2006ab01 	andcs	sl, r6, r1, lsl #22
    1474:	000000ce 	andeq	r0, r0, lr, asr #1
    1478:	00749102 	rsbseq	r9, r4, r2, lsl #2
    147c:	00075415 	andeq	r5, r7, r5, lsl r4
    1480:	05ef0100 	strbeq	r0, [pc, #256]!	; 1588 <startup-0x1fffea78>
    1484:	000d5c06 	andeq	r5, sp, r6, lsl #24
    1488:	00002020 	andeq	r2, r0, r0, lsr #32
    148c:	049c0100 	ldreq	r0, [ip], #256	; 0x100
    1490:	1600000a 	strne	r0, [r0], -sl
    1494:	00000743 	andeq	r0, r0, r3, asr #14
    1498:	2905ef01 	stmdbcs	r5, {r0, r8, r9, sl, fp, sp, lr, pc}
    149c:	0000015a 	andeq	r0, r0, sl, asr r1
    14a0:	00779102 	rsbseq	r9, r7, r2, lsl #2
    14a4:	0008f015 	andeq	pc, r8, r5, lsl r0	; <UNPREDICTABLE>
    14a8:	05de0100 	ldrbeq	r0, [lr, #256]	; 0x100
    14ac:	000d3c06 	andeq	r3, sp, r6, lsl #24
    14b0:	00002020 	andeq	r2, r0, r0, lsr #32
    14b4:	2c9c0100 	ldfcss	f0, [ip], {0}
    14b8:	1600000a 	strne	r0, [r0], -sl
    14bc:	00000743 	andeq	r0, r0, r3, asr #14
    14c0:	2405de01 	strcs	sp, [r5], #-3585	; 0xfffff1ff
    14c4:	0000015a 	andeq	r0, r0, sl, asr r1
    14c8:	00779102 	rsbseq	r9, r7, r2, lsl #2
    14cc:	000d0b15 	andeq	r0, sp, r5, lsl fp
    14d0:	05be0100 	ldreq	r0, [lr, #256]!	; 0x100
    14d4:	000cdc06 	andeq	sp, ip, r6, lsl #24
    14d8:	00006020 	andeq	r6, r0, r0, lsr #32
    14dc:	649c0100 	ldrvs	r0, [ip], #256	; 0x100
    14e0:	1600000a 	strne	r0, [r0], -sl
    14e4:	0000080a 	andeq	r0, r0, sl, lsl #16
    14e8:	2005be01 	andcs	fp, r5, r1, lsl #28
    14ec:	000000ce 	andeq	r0, r0, lr, asr #1
    14f0:	186c9102 	stmdane	ip!, {r1, r8, ip, pc}^
    14f4:	00000680 	andeq	r0, r0, r0, lsl #13
    14f8:	0c05c001 	stceq	0, cr12, [r5], {1}
    14fc:	000000ce 	andeq	r0, r0, lr, asr #1
    1500:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1504:	000bb01b 	andeq	fp, fp, fp, lsl r0
    1508:	05250100 	streq	r0, [r5, #-256]!	; 0xffffff00
    150c:	000b7806 	andeq	r7, fp, r6, lsl #16
    1510:	00016420 	andeq	r6, r1, r0, lsr #8
    1514:	ec9c0100 	ldfs	f0, [ip], {0}
    1518:	1600000a 	strne	r0, [r0], -sl
    151c:	00000630 	andeq	r0, r0, r0, lsr r6
    1520:	2b052501 	blcs	14a92c <startup-0x1feb56d4>
    1524:	00000aec 	andeq	r0, r0, ip, ror #21
    1528:	1a5c9102 	bne	1725938 <startup-0x1e8da6c8>
    152c:	00706d74 	rsbseq	r6, r0, r4, ror sp
    1530:	0c052701 	stceq	7, cr2, [r5], {1}
    1534:	000000ce 	andeq	r0, r0, lr, asr #1
    1538:	18709102 	ldmdane	r0!, {r1, r8, ip, pc}^
    153c:	00000804 	andeq	r0, r0, r4, lsl #16
    1540:	15052701 	strne	r2, [r5, #-1793]	; 0xfffff8ff
    1544:	000000ce 	andeq	r0, r0, lr, asr #1
    1548:	186c9102 	stmdane	ip!, {r1, r8, ip, pc}^
    154c:	000007c9 	andeq	r0, r0, r9, asr #15
    1550:	20052701 	andcs	r2, r5, r1, lsl #14
    1554:	000000ce 	andeq	r0, r0, lr, asr #1
    1558:	18749102 	ldmdane	r4!, {r1, r8, ip, pc}^
    155c:	000005a1 	andeq	r0, r0, r1, lsr #11
    1560:	2c052701 	stccs	7, cr2, [r5], {1}
    1564:	000000ce 	andeq	r0, r0, lr, asr #1
    1568:	18689102 	stmdane	r8!, {r1, r8, ip, pc}^
    156c:	00000d1c 	andeq	r0, r0, ip, lsl sp
    1570:	36052701 	strcc	r2, [r5], -r1, lsl #14
    1574:	000000ce 	andeq	r0, r0, lr, asr #1
    1578:	18649102 	stmdane	r4!, {r1, r8, ip, pc}^
    157c:	0000059c 	muleq	r0, ip, r5
    1580:	45052701 	strmi	r2, [r5, #-1793]	; 0xfffff8ff
    1584:	000000ce 	andeq	r0, r0, lr, asr #1
    1588:	00609102 	rsbeq	r9, r0, r2, lsl #2
    158c:	03c1041c 	biceq	r0, r1, #28, 8	; 0x1c000000
    1590:	36150000 	ldrcc	r0, [r5], -r0
    1594:	0100000b 	tsteq	r0, fp
    1598:	3c0604f1 	cfstrscc	mvf0, [r6], {241}	; 0xf1
    159c:	3c20000b 	stccc	0, cr0, [r0], #-44	; 0xffffffd4
    15a0:	01000000 	mrseq	r0, (UNDEF: 0)
    15a4:	000b2a9c 	muleq	fp, ip, sl
    15a8:	053a1600 	ldreq	r1, [sl, #-1536]!	; 0xfffffa00
    15ac:	f1010000 	setend	le
    15b0:	00ce1f04 	sbceq	r1, lr, r4, lsl #30
    15b4:	91020000 	mrsls	r0, (UNDEF: 2)
    15b8:	0680186c 	streq	r1, [r0], ip, ror #16
    15bc:	f3010000 	vhadd.u8	d0, d1, d0
    15c0:	00ce0c04 	sbceq	r0, lr, r4, lsl #24
    15c4:	91020000 	mrsls	r0, (UNDEF: 2)
    15c8:	b7150074 			; <UNDEFINED> instruction: 0xb7150074
    15cc:	01000006 	tsteq	r0, r6
    15d0:	040604d2 	streq	r0, [r6], #-1234	; 0xfffffb2e
    15d4:	3820000b 	stmdacc	r0!, {r0, r1, r3}
    15d8:	01000000 	mrseq	r0, (UNDEF: 0)
    15dc:	000b629c 	muleq	fp, ip, r2
    15e0:	053a1600 	ldreq	r1, [sl, #-1536]!	; 0xfffffa00
    15e4:	d2010000 	andle	r0, r1, #0
    15e8:	00ce1f04 	sbceq	r1, lr, r4, lsl #30
    15ec:	91020000 	mrsls	r0, (UNDEF: 2)
    15f0:	0680186c 	streq	r1, [r0], ip, ror #16
    15f4:	d4010000 	strle	r0, [r1], #-0
    15f8:	00ce0c04 	sbceq	r0, lr, r4, lsl #24
    15fc:	91020000 	mrsls	r0, (UNDEF: 2)
    1600:	0c150074 	ldceq	0, cr0, [r5], {116}	; 0x74
    1604:	01000007 	tsteq	r0, r7
    1608:	d00604b3 			; <UNDEFINED> instruction: 0xd00604b3
    160c:	3420000a 	strtcc	r0, [r0], #-10
    1610:	01000000 	mrseq	r0, (UNDEF: 0)
    1614:	000b9a9c 	muleq	fp, ip, sl
    1618:	07df1600 	ldrbeq	r1, [pc, r0, lsl #12]
    161c:	b3010000 	movwlt	r0, #4096	; 0x1000
    1620:	00ce1e04 	sbceq	r1, lr, r4, lsl #28
    1624:	91020000 	mrsls	r0, (UNDEF: 2)
    1628:	0680186c 	streq	r1, [r0], ip, ror #16
    162c:	b5010000 	strlt	r0, [r1, #-0]
    1630:	00ce0c04 	sbceq	r0, lr, r4, lsl #24
    1634:	91020000 	mrsls	r0, (UNDEF: 2)
    1638:	811d0074 	tsthi	sp, r4, ror r0
    163c:	01000007 	tsteq	r0, r7
    1640:	9b09049a 	blls	2428b0 <startup-0x1fdbd750>
    1644:	b4000000 	strlt	r0, [r0], #-0
    1648:	1c20000a 	stcne	0, cr0, [r0], #-40	; 0xffffffd8
    164c:	01000000 	mrseq	r0, (UNDEF: 0)
    1650:	071b159c 			; <UNDEFINED> instruction: 0x071b159c
    1654:	7d010000 	stcvc	0, cr0, [r1, #-0]
    1658:	0a800604 	beq	fe002e70 <APBAHBPrescTable+0xde000e58>
    165c:	00342000 	eorseq	r2, r4, r0
    1660:	9c010000 	stcls	0, cr0, [r1], {-0}
    1664:	00000be9 	andeq	r0, r0, r9, ror #23
    1668:	000b4616 	andeq	r4, fp, r6, lsl r6
    166c:	047d0100 	ldrbteq	r0, [sp], #-256	; 0xffffff00
    1670:	0000ce20 	andeq	ip, r0, r0, lsr #28
    1674:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1678:	00068018 	andeq	r8, r6, r8, lsl r0
    167c:	047f0100 	ldrbteq	r0, [pc], #-256	; 1684 <startup-0x1fffe97c>
    1680:	0000ce0c 	andeq	ip, r0, ip, lsl #28
    1684:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1688:	0c761500 	cfldr64eq	mvdx1, [r6], #-0
    168c:	b5010000 	strlt	r0, [r1, #-0]
    1690:	0a440603 	beq	1102ea4 <startup-0x1eefd15c>
    1694:	003c2000 	eorseq	r2, ip, r0
    1698:	9c010000 	stcls	0, cr0, [r1], {-0}
    169c:	00000c31 	andeq	r0, r0, r1, lsr ip
    16a0:	0009f216 	andeq	pc, r9, r6, lsl r2	; <UNPREDICTABLE>
    16a4:	03b50100 			; <UNDEFINED> instruction: 0x03b50100
    16a8:	0000ce1e 	andeq	ip, r0, lr, lsl lr
    16ac:	6c910200 	lfmvs	f0, 4, [r1], {0}
    16b0:	0008ca16 	andeq	ip, r8, r6, lsl sl
    16b4:	03b50100 			; <UNDEFINED> instruction: 0x03b50100
    16b8:	0000ce37 	andeq	ip, r0, r7, lsr lr
    16bc:	68910200 	ldmvs	r1, {r9}
    16c0:	00068018 	andeq	r8, r6, r8, lsl r0
    16c4:	03b70100 			; <UNDEFINED> instruction: 0x03b70100
    16c8:	0000ce0c 	andeq	ip, r0, ip, lsl #28
    16cc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    16d0:	07d01500 	ldrbeq	r1, [r0, r0, lsl #10]
    16d4:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
    16d8:	0a040603 	beq	102eec <startup-0x1fefd114>
    16dc:	00402000 	subeq	r2, r0, r0
    16e0:	9c010000 	stcls	0, cr0, [r1], {-0}
    16e4:	00000c79 	andeq	r0, r0, r9, ror ip
    16e8:	0005a616 	andeq	sl, r5, r6, lsl r6
    16ec:	03880100 	orreq	r0, r8, #0, 2
    16f0:	0000ce1e 	andeq	ip, r0, lr, lsl lr
    16f4:	6c910200 	lfmvs	f0, 4, [r1], {0}
    16f8:	0009cf16 	andeq	ip, r9, r6, lsl pc
    16fc:	03880100 	orreq	r0, r8, #0, 2
    1700:	0000ce37 	andeq	ip, r0, r7, lsr lr
    1704:	68910200 	ldmvs	r1, {r9}
    1708:	00068018 	andeq	r8, r6, r8, lsl r0
    170c:	038a0100 	orreq	r0, sl, #0, 2
    1710:	0000ce0c 	andeq	ip, r0, ip, lsl #28
    1714:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1718:	09041500 	stmdbeq	r4, {r8, sl, ip}
    171c:	6f010000 	svcvs	0x00010000
    1720:	09e40603 	stmibeq	r4!, {r0, r1, r9, sl}^
    1724:	00202000 	eoreq	r2, r0, r0
    1728:	9c010000 	stcls	0, cr0, [r1], {-0}
    172c:	00000ca1 	andeq	r0, r0, r1, lsr #25
    1730:	00074316 	andeq	r4, r7, r6, lsl r3
    1734:	036f0100 	cmneq	pc, #0, 2
    1738:	00015a31 	andeq	r5, r1, r1, lsr sl
    173c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    1740:	05551500 	ldrbeq	r1, [r5, #-1280]	; 0xfffffb00
    1744:	5d010000 	stcpl	0, cr0, [r1, #-0]
    1748:	09c40603 	stmibeq	r4, {r0, r1, r9, sl}^
    174c:	00202000 	eoreq	r2, r0, r0
    1750:	9c010000 	stcls	0, cr0, [r1], {-0}
    1754:	00000cc9 	andeq	r0, r0, r9, asr #25
    1758:	00074316 	andeq	r4, r7, r6, lsl r3
    175c:	035d0100 	cmpeq	sp, #0, 2
    1760:	00015a24 	andeq	r5, r1, r4, lsr #20
    1764:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    1768:	092e1500 	stmdbeq	lr!, {r8, sl, ip}
    176c:	49010000 	stmdbmi	r1, {}	; <UNPREDICTABLE>
    1770:	09940603 	ldmibeq	r4, {r0, r1, r9, sl}
    1774:	00302000 	eorseq	r2, r0, r0
    1778:	9c010000 	stcls	0, cr0, [r1], {-0}
    177c:	00000d11 	andeq	r0, r0, r1, lsl sp
    1780:	000a9a16 	andeq	r9, sl, r6, lsl sl
    1784:	03490100 	movteq	r0, #37120	; 0x9100
    1788:	0000ce20 	andeq	ip, r0, r0, lsr #28
    178c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1790:	000aa216 	andeq	sl, sl, r6, lsl r2
    1794:	03490100 	movteq	r0, #37120	; 0x9100
    1798:	0000ce32 	andeq	ip, r0, r2, lsr lr
    179c:	70910200 	addsvc	r0, r1, r0, lsl #4
    17a0:	000aaa16 	andeq	sl, sl, r6, lsl sl
    17a4:	03490100 	movteq	r0, #37120	; 0x9100
    17a8:	0000ce44 	andeq	ip, r0, r4, asr #28
    17ac:	6c910200 	lfmvs	f0, 4, [r1], {0}
    17b0:	07ea1500 	strbeq	r1, [sl, r0, lsl #10]!
    17b4:	dc010000 	stcle	0, cr0, [r1], {-0}
    17b8:	09740602 	ldmdbeq	r4!, {r1, r9, sl}^
    17bc:	00202000 	eoreq	r2, r0, r0
    17c0:	9c010000 	stcls	0, cr0, [r1], {-0}
    17c4:	00000d39 	andeq	r0, r0, r9, lsr sp
    17c8:	00074316 	andeq	r4, r7, r6, lsl r3
    17cc:	02dc0100 	sbcseq	r0, ip, #0, 2
    17d0:	00015a24 	andeq	r5, r1, r4, lsr #20
    17d4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    17d8:	08861500 	stmeq	r6, {r8, sl, ip}
    17dc:	51010000 	mrspl	r0, (UNDEF: 1)
    17e0:	094c0602 	stmdbeq	ip, {r1, r9, sl}^
    17e4:	00282000 	eoreq	r2, r8, r0
    17e8:	9c010000 	stcls	0, cr0, [r1], {-0}
    17ec:	00000d71 	andeq	r0, r0, r1, ror sp
    17f0:	000ba816 	andeq	sl, fp, r6, lsl r8
    17f4:	02510100 	subseq	r0, r1, #0, 2
    17f8:	0000ce20 	andeq	ip, r0, r0, lsr #28
    17fc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1800:	000bed16 	andeq	lr, fp, r6, lsl sp
    1804:	02510100 	subseq	r0, r1, #0, 2
    1808:	0000ce32 	andeq	ip, r0, r2, lsr lr
    180c:	70910200 	addsvc	r0, r1, r0, lsl #4
    1810:	0ac61500 	beq	ff186c18 <APBAHBPrescTable+0xdf184c00>
    1814:	33010000 	movwcc	r0, #4096	; 0x1000
    1818:	092c0602 	stmdbeq	ip!, {r1, r9, sl}
    181c:	00202000 	eoreq	r2, r0, r0
    1820:	9c010000 	stcls	0, cr0, [r1], {-0}
    1824:	00000d99 	muleq	r0, r9, sp
    1828:	00074316 	andeq	r4, r7, r6, lsl r3
    182c:	02330100 	eorseq	r0, r3, #0, 2
    1830:	00015a21 	andeq	r5, r1, r1, lsr #20
    1834:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    1838:	0ce31500 	cfstr64eq	mvdx1, [r3]
    183c:	1b010000 	blne	41844 <startup-0x1ffbe7bc>
    1840:	08f00602 	ldmeq	r0!, {r1, r9, sl}^
    1844:	003c2000 	eorseq	r2, ip, r0
    1848:	9c010000 	stcls	0, cr0, [r1], {-0}
    184c:	00000e01 	andeq	r0, r0, r1, lsl #28
    1850:	00077316 	andeq	r7, r7, r6, lsl r3
    1854:	021b0100 	andseq	r0, fp, #0, 2
    1858:	0000ce1d 	andeq	ip, r0, sp, lsl lr
    185c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1860:	00061216 	andeq	r1, r6, r6, lsl r2
    1864:	021b0100 	andseq	r0, fp, #0, 2
    1868:	0000ce35 	andeq	ip, r0, r5, lsr lr
    186c:	70910200 	addsvc	r0, r1, r0, lsl #4
    1870:	0005cc16 	andeq	ip, r5, r6, lsl ip
    1874:	021b0100 	andseq	r0, fp, #0, 2
    1878:	0000ce44 	andeq	ip, r0, r4, asr #28
    187c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1880:	0005eb16 	andeq	lr, r5, r6, lsl fp
    1884:	021b0100 	andseq	r0, fp, #0, 2
    1888:	0000ce53 	andeq	ip, r0, r3, asr lr
    188c:	68910200 	ldmvs	r1, {r9}
    1890:	0005f016 	andeq	pc, r5, r6, lsl r0	; <UNPREDICTABLE>
    1894:	021b0100 	andseq	r0, fp, #0, 2
    1898:	0000ce62 	andeq	ip, r0, r2, ror #28
    189c:	00910200 	addseq	r0, r1, r0, lsl #4
    18a0:	0c9e1500 	cfldr32eq	mvfx1, [lr], {0}
    18a4:	b8010000 	stmdalt	r1, {}	; <UNPREDICTABLE>
    18a8:	08d00601 	ldmeq	r0, {r0, r9, sl}^
    18ac:	00202000 	eoreq	r2, r0, r0
    18b0:	9c010000 	stcls	0, cr0, [r1], {-0}
    18b4:	00000e29 	andeq	r0, r0, r9, lsr #28
    18b8:	00074316 	andeq	r4, r7, r6, lsl r3
    18bc:	01b80100 			; <UNDEFINED> instruction: 0x01b80100
    18c0:	00015a21 	andeq	r5, r1, r1, lsr #20
    18c4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    18c8:	072c1500 	streq	r1, [ip, -r0, lsl #10]!
    18cc:	90010000 	andls	r0, r1, r0
    18d0:	088c0601 	stmeq	ip, {r0, r9, sl}
    18d4:	00442000 	subeq	r2, r4, r0
    18d8:	9c010000 	stcls	0, cr0, [r1], {-0}
    18dc:	00000e51 	andeq	r0, r0, r1, asr lr
    18e0:	00054316 	andeq	r4, r5, r6, lsl r3
    18e4:	01900100 	orrseq	r0, r0, r0, lsl #2
    18e8:	00009b1c 	andeq	r9, r0, ip, lsl fp
    18ec:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    18f0:	08971500 	ldmeq	r7, {r8, sl, ip}
    18f4:	77010000 	strvc	r0, [r1, -r0]
    18f8:	086c0601 	stmdaeq	ip!, {r0, r9, sl}^
    18fc:	00202000 	eoreq	r2, r0, r0
    1900:	9c010000 	stcls	0, cr0, [r1], {-0}
    1904:	00000e79 	andeq	r0, r0, r9, ror lr
    1908:	00074316 	andeq	r4, r7, r6, lsl r3
    190c:	01770100 	cmneq	r7, r0, lsl #2
    1910:	00015a21 	andeq	r5, r1, r1, lsr #20
    1914:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    1918:	0b801500 	bleq	fe006d20 <APBAHBPrescTable+0xde004d08>
    191c:	53010000 	movwpl	r0, #4096	; 0x1000
    1920:	082e0601 	stmdaeq	lr!, {r0, r9, sl}
    1924:	003e2000 	eorseq	r2, lr, r0
    1928:	9c010000 	stcls	0, cr0, [r1], {-0}
    192c:	00000eb1 			; <UNDEFINED> instruction: 0x00000eb1
    1930:	000b8a16 	andeq	r8, fp, r6, lsl sl
    1934:	01530100 	cmpeq	r3, r0, lsl #2
    1938:	00009b2c 	andeq	r9, r0, ip, lsr #22
    193c:	6f910200 	svcvs	0x00910200
    1940:	00068018 	andeq	r8, r6, r8, lsl r0
    1944:	01550100 	cmpeq	r5, r0, lsl #2
    1948:	0000ce0c 	andeq	ip, r0, ip, lsl #28
    194c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1950:	07951e00 	ldreq	r1, [r5, r0, lsl #28]
    1954:	34010000 	strcc	r0, [r1], #-0
    1958:	01830d01 	orreq	r0, r3, r1, lsl #26
    195c:	07d00000 	ldrbeq	r0, [r0, r0]
    1960:	005e2000 	subseq	r2, lr, r0
    1964:	9c010000 	stcls	0, cr0, [r1], {-0}
    1968:	00000efd 	strdeq	r0, [r0], -sp
    196c:	000c3218 	andeq	r3, ip, r8, lsl r2
    1970:	01360100 	teqeq	r6, r0, lsl #2
    1974:	0000da11 	andeq	sp, r0, r1, lsl sl
    1978:	68910200 	ldmvs	r1, {r9}
    197c:	000ba118 	andeq	sl, fp, r8, lsl r1
    1980:	01370100 	teqeq	r7, r0, lsl #2
    1984:	0001830f 	andeq	r8, r1, pc, lsl #6
    1988:	6f910200 	svcvs	0x00910200
    198c:	000b9e18 	andeq	r9, fp, r8, lsl lr
    1990:	01380100 	teqeq	r8, r0, lsl #2
    1994:	0001240e 	andeq	r2, r1, lr, lsl #8
    1998:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
    199c:	0a751500 	beq	1d46da4 <startup-0x1e2b925c>
    19a0:	1c010000 	stcne	0, cr0, [r1], {-0}
    19a4:	07a80601 	streq	r0, [r8, r1, lsl #12]!
    19a8:	00282000 	eoreq	r2, r8, r0
    19ac:	9c010000 	stcls	0, cr0, [r1], {-0}
    19b0:	00000f25 	andeq	r0, r0, r5, lsr #30
    19b4:	000b5716 	andeq	r5, fp, r6, lsl r7
    19b8:	011c0100 	tsteq	ip, r0, lsl #2
    19bc:	00009b1c 	andeq	r9, r0, ip, lsl fp
    19c0:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    19c4:	0be21f00 	bleq	ff8895cc <APBAHBPrescTable+0xdf8875b4>
    19c8:	e1010000 	mrs	r0, (UNDEF: 1)
    19cc:	00073806 	andeq	r3, r7, r6, lsl #16
    19d0:	00007020 	andeq	r7, r0, r0, lsr #32
    19d4:	009c0100 	addseq	r0, ip, r0, lsl #2
    19d8:	0000016c 	andeq	r0, r0, ip, ror #2
    19dc:	05d20004 	ldrbeq	r0, [r2, #4]
    19e0:	01040000 	mrseq	r0, (UNDEF: 4)
    19e4:	00000118 	andeq	r0, r0, r8, lsl r1
    19e8:	000dab0c 	andeq	sl, sp, ip, lsl #22
    19ec:	0001df00 	andeq	sp, r1, r0, lsl #30
    19f0:	00143400 	andseq	r3, r4, r0, lsl #8
    19f4:	0000ba20 	andeq	fp, r0, r0, lsr #20
    19f8:	000ea700 	andeq	sl, lr, r0, lsl #14
    19fc:	0dd40200 	lfmeq	f0, 2, [r4]
    1a00:	011a0000 	tsteq	sl, r0
    1a04:	00da1003 	sbcseq	r1, sl, r3
    1a08:	73030000 	movwvc	r0, #12288	; 0x3000
    1a0c:	04010072 	streq	r0, [r1], #-114	; 0xffffff8e
    1a10:	0000e11d 	andeq	lr, r0, sp, lsl r1
    1a14:	83040000 	movwhi	r0, #16384	; 0x4000
    1a18:	0100000d 	tsteq	r0, sp
    1a1c:	00e11d05 	rsceq	r1, r1, r5, lsl #26
    1a20:	03020000 	movweq	r0, #8192	; 0x2000
    1a24:	01007264 	tsteq	r0, r4, ror #4
    1a28:	00e11d06 	rsceq	r1, r1, r6, lsl #26
    1a2c:	04040000 	streq	r0, [r4], #-0
    1a30:	00000d8b 	andeq	r0, r0, fp, lsl #27
    1a34:	e11d0701 	tst	sp, r1, lsl #14
    1a38:	06000000 	streq	r0, [r0], -r0
    1a3c:	72726203 	rsbsvc	r6, r2, #805306368	; 0x30000000
    1a40:	1d080100 	stfnes	f0, [r8, #-0]
    1a44:	000000e1 	andeq	r0, r0, r1, ror #1
    1a48:	0d930408 	cfldrseq	mvf0, [r3, #32]
    1a4c:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    1a50:	0000e11d 	andeq	lr, r0, sp, lsl r1
    1a54:	63030a00 	movwvs	r0, #14848	; 0x3a00
    1a58:	01003172 	tsteq	r0, r2, ror r1
    1a5c:	00e11d0a 	rsceq	r1, r1, sl, lsl #26
    1a60:	040c0000 	streq	r0, [ip], #-0
    1a64:	00000d9b 	muleq	r0, fp, sp
    1a68:	e11d0b01 	tst	sp, r1, lsl #22
    1a6c:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    1a70:	32726303 	rsbscc	r6, r2, #201326592	; 0xc000000
    1a74:	1d0c0100 	stfnes	f0, [ip, #-0]
    1a78:	000000e1 	andeq	r0, r0, r1, ror #1
    1a7c:	0da30410 	cfstrseq	mvf0, [r3, #64]!	; 0x40
    1a80:	0d010000 	stceq	0, cr0, [r1, #-0]
    1a84:	0000e11d 	andeq	lr, r0, sp, lsl r1
    1a88:	63031200 	movwvs	r1, #12800	; 0x3200
    1a8c:	01003372 	tsteq	r0, r2, ror r3
    1a90:	00e11d0e 	rsceq	r1, r1, lr, lsl #26
    1a94:	04140000 	ldreq	r0, [r4], #-0
    1a98:	00000d63 	andeq	r0, r0, r3, ror #26
    1a9c:	e11d0f01 	tst	sp, r1, lsl #30
    1aa0:	16000000 	strne	r0, [r0], -r0
    1aa4:	000d7e04 	andeq	r7, sp, r4, lsl #28
    1aa8:	1d100100 	ldfnes	f0, [r0, #-0]
    1aac:	000000e1 	andeq	r0, r0, r1, ror #1
    1ab0:	02050018 	andeq	r0, r5, #24
    1ab4:	0001cc07 	andeq	ip, r1, r7, lsl #24
    1ab8:	00da0600 	sbcseq	r0, sl, r0, lsl #12
    1abc:	d4070000 	strle	r0, [r7], #-0
    1ac0:	0100000d 	tsteq	r0, sp
    1ac4:	00250311 	eoreq	r0, r5, r1, lsl r3
    1ac8:	b5080000 	strlt	r0, [r8, #-0]
    1acc:	01000001 	tsteq	r0, r1
    1ad0:	14c4062b 	strbne	r0, [r4], #1579	; 0x62b
    1ad4:	002a2000 	eoreq	r2, sl, r0
    1ad8:	9c010000 	stcls	0, cr0, [r1], {-0}
    1adc:	00000116 	andeq	r0, r0, r6, lsl r1
    1ae0:	01007309 	tsteq	r0, r9, lsl #6
    1ae4:	0116122b 	tsteq	r6, fp, lsr #4
    1ae8:	91020000 	mrsls	r0, (UNDEF: 2)
    1aec:	040a0074 	streq	r0, [sl], #-116	; 0xffffff8c
    1af0:	0000011c 	andeq	r0, r0, ip, lsl r1
    1af4:	13080105 	movwne	r0, #33029	; 0x8105
    1af8:	0b000001 	bleq	1b04 <startup-0x1fffe4fc>
    1afc:	00000d6b 	andeq	r0, r0, fp, ror #26
    1b00:	1c062501 	cfstr32ne	mvfx2, [r6], {1}
    1b04:	9c000001 	stcls	0, cr0, [r0], {1}
    1b08:	28200014 	stmdacs	r0!, {r2, r4}
    1b0c:	01000000 	mrseq	r0, (UNDEF: 0)
    1b10:	0d740b9c 	vldmdbeq	r4!, {d16-d29}
    1b14:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
    1b18:	00011c06 	andeq	r1, r1, r6, lsl #24
    1b1c:	00147400 	andseq	r7, r4, r0, lsl #8
    1b20:	00002820 	andeq	r2, r0, r0, lsr #16
    1b24:	0c9c0100 	ldfeqs	f0, [ip], {0}
    1b28:	00000d5a 	andeq	r0, r0, sl, asr sp
    1b2c:	34061501 	strcc	r1, [r6], #-1281	; 0xfffffaff
    1b30:	40200014 	eormi	r0, r0, r4, lsl r0
    1b34:	01000000 	mrseq	r0, (UNDEF: 0)
    1b38:	0063099c 	mlseq	r3, ip, r9, r0
    1b3c:	1c151501 	cfldr32ne	mvfx1, [r5], {1}
    1b40:	02000001 	andeq	r0, r0, #1
    1b44:	00007791 	muleq	r0, r1, r7
    1b48:	00000a64 	andeq	r0, r0, r4, ror #20
    1b4c:	06a60004 	strteq	r0, [r6], r4
    1b50:	01040000 	mrseq	r0, (UNDEF: 4)
    1b54:	00000118 	andeq	r0, r0, r8, lsl r1
    1b58:	0011300c 	andseq	r3, r1, ip
    1b5c:	0001df00 	andeq	sp, r1, r0, lsl #30
    1b60:	0014f000 	andseq	pc, r4, r0
    1b64:	0009fc20 	andeq	pc, r9, r0, lsr #24
    1b68:	000f7a00 	andeq	r7, pc, r0, lsl #20
    1b6c:	06010200 	streq	r0, [r1], -r0, lsl #4
    1b70:	0000010c 	andeq	r0, r0, ip, lsl #2
    1b74:	00040103 	andeq	r0, r4, r3, lsl #2
    1b78:	182b0200 	stmdane	fp!, {r9}
    1b7c:	00000038 	andeq	r0, r0, r8, lsr r0
    1b80:	0a080102 	beq	201f90 <startup-0x1fdfe070>
    1b84:	02000001 	andeq	r0, r0, #1
    1b88:	00140502 	andseq	r0, r4, r2, lsl #10
    1b8c:	3c030000 	stccc	0, cr0, [r3], {-0}
    1b90:	02000000 	andeq	r0, r0, #0
    1b94:	00521939 	subseq	r1, r2, r9, lsr r9
    1b98:	02020000 	andeq	r0, r2, #0
    1b9c:	0001cc07 	andeq	ip, r1, r7, lsl #24
    1ba0:	03010300 	movweq	r0, #4864	; 0x1300
    1ba4:	4d020000 	stcmi	0, cr0, [r2, #-0]
    1ba8:	00006518 	andeq	r6, r0, r8, lsl r5
    1bac:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    1bb0:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    1bb4:	00003103 	andeq	r3, r0, r3, lsl #2
    1bb8:	194f0200 	stmdbne	pc, {r9}^	; <UNPREDICTABLE>
    1bbc:	00000078 	andeq	r0, r0, r8, ror r0
    1bc0:	a3070402 	movwge	r0, #29698	; 0x7402
    1bc4:	02000001 	andeq	r0, r0, #1
    1bc8:	00ab0508 	adceq	r0, fp, r8, lsl #10
    1bcc:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    1bd0:	00019e07 	andeq	r9, r1, r7, lsl #28
    1bd4:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    1bd8:	00746e69 	rsbseq	r6, r4, r9, ror #28
    1bdc:	a8070402 	stmdage	r7, {r1, sl}
    1be0:	03000001 	movweq	r0, #1
    1be4:	00000403 	andeq	r0, r0, r3, lsl #8
    1be8:	2c131803 	ldccs	8, cr1, [r3], {3}
    1bec:	03000000 	movweq	r0, #0
    1bf0:	0000003e 	andeq	r0, r0, lr, lsr r0
    1bf4:	46142403 	ldrmi	r2, [r4], -r3, lsl #8
    1bf8:	05000000 	streq	r0, [r0, #-0]
    1bfc:	000000a7 	andeq	r0, r0, r7, lsr #1
    1c00:	00030303 	andeq	r0, r3, r3, lsl #6
    1c04:	132c0300 			; <UNDEFINED> instruction: 0x132c0300
    1c08:	00000059 	andeq	r0, r0, r9, asr r0
    1c0c:	0000b805 	andeq	fp, r0, r5, lsl #16
    1c10:	00330300 	eorseq	r0, r3, r0, lsl #6
    1c14:	30030000 	andcc	r0, r3, r0
    1c18:	00006c14 	andeq	r6, r0, r4, lsl ip
    1c1c:	034c0600 	movteq	r0, #50688	; 0xc600
    1c20:	fa040000 	blx	101c28 <startup-0x1fefe3d8>
    1c24:	00c41906 	sbceq	r1, r4, r6, lsl #18
    1c28:	7b070000 	blvc	1c1c30 <startup-0x1fe3e3d0>
    1c2c:	05000002 	streq	r0, [r0, #-2]
    1c30:	00c9113b 	sbceq	r1, r9, fp, lsr r1
    1c34:	07080000 	streq	r0, [r8, -r0]
    1c38:	00003801 	andeq	r3, r0, r1, lsl #16
    1c3c:	035d0600 	cmpeq	sp, #0, 12
    1c40:	00010a0e 	andeq	r0, r1, lr, lsl #20
    1c44:	03bb0900 			; <UNDEFINED> instruction: 0x03bb0900
    1c48:	0a000000 	beq	1c50 <startup-0x1fffe3b0>
    1c4c:	00544553 	subseq	r4, r4, r3, asr r5
    1c50:	6a0b0001 	bvs	2c1c5c <startup-0x1fd3e3a4>
    1c54:	0600000a 	streq	r0, [r0], -sl
    1c58:	ee28035d 	mcr	3, 1, r0, cr8, cr13, {2}
    1c5c:	0b000000 	bleq	1c64 <startup-0x1fffe39c>
    1c60:	00000bfc 	strdeq	r0, [r0], -ip
    1c64:	34035d06 	strcc	r5, [r3], #-3334	; 0xfffff2fa
    1c68:	000000ee 	andeq	r0, r0, lr, ror #1
    1c6c:	38010708 	stmdacc	r1, {r3, r8, r9, sl}
    1c70:	06000000 	streq	r0, [r0], -r0
    1c74:	400e035f 	andmi	r0, lr, pc, asr r3
    1c78:	09000001 	stmdbeq	r0, {r0}
    1c7c:	00000239 	andeq	r0, r0, r9, lsr r2
    1c80:	005f0900 	subseq	r0, pc, r0, lsl #18
    1c84:	00010000 	andeq	r0, r1, r0
    1c88:	0009630b 	andeq	r6, r9, fp, lsl #6
    1c8c:	035f0600 	cmpeq	pc, #0, 12
    1c90:	0001242f 	andeq	r2, r1, pc, lsr #8
    1c94:	061c0c00 	ldreq	r0, [ip], -r0, lsl #24
    1c98:	1a090773 	bne	243a6c <startup-0x1fdbc594>
    1c9c:	0d000002 	stceq	0, cr0, [r0, #-8]
    1ca0:	06005253 			; <UNDEFINED> instruction: 0x06005253
    1ca4:	b3110775 	tstlt	r1, #30670848	; 0x1d40000
    1ca8:	00000000 	andeq	r0, r0, r0
    1cac:	000a1d0e 	andeq	r1, sl, lr, lsl #26
    1cb0:	07760600 	ldrbeq	r0, [r6, -r0, lsl #12]!
    1cb4:	0000a711 	andeq	sl, r0, r1, lsl r7
    1cb8:	440d0200 	strmi	r0, [sp], #-512	; 0xfffffe00
    1cbc:	77060052 	smlsdvc	r6, r2, r0, r0
    1cc0:	00b31107 	adcseq	r1, r3, r7, lsl #2
    1cc4:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
    1cc8:	00000a27 	andeq	r0, r0, r7, lsr #20
    1ccc:	11077806 	tstne	r7, r6, lsl #16
    1cd0:	000000a7 	andeq	r0, r0, r7, lsr #1
    1cd4:	52420d06 	subpl	r0, r2, #384	; 0x180
    1cd8:	79060052 	stmdbvc	r6, {r1, r4, r6}
    1cdc:	00b31107 	adcseq	r1, r3, r7, lsl #2
    1ce0:	0e080000 	cdpeq	0, 0, cr0, cr8, cr0, {0}
    1ce4:	00000a31 	andeq	r0, r0, r1, lsr sl
    1ce8:	11077a06 	tstne	r7, r6, lsl #20
    1cec:	000000a7 	andeq	r0, r0, r7, lsr #1
    1cf0:	52430d0a 	subpl	r0, r3, #640	; 0x280
    1cf4:	7b060031 	blvc	181dc0 <startup-0x1fe7e240>
    1cf8:	00b31107 	adcseq	r1, r3, r7, lsl #2
    1cfc:	0e0c0000 	cdpeq	0, 0, cr0, cr12, cr0, {0}
    1d00:	00000a3b 	andeq	r0, r0, fp, lsr sl
    1d04:	11077c06 	tstne	r7, r6, lsl #24
    1d08:	000000a7 	andeq	r0, r0, r7, lsr #1
    1d0c:	52430d0e 	subpl	r0, r3, #896	; 0x380
    1d10:	7d060032 	stcvc	0, cr0, [r6, #-200]	; 0xffffff38
    1d14:	00b31107 	adcseq	r1, r3, r7, lsl #2
    1d18:	0e100000 	cdpeq	0, 1, cr0, cr0, cr0, {0}
    1d1c:	00000a45 	andeq	r0, r0, r5, asr #20
    1d20:	11077e06 	tstne	r7, r6, lsl #28
    1d24:	000000a7 	andeq	r0, r0, r7, lsr #1
    1d28:	52430d12 	subpl	r0, r3, #1152	; 0x480
    1d2c:	7f060033 	svcvc	0x00060033
    1d30:	00b31107 	adcseq	r1, r3, r7, lsl #2
    1d34:	0e140000 	cdpeq	0, 1, cr0, cr4, cr0, {0}
    1d38:	00000a4f 	andeq	r0, r0, pc, asr #20
    1d3c:	11078006 	tstne	r7, r6
    1d40:	000000a7 	andeq	r0, r0, r7, lsr #1
    1d44:	0df40e16 	ldcleq	14, cr0, [r4, #88]!	; 0x58
    1d48:	81060000 	mrshi	r0, (UNDEF: 6)
    1d4c:	00b31107 	adcseq	r1, r3, r7, lsl #2
    1d50:	0e180000 	cdpeq	0, 1, cr0, cr8, cr0, {0}
    1d54:	00000a59 	andeq	r0, r0, r9, asr sl
    1d58:	11078206 	tstne	r7, r6, lsl #4
    1d5c:	000000a7 	andeq	r0, r0, r7, lsr #1
    1d60:	600b001a 	andvs	r0, fp, sl, lsl r0
    1d64:	0600000e 	streq	r0, [r0], -lr
    1d68:	4d030783 	stcmi	7, cr0, [r3, #-524]	; 0xfffffdf4
    1d6c:	0f000001 	svceq	0x00000001
    1d70:	09360710 	ldmdbeq	r6!, {r4, r8, r9, sl}
    1d74:	0000027f 	andeq	r0, r0, pc, ror r2
    1d78:	000ee610 	andeq	lr, lr, r0, lsl r6
    1d7c:	0c380700 	ldceq	7, cr0, [r8], #-0
    1d80:	000000c9 	andeq	r0, r0, r9, asr #1
    1d84:	0eba1000 	cdpeq	0, 11, cr1, cr10, cr0, {0}
    1d88:	3e070000 	cdpcc	0, 0, cr0, cr7, cr0, {0}
    1d8c:	0000a70c 	andeq	sl, r0, ip, lsl #14
    1d90:	6e100400 	cfmulsvs	mvf0, mvf0, mvf0
    1d94:	0700000e 	streq	r0, [r0, -lr]
    1d98:	00a70c41 	adceq	r0, r7, r1, asr #24
    1d9c:	10060000 	andne	r0, r6, r0
    1da0:	00000f84 	andeq	r0, r0, r4, lsl #31
    1da4:	a70c4407 	strge	r4, [ip, -r7, lsl #8]
    1da8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1dac:	00105810 	andseq	r5, r0, r0, lsl r8
    1db0:	0c4b0700 	mcrreq	7, 0, r0, fp, cr0
    1db4:	000000a7 	andeq	r0, r0, r7, lsr #1
    1db8:	102b100a 	eorne	r1, fp, sl
    1dbc:	4e070000 	cdpmi	0, 0, cr0, cr7, cr0, {0}
    1dc0:	0000a70c 	andeq	sl, r0, ip, lsl #14
    1dc4:	03000c00 	movweq	r0, #3072	; 0xc00
    1dc8:	00000ff6 	strdeq	r0, [r0], -r6
    1dcc:	27035107 	strcs	r5, [r3, -r7, lsl #2]
    1dd0:	0f000002 	svceq	0x00000002
    1dd4:	09570708 	ldmdbeq	r7, {r3, r8, r9, sl}^
    1dd8:	000002c9 	andeq	r0, r0, r9, asr #5
    1ddc:	0010bf10 	andseq	fp, r0, r0, lsl pc
    1de0:	0c5a0700 	mrrceq	7, 0, r0, sl, cr0
    1de4:	000000a7 	andeq	r0, r0, r7, lsr #1
    1de8:	11f71000 	mvnsne	r1, r0
    1dec:	5d070000 	stcpl	0, cr0, [r7, #-0]
    1df0:	0000a70c 	andeq	sl, r0, ip, lsl #14
    1df4:	e9100200 	ldmdb	r0, {r9}
    1df8:	0700000d 	streq	r0, [r0, -sp]
    1dfc:	00a70c60 	adceq	r0, r7, r0, ror #24
    1e00:	10040000 	andne	r0, r4, r0
    1e04:	00000ed8 	ldrdeq	r0, [r0], -r8
    1e08:	a70c6307 	strge	r6, [ip, -r7, lsl #6]
    1e0c:	06000000 	streq	r0, [r0], -r0
    1e10:	0e7d0300 	cdpeq	3, 7, cr0, cr13, cr0, {0}
    1e14:	66070000 	strvs	r0, [r7], -r0
    1e18:	00028b03 	andeq	r8, r2, r3, lsl #22
    1e1c:	08100f00 	ldmdaeq	r0, {r8, r9, sl, fp}
    1e20:	03130930 	tsteq	r3, #48, 18	; 0xc0000
    1e24:	8b100000 	blhi	401e2c <startup-0x1fbfe1d4>
    1e28:	08000005 	stmdaeq	r0, {r0, r2}
    1e2c:	00c90c32 	sbceq	r0, r9, r2, lsr ip
    1e30:	10000000 	andne	r0, r0, r0
    1e34:	000007ab 	andeq	r0, r0, fp, lsr #15
    1e38:	c90c3308 	stmdbgt	ip, {r3, r8, r9, ip, sp}
    1e3c:	04000000 	streq	r0, [r0], #-0
    1e40:	000b5f10 	andeq	r5, fp, r0, lsl pc
    1e44:	0c340800 	ldceq	8, cr0, [r4], #-0
    1e48:	000000c9 	andeq	r0, r0, r9, asr #1
    1e4c:	06871008 	streq	r1, [r7], r8
    1e50:	35080000 	strcc	r0, [r8, #-0]
    1e54:	0000c90c 	andeq	ip, r0, ip, lsl #18
    1e58:	03000c00 	movweq	r0, #3072	; 0xc00
    1e5c:	00000cf1 	strdeq	r0, [r0], -r1
    1e60:	d5023608 	strle	r3, [r2, #-1544]	; 0xfffff9f8
    1e64:	11000002 	tstne	r0, r2
    1e68:	00000f0d 	andeq	r0, r0, sp, lsl #30
    1e6c:	0605ac01 	streq	sl, [r5], -r1, lsl #24
    1e70:	20001ea4 	andcs	r1, r0, r4, lsr #29
    1e74:	00000048 	andeq	r0, r0, r8, asr #32
    1e78:	03779c01 	cmneq	r7, #256	; 0x100
    1e7c:	24120000 	ldrcs	r0, [r2], #-0
    1e80:	01000010 	tsteq	r0, r0, lsl r0
    1e84:	772d05ac 	strvc	r0, [sp, -ip, lsr #11]!
    1e88:	02000003 	andeq	r0, r0, #3
    1e8c:	16126c91 			; <UNDEFINED> instruction: 0x16126c91
    1e90:	01000011 	tsteq	r0, r1, lsl r0
    1e94:	a73e05ac 	ldrge	r0, [lr, -ip, lsr #11]!
    1e98:	02000000 	andeq	r0, r0, #0
    1e9c:	71136a91 			; <UNDEFINED> instruction: 0x71136a91
    1ea0:	01000010 	tsteq	r0, r0, lsl r0
    1ea4:	a70c05ae 	strge	r0, [ip, -lr, lsr #11]
    1ea8:	02000000 	andeq	r0, r0, #0
    1eac:	02137691 	andseq	r7, r3, #152043520	; 0x9100000
    1eb0:	01000012 	tsteq	r0, r2, lsl r0
    1eb4:	a71b05ae 	ldrge	r0, [fp, -lr, lsr #11]
    1eb8:	02000000 	andeq	r0, r0, #0
    1ebc:	14007491 	strne	r7, [r0], #-1169	; 0xfffffb6f
    1ec0:	00021a04 	andeq	r1, r2, r4, lsl #20
    1ec4:	108f1500 	addne	r1, pc, r0, lsl #10
    1ec8:	62010000 	andvs	r0, r1, #0
    1ecc:	01170a05 	tsteq	r7, r5, lsl #20
    1ed0:	1dda0000 	ldclne	0, cr0, [sl]
    1ed4:	00ca2000 	sbceq	r2, sl, r0
    1ed8:	9c010000 	stcls	0, cr0, [r1], {-0}
    1edc:	000003f9 	strdeq	r0, [r0], -r9
    1ee0:	00102412 	andseq	r2, r0, r2, lsl r4
    1ee4:	05620100 	strbeq	r0, [r2, #-256]!	; 0xffffff00
    1ee8:	0003772b 	andeq	r7, r3, fp, lsr #14
    1eec:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    1ef0:	00111612 	andseq	r1, r1, r2, lsl r6
    1ef4:	05620100 	strbeq	r0, [r2, #-256]!	; 0xffffff00
    1ef8:	0000a73c 	andeq	sl, r0, ip, lsr r7
    1efc:	62910200 	addsvs	r0, r1, #0, 4
    1f00:	00107113 	andseq	r7, r0, r3, lsl r1
    1f04:	05640100 	strbeq	r0, [r4, #-256]!	; 0xffffff00
    1f08:	0000c90c 	andeq	ip, r0, ip, lsl #18
    1f0c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1f10:	00120213 	andseq	r0, r2, r3, lsl r2
    1f14:	05640100 	strbeq	r0, [r4, #-256]!	; 0xffffff00
    1f18:	0000c91b 	andeq	ip, r0, fp, lsl r9
    1f1c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1f20:	00121b13 	andseq	r1, r2, r3, lsl fp
    1f24:	05640100 	strbeq	r0, [r4, #-256]!	; 0xffffff00
    1f28:	0000c92a 	andeq	ip, r0, sl, lsr #18
    1f2c:	68910200 	ldmvs	r1, {r9}
    1f30:	00042113 	andeq	r2, r4, r3, lsl r1
    1f34:	05650100 	strbeq	r0, [r5, #-256]!	; 0xffffff00
    1f38:	0001170c 	andeq	r1, r1, ip, lsl #14
    1f3c:	73910200 	orrsvc	r0, r1, #0, 4
    1f40:	0fb21100 	svceq	0x00b21100
    1f44:	40010000 	andmi	r0, r1, r0
    1f48:	1db80605 	ldcne	6, cr0, [r8, #20]!
    1f4c:	00222000 	eoreq	r2, r2, r0
    1f50:	9c010000 	stcls	0, cr0, [r1], {-0}
    1f54:	00000431 	andeq	r0, r0, r1, lsr r4
    1f58:	00102412 	andseq	r2, r0, r2, lsl r4
    1f5c:	05400100 	strbeq	r0, [r0, #-256]	; 0xffffff00
    1f60:	00037725 	andeq	r7, r3, r5, lsr #14
    1f64:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1f68:	000f5612 	andeq	r5, pc, r2, lsl r6	; <UNPREDICTABLE>
    1f6c:	05400100 	strbeq	r0, [r0, #-256]	; 0xffffff00
    1f70:	0000a736 	andeq	sl, r0, r6, lsr r7
    1f74:	72910200 	addsvc	r0, r1, #0, 4
    1f78:	11021500 	tstne	r2, r0, lsl #10
    1f7c:	0f010000 	svceq	0x00010000
    1f80:	010a0c05 	tsteq	sl, r5, lsl #24
    1f84:	1d720000 	ldclne	0, cr0, [r2, #-0]
    1f88:	00462000 	subeq	r2, r6, r0
    1f8c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1f90:	0000047d 	andeq	r0, r0, sp, ror r4
    1f94:	00102412 	andseq	r2, r0, r2, lsl r4
    1f98:	050f0100 	streq	r0, [pc, #-256]	; 1ea0 <startup-0x1fffe160>
    1f9c:	0003772f 	andeq	r7, r3, pc, lsr #14
    1fa0:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1fa4:	000f5612 	andeq	r5, pc, r2, lsl r6	; <UNPREDICTABLE>
    1fa8:	050f0100 	streq	r0, [pc, #-256]	; 1eb0 <startup-0x1fffe150>
    1fac:	0000a740 	andeq	sl, r0, r0, asr #14
    1fb0:	6a910200 	bvs	fe4427b8 <APBAHBPrescTable+0xde4407a0>
    1fb4:	00042113 	andeq	r2, r4, r3, lsl r1
    1fb8:	05110100 	ldreq	r0, [r1, #-256]	; 0xffffff00
    1fbc:	00010a0e 	andeq	r0, r1, lr, lsl #20
    1fc0:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    1fc4:	10081100 	andne	r1, r8, r0, lsl #2
    1fc8:	cf010000 	svcgt	0x00010000
    1fcc:	1cd80604 	ldclne	6, cr0, [r8], {4}
    1fd0:	009a2000 	addseq	r2, sl, r0
    1fd4:	9c010000 	stcls	0, cr0, [r1], {-0}
    1fd8:	00000505 	andeq	r0, r0, r5, lsl #10
    1fdc:	00102412 	andseq	r2, r0, r2, lsl r4
    1fe0:	04cf0100 	strbeq	r0, [pc], #256	; 1fe8 <startup-0x1fffe018>
    1fe4:	00037724 	andeq	r7, r3, r4, lsr #14
    1fe8:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    1fec:	00111612 	andseq	r1, r1, r2, lsl r6
    1ff0:	04cf0100 	strbeq	r0, [pc], #256	; 1ff8 <startup-0x1fffe008>
    1ff4:	0000a735 	andeq	sl, r0, r5, lsr r7
    1ff8:	62910200 	addsvs	r0, r1, #0, 4
    1ffc:	00074312 	andeq	r4, r7, r2, lsl r3
    2000:	04cf0100 	strbeq	r0, [pc], #256	; 2008 <startup-0x1fffdff8>
    2004:	0001404f 	andeq	r4, r1, pc, asr #32
    2008:	61910200 	orrsvs	r0, r1, r0, lsl #4
    200c:	00121b13 	andseq	r1, r2, r3, lsl fp
    2010:	04d10100 	ldrbeq	r0, [r1], #256	; 0x100
    2014:	0000c90c 	andeq	ip, r0, ip, lsl #18
    2018:	70910200 	addsvc	r0, r1, r0, lsl #4
    201c:	00107213 	andseq	r7, r0, r3, lsl r2
    2020:	04d10100 	ldrbeq	r0, [r1], #256	; 0x100
    2024:	0000c91d 	andeq	ip, r0, sp, lsl r9
    2028:	6c910200 	lfmvs	f0, 4, [r1], {0}
    202c:	00120213 	andseq	r0, r2, r3, lsl r2
    2030:	04d10100 	ldrbeq	r0, [r1], #256	; 0x100
    2034:	0000c92b 	andeq	ip, r0, fp, lsr #18
    2038:	68910200 	ldmvs	r1, {r9}
    203c:	000fa713 	andeq	sl, pc, r3, lsl r7	; <UNPREDICTABLE>
    2040:	04d20100 	ldrbeq	r0, [r2], #256	; 0x100
    2044:	0000c90c 	andeq	ip, r0, ip, lsl #18
    2048:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    204c:	0ecb1100 	poleqe	f1, f3, f0
    2050:	4b010000 	blmi	42058 <startup-0x1ffbdfa8>
    2054:	1c860604 	stcne	6, cr0, [r6], {4}
    2058:	00522000 	subseq	r2, r2, r0
    205c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2060:	0000054d 	andeq	r0, r0, sp, asr #10
    2064:	00102412 	andseq	r2, r0, r2, lsl r4
    2068:	044b0100 	strbeq	r0, [fp], #-256	; 0xffffff00
    206c:	00037722 	andeq	r7, r3, r2, lsr #14
    2070:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2074:	00101712 	andseq	r1, r0, r2, lsl r7
    2078:	044b0100 	strbeq	r0, [fp], #-256	; 0xffffff00
    207c:	0000a733 	andeq	sl, r0, r3, lsr r7
    2080:	72910200 	addsvc	r0, r1, #0, 4
    2084:	00074312 	andeq	r4, r7, r2, lsl r3
    2088:	044b0100 	strbeq	r0, [fp], #-256	; 0xffffff00
    208c:	00014051 	andeq	r4, r1, r1, asr r0
    2090:	71910200 	orrsvc	r0, r1, r0, lsl #4
    2094:	10cb1100 	sbcne	r1, fp, r0, lsl #2
    2098:	1d010000 	stcne	0, cr0, [r1, #-0]
    209c:	1c460604 	mcrrne	6, 0, r0, r6, cr4
    20a0:	00402000 	subeq	r2, r0, r0
    20a4:	9c010000 	stcls	0, cr0, [r1], {-0}
    20a8:	00000585 	andeq	r0, r0, r5, lsl #11
    20ac:	00102412 	andseq	r2, r0, r2, lsl r4
    20b0:	041d0100 	ldreq	r0, [sp], #-256	; 0xffffff00
    20b4:	00037723 	andeq	r7, r3, r3, lsr #14
    20b8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    20bc:	00074312 	andeq	r4, r7, r2, lsl r3
    20c0:	041d0100 	ldreq	r0, [sp], #-256	; 0xffffff00
    20c4:	0001403b 	andeq	r4, r1, fp, lsr r0
    20c8:	73910200 	orrsvc	r0, r1, #0, 4
    20cc:	10ae1100 	adcne	r1, lr, r0, lsl #2
    20d0:	0b010000 	bleq	420d8 <startup-0x1ffbdf28>
    20d4:	1c0e0604 	stcne	6, cr0, [lr], {4}
    20d8:	00382000 	eorseq	r2, r8, r0
    20dc:	9c010000 	stcls	0, cr0, [r1], {-0}
    20e0:	000005bd 			; <UNDEFINED> instruction: 0x000005bd
    20e4:	00102412 	andseq	r2, r0, r2, lsl r4
    20e8:	040b0100 	streq	r0, [fp], #-256	; 0xffffff00
    20ec:	00037726 	andeq	r7, r3, r6, lsr #14
    20f0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    20f4:	000ef512 	andeq	pc, lr, r2, lsl r5	; <UNPREDICTABLE>
    20f8:	040b0100 	streq	r0, [fp], #-256	; 0xffffff00
    20fc:	0000a737 	andeq	sl, r0, r7, lsr r7
    2100:	72910200 	addsvc	r0, r1, #0, 4
    2104:	10eb1100 	rscne	r1, fp, r0, lsl #2
    2108:	c4010000 	strgt	r0, [r1], #-0
    210c:	1bce0603 	blne	ff383920 <APBAHBPrescTable+0xdf381908>
    2110:	00402000 	subeq	r2, r0, r0
    2114:	9c010000 	stcls	0, cr0, [r1], {-0}
    2118:	000005f5 	strdeq	r0, [r0], -r5
    211c:	00102412 	andseq	r2, r0, r2, lsl r4
    2120:	03c40100 	biceq	r0, r4, #0, 2
    2124:	0003772c 	andeq	r7, r3, ip, lsr #14
    2128:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    212c:	00074312 	andeq	r4, r7, r2, lsl r3
    2130:	03c40100 	biceq	r0, r4, #0, 2
    2134:	00014044 	andeq	r4, r1, r4, asr #32
    2138:	73910200 	orrsvc	r0, r1, #0, 4
    213c:	10451100 	subne	r1, r5, r0, lsl #2
    2140:	ab010000 	blge	42148 <startup-0x1ffbdeb8>
    2144:	1b8e0603 	blne	fe383958 <APBAHBPrescTable+0xde381940>
    2148:	00402000 	subeq	r2, r0, r0
    214c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2150:	0000062d 	andeq	r0, r0, sp, lsr #12
    2154:	00102412 	andseq	r2, r0, r2, lsl r4
    2158:	03ab0100 			; <UNDEFINED> instruction: 0x03ab0100
    215c:	00037728 	andeq	r7, r3, r8, lsr #14
    2160:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2164:	00074312 	andeq	r4, r7, r2, lsl r3
    2168:	03ab0100 			; <UNDEFINED> instruction: 0x03ab0100
    216c:	00014040 	andeq	r4, r1, r0, asr #32
    2170:	73910200 	orrsvc	r0, r1, #0, 4
    2174:	0fd31100 	svceq	0x00d31100
    2178:	98010000 	stmdals	r1, {}	; <UNPREDICTABLE>
    217c:	1b500603 	blne	1403990 <startup-0x1ebfc670>
    2180:	003e2000 	eorseq	r2, lr, r0
    2184:	9c010000 	stcls	0, cr0, [r1], {-0}
    2188:	00000665 	andeq	r0, r0, r5, ror #12
    218c:	00102412 	andseq	r2, r0, r2, lsl r4
    2190:	03980100 	orrseq	r0, r8, #0, 2
    2194:	00037728 	andeq	r7, r3, r8, lsr #14
    2198:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    219c:	000f2512 	andeq	r2, pc, r2, lsl r5	; <UNPREDICTABLE>
    21a0:	03980100 	orrseq	r0, r8, #0, 2
    21a4:	00009b38 	andeq	r9, r0, r8, lsr fp
    21a8:	73910200 	orrsvc	r0, r1, #0, 4
    21ac:	11c21100 	bicne	r1, r2, r0, lsl #2
    21b0:	44010000 	strmi	r0, [r1], #-0
    21b4:	1b100603 	blne	4039c8 <startup-0x1fbfc638>
    21b8:	00402000 	subeq	r2, r0, r0
    21bc:	9c010000 	stcls	0, cr0, [r1], {-0}
    21c0:	0000069d 	muleq	r0, sp, r6
    21c4:	00102412 	andseq	r2, r0, r2, lsl r4
    21c8:	03440100 	movteq	r0, #16640	; 0x4100
    21cc:	00037729 	andeq	r7, r3, r9, lsr #14
    21d0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    21d4:	00074312 	andeq	r4, r7, r2, lsl r3
    21d8:	03440100 	movteq	r0, #16640	; 0x4100
    21dc:	00014041 	andeq	r4, r1, r1, asr #32
    21e0:	73910200 	orrsvc	r0, r1, #0, 4
    21e4:	0fe61100 	svceq	0x00e61100
    21e8:	0f010000 	svceq	0x00010000
    21ec:	1af00603 	bne	ffc03a00 <APBAHBPrescTable+0xdfc019e8>
    21f0:	00202000 	eoreq	r2, r0, r0
    21f4:	9c010000 	stcls	0, cr0, [r1], {-0}
    21f8:	000006c5 	andeq	r0, r0, r5, asr #13
    21fc:	00102412 	andseq	r2, r0, r2, lsl r4
    2200:	030f0100 	movweq	r0, #61696	; 0xf100
    2204:	00037725 	andeq	r7, r3, r5, lsr #14
    2208:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    220c:	10a11100 	adcne	r1, r1, r0, lsl #2
    2210:	f7010000 			; <UNDEFINED> instruction: 0xf7010000
    2214:	1aa80602 	bne	fea03a24 <APBAHBPrescTable+0xdea01a0c>
    2218:	00482000 	subeq	r2, r8, r0
    221c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2220:	000006fd 	strdeq	r0, [r0], -sp
    2224:	00102412 	andseq	r2, r0, r2, lsl r4
    2228:	02f70100 	rscseq	r0, r7, #0, 2
    222c:	00037722 	andeq	r7, r3, r2, lsr #14
    2230:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2234:	00074312 	andeq	r4, r7, r2, lsl r3
    2238:	02f70100 	rscseq	r0, r7, #0, 2
    223c:	0001403a 	andeq	r4, r1, sl, lsr r0
    2240:	73910200 	orrsvc	r0, r1, #0, 4
    2244:	0f351100 	svceq	0x00351100
    2248:	e5010000 	str	r0, [r1, #-0]
    224c:	1a700602 	bne	1c03a5c <startup-0x1e3fc5a4>
    2250:	00382000 	eorseq	r2, r8, r0
    2254:	9c010000 	stcls	0, cr0, [r1], {-0}
    2258:	00000735 	andeq	r0, r0, r5, lsr r7
    225c:	00102412 	andseq	r2, r0, r2, lsl r4
    2260:	02e50100 	rsceq	r0, r5, #0, 2
    2264:	00037736 	andeq	r7, r3, r6, lsr r7
    2268:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    226c:	000e2f12 	andeq	r2, lr, r2, lsl pc
    2270:	02e50100 	rsceq	r0, r5, #0, 2
    2274:	0000a747 	andeq	sl, r0, r7, asr #14
    2278:	72910200 	addsvc	r0, r1, #0, 4
    227c:	11af1100 			; <UNDEFINED> instruction: 0x11af1100
    2280:	a0010000 	andge	r0, r1, r0
    2284:	1a320602 	bne	c83a94 <startup-0x1f37c56c>
    2288:	003e2000 	eorseq	r2, lr, r0
    228c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2290:	0000076d 	andeq	r0, r0, sp, ror #14
    2294:	00102412 	andseq	r2, r0, r2, lsl r4
    2298:	02a00100 	adceq	r0, r0, #0, 2
    229c:	00037728 	andeq	r7, r3, r8, lsr #14
    22a0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    22a4:	000ead12 	andeq	sl, lr, r2, lsl sp
    22a8:	02a00100 	adceq	r0, r0, #0, 2
    22ac:	0000a739 	andeq	sl, r0, r9, lsr r7
    22b0:	72910200 	addsvc	r0, r1, #0, 4
    22b4:	0df91100 	ldfeqe	f1, [r9]
    22b8:	85010000 	strhi	r0, [r1, #-0]
    22bc:	19f20602 	ldmibne	r2!, {r1, r9, sl}^
    22c0:	00402000 	subeq	r2, r0, r0
    22c4:	9c010000 	stcls	0, cr0, [r1], {-0}
    22c8:	000007a5 	andeq	r0, r0, r5, lsr #15
    22cc:	00102412 	andseq	r2, r0, r2, lsl r4
    22d0:	02850100 	addeq	r0, r5, #0, 2
    22d4:	0003772d 	andeq	r7, r3, sp, lsr #14
    22d8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    22dc:	00074312 	andeq	r4, r7, r2, lsl r3
    22e0:	02850100 	addeq	r0, r5, #0, 2
    22e4:	00014045 	andeq	r4, r1, r5, asr #32
    22e8:	73910200 	orrsvc	r0, r1, #0, 4
    22ec:	0fc21100 	svceq	0x00c21100
    22f0:	71010000 	mrsvc	r0, (UNDEF: 1)
    22f4:	19b80602 	ldmibne	r8!, {r1, r9, sl}
    22f8:	003a2000 	eorseq	r2, sl, r0
    22fc:	9c010000 	stcls	0, cr0, [r1], {-0}
    2300:	000007dd 	ldrdeq	r0, [r0], -sp
    2304:	00102412 	andseq	r2, r0, r2, lsl r4
    2308:	02710100 	rsbseq	r0, r1, #0, 2
    230c:	00037726 	andeq	r7, r3, r6, lsr #14
    2310:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2314:	00106312 	andseq	r6, r0, r2, lsl r3
    2318:	02710100 	rsbseq	r0, r1, #0, 2
    231c:	00009b36 	andeq	r9, r0, r6, lsr fp
    2320:	73910200 	orrsvc	r0, r1, #0, 4
    2324:	12091500 	andne	r1, r9, #0, 10
    2328:	3d010000 	stccc	0, cr0, [r1, #-0]
    232c:	00a70a02 	adceq	r0, r7, r2, lsl #20
    2330:	199c0000 	ldmibne	ip, {}	; <UNPREDICTABLE>
    2334:	001c2000 	andseq	r2, ip, r0
    2338:	9c010000 	stcls	0, cr0, [r1], {-0}
    233c:	00000809 	andeq	r0, r0, r9, lsl #16
    2340:	00102412 	andseq	r2, r0, r2, lsl r4
    2344:	023d0100 	eorseq	r0, sp, #0, 2
    2348:	0003772b 	andeq	r7, r3, fp, lsr #14
    234c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2350:	0e9e1100 	fmleqe	f1, f6, f0
    2354:	2d010000 	stccs	0, cr0, [r1, #-0]
    2358:	19780602 	ldmdbne	r8!, {r1, r9, sl}^
    235c:	00242000 	eoreq	r2, r4, r0
    2360:	9c010000 	stcls	0, cr0, [r1], {-0}
    2364:	00000841 	andeq	r0, r0, r1, asr #16
    2368:	00102412 	andseq	r2, r0, r2, lsl r4
    236c:	022d0100 	eoreq	r0, sp, #0, 2
    2370:	00037724 	andeq	r7, r3, r4, lsr #14
    2374:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2378:	000ea812 	andeq	sl, lr, r2, lsl r8
    237c:	022d0100 	eoreq	r0, sp, #0, 2
    2380:	0000a735 	andeq	sl, r0, r5, lsr r7
    2384:	72910200 	addsvc	r0, r1, #0, 4
    2388:	0e4a1100 	dvfeqe	f1, f2, f0
    238c:	f4010000 	vst4.8	{d0-d3}, [r1], r0
    2390:	19300601 	ldmdbne	r0!, {r0, r9, sl}
    2394:	00482000 	subeq	r2, r8, r0
    2398:	9c010000 	stcls	0, cr0, [r1], {-0}
    239c:	00000879 	andeq	r0, r0, r9, ror r8
    23a0:	00102412 	andseq	r2, r0, r2, lsl r4
    23a4:	01f40100 	mvnseq	r0, r0, lsl #2
    23a8:	0003772b 	andeq	r7, r3, fp, lsr #14
    23ac:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    23b0:	00074312 	andeq	r4, r7, r2, lsl r3
    23b4:	01f40100 	mvnseq	r0, r0, lsl #2
    23b8:	00014043 	andeq	r4, r1, r3, asr #32
    23bc:	73910200 	orrsvc	r0, r1, #0, 4
    23c0:	10781100 	rsbsne	r1, r8, r0, lsl #2
    23c4:	da010000 	ble	423cc <startup-0x1ffbdc34>
    23c8:	18ea0601 	stmiane	sl!, {r0, r9, sl}^
    23cc:	00462000 	subeq	r2, r6, r0
    23d0:	9c010000 	stcls	0, cr0, [r1], {-0}
    23d4:	000008b1 			; <UNDEFINED> instruction: 0x000008b1
    23d8:	00102412 	andseq	r2, r0, r2, lsl r4
    23dc:	01da0100 	bicseq	r0, sl, r0, lsl #2
    23e0:	0003772c 	andeq	r7, r3, ip, lsr #14
    23e4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    23e8:	00074312 	andeq	r4, r7, r2, lsl r3
    23ec:	01da0100 	bicseq	r0, sl, r0, lsl #2
    23f0:	00014044 	andeq	r4, r1, r4, asr #32
    23f4:	73910200 	orrsvc	r0, r1, #0, 4
    23f8:	0e111100 	mufeqs	f1, f1, f0
    23fc:	c5010000 	strgt	r0, [r1, #-0]
    2400:	18b00601 	ldmne	r0!, {r0, r9, sl}
    2404:	003a2000 	eorseq	r2, sl, r0
    2408:	9c010000 	stcls	0, cr0, [r1], {-0}
    240c:	000008e9 	andeq	r0, r0, r9, ror #17
    2410:	00102412 	andseq	r2, r0, r2, lsl r4
    2414:	01c50100 	biceq	r0, r5, r0, lsl #2
    2418:	00037728 	andeq	r7, r3, r8, lsr #14
    241c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2420:	0011e712 	andseq	lr, r1, r2, lsl r7
    2424:	01c50100 	biceq	r0, r5, r0, lsl #2
    2428:	00009b38 	andeq	r9, r0, r8, lsr fp
    242c:	73910200 	orrsvc	r0, r1, #0, 4
    2430:	0e941100 	fmleqs	f1, f4, f0
    2434:	ab010000 	blge	4243c <startup-0x1ffbdbc4>
    2438:	18680601 	stmdane	r8!, {r0, r9, sl}^
    243c:	00482000 	subeq	r2, r8, r0
    2440:	9c010000 	stcls	0, cr0, [r1], {-0}
    2444:	00000921 	andeq	r0, r0, r1, lsr #18
    2448:	00102412 	andseq	r2, r0, r2, lsl r4
    244c:	01ab0100 			; <UNDEFINED> instruction: 0x01ab0100
    2450:	0003771f 	andeq	r7, r3, pc, lsl r7
    2454:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2458:	00074312 	andeq	r4, r7, r2, lsl r3
    245c:	01ab0100 			; <UNDEFINED> instruction: 0x01ab0100
    2460:	00014037 	andeq	r4, r1, r7, lsr r0
    2464:	73910200 	orrsvc	r0, r1, #0, 4
    2468:	0f911100 	svceq	0x00911100
    246c:	9a010000 	bls	42474 <startup-0x1ffbdb8c>
    2470:	18400601 	stmdane	r0, {r0, r9, sl}^
    2474:	00282000 	eoreq	r2, r8, r0
    2478:	9c010000 	stcls	0, cr0, [r1], {-0}
    247c:	00000949 	andeq	r0, r0, r9, asr #18
    2480:	000f6e12 	andeq	r6, pc, r2, lsl lr	; <UNPREDICTABLE>
    2484:	019a0100 	orrseq	r0, sl, r0, lsl #2
    2488:	00094934 	andeq	r4, r9, r4, lsr r9
    248c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2490:	c9041400 	stmdbgt	r4, {sl, ip}
    2494:	11000002 	tstne	r0, r2
    2498:	0000119f 	muleq	r0, pc, r1	; <UNPREDICTABLE>
    249c:	06017b01 	streq	r7, [r1], -r1, lsl #22
    24a0:	200017ea 	andcs	r1, r0, sl, ror #15
    24a4:	00000056 	andeq	r0, r0, r6, asr r0
    24a8:	09979c01 	ldmibeq	r7, {r0, sl, fp, ip, pc}
    24ac:	24120000 	ldrcs	r0, [r2], #-0
    24b0:	01000010 	tsteq	r0, r0, lsl r0
    24b4:	7725017b 			; <UNDEFINED> instruction: 0x7725017b
    24b8:	02000003 	andeq	r0, r0, #3
    24bc:	6e126c91 	mrcvs	12, 0, r6, cr2, cr1, {4}
    24c0:	0100000f 	tsteq	r0, pc
    24c4:	4945017b 	stmdbmi	r5, {r0, r1, r3, r4, r5, r6, r8}^
    24c8:	02000009 	andeq	r0, r0, #9
    24cc:	80136891 	mulshi	r3, r1, r8
    24d0:	01000006 	tsteq	r0, r6
    24d4:	c90c017d 	stmdbgt	ip, {r0, r2, r3, r4, r5, r6, r8}
    24d8:	02000000 	andeq	r0, r0, #0
    24dc:	11007491 			; <UNDEFINED> instruction: 0x11007491
    24e0:	000011d6 	ldrdeq	r1, [r0], -r6
    24e4:	06016701 	streq	r6, [r1], -r1, lsl #14
    24e8:	200017b4 			; <UNDEFINED> instruction: 0x200017b4
    24ec:	00000036 	andeq	r0, r0, r6, lsr r0
    24f0:	09bf9c01 	ldmibeq	pc!, {r0, sl, fp, ip, pc}	; <UNPREDICTABLE>
    24f4:	1f120000 	svcne	0x00120000
    24f8:	01000011 	tsteq	r0, r1, lsl r0
    24fc:	bf2a0167 	svclt	0x002a0167
    2500:	02000009 	andeq	r0, r0, #9
    2504:	14007491 	strne	r7, [r0], #-1169	; 0xfffffb6f
    2508:	00027f04 	andeq	r7, r2, r4, lsl #30
    250c:	0e241600 	cfmadda32eq	mvax0, mvax1, mvfx4, mvfx0
    2510:	f6010000 			; <UNDEFINED> instruction: 0xf6010000
    2514:	00162006 	andseq	r2, r6, r6
    2518:	00019420 	andeq	r9, r1, r0, lsr #8
    251c:	459c0100 	ldrmi	r0, [ip, #256]	; 0x100
    2520:	1700000a 	strne	r0, [r0, -sl]
    2524:	00001024 	andeq	r1, r0, r4, lsr #32
    2528:	7720f601 	strvc	pc, [r0, -r1, lsl #12]!
    252c:	02000003 	andeq	r0, r0, #3
    2530:	1f175491 	svcne	0x00175491
    2534:	01000011 	tsteq	r0, r1, lsl r0
    2538:	09bf3bf6 	ldmibeq	pc!, {r1, r2, r4, r5, r6, r7, r8, r9, fp, ip, sp}	; <UNPREDICTABLE>
    253c:	91020000 	mrsls	r0, (UNDEF: 2)
    2540:	06801850 	pkhtbeq	r1, r0, r0, asr #16
    2544:	f8010000 			; <UNDEFINED> instruction: 0xf8010000
    2548:	0000c90c 	andeq	ip, r0, ip, lsl #18
    254c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2550:	000f0418 	andeq	r0, pc, r8, lsl r4	; <UNPREDICTABLE>
    2554:	1bf80100 	blne	ffe0295c <APBAHBPrescTable+0xdfe00944>
    2558:	000000c9 	andeq	r0, r0, r9, asr #1
    255c:	18709102 	ldmdane	r0!, {r1, r8, ip, pc}^
    2560:	00000dda 	ldrdeq	r0, [r0], -sl
    2564:	c90cf901 	stmdbgt	ip, {r0, r8, fp, ip, sp, lr, pc}
    2568:	02000000 	andeq	r0, r0, #0
    256c:	d9186c91 	ldmdble	r8, {r0, r4, r7, sl, fp, sp, lr}
    2570:	01000010 	tsteq	r0, r0, lsl r0
    2574:	00c90cfa 	strdeq	r0, [r9], #202	; 0xca
    2578:	91020000 	mrsls	r0, (UNDEF: 2)
    257c:	118e1868 	orrne	r1, lr, r8, ror #16
    2580:	fb010000 	blx	4258a <startup-0x1ffbda76>
    2584:	00031315 	andeq	r1, r3, r5, lsl r3
    2588:	58910200 	ldmpl	r1, {r9}
    258c:	0f611900 	svceq	0x00611900
    2590:	bb010000 	bllt	42598 <startup-0x1ffbda68>
    2594:	0014f006 	andseq	pc, r4, r6
    2598:	00013020 	andeq	r3, r1, r0, lsr #32
    259c:	179c0100 	ldrne	r0, [ip, r0, lsl #2]
    25a0:	00001024 	andeq	r1, r0, r4, lsr #32
    25a4:	7722bb01 	strvc	fp, [r2, -r1, lsl #22]!
    25a8:	02000003 	andeq	r0, r0, #3
    25ac:	00007491 	muleq	r0, r1, r4

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	0b0b0024 	bleq	2c00ac <startup-0x1fd3ff54>
  18:	0e030b3e 	vmoveq.16	d3[0], r0
  1c:	26030000 	strcs	r0, [r3], -r0
  20:	00134900 	andseq	r4, r3, r0, lsl #18
  24:	00160400 	andseq	r0, r6, r0, lsl #8
  28:	0b3a0e03 	bleq	e8383c <startup-0x1f17c7c4>
  2c:	0b390b3b 	bleq	e42d20 <startup-0x1f1bd2e0>
  30:	00001349 	andeq	r1, r0, r9, asr #6
  34:	0b002405 	bleq	9050 <startup-0x1fff6fb0>
  38:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  3c:	06000008 	streq	r0, [r0], -r8
  40:	13490035 	movtne	r0, #36917	; 0x9035
  44:	34070000 	strcc	r0, [r7], #-0
  48:	3a0e0300 	bcc	380c50 <startup-0x1fc7f3b0>
  4c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
  50:	3f13490b 	svccc	0x0013490b
  54:	00193c19 	andseq	r3, r9, r9, lsl ip
  58:	00340800 	eorseq	r0, r4, r0, lsl #16
  5c:	0b3a0e03 	bleq	e83870 <startup-0x1f17c790>
  60:	0b390b3b 	bleq	e42d54 <startup-0x1f1bd2ac>
  64:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
  68:	0000193c 	andeq	r1, r0, ip, lsr r9
  6c:	3e010409 	cdpcc	4, 0, cr0, cr1, cr9, {0}
  70:	490b0b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp}
  74:	3b0b3a13 	blcc	2ce8c8 <startup-0x1fd31738>
  78:	010b3905 	tsteq	fp, r5, lsl #18
  7c:	0a000013 	beq	d0 <startup-0x1fffff30>
  80:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
  84:	00000b1c 	andeq	r0, r0, ip, lsl fp
  88:	0b01130b 	bleq	44cbc <startup-0x1ffbb344>
  8c:	3b0b3a0b 	blcc	2ce8c0 <startup-0x1fd31740>
  90:	010b3905 	tsteq	fp, r5, lsl #18
  94:	0c000013 	stceq	0, cr0, [r0], {19}
  98:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
  9c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  a0:	13490b39 	movtne	r0, #39737	; 0x9b39
  a4:	00000b38 	andeq	r0, r0, r8, lsr fp
  a8:	03000d0d 	movweq	r0, #3341	; 0xd0d
  ac:	3b0b3a08 	blcc	2ce8d4 <startup-0x1fd3172c>
  b0:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
  b4:	000b3813 	andeq	r3, fp, r3, lsl r8
  b8:	01010e00 	tsteq	r1, r0, lsl #28
  bc:	13011349 	movwne	r1, #4937	; 0x1349
  c0:	210f0000 	mrscs	r0, CPSR
  c4:	2f134900 	svccs	0x00134900
  c8:	1000000b 	andne	r0, r0, fp
  cc:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
  d0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  d4:	13490b39 	movtne	r0, #39737	; 0x9b39
  d8:	04110000 	ldreq	r0, [r1], #-0
  dc:	0b0b3e01 	bleq	2cf8e8 <startup-0x1fd30718>
  e0:	3a13490b 	bcc	4d2514 <startup-0x1fb2daec>
  e4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  e8:	0013010b 	andseq	r0, r3, fp, lsl #2
  ec:	01131200 	tsteq	r3, r0, lsl #4
  f0:	0b3a0b0b 	bleq	e82d24 <startup-0x1f17d2dc>
  f4:	0b390b3b 	bleq	e42de8 <startup-0x1f1bd218>
  f8:	00001301 	andeq	r1, r0, r1, lsl #6
  fc:	03000d13 	movweq	r0, #3347	; 0xd13
 100:	3b0b3a0e 	blcc	2ce940 <startup-0x1fd316c0>
 104:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 108:	000b3813 	andeq	r3, fp, r3, lsl r8
 10c:	002e1400 	eoreq	r1, lr, r0, lsl #8
 110:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 114:	0b3b0b3a 	bleq	ec2e04 <startup-0x1f13d1fc>
 118:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 11c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 120:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 124:	15000019 	strne	r0, [r0, #-25]	; 0xffffffe7
 128:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 12c:	0b3a0e03 	bleq	e83940 <startup-0x1f17c6c0>
 130:	0b390b3b 	bleq	e42e24 <startup-0x1f1bd1dc>
 134:	01111927 	tsteq	r1, r7, lsr #18
 138:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 13c:	01194296 			; <UNDEFINED> instruction: 0x01194296
 140:	16000013 			; <UNDEFINED> instruction: 0x16000013
 144:	08030005 	stmdaeq	r3, {r0, r2}
 148:	0b3b0b3a 	bleq	ec2e38 <startup-0x1f13d1c8>
 14c:	13490b39 	movtne	r0, #39737	; 0x9b39
 150:	00001802 	andeq	r1, r0, r2, lsl #16
 154:	03003417 	movweq	r3, #1047	; 0x417
 158:	3b0b3a0e 	blcc	2ce998 <startup-0x1fd31668>
 15c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 160:	00180213 	andseq	r0, r8, r3, lsl r2
 164:	00341800 	eorseq	r1, r4, r0, lsl #16
 168:	0b3a0803 	bleq	e8217c <startup-0x1f17de84>
 16c:	0b390b3b 	bleq	e42e60 <startup-0x1f1bd1a0>
 170:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 174:	0b190000 	bleq	64017c <startup-0x1f9bfe84>
 178:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 17c:	1a000006 	bne	19c <startup-0x1ffffe64>
 180:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 184:	0b3a0e03 	bleq	e83998 <startup-0x1f17c668>
 188:	0b390b3b 	bleq	e42e7c <startup-0x1f1bd184>
 18c:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
 190:	181b0000 	ldmdane	fp, {}	; <UNPREDICTABLE>
 194:	1c000000 	stcne	0, cr0, [r0], {-0}
 198:	0b0b000f 	bleq	2c01dc <startup-0x1fd3fe24>
 19c:	00001349 	andeq	r1, r0, r9, asr #6
 1a0:	3f002e1d 	svccc	0x00002e1d
 1a4:	3a0e0319 	bcc	380e10 <startup-0x1fc7f1f0>
 1a8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1ac:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 1b0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 1b4:	96184006 	ldrls	r4, [r8], -r6
 1b8:	00001942 	andeq	r1, r0, r2, asr #18
 1bc:	3f002e1e 	svccc	0x00002e1e
 1c0:	3a0e0319 	bcc	380e2c <startup-0x1fc7f1d4>
 1c4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1c8:	1119270b 	tstne	r9, fp, lsl #14
 1cc:	40061201 	andmi	r1, r6, r1, lsl #4
 1d0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 1d4:	01000000 	mrseq	r0, (UNDEF: 0)
 1d8:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 1dc:	0e030b13 	vmoveq.32	d3[0], r0
 1e0:	01110e1b 	tsteq	r1, fp, lsl lr
 1e4:	17100612 			; <UNDEFINED> instruction: 0x17100612
 1e8:	24020000 	strcs	r0, [r2], #-0
 1ec:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 1f0:	000e030b 	andeq	r0, lr, fp, lsl #6
 1f4:	00160300 	andseq	r0, r6, r0, lsl #6
 1f8:	0b3a0e03 	bleq	e83a0c <startup-0x1f17c5f4>
 1fc:	0b390b3b 	bleq	e42ef0 <startup-0x1f1bd110>
 200:	00001349 	andeq	r1, r0, r9, asr #6
 204:	0b002404 	bleq	921c <startup-0x1fff6de4>
 208:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 20c:	05000008 	streq	r0, [r0, #-8]
 210:	13490035 	movtne	r0, #36917	; 0x9035
 214:	34060000 	strcc	r0, [r6], #-0
 218:	3a0e0300 	bcc	380e20 <startup-0x1fc7f1e0>
 21c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 220:	3f13490b 	svccc	0x0013490b
 224:	00193c19 	andseq	r3, r9, r9, lsl ip
 228:	00340700 	eorseq	r0, r4, r0, lsl #14
 22c:	0b3a0e03 	bleq	e83a40 <startup-0x1f17c5c0>
 230:	0b390b3b 	bleq	e42f24 <startup-0x1f1bd0dc>
 234:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 238:	0000193c 	andeq	r1, r0, ip, lsr r9
 23c:	3e010408 	cdpcc	4, 0, cr0, cr1, cr8, {0}
 240:	490b0b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp}
 244:	3b0b3a13 	blcc	2cea98 <startup-0x1fd31568>
 248:	010b3905 	tsteq	fp, r5, lsl #18
 24c:	09000013 	stmdbeq	r0, {r0, r1, r4}
 250:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
 254:	00000b1c 	andeq	r0, r0, ip, lsl fp
 258:	0b01130a 	bleq	44e88 <startup-0x1ffbb178>
 25c:	3b0b3a0b 	blcc	2cea90 <startup-0x1fd31570>
 260:	010b3905 	tsteq	fp, r5, lsl #18
 264:	0b000013 	bleq	2b8 <startup-0x1ffffd48>
 268:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 26c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 270:	13490b39 	movtne	r0, #39737	; 0x9b39
 274:	00000b38 	andeq	r0, r0, r8, lsr fp
 278:	03000d0c 	movweq	r0, #3340	; 0xd0c
 27c:	3b0b3a08 	blcc	2ceaa4 <startup-0x1fd3155c>
 280:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 284:	000b3813 	andeq	r3, fp, r3, lsl r8
 288:	01010d00 	tsteq	r1, r0, lsl #26
 28c:	13011349 	movwne	r1, #4937	; 0x1349
 290:	210e0000 	mrscs	r0, (UNDEF: 14)
 294:	2f134900 	svccs	0x00134900
 298:	0f00000b 	svceq	0x0000000b
 29c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 2a0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 2a4:	13490b39 	movtne	r0, #39737	; 0x9b39
 2a8:	04100000 	ldreq	r0, [r0], #-0
 2ac:	0b0b3e01 	bleq	2cfab8 <startup-0x1fd30548>
 2b0:	3a13490b 	bcc	4d26e4 <startup-0x1fb2d91c>
 2b4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 2b8:	0013010b 	andseq	r0, r3, fp, lsl #2
 2bc:	01131100 	tsteq	r3, r0, lsl #2
 2c0:	0b3a0b0b 	bleq	e82ef4 <startup-0x1f17d10c>
 2c4:	0b390b3b 	bleq	e42fb8 <startup-0x1f1bd048>
 2c8:	00001301 	andeq	r1, r0, r1, lsl #6
 2cc:	03000d12 	movweq	r0, #3346	; 0xd12
 2d0:	3b0b3a0e 	blcc	2ceb10 <startup-0x1fd314f0>
 2d4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 2d8:	000b3813 	andeq	r3, fp, r3, lsl r8
 2dc:	012e1300 			; <UNDEFINED> instruction: 0x012e1300
 2e0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 2e4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 2e8:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 2ec:	06120111 			; <UNDEFINED> instruction: 0x06120111
 2f0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 2f4:	00130119 	andseq	r0, r3, r9, lsl r1
 2f8:	00051400 	andeq	r1, r5, r0, lsl #8
 2fc:	0b3a0e03 	bleq	e83b10 <startup-0x1f17c4f0>
 300:	0b39053b 	bleq	e417f4 <startup-0x1f1be80c>
 304:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 308:	34150000 	ldrcc	r0, [r5], #-0
 30c:	3a0e0300 	bcc	380f14 <startup-0x1fc7f0ec>
 310:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 314:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 318:	16000018 			; <UNDEFINED> instruction: 0x16000018
 31c:	0b0b000f 	bleq	2c0360 <startup-0x1fd3fca0>
 320:	00001349 	andeq	r1, r0, r9, asr #6
 324:	3f012e17 	svccc	0x00012e17
 328:	3a0e0319 	bcc	380f94 <startup-0x1fc7f06c>
 32c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 330:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 334:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 338:	97184006 	ldrls	r4, [r8, -r6]
 33c:	13011942 	movwne	r1, #6466	; 0x1942
 340:	34180000 	ldrcc	r0, [r8], #-0
 344:	3a080300 	bcc	200f4c <startup-0x1fdff0b4>
 348:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 34c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 350:	19000018 	stmdbne	r0, {r3, r4}
 354:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 358:	0b3a0e03 	bleq	e83b6c <startup-0x1f17c494>
 35c:	0b390b3b 	bleq	e43050 <startup-0x1f1bcfb0>
 360:	01111927 	tsteq	r1, r7, lsr #18
 364:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 368:	01194297 			; <UNDEFINED> instruction: 0x01194297
 36c:	1a000013 	bne	3c0 <startup-0x1ffffc40>
 370:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 374:	0b3b0b3a 	bleq	ec3064 <startup-0x1f13cf9c>
 378:	13490b39 	movtne	r0, #39737	; 0x9b39
 37c:	00001802 	andeq	r1, r0, r2, lsl #16
 380:	0300341b 	movweq	r3, #1051	; 0x41b
 384:	3b0b3a0e 	blcc	2cebc4 <startup-0x1fd3143c>
 388:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 38c:	00180213 	andseq	r0, r8, r3, lsl r2
 390:	00341c00 	eorseq	r1, r4, r0, lsl #24
 394:	0b3a0803 	bleq	e823a8 <startup-0x1f17dc58>
 398:	0b390b3b 	bleq	e4308c <startup-0x1f1bcf74>
 39c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 3a0:	2e1d0000 	cdpcs	0, 1, cr0, cr13, cr0, {0}
 3a4:	03193f01 	tsteq	r9, #1, 30
 3a8:	3b0b3a0e 	blcc	2cebe8 <startup-0x1fd31418>
 3ac:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 3b0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 3b4:	96184006 	ldrls	r4, [r8], -r6
 3b8:	00001942 	andeq	r1, r0, r2, asr #18
 3bc:	01110100 	tsteq	r1, r0, lsl #2
 3c0:	0b130e25 	bleq	4c3c5c <startup-0x1fb3c3a4>
 3c4:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 3c8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 3cc:	00001710 	andeq	r1, r0, r0, lsl r7
 3d0:	0b002402 	bleq	93e0 <startup-0x1fff6c20>
 3d4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 3d8:	0300000e 	movweq	r0, #14
 3dc:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 3e0:	0b3b0b3a 	bleq	ec30d0 <startup-0x1f13cf30>
 3e4:	13490b39 	movtne	r0, #39737	; 0x9b39
 3e8:	24040000 	strcs	r0, [r4], #-0
 3ec:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 3f0:	0008030b 	andeq	r0, r8, fp, lsl #6
 3f4:	00350500 	eorseq	r0, r5, r0, lsl #10
 3f8:	00001349 	andeq	r1, r0, r9, asr #6
 3fc:	49002606 	stmdbmi	r0, {r1, r2, r9, sl, sp}
 400:	07000013 	smladeq	r0, r3, r0, r0
 404:	13490101 	movtne	r0, #37121	; 0x9101
 408:	00001301 	andeq	r1, r0, r1, lsl #6
 40c:	49002108 	stmdbmi	r0, {r3, r8, sp}
 410:	000b2f13 	andeq	r2, fp, r3, lsl pc
 414:	00340900 	eorseq	r0, r4, r0, lsl #18
 418:	0b3a0e03 	bleq	e83c2c <startup-0x1f17c3d4>
 41c:	0b39053b 	bleq	e41910 <startup-0x1f1be6f0>
 420:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 424:	0000193c 	andeq	r1, r0, ip, lsr r9
 428:	0300340a 	movweq	r3, #1034	; 0x40a
 42c:	3b0b3a0e 	blcc	2cec6c <startup-0x1fd31394>
 430:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 434:	3c193f13 	ldccc	15, cr3, [r9], {19}
 438:	0b000019 	bleq	4a4 <startup-0x1ffffb5c>
 43c:	0b3e0104 	bleq	f80854 <startup-0x1f07f7ac>
 440:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 444:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 448:	13010b39 	movwne	r0, #6969	; 0x1b39
 44c:	280c0000 	stmdacs	ip, {}	; <UNPREDICTABLE>
 450:	1c0e0300 	stcne	3, cr0, [lr], {-0}
 454:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
 458:	08030028 	stmdaeq	r3, {r3, r5}
 45c:	00000b1c 	andeq	r0, r0, ip, lsl fp
 460:	0300160e 	movweq	r1, #1550	; 0x60e
 464:	3b0b3a0e 	blcc	2ceca4 <startup-0x1fd3135c>
 468:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 46c:	0f000013 	svceq	0x00000013
 470:	0b0b0113 	bleq	2c08c4 <startup-0x1fd3f73c>
 474:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 478:	13010b39 	movwne	r0, #6969	; 0x1b39
 47c:	0d100000 	ldceq	0, cr0, [r0, #-0]
 480:	3a080300 	bcc	201088 <startup-0x1fdfef78>
 484:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 488:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 48c:	1100000b 	tstne	r0, fp
 490:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 494:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 498:	13490b39 	movtne	r0, #39737	; 0x9b39
 49c:	00000b38 	andeq	r0, r0, r8, lsr fp
 4a0:	0b011312 	bleq	450f0 <startup-0x1ffbaf10>
 4a4:	3b0b3a0b 	blcc	2cecd8 <startup-0x1fd31328>
 4a8:	010b390b 	tsteq	fp, fp, lsl #18
 4ac:	13000013 	movwne	r0, #19
 4b0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 4b4:	0b3b0b3a 	bleq	ec31a4 <startup-0x1f13ce5c>
 4b8:	13490b39 	movtne	r0, #39737	; 0x9b39
 4bc:	00000b38 	andeq	r0, r0, r8, lsr fp
 4c0:	03003414 	movweq	r3, #1044	; 0x414
 4c4:	3b0b3a0e 	blcc	2ced04 <startup-0x1fd312fc>
 4c8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 4cc:	00180213 	andseq	r0, r8, r3, lsl r2
 4d0:	012e1500 			; <UNDEFINED> instruction: 0x012e1500
 4d4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 4d8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 4dc:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 4e0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 4e4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 4e8:	00130119 	andseq	r0, r3, r9, lsl r1
 4ec:	00051600 	andeq	r1, r5, r0, lsl #12
 4f0:	0b3a0e03 	bleq	e83d04 <startup-0x1f17c2fc>
 4f4:	0b39053b 	bleq	e419e8 <startup-0x1f1be618>
 4f8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 4fc:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
 500:	03193f01 	tsteq	r9, #1, 30
 504:	3b0b3a0e 	blcc	2ced44 <startup-0x1fd312bc>
 508:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
 50c:	11134919 	tstne	r3, r9, lsl r9
 510:	40061201 	andmi	r1, r6, r1, lsl #4
 514:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 518:	00001301 	andeq	r1, r0, r1, lsl #6
 51c:	03003418 	movweq	r3, #1048	; 0x418
 520:	3b0b3a0e 	blcc	2ced60 <startup-0x1fd312a0>
 524:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 528:	00180213 	andseq	r0, r8, r3, lsl r2
 52c:	002e1900 	eoreq	r1, lr, r0, lsl #18
 530:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 534:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 538:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 53c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 540:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 544:	1a000019 	bne	5b0 <startup-0x1ffffa50>
 548:	08030034 	stmdaeq	r3, {r2, r4, r5}
 54c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 550:	13490b39 	movtne	r0, #39737	; 0x9b39
 554:	00001802 	andeq	r1, r0, r2, lsl #16
 558:	3f012e1b 	svccc	0x00012e1b
 55c:	3a0e0319 	bcc	3811c8 <startup-0x1fc7ee38>
 560:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 564:	1119270b 	tstne	r9, fp, lsl #14
 568:	40061201 	andmi	r1, r6, r1, lsl #4
 56c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 570:	00001301 	andeq	r1, r0, r1, lsl #6
 574:	0b000f1c 	bleq	41ec <startup-0x1fffbe14>
 578:	0013490b 	andseq	r4, r3, fp, lsl #18
 57c:	002e1d00 	eoreq	r1, lr, r0, lsl #26
 580:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 584:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 588:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 58c:	01111349 	tsteq	r1, r9, asr #6
 590:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 594:	00194297 	mulseq	r9, r7, r2
 598:	012e1e00 			; <UNDEFINED> instruction: 0x012e1e00
 59c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 5a0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 5a4:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 5a8:	01111349 	tsteq	r1, r9, asr #6
 5ac:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 5b0:	01194296 			; <UNDEFINED> instruction: 0x01194296
 5b4:	1f000013 	svcne	0x00000013
 5b8:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 5bc:	0b3a0e03 	bleq	e83dd0 <startup-0x1f17c230>
 5c0:	0b390b3b 	bleq	e432b4 <startup-0x1f1bcd4c>
 5c4:	01111927 	tsteq	r1, r7, lsr #18
 5c8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 5cc:	00194297 	mulseq	r9, r7, r2
 5d0:	11010000 	mrsne	r0, (UNDEF: 1)
 5d4:	130e2501 	movwne	r2, #58625	; 0xe501
 5d8:	1b0e030b 	blne	38120c <startup-0x1fc7edf4>
 5dc:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 5e0:	00171006 	andseq	r1, r7, r6
 5e4:	01130200 	tsteq	r3, r0, lsl #4
 5e8:	0b0b0e03 	bleq	2c3dfc <startup-0x1fd3c204>
 5ec:	0b3b0b3a 	bleq	ec32dc <startup-0x1f13cd24>
 5f0:	13010b39 	movwne	r0, #6969	; 0x1b39
 5f4:	0d030000 	stceq	0, cr0, [r3, #-0]
 5f8:	3a080300 	bcc	201200 <startup-0x1fdfee00>
 5fc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 600:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 604:	0400000b 	streq	r0, [r0], #-11
 608:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 60c:	0b3b0b3a 	bleq	ec32fc <startup-0x1f13cd04>
 610:	13490b39 	movtne	r0, #39737	; 0x9b39
 614:	00000b38 	andeq	r0, r0, r8, lsr fp
 618:	0b002405 	bleq	9634 <startup-0x1fff69cc>
 61c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 620:	0600000e 	streq	r0, [r0], -lr
 624:	13490035 	movtne	r0, #36917	; 0x9035
 628:	16070000 	strne	r0, [r7], -r0
 62c:	3a0e0300 	bcc	381234 <startup-0x1fc7edcc>
 630:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 634:	0013490b 	andseq	r4, r3, fp, lsl #18
 638:	012e0800 			; <UNDEFINED> instruction: 0x012e0800
 63c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 640:	0b3b0b3a 	bleq	ec3330 <startup-0x1f13ccd0>
 644:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 648:	06120111 			; <UNDEFINED> instruction: 0x06120111
 64c:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 650:	00130119 	andseq	r0, r3, r9, lsl r1
 654:	00050900 	andeq	r0, r5, r0, lsl #18
 658:	0b3a0803 	bleq	e8266c <startup-0x1f17d994>
 65c:	0b390b3b 	bleq	e43350 <startup-0x1f1bccb0>
 660:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 664:	0f0a0000 	svceq	0x000a0000
 668:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 66c:	0b000013 	bleq	6c0 <startup-0x1ffff940>
 670:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 674:	0b3a0e03 	bleq	e83e88 <startup-0x1f17c178>
 678:	0b390b3b 	bleq	e4336c <startup-0x1f1bcc94>
 67c:	13491927 	movtne	r1, #39207	; 0x9927
 680:	06120111 			; <UNDEFINED> instruction: 0x06120111
 684:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 688:	0c000019 	stceq	0, cr0, [r0], {25}
 68c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 690:	0b3a0e03 	bleq	e83ea4 <startup-0x1f17c15c>
 694:	0b390b3b 	bleq	e43388 <startup-0x1f1bcc78>
 698:	01111927 	tsteq	r1, r7, lsr #18
 69c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 6a0:	00194296 	mulseq	r9, r6, r2
 6a4:	11010000 	mrsne	r0, (UNDEF: 1)
 6a8:	130e2501 	movwne	r2, #58625	; 0xe501
 6ac:	1b0e030b 	blne	3812e0 <startup-0x1fc7ed20>
 6b0:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 6b4:	00171006 	andseq	r1, r7, r6
 6b8:	00240200 	eoreq	r0, r4, r0, lsl #4
 6bc:	0b3e0b0b 	bleq	f832f0 <startup-0x1f07cd10>
 6c0:	00000e03 	andeq	r0, r0, r3, lsl #28
 6c4:	03001603 	movweq	r1, #1539	; 0x603
 6c8:	3b0b3a0e 	blcc	2cef08 <startup-0x1fd310f8>
 6cc:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 6d0:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
 6d4:	0b0b0024 	bleq	2c076c <startup-0x1fd3f894>
 6d8:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 6dc:	35050000 	strcc	r0, [r5, #-0]
 6e0:	00134900 	andseq	r4, r3, r0, lsl #18
 6e4:	00340600 	eorseq	r0, r4, r0, lsl #12
 6e8:	0b3a0e03 	bleq	e83efc <startup-0x1f17c104>
 6ec:	0b39053b 	bleq	e41be0 <startup-0x1f1be420>
 6f0:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 6f4:	0000193c 	andeq	r1, r0, ip, lsr r9
 6f8:	03003407 	movweq	r3, #1031	; 0x407
 6fc:	3b0b3a0e 	blcc	2cef3c <startup-0x1fd310c4>
 700:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 704:	3c193f13 	ldccc	15, cr3, [r9], {19}
 708:	08000019 	stmdaeq	r0, {r0, r3, r4}
 70c:	0b3e0104 	bleq	f80b24 <startup-0x1f07f4dc>
 710:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 714:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 718:	13010b39 	movwne	r0, #6969	; 0x1b39
 71c:	28090000 	stmdacs	r9, {}	; <UNPREDICTABLE>
 720:	1c0e0300 	stcne	3, cr0, [lr], {-0}
 724:	0a00000b 	beq	758 <startup-0x1ffff8a8>
 728:	08030028 	stmdaeq	r3, {r3, r5}
 72c:	00000b1c 	andeq	r0, r0, ip, lsl fp
 730:	0300160b 	movweq	r1, #1547	; 0x60b
 734:	3b0b3a0e 	blcc	2cef74 <startup-0x1fd3108c>
 738:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 73c:	0c000013 	stceq	0, cr0, [r0], {19}
 740:	0b0b0113 	bleq	2c0b94 <startup-0x1fd3f46c>
 744:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 748:	13010b39 	movwne	r0, #6969	; 0x1b39
 74c:	0d0d0000 	stceq	0, cr0, [sp, #-0]
 750:	3a080300 	bcc	201358 <startup-0x1fdfeca8>
 754:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 758:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 75c:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
 760:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 764:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 768:	13490b39 	movtne	r0, #39737	; 0x9b39
 76c:	00000b38 	andeq	r0, r0, r8, lsr fp
 770:	0b01130f 	bleq	453b4 <startup-0x1ffbac4c>
 774:	3b0b3a0b 	blcc	2cefa8 <startup-0x1fd31058>
 778:	010b390b 	tsteq	fp, fp, lsl #18
 77c:	10000013 	andne	r0, r0, r3, lsl r0
 780:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 784:	0b3b0b3a 	bleq	ec3474 <startup-0x1f13cb8c>
 788:	13490b39 	movtne	r0, #39737	; 0x9b39
 78c:	00000b38 	andeq	r0, r0, r8, lsr fp
 790:	3f012e11 	svccc	0x00012e11
 794:	3a0e0319 	bcc	381400 <startup-0x1fc7ec00>
 798:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 79c:	1119270b 	tstne	r9, fp, lsl #14
 7a0:	40061201 	andmi	r1, r6, r1, lsl #4
 7a4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 7a8:	00001301 	andeq	r1, r0, r1, lsl #6
 7ac:	03000512 	movweq	r0, #1298	; 0x512
 7b0:	3b0b3a0e 	blcc	2ceff0 <startup-0x1fd31010>
 7b4:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 7b8:	00180213 	andseq	r0, r8, r3, lsl r2
 7bc:	00341300 	eorseq	r1, r4, r0, lsl #6
 7c0:	0b3a0e03 	bleq	e83fd4 <startup-0x1f17c02c>
 7c4:	0b39053b 	bleq	e41cb8 <startup-0x1f1be348>
 7c8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 7cc:	0f140000 	svceq	0x00140000
 7d0:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 7d4:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
 7d8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 7dc:	0b3a0e03 	bleq	e83ff0 <startup-0x1f17c010>
 7e0:	0b39053b 	bleq	e41cd4 <startup-0x1f1be32c>
 7e4:	13491927 	movtne	r1, #39207	; 0x9927
 7e8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 7ec:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 7f0:	00130119 	andseq	r0, r3, r9, lsl r1
 7f4:	012e1600 			; <UNDEFINED> instruction: 0x012e1600
 7f8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 7fc:	0b3b0b3a 	bleq	ec34ec <startup-0x1f13cb14>
 800:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 804:	06120111 			; <UNDEFINED> instruction: 0x06120111
 808:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 80c:	00130119 	andseq	r0, r3, r9, lsl r1
 810:	00051700 	andeq	r1, r5, r0, lsl #14
 814:	0b3a0e03 	bleq	e84028 <startup-0x1f17bfd8>
 818:	0b390b3b 	bleq	e4350c <startup-0x1f1bcaf4>
 81c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 820:	34180000 	ldrcc	r0, [r8], #-0
 824:	3a0e0300 	bcc	38142c <startup-0x1fc7ebd4>
 828:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 82c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 830:	19000018 	stmdbne	r0, {r3, r4}
 834:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 838:	0b3a0e03 	bleq	e8404c <startup-0x1f17bfb4>
 83c:	0b390b3b 	bleq	e43530 <startup-0x1f1bcad0>
 840:	01111927 	tsteq	r1, r7, lsr #18
 844:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 848:	00194296 	mulseq	r9, r6, r2
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	0000021a 	andeq	r0, r0, sl, lsl r2
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
  2c:	04210002 	strteq	r0, [r1], #-2
  30:	00040000 	andeq	r0, r4, r0
  34:	00000000 	andeq	r0, r0, r0
  38:	2000022c 	andcs	r0, r0, ip, lsr #4
  3c:	0000050a 	andeq	r0, r0, sl, lsl #10
	...
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	0aa00002 	beq	fe80005c <APBAHBPrescTable+0xde7fe044>
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	20000738 	andcs	r0, r0, r8, lsr r7
  5c:	00000cfc 	strdeq	r0, [r0], -ip
	...
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	19d80002 	ldmibne	r8, {r1}^
  70:	00040000 	andeq	r0, r4, r0
  74:	00000000 	andeq	r0, r0, r0
  78:	20001434 	andcs	r1, r0, r4, lsr r4
  7c:	000000ba 	strheq	r0, [r0], -sl
	...
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	1b480002 	blne	120009c <startup-0x1edfff64>
  90:	00040000 	andeq	r0, r4, r0
  94:	00000000 	andeq	r0, r0, r0
  98:	200014f0 	strdcs	r1, [r0], -r0
  9c:	000009fc 	strdeq	r0, [r0], -ip
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	2000022a 	andcs	r0, r0, sl, lsr #4
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	000002b6 			; <UNDEFINED> instruction: 0x000002b6
       4:	01b90003 			; <UNDEFINED> instruction: 0x01b90003
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
      18:	43010000 	movwmi	r0, #4096	; 0x1000
      1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
      20:	2f737265 	svccs	0x00737265
      24:	32373634 	eorscc	r3, r7, #52, 12	; 0x3400000
      28:	6f442f32 	svcvs	0x00442f32
      2c:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
      30:	2f73746e 	svccs	0x0073746e
      34:	6a6f7250 	bvs	1bdc97c <startup-0x1e423684>
      38:	2f746365 	svccs	0x00746365
      3c:	6a6f7250 	bvs	1bdc984 <startup-0x1e42367c>
      40:	5f746365 	svcpl	0x00746365
      44:	7079656b 	rsbsvc	r6, r9, fp, ror #10
      48:	63006461 	movwvs	r6, #1121	; 0x461
      4c:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
      50:	70706165 	rsbsvc	r6, r0, r5, ror #2
      54:	646f635c 	strbtvs	r6, [pc], #-860	; 5c <startup-0x1fffffa4>
      58:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
      5c:	6f745c65 	svcvs	0x00745c65
      60:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
      64:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
      68:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
      6c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
      70:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
      74:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
      78:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
      7c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
      80:	616d5c65 	cmnvs	sp, r5, ror #24
      84:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
      88:	3a630065 	bcc	18c0224 <startup-0x1e73fddc>
      8c:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
      90:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
      94:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
      98:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
      9c:	6f6f745c 	svcvs	0x006f745c
      a0:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
      a4:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
      a8:	615c6d72 	cmpvs	ip, r2, ror sp
      ac:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
      b0:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
      b4:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
      b8:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
      bc:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
      c0:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
      c4:	2f3a4300 	svccs	0x003a4300
      c8:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
      cc:	36342f73 	shsub16cc	r2, r4, r3
      d0:	2f323237 	svccs	0x00323237
      d4:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xfffff0bc
      d8:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
      dc:	72702f73 	rsbsvc	r2, r0, #460	; 0x1cc
      e0:	63656a6f 	cmnvs	r5, #454656	; 0x6f000
      e4:	54532f74 	ldrbpl	r2, [r3], #-3956	; 0xfffff08c
      e8:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
      ec:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
      f0:	4d432f62 	stclmi	15, cr2, [r3, #-392]	; 0xfffffe78
      f4:	2f534953 	svccs	0x00534953
      f8:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
      fc:	00656475 	rsbeq	r6, r5, r5, ror r4
     100:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff6c5 <APBAHBPrescTable+0xdfffd6ad>
     104:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
     108:	3736342f 	ldrcc	r3, [r6, -pc, lsr #8]!
     10c:	442f3232 	strtmi	r3, [pc], #-562	; 114 <startup-0x1ffffeec>
     110:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
     114:	73746e65 	cmnvc	r4, #1616	; 0x650
     118:	6f72702f 	svcvs	0x0072702f
     11c:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
     120:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     124:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
     128:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     12c:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     130:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
     134:	535f7878 	cmppl	pc, #120, 16	; 0x780000
     138:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0xfffffb8c
     13c:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     140:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
     144:	2f726576 	svccs	0x00726576
     148:	00636e69 	rsbeq	r6, r3, r9, ror #28
     14c:	61747300 	cmnvs	r4, r0, lsl #6
     150:	70757472 	rsbsvc	r7, r5, r2, ror r4
     154:	0100632e 	tsteq	r0, lr, lsr #6
     158:	645f0000 	ldrbvs	r0, [pc], #-0	; 160 <startup-0x1ffffea0>
     15c:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
     160:	745f746c 	ldrbvc	r7, [pc], #-1132	; 168 <startup-0x1ffffe98>
     164:	73657079 	cmnvc	r5, #121	; 0x79
     168:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     16c:	735f0000 	cmpvc	pc, #0
     170:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
     174:	00682e74 	rsbeq	r2, r8, r4, ror lr
     178:	63000003 	movwvs	r0, #3
     17c:	5f65726f 	svcpl	0x0065726f
     180:	2e346d63 	cdpcs	13, 3, cr6, cr4, cr3, {3}
     184:	00040068 	andeq	r0, r4, r8, rrx
     188:	73797300 	cmnvc	r9, #0, 6
     18c:	5f6d6574 	svcpl	0x006d6574
     190:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     194:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     198:	00682e78 	rsbeq	r2, r8, r8, ror lr
     19c:	73000005 	movwvc	r0, #5
     1a0:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     1a4:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
     1a8:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
     1ac:	74730000 	ldrbtvc	r0, [r3], #-0
     1b0:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     1b4:	5f787834 	svcpl	0x00787834
     1b8:	6f697067 	svcvs	0x00697067
     1bc:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
     1c0:	05000000 	streq	r0, [r0, #-0]
     1c4:	02050001 	andeq	r0, r5, #1
     1c8:	20000000 	andcs	r0, r0, r0
     1cc:	21211318 			; <UNDEFINED> instruction: 0x21211318
     1d0:	0302222f 	movweq	r2, #8751	; 0x222f
     1d4:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     1d8:	02050014 	andeq	r0, r5, #20
     1dc:	20000010 	andcs	r0, r0, r0, lsl r0
     1e0:	05010e03 	streq	r0, [r1, #-3587]	; 0xfffff1fd
     1e4:	594f3d02 	stmdbpl	pc, {r1, r8, sl, fp, ip, sp}^	; <UNPREDICTABLE>
     1e8:	4c150559 	cfldr32mi	mvfx0, [r5], {89}	; 0x59
     1ec:	054b1605 	strbeq	r1, [fp, #-1541]	; 0xfffff9fb
     1f0:	16054b13 			; <UNDEFINED> instruction: 0x16054b13
     1f4:	3e17054d 	cfmac32cc	mvfx0, mvfx7, mvfx13
     1f8:	053d1805 	ldreq	r1, [sp, #-2053]!	; 0xfffff7fb
     1fc:	17053e16 	smladne	r5, r6, lr, r3
     200:	4b14053d 	blmi	5016fc <startup-0x1fafe904>
     204:	673e0205 	ldrvs	r0, [lr, -r5, lsl #4]!
     208:	67010567 	strvs	r0, [r1, -r7, ror #10]
     20c:	05672805 	strbeq	r2, [r7, #-2053]!	; 0xfffff7fb
     210:	0305cb0b 	movweq	ip, #23307	; 0x5b0b
     214:	210b0558 	tstcs	fp, r8, asr r5
     218:	05580305 	ldrbeq	r0, [r8, #-773]	; 0xfffffcfb
     21c:	0305210b 	movweq	r2, #20747	; 0x510b
     220:	210b0558 	tstcs	fp, r8, asr r5
     224:	05580305 	ldrbeq	r0, [r8, #-773]	; 0xfffffcfb
     228:	0305210b 	movweq	r2, #20747	; 0x510b
     22c:	22010558 	andcs	r0, r1, #88, 10	; 0x16000000
     230:	05911c05 	ldreq	r1, [r1, #3077]	; 0xc05
     234:	04053105 	streq	r3, [r5], #-261	; 0xfffffefb
     238:	210a0566 	tstcs	sl, r6, ror #10
     23c:	052f0505 	streq	r0, [pc, #-1285]!	; fffffd3f <APBAHBPrescTable+0xdfffdd27>
     240:	0a056604 	beq	159a58 <startup-0x1fea65a8>
     244:	2f050521 	svccs	0x00050521
     248:	05660405 	strbeq	r0, [r6, #-1029]!	; 0xfffffbfb
     24c:	0505210a 	streq	r2, [r5, #-266]	; 0xfffffef6
     250:	6604052f 	strvs	r0, [r4], -pc, lsr #10
     254:	05210a05 	streq	r0, [r1, #-2565]!	; 0xfffff5fb
     258:	02052f09 	andeq	r2, r5, #9, 30	; 0x24
     25c:	5a140521 	bpl	5016e8 <startup-0x1fafe918>
     260:	053d1705 	ldreq	r1, [sp, #-1797]!	; 0xfffff8fb
     264:	02058409 	andeq	r8, r5, #150994944	; 0x9000000
     268:	2103052e 	tstcs	r3, lr, lsr #10
     26c:	054b0c05 	strbeq	r0, [fp, #-3077]	; 0xfffff3fb
     270:	04054a05 	streq	r4, [r5], #-2565	; 0xfffff5fb
     274:	3d14053d 	cfldr32cc	mvfx0, [r4, #-244]	; 0xffffff0c
     278:	052e0f05 	streq	r0, [lr, #-3845]!	; 0xfffff0fb
     27c:	1805201e 	stmdane	r5, {r1, r2, r3, r4, sp}
     280:	2004052e 	andcs	r0, r4, lr, lsr #10
     284:	05670f05 	strbeq	r0, [r7, #-3845]!	; 0xfffff0fb
     288:	04020017 	streq	r0, [r2], #-23	; 0xffffffe9
     28c:	02051b02 	andeq	r1, r5, #2048	; 0x800
     290:	01040200 	mrseq	r0, R12_usr
     294:	0905443c 	stmdbeq	r5, {r2, r3, r4, r5, sl, lr}
     298:	2101053d 	tstcs	r1, sp, lsr r5
     29c:	055b1e05 	ldrbeq	r1, [fp, #-3589]	; 0xfffff1fb
     2a0:	09056814 	stmdbeq	r5, {r2, r4, fp, sp, lr}
     2a4:	a0010596 	mulge	r1, r6, r5
     2a8:	05911005 	ldreq	r1, [r1, #5]
     2ac:	03052f02 	movweq	r2, #24322	; 0x5f02
     2b0:	01040200 	mrseq	r0, R12_usr
     2b4:	00030230 	andeq	r0, r3, r0, lsr r2
     2b8:	043a0101 	ldrteq	r0, [sl], #-257	; 0xfffffeff
     2bc:	00030000 	andeq	r0, r3, r0
     2c0:	000001dc 	ldrdeq	r0, [r0], -ip
     2c4:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     2c8:	0101000d 	tsteq	r1, sp
     2cc:	00000101 	andeq	r0, r0, r1, lsl #2
     2d0:	00000100 	andeq	r0, r0, r0, lsl #2
     2d4:	2f3a4301 	svccs	0x003a4301
     2d8:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
     2dc:	36342f73 	shsub16cc	r2, r4, r3
     2e0:	2f323237 	svccs	0x00323237
     2e4:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xfffff0bc
     2e8:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
     2ec:	72502f73 	subsvc	r2, r0, #460	; 0x1cc
     2f0:	63656a6f 	cmnvs	r5, #454656	; 0x6f000
     2f4:	54532f74 	ldrbpl	r2, [r3], #-3956	; 0xfffff08c
     2f8:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     2fc:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
     300:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
     304:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     308:	5f787834 	svcpl	0x00787834
     30c:	50647453 	rsbpl	r7, r4, r3, asr r4
     310:	70697265 	rsbvc	r7, r9, r5, ror #4
     314:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
     318:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
     31c:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
     320:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
     324:	61657363 	cmnvs	r5, r3, ror #6
     328:	635c7070 	cmpvs	ip, #112	; 0x70
     32c:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
     330:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
     334:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 16c <startup-0x1ffffe94>
     338:	63675c73 	cmnvs	r7, #29440	; 0x7300
     33c:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
     340:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
     344:	6f6e2d6d 	svcvs	0x006e2d6d
     348:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
     34c:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
     350:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     354:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
     358:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
     35c:	00656e69 	rsbeq	r6, r5, r9, ror #28
     360:	635c3a63 	cmpvs	ip, #405504	; 0x63000
     364:	70616573 	rsbvc	r6, r1, r3, ror r5
     368:	6f635c70 	svcvs	0x00635c70
     36c:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
     370:	745c6574 	ldrbvc	r6, [ip], #-1396	; 0xfffffa8c
     374:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
     378:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
     37c:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
     380:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
     384:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
     388:	61652d65 	cmnvs	r5, r5, ror #26
     38c:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
     390:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
     394:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
     398:	43007379 	movwmi	r7, #889	; 0x379
     39c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
     3a0:	2f737265 	svccs	0x00737265
     3a4:	32373634 	eorscc	r3, r7, #52, 12	; 0x3400000
     3a8:	6f442f32 	svcvs	0x00442f32
     3ac:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
     3b0:	2f73746e 	svccs	0x0073746e
     3b4:	6a6f7270 	bvs	1bdcd7c <startup-0x1e423284>
     3b8:	2f746365 	svccs	0x00746365
     3bc:	334d5453 	movtcc	r5, #54355	; 0xd453
     3c0:	5f344632 	svcpl	0x00344632
     3c4:	2f62696c 	svccs	0x0062696c
     3c8:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
     3cc:	6e692f53 	mcrvs	15, 3, r2, cr9, cr3, {2}
     3d0:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     3d4:	3a430065 	bcc	10c0570 <startup-0x1ef3fa90>
     3d8:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
     3dc:	342f7372 	strtcc	r7, [pc], #-882	; 3e4 <startup-0x1ffffc1c>
     3e0:	32323736 	eorscc	r3, r2, #14155776	; 0xd80000
     3e4:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
     3e8:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
     3ec:	702f7374 	eorvc	r7, pc, r4, ror r3	; <UNPREDICTABLE>
     3f0:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xfffff08e
     3f4:	532f7463 			; <UNDEFINED> instruction: 0x532f7463
     3f8:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     3fc:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
     400:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
     404:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     408:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
     40c:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0xfffffca1
     410:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     414:	445f6870 	ldrbmi	r6, [pc], #-2160	; 41c <startup-0x1ffffbe4>
     418:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
     41c:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
     420:	73000063 	movwvc	r0, #99	; 0x63
     424:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     428:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
     42c:	6970675f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, sp, lr}^
     430:	00632e6f 	rsbeq	r2, r3, pc, ror #28
     434:	5f000001 	svcpl	0x00000001
     438:	61666564 	cmnvs	r6, r4, ror #10
     43c:	5f746c75 	svcpl	0x00746c75
     440:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
     444:	00682e73 	rsbeq	r2, r8, r3, ror lr
     448:	5f000002 	svcpl	0x00000002
     44c:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
     450:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
     454:	00000300 	andeq	r0, r0, r0, lsl #6
     458:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xfffff09d
     45c:	346d635f 	strbtcc	r6, [sp], #-863	; 0xfffffca1
     460:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
     464:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
     468:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
     46c:	6d74735f 	ldclvs	3, cr7, [r4, #-380]!	; 0xfffffe84
     470:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
     474:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
     478:	00000500 	andeq	r0, r0, r0, lsl #10
     47c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     480:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     484:	00682e78 	rsbeq	r2, r8, r8, ror lr
     488:	73000005 	movwvc	r0, #5
     48c:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     490:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
     494:	6970675f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, sp, lr}^
     498:	00682e6f 	rsbeq	r2, r8, pc, ror #28
     49c:	00000005 	andeq	r0, r0, r5
     4a0:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
     4a4:	00022c02 	andeq	r2, r2, r2, lsl #24
     4a8:	00ff0320 	rscseq	r0, pc, r0, lsr #6
     4ac:	4e060501 	cfsh32mi	mvfx0, mvfx6, #1
     4b0:	4b4c0505 	blmi	13018cc <startup-0x1ecfe734>
     4b4:	38030105 	stmdacc	r3, {r0, r2, r8}
     4b8:	030b054a 	movweq	r0, #46410	; 0xb54a
     4bc:	0505204a 	streq	r2, [r5, #-74]	; 0xffffffb6
     4c0:	01054b4c 	tsteq	r5, ip, asr #22
     4c4:	054a3303 	strbeq	r3, [sl, #-771]	; 0xfffffcfd
     4c8:	204f030b 	subcs	r0, pc, fp, lsl #6
     4cc:	4b4c0505 	blmi	13018e8 <startup-0x1ecfe718>
     4d0:	2e030105 	adfcss	f0, f3, f5
     4d4:	030b054a 	movweq	r0, #46410	; 0xb54a
     4d8:	05052054 	streq	r2, [r5, #-84]	; 0xffffffac
     4dc:	01054b4c 	tsteq	r5, ip, asr #22
     4e0:	054a2903 	strbeq	r2, [sl, #-2307]	; 0xfffff6fd
     4e4:	2059030b 	subscs	r0, r9, fp, lsl #6
     4e8:	4b4c0505 	blmi	1301904 <startup-0x1ecfe6fc>
     4ec:	24030105 	strcs	r0, [r3], #-261	; 0xfffffefb
     4f0:	030b054a 	movweq	r0, #46410	; 0xb54a
     4f4:	0505205e 	streq	r2, [r5, #-94]	; 0xffffffa2
     4f8:	01054b4c 	tsteq	r5, ip, asr #22
     4fc:	054a1f03 	strbeq	r1, [sl, #-3843]	; 0xfffff0fd
     500:	2063030b 	rsbcs	r0, r3, fp, lsl #6
     504:	4b4c0505 	blmi	1301920 <startup-0x1ecfe6e0>
     508:	1a030105 	bne	c0924 <startup-0x1ff3f6dc>
     50c:	030b054a 	movweq	r0, #46410	; 0xb54a
     510:	05052068 	streq	r2, [r5, #-104]	; 0xffffff98
     514:	01054b4c 	tsteq	r5, ip, asr #22
     518:	054a1503 	strbeq	r1, [sl, #-1283]	; 0xfffffafd
     51c:	206e030b 	rsbcs	r0, lr, fp, lsl #6
     520:	674c0505 	strbvs	r0, [ip, -r5, lsl #10]
     524:	0f030105 	svceq	0x00030105
     528:	030b0566 	movweq	r0, #46438	; 0xb566
     52c:	05052073 	streq	r2, [r5, #-115]	; 0xffffff8d
     530:	0105674c 	tsteq	r5, ip, asr #14
     534:	05660a03 	strbeq	r0, [r6, #-2563]!	; 0xfffff5fd
     538:	207a0308 	rsbscs	r0, sl, r8, lsl #6
     53c:	674c0705 	strbvs	r0, [ip, -r5, lsl #14]
     540:	03690105 	cmneq	r9, #1073741825	; 0x40000001
     544:	0590080c 	ldreq	r0, [r0, #2060]	; 0x80c
     548:	1b05590c 	blne	156980 <startup-0x1fea9680>
     54c:	2e28052e 	cfsh64cs	mvdx0, mvdx8, #30
     550:	0a030f05 	beq	c416c <startup-0x1ff3be94>
     554:	2e03052e 	cfsh32cs	mvfx0, mvfx3, #30
     558:	05220905 	streq	r0, [r2, #-2309]!	; 0xfffff6fb
     55c:	10055a22 	andne	r5, r5, r2, lsr #20
     560:	3e08052e 	cfsh32cc	mvfx0, mvfx8, #30
     564:	054c1505 	strbeq	r1, [ip, #-1285]	; 0xfffffafb
     568:	2c052e37 	stccs	14, cr2, [r5], {55}	; 0x37
     56c:	3c18052e 	cfldr32cc	mvfx0, [r8], {46}	; 0x2e
     570:	05201505 	streq	r1, [r0, #-1285]!	; 0xfffffafb
     574:	32053d14 	andcc	r3, r5, #20, 26	; 0x500
     578:	2e19052e 	cfmul64cs	mvdx0, mvdx9, mvdx14
     57c:	05204a05 	streq	r4, [r0, #-2565]!	; 0xfffff5fb
     580:	14052e3f 	strne	r2, [r5], #-3647	; 0xfffff1c1
     584:	3e1b052e 	cfmul64cc	mvdx0, mvdx11, mvdx14
     588:	052e0a05 	streq	r0, [lr, #-2565]!	; 0xfffff5fb
     58c:	0402004c 	streq	r0, [r2], #-76	; 0xffffffb4
     590:	39052e01 	stmdbcc	r5, {r0, r9, sl, fp, sp}
     594:	01040200 	mrseq	r0, R12_usr
     598:	3418052e 	ldrcc	r0, [r8], #-1326	; 0xfffffad2
     59c:	052e3f05 	streq	r3, [lr, #-3845]!	; 0xfffff0fb
     5a0:	1b052e34 	blne	14be78 <startup-0x1feb4188>
     5a4:	2018053c 	andscs	r0, r8, ip, lsr r5
     5a8:	2e36053d 	mrccs	5, 1, r0, cr6, cr13, {1}
     5ac:	052e1c05 	streq	r1, [lr, #-3077]!	; 0xfffff3fb
     5b0:	4405204f 	strmi	r2, [r5], #-79	; 0xffffffb1
     5b4:	2e18052e 	cfmul64cs	mvdx0, mvdx8, mvdx14
     5b8:	2e340542 	cdpcs	5, 3, cr0, cr4, cr2, {2}
     5bc:	053c3005 	ldreq	r3, [ip, #-5]!
     5c0:	18052e1b 	stmdane	r5, {r0, r1, r3, r4, r9, sl, fp, sp}
     5c4:	3d170520 	cfldr32cc	mvfx0, [r7, #-128]	; 0xffffff80
     5c8:	052e3f05 	streq	r3, [lr, #-3845]!	; 0xfffff0fb
     5cc:	51052e26 	tstpl	r5, r6, lsr #28
     5d0:	2e4d0520 	cdpcs	5, 4, cr0, cr13, cr0, {1}
     5d4:	052e1a05 	streq	r1, [lr, #-2565]!	; 0xfffff5fb
     5d8:	14052017 	strne	r2, [r5], #-23	; 0xffffffe9
     5dc:	2e2f0540 	cfsh64cs	mvdx0, mvdx15, #32
     5e0:	052e4005 	streq	r4, [lr, #-5]!
     5e4:	1705202b 	strne	r2, [r5, -fp, lsr #32]
     5e8:	2014053c 	andscs	r0, r4, ip, lsr r5
     5ec:	2e32053d 	mrccs	5, 1, r0, cr2, cr13, {1}
     5f0:	052e1905 	streq	r1, [lr, #-2309]!	; 0xfffff6fb
     5f4:	3f05204a 	svccc	0x0005204a
     5f8:	2e14052e 	cfmul64cs	mvdx0, mvdx4, mvdx14
     5fc:	02002c05 	andeq	r2, r0, #1280	; 0x500
     600:	62030204 	andvs	r0, r3, #4, 4	; 0x40000000
     604:	0003053c 	andeq	r0, r3, ip, lsr r5
     608:	3c010402 	cfstrscc	mvf0, [r1], {2}
     60c:	21030105 	tstcs	r3, r5, lsl #2
     610:	1e05603c 	mcrne	0, 0, r6, cr5, cr12, {1}
     614:	1f053d4c 	svcne	0x00053d4c
     618:	1e053d3d 	mcrne	13, 0, r3, cr5, cr13, {1}
     61c:	3d01053d 	cfstr32cc	mvfx0, [r1, #-244]	; 0xffffff0c
     620:	05661003 	strbeq	r1, [r6, #-3]!
     624:	07057511 	smladeq	r5, r1, r5, r7
     628:	5a0f0542 	bpl	3c1b38 <startup-0x1fc3e4c8>
     62c:	0e054c3e 	mcreq	12, 0, r4, cr5, cr14, {1}
     630:	2e07053e 	mcrcs	5, 0, r0, cr7, cr14, {1}
     634:	05220e05 	streq	r0, [r2, #-3589]!	; 0xfffff1fb
     638:	01052e07 	tsteq	r5, r7, lsl #28
     63c:	4a1c0321 	bmi	7012c8 <startup-0x1f8fed38>
     640:	05750b05 	ldrbeq	r0, [r5, #-2821]!	; 0xfffff4fb
     644:	1305500d 	movwne	r5, #20493	; 0x500d
     648:	3c06052e 	cfstr32cc	mvfx0, [r6], {46}	; 0x2e
     64c:	4e220f05 	cdpmi	15, 2, cr0, cr2, cr5, {0}
     650:	054c0a05 	strbeq	r0, [ip, #-2565]	; 0xfffff5fb
     654:	0a033d01 	beq	cfa60 <startup-0x1ff305a0>
     658:	4e1a054a 	cfmac32mi	mvfx0, mvfx10, mvfx10
     65c:	052e0b05 	streq	r0, [lr, #-2821]!	; 0xfffff4fb
     660:	0c032101 	stfeqs	f2, [r3], {1}
     664:	750b054a 	strvc	r0, [fp, #-1354]	; 0xfffffab6
     668:	05500e05 	ldrbeq	r0, [r0, #-3589]	; 0xfffff1fb
     66c:	06052e15 			; <UNDEFINED> instruction: 0x06052e15
     670:	220f053c 	andcs	r0, pc, #60, 10	; 0xf000000
     674:	4c0a054e 	cfstr32mi	mvfx0, [sl], {78}	; 0x4e
     678:	033d0105 	teqeq	sp, #1073741825	; 0x40000001
     67c:	1a054a0a 	bne	152eac <startup-0x1fead154>
     680:	2e0b054e 	cfsh32cs	mvfx0, mvfx11, #46
     684:	03210105 			; <UNDEFINED> instruction: 0x03210105
     688:	10054a0f 	andne	r4, r5, pc, lsl #20
     68c:	4b010579 	blmi	41c78 <startup-0x1ffbe388>
     690:	054a0f03 	strbeq	r0, [sl, #-3843]	; 0xfffff0fd
     694:	01057910 	tsteq	r5, r0, lsl r9
     698:	4a10034b 	bmi	4013cc <startup-0x1fbfec34>
     69c:	05c00605 	strbeq	r0, [r0, #1541]	; 0x605
     6a0:	01054c12 	tsteq	r5, r2, lsl ip
     6a4:	1e120550 	mrcne	5, 0, r0, cr2, cr0, {2}
     6a8:	034c0105 	movteq	r0, #49413	; 0xc105
     6ac:	0e054a0b 	vmlaeq.f32	s8, s10, s22
     6b0:	4b010578 	blmi	41c98 <startup-0x1ffbe368>
     6b4:	054a0b03 	strbeq	r0, [sl, #-2819]	; 0xfffff4fd
     6b8:	0105780e 	tsteq	r5, lr, lsl #16
     6bc:	00ce0375 	sbceq	r0, lr, r5, ror r3
     6c0:	bb0c054a 	bllt	301bf0 <startup-0x1fcfe410>
     6c4:	350b052f 	strcc	r0, [fp, #-1327]	; 0xfffffad1
     6c8:	052e2305 	streq	r2, [lr, #-773]!	; 0xfffffcfb
     6cc:	08054a59 	stmdaeq	r5, {r0, r3, r4, r6, r9, fp, lr}
     6d0:	3d260520 	cfstr32cc	mvfx0, [r6, #-128]!	; 0xffffff80
     6d4:	05903d05 	ldreq	r3, [r0, #3333]	; 0xd05
     6d8:	39054a73 	stmdbcc	r5, {r0, r1, r4, r5, r6, r9, fp, lr}
     6dc:	3c290520 	cfstr32cc	mvfx0, [r9], #-128	; 0xffffff80
     6e0:	bb202605 	bllt	809efc <startup-0x1f7f6104>
     6e4:	05581605 	ldrbeq	r1, [r8, #-1541]	; 0xfffff9fb
     6e8:	1d054a0a 	vstrne	s8, [r5, #-40]	; 0xffffffd8
     6ec:	5826053d 	stmdapl	r6!, {r0, r2, r3, r4, r5, r8, sl}
     6f0:	02590105 	subseq	r0, r9, #1073741825	; 0x40000001
     6f4:	01010004 	tsteq	r1, r4
     6f8:	000007ab 	andeq	r0, r0, fp, lsr #15
     6fc:	01da0003 	bicseq	r0, sl, r3
     700:	01020000 	mrseq	r0, (UNDEF: 2)
     704:	000d0efb 	strdeq	r0, [sp], -fp
     708:	01010101 	tsteq	r1, r1, lsl #2
     70c:	01000000 	mrseq	r0, (UNDEF: 0)
     710:	43010000 	movwmi	r0, #4096	; 0x1000
     714:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
     718:	2f737265 	svccs	0x00737265
     71c:	32373634 	eorscc	r3, r7, #52, 12	; 0x3400000
     720:	6f442f32 	svcvs	0x00442f32
     724:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
     728:	2f73746e 	svccs	0x0073746e
     72c:	6a6f7250 	bvs	1bdd074 <startup-0x1e422f8c>
     730:	2f746365 	svccs	0x00746365
     734:	334d5453 	movtcc	r5, #54355	; 0xd453
     738:	5f344632 	svcpl	0x00344632
     73c:	2f62696c 	svccs	0x0062696c
     740:	334d5453 	movtcc	r5, #54355	; 0xd453
     744:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
     748:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xfffff088
     74c:	72655064 	rsbvc	r5, r5, #100	; 0x64
     750:	5f687069 	svcpl	0x00687069
     754:	76697244 	strbtvc	r7, [r9], -r4, asr #4
     758:	732f7265 			; <UNDEFINED> instruction: 0x732f7265
     75c:	63006372 	movwvs	r6, #882	; 0x372
     760:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
     764:	70706165 	rsbsvc	r6, r0, r5, ror #2
     768:	646f635c 	strbtvs	r6, [pc], #-860	; 770 <startup-0x1ffff890>
     76c:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
     770:	6f745c65 	svcvs	0x00745c65
     774:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
     778:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
     77c:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
     780:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     784:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
     788:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
     78c:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
     790:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     794:	616d5c65 	cmnvs	sp, r5, ror #24
     798:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
     79c:	3a630065 	bcc	18c0938 <startup-0x1e73f6c8>
     7a0:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
     7a4:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
     7a8:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
     7ac:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
     7b0:	6f6f745c 	svcvs	0x006f745c
     7b4:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
     7b8:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
     7bc:	615c6d72 	cmpvs	ip, r2, ror sp
     7c0:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
     7c4:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
     7c8:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     7cc:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
     7d0:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
     7d4:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
     7d8:	2f3a4300 	svccs	0x003a4300
     7dc:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
     7e0:	36342f73 	shsub16cc	r2, r4, r3
     7e4:	2f323237 	svccs	0x00323237
     7e8:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xfffff0bc
     7ec:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
     7f0:	72702f73 	rsbsvc	r2, r0, #460	; 0x1cc
     7f4:	63656a6f 	cmnvs	r5, #454656	; 0x6f000
     7f8:	54532f74 	ldrbpl	r2, [r3], #-3956	; 0xfffff08c
     7fc:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     800:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
     804:	4d432f62 	stclmi	15, cr2, [r3, #-392]	; 0xfffffe78
     808:	2f534953 	svccs	0x00534953
     80c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     810:	00656475 	rsbeq	r6, r5, r5, ror r4
     814:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffffdd9 <APBAHBPrescTable+0xdfffddc1>
     818:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
     81c:	3736342f 	ldrcc	r3, [r6, -pc, lsr #8]!
     820:	442f3232 	strtmi	r3, [pc], #-562	; 828 <startup-0x1ffff7d8>
     824:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
     828:	73746e65 	cmnvc	r4, #1616	; 0x650
     82c:	6f72702f 	svcvs	0x0072702f
     830:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
     834:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     838:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
     83c:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     840:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     844:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
     848:	535f7878 	cmppl	pc, #120, 16	; 0x780000
     84c:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0xfffffb8c
     850:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     854:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
     858:	2f726576 	svccs	0x00726576
     85c:	00636e69 	rsbeq	r6, r3, r9, ror #28
     860:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     864:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
     868:	725f7878 	subsvc	r7, pc, #120, 16	; 0x780000
     86c:	632e6363 			; <UNDEFINED> instruction: 0x632e6363
     870:	00000100 	andeq	r0, r0, r0, lsl #2
     874:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
     878:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
     87c:	7079745f 	rsbsvc	r7, r9, pc, asr r4
     880:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
     884:	00000200 	andeq	r0, r0, r0, lsl #4
     888:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
     88c:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
     890:	00030068 	andeq	r0, r3, r8, rrx
     894:	726f6300 	rsbvc	r6, pc, #0, 6
     898:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
     89c:	00682e34 	rsbeq	r2, r8, r4, lsr lr
     8a0:	73000004 	movwvc	r0, #4
     8a4:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
     8a8:	74735f6d 	ldrbtvc	r5, [r3], #-3949	; 0xfffff093
     8ac:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     8b0:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
     8b4:	00050068 	andeq	r0, r5, r8, rrx
     8b8:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     8bc:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
     8c0:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
     8c4:	00000500 	andeq	r0, r0, r0, lsl #10
     8c8:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     8cc:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     8d0:	63725f78 	cmnvs	r2, #120, 30	; 0x1e0
     8d4:	00682e63 	rsbeq	r2, r8, r3, ror #28
     8d8:	00000005 	andeq	r0, r0, r5
     8dc:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
     8e0:	00073802 	andeq	r3, r7, r2, lsl #16
     8e4:	01e10320 	mvneq	r0, r0, lsr #6
     8e8:	300b0501 	andcc	r0, fp, r1, lsl #10
     8ec:	05690605 	strbeq	r0, [r9, #-1541]!	; 0xfffff9fb
     8f0:	0b05200d 	bleq	14892c <startup-0x1feb76d4>
     8f4:	69060531 	stmdbvs	r6, {r0, r4, r5, r8, sl}
     8f8:	05201005 	streq	r1, [r0, #-5]!
     8fc:	13053206 	movwne	r3, #20998	; 0x5206
     900:	41060520 	tstmi	r6, r0, lsr #10
     904:	05201305 	streq	r1, [r0, #-773]!	; 0xfffffcfb
     908:	0605400b 	streq	r4, [r5], -fp
     90c:	200c0569 	andcs	r0, ip, r9, ror #10
     910:	05310605 	ldreq	r0, [r1, #-1541]!	; 0xfffff9fb
     914:	01052010 	tsteq	r5, r0, lsl r0
     918:	e4170342 	ldr	r0, [r7], #-834	; 0xfffffcbe
     91c:	056b0305 	strbeq	r0, [fp, #-773]!	; 0xfffffcfb
     920:	03052026 	movweq	r2, #20518	; 0x5026
     924:	20260531 	eorcs	r0, r6, r1, lsr r5
     928:	033d0105 	teqeq	sp, #1073741825	; 0x40000001
     92c:	1105740f 	tstne	r5, pc, lsl #8
     930:	2f0f053d 	svccs	0x000f053d
     934:	053d0e05 	ldreq	r0, [sp, #-3589]!	; 0xfffff1fb
     938:	04020011 	streq	r0, [r2], #-17	; 0xffffffef
     93c:	13054002 	movwne	r4, #20482	; 0x5002
     940:	02040200 	andeq	r0, r4, #0, 4
     944:	001b0567 	andseq	r0, fp, r7, ror #10
     948:	3d020402 	cfstrscc	mvf0, [r2, #-8]
     94c:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
     950:	05200204 	streq	r0, [r0, #-516]!	; 0xfffffdfc
     954:	04020033 	streq	r0, [r2], #-51	; 0xffffffcd
     958:	07054a01 	streq	r4, [r5, -r1, lsl #20]
     95c:	4a06054c 	bmi	181e94 <startup-0x1fe7e16c>
     960:	4e220c05 	cdpmi	12, 2, cr0, cr2, cr5, {0}
     964:	053e0a05 	ldreq	r0, [lr, #-2565]!	; 0xfffff5fb
     968:	0b032f01 	bleq	cc574 <startup-0x1ff33a8c>
     96c:	670c054a 	strvs	r0, [ip, -sl, asr #10]
     970:	05320f05 	ldreq	r0, [r2, #-3845]!	; 0xfffff0fb
     974:	0531200a 	ldreq	r2, [r1, #-10]!
     978:	2b054d0d 	blcs	153db4 <startup-0x1feac24c>
     97c:	200a052e 	andcs	r0, sl, lr, lsr #10
     980:	053f0605 	ldreq	r0, [pc, #-1541]!	; 383 <startup-0x1ffffc7d>
     984:	0105200b 	tsteq	r5, fp
     988:	7415032f 	ldrvc	r0, [r5], #-815	; 0xfffffcd1
     98c:	056a0305 	strbeq	r0, [sl, #-773]!	; 0xfffffcfb
     990:	22052024 	andcs	r2, r5, #36	; 0x24
     994:	2101052e 	tstcs	r1, lr, lsr #10
     998:	05661403 	strbeq	r1, [r6, #-1027]!	; 0xfffffbfd
     99c:	22056c03 	andcs	r6, r5, #768	; 0x300
     9a0:	31030520 	tstcc	r3, r0, lsr #10
     9a4:	05202205 	streq	r2, [r0, #-517]!	; 0xfffffdfb
     9a8:	07053103 	streq	r3, [r5, -r3, lsl #2]
     9ac:	03660b03 	cmneq	r6, #3072	; 0xc00
     9b0:	26052079 			; <UNDEFINED> instruction: 0x26052079
     9b4:	2f070520 	svccs	0x00070520
     9b8:	20260523 	eorcs	r0, r6, r3, lsr #10
     9bc:	052f0705 	streq	r0, [pc, #-1797]!	; 2bf <startup-0x1ffffd41>
     9c0:	0f032401 	svceq	0x00032401
     9c4:	6a030574 	bvs	c1f9c <startup-0x1ff3e064>
     9c8:	05202505 	streq	r2, [r0, #-1285]!	; 0xfffffafb
     9cc:	01052e23 	tsteq	r5, r3, lsr #28
     9d0:	00de0321 	sbcseq	r0, lr, r1, lsr #6
     9d4:	7c1f0566 	cfldr32vc	mvfx0, [pc], {102}	; 0x66
     9d8:	052e1705 	streq	r1, [lr, #-1797]!	; 0xfffff8fb
     9dc:	35052e2f 	strcc	r2, [r5, #-3631]	; 0xfffff1d1
     9e0:	2039052e 	eorscs	r0, r9, lr, lsr #10
     9e4:	05202505 	streq	r2, [r0, #-1285]!	; 0xfffffafb
     9e8:	18052040 	stmdane	r5, {r6, sp}
     9ec:	2d06053d 	cfstr32cs	mvfx0, [r6, #-244]	; 0xffffff0c
     9f0:	05205205 	streq	r5, [r0, #-517]!	; 0xfffffdfb
     9f4:	01052010 	tsteq	r5, r0, lsl r0
     9f8:	660e0322 	strvs	r0, [lr], -r2, lsr #6
     9fc:	05690305 	strbeq	r0, [r9, #-773]!	; 0xfffffcfb
     a00:	22052024 	andcs	r2, r5, #36	; 0x24
     a04:	2101052e 	tstcs	r1, lr, lsr #10
     a08:	05661a03 	strbeq	r1, [r6, #-2563]!	; 0xfffff5fd
     a0c:	2f055d1e 	svccs	0x00055d1e
     a10:	2e06052e 	cfsh32cs	mvfx0, mvfx6, #30
     a14:	05202405 	streq	r2, [r0, #-1029]!	; 0xfffffbfb
     a18:	01052013 	tsteq	r5, r3, lsl r0
     a1c:	0185032f 	orreq	r0, r5, pc, lsr #6
     a20:	69030574 	stmdbvs	r3, {r2, r4, r5, r6, r8, sl}
     a24:	05202705 	streq	r2, [r0, #-1797]!	; 0xfffff8fb
     a28:	01052e25 	tsteq	r5, r5, lsr #28
     a2c:	00e90321 	rsceq	r0, r9, r1, lsr #6
     a30:	6c1e0566 	cfldr32vs	mvfx0, [lr], {102}	; 0x66
     a34:	052e2f05 	streq	r2, [lr, #-3845]!	; 0xfffff0fb
     a38:	41052e24 	tstmi	r5, r4, lsr #28
     a3c:	2e060520 	cfsh32cs	mvfx0, mvfx6, #16
     a40:	05203605 	streq	r3, [r0, #-1541]!	; 0xfffff9fb
     a44:	01052013 	tsteq	r5, r3, lsl r0
     a48:	740d032f 	strvc	r0, [sp], #-815	; 0xfffffcd1
     a4c:	05690305 	strbeq	r0, [r9, #-773]!	; 0xfffffcfb
     a50:	25052027 	strcs	r2, [r5, #-39]	; 0xffffffd9
     a54:	2101052e 	tstcs	r1, lr, lsr #10
     a58:	05660e03 	strbeq	r0, [r6, #-3587]!	; 0xfffff1fd
     a5c:	24056903 	strcs	r6, [r5], #-2307	; 0xfffff6fd
     a60:	2e220520 	cfsh64cs	mvdx0, mvdx2, #16
     a64:	03210105 			; <UNDEFINED> instruction: 0x03210105
     a68:	0c056615 	stceq	6, cr6, [r5], {21}
     a6c:	340f0559 	strcc	r0, [pc], #-1369	; a74 <startup-0x1ffff58c>
     a70:	31200a05 			; <UNDEFINED> instruction: 0x31200a05
     a74:	054d1c05 	strbeq	r1, [sp, #-3077]	; 0xfffff3fb
     a78:	06053c0a 	streq	r3, [r5], -sl, lsl #24
     a7c:	200d053f 	andcs	r0, sp, pc, lsr r5
     a80:	03330105 	teqeq	r3, #1073741825	; 0x40000001
     a84:	0c059018 	stceq	0, cr9, [r5], {24}
     a88:	340f0559 	strcc	r0, [pc], #-1369	; a90 <startup-0x1ffff570>
     a8c:	31200a05 			; <UNDEFINED> instruction: 0x31200a05
     a90:	054d1c05 	strbeq	r1, [sp, #-3077]	; 0xfffff3fb
     a94:	06053c0a 	streq	r3, [r5], -sl, lsl #24
     a98:	200d053f 	andcs	r0, sp, pc, lsr r5
     a9c:	03330105 	teqeq	r3, #1073741825	; 0x40000001
     aa0:	057401b3 	ldrbeq	r0, [r4, #-435]!	; 0xfffffe4d
     aa4:	0f054b0c 	svceq	0x00054b0c
     aa8:	200a0533 	andcs	r0, sl, r3, lsr r5
     aac:	06054d31 			; <UNDEFINED> instruction: 0x06054d31
     ab0:	200d054d 	andcs	r0, sp, sp, asr #10
     ab4:	032f0105 			; <UNDEFINED> instruction: 0x032f0105
     ab8:	1805660d 	stmdane	r5, {r0, r2, r3, r9, sl, sp, lr}
     abc:	2e0b052f 	cfsh32cs	mvfx0, mvfx11, #31
     ac0:	034b0105 	movteq	r0, #45317	; 0xb105
     ac4:	0c056617 	stceq	6, cr6, [r5], {23}
     ac8:	330f054b 	movwcc	r0, #62795	; 0xf54b
     acc:	31200a05 			; <UNDEFINED> instruction: 0x31200a05
     ad0:	4d06054d 	cfstr32mi	mvfx0, [r6, #-308]	; 0xfffffecc
     ad4:	05200d05 	streq	r0, [r0, #-3333]!	; 0xfffff2fb
     ad8:	0f032f01 	svceq	0x00032f01
     adc:	4b0c0566 	blmi	30207c <startup-0x1fcfdf84>
     ae0:	05330f05 	ldreq	r0, [r3, #-3845]!	; 0xfffff0fb
     ae4:	4d31200a 	ldcmi	0, cr2, [r1, #-40]!	; 0xffffffd8
     ae8:	054d0605 	strbeq	r0, [sp, #-1541]	; 0xfffff9fb
     aec:	0105200d 	tsteq	r5, sp
     af0:	820f032f 	andhi	r0, pc, #-1140850688	; 0xbc000000
     af4:	054b0c05 	strbeq	r0, [fp, #-3077]	; 0xfffff3fb
     af8:	0a05330f 	beq	14d73c <startup-0x1feb28c4>
     afc:	16053120 	strne	r3, [r5], -r0, lsr #2
     b00:	2e0a054d 	cfsh32cs	mvfx0, mvfx10, #45
     b04:	053f0605 	ldreq	r0, [pc, #-1541]!	; 507 <startup-0x1ffffaf9>
     b08:	0105200d 	tsteq	r5, sp
     b0c:	9024032f 	eorls	r0, r4, pc, lsr #6
     b10:	054b0c05 	strbeq	r0, [fp, #-3077]	; 0xfffff3fb
     b14:	20052e15 	andcs	r2, r5, r5, lsl lr
     b18:	2e2c052e 	cfsh64cs	mvdx0, mvdx12, #30
     b1c:	052e3605 	streq	r3, [lr, #-1541]!	; 0xfffff9fb
     b20:	0c052e45 	stceq	14, cr2, [r5], {69}	; 0x45
     b24:	2e070534 	mcrcs	5, 0, r0, cr7, cr4, {1}
     b28:	053e0305 	ldreq	r0, [lr, #-773]!	; 0xfffffcfb
     b2c:	0505cb22 	streq	ip, [r5, #-2850]	; 0xfffff4de
     b30:	2222053d 	eorcs	r0, r2, #255852544	; 0xf400000
     b34:	053d0505 	ldreq	r0, [sp, #-1285]!	; 0xfffffafb
     b38:	35052615 	strcc	r2, [r5, #-1557]	; 0xfffff9eb
     b3c:	200f052e 	andcs	r0, pc, lr, lsr #10
     b40:	2e0a053d 	mcrcs	5, 0, r0, cr10, cr13, {1}
     b44:	053e0805 	ldreq	r0, [lr, #-2053]!	; 0xfffff7fb
     b48:	2a053f1b 	bcs	1507bc <startup-0x1feaf844>
     b4c:	2e480566 	cdpcs	5, 4, cr0, cr8, cr6, {3}
     b50:	053c0e05 	ldreq	r0, [ip, #-3589]!	; 0xfffff1fb
     b54:	2a05411b 	bcs	150fc8 <startup-0x1feaf038>
     b58:	2e480566 	cdpcs	5, 4, cr0, cr8, cr6, {3}
     b5c:	053c0e05 	ldreq	r0, [ip, #-3589]!	; 0xfffff1fb
     b60:	30053112 	andcc	r3, r5, r2, lsl r1
     b64:	3c36052e 	cfldr32cc	mvfx0, [r6], #-184	; 0xffffff48
     b68:	05200a05 	streq	r0, [r0, #-2565]!	; 0xfffff5fb
     b6c:	22052f2a 	andcs	r2, r5, #42, 30	; 0xa8
     b70:	2f050566 	svccs	0x00050566
     b74:	1b032205 	blne	c9390 <startup-0x1ff36c70>
     b78:	3d050520 	cfstr32cc	mvfx0, [r5, #-128]	; 0xffffff80
     b7c:	05250c05 	streq	r0, [r5, #-3077]!	; 0xfffff3fb
     b80:	053d2e07 	ldreq	r2, [sp, #-3591]!	; 0xfffff1f9
     b84:	09053d1b 	stmdbeq	r5, {r0, r1, r3, r4, r8, sl, fp, ip, sp}
     b88:	222a0558 	eorcs	r0, sl, #88, 10	; 0x16000000
     b8c:	052e3d05 	streq	r3, [lr, #-3333]!	; 0xfffff2fb
     b90:	0c052e1e 	stceq	14, cr2, [r5], {30}
     b94:	2e070531 	mcrcs	5, 0, r0, cr7, cr1, {1}
     b98:	3d1b054b 	cfldr32cc	mvfx0, [fp, #-300]	; 0xfffffed4
     b9c:	05580905 	ldrbeq	r0, [r8, #-2309]	; 0xfffff6fb
     ba0:	3c05222b 	sfmcc	f2, 4, [r5], {43}	; 0x2b
     ba4:	2e1f052e 	cfmul64cs	mvdx0, mvdx15, mvdx14
     ba8:	05310c05 	ldreq	r0, [r1, #-3077]!	; 0xfffff3fb
     bac:	054b2e07 	strbeq	r2, [fp, #-3591]	; 0xfffff1f9
     bb0:	09053d1b 	stmdbeq	r5, {r0, r1, r3, r4, r8, sl, fp, ip, sp}
     bb4:	222b0558 	eorcs	r0, fp, #88, 10	; 0x16000000
     bb8:	052e3c05 	streq	r3, [lr, #-3077]!	; 0xfffff3fb
     bbc:	01052e1f 	tsteq	r5, pc, lsl lr
     bc0:	ba3f032f 	blt	fc1884 <startup-0x1f03e77c>
     bc4:	054b0c05 	strbeq	r0, [fp, #-3077]	; 0xfffff3fb
     bc8:	06053319 			; <UNDEFINED> instruction: 0x06053319
     bcc:	4c11054a 	cfldr32mi	mvfx0, [r1], {74}	; 0x4a
     bd0:	31200c05 			; <UNDEFINED> instruction: 0x31200c05
     bd4:	054d2105 	strbeq	r2, [sp, #-261]	; 0xfffffefb
     bd8:	08053c0c 	stmdaeq	r5, {r2, r3, sl, fp, ip, sp}
     bdc:	200f053f 	andcs	r0, pc, pc, lsr r5	; <UNPREDICTABLE>
     be0:	05320d05 	ldreq	r0, [r2, #-3333]!	; 0xfffff2fb
     be4:	0d052e22 	stceq	14, cr2, [r5, #-136]	; 0xffffff78
     be8:	3d01053c 	cfstr32cc	mvfx0, [r1, #-240]	; 0xffffff10
     bec:	059e0a03 	ldreq	r0, [lr, #2563]	; 0xa03
     bf0:	26056a03 	strcs	r6, [r5], -r3, lsl #20
     bf4:	2e240520 	cfsh64cs	mvdx0, mvdx4, #16
     bf8:	03210105 			; <UNDEFINED> instruction: 0x03210105
     bfc:	0305660c 	movweq	r6, #22028	; 0x560c
     c00:	20260569 	eorcs	r0, r6, r9, ror #10
     c04:	052e2405 	streq	r2, [lr, #-1029]!	; 0xfffffbfb
     c08:	b8032101 	stmdalt	r3, {r0, r8, sp}
     c0c:	03056601 	movweq	r6, #22017	; 0x5601
     c10:	2025054e 	eorcs	r0, r5, lr, asr #10
     c14:	032f0105 			; <UNDEFINED> instruction: 0x032f0105
     c18:	0c057416 	cfstrseq	mvf7, [r5], {22}
     c1c:	330f054b 	movwcc	r0, #62795	; 0xf54b
     c20:	3f200a05 	svccc	0x00200a05
     c24:	4d06054d 	cfstr32mi	mvfx0, [r6, #-308]	; 0xfffffecc
     c28:	05201005 	streq	r1, [r0, #-5]!
     c2c:	14033d01 	strne	r3, [r3], #-3329	; 0xfffff2ff
     c30:	4b0c0582 	blmi	302240 <startup-0x1fcfddc0>
     c34:	05330f05 	ldreq	r0, [r3, #-3845]!	; 0xfffff0fb
     c38:	4d3f200a 	ldcmi	0, cr2, [pc, #-40]!	; c18 <startup-0x1ffff3e8>
     c3c:	054d0605 	strbeq	r0, [sp, #-1541]	; 0xfffff9fb
     c40:	01052010 	tsteq	r5, r0, lsl r0
     c44:	8211033d 	andshi	r0, r1, #-201326592	; 0xf4000000
     c48:	054b0c05 	strbeq	r0, [fp, #-3077]	; 0xfffff3fb
     c4c:	0a05330f 	beq	14d890 <startup-0x1feb2770>
     c50:	1d053f20 	stcne	15, cr3, [r5, #-128]	; 0xffffff80
     c54:	2e0a054d 	cfsh32cs	mvfx0, mvfx10, #45
     c58:	053f0605 	ldreq	r0, [pc, #-1541]!	; 65b <startup-0x1ffff9a5>
     c5c:	01052010 	tsteq	r5, r0, lsl r0
     c60:	7410033d 	ldrvc	r0, [r0], #-829	; 0xfffffcc3
     c64:	054b0c05 	strbeq	r0, [fp, #-3077]	; 0xfffff3fb
     c68:	0a05330f 	beq	14d8ac <startup-0x1feb2754>
     c6c:	1e053f20 	cdpne	15, 0, cr3, cr5, cr0, {1}
     c70:	2e23054d 	cfsh64cs	mvdx0, mvdx3, #45
     c74:	05200a05 	streq	r0, [r0, #-2565]!	; 0xfffff5fb
     c78:	10053f06 	andne	r3, r5, r6, lsl #30
     c7c:	3d010520 	cfstr32cc	mvfx0, [r1, #-128]	; 0xffffff80
     c80:	8200d303 	andhi	sp, r0, #201326592	; 0xc000000
     c84:	054b0c05 	strbeq	r0, [fp, #-3077]	; 0xfffff3fb
     c88:	0a05330f 	beq	14d8cc <startup-0x1feb2734>
     c8c:	054d3f20 	strbeq	r3, [sp, #-3872]	; 0xfffff0e0
     c90:	10054d06 	andne	r4, r5, r6, lsl #26
     c94:	3d010520 	cfstr32cc	mvfx0, [r1, #-128]	; 0xffffff80
     c98:	8200f003 	andhi	pc, r0, #3
     c9c:	054e0305 	strbeq	r0, [lr, #-773]	; 0xfffffcfb
     ca0:	01052028 	tsteq	r5, r8, lsr #32
     ca4:	7425032f 	strtvc	r0, [r5], #-815	; 0xfffffcd1
     ca8:	05790605 	ldrbeq	r0, [r9, #-1541]!	; 0xfffff9fb
     cac:	01054c12 	tsteq	r5, r2, lsl ip
     cb0:	1e12056c 	cfmsc32ne	mvfx0, mvfx2, mvfx12
     cb4:	052e1505 	streq	r1, [lr, #-1285]!	; 0xfffffafb
     cb8:	01052e12 	tsteq	r5, r2, lsl lr
     cbc:	7413033e 	ldrvc	r0, [r3], #-830	; 0xfffffcc2
     cc0:	05790605 	ldrbeq	r0, [r9, #-1541]!	; 0xfffff9fb
     cc4:	01054c12 	tsteq	r5, r2, lsl ip
     cc8:	1e12056c 	cfmsc32ne	mvfx0, mvfx2, mvfx12
     ccc:	052e1505 	streq	r1, [lr, #-1285]!	; 0xfffffafb
     cd0:	01052e12 	tsteq	r5, r2, lsl lr
     cd4:	7411033e 	ldrvc	r0, [r1], #-830	; 0xfffffcc2
     cd8:	05790605 	ldrbeq	r0, [r9, #-1541]!	; 0xfffff9fb
     cdc:	01054c12 	tsteq	r5, r2, lsl ip
     ce0:	1e12056c 	cfmsc32ne	mvfx0, mvfx2, mvfx12
     ce4:	052e1505 	streq	r1, [lr, #-1285]!	; 0xfffffafb
     ce8:	01052e12 	tsteq	r5, r2, lsl lr
     cec:	742c033e 	strtvc	r0, [ip], #-830	; 0xfffffcc2
     cf0:	05790605 	ldrbeq	r0, [r9, #-1541]!	; 0xfffff9fb
     cf4:	01054c12 	tsteq	r5, r2, lsl ip
     cf8:	1e12056c 	cfmsc32ne	mvfx0, mvfx2, mvfx12
     cfc:	052e1505 	streq	r1, [lr, #-1285]!	; 0xfffffafb
     d00:	01052e12 	tsteq	r5, r2, lsl lr
     d04:	7427033e 	strtvc	r0, [r7], #-830	; 0xfffffcc2
     d08:	05790605 	ldrbeq	r0, [r9, #-1541]!	; 0xfffff9fb
     d0c:	01054c12 	tsteq	r5, r2, lsl ip
     d10:	1e12056c 	cfmsc32ne	mvfx0, mvfx2, mvfx12
     d14:	052e1505 	streq	r1, [lr, #-1285]!	; 0xfffffafb
     d18:	01052e12 	tsteq	r5, r2, lsl lr
     d1c:	741d033e 	ldrvc	r0, [sp], #-830	; 0xfffffcc2
     d20:	05790605 	ldrbeq	r0, [r9, #-1541]!	; 0xfffff9fb
     d24:	01054c13 	tsteq	r5, r3, lsl ip
     d28:	1e13056c 	cfmsc32ne	mvfx0, mvfx3, mvfx12
     d2c:	052e1605 	streq	r1, [lr, #-1541]!	; 0xfffff9fb
     d30:	01052e13 	tsteq	r5, r3, lsl lr
     d34:	7410033e 	ldrvc	r0, [r0], #-830	; 0xfffffcc2
     d38:	05790605 	ldrbeq	r0, [r9, #-1541]!	; 0xfffff9fb
     d3c:	01054c13 	tsteq	r5, r3, lsl ip
     d40:	1e13056c 	cfmsc32ne	mvfx0, mvfx3, mvfx12
     d44:	052e1605 	streq	r1, [lr, #-1541]!	; 0xfffff9fb
     d48:	01052e13 	tsteq	r5, r3, lsl lr
     d4c:	740e033e 	strvc	r0, [lr], #-830	; 0xfffffcc2
     d50:	05790605 	ldrbeq	r0, [r9, #-1541]!	; 0xfffff9fb
     d54:	01054c13 	tsteq	r5, r3, lsl ip
     d58:	1e13056c 	cfmsc32ne	mvfx0, mvfx3, mvfx12
     d5c:	052e1605 	streq	r1, [lr, #-1541]!	; 0xfffff9fb
     d60:	01052e13 	tsteq	r5, r3, lsl lr
     d64:	7429033e 	strtvc	r0, [r9], #-830	; 0xfffffcc2
     d68:	05780605 	ldrbeq	r0, [r8, #-1541]!	; 0xfffff9fb
     d6c:	01054c13 	tsteq	r5, r3, lsl ip
     d70:	1e13056c 	cfmsc32ne	mvfx0, mvfx3, mvfx12
     d74:	052e1605 	streq	r1, [lr, #-1541]!	; 0xfffff9fb
     d78:	01052e13 	tsteq	r5, r3, lsl lr
     d7c:	7423033e 	strtvc	r0, [r3], #-830	; 0xfffffcc2
     d80:	05780605 	ldrbeq	r0, [r8, #-1541]!	; 0xfffff9fb
     d84:	01054c13 	tsteq	r5, r3, lsl ip
     d88:	1e13056c 	cfmsc32ne	mvfx0, mvfx3, mvfx12
     d8c:	052e1605 	streq	r1, [lr, #-1541]!	; 0xfffff9fb
     d90:	01052e13 	tsteq	r5, r3, lsl lr
     d94:	7425033e 	strtvc	r0, [r5], #-830	; 0xfffffcc2
     d98:	05780605 	ldrbeq	r0, [r8, #-1541]!	; 0xfffff9fb
     d9c:	01054c14 	tsteq	r5, r4, lsl ip
     da0:	1e14056c 	cfmsc32ne	mvfx0, mvfx4, mvfx12
     da4:	052e1705 	streq	r1, [lr, #-1797]!	; 0xfffff8fb
     da8:	01052e14 	tsteq	r5, r4, lsl lr
     dac:	7414033e 	ldrvc	r0, [r4], #-830	; 0xfffffcc2
     db0:	05780605 	ldrbeq	r0, [r8, #-1541]!	; 0xfffff9fb
     db4:	01054c14 	tsteq	r5, r4, lsl ip
     db8:	1e14056c 	cfmsc32ne	mvfx0, mvfx4, mvfx12
     dbc:	052e1705 	streq	r1, [lr, #-1797]!	; 0xfffff8fb
     dc0:	01052e14 	tsteq	r5, r4, lsl lr
     dc4:	7412033e 	ldrvc	r0, [r2], #-830	; 0xfffffcc2
     dc8:	05780605 	ldrbeq	r0, [r8, #-1541]!	; 0xfffff9fb
     dcc:	01054c14 	tsteq	r5, r4, lsl ip
     dd0:	1e14056c 	cfmsc32ne	mvfx0, mvfx4, mvfx12
     dd4:	052e1705 	streq	r1, [lr, #-1797]!	; 0xfffff8fb
     dd8:	01052e14 	tsteq	r5, r4, lsl lr
     ddc:	742d033e 	strtvc	r0, [sp], #-830	; 0xfffffcc2
     de0:	05780605 	ldrbeq	r0, [r8, #-1541]!	; 0xfffff9fb
     de4:	01054c14 	tsteq	r5, r4, lsl ip
     de8:	1e14056c 	cfmsc32ne	mvfx0, mvfx4, mvfx12
     dec:	052e1705 	streq	r1, [lr, #-1797]!	; 0xfffff8fb
     df0:	01052e14 	tsteq	r5, r4, lsl lr
     df4:	7428033e 	strtvc	r0, [r8], #-830	; 0xfffffcc2
     df8:	05780605 	ldrbeq	r0, [r8, #-1541]!	; 0xfffff9fb
     dfc:	01054c14 	tsteq	r5, r4, lsl ip
     e00:	1e14056c 	cfmsc32ne	mvfx0, mvfx4, mvfx12
     e04:	052e1705 	streq	r1, [lr, #-1797]!	; 0xfffff8fb
     e08:	01052e14 	tsteq	r5, r4, lsl lr
     e0c:	740c033e 	strvc	r0, [ip], #-830	; 0xfffffcc2
     e10:	4c6a0505 	cfstr64mi	mvdx0, [sl], #-20	; 0xffffffec
     e14:	056c0105 	strbeq	r0, [ip, #-261]!	; 0xfffffefb
     e18:	01051e05 	tsteq	r5, r5, lsl #28
     e1c:	02ac0368 	adceq	r0, ip, #104, 6	; 0xa0000001
     e20:	94060574 	strls	r0, [r6], #-1396	; 0xfffffa8c
     e24:	054d2905 	strbeq	r2, [sp, #-2309]	; 0xfffff6fb
     e28:	29059701 	stmdbcs	r5, {r0, r8, r9, sl, ip, pc}
     e2c:	3c2c051e 	cfstr32cc	mvfx0, [ip], #-120	; 0xffffff88
     e30:	054a2905 	strbeq	r2, [sl, #-2309]	; 0xfffff6fb
     e34:	17034c01 	strne	r4, [r3, -r1, lsl #24]
     e38:	670c0566 	strvs	r0, [ip, -r6, ror #10]
     e3c:	2f0e052f 	svccs	0x000e052f
     e40:	05501205 	ldrbeq	r1, [r0, #-517]	; 0xfffffdfb
     e44:	06054a07 	streq	r4, [r5], -r7, lsl #20
     e48:	3e140521 	cfmul64cc	mvdx0, mvdx4, mvdx1
     e4c:	05200f05 	streq	r0, [r0, #-3845]!	; 0xfffff0fb
     e50:	14053e0b 	strne	r3, [r5], #-3595	; 0xfffff1f5
     e54:	200f053e 	andcs	r0, pc, lr, lsr r5	; <UNPREDICTABLE>
     e58:	05401405 	strbeq	r1, [r0, #-1029]	; 0xfffffbfb
     e5c:	1205200f 	andne	r2, r5, #15
     e60:	2e070532 	mcrcs	5, 0, r0, cr7, cr2, {1}
     e64:	053d2a05 	ldreq	r2, [sp, #-2565]!	; 0xfffff5fb
     e68:	0f056606 	svceq	0x00056606
     e6c:	0a055c22 	beq	157efc <startup-0x1fea8104>
     e70:	3d01054d 	cfstr32cc	mvfx0, [r1, #-308]	; 0xfffffecc
     e74:	05660a03 	strbeq	r0, [r6, #-2563]!	; 0xfffff5fd
     e78:	0105300c 	tsteq	r5, ip
     e7c:	58110375 	ldmdapl	r1, {r0, r2, r4, r5, r6, r8, r9}
     e80:	05670c05 	strbeq	r0, [r7, #-3077]!	; 0xfffff3fb
     e84:	1105500b 	tstne	r5, fp
     e88:	3c06052e 	cfstr32cc	mvfx0, [r6], {46}	; 0x2e
     e8c:	4e220f05 	cdpmi	15, 2, cr0, cr2, cr5, {0}
     e90:	054d0b05 	strbeq	r0, [sp, #-2821]	; 0xfffff4fb
     e94:	11033d01 	tstne	r3, r1, lsl #26
     e98:	6c030574 	cfstr32vs	mvfx0, [r3], {116}	; 0x74
     e9c:	05202705 	streq	r2, [r0, #-1797]!	; 0xfffff8fb
     ea0:	06023d01 	streq	r3, [r2], -r1, lsl #26
     ea4:	cf010100 	svcgt	0x00010100
     ea8:	03000000 	movweq	r0, #0
     eac:	00003f00 	andeq	r3, r0, r0, lsl #30
     eb0:	fb010200 	blx	416ba <startup-0x1ffbe946>
     eb4:	01000d0e 	tsteq	r0, lr, lsl #26
     eb8:	00010101 	andeq	r0, r1, r1, lsl #2
     ebc:	00010000 	andeq	r0, r1, r0
     ec0:	3a430100 	bcc	10c12c8 <startup-0x1ef3ed38>
     ec4:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
     ec8:	342f7372 	strtcc	r7, [pc], #-882	; ed0 <startup-0x1ffff130>
     ecc:	32323736 	eorscc	r3, r2, #14155776	; 0xd80000
     ed0:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
     ed4:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
     ed8:	502f7374 	eorpl	r7, pc, r4, ror r3	; <UNPREDICTABLE>
     edc:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xfffff08e
     ee0:	00007463 	andeq	r7, r0, r3, ror #8
     ee4:	72617375 	rsbvc	r7, r1, #-738197503	; 0xd4000001
     ee8:	00632e74 	rsbeq	r2, r3, r4, ror lr
     eec:	00000001 	andeq	r0, r0, r1
     ef0:	05001905 	streq	r1, [r0, #-2309]	; 0xfffff6fb
     ef4:	00143402 	andseq	r3, r4, r2, lsl #8
     ef8:	01140320 	tsteq	r4, r0, lsr #6
     efc:	05680b05 	strbeq	r0, [r8, #-2821]!	; 0xfffff4fb
     f00:	04020014 	streq	r0, [r2], #-20	; 0xffffffec
     f04:	19052001 	stmdbne	r5, {r0, sp}
     f08:	01040200 	mrseq	r0, R12_usr
     f0c:	000b053c 	andeq	r0, fp, ip, lsr r5
     f10:	3c010402 	cfstrscc	mvf0, [r1], {2}
     f14:	20120522 	andscs	r0, r2, r2, lsr #10
     f18:	053c1005 	ldreq	r1, [ip, #-5]!
     f1c:	09052107 	stmdbeq	r5, {r0, r1, r2, r8, sp}
     f20:	3d01054b 	cfstr32cc	mvfx0, [r1, #-300]	; 0xfffffed4
     f24:	05681605 	strbeq	r1, [r8, #-1541]!	; 0xfffff9fb
     f28:	15053010 	strne	r3, [r5, #-16]
     f2c:	3c07053c 	cfstr32cc	mvfx0, [r7], {60}	; 0x3c
     f30:	05211005 	streq	r1, [r1, #-5]!
     f34:	0c052f19 	stceq	15, cr2, [r5], {25}
     f38:	2101053c 	tstcs	r1, ip, lsr r5
     f3c:	055a1505 	ldrbeq	r1, [sl, #-1285]	; 0xfffffafb
     f40:	1305300a 	movwne	r3, #20490	; 0x500a
     f44:	01040200 	mrseq	r0, R12_usr
     f48:	00180520 	andseq	r0, r8, r0, lsr #10
     f4c:	3c010402 	cfstrscc	mvf0, [r1], {2}
     f50:	02000a05 	andeq	r0, r0, #20480	; 0x5000
     f54:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
     f58:	0c052119 	stfeqs	f2, [r5], {25}
     f5c:	2101053c 	tstcs	r1, ip, lsr r5
     f60:	05681405 	strbeq	r1, [r8, #-1029]!	; 0xfffffbfb
     f64:	15054b0b 	strne	r4, [r5, #-2827]	; 0xfffff4f5
     f68:	3c090521 	cfstr32cc	mvfx0, [r9], {33}	; 0x21
     f6c:	05490c05 	strbeq	r0, [r9, #-3077]	; 0xfffff3fb
     f70:	01052e0b 	tsteq	r5, fp, lsl #28
     f74:	00050230 	andeq	r0, r5, r0, lsr r2
     f78:	059c0101 	ldreq	r0, [ip, #257]	; 0x101
     f7c:	00030000 	andeq	r0, r3, r0
     f80:	000001f1 	strdeq	r0, [r0], -r1
     f84:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     f88:	0101000d 	tsteq	r1, sp
     f8c:	00000101 	andeq	r0, r0, r1, lsl #2
     f90:	00000100 	andeq	r0, r0, r0, lsl #2
     f94:	2f3a4301 	svccs	0x003a4301
     f98:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
     f9c:	36342f73 	shsub16cc	r2, r4, r3
     fa0:	2f323237 	svccs	0x00323237
     fa4:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xfffff0bc
     fa8:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
     fac:	72502f73 	subsvc	r2, r0, #460	; 0x1cc
     fb0:	63656a6f 	cmnvs	r5, #454656	; 0x6f000
     fb4:	54532f74 	ldrbpl	r2, [r3], #-3956	; 0xfffff08c
     fb8:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     fbc:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
     fc0:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
     fc4:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     fc8:	5f787834 	svcpl	0x00787834
     fcc:	50647453 	rsbpl	r7, r4, r3, asr r4
     fd0:	70697265 	rsbvc	r7, r9, r5, ror #4
     fd4:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
     fd8:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
     fdc:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
     fe0:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
     fe4:	61657363 	cmnvs	r5, r3, ror #6
     fe8:	635c7070 	cmpvs	ip, #112	; 0x70
     fec:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
     ff0:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
     ff4:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; e2c <startup-0x1ffff1d4>
     ff8:	63675c73 	cmnvs	r7, #29440	; 0x7300
     ffc:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    1000:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
    1004:	6f6e2d6d 	svcvs	0x006e2d6d
    1008:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    100c:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    1010:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    1014:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    1018:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    101c:	00656e69 	rsbeq	r6, r5, r9, ror #28
    1020:	635c3a63 	cmpvs	ip, #405504	; 0x63000
    1024:	70616573 	rsbvc	r6, r1, r3, ror r5
    1028:	6f635c70 	svcvs	0x00635c70
    102c:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
    1030:	745c6574 	ldrbvc	r6, [ip], #-1396	; 0xfffffa8c
    1034:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    1038:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    103c:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    1040:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    1044:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    1048:	61652d65 	cmnvs	r5, r5, ror #26
    104c:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    1050:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    1054:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
    1058:	43007379 	movwmi	r7, #889	; 0x379
    105c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
    1060:	2f737265 	svccs	0x00737265
    1064:	32373634 	eorscc	r3, r7, #52, 12	; 0x3400000
    1068:	6f442f32 	svcvs	0x00442f32
    106c:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
    1070:	2f73746e 	svccs	0x0073746e
    1074:	6a6f7270 	bvs	1bdda3c <startup-0x1e4225c4>
    1078:	2f746365 	svccs	0x00746365
    107c:	334d5453 	movtcc	r5, #54355	; 0xd453
    1080:	5f344632 	svcpl	0x00344632
    1084:	2f62696c 	svccs	0x0062696c
    1088:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
    108c:	6e692f53 	mcrvs	15, 3, r2, cr9, cr3, {2}
    1090:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    1094:	3a430065 	bcc	10c1230 <startup-0x1ef3edd0>
    1098:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
    109c:	342f7372 	strtcc	r7, [pc], #-882	; 10a4 <startup-0x1fffef5c>
    10a0:	32323736 	eorscc	r3, r2, #14155776	; 0xd80000
    10a4:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
    10a8:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
    10ac:	702f7374 	eorvc	r7, pc, r4, ror r3	; <UNPREDICTABLE>
    10b0:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xfffff08e
    10b4:	532f7463 			; <UNDEFINED> instruction: 0x532f7463
    10b8:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    10bc:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
    10c0:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
    10c4:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    10c8:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    10cc:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0xfffffca1
    10d0:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    10d4:	445f6870 	ldrbmi	r6, [pc], #-2160	; 10dc <startup-0x1fffef24>
    10d8:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    10dc:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    10e0:	73000063 	movwvc	r0, #99	; 0x63
    10e4:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    10e8:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    10ec:	6173755f 	cmnvs	r3, pc, asr r5
    10f0:	632e7472 			; <UNDEFINED> instruction: 0x632e7472
    10f4:	00000100 	andeq	r0, r0, r0, lsl #2
    10f8:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    10fc:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    1100:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    1104:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    1108:	00000200 	andeq	r0, r0, r0, lsl #4
    110c:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
    1110:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    1114:	00030068 	andeq	r0, r3, r8, rrx
    1118:	726f6300 	rsbvc	r6, pc, #0, 6
    111c:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
    1120:	00682e34 	rsbeq	r2, r8, r4, lsr lr
    1124:	73000004 	movwvc	r0, #4
    1128:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
    112c:	74735f6d 	ldrbtvc	r5, [r3], #-3949	; 0xfffff093
    1130:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    1134:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
    1138:	00050068 	andeq	r0, r5, r8, rrx
    113c:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    1140:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
    1144:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
    1148:	00000500 	andeq	r0, r0, r0, lsl #10
    114c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    1150:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    1154:	73755f78 	cmnvc	r5, #120, 30	; 0x1e0
    1158:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
    115c:	00050068 	andeq	r0, r5, r8, rrx
    1160:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    1164:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
    1168:	725f7878 	subsvc	r7, pc, #120, 16	; 0x780000
    116c:	682e6363 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, sp, lr}
    1170:	00000500 	andeq	r0, r0, r0, lsl #10
    1174:	00010500 	andeq	r0, r1, r0, lsl #10
    1178:	14f00205 	ldrbtne	r0, [r0], #517	; 0x205
    117c:	bb032000 	bllt	c9184 <startup-0x1ff36e7c>
    1180:	06050101 	streq	r0, [r5], -r1, lsl #2
    1184:	4c05054e 	cfstr32mi	mvfx0, [r5], {78}	; 0x4e
    1188:	0301054b 	movweq	r0, #5451	; 0x154b
    118c:	0b054a28 	bleq	153a34 <startup-0x1feac5cc>
    1190:	05205a03 	streq	r5, [r0, #-2563]!	; 0xfffff5fd
    1194:	05674c05 	strbeq	r4, [r7, #-3077]!	; 0xfffff3fb
    1198:	66230301 	strtvs	r0, [r3], -r1, lsl #6
    119c:	5f030b05 	svcpl	0x00030b05
    11a0:	4c050520 	cfstr32mi	mvfx0, [r5], {32}
    11a4:	03010567 	movweq	r0, #5479	; 0x1567
    11a8:	0b05661e 	bleq	15aa28 <startup-0x1fea55d8>
    11ac:	05206403 	streq	r6, [r0, #-1027]!	; 0xfffffbfd
    11b0:	05674c05 	strbeq	r4, [r7, #-3077]!	; 0xfffff3fb
    11b4:	66190301 	ldrvs	r0, [r9], -r1, lsl #6
    11b8:	69030b05 	stmdbvs	r3, {r0, r2, r8, r9, fp}
    11bc:	4c050520 	cfstr32mi	mvfx0, [r5], {32}
    11c0:	03010567 	movweq	r0, #5479	; 0x1567
    11c4:	0b056614 	bleq	15aa1c <startup-0x1fea55e4>
    11c8:	05206e03 	streq	r6, [r0, #-3587]!	; 0xfffff1fd
    11cc:	054b4c05 	strbeq	r4, [fp, #-3077]	; 0xfffff3fb
    11d0:	4a0f0301 	bmi	3c1ddc <startup-0x1fc3e224>
    11d4:	73030b05 	movwvc	r0, #15109	; 0x3b05
    11d8:	4c050520 	cfstr32mi	mvfx0, [r5], {32}
    11dc:	03010567 	movweq	r0, #5479	; 0x1567
    11e0:	0805660a 	stmdaeq	r5, {r1, r3, r9, sl, sp, lr}
    11e4:	05207a03 	streq	r7, [r0, #-2563]!	; 0xfffff5fd
    11e8:	05674c07 	strbeq	r4, [r7, #-3079]!	; 0xfffff3f9
    11ec:	0c036901 			; <UNDEFINED> instruction: 0x0c036901
    11f0:	0c054a08 			; <UNDEFINED> instruction: 0x0c054a08
    11f4:	2e1b0559 	mrccs	5, 0, r0, cr11, cr9, {2}
    11f8:	2f2f0c05 	svccs	0x002f0c05
    11fc:	13031205 	movwne	r1, #12805	; 0x3205
    1200:	3c0a052e 	cfstr32cc	mvfx0, [sl], {46}	; 0x2e
    1204:	4e270523 	cfsh64mi	mvdx0, mvdx7, #19
    1208:	052e0d05 	streq	r0, [lr, #-3333]!	; 0xfffff2fb
    120c:	1105200a 	tstne	r5, sl
    1210:	2e0f053f 	mcrcs	5, 0, r0, cr15, cr15, {1}
    1214:	05311205 	ldreq	r1, [r1, #-517]!	; 0xfffffdfb
    1218:	05233c0a 	streq	r3, [r3, #-3082]!	; 0xfffff3f6
    121c:	4c055027 	stcmi	0, cr5, [r5], {39}	; 0x27
    1220:	2e5b052e 	cdpcs	5, 5, cr0, cr11, cr14, {1}
    1224:	052f1d05 	streq	r1, [pc, #-3333]!	; 527 <startup-0x1ffffad9>
    1228:	0a052d5b 	beq	14c79c <startup-0x1feb3864>
    122c:	4011053c 	andsmi	r0, r1, ip, lsr r5
    1230:	052e0f05 	streq	r0, [lr, #-3845]!	; 0xfffff0fb
    1234:	0a053112 	beq	14d684 <startup-0x1feb297c>
    1238:	1d05233c 	stcne	3, cr2, [r5, #-240]	; 0xffffff10
    123c:	3c0a054e 	cfstr32cc	mvfx0, [sl], {78}	; 0x4e
    1240:	053f1105 	ldreq	r1, [pc, #-261]!	; 1143 <startup-0x1fffeebd>
    1244:	03052e0f 	movweq	r2, #24079	; 0x5e0f
    1248:	5a060532 	bpl	182718 <startup-0x1fe7d8e8>
    124c:	02001a05 	andeq	r1, r0, #20480	; 0x5000
    1250:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
    1254:	4e5c4c0e 	cdpmi	12, 5, cr4, cr12, cr14, {0}
    1258:	053c2705 	ldreq	r2, [ip, #-1797]!	; 0xfffff8fb
    125c:	1b052006 	blne	14927c <startup-0x1feb6d84>
    1260:	663f0531 			; <UNDEFINED> instruction: 0x663f0531
    1264:	052e2c05 	streq	r2, [lr, #-3077]!	; 0xfffff3fb
    1268:	1b052014 	blne	1492c0 <startup-0x1feb6d40>
    126c:	663f0579 			; <UNDEFINED> instruction: 0x663f0579
    1270:	052e2c05 	streq	r2, [lr, #-3077]!	; 0xfffff3fb
    1274:	1c052014 	stcne	0, cr2, [r5], {20}
    1278:	660a0568 	strvs	r0, [sl], -r8, ror #10
    127c:	05313705 	ldreq	r3, [r1, #-1797]!	; 0xfffff8fb
    1280:	15052e2d 	strne	r2, [r5, #-3629]	; 0xfffff1d3
    1284:	3f0e052e 	svccc	0x000e052e
    1288:	053c2705 	ldreq	r2, [ip, #-1797]!	; 0xfffff8fb
    128c:	25052006 	strcs	r2, [r5, #-6]
    1290:	2e2a0530 	mcrcs	5, 1, r0, cr10, cr0, {1}
    1294:	05203005 	streq	r3, [r0, #-5]!
    1298:	0c056638 	stceq	6, cr6, [r5], {56}	; 0x38
    129c:	4e25052e 	cfsh64mi	mvdx0, mvdx5, #30
    12a0:	052e2b05 	streq	r2, [lr, #-2821]!	; 0xfffff4fb
    12a4:	39052031 	stmdbcc	r5, {r0, r4, r5, sp}
    12a8:	2e0c0566 	cfsh32cs	mvfx0, mvfx12, #54
    12ac:	05401105 	strbeq	r1, [r0, #-261]	; 0xfffffefb
    12b0:	01052e0f 	tsteq	r5, pc, lsl #28
    12b4:	d609032f 	strle	r0, [r9], -pc, lsr #6
    12b8:	054c2405 	strbeq	r2, [ip, #-1029]	; 0xfffffbfb
    12bc:	24054b26 	strcs	r4, [r5], #-2854	; 0xfffff4da
    12c0:	3d22053d 	cfstr32cc	mvfx0, [r2, #-244]!	; 0xffffff0c
    12c4:	053d2005 	ldreq	r2, [sp, #-5]!
    12c8:	01053d2f 	tsteq	r5, pc, lsr #26
    12cc:	4a0c033d 	bmi	301fc8 <startup-0x1fcfe038>
    12d0:	05590c05 	ldrbeq	r0, [r9, #-3077]	; 0xfffff3fb
    12d4:	2e090312 	mcrcs	3, 0, r0, cr9, cr2, {0}
    12d8:	223c0a05 	eorscs	r0, ip, #20480	; 0x5000
    12dc:	05502c05 	ldrbeq	r2, [r0, #-3077]	; 0xfffff3fb
    12e0:	34052e51 	strcc	r2, [r5], #-3665	; 0xfffff1af
    12e4:	2e27052f 	cfsh64cs	mvdx0, mvdx7, #31
    12e8:	052e3405 	streq	r3, [lr, #-1029]!	; 0xfffffbfb
    12ec:	34052e4b 	strcc	r2, [r5], #-3659	; 0xfffff1b5
    12f0:	3b0a052e 	blcc	2827b0 <startup-0x1fd7d850>
    12f4:	053f1105 	ldreq	r1, [pc, #-261]!	; 11f7 <startup-0x1fffee09>
    12f8:	01052e0f 	tsteq	r5, pc, lsl #28
    12fc:	6609032f 	strvs	r0, [r9], -pc, lsr #6
    1300:	054c2605 	strbeq	r2, [ip, #-1541]	; 0xfffff9fb
    1304:	053d3d25 	ldreq	r3, [sp, #-3365]!	; 0xfffff2db
    1308:	01053d28 	tsteq	r5, r8, lsr #26
    130c:	4a0b033d 	bmi	2c2008 <startup-0x1fd3dff8>
    1310:	05790605 	ldrbeq	r0, [r9, #-1541]!	; 0xfffff9fb
    1314:	01054d11 	tsteq	r5, r1, lsl sp
    1318:	1e110597 	cfcmp32ne	r0, mvfx1, mvfx7
    131c:	03840105 	orreq	r0, r4, #1073741825	; 0x40000001
    1320:	1005740b 	andne	r7, r5, fp, lsl #8
    1324:	01058479 	tsteq	r5, r9, ror r4
    1328:	4a0d039f 	bmi	3421ac <startup-0x1fcbde54>
    132c:	05790605 	ldrbeq	r0, [r9, #-1541]!	; 0xfffff9fb
    1330:	01054d11 	tsteq	r5, r1, lsl sp
    1334:	1e110589 	cdpne	5, 1, cr0, cr1, cr9, {4}
    1338:	03840105 	orreq	r0, r4, #1073741825	; 0x40000001
    133c:	0605740b 	streq	r7, [r5], -fp, lsl #8
    1340:	4d110579 	cfldr32mi	mvfx0, [r1, #-484]	; 0xfffffe1c
    1344:	05970105 	ldreq	r0, [r7, #261]	; 0x105
    1348:	01051e11 	tsteq	r5, r1, lsl lr
    134c:	742a0384 	strtvc	r0, [sl], #-900	; 0xfffffc7c
    1350:	057a1605 	ldrbeq	r1, [sl, #-1541]!	; 0xfffff9fb
    1354:	0105580e 	tsteq	r5, lr, lsl #16
    1358:	4a09032f 	bmi	24201c <startup-0x1fdbdfe4>
    135c:	054f1b05 	strbeq	r1, [pc, #-2821]	; 85f <startup-0x1ffff7a1>
    1360:	01053c0a 	tsteq	r5, sl, lsl #24
    1364:	4a2e033d 	bmi	b82060 <startup-0x1f47dfa0>
    1368:	847a0f05 	ldrbthi	r0, [sl], #-3845	; 0xfffff0fb
    136c:	039f0105 	orrseq	r0, pc, #1073741825	; 0x40000001
    1370:	06054a0b 	streq	r4, [r5], -fp, lsl #20
    1374:	4d110579 	cfldr32mi	mvfx0, [r1, #-484]	; 0xfffffe1c
    1378:	05890105 	streq	r0, [r9, #261]	; 0x105
    137c:	01051e11 	tsteq	r5, r1, lsl lr
    1380:	4a0c0384 	bmi	302198 <startup-0x1fcfde68>
    1384:	83790f05 	cmnhi	r9, #5, 30
    1388:	03910105 	orrseq	r0, r1, #1073741825	; 0x40000001
    138c:	0f05743e 	svceq	0x0005743e
    1390:	01058379 	tsteq	r5, r9, ror r3
    1394:	4a0b0391 	bmi	2c21e0 <startup-0x1fd3de20>
    1398:	05790605 	ldrbeq	r0, [r9, #-1541]!	; 0xfffff9fb
    139c:	01054d11 	tsteq	r5, r1, lsl sp
    13a0:	1e110597 	cfcmp32ne	r0, mvfx1, mvfx7
    13a4:	03840105 	orreq	r0, r4, #1073741825	; 0x40000001
    13a8:	0f057409 	svceq	0x00057409
    13ac:	8301054f 	movwhi	r0, #5455	; 0x154f
    13b0:	054a2f03 	strbeq	r2, [sl, #-3843]	; 0xfffff0fd
    13b4:	11057906 	tstne	r5, r6, lsl #18
    13b8:	8901054d 	stmdbhi	r1, {r0, r2, r3, r6, r8, sl}
    13bc:	051e1105 	ldreq	r1, [lr, #-261]	; 0xfffffefb
    13c0:	c5038401 	strgt	r8, [r3, #-1025]	; 0xfffffbff
    13c4:	10054a00 	andne	r4, r5, r0, lsl #20
    13c8:	13058479 	movwne	r8, #21625	; 0x5479
    13cc:	5810053c 	ldmdapl	r0, {r2, r3, r4, r5, r8, sl}
    13d0:	034b0105 	movteq	r0, #45317	; 0xb105
    13d4:	06054a0b 	streq	r4, [r5], -fp, lsl #20
    13d8:	4d110578 	cfldr32mi	mvfx0, [r1, #-480]	; 0xfffffe20
    13dc:	05890105 	streq	r0, [r9, #261]	; 0x105
    13e0:	01051e11 	tsteq	r5, r1, lsl lr
    13e4:	4a0b0384 	bmi	2c21fc <startup-0x1fd3de04>
    13e8:	05780605 	ldrbeq	r0, [r8, #-1541]!	; 0xfffff9fb
    13ec:	01054d11 	tsteq	r5, r1, lsl sp
    13f0:	1e110589 	cdpne	5, 1, cr0, cr1, cr9, {4}
    13f4:	03840105 	orreq	r0, r4, #1073741825	; 0x40000001
    13f8:	0f054a39 	svceq	0x00054a39
    13fc:	01058379 	tsteq	r5, r9, ror r3
    1400:	4a0b0391 	bmi	2c224c <startup-0x1fd3ddb4>
    1404:	05790605 	ldrbeq	r0, [r9, #-1541]!	; 0xfffff9fb
    1408:	01054d11 	tsteq	r5, r1, lsl sp
    140c:	1e110589 	cdpne	5, 1, cr0, cr1, cr9, {4}
    1410:	03840105 	orreq	r0, r4, #1073741825	; 0x40000001
    1414:	06054a1f 			; <UNDEFINED> instruction: 0x06054a1f
    1418:	4e1105c0 	cftruncs32mi	mvfx0, mvf1
    141c:	05980105 	ldreq	r0, [r8, #261]	; 0x105
    1420:	14051e11 	strne	r1, [r5], #-3601	; 0xfffff1ef
    1424:	4a11053c 	bmi	44291c <startup-0x1fbbd6e4>
    1428:	034c0105 	movteq	r0, #49413	; 0xc105
    142c:	054a00f2 	strbeq	r0, [sl, #-242]	; 0xffffff0e
    1430:	1d05bb0c 	vstrne	d11, [r5, #-48]	; 0xffffffd0
    1434:	2e2b052e 	cfsh64cs	mvdx0, mvdx11, #30
    1438:	052f0c05 	streq	r0, [pc, #-3077]!	; 83b <startup-0x1ffff7c5>
    143c:	2e0c030e 	cdpcs	3, 0, cr0, cr12, cr14, {0}
    1440:	05311005 	ldreq	r1, [r1, #-5]!
    1444:	0c053c23 	stceq	12, cr3, [r5], {35}	; 0x23
    1448:	2314052e 	tstcs	r4, #192937984	; 0xb800000
    144c:	052e0905 	streq	r0, [lr, #-2309]!	; 0xfffff6fb
    1450:	06053d0a 	streq	r3, [r5], -sl, lsl #26
    1454:	3e10055a 	mrccc	5, 0, r0, cr0, cr10, {2}
    1458:	054c0b05 	strbeq	r0, [ip, #-2821]	; 0xfffff4fb
    145c:	054e3e10 	strbeq	r3, [lr, #-3600]	; 0xfffff1f0
    1460:	22053e06 	andcs	r3, r5, #6, 28	; 0x60
    1464:	6c01054c 	cfstr32vs	mvfx0, [r1], {76}	; 0x4c
    1468:	051e2105 	ldreq	r2, [lr, #-261]	; 0xfffffefb
    146c:	21052e24 	tstcs	r5, r4, lsr #28
    1470:	3e01052e 	cfsh32cc	mvfx0, mvfx1, #30
    1474:	054a1503 	strbeq	r1, [sl, #-1283]	; 0xfffffafd
    1478:	0b03750e 	bleq	de8b8 <startup-0x1ff21748>
    147c:	3c21054a 	cfstr32cc	mvfx0, [r1], #-296	; 0xfffffed8
    1480:	054a0605 	strbeq	r0, [sl, #-1541]	; 0xfffff9fb
    1484:	054e300f 	strbeq	r3, [lr, #-15]
    1488:	01054c0a 	tsteq	r5, sl, lsl #24
    148c:	4a1c033d 	bmi	702188 <startup-0x1f8fde78>
    1490:	0b031005 	bleq	c54ac <startup-0x1ff3ab54>
    1494:	4a0e0574 	bmi	382a6c <startup-0x1fc7d594>
    1498:	032f0105 			; <UNDEFINED> instruction: 0x032f0105
    149c:	0c054a16 			; <UNDEFINED> instruction: 0x0c054a16
    14a0:	2e1b0575 	mrccs	5, 0, r0, cr11, cr5, {3}
    14a4:	052e2a05 	streq	r2, [lr, #-2565]!	; 0xfffff5fb
    14a8:	10052f0c 	andne	r2, r5, ip, lsl #30
    14ac:	054a0c03 	strbeq	r0, [sl, #-3075]	; 0xfffff3fd
    14b0:	0c053c23 	stceq	12, cr3, [r5], {35}	; 0x23
    14b4:	2215052e 	andscs	r0, r5, #192937984	; 0xb800000
    14b8:	3d2e0a05 	vstmdbcc	lr!, {s0-s4}
    14bc:	055a0605 	ldrbeq	r0, [sl, #-1541]	; 0xfffff9fb
    14c0:	0c053e15 	stceq	14, cr3, [r5], {21}
    14c4:	4c0b054a 	cfstr32mi	mvfx0, [fp], {74}	; 0x4a
    14c8:	053e1505 	ldreq	r1, [lr, #-1285]!	; 0xfffffafb
    14cc:	15054a0c 	strne	r4, [r5, #-2572]	; 0xfffff5f4
    14d0:	4a0c054e 	bmi	302a10 <startup-0x1fcfd5f0>
    14d4:	053f1505 	ldreq	r1, [pc, #-1285]!	; fd7 <startup-0x1ffff029>
    14d8:	05214a0a 	streq	r4, [r1, #-2570]!	; 0xfffff5f6
    14dc:	0a055913 	beq	157930 <startup-0x1fea86d0>
    14e0:	3d06054a 	cfstr32cc	mvfx0, [r6, #-296]	; 0xfffffed8
    14e4:	02002205 	andeq	r2, r0, #1342177280	; 0x50000000
    14e8:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
    14ec:	055c3e0f 	ldrbeq	r3, [ip, #-3599]	; 0xfffff1f1
    14f0:	01054d0a 	tsteq	r5, sl, lsl #26
    14f4:	4a1d033d 	bmi	7421f0 <startup-0x1f8bde10>
    14f8:	05750c05 	ldrbeq	r0, [r5, #-3077]!	; 0xfffff3fb
    14fc:	0a054a1b 	beq	153d70 <startup-0x1feac290>
    1500:	054a0b03 	strbeq	r0, [sl, #-2819]	; 0xfffff4fd
    1504:	1c05591f 			; <UNDEFINED> instruction: 0x1c05591f
    1508:	2e0a052e 	cfsh32cs	mvfx0, mvfx10, #30
    150c:	052f1005 	streq	r1, [pc, #-5]!	; 150f <startup-0x1fffeaf1>
    1510:	01054a0e 	tsteq	r5, lr, lsl #20
    1514:	0004022f 	andeq	r0, r4, pc, lsr #4
    1518:	Address 0x00001518 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	4f495047 	svcmi	0x00495047
       4:	7079545f 	rsbsvc	r5, r9, pc, asr r4
       8:	66654465 	strbtvs	r4, [r5], -r5, ror #8
       c:	73657200 	cmnvc	r5, #0, 4
      10:	00746c75 	rsbseq	r6, r4, r5, ror ip
      14:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
      18:	6e692074 	mcrvs	0, 3, r2, cr9, cr4, {3}
      1c:	50470074 	subpl	r0, r7, r4, ror r0
      20:	4f5f4f49 	svcmi	0x005f4f49
      24:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
      28:	00444f5f 	subeq	r4, r4, pc, asr pc
      2c:	6e69616d 	powvsez	f6, f1, #5.0
      30:	755f5f00 	ldrbvc	r5, [pc, #-3840]	; fffff138 <APBAHBPrescTable+0xdfffd120>
      34:	33746e69 	cmncc	r4, #1680	; 0x690
      38:	00745f32 	rsbseq	r5, r4, r2, lsr pc
      3c:	69755f5f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
      40:	3631746e 	ldrtcc	r7, [r1], -lr, ror #8
      44:	4700745f 	smlsdmi	r0, pc, r4, r7	; <UNPREDICTABLE>
      48:	5f4f4950 	svcpl	0x004f4950
      4c:	7079544f 	rsbsvc	r5, r9, pc, asr #8
      50:	50470065 	subpl	r0, r7, r5, rrx
      54:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]	; ffffff38 <APBAHBPrescTable+0xdfffdf20>
      58:	5f65646f 	svcpl	0x0065646f
      5c:	45004641 	strmi	r4, [r0, #-1601]	; 0xfffff9bf
      60:	4c42414e 	stfmie	f4, [r2], {78}	; 0x4e
      64:	50470045 	subpl	r0, r7, r5, asr #32
      68:	535f4f49 	cmppl	pc, #292	; 0x124
      6c:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
      70:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
      74:	6f4d5f4f 	svcvs	0x004d5f4f
      78:	415f6564 	cmpmi	pc, r4, ror #10
      7c:	656b004e 	strbvs	r0, [fp, #-78]!	; 0xffffffb2
      80:	64617079 	strbtvs	r7, [r1], #-121	; 0xffffff87
      84:	74754f5f 	ldrbtvc	r4, [r5], #-3935	; 0xfffff0a1
      88:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
      8c:	79544f4f 	ldmdbvc	r4, {r0, r1, r2, r3, r6, r8, r9, sl, fp, lr}^
      90:	545f6570 	ldrbpl	r6, [pc], #-1392	; 98 <startup-0x1fffff68>
      94:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
      98:	4f006665 	svcmi	0x00006665
      9c:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0xfffff6ac
      a0:	50470052 	subpl	r0, r7, r2, asr r0
      a4:	505f4f49 	subspl	r4, pc, r9, asr #30
      a8:	6c006e69 	stcvs	14, cr6, [r0], {105}	; 0x69
      ac:	20676e6f 	rsbcs	r6, r7, pc, ror #28
      b0:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
      b4:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
      b8:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
      bc:	6f4d5f4f 	svcvs	0x004d5f4f
      c0:	4f5f6564 	svcmi	0x005f6564
      c4:	50005455 	andpl	r5, r0, r5, asr r4
      c8:	52445055 	subpl	r5, r4, #85	; 0x55
      cc:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
      d0:	6f4d5f4f 	svcvs	0x004d5f4f
      d4:	495f6564 	ldmdbmi	pc, {r2, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
      d8:	5342004e 	movtpl	r0, #8270	; 0x204e
      dc:	00485252 	subeq	r5, r8, r2, asr r2
      e0:	45444f4d 	strbmi	r4, [r4, #-3917]	; 0xfffff0b3
      e4:	53420052 	movtpl	r0, #8274	; 0x2052
      e8:	004c5252 	subeq	r5, ip, r2, asr r2
      ec:	4f495047 	svcmi	0x00495047
      f0:	6769485f 			; <UNDEFINED> instruction: 0x6769485f
      f4:	70535f68 	subsvc	r5, r3, r8, ror #30
      f8:	00646565 	rsbeq	r6, r4, r5, ror #10
      fc:	4f495047 	svcmi	0x00495047
     100:	79544f5f 	ldmdbvc	r4, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, lr}^
     104:	505f6570 	subspl	r6, pc, r0, ror r5	; <UNPREDICTABLE>
     108:	6e750050 	mrcvs	0, 3, r0, cr5, cr0, {2}
     10c:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
     110:	63206465 			; <UNDEFINED> instruction: 0x63206465
     114:	00726168 	rsbseq	r6, r2, r8, ror #2
     118:	20554e47 	subscs	r4, r5, r7, asr #28
     11c:	20393943 	eorscs	r3, r9, r3, asr #18
     120:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
     124:	30322031 	eorscc	r2, r2, r1, lsr r0
     128:	30313931 	eorscc	r3, r1, r1, lsr r9
     12c:	28203532 	stmdacs	r0!, {r1, r4, r5, r8, sl, ip, sp}
     130:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
     134:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
     138:	52415b20 	subpl	r5, r1, #32, 22	; 0x8000
     13c:	72612f4d 	rsbvc	r2, r1, #308	; 0x134
     140:	2d392d6d 	ldccs	13, cr2, [r9, #-436]!	; 0xfffffe4c
     144:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
     148:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
     14c:	73697665 	cmnvc	r9, #105906176	; 0x6500000
     150:	206e6f69 	rsbcs	r6, lr, r9, ror #30
     154:	35373732 	ldrcc	r3, [r7, #-1842]!	; 0xfffff8ce
     158:	205d3939 	subscs	r3, sp, r9, lsr r9
     15c:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
     160:	20626d75 	rsbcs	r6, r2, r5, ror sp
     164:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
     168:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
     16c:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
     170:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
     174:	616d2d20 	cmnvs	sp, r0, lsr #26
     178:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
     17c:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
     180:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
     184:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
     188:	2d20304f 	stccs	0, cr3, [r0, #-316]!	; 0xfffffec4
     18c:	3d647473 	cfstrdcc	mvd7, [r4, #-460]!	; 0xfffffe34
     190:	00393963 	eorseq	r3, r9, r3, ror #18
     194:	4f495047 	svcmi	0x00495047
     198:	5075505f 	rsbspl	r5, r5, pc, asr r0
     19c:	6f6c0064 	svcvs	0x006c0064
     1a0:	6c20676e 	stcvs	7, cr6, [r0], #-440	; 0xfffffe48
     1a4:	20676e6f 	rsbcs	r6, r7, pc, ror #28
     1a8:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
     1ac:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
     1b0:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
     1b4:	69727000 	ldmdbvs	r2!, {ip, sp, lr}^
     1b8:	4700746e 	strmi	r7, [r0, -lr, ror #8]
     1bc:	5f4f4950 	svcpl	0x004f4950
     1c0:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
     1c4:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     1c8:	00666544 	rsbeq	r6, r6, r4, asr #10
     1cc:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
     1d0:	6e752074 	mrcvs	0, 3, r2, cr5, cr4, {3}
     1d4:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
     1d8:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
     1dc:	4300746e 	movwmi	r7, #1134	; 0x46e
     1e0:	73555c3a 	cmpvc	r5, #14848	; 0x3a00
     1e4:	5c737265 	lfmpl	f7, 2, [r3], #-404	; 0xfffffe6c
     1e8:	32373634 	eorscc	r3, r7, #52, 12	; 0x3400000
     1ec:	6f445c32 	svcvs	0x00445c32
     1f0:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
     1f4:	5c73746e 	cfldrdpl	mvd7, [r3], #-440	; 0xfffffe48
     1f8:	6a6f7250 	bvs	1bdcb40 <startup-0x1e4234c0>
     1fc:	5c746365 	ldclpl	3, cr6, [r4], #-404	; 0xfffffe6c
     200:	6a6f7250 	bvs	1bdcb48 <startup-0x1e4234b8>
     204:	5f746365 	svcpl	0x00746365
     208:	7079656b 	rsbsvc	r6, r9, fp, ror #10
     20c:	6b006461 	blvs	19398 <startup-0x1ffe6c68>
     210:	6f627965 	svcvs	0x00627965
     214:	41647261 	cmnmi	r4, r1, ror #4
     218:	76697463 	strbtvc	r7, [r9], -r3, ror #8
     21c:	00657461 	rsbeq	r7, r5, r1, ror #8
     220:	4f495047 	svcmi	0x00495047
     224:	7361465f 	cmnvc	r1, #99614720	; 0x5f00000
     228:	70535f74 	subsvc	r5, r3, r4, ror pc
     22c:	00646565 	rsbeq	r6, r4, r5, ror #10
     230:	6279656b 	rsbsvs	r6, r9, #448790528	; 0x1ac00000
     234:	6472616f 	ldrbtvs	r6, [r2], #-367	; 0xfffffe91
     238:	53494400 	movtpl	r4, #37888	; 0x9400
     23c:	454c4241 	strbmi	r4, [ip, #-577]	; 0xfffffdbf
     240:	2f3a4300 	svccs	0x003a4300
     244:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
     248:	36342f73 	shsub16cc	r2, r4, r3
     24c:	2f323237 	svccs	0x00323237
     250:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xfffff0bc
     254:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
     258:	72502f73 	subsvc	r2, r0, #460	; 0x1cc
     25c:	63656a6f 	cmnvs	r5, #454656	; 0x6f000
     260:	72502f74 	subsvc	r2, r0, #116, 30	; 0x1d0
     264:	63656a6f 	cmnvs	r5, #454656	; 0x6f000
     268:	656b5f74 	strbvs	r5, [fp, #-3956]!	; 0xfffff08c
     26c:	64617079 	strbtvs	r7, [r1], #-121	; 0xffffff87
     270:	6174732f 	cmnvs	r4, pc, lsr #6
     274:	70757472 	rsbsvc	r7, r5, r2, ror r4
     278:	5300632e 	movwpl	r6, #814	; 0x32e
     27c:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
     280:	726f436d 	rsbvc	r4, pc, #-1275068415	; 0xb4000001
     284:	6f6c4365 	svcvs	0x006c4365
     288:	47006b63 	strmi	r6, [r0, -r3, ror #22]
     28c:	5f4f4950 	svcpl	0x004f4950
     290:	5f776f4c 	svcpl	0x00776f4c
     294:	65657053 	strbvs	r7, [r5, #-83]!	; 0xffffffad
     298:	50470064 	subpl	r0, r7, r4, rrx
     29c:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]	; 180 <startup-0x1ffffe80>
     2a0:	75696465 	strbvc	r6, [r9, #-1125]!	; 0xfffffb9b
     2a4:	70535f6d 	subsvc	r5, r3, sp, ror #30
     2a8:	00646565 	rsbeq	r6, r4, r5, ror #10
     2ac:	4550534f 	ldrbmi	r5, [r0, #-847]	; 0xfffffcb1
     2b0:	00524445 	subseq	r4, r2, r5, asr #8
     2b4:	6279656b 	rsbsvs	r6, r9, #448790528	; 0x1ac00000
     2b8:	6472616f 	ldrbtvs	r6, [r2], #-367	; 0xfffffe91
     2bc:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
     2c0:	6d756c6f 	ldclvs	12, cr6, [r5, #-444]!	; 0xfffffe44
     2c4:	5047006e 	subpl	r0, r7, lr, rrx
     2c8:	70534f49 	subsvc	r4, r3, r9, asr #30
     2cc:	5f646565 	svcpl	0x00646565
     2d0:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     2d4:	00666544 	rsbeq	r6, r6, r4, asr #10
     2d8:	4f495047 	svcmi	0x00495047
     2dc:	5075505f 	rsbspl	r5, r5, pc, asr r0
     2e0:	4f445f64 	svcmi	0x00445f64
     2e4:	47004e57 	smlsdmi	r0, r7, lr, r4
     2e8:	5f4f4950 	svcpl	0x004f4950
     2ec:	64507550 	ldrbvs	r7, [r0], #-1360	; 0xfffffab0
     2f0:	504f4e5f 	subpl	r4, pc, pc, asr lr	; <UNPREDICTABLE>
     2f4:	004c4c55 	subeq	r4, ip, r5, asr ip
     2f8:	5f707061 	svcpl	0x00707061
     2fc:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
     300:	695f5f00 	ldmdbvs	pc, {r8, r9, sl, fp, ip, lr}^	; <UNPREDICTABLE>
     304:	3233746e 	eorscc	r7, r3, #1845493760	; 0x6e000000
     308:	4700745f 	smlsdmi	r0, pc, r4, r7	; <UNPREDICTABLE>
     30c:	504f4950 	subpl	r4, pc, r0, asr r9	; <UNPREDICTABLE>
     310:	5f645075 	svcpl	0x00645075
     314:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     318:	00666544 	rsbeq	r6, r6, r4, asr #10
     31c:	4f495047 	svcmi	0x00495047
     320:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
     324:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     328:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     32c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     330:	75505f4f 	ldrbvc	r5, [r0, #-3919]	; 0xfffff0b1
     334:	555f6450 	ldrbpl	r6, [pc, #-1104]	; fffffeec <APBAHBPrescTable+0xdfffded4>
     338:	656b0050 	strbvs	r0, [fp, #-80]!	; 0xffffffb0
     33c:	64617079 	strbtvs	r7, [r1], #-121	; 0xffffff87
     340:	006e495f 	rsbeq	r4, lr, pc, asr r9
     344:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
     348:	00707574 	rsbseq	r7, r0, r4, ror r5
     34c:	5f4d5449 	svcpl	0x004d5449
     350:	75427852 	strbvc	r7, [r2, #-2130]	; 0xfffff7ae
     354:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
     358:	74756f00 	ldrbtvc	r6, [r5], #-3840	; 0xfffff100
     35c:	67657337 			; <UNDEFINED> instruction: 0x67657337
     360:	4b434c00 	blmi	10d3368 <startup-0x1ef2cc98>
     364:	50470052 	subpl	r0, r7, r2, asr r0
     368:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]	; 24c <startup-0x1ffffdb4>
     36c:	0065646f 	rsbeq	r6, r5, pc, ror #8
     370:	706e6970 	rsbvc	r6, lr, r0, ror r9
     374:	4200736f 	andmi	r7, r0, #-1140850687	; 0xbc000001
     378:	535f7469 	cmppl	pc, #1761607680	; 0x69000000
     37c:	47005445 	strmi	r5, [r0, -r5, asr #8]
     380:	5f4f4950 	svcpl	0x004f4950
     384:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
     388:	7074754f 	rsbsvc	r7, r4, pc, asr #10
     38c:	61447475 	hvcvs	18245	; 0x4745
     390:	47006174 	smlsdxmi	r0, r4, r1, r6
     394:	5f4f4950 	svcpl	0x004f4950
     398:	74004641 	strvc	r4, [r0], #-1601	; 0xfffff9bf
     39c:	00706d65 	rsbseq	r6, r0, r5, ror #26
     3a0:	4f495047 	svcmi	0x00495047
     3a4:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
     3a8:	49746375 	ldmdbmi	r4!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}^
     3ac:	0074696e 	rsbseq	r6, r4, lr, ror #18
     3b0:	56746942 	ldrbtpl	r6, [r4], -r2, asr #18
     3b4:	42006c61 	andmi	r6, r0, #24832	; 0x6100
     3b8:	525f7469 	subspl	r7, pc, #1761607680	; 0x69000000
     3bc:	54455345 	strbpl	r5, [r5], #-837	; 0xfffffcbb
     3c0:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     3c4:	72575f4f 	subsvc	r5, r7, #316	; 0x13c
     3c8:	42657469 	rsbmi	r7, r5, #1761607680	; 0x69000000
     3cc:	47007469 	strmi	r7, [r0, -r9, ror #8]
     3d0:	5f4f4950 	svcpl	0x004f4950
     3d4:	42746553 	rsbsmi	r6, r4, #348127232	; 0x14c00000
     3d8:	00737469 	rsbseq	r7, r3, r9, ror #8
     3dc:	4f495047 	svcmi	0x00495047
     3e0:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
     3e4:	50470074 	subpl	r0, r7, r4, ror r0
     3e8:	525f4f49 	subspl	r4, pc, #292	; 0x124
     3ec:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
     3f0:	73746942 	cmnvc	r4, #1081344	; 0x108000
     3f4:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     3f8:	65445f4f 	strbvs	r5, [r4, #-3919]	; 0xfffff0b1
     3fc:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
     400:	755f5f00 	ldrbvc	r5, [pc, #-3840]	; fffff508 <APBAHBPrescTable+0xdfffd4f0>
     404:	38746e69 	ldmdacc	r4!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
     408:	4700745f 	smlsdmi	r0, pc, r4, r7	; <UNPREDICTABLE>
     40c:	5f4f4950 	svcpl	0x004f4950
     410:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
     414:	75706e49 	ldrbvc	r6, [r0, #-3657]!	; 0xfffff1b7
     418:	74614474 	strbtvc	r4, [r1], #-1140	; 0xfffffb8c
     41c:	74694261 	strbtvc	r4, [r9], #-609	; 0xfffffd9f
     420:	74696200 	strbtvc	r6, [r9], #-512	; 0xfffffe00
     424:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
     428:	47007375 	smlsdxmi	r0, r5, r3, r7
     42c:	5f4f4950 	svcpl	0x004f4950
     430:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
     434:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0xfffffbad
     438:	50007463 	andpl	r7, r0, r3, ror #8
     43c:	5674726f 	ldrbtpl	r7, [r4], -pc, ror #4
     440:	47006c61 	strmi	r6, [r0, -r1, ror #24]
     444:	5f4f4950 	svcpl	0x004f4950
     448:	536e6950 	cmnpl	lr, #80, 18	; 0x140000
     44c:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     450:	50470065 	subpl	r0, r7, r5, rrx
     454:	525f4f49 	subspl	r4, pc, #292	; 0x124
     458:	49646165 	stmdbmi	r4!, {r0, r2, r5, r6, r8, sp, lr}^
     45c:	7475706e 	ldrbtvc	r7, [r5], #-110	; 0xffffff92
     460:	61746144 	cmnvs	r4, r4, asr #2
     464:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     468:	69505f4f 	ldmdbvs	r0, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     46c:	636f4c6e 	cmnvs	pc, #28160	; 0x6e00
     470:	6e6f436b 	cdpvs	3, 6, cr4, cr15, cr11, {3}
     474:	00676966 	rsbeq	r6, r7, r6, ror #18
     478:	41746942 	cmnmi	r4, r2, asr #18
     47c:	6f697463 	svcvs	0x00697463
     480:	7563006e 	strbvc	r0, [r3, #-110]!	; 0xffffff92
     484:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
     488:	6e697074 	mcrvs	0, 3, r7, cr9, cr4, {3}
     48c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     490:	72575f4f 	subsvc	r5, r7, #316	; 0x13c
     494:	00657469 	rsbeq	r7, r5, r9, ror #8
     498:	4f495047 	svcmi	0x00495047
     49c:	50470078 	subpl	r0, r7, r8, ror r0
     4a0:	545f4f49 	ldrbpl	r4, [pc], #-3913	; 4a8 <startup-0x1ffffb58>
     4a4:	6c67676f 	stclvs	7, cr6, [r7], #-444	; 0xfffffe44
     4a8:	74694265 	strbtvc	r4, [r9], #-613	; 0xfffffd9b
     4ac:	65740073 	ldrbvs	r0, [r4, #-115]!	; 0xffffff8d
     4b0:	325f706d 	subscc	r7, pc, #109	; 0x6d
     4b4:	2f3a4300 	svccs	0x003a4300
     4b8:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
     4bc:	36342f73 	shsub16cc	r2, r4, r3
     4c0:	2f323237 	svccs	0x00323237
     4c4:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xfffff0bc
     4c8:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
     4cc:	72502f73 	subsvc	r2, r0, #460	; 0x1cc
     4d0:	63656a6f 	cmnvs	r5, #454656	; 0x6f000
     4d4:	54532f74 	ldrbpl	r2, [r3], #-3956	; 0xfffff08c
     4d8:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     4dc:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
     4e0:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
     4e4:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     4e8:	5f787834 	svcpl	0x00787834
     4ec:	50647453 	rsbpl	r7, r4, r3, asr r4
     4f0:	70697265 	rsbvc	r7, r9, r5, ror #4
     4f4:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
     4f8:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
     4fc:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
     500:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!	; 0xffffff44
     504:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
     508:	675f7878 			; <UNDEFINED> instruction: 0x675f7878
     50c:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
     510:	50470063 	subpl	r0, r7, r3, rrx
     514:	505f4f49 	subspl	r4, pc, r9, asr #30
     518:	46416e69 	strbmi	r6, [r1], -r9, ror #28
     51c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     520:	47006769 	strmi	r6, [r0, -r9, ror #14]
     524:	5f4f4950 	svcpl	0x004f4950
     528:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
     52c:	7074754f 	rsbsvc	r7, r4, pc, asr #10
     530:	61447475 	hvcvs	18245	; 0x4745
     534:	69426174 	stmdbvs	r2, {r2, r4, r5, r6, r8, sp, lr}^
     538:	43520074 	cmpmi	r2, #116	; 0x74
     53c:	43485f43 	movtmi	r5, #36675	; 0x8f43
     540:	52004b4c 	andpl	r4, r0, #76, 22	; 0x13000
     544:	4c5f4343 	mrrcmi	3, 4, r4, pc, cr3	; <UNPREDICTABLE>
     548:	41004553 	tstmi	r0, r3, asr r5
     54c:	4c314250 	lfmmi	f4, 4, [r1], #-320	; 0xfffffec0
     550:	524e4550 	subpl	r4, lr, #80, 10	; 0x14000000
     554:	43435200 	movtmi	r5, #12800	; 0x3200
     558:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
     55c:	43494153 	movtmi	r4, #37203	; 0x9153
     560:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
     564:	505f4343 	subspl	r4, pc, r3, asr #6
     568:	41534c4c 	cmpmi	r3, ip, asr #24
     56c:	76694449 	strbtvc	r4, [r9], -r9, asr #8
     570:	43520051 	cmpmi	r2, #81	; 0x51
     574:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
     578:	4941534c 	stmdbmi	r1, {r2, r3, r6, r8, r9, ip, lr}^
     57c:	52766944 	rsbspl	r6, r6, #68, 18	; 0x110000
     580:	61747300 	cmnvs	r4, r0, lsl #6
     584:	72737574 	rsbsvc	r7, r3, #116, 10	; 0x1d000000
     588:	53006765 	movwpl	r6, #1893	; 0x765
     58c:	4c435359 	mcrrmi	3, 5, r5, r3, cr9
     590:	72465f4b 	subvc	r5, r6, #300	; 0x12c
     594:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
     598:	0079636e 	rsbseq	r6, r9, lr, ror #6
     59c:	6d6c6c70 	stclvs	12, cr6, [ip, #-448]!	; 0xfffffe40
     5a0:	6c6c7000 	stclvs	0, cr7, [ip], #-0
     5a4:	43520070 	cmpmi	r2, #112	; 0x70
     5a8:	434d5f43 	movtmi	r5, #57155	; 0xdf43
     5ac:	6f53314f 	svcvs	0x0053314f
     5b0:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
     5b4:	43435200 	movtmi	r5, #12800	; 0x3200
     5b8:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
     5bc:	72655031 	rsbvc	r5, r5, #49	; 0x31
     5c0:	52687069 	rsbpl	r7, r8, #105	; 0x69
     5c4:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
     5c8:	00646d43 	rsbeq	r6, r4, r3, asr #26
     5cc:	4e4c4c50 	mcrmi	12, 2, r4, cr12, cr0, {2}
     5d0:	43435200 	movtmi	r5, #12800	; 0x3200
     5d4:	4941535f 	stmdbmi	r1, {r0, r1, r2, r3, r4, r6, r8, r9, ip, lr}^
     5d8:	534c4c50 	movtpl	r4, #52304	; 0xcc50
     5dc:	6c434941 	mcrrvs	9, 4, r4, r3, cr1	; <UNPREDICTABLE>
     5e0:	7669446b 	strbtvc	r4, [r9], -fp, ror #8
     5e4:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     5e8:	50006769 	andpl	r6, r0, r9, ror #14
     5ec:	00504c4c 	subseq	r4, r0, ip, asr #24
     5f0:	514c4c50 	cmppl	ip, r0, asr ip
     5f4:	43435200 	movtmi	r5, #12800	; 0x3200
     5f8:	656c435f 	strbvs	r4, [ip, #-863]!	; 0xfffffca1
     5fc:	54497261 	strbpl	r7, [r9], #-609	; 0xfffffd9f
     600:	646e6550 	strbtvs	r6, [lr], #-1360	; 0xfffffab0
     604:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
     608:	52007469 	andpl	r7, r0, #1761607680	; 0x69000000
     60c:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     610:	4c500054 	mrrcmi	0, 5, r0, r0, cr4	; <UNPREDICTABLE>
     614:	52004d4c 	andpl	r4, r0, #76, 26	; 0x1300
     618:	415f4343 	cmpmi	pc, r3, asr #6
     61c:	50314248 	eorspl	r4, r1, r8, asr #4
     620:	70697265 	rsbvc	r7, r9, r5, ror #4
     624:	48410068 	stmdami	r1, {r3, r5, r6}^
     628:	504c3142 	subpl	r3, ip, r2, asr #2
     62c:	00524e45 	subseq	r4, r2, r5, asr #28
     630:	5f434352 	svcpl	0x00434352
     634:	636f6c43 	cmnvs	pc, #17152	; 0x4300
     638:	5200736b 	andpl	r7, r0, #-1409286143	; 0xac000001
     63c:	415f4343 	cmpmi	pc, r3, asr #6
     640:	50324250 	eorspl	r4, r2, r0, asr r2
     644:	70697265 	rsbvc	r7, r9, r5, ror #4
     648:	6f6c4368 	svcvs	0x006c4368
     64c:	504c6b63 	subpl	r6, ip, r3, ror #22
     650:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
     654:	00646d43 	rsbeq	r6, r4, r3, asr #26
     658:	434b4344 	movtmi	r4, #45892	; 0xb344
     65c:	00524746 	subseq	r4, r2, r6, asr #14
     660:	5f434352 	svcpl	0x00434352
     664:	61656c43 	cmnvs	r5, r3, asr #24
     668:	616c4672 	smcvs	50274	; 0xc462
     66c:	48410067 	stmdami	r1, {r0, r1, r2, r5, r6}^
     670:	53523142 	cmppl	r2, #-2147483632	; 0x80000010
     674:	44005254 	strmi	r5, [r0], #-596	; 0xfffffdac
     678:	46434b43 	strbmi	r4, [r3], -r3, asr #22
     67c:	00325247 	eorseq	r5, r2, r7, asr #4
     680:	72706d74 	rsbsvc	r6, r0, #116, 26	; 0x1d00
     684:	50006765 	andpl	r6, r0, r5, ror #14
     688:	324b4c43 	subcc	r4, fp, #17152	; 0x4300
     68c:	6572465f 	ldrbvs	r4, [r2, #-1631]!	; 0xfffff9a1
     690:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
     694:	52007963 	andpl	r7, r0, #1622016	; 0x18c000
     698:	415f4343 	cmpmi	pc, r3, asr #6
     69c:	50324248 	eorspl	r4, r2, r8, asr #4
     6a0:	70697265 	rsbvc	r7, r9, r5, ror #4
     6a4:	6f6c4368 	svcvs	0x006c4368
     6a8:	6d436b63 	vstrvs	d22, [r3, #-396]	; 0xfffffe74
     6ac:	50410064 	subpl	r0, r1, r4, rrx
     6b0:	53523242 	cmppl	r2, #536870916	; 0x20000004
     6b4:	52005254 	andpl	r5, r0, #84, 4	; 0x40000005
     6b8:	505f4343 	subspl	r4, pc, r3, asr #6
     6bc:	314b4c43 	cmpcc	fp, r3, asr #24
     6c0:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     6c4:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
     6c8:	415f4343 	cmpmi	pc, r3, asr #6
     6cc:	50334248 	eorspl	r4, r3, r8, asr #4
     6d0:	70697265 	rsbvc	r7, r9, r5, ror #4
     6d4:	73655268 	cmnvc	r5, #104, 4	; 0x80000006
     6d8:	6d437465 	cfstrdvs	mvd7, [r3, #-404]	; 0xfffffe6c
     6dc:	43520064 	cmpmi	r2, #100	; 0x64
     6e0:	41535f43 	cmpmi	r3, r3, asr #30
     6e4:	6f6c4249 	svcvs	0x006c4249
     6e8:	43416b63 	movtmi	r6, #7011	; 0x1b63
     6ec:	6f434b4c 	svcvs	0x00434b4c
     6f0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     6f4:	43435200 	movtmi	r5, #12800	; 0x3200
     6f8:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
     6fc:	72655031 	rsbvc	r5, r5, #49	; 0x31
     700:	52687069 	rsbpl	r7, r8, #105	; 0x69
     704:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
     708:	00646d43 	rsbeq	r6, r4, r3, asr #26
     70c:	5f434352 	svcpl	0x00434352
     710:	4b4c4348 	blmi	1311438 <startup-0x1eceebc8>
     714:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     718:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
     71c:	535f4343 	cmppl	pc, #201326593	; 0xc000001
     720:	4c435359 	mcrrmi	3, 5, r5, r3, cr9
     724:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
     728:	00676966 	rsbeq	r6, r7, r6, ror #18
     72c:	5f434352 	svcpl	0x00434352
     730:	4345534c 	movtmi	r5, #21324	; 0x534c
     734:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     738:	43520067 	cmpmi	r2, #103	; 0x67
     73c:	4c465f43 	mcrrmi	15, 4, r5, r6, cr3
     740:	4e004741 	cdpmi	7, 0, cr4, cr0, cr1, {2}
     744:	74537765 	ldrbvc	r7, [r3], #-1893	; 0xfffff89b
     748:	00657461 	rsbeq	r7, r5, r1, ror #8
     74c:	434c4c50 	movtmi	r4, #52304	; 0xcc50
     750:	00524746 	subseq	r4, r2, r6, asr #14
     754:	5f434352 	svcpl	0x00434352
     758:	6b636142 	blvs	18d8c68 <startup-0x1e727398>
     75c:	65527075 	ldrbvs	r7, [r2, #-117]	; 0xffffff8b
     760:	43746573 	cmnmi	r4, #482344960	; 0x1cc00000
     764:	4500646d 	strmi	r6, [r0, #-1133]	; 0xfffffb93
     768:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
     76c:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
     770:	52007375 	andpl	r7, r0, #-738197503	; 0xd4000001
     774:	505f4343 	subspl	r4, pc, r3, asr #6
     778:	6f534c4c 	svcvs	0x00534c4c
     77c:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
     780:	43435200 	movtmi	r5, #12800	; 0x3200
     784:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
     788:	43535953 	cmpmi	r3, #1359872	; 0x14c000
     78c:	6f534b4c 	svcvs	0x00534b4c
     790:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
     794:	43435200 	movtmi	r5, #12800	; 0x3200
     798:	6961575f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
     79c:	726f4674 	rsbvc	r4, pc, #116, 12	; 0x7400000
     7a0:	53455348 	movtpl	r5, #21320	; 0x5348
     7a4:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
     7a8:	48007055 	stmdami	r0, {r0, r2, r4, r6, ip, sp, lr}
     7ac:	5f4b4c43 	svcpl	0x004b4c43
     7b0:	71657246 	cmnvc	r5, r6, asr #4
     7b4:	636e6575 	cmnvs	lr, #490733568	; 0x1d400000
     7b8:	43520079 	cmpmi	r2, #121	; 0x79
     7bc:	50415f43 	subpl	r5, r1, r3, asr #30
     7c0:	65503142 	ldrbvs	r3, [r0, #-322]	; 0xfffffebe
     7c4:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     7c8:	6c6c7000 	stclvs	0, cr7, [ip], #-0
     7cc:	006f6376 	rsbeq	r6, pc, r6, ror r3	; <UNPREDICTABLE>
     7d0:	5f434352 	svcpl	0x00434352
     7d4:	314f434d 	cmpcc	pc, sp, asr #6
     7d8:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     7dc:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
     7e0:	535f4343 	cmppl	pc, #201326593	; 0xc000001
     7e4:	4c435359 	mcrrmi	3, 5, r5, r3, cr9
     7e8:	4352004b 	cmpmi	r2, #75	; 0x4b
     7ec:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
     7f0:	5332494c 	teqpl	r2, #76, 18	; 0x130000
     7f4:	00646d43 	rsbeq	r6, r4, r3, asr #26
     7f8:	5f434352 	svcpl	0x00434352
     7fc:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     800:	00666544 	rsbeq	r6, r6, r4, asr #10
     804:	73657270 	cmnvc	r5, #112, 4
     808:	43520063 	cmpmi	r2, #99	; 0x63
     80c:	54525f43 	ldrbpl	r5, [r2], #-3907	; 0xfffff0bd
     810:	4b4c4343 	blmi	1311524 <startup-0x1eceeadc>
     814:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     818:	52006563 	andpl	r6, r0, #415236096	; 0x18c00000
     81c:	535f4343 	cmppl	pc, #201326593	; 0xc000001
     820:	6c424941 	mcrrvs	9, 4, r4, r2, cr1	; <UNPREDICTABLE>
     824:	416b636f 	cmnmi	fp, pc, ror #6
     828:	534b4c43 	movtpl	r4, #48195	; 0xbc43
     82c:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     830:	43520065 	cmpmi	r2, #101	; 0x65
     834:	41535f43 	cmpmi	r3, r3, asr #30
     838:	6f6c4249 	svcvs	0x006c4249
     83c:	43426b63 	movtmi	r6, #11107	; 0x2b63
     840:	6f534b4c 	svcvs	0x00534b4c
     844:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
     848:	43435200 	movtmi	r5, #12800	; 0x3200
     84c:	44544c5f 	ldrbmi	r4, [r4], #-3167	; 0xfffff3a1
     850:	4b4c4343 	blmi	1311564 <startup-0x1eceea9c>
     854:	43766944 	cmnmi	r6, #68, 18	; 0x110000
     858:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     85c:	4c500067 	mrrcmi	0, 6, r0, r0, cr7	; <UNPREDICTABLE>
     860:	5332494c 	teqpl	r2, #76, 18	; 0x130000
     864:	52474643 	subpl	r4, r7, #70254592	; 0x4300000
     868:	43435200 	movtmi	r5, #12800	; 0x3200
     86c:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
     870:	72655032 	rsbvc	r5, r5, #50	; 0x32
     874:	43687069 	cmnmi	r8, #105	; 0x69
     878:	6b636f6c 	blvs	18dc630 <startup-0x1e7239d0>
     87c:	6f4d504c 	svcvs	0x004d504c
     880:	6d436564 	cfstr64vs	mvdx6, [r3, #-400]	; 0xfffffe70
     884:	43520064 	cmpmi	r2, #100	; 0x64
     888:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
     88c:	5332494c 	teqpl	r2, #76, 18	; 0x130000
     890:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     894:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
     898:	485f4343 	ldmdami	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     89c:	6d434953 	vstrvs.16	s9, [r3, #-166]	; 0xffffff5a	; <UNPREDICTABLE>
     8a0:	43520064 	cmpmi	r2, #100	; 0x64
     8a4:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
     8a8:	65503242 	ldrbvs	r3, [r0, #-578]	; 0xfffffdbe
     8ac:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     8b0:	42504100 	subsmi	r4, r0, #0, 2
     8b4:	45504c32 	ldrbmi	r4, [r0, #-3122]	; 0xfffff3ce
     8b8:	5200524e 	andpl	r5, r0, #-536870908	; 0xe0000004
     8bc:	415f4343 	cmpmi	pc, r3, asr #6
     8c0:	50334248 	eorspl	r4, r3, r8, asr #4
     8c4:	70697265 	rsbvc	r7, r9, r5, ror #4
     8c8:	43520068 	cmpmi	r2, #104	; 0x68
     8cc:	434d5f43 	movtmi	r5, #57155	; 0xdf43
     8d0:	6944324f 	stmdbvs	r4, {r0, r1, r2, r3, r6, r9, ip, sp}^
     8d4:	43520076 	cmpmi	r2, #118	; 0x76
     8d8:	41535f43 	cmpmi	r3, r3, asr #30
     8dc:	4c4c5049 	mcrrmi	0, 4, r5, ip, cr9
     8e0:	43533249 	cmpmi	r3, #-1879048188	; 0x90000004
     8e4:	69446b6c 	stmdbvs	r4, {r2, r3, r5, r6, r8, r9, fp, sp, lr}^
     8e8:	6e6f4376 	mcrvs	3, 3, r4, cr15, cr6, {3}
     8ec:	00676966 	rsbeq	r6, r7, r6, ror #18
     8f0:	5f434352 	svcpl	0x00434352
     8f4:	43435452 	movtmi	r5, #13394	; 0x3452
     8f8:	6d434b4c 	vstrvs	d20, [r3, #-304]	; 0xfffffed0
     8fc:	52450064 	subpl	r0, r5, #100	; 0x64
     900:	00524f52 	subseq	r4, r2, r2, asr pc
     904:	5f434352 	svcpl	0x00434352
     908:	636f6c43 	cmnvs	pc, #17152	; 0x4300
     90c:	6365536b 	cmnvs	r5, #-1409286143	; 0xac000001
     910:	74697275 	strbtvc	r7, [r9], #-629	; 0xfffffd8b
     914:	73795379 	cmnvc	r9, #-469762047	; 0xe4000001
     918:	436d6574 	cmnmi	sp, #116, 10	; 0x1d000000
     91c:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
     920:	505f4343 	subspl	r4, pc, r3, asr #6
     924:	32494c4c 	subcc	r4, r9, #76, 24	; 0x4c00
     928:	76694453 			; <UNDEFINED> instruction: 0x76694453
     92c:	43520051 	cmpmi	r2, #81	; 0x51
     930:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
     934:	4941534c 	stmdbmi	r1, {r2, r3, r6, r8, r9, ip, lr}^
     938:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     93c:	41006769 	tstmi	r0, r9, ror #14
     940:	45334248 	ldrmi	r4, [r3, #-584]!	; 0xfffffdb8
     944:	5200524e 	andpl	r5, r0, #-536870908	; 0xe0000004
     948:	4c5f4343 	mrrcmi	3, 4, r4, pc, cr3	; <UNPREDICTABLE>
     94c:	6f4d4553 	svcvs	0x004d4553
     950:	6f436564 	svcvs	0x00436564
     954:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     958:	42484100 	submi	r4, r8, #0, 2
     95c:	45504c32 	ldrbmi	r4, [r0, #-3122]	; 0xfffff3ce
     960:	4600524e 	strmi	r5, [r0], -lr, asr #4
     964:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xfffff18b
     968:	616e6f69 	cmnvs	lr, r9, ror #30
     96c:	6174536c 	cmnvs	r4, ip, ror #6
     970:	43006574 	movwmi	r6, #1396	; 0x574
     974:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
     978:	2f737265 	svccs	0x00737265
     97c:	32373634 	eorscc	r3, r7, #52, 12	; 0x3400000
     980:	6f442f32 	svcvs	0x00442f32
     984:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
     988:	2f73746e 	svccs	0x0073746e
     98c:	6a6f7250 	bvs	1bdd2d4 <startup-0x1e422d2c>
     990:	2f746365 	svccs	0x00746365
     994:	334d5453 	movtcc	r5, #54355	; 0xd453
     998:	5f344632 	svcpl	0x00344632
     99c:	2f62696c 	svccs	0x0062696c
     9a0:	334d5453 	movtcc	r5, #54355	; 0xd453
     9a4:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
     9a8:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xfffff088
     9ac:	72655064 	rsbvc	r5, r5, #100	; 0x64
     9b0:	5f687069 	svcpl	0x00687069
     9b4:	76697244 	strbtvc	r7, [r9], -r4, asr #4
     9b8:	732f7265 			; <UNDEFINED> instruction: 0x732f7265
     9bc:	732f6372 			; <UNDEFINED> instruction: 0x732f6372
     9c0:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     9c4:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
     9c8:	6363725f 	cmnvs	r3, #-268435451	; 0xf0000005
     9cc:	5200632e 	andpl	r6, r0, #-1207959552	; 0xb8000000
     9d0:	4d5f4343 	ldclmi	3, cr4, [pc, #-268]	; 8cc <startup-0x1ffff734>
     9d4:	44314f43 	ldrtmi	r4, [r1], #-3907	; 0xfffff0bd
     9d8:	52007669 	andpl	r7, r0, #110100480	; 0x6900000
     9dc:	415f4343 	cmpmi	pc, r3, asr #6
     9e0:	50324250 	eorspl	r4, r2, r0, asr r2
     9e4:	70697265 	rsbvc	r7, r9, r5, ror #4
     9e8:	73655268 	cmnvc	r5, #104, 4	; 0x80000006
     9ec:	6d437465 	cfstrdvs	mvd7, [r3, #-404]	; 0xfffffe6c
     9f0:	43520064 	cmpmi	r2, #100	; 0x64
     9f4:	434d5f43 	movtmi	r5, #57155	; 0xdf43
     9f8:	6f53324f 	svcvs	0x0053324f
     9fc:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
     a00:	43435200 	movtmi	r5, #12800	; 0x3200
     a04:	5332495f 	teqpl	r2, #1556480	; 0x17c000
     a08:	534b4c43 	movtpl	r4, #48195	; 0xbc43
     a0c:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     a10:	4c500065 	mrrcmi	0, 6, r0, r0, cr5	; <UNPREDICTABLE>
     a14:	4941534c 	stmdbmi	r1, {r2, r3, r6, r8, r9, ip, lr}^
     a18:	52474643 	subpl	r4, r7, #70254592	; 0x4300000
     a1c:	53455200 	movtpl	r5, #20992	; 0x5200
     a20:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
     a24:	52003044 	andpl	r3, r0, #68	; 0x44
     a28:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     a2c:	31444556 	cmpcc	r4, r6, asr r5
     a30:	53455200 	movtpl	r5, #20992	; 0x5200
     a34:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
     a38:	52003244 	andpl	r3, r0, #68, 4	; 0x40000004
     a3c:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     a40:	33444556 	movtcc	r4, #17750	; 0x4556
     a44:	53455200 	movtpl	r5, #20992	; 0x5200
     a48:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
     a4c:	52003444 	andpl	r3, r0, #68, 8	; 0x44000000
     a50:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     a54:	35444556 	strbcc	r4, [r4, #-1366]	; 0xfffffaaa
     a58:	53455200 	movtpl	r5, #20992	; 0x5200
     a5c:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
     a60:	52003644 	andpl	r3, r0, #68, 12	; 0x4400000
     a64:	475f4343 	ldrbmi	r4, [pc, -r3, asr #6]
     a68:	6c467465 	cfstrdvs	mvd7, [r6], {101}	; 0x65
     a6c:	74536761 	ldrbvc	r6, [r3], #-1889	; 0xfffff89f
     a70:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
     a74:	43435200 	movtmi	r5, #12800	; 0x3200
     a78:	4553485f 	ldrbmi	r4, [r3, #-2143]	; 0xfffff7a1
     a7c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     a80:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
     a84:	535f4343 	cmppl	pc, #201326593	; 0xc000001
     a88:	6c424941 	mcrrvs	9, 4, r4, r2, cr1	; <UNPREDICTABLE>
     a8c:	426b636f 	rsbmi	r6, fp, #-1140850687	; 0xbc000001
     a90:	434b4c43 	movtmi	r4, #48195	; 0xbc43
     a94:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     a98:	4c500067 	mrrcmi	0, 6, r0, r0, cr7	; <UNPREDICTABLE>
     a9c:	4941534c 	stmdbmi	r1, {r2, r3, r6, r8, r9, ip, lr}^
     aa0:	4c50004e 	mrrcmi	0, 4, r0, r0, cr14	; <UNPREDICTABLE>
     aa4:	4941534c 	stmdbmi	r1, {r2, r3, r6, r8, r9, ip, lr}^
     aa8:	4c500051 	mrrcmi	0, 5, r0, r0, cr1	; <UNPREDICTABLE>
     aac:	4941534c 	stmdbmi	r1, {r2, r3, r6, r8, r9, ip, lr}^
     ab0:	43520052 	cmpmi	r2, #82	; 0x52
     ab4:	49545f43 	ldmdbmi	r4, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
     ab8:	4b4c434d 	blmi	13117f4 <startup-0x1ecee80c>
     abc:	73657250 	cmnvc	r5, #80, 4
     ac0:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
     ac4:	43520072 	cmpmi	r2, #114	; 0x72
     ac8:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
     acc:	646d434c 	strbtvs	r4, [sp], #-844	; 0xfffffcb4
     ad0:	43435200 	movtmi	r5, #12800	; 0x3200
     ad4:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
     ad8:	72655031 	rsbvc	r5, r5, #49	; 0x31
     adc:	43687069 	cmnmi	r8, #105	; 0x69
     ae0:	6b636f6c 	blvs	18dc898 <startup-0x1e723768>
     ae4:	00646d43 	rsbeq	r6, r4, r3, asr #26
     ae8:	32425041 	subcc	r5, r2, #65	; 0x41
     aec:	00524e45 	subseq	r4, r2, r5, asr #28
     af0:	33424841 	movtcc	r4, #10305	; 0x2841
     af4:	52545352 	subspl	r5, r4, #1207959553	; 0x48000001
     af8:	43435200 	movtmi	r5, #12800	; 0x3200
     afc:	646f4d5f 	strbtvs	r4, [pc], #-3423	; b04 <startup-0x1ffff4fc>
     b00:	43520065 	cmpmi	r2, #101	; 0x65
     b04:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
     b08:	65503242 	ldrbvs	r3, [r0, #-578]	; 0xfffffdbe
     b0c:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     b10:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
     b14:	646d4374 	strbtvs	r4, [sp], #-884	; 0xfffffc8c
     b18:	43435200 	movtmi	r5, #12800	; 0x3200
     b1c:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
     b20:	72655031 	rsbvc	r5, r5, #49	; 0x31
     b24:	43687069 	cmnmi	r8, #105	; 0x69
     b28:	6b636f6c 	blvs	18dc8e0 <startup-0x1e723720>
     b2c:	6f4d504c 	svcvs	0x004d504c
     b30:	6d436564 	cfstr64vs	mvdx6, [r3, #-400]	; 0xfffffe70
     b34:	43520064 	cmpmi	r2, #100	; 0x64
     b38:	43505f43 	cmpmi	r0, #268	; 0x10c
     b3c:	43324b4c 	teqmi	r2, #76, 22	; 0x13000
     b40:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     b44:	43520067 	cmpmi	r2, #103	; 0x67
     b48:	59535f43 	ldmdbpl	r3, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
     b4c:	4b4c4353 	blmi	13118a0 <startup-0x1ecee760>
     b50:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     b54:	52006563 	andpl	r6, r0, #415236096	; 0x18c00000
     b58:	485f4343 	ldmdami	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     b5c:	50004553 	andpl	r4, r0, r3, asr r5
     b60:	314b4c43 	cmpcc	fp, r3, asr #24
     b64:	6572465f 	ldrbvs	r4, [r2, #-1631]!	; 0xfffff9a1
     b68:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
     b6c:	41007963 	tstmi	r0, r3, ror #18
     b70:	48414250 	stmdami	r1, {r4, r6, r9, lr}^
     b74:	65725042 	ldrbvs	r5, [r2, #-66]!	; 0xffffffbe
     b78:	61546373 	cmpvs	r4, r3, ror r3
     b7c:	00656c62 	rsbeq	r6, r5, r2, ror #24
     b80:	5f434352 	svcpl	0x00434352
     b84:	756a6441 	strbvc	r6, [sl, #-1089]!	; 0xfffffbbf
     b88:	53487473 	movtpl	r7, #33907	; 0x8473
     b8c:	6c614349 	stclvs	3, cr4, [r1], #-292	; 0xfffffedc
     b90:	61726269 	cmnvs	r2, r9, ror #4
     b94:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     b98:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
     b9c:	73680065 	cmnvc	r8, #101	; 0x65
     ba0:	61747365 	cmnvs	r4, r5, ror #6
     ba4:	00737574 	rsbseq	r7, r3, r4, ror r5
     ba8:	494c4c50 	stmdbmi	ip, {r4, r6, sl, fp, lr}^
     bac:	004e5332 	subeq	r5, lr, r2, lsr r3
     bb0:	5f434352 	svcpl	0x00434352
     bb4:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
     bb8:	6b636f6c 	blvs	18dc970 <startup-0x1e723690>
     bbc:	65724673 	ldrbvs	r4, [r2, #-1651]!	; 0xfffff98d
     bc0:	43520071 	cmpmi	r2, #113	; 0x71
     bc4:	50415f43 	subpl	r5, r1, r3, asr #30
     bc8:	65503242 	ldrbvs	r3, [r0, #-578]	; 0xfffffdbe
     bcc:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     bd0:	636f6c43 	cmnvs	pc, #17152	; 0x4300
     bd4:	646d436b 	strbtvs	r4, [sp], #-875	; 0xfffffc95
     bd8:	42484100 	submi	r4, r8, #0, 2
     bdc:	54535232 	ldrbpl	r5, [r3], #-562	; 0xfffffdce
     be0:	43520052 	cmpmi	r2, #82	; 0x52
     be4:	65445f43 	strbvs	r5, [r4, #-3907]	; 0xfffff0bd
     be8:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
     bec:	4c4c5000 	marmi	acc0, r5, ip
     bf0:	52533249 	subspl	r3, r3, #-1879048188	; 0x90000004
     bf4:	43435200 	movtmi	r5, #12800	; 0x3200
     bf8:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
     bfc:	74535449 	ldrbvc	r5, [r3], #-1097	; 0xfffffbb7
     c00:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
     c04:	42504100 	subsmi	r4, r0, #0, 2
     c08:	524e4531 	subpl	r4, lr, #205520896	; 0xc400000
     c0c:	42484100 	submi	r4, r8, #0, 2
     c10:	524e4532 	subpl	r4, lr, #209715200	; 0xc800000
     c14:	43435200 	movtmi	r5, #12800	; 0x3200
     c18:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
     c1c:	72655033 	rsbvc	r5, r5, #51	; 0x33
     c20:	43687069 	cmnmi	r8, #105	; 0x69
     c24:	6b636f6c 	blvs	18dc9dc <startup-0x1e723624>
     c28:	6f4d504c 	svcvs	0x004d504c
     c2c:	6d436564 	cfstr64vs	mvdx6, [r3, #-400]	; 0xfffffe70
     c30:	74730064 	ldrbtvc	r0, [r3], #-100	; 0xffffff9c
     c34:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
     c38:	756f6370 	strbvc	r6, [pc, #-880]!	; 8d0 <startup-0x1ffff730>
     c3c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     c40:	43435200 	movtmi	r5, #12800	; 0x3200
     c44:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
     c48:	72655032 	rsbvc	r5, r5, #50	; 0x32
     c4c:	00687069 	rsbeq	r7, r8, r9, rrx
     c50:	5f434352 	svcpl	0x00434352
     c54:	434d4954 	movtmi	r4, #55636	; 0xd954
     c58:	72504b4c 	subsvc	r4, r0, #76, 22	; 0x13000
     c5c:	6f437365 	svcvs	0x00437365
     c60:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     c64:	43435200 	movtmi	r5, #12800	; 0x3200
     c68:	5332495f 	teqpl	r2, #1556480	; 0x17c000
     c6c:	434b4c43 	movtmi	r4, #48195	; 0xbc43
     c70:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     c74:	43520067 	cmpmi	r2, #103	; 0x67
     c78:	434d5f43 	movtmi	r5, #57155	; 0xdf43
     c7c:	6f43324f 	svcvs	0x0043324f
     c80:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     c84:	43535300 	cmpmi	r3, #0, 6
     c88:	41005247 	tstmi	r0, r7, asr #4
     c8c:	4c334248 	lfmmi	f4, 4, [r3], #-288	; 0xfffffee0
     c90:	524e4550 	subpl	r4, lr, #80, 10	; 0x14000000
     c94:	42504100 	subsmi	r4, r0, #0, 2
     c98:	54535231 	ldrbpl	r5, [r3], #-561	; 0xfffffdcf
     c9c:	43520052 	cmpmi	r2, #82	; 0x52
     ca0:	534c5f43 	movtpl	r5, #53059	; 0xcf43
     ca4:	646d4349 	strbtvs	r4, [sp], #-841	; 0xfffffcb7
     ca8:	474b4300 	strbmi	r4, [fp, -r0, lsl #6]
     cac:	4e455441 	cdpmi	4, 4, cr5, cr5, cr1, {2}
     cb0:	44420052 	strbmi	r0, [r2], #-82	; 0xffffffae
     cb4:	52005243 	andpl	r5, r0, #805306372	; 0x30000004
     cb8:	415f4343 	cmpmi	pc, r3, asr #6
     cbc:	50314250 	eorspl	r4, r1, r0, asr r2
     cc0:	70697265 	rsbvc	r7, r9, r5, ror #4
     cc4:	6f6c4368 	svcvs	0x006c4368
     cc8:	6d436b63 	vstrvs	d22, [r3, #-396]	; 0xfffffe74
     ccc:	43520064 	cmpmi	r2, #100	; 0x64
     cd0:	54495f43 	strbpl	r5, [r9], #-3907	; 0xfffff0bd
     cd4:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     cd8:	53006769 	movwpl	r6, #1897	; 0x769
     cdc:	45434355 	strbmi	r4, [r3, #-853]	; 0xfffffcab
     ce0:	52005353 	andpl	r5, r0, #1275068417	; 0x4c000001
     ce4:	505f4343 	subspl	r4, pc, r3, asr #6
     ce8:	6f434c4c 	svcvs	0x00434c4c
     cec:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     cf0:	43435200 	movtmi	r5, #12800	; 0x3200
     cf4:	6f6c435f 	svcvs	0x006c435f
     cf8:	54736b63 	ldrbtpl	r6, [r3], #-2915	; 0xfffff49d
     cfc:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
     d00:	41006665 	tstmi	r0, r5, ror #12
     d04:	45314248 	ldrmi	r4, [r1, #-584]!	; 0xfffffdb8
     d08:	5200524e 	andpl	r5, r0, #-536870908	; 0xe0000004
     d0c:	525f4343 	subspl	r4, pc, #201326593	; 0xc000001
     d10:	4c434354 	mcrrmi	3, 5, r4, r3, cr4
     d14:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
     d18:	00676966 	rsbeq	r6, r7, r6, ror #18
     d1c:	736c6c70 	cmnvc	ip, #112, 24	; 0x7000
     d20:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     d24:	43520065 	cmpmi	r2, #101	; 0x65
     d28:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
     d2c:	65503142 	ldrbvs	r3, [r0, #-322]	; 0xfffffebe
     d30:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     d34:	636f6c43 	cmnvs	pc, #17152	; 0x4300
     d38:	4d504c6b 	ldclmi	12, cr4, [r0, #-428]	; 0xfffffe54
     d3c:	4365646f 	cmnmi	r5, #1862270976	; 0x6f000000
     d40:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
     d44:	415f4343 	cmpmi	pc, r3, asr #6
     d48:	50334248 	eorspl	r4, r3, r8, asr #4
     d4c:	70697265 	rsbvc	r7, r9, r5, ror #4
     d50:	6f6c4368 	svcvs	0x006c4368
     d54:	6d436b63 	vstrvs	d22, [r3, #-396]	; 0xfffffe74
     d58:	756f0064 	strbvc	r0, [pc, #-100]!	; cfc <startup-0x1ffff304>
     d5c:	68635f74 	stmdavs	r3!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     d60:	55007261 	strpl	r7, [r0, #-609]	; 0xfffffd9f
     d64:	6573756e 	ldrbvs	r7, [r3, #-1390]!	; 0xfffffa92
     d68:	5f003564 	svcpl	0x00003564
     d6c:	63746567 	cmnvs	r4, #432013312	; 0x19c00000
     d70:	00726168 	rsbseq	r6, r2, r8, ror #2
     d74:	74736574 	ldrbtvc	r6, [r3], #-1396	; 0xfffffa8c
     d78:	6168635f 	cmnvs	r8, pc, asr r3
     d7c:	74670072 	strbtvc	r0, [r7], #-114	; 0xffffff8e
     d80:	55007270 	strpl	r7, [r0, #-624]	; 0xfffffd90
     d84:	6573756e 	ldrbvs	r7, [r3, #-1390]!	; 0xfffffa92
     d88:	55003064 	strpl	r3, [r0, #-100]	; 0xffffff9c
     d8c:	6573756e 	ldrbvs	r7, [r3, #-1390]!	; 0xfffffa92
     d90:	55003164 	strpl	r3, [r0, #-356]	; 0xfffffe9c
     d94:	6573756e 	ldrbvs	r7, [r3, #-1390]!	; 0xfffffa92
     d98:	55003264 	strpl	r3, [r0, #-612]	; 0xfffffd9c
     d9c:	6573756e 	ldrbvs	r7, [r3, #-1390]!	; 0xfffffa92
     da0:	55003364 	strpl	r3, [r0, #-868]	; 0xfffffc9c
     da4:	6573756e 	ldrbvs	r7, [r3, #-1390]!	; 0xfffffa92
     da8:	43003464 	movwmi	r3, #1124	; 0x464
     dac:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
     db0:	2f737265 	svccs	0x00737265
     db4:	32373634 	eorscc	r3, r7, #52, 12	; 0x3400000
     db8:	6f442f32 	svcvs	0x00442f32
     dbc:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
     dc0:	2f73746e 	svccs	0x0073746e
     dc4:	6a6f7250 	bvs	1bdd70c <startup-0x1e4228f4>
     dc8:	2f746365 	svccs	0x00746365
     dcc:	72617375 	rsbvc	r7, r1, #-738197503	; 0xd4000001
     dd0:	00632e74 	rsbeq	r2, r3, r4, ror lr
     dd4:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     dd8:	6e690054 	mcrvs	0, 3, r0, cr9, cr4, {2}
     ddc:	65676574 	strbvs	r6, [r7, #-1396]!	; 0xfffffa8c
     de0:	76696472 			; <UNDEFINED> instruction: 0x76696472
     de4:	72656469 	rsbvc	r6, r5, #1761607680	; 0x69000000
     de8:	41535500 	cmpmi	r3, r0, lsl #10
     dec:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
     df0:	00414850 	subeq	r4, r1, r0, asr r8
     df4:	52505447 	subspl	r5, r0, #1191182336	; 0x47000000
     df8:	41535500 	cmpmi	r3, r0, lsl #10
     dfc:	525f5452 	subspl	r5, pc, #1375731712	; 0x52000000
     e00:	69656365 	stmdbvs	r5!, {r0, r2, r5, r6, r8, r9, sp, lr}^
     e04:	57726576 			; <UNDEFINED> instruction: 0x57726576
     e08:	55656b61 	strbpl	r6, [r5, #-2913]!	; 0xfffff49f
     e0c:	646d4370 	strbtvs	r4, [sp], #-880	; 0xfffffc90
     e10:	41535500 	cmpmi	r3, r0, lsl #10
     e14:	535f5452 	cmppl	pc, #1375731712	; 0x52000000
     e18:	72507465 	subsvc	r7, r0, #1694498816	; 0x65000000
     e1c:	61637365 	cmnvs	r3, r5, ror #6
     e20:	0072656c 	rsbseq	r6, r2, ip, ror #10
     e24:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     e28:	6e495f54 	mcrvs	15, 2, r5, cr9, cr4, {2}
     e2c:	55007469 	strpl	r7, [r0, #-1129]	; 0xfffffb97
     e30:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
     e34:	4e494c5f 	mcrmi	12, 2, r4, cr9, cr15, {2}
     e38:	61657242 	cmnvs	r5, r2, asr #4
     e3c:	7465446b 	strbtvc	r4, [r5], #-1131	; 0xfffffb95
     e40:	4c746365 	ldclmi	3, cr6, [r4], #-404	; 0xfffffe6c
     e44:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xfffff19b
     e48:	53550068 	cmppl	r5, #104	; 0x68
     e4c:	5f545241 	svcpl	0x00545241
     e50:	42656e4f 	rsbmi	r6, r5, #1264	; 0x4f0
     e54:	654d7469 	strbvs	r7, [sp, #-1129]	; 0xfffffb97
     e58:	646f6874 	strbtvs	r6, [pc], #-2164	; e60 <startup-0x1ffff1a0>
     e5c:	00646d43 	rsbeq	r6, r4, r3, asr #26
     e60:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     e64:	79545f54 	ldmdbvc	r4, {r2, r4, r6, r8, r9, sl, fp, ip, lr}^
     e68:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
     e6c:	53550066 	cmppl	r5, #102	; 0x66
     e70:	5f545241 	svcpl	0x00545241
     e74:	706f7453 	rsbvc	r7, pc, r3, asr r4	; <UNPREDICTABLE>
     e78:	73746942 	cmnvc	r4, #1081344	; 0x108000
     e7c:	41535500 	cmpmi	r3, r0, lsl #10
     e80:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
     e84:	6b636f6c 	blvs	18dcc3c <startup-0x1e7233c4>
     e88:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
     e8c:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     e90:	00666544 	rsbeq	r6, r6, r4, asr #10
     e94:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     e98:	6d435f54 	stclvs	15, cr5, [r3, #-336]	; 0xfffffeb0
     e9c:	53550064 	cmppl	r5, #100	; 0x64
     ea0:	5f545241 	svcpl	0x00545241
     ea4:	646e6553 	strbtvs	r6, [lr], #-1363	; 0xfffffaad
     ea8:	61746144 	cmnvs	r4, r4, asr #2
     eac:	41535500 	cmpmi	r3, r0, lsl #10
     eb0:	575f5452 			; <UNDEFINED> instruction: 0x575f5452
     eb4:	55656b61 	strbpl	r6, [r5, #-2913]!	; 0xfffff49f
     eb8:	53550070 	cmppl	r5, #112	; 0x70
     ebc:	5f545241 	svcpl	0x00545241
     ec0:	64726f57 	ldrbtvs	r6, [r2], #-3927	; 0xfffff0a9
     ec4:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
     ec8:	55006874 	strpl	r6, [r0, #-2164]	; 0xfffff78c
     ecc:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
     ed0:	414d445f 	cmpmi	sp, pc, asr r4
     ed4:	00646d43 	rsbeq	r6, r4, r3, asr #26
     ed8:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     edc:	614c5f54 	cmpvs	ip, r4, asr pc
     ee0:	69427473 	stmdbvs	r2, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
     ee4:	53550074 	cmppl	r5, #116	; 0x74
     ee8:	5f545241 	svcpl	0x00545241
     eec:	64756142 	ldrbtvs	r6, [r5], #-322	; 0xfffffebe
     ef0:	65746152 	ldrbvs	r6, [r4, #-338]!	; 0xfffffeae
     ef4:	41535500 	cmpmi	r3, r0, lsl #10
     ef8:	495f5452 	ldmdbmi	pc, {r1, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
     efc:	4d414472 	cfstrdmi	mvd4, [r1, #-456]	; 0xfffffe38
     f00:	0065646f 	rsbeq	r6, r5, pc, ror #8
     f04:	63627061 	cmnvs	r2, #97	; 0x61
     f08:	6b636f6c 	blvs	18dccc0 <startup-0x1e723340>
     f0c:	41535500 	cmpmi	r3, r0, lsl #10
     f10:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
     f14:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
     f18:	65505449 	ldrbvs	r5, [r0, #-1097]	; 0xfffffbb7
     f1c:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
     f20:	74694267 	strbtvc	r4, [r9], #-615	; 0xfffffd99
     f24:	41535500 	cmpmi	r3, r0, lsl #10
     f28:	475f5452 			; <UNDEFINED> instruction: 0x475f5452
     f2c:	64726175 	ldrbtvs	r6, [r2], #-373	; 0xfffffe8b
     f30:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
     f34:	41535500 	cmpmi	r3, r0, lsl #10
     f38:	4c5f5452 	cfldrdmi	mvd5, [pc], {82}	; 0x52
     f3c:	72424e49 	subvc	r4, r2, #1168	; 0x490
     f40:	446b6165 	strbtmi	r6, [fp], #-357	; 0xfffffe9b
     f44:	63657465 	cmnvs	r5, #1694498816	; 0x65000000
     f48:	6e654c74 	mcrvs	12, 3, r4, cr5, cr4, {3}
     f4c:	43687467 	cmnmi	r8, #1728053248	; 0x67000000
     f50:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     f54:	53550067 	cmppl	r5, #103	; 0x67
     f58:	5f545241 	svcpl	0x00545241
     f5c:	47414c46 	strbmi	r4, [r1, -r6, asr #24]
     f60:	41535500 	cmpmi	r3, r0, lsl #10
     f64:	445f5452 	ldrbmi	r5, [pc], #-1106	; f6c <startup-0x1ffff094>
     f68:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
     f6c:	53550074 	cmppl	r5, #116	; 0x74
     f70:	5f545241 	svcpl	0x00545241
     f74:	636f6c43 	cmnvs	pc, #17152	; 0x4300
     f78:	696e496b 	stmdbvs	lr!, {r0, r1, r3, r5, r6, r8, fp, lr}^
     f7c:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
     f80:	00746375 	rsbseq	r6, r4, r5, ror r3
     f84:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     f88:	61505f54 	cmpvs	r0, r4, asr pc
     f8c:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     f90:	41535500 	cmpmi	r3, r0, lsl #10
     f94:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
     f98:	6b636f6c 	blvs	18dcd50 <startup-0x1e7232b0>
     f9c:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0xfffffbad
     fa0:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
     fa4:	75007469 	strvc	r7, [r0, #-1129]	; 0xfffffb97
     fa8:	74726173 	ldrbtvc	r6, [r2], #-371	; 0xfffffe8d
     fac:	73616278 	cmnvc	r1, #120, 4	; 0x80000007
     fb0:	53550065 	cmppl	r5, #101	; 0x65
     fb4:	5f545241 	svcpl	0x00545241
     fb8:	61656c43 	cmnvs	r5, r3, asr #24
     fbc:	616c4672 	smcvs	50274	; 0xc462
     fc0:	53550067 	cmppl	r5, #103	; 0x67
     fc4:	5f545241 	svcpl	0x00545241
     fc8:	41746553 	cmnmi	r4, r3, asr r5
     fcc:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
     fd0:	55007373 	strpl	r7, [r0, #-883]	; 0xfffffc8d
     fd4:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
     fd8:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
     fdc:	72617547 	rsbvc	r7, r1, #297795584	; 0x11c00000
     fe0:	6d695464 	cfstrdvs	mvd5, [r9, #-400]!	; 0xfffffe70
     fe4:	53550065 	cmppl	r5, #101	; 0x65
     fe8:	5f545241 	svcpl	0x00545241
     fec:	646e6553 	strbtvs	r6, [lr], #-1363	; 0xfffffaad
     ff0:	61657242 	cmnvs	r5, r2, asr #4
     ff4:	5355006b 	cmppl	r5, #107	; 0x6b
     ff8:	5f545241 	svcpl	0x00545241
     ffc:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    1000:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    1004:	00666544 	rsbeq	r6, r6, r4, asr #10
    1008:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    100c:	54495f54 	strbpl	r5, [r9], #-3924	; 0xfffff0ac
    1010:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1014:	55006769 	strpl	r6, [r0, #-1897]	; 0xfffff897
    1018:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    101c:	414d445f 	cmpmi	sp, pc, asr r4
    1020:	00716552 	rsbseq	r6, r1, r2, asr r5
    1024:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1028:	55007854 	strpl	r7, [r0, #-2132]	; 0xfffff7ac
    102c:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    1030:	7261485f 	rsbvc	r4, r1, #6225920	; 0x5f0000
    1034:	72617764 	rsbvc	r7, r1, #100, 14	; 0x1900000
    1038:	6f6c4665 	svcvs	0x006c4665
    103c:	6e6f4377 	mcrvs	3, 3, r4, cr15, cr7, {3}
    1040:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; e78 <startup-0x1ffff188>
    1044:	41535500 	cmpmi	r3, r0, lsl #10
    1048:	535f5452 	cmppl	pc, #1375731712	; 0x52000000
    104c:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    1050:	64726143 	ldrbtvs	r6, [r2], #-323	; 0xfffffebd
    1054:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1058:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    105c:	6f4d5f54 	svcvs	0x004d5f54
    1060:	55006564 	strpl	r6, [r0, #-1380]	; 0xfffffa9c
    1064:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    1068:	6464415f 	strbtvs	r4, [r4], #-351	; 0xfffffea1
    106c:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
    1070:	74696200 	strbtvc	r6, [r9], #-512	; 0xfffffe00
    1074:	00736f70 	rsbseq	r6, r3, r0, ror pc
    1078:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    107c:	764f5f54 			; <UNDEFINED> instruction: 0x764f5f54
    1080:	61537265 	cmpvs	r3, r5, ror #4
    1084:	696c706d 	stmdbvs	ip!, {r0, r2, r3, r5, r6, ip, sp, lr}^
    1088:	4338676e 	teqmi	r8, #28835840	; 0x1b80000
    108c:	5500646d 	strpl	r6, [r0, #-1133]	; 0xfffffb93
    1090:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    1094:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    1098:	74535449 	ldrbvc	r5, [r3], #-1097	; 0xfffffbb7
    109c:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    10a0:	41535500 	cmpmi	r3, r0, lsl #10
    10a4:	4c5f5452 	cfldrdmi	mvd5, [pc], {82}	; 0x52
    10a8:	6d434e49 	stclvs	14, cr4, [r3, #-292]	; 0xfffffedc
    10ac:	53550064 	cmppl	r5, #100	; 0x64
    10b0:	5f545241 	svcpl	0x00545241
    10b4:	41447249 	cmpmi	r4, r9, asr #4
    10b8:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    10bc:	55006769 	strpl	r6, [r0, #-1897]	; 0xfffff897
    10c0:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    10c4:	6f6c435f 	svcvs	0x006c435f
    10c8:	55006b63 	strpl	r6, [r0, #-2915]	; 0xfffff49d
    10cc:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    10d0:	4472495f 	ldrbtmi	r4, [r2], #-2399	; 0xfffff6a1
    10d4:	646d4341 	strbtvs	r4, [sp], #-833	; 0xfffffcbf
    10d8:	61726600 	cmnvs	r2, r0, lsl #12
    10dc:	6f697463 	svcvs	0x00697463
    10e0:	646c616e 	strbtvs	r6, [ip], #-366	; 0xfffffe92
    10e4:	64697669 	strbtvs	r7, [r9], #-1641	; 0xfffff997
    10e8:	55007265 	strpl	r7, [r0, #-613]	; 0xfffffd9b
    10ec:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    10f0:	616d535f 	cmnvs	sp, pc, asr r3
    10f4:	61437472 	hvcvs	14146	; 0x3742
    10f8:	414e6472 	hvcmi	58946	; 0xe642
    10fc:	6d434b43 	vstrvs	d20, [r3, #-268]	; 0xfffffef4
    1100:	53550064 	cmppl	r5, #100	; 0x64
    1104:	5f545241 	svcpl	0x00545241
    1108:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
    110c:	5367616c 	cmnpl	r7, #108, 2
    1110:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
    1114:	53550073 	cmppl	r5, #115	; 0x73
    1118:	5f545241 	svcpl	0x00545241
    111c:	55005449 	strpl	r5, [r0, #-1097]	; 0xfffffbb7
    1120:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    1124:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    1128:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
    112c:	00746375 	rsbseq	r6, r4, r5, ror r3
    1130:	552f3a43 	strpl	r3, [pc, #-2627]!	; 6f5 <startup-0x1ffff90b>
    1134:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
    1138:	3736342f 	ldrcc	r3, [r6, -pc, lsr #8]!
    113c:	442f3232 	strtmi	r3, [pc], #-562	; 1144 <startup-0x1fffeebc>
    1140:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
    1144:	73746e65 	cmnvc	r4, #1616	; 0x650
    1148:	6f72502f 	svcvs	0x0072502f
    114c:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
    1150:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    1154:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
    1158:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    115c:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    1160:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
    1164:	535f7878 	cmppl	pc, #120, 16	; 0x780000
    1168:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0xfffffb8c
    116c:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1170:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    1174:	2f726576 	svccs	0x00726576
    1178:	2f637273 	svccs	0x00637273
    117c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    1180:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    1184:	73755f78 	cmnvc	r5, #120, 30	; 0x1e0
    1188:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
    118c:	43520063 	cmpmi	r2, #99	; 0x63
    1190:	6c435f43 	mcrrvs	15, 4, r5, r3, cr3
    1194:	736b636f 	cmnvc	fp, #-1140850687	; 0xbc000001
    1198:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
    119c:	55007375 	strpl	r7, [r0, #-885]	; 0xfffffc8b
    11a0:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    11a4:	6f6c435f 	svcvs	0x006c435f
    11a8:	6e496b63 	vmlsvs.f64	d22, d9, d19
    11ac:	55007469 	strpl	r7, [r0, #-1129]	; 0xfffffb97
    11b0:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    11b4:	6b61575f 	blvs	1856f38 <startup-0x1e7a90c8>
    11b8:	43705565 	cmnmi	r0, #423624704	; 0x19400000
    11bc:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    11c0:	53550067 	cmppl	r5, #103	; 0x67
    11c4:	5f545241 	svcpl	0x00545241
    11c8:	666c6148 	strbtvs	r6, [ip], -r8, asr #2
    11cc:	6c707544 	cfldr64vs	mvdx7, [r0], #-272	; 0xfffffef0
    11d0:	6d437865 	stclvs	8, cr7, [r3, #-404]	; 0xfffffe6c
    11d4:	53550064 	cmppl	r5, #100	; 0x64
    11d8:	5f545241 	svcpl	0x00545241
    11dc:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0xfffffbad
    11e0:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
    11e4:	55007469 	strpl	r7, [r0, #-1129]	; 0xfffffb97
    11e8:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    11ec:	6572505f 	ldrbvs	r5, [r2, #-95]!	; 0xffffffa1
    11f0:	6c616373 	stclvs	3, cr6, [r1], #-460	; 0xfffffe34
    11f4:	55007265 	strpl	r7, [r0, #-613]	; 0xfffffd9b
    11f8:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    11fc:	4f50435f 	svcmi	0x0050435f
    1200:	7469004c 	strbtvc	r0, [r9], #-76	; 0xffffffb4
    1204:	6b73616d 	blvs	1cd97c0 <startup-0x1e326840>
    1208:	41535500 	cmpmi	r3, r0, lsl #10
    120c:	525f5452 	subspl	r5, pc, #1375731712	; 0x52000000
    1210:	69656365 	stmdbvs	r5!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    1214:	61446576 	hvcvs	18006	; 0x4656
    1218:	75006174 	strvc	r6, [r0, #-372]	; 0xfffffe8c
    121c:	74726173 	ldrbtvc	r6, [r2], #-371	; 0xfffffe8d
    1220:	00676572 	rsbeq	r6, r7, r2, ror r5

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d39 	eorscc	r2, r2, r9, lsr sp
  30:	712d3931 			; <UNDEFINED> instruction: 0x712d3931
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	31393130 	teqcc	r9, r0, lsr r1
  48:	20353230 	eorscs	r3, r5, r0, lsr r2
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
  5c:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
  60:	6172622d 	cmnvs	r2, sp, lsr #4
  64:	2068636e 	rsbcs	r6, r8, lr, ror #6
  68:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  6c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  70:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  74:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000020 	andeq	r0, r0, r0, lsr #32
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000098 	muleq	r0, r8, r0
  30:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
  34:	87038504 	strhi	r8, [r3, -r4, lsl #10]
  38:	41018e02 	tstmi	r1, r2, lsl #28
  3c:	0d41280e 	stcleq	8, cr2, [r1, #-56]	; 0xffffffc8
  40:	00000007 	andeq	r0, r0, r7
  44:	0000001c 	andeq	r0, r0, ip, lsl r0
  48:	00000000 	andeq	r0, r0, r0
  4c:	200000a8 	andcs	r0, r0, r8, lsr #1
  50:	00000068 	andeq	r0, r0, r8, rrx
  54:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  58:	41018e02 	tstmi	r1, r2, lsl #28
  5c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  60:	00000007 	andeq	r0, r0, r7
  64:	00000018 	andeq	r0, r0, r8, lsl r0
  68:	00000000 	andeq	r0, r0, r0
  6c:	20000110 	andcs	r0, r0, r0, lsl r1
  70:	00000058 	andeq	r0, r0, r8, asr r0
  74:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  78:	41018e02 	tstmi	r1, r2, lsl #28
  7c:	0000070d 	andeq	r0, r0, sp, lsl #14
  80:	0000001c 	andeq	r0, r0, ip, lsl r0
  84:	00000000 	andeq	r0, r0, r0
  88:	20000168 	andcs	r0, r0, r8, ror #2
  8c:	00000070 	andeq	r0, r0, r0, ror r0
  90:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  94:	41018e02 	tstmi	r1, r2, lsl #28
  98:	0d41500e 	stcleq	0, cr5, [r1, #-56]	; 0xffffffc8
  9c:	00000007 	andeq	r0, r0, r7
  a0:	00000020 	andeq	r0, r0, r0, lsr #32
  a4:	00000000 	andeq	r0, r0, r0
  a8:	200001d8 	ldrdcs	r0, [r0], -r8
  ac:	00000044 	andeq	r0, r0, r4, asr #32
  b0:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
  b4:	87038504 	strhi	r8, [r3, -r4, lsl #10]
  b8:	41018e02 	tstmi	r1, r2, lsl #28
  bc:	0d41380e 	stcleq	8, cr3, [r1, #-56]	; 0xffffffc8
  c0:	00000007 	andeq	r0, r0, r7
  c4:	00000018 	andeq	r0, r0, r8, lsl r0
  c8:	00000000 	andeq	r0, r0, r0
  cc:	2000021c 	andcs	r0, r0, ip, lsl r2
  d0:	0000000e 	andeq	r0, r0, lr
  d4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  d8:	41018e02 	tstmi	r1, r2, lsl #28
  dc:	0000070d 	andeq	r0, r0, sp, lsl #14
  e0:	0000000c 	andeq	r0, r0, ip
  e4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  e8:	7c020001 	stcvc	0, cr0, [r2], {1}
  ec:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  f0:	0000001c 	andeq	r0, r0, ip, lsl r0
  f4:	000000e0 	andeq	r0, r0, r0, ror #1
  f8:	2000022c 	andcs	r0, r0, ip, lsr #4
  fc:	00000170 	andeq	r0, r0, r0, ror r1
 100:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 104:	41018e02 	tstmi	r1, r2, lsl #28
 108:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 10c:	00000007 	andeq	r0, r0, r7
 110:	0000001c 	andeq	r0, r0, ip, lsl r0
 114:	000000e0 	andeq	r0, r0, r0, ror #1
 118:	2000039c 	mulcs	r0, ip, r3
 11c:	0000011a 	andeq	r0, r0, sl, lsl r1
 120:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 124:	41018e02 	tstmi	r1, r2, lsl #28
 128:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
 12c:	00000007 	andeq	r0, r0, r7
 130:	0000001c 	andeq	r0, r0, ip, lsl r0
 134:	000000e0 	andeq	r0, r0, r0, ror #1
 138:	200004b6 			; <UNDEFINED> instruction: 0x200004b6
 13c:	00000032 	andeq	r0, r0, r2, lsr r0
 140:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 144:	41018e02 	tstmi	r1, r2, lsl #28
 148:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 14c:	00000007 	andeq	r0, r0, r7
 150:	0000001c 	andeq	r0, r0, ip, lsl r0
 154:	000000e0 	andeq	r0, r0, r0, ror #1
 158:	200004e8 	andcs	r0, r0, r8, ror #9
 15c:	00000046 	andeq	r0, r0, r6, asr #32
 160:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 164:	41018e02 	tstmi	r1, r2, lsl #28
 168:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 16c:	00000007 	andeq	r0, r0, r7
 170:	0000001c 	andeq	r0, r0, ip, lsl r0
 174:	000000e0 	andeq	r0, r0, r0, ror #1
 178:	2000052e 	andcs	r0, r0, lr, lsr #10
 17c:	00000040 	andeq	r0, r0, r0, asr #32
 180:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 184:	41018e02 	tstmi	r1, r2, lsl #28
 188:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 18c:	00000007 	andeq	r0, r0, r7
 190:	0000001c 	andeq	r0, r0, ip, lsl r0
 194:	000000e0 	andeq	r0, r0, r0, ror #1
 198:	2000056e 	andcs	r0, r0, lr, ror #10
 19c:	00000016 	andeq	r0, r0, r6, lsl r0
 1a0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1a4:	41018e02 	tstmi	r1, r2, lsl #28
 1a8:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 1ac:	00000007 	andeq	r0, r0, r7
 1b0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1b4:	000000e0 	andeq	r0, r0, r0, ror #1
 1b8:	20000584 	andcs	r0, r0, r4, lsl #11
 1bc:	00000040 	andeq	r0, r0, r0, asr #32
 1c0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1c4:	41018e02 	tstmi	r1, r2, lsl #28
 1c8:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 1cc:	00000007 	andeq	r0, r0, r7
 1d0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1d4:	000000e0 	andeq	r0, r0, r0, ror #1
 1d8:	200005c4 	andcs	r0, r0, r4, asr #11
 1dc:	00000016 	andeq	r0, r0, r6, lsl r0
 1e0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1e4:	41018e02 	tstmi	r1, r2, lsl #28
 1e8:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 1ec:	00000007 	andeq	r0, r0, r7
 1f0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1f4:	000000e0 	andeq	r0, r0, r0, ror #1
 1f8:	200005da 	ldrdcs	r0, [r0], -sl
 1fc:	0000001e 	andeq	r0, r0, lr, lsl r0
 200:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 204:	41018e02 	tstmi	r1, r2, lsl #28
 208:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 20c:	00000007 	andeq	r0, r0, r7
 210:	0000001c 	andeq	r0, r0, ip, lsl r0
 214:	000000e0 	andeq	r0, r0, r0, ror #1
 218:	200005f8 	strdcs	r0, [r0], -r8
 21c:	0000001e 	andeq	r0, r0, lr, lsl r0
 220:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 224:	41018e02 	tstmi	r1, r2, lsl #28
 228:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 22c:	00000007 	andeq	r0, r0, r7
 230:	0000001c 	andeq	r0, r0, ip, lsl r0
 234:	000000e0 	andeq	r0, r0, r0, ror #1
 238:	20000616 	andcs	r0, r0, r6, lsl r6
 23c:	0000003a 	andeq	r0, r0, sl, lsr r0
 240:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 244:	41018e02 	tstmi	r1, r2, lsl #28
 248:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 24c:	00000007 	andeq	r0, r0, r7
 250:	0000001c 	andeq	r0, r0, ip, lsl r0
 254:	000000e0 	andeq	r0, r0, r0, ror #1
 258:	20000650 	andcs	r0, r0, r0, asr r6
 25c:	0000001e 	andeq	r0, r0, lr, lsl r0
 260:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 264:	41018e02 	tstmi	r1, r2, lsl #28
 268:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 26c:	00000007 	andeq	r0, r0, r7
 270:	0000001c 	andeq	r0, r0, ip, lsl r0
 274:	000000e0 	andeq	r0, r0, r0, ror #1
 278:	2000066e 	andcs	r0, r0, lr, ror #12
 27c:	00000024 	andeq	r0, r0, r4, lsr #32
 280:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 284:	41018e02 	tstmi	r1, r2, lsl #28
 288:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 28c:	00000007 	andeq	r0, r0, r7
 290:	0000001c 	andeq	r0, r0, ip, lsl r0
 294:	000000e0 	andeq	r0, r0, r0, ror #1
 298:	20000692 	mulcs	r0, r2, r6
 29c:	000000a4 	andeq	r0, r0, r4, lsr #1
 2a0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2a4:	41018e02 	tstmi	r1, r2, lsl #28
 2a8:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 2ac:	00000007 	andeq	r0, r0, r7
 2b0:	0000000c 	andeq	r0, r0, ip
 2b4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 2b8:	7c020001 	stcvc	0, cr0, [r2], {1}
 2bc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2c0:	00000018 	andeq	r0, r0, r8, lsl r0
 2c4:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
 2c8:	20000738 	andcs	r0, r0, r8, lsr r7
 2cc:	00000070 	andeq	r0, r0, r0, ror r0
 2d0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2d4:	41018e02 	tstmi	r1, r2, lsl #28
 2d8:	0000070d 	andeq	r0, r0, sp, lsl #14
 2dc:	0000001c 	andeq	r0, r0, ip, lsl r0
 2e0:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
 2e4:	200007a8 	andcs	r0, r0, r8, lsr #15
 2e8:	00000028 	andeq	r0, r0, r8, lsr #32
 2ec:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2f0:	41018e02 	tstmi	r1, r2, lsl #28
 2f4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 2f8:	00000007 	andeq	r0, r0, r7
 2fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 300:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
 304:	200007d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 308:	0000005e 	andeq	r0, r0, lr, asr r0
 30c:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 310:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 314:	180e4101 	stmdane	lr, {r0, r8, lr}
 318:	00070d41 	andeq	r0, r7, r1, asr #26
 31c:	0000001c 	andeq	r0, r0, ip, lsl r0
 320:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
 324:	2000082e 	andcs	r0, r0, lr, lsr #16
 328:	0000003e 	andeq	r0, r0, lr, lsr r0
 32c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 330:	41018e02 	tstmi	r1, r2, lsl #28
 334:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 338:	00000007 	andeq	r0, r0, r7
 33c:	0000001c 	andeq	r0, r0, ip, lsl r0
 340:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
 344:	2000086c 	andcs	r0, r0, ip, ror #16
 348:	00000020 	andeq	r0, r0, r0, lsr #32
 34c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 350:	41018e02 	tstmi	r1, r2, lsl #28
 354:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 358:	00000007 	andeq	r0, r0, r7
 35c:	0000001c 	andeq	r0, r0, ip, lsl r0
 360:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
 364:	2000088c 	andcs	r0, r0, ip, lsl #17
 368:	00000044 	andeq	r0, r0, r4, asr #32
 36c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 370:	41018e02 	tstmi	r1, r2, lsl #28
 374:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 378:	00000007 	andeq	r0, r0, r7
 37c:	0000001c 	andeq	r0, r0, ip, lsl r0
 380:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
 384:	200008d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 388:	00000020 	andeq	r0, r0, r0, lsr #32
 38c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 390:	41018e02 	tstmi	r1, r2, lsl #28
 394:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 398:	00000007 	andeq	r0, r0, r7
 39c:	0000001c 	andeq	r0, r0, ip, lsl r0
 3a0:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
 3a4:	200008f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 3a8:	0000003c 	andeq	r0, r0, ip, lsr r0
 3ac:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 3b0:	41018e02 	tstmi	r1, r2, lsl #28
 3b4:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 3b8:	00000007 	andeq	r0, r0, r7
 3bc:	0000001c 	andeq	r0, r0, ip, lsl r0
 3c0:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
 3c4:	2000092c 	andcs	r0, r0, ip, lsr #18
 3c8:	00000020 	andeq	r0, r0, r0, lsr #32
 3cc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 3d0:	41018e02 	tstmi	r1, r2, lsl #28
 3d4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 3d8:	00000007 	andeq	r0, r0, r7
 3dc:	0000001c 	andeq	r0, r0, ip, lsl r0
 3e0:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
 3e4:	2000094c 	andcs	r0, r0, ip, asr #18
 3e8:	00000028 	andeq	r0, r0, r8, lsr #32
 3ec:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 3f0:	41018e02 	tstmi	r1, r2, lsl #28
 3f4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 3f8:	00000007 	andeq	r0, r0, r7
 3fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 400:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
 404:	20000974 	andcs	r0, r0, r4, ror r9
 408:	00000020 	andeq	r0, r0, r0, lsr #32
 40c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 410:	41018e02 	tstmi	r1, r2, lsl #28
 414:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 418:	00000007 	andeq	r0, r0, r7
 41c:	0000001c 	andeq	r0, r0, ip, lsl r0
 420:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
 424:	20000994 	mulcs	r0, r4, r9
 428:	00000030 	andeq	r0, r0, r0, lsr r0
 42c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 430:	41018e02 	tstmi	r1, r2, lsl #28
 434:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 438:	00000007 	andeq	r0, r0, r7
 43c:	0000001c 	andeq	r0, r0, ip, lsl r0
 440:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
 444:	200009c4 	andcs	r0, r0, r4, asr #19
 448:	00000020 	andeq	r0, r0, r0, lsr #32
 44c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 450:	41018e02 	tstmi	r1, r2, lsl #28
 454:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 458:	00000007 	andeq	r0, r0, r7
 45c:	0000001c 	andeq	r0, r0, ip, lsl r0
 460:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
 464:	200009e4 	andcs	r0, r0, r4, ror #19
 468:	00000020 	andeq	r0, r0, r0, lsr #32
 46c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 470:	41018e02 	tstmi	r1, r2, lsl #28
 474:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 478:	00000007 	andeq	r0, r0, r7
 47c:	0000001c 	andeq	r0, r0, ip, lsl r0
 480:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
 484:	20000a04 	andcs	r0, r0, r4, lsl #20
 488:	00000040 	andeq	r0, r0, r0, asr #32
 48c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 490:	41018e02 	tstmi	r1, r2, lsl #28
 494:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 498:	00000007 	andeq	r0, r0, r7
 49c:	0000001c 	andeq	r0, r0, ip, lsl r0
 4a0:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
 4a4:	20000a44 	andcs	r0, r0, r4, asr #20
 4a8:	0000003c 	andeq	r0, r0, ip, lsr r0
 4ac:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 4b0:	41018e02 	tstmi	r1, r2, lsl #28
 4b4:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 4b8:	00000007 	andeq	r0, r0, r7
 4bc:	0000001c 	andeq	r0, r0, ip, lsl r0
 4c0:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
 4c4:	20000a80 	andcs	r0, r0, r0, lsl #21
 4c8:	00000034 	andeq	r0, r0, r4, lsr r0
 4cc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 4d0:	41018e02 	tstmi	r1, r2, lsl #28
 4d4:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 4d8:	00000007 	andeq	r0, r0, r7
 4dc:	00000018 	andeq	r0, r0, r8, lsl r0
 4e0:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
 4e4:	20000ab4 			; <UNDEFINED> instruction: 0x20000ab4
 4e8:	0000001c 	andeq	r0, r0, ip, lsl r0
 4ec:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 4f0:	41018e02 	tstmi	r1, r2, lsl #28
 4f4:	0000070d 	andeq	r0, r0, sp, lsl #14
 4f8:	0000001c 	andeq	r0, r0, ip, lsl r0
 4fc:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
 500:	20000ad0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 504:	00000034 	andeq	r0, r0, r4, lsr r0
 508:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 50c:	41018e02 	tstmi	r1, r2, lsl #28
 510:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 514:	00000007 	andeq	r0, r0, r7
 518:	0000001c 	andeq	r0, r0, ip, lsl r0
 51c:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
 520:	20000b04 	andcs	r0, r0, r4, lsl #22
 524:	00000038 	andeq	r0, r0, r8, lsr r0
 528:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 52c:	41018e02 	tstmi	r1, r2, lsl #28
 530:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 534:	00000007 	andeq	r0, r0, r7
 538:	0000001c 	andeq	r0, r0, ip, lsl r0
 53c:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
 540:	20000b3c 	andcs	r0, r0, ip, lsr fp
 544:	0000003c 	andeq	r0, r0, ip, lsr r0
 548:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 54c:	41018e02 	tstmi	r1, r2, lsl #28
 550:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 554:	00000007 	andeq	r0, r0, r7
 558:	0000001c 	andeq	r0, r0, ip, lsl r0
 55c:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
 560:	20000b78 	andcs	r0, r0, r8, ror fp
 564:	00000164 	andeq	r0, r0, r4, ror #2
 568:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 56c:	41018e02 	tstmi	r1, r2, lsl #28
 570:	0d41280e 	stcleq	8, cr2, [r1, #-56]	; 0xffffffc8
 574:	00000007 	andeq	r0, r0, r7
 578:	0000001c 	andeq	r0, r0, ip, lsl r0
 57c:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
 580:	20000cdc 	ldrdcs	r0, [r0], -ip
 584:	00000060 	andeq	r0, r0, r0, rrx
 588:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 58c:	41018e02 	tstmi	r1, r2, lsl #28
 590:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 594:	00000007 	andeq	r0, r0, r7
 598:	0000001c 	andeq	r0, r0, ip, lsl r0
 59c:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
 5a0:	20000d3c 	andcs	r0, r0, ip, lsr sp
 5a4:	00000020 	andeq	r0, r0, r0, lsr #32
 5a8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 5ac:	41018e02 	tstmi	r1, r2, lsl #28
 5b0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 5b4:	00000007 	andeq	r0, r0, r7
 5b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 5bc:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
 5c0:	20000d5c 	andcs	r0, r0, ip, asr sp
 5c4:	00000020 	andeq	r0, r0, r0, lsr #32
 5c8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 5cc:	41018e02 	tstmi	r1, r2, lsl #28
 5d0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 5d4:	00000007 	andeq	r0, r0, r7
 5d8:	0000001c 	andeq	r0, r0, ip, lsl r0
 5dc:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
 5e0:	20000d7c 	andcs	r0, r0, ip, ror sp
 5e4:	0000001c 	andeq	r0, r0, ip, lsl r0
 5e8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 5ec:	41018e02 	tstmi	r1, r2, lsl #28
 5f0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 5f4:	00000007 	andeq	r0, r0, r7
 5f8:	0000001c 	andeq	r0, r0, ip, lsl r0
 5fc:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
 600:	20000d98 	mulcs	r0, r8, sp
 604:	0000003c 	andeq	r0, r0, ip, lsr r0
 608:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 60c:	41018e02 	tstmi	r1, r2, lsl #28
 610:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 614:	00000007 	andeq	r0, r0, r7
 618:	0000001c 	andeq	r0, r0, ip, lsl r0
 61c:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
 620:	20000dd4 	ldrdcs	r0, [r0], -r4
 624:	0000003c 	andeq	r0, r0, ip, lsr r0
 628:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 62c:	41018e02 	tstmi	r1, r2, lsl #28
 630:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 634:	00000007 	andeq	r0, r0, r7
 638:	0000001c 	andeq	r0, r0, ip, lsl r0
 63c:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
 640:	20000e10 	andcs	r0, r0, r0, lsl lr
 644:	0000003c 	andeq	r0, r0, ip, lsr r0
 648:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 64c:	41018e02 	tstmi	r1, r2, lsl #28
 650:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 654:	00000007 	andeq	r0, r0, r7
 658:	0000001c 	andeq	r0, r0, ip, lsl r0
 65c:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
 660:	20000e4c 	andcs	r0, r0, ip, asr #28
 664:	00000040 	andeq	r0, r0, r0, asr #32
 668:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 66c:	41018e02 	tstmi	r1, r2, lsl #28
 670:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 674:	00000007 	andeq	r0, r0, r7
 678:	0000001c 	andeq	r0, r0, ip, lsl r0
 67c:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
 680:	20000e8c 	andcs	r0, r0, ip, lsl #29
 684:	0000003c 	andeq	r0, r0, ip, lsr r0
 688:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 68c:	41018e02 	tstmi	r1, r2, lsl #28
 690:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 694:	00000007 	andeq	r0, r0, r7
 698:	0000001c 	andeq	r0, r0, ip, lsl r0
 69c:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
 6a0:	20000ec8 	andcs	r0, r0, r8, asr #29
 6a4:	0000001c 	andeq	r0, r0, ip, lsl r0
 6a8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 6ac:	41018e02 	tstmi	r1, r2, lsl #28
 6b0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 6b4:	00000007 	andeq	r0, r0, r7
 6b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 6bc:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
 6c0:	20000ee4 	andcs	r0, r0, r4, ror #29
 6c4:	00000040 	andeq	r0, r0, r0, asr #32
 6c8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 6cc:	41018e02 	tstmi	r1, r2, lsl #28
 6d0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 6d4:	00000007 	andeq	r0, r0, r7
 6d8:	0000001c 	andeq	r0, r0, ip, lsl r0
 6dc:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
 6e0:	20000f24 	andcs	r0, r0, r4, lsr #30
 6e4:	00000040 	andeq	r0, r0, r0, asr #32
 6e8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 6ec:	41018e02 	tstmi	r1, r2, lsl #28
 6f0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 6f4:	00000007 	andeq	r0, r0, r7
 6f8:	0000001c 	andeq	r0, r0, ip, lsl r0
 6fc:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
 700:	20000f64 	andcs	r0, r0, r4, ror #30
 704:	00000040 	andeq	r0, r0, r0, asr #32
 708:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 70c:	41018e02 	tstmi	r1, r2, lsl #28
 710:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 714:	00000007 	andeq	r0, r0, r7
 718:	0000001c 	andeq	r0, r0, ip, lsl r0
 71c:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
 720:	20000fa4 	andcs	r0, r0, r4, lsr #31
 724:	00000040 	andeq	r0, r0, r0, asr #32
 728:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 72c:	41018e02 	tstmi	r1, r2, lsl #28
 730:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 734:	00000007 	andeq	r0, r0, r7
 738:	0000001c 	andeq	r0, r0, ip, lsl r0
 73c:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
 740:	20000fe4 	andcs	r0, r0, r4, ror #31
 744:	00000040 	andeq	r0, r0, r0, asr #32
 748:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 74c:	41018e02 	tstmi	r1, r2, lsl #28
 750:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 754:	00000007 	andeq	r0, r0, r7
 758:	0000001c 	andeq	r0, r0, ip, lsl r0
 75c:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
 760:	20001024 	andcs	r1, r0, r4, lsr #32
 764:	00000040 	andeq	r0, r0, r0, asr #32
 768:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 76c:	41018e02 	tstmi	r1, r2, lsl #28
 770:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 774:	00000007 	andeq	r0, r0, r7
 778:	0000001c 	andeq	r0, r0, ip, lsl r0
 77c:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
 780:	20001064 	andcs	r1, r0, r4, rrx
 784:	00000040 	andeq	r0, r0, r0, asr #32
 788:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 78c:	41018e02 	tstmi	r1, r2, lsl #28
 790:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 794:	00000007 	andeq	r0, r0, r7
 798:	0000001c 	andeq	r0, r0, ip, lsl r0
 79c:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
 7a0:	200010a4 	andcs	r1, r0, r4, lsr #1
 7a4:	00000040 	andeq	r0, r0, r0, asr #32
 7a8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 7ac:	41018e02 	tstmi	r1, r2, lsl #28
 7b0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 7b4:	00000007 	andeq	r0, r0, r7
 7b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 7bc:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
 7c0:	200010e4 	andcs	r1, r0, r4, ror #1
 7c4:	00000040 	andeq	r0, r0, r0, asr #32
 7c8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 7cc:	41018e02 	tstmi	r1, r2, lsl #28
 7d0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 7d4:	00000007 	andeq	r0, r0, r7
 7d8:	0000001c 	andeq	r0, r0, ip, lsl r0
 7dc:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
 7e0:	20001124 	andcs	r1, r0, r4, lsr #2
 7e4:	00000040 	andeq	r0, r0, r0, asr #32
 7e8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 7ec:	41018e02 	tstmi	r1, r2, lsl #28
 7f0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 7f4:	00000007 	andeq	r0, r0, r7
 7f8:	0000001c 	andeq	r0, r0, ip, lsl r0
 7fc:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
 800:	20001164 	andcs	r1, r0, r4, ror #2
 804:	00000040 	andeq	r0, r0, r0, asr #32
 808:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 80c:	41018e02 	tstmi	r1, r2, lsl #28
 810:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 814:	00000007 	andeq	r0, r0, r7
 818:	0000001c 	andeq	r0, r0, ip, lsl r0
 81c:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
 820:	200011a4 	andcs	r1, r0, r4, lsr #3
 824:	00000040 	andeq	r0, r0, r0, asr #32
 828:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 82c:	41018e02 	tstmi	r1, r2, lsl #28
 830:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 834:	00000007 	andeq	r0, r0, r7
 838:	0000001c 	andeq	r0, r0, ip, lsl r0
 83c:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
 840:	200011e4 	andcs	r1, r0, r4, ror #3
 844:	00000040 	andeq	r0, r0, r0, asr #32
 848:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 84c:	41018e02 	tstmi	r1, r2, lsl #28
 850:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 854:	00000007 	andeq	r0, r0, r7
 858:	0000001c 	andeq	r0, r0, ip, lsl r0
 85c:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
 860:	20001224 	andcs	r1, r0, r4, lsr #4
 864:	00000040 	andeq	r0, r0, r0, asr #32
 868:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 86c:	41018e02 	tstmi	r1, r2, lsl #28
 870:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 874:	00000007 	andeq	r0, r0, r7
 878:	0000001c 	andeq	r0, r0, ip, lsl r0
 87c:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
 880:	20001264 	andcs	r1, r0, r4, ror #4
 884:	00000040 	andeq	r0, r0, r0, asr #32
 888:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 88c:	41018e02 	tstmi	r1, r2, lsl #28
 890:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 894:	00000007 	andeq	r0, r0, r7
 898:	0000001c 	andeq	r0, r0, ip, lsl r0
 89c:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
 8a0:	200012a4 	andcs	r1, r0, r4, lsr #5
 8a4:	0000003c 	andeq	r0, r0, ip, lsr r0
 8a8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 8ac:	41018e02 	tstmi	r1, r2, lsl #28
 8b0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 8b4:	00000007 	andeq	r0, r0, r7
 8b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 8bc:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
 8c0:	200012e0 	andcs	r1, r0, r0, ror #5
 8c4:	00000050 	andeq	r0, r0, r0, asr r0
 8c8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 8cc:	41018e02 	tstmi	r1, r2, lsl #28
 8d0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 8d4:	00000007 	andeq	r0, r0, r7
 8d8:	0000001c 	andeq	r0, r0, ip, lsl r0
 8dc:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
 8e0:	20001330 	andcs	r1, r0, r0, lsr r3
 8e4:	00000084 	andeq	r0, r0, r4, lsl #1
 8e8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 8ec:	41018e02 	tstmi	r1, r2, lsl #28
 8f0:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
 8f4:	00000007 	andeq	r0, r0, r7
 8f8:	00000018 	andeq	r0, r0, r8, lsl r0
 8fc:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
 900:	200013b4 			; <UNDEFINED> instruction: 0x200013b4
 904:	0000001c 	andeq	r0, r0, ip, lsl r0
 908:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 90c:	41018e02 	tstmi	r1, r2, lsl #28
 910:	0000070d 	andeq	r0, r0, sp, lsl #14
 914:	0000001c 	andeq	r0, r0, ip, lsl r0
 918:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
 91c:	200013d0 	ldrdcs	r1, [r0], -r0
 920:	00000044 	andeq	r0, r0, r4, asr #32
 924:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 928:	41018e02 	tstmi	r1, r2, lsl #28
 92c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 930:	00000007 	andeq	r0, r0, r7
 934:	0000001c 	andeq	r0, r0, ip, lsl r0
 938:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
 93c:	20001414 	andcs	r1, r0, r4, lsl r4
 940:	00000020 	andeq	r0, r0, r0, lsr #32
 944:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 948:	41018e02 	tstmi	r1, r2, lsl #28
 94c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 950:	00000007 	andeq	r0, r0, r7
 954:	0000000c 	andeq	r0, r0, ip
 958:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 95c:	7c020001 	stcvc	0, cr0, [r2], {1}
 960:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 964:	0000001c 	andeq	r0, r0, ip, lsl r0
 968:	00000954 	andeq	r0, r0, r4, asr r9
 96c:	20001434 	andcs	r1, r0, r4, lsr r4
 970:	00000040 	andeq	r0, r0, r0, asr #32
 974:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 978:	41018e02 	tstmi	r1, r2, lsl #28
 97c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 980:	00000007 	andeq	r0, r0, r7
 984:	00000018 	andeq	r0, r0, r8, lsl r0
 988:	00000954 	andeq	r0, r0, r4, asr r9
 98c:	20001474 	andcs	r1, r0, r4, ror r4
 990:	00000028 	andeq	r0, r0, r8, lsr #32
 994:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 998:	41018e02 	tstmi	r1, r2, lsl #28
 99c:	0000070d 	andeq	r0, r0, sp, lsl #14
 9a0:	00000018 	andeq	r0, r0, r8, lsl r0
 9a4:	00000954 	andeq	r0, r0, r4, asr r9
 9a8:	2000149c 	mulcs	r0, ip, r4
 9ac:	00000028 	andeq	r0, r0, r8, lsr #32
 9b0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 9b4:	41018e02 	tstmi	r1, r2, lsl #28
 9b8:	0000070d 	andeq	r0, r0, sp, lsl #14
 9bc:	0000001c 	andeq	r0, r0, ip, lsl r0
 9c0:	00000954 	andeq	r0, r0, r4, asr r9
 9c4:	200014c4 	andcs	r1, r0, r4, asr #9
 9c8:	0000002a 	andeq	r0, r0, sl, lsr #32
 9cc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 9d0:	41018e02 	tstmi	r1, r2, lsl #28
 9d4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 9d8:	00000007 	andeq	r0, r0, r7
 9dc:	0000000c 	andeq	r0, r0, ip
 9e0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 9e4:	7c020001 	stcvc	0, cr0, [r2], {1}
 9e8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 9ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 9f0:	000009dc 	ldrdeq	r0, [r0], -ip
 9f4:	200014f0 	strdcs	r1, [r0], -r0
 9f8:	00000130 	andeq	r0, r0, r0, lsr r1
 9fc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 a00:	41018e02 	tstmi	r1, r2, lsl #28
 a04:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 a08:	00000007 	andeq	r0, r0, r7
 a0c:	0000001c 	andeq	r0, r0, ip, lsl r0
 a10:	000009dc 	ldrdeq	r0, [r0], -ip
 a14:	20001620 	andcs	r1, r0, r0, lsr #12
 a18:	00000194 	muleq	r0, r4, r1
 a1c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 a20:	41018e02 	tstmi	r1, r2, lsl #28
 a24:	0d41300e 	stcleq	0, cr3, [r1, #-56]	; 0xffffffc8
 a28:	00000007 	andeq	r0, r0, r7
 a2c:	0000001c 	andeq	r0, r0, ip, lsl r0
 a30:	000009dc 	ldrdeq	r0, [r0], -ip
 a34:	200017b4 			; <UNDEFINED> instruction: 0x200017b4
 a38:	00000036 	andeq	r0, r0, r6, lsr r0
 a3c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 a40:	41018e02 	tstmi	r1, r2, lsl #28
 a44:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 a48:	00000007 	andeq	r0, r0, r7
 a4c:	0000001c 	andeq	r0, r0, ip, lsl r0
 a50:	000009dc 	ldrdeq	r0, [r0], -ip
 a54:	200017ea 	andcs	r1, r0, sl, ror #15
 a58:	00000056 	andeq	r0, r0, r6, asr r0
 a5c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 a60:	41018e02 	tstmi	r1, r2, lsl #28
 a64:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 a68:	00000007 	andeq	r0, r0, r7
 a6c:	0000001c 	andeq	r0, r0, ip, lsl r0
 a70:	000009dc 	ldrdeq	r0, [r0], -ip
 a74:	20001840 	andcs	r1, r0, r0, asr #16
 a78:	00000028 	andeq	r0, r0, r8, lsr #32
 a7c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 a80:	41018e02 	tstmi	r1, r2, lsl #28
 a84:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 a88:	00000007 	andeq	r0, r0, r7
 a8c:	0000001c 	andeq	r0, r0, ip, lsl r0
 a90:	000009dc 	ldrdeq	r0, [r0], -ip
 a94:	20001868 	andcs	r1, r0, r8, ror #16
 a98:	00000048 	andeq	r0, r0, r8, asr #32
 a9c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 aa0:	41018e02 	tstmi	r1, r2, lsl #28
 aa4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 aa8:	00000007 	andeq	r0, r0, r7
 aac:	0000001c 	andeq	r0, r0, ip, lsl r0
 ab0:	000009dc 	ldrdeq	r0, [r0], -ip
 ab4:	200018b0 			; <UNDEFINED> instruction: 0x200018b0
 ab8:	0000003a 	andeq	r0, r0, sl, lsr r0
 abc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 ac0:	41018e02 	tstmi	r1, r2, lsl #28
 ac4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 ac8:	00000007 	andeq	r0, r0, r7
 acc:	0000001c 	andeq	r0, r0, ip, lsl r0
 ad0:	000009dc 	ldrdeq	r0, [r0], -ip
 ad4:	200018ea 	andcs	r1, r0, sl, ror #17
 ad8:	00000046 	andeq	r0, r0, r6, asr #32
 adc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 ae0:	41018e02 	tstmi	r1, r2, lsl #28
 ae4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 ae8:	00000007 	andeq	r0, r0, r7
 aec:	0000001c 	andeq	r0, r0, ip, lsl r0
 af0:	000009dc 	ldrdeq	r0, [r0], -ip
 af4:	20001930 	andcs	r1, r0, r0, lsr r9
 af8:	00000048 	andeq	r0, r0, r8, asr #32
 afc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 b00:	41018e02 	tstmi	r1, r2, lsl #28
 b04:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 b08:	00000007 	andeq	r0, r0, r7
 b0c:	0000001c 	andeq	r0, r0, ip, lsl r0
 b10:	000009dc 	ldrdeq	r0, [r0], -ip
 b14:	20001978 	andcs	r1, r0, r8, ror r9
 b18:	00000024 	andeq	r0, r0, r4, lsr #32
 b1c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 b20:	41018e02 	tstmi	r1, r2, lsl #28
 b24:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 b28:	00000007 	andeq	r0, r0, r7
 b2c:	0000001c 	andeq	r0, r0, ip, lsl r0
 b30:	000009dc 	ldrdeq	r0, [r0], -ip
 b34:	2000199c 	mulcs	r0, ip, r9
 b38:	0000001c 	andeq	r0, r0, ip, lsl r0
 b3c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 b40:	41018e02 	tstmi	r1, r2, lsl #28
 b44:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 b48:	00000007 	andeq	r0, r0, r7
 b4c:	0000001c 	andeq	r0, r0, ip, lsl r0
 b50:	000009dc 	ldrdeq	r0, [r0], -ip
 b54:	200019b8 			; <UNDEFINED> instruction: 0x200019b8
 b58:	0000003a 	andeq	r0, r0, sl, lsr r0
 b5c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 b60:	41018e02 	tstmi	r1, r2, lsl #28
 b64:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 b68:	00000007 	andeq	r0, r0, r7
 b6c:	0000001c 	andeq	r0, r0, ip, lsl r0
 b70:	000009dc 	ldrdeq	r0, [r0], -ip
 b74:	200019f2 	strdcs	r1, [r0], -r2
 b78:	00000040 	andeq	r0, r0, r0, asr #32
 b7c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 b80:	41018e02 	tstmi	r1, r2, lsl #28
 b84:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 b88:	00000007 	andeq	r0, r0, r7
 b8c:	0000001c 	andeq	r0, r0, ip, lsl r0
 b90:	000009dc 	ldrdeq	r0, [r0], -ip
 b94:	20001a32 	andcs	r1, r0, r2, lsr sl
 b98:	0000003e 	andeq	r0, r0, lr, lsr r0
 b9c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 ba0:	41018e02 	tstmi	r1, r2, lsl #28
 ba4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 ba8:	00000007 	andeq	r0, r0, r7
 bac:	0000001c 	andeq	r0, r0, ip, lsl r0
 bb0:	000009dc 	ldrdeq	r0, [r0], -ip
 bb4:	20001a70 	andcs	r1, r0, r0, ror sl
 bb8:	00000038 	andeq	r0, r0, r8, lsr r0
 bbc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 bc0:	41018e02 	tstmi	r1, r2, lsl #28
 bc4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 bc8:	00000007 	andeq	r0, r0, r7
 bcc:	0000001c 	andeq	r0, r0, ip, lsl r0
 bd0:	000009dc 	ldrdeq	r0, [r0], -ip
 bd4:	20001aa8 	andcs	r1, r0, r8, lsr #21
 bd8:	00000048 	andeq	r0, r0, r8, asr #32
 bdc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 be0:	41018e02 	tstmi	r1, r2, lsl #28
 be4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 be8:	00000007 	andeq	r0, r0, r7
 bec:	0000001c 	andeq	r0, r0, ip, lsl r0
 bf0:	000009dc 	ldrdeq	r0, [r0], -ip
 bf4:	20001af0 	strdcs	r1, [r0], -r0
 bf8:	00000020 	andeq	r0, r0, r0, lsr #32
 bfc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 c00:	41018e02 	tstmi	r1, r2, lsl #28
 c04:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 c08:	00000007 	andeq	r0, r0, r7
 c0c:	0000001c 	andeq	r0, r0, ip, lsl r0
 c10:	000009dc 	ldrdeq	r0, [r0], -ip
 c14:	20001b10 	andcs	r1, r0, r0, lsl fp
 c18:	00000040 	andeq	r0, r0, r0, asr #32
 c1c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 c20:	41018e02 	tstmi	r1, r2, lsl #28
 c24:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 c28:	00000007 	andeq	r0, r0, r7
 c2c:	0000001c 	andeq	r0, r0, ip, lsl r0
 c30:	000009dc 	ldrdeq	r0, [r0], -ip
 c34:	20001b50 	andcs	r1, r0, r0, asr fp
 c38:	0000003e 	andeq	r0, r0, lr, lsr r0
 c3c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 c40:	41018e02 	tstmi	r1, r2, lsl #28
 c44:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 c48:	00000007 	andeq	r0, r0, r7
 c4c:	0000001c 	andeq	r0, r0, ip, lsl r0
 c50:	000009dc 	ldrdeq	r0, [r0], -ip
 c54:	20001b8e 	andcs	r1, r0, lr, lsl #23
 c58:	00000040 	andeq	r0, r0, r0, asr #32
 c5c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 c60:	41018e02 	tstmi	r1, r2, lsl #28
 c64:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 c68:	00000007 	andeq	r0, r0, r7
 c6c:	0000001c 	andeq	r0, r0, ip, lsl r0
 c70:	000009dc 	ldrdeq	r0, [r0], -ip
 c74:	20001bce 	andcs	r1, r0, lr, asr #23
 c78:	00000040 	andeq	r0, r0, r0, asr #32
 c7c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 c80:	41018e02 	tstmi	r1, r2, lsl #28
 c84:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 c88:	00000007 	andeq	r0, r0, r7
 c8c:	0000001c 	andeq	r0, r0, ip, lsl r0
 c90:	000009dc 	ldrdeq	r0, [r0], -ip
 c94:	20001c0e 	andcs	r1, r0, lr, lsl #24
 c98:	00000038 	andeq	r0, r0, r8, lsr r0
 c9c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 ca0:	41018e02 	tstmi	r1, r2, lsl #28
 ca4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 ca8:	00000007 	andeq	r0, r0, r7
 cac:	0000001c 	andeq	r0, r0, ip, lsl r0
 cb0:	000009dc 	ldrdeq	r0, [r0], -ip
 cb4:	20001c46 	andcs	r1, r0, r6, asr #24
 cb8:	00000040 	andeq	r0, r0, r0, asr #32
 cbc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 cc0:	41018e02 	tstmi	r1, r2, lsl #28
 cc4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 cc8:	00000007 	andeq	r0, r0, r7
 ccc:	0000001c 	andeq	r0, r0, ip, lsl r0
 cd0:	000009dc 	ldrdeq	r0, [r0], -ip
 cd4:	20001c86 	andcs	r1, r0, r6, lsl #25
 cd8:	00000052 	andeq	r0, r0, r2, asr r0
 cdc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 ce0:	41018e02 	tstmi	r1, r2, lsl #28
 ce4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 ce8:	00000007 	andeq	r0, r0, r7
 cec:	0000001c 	andeq	r0, r0, ip, lsl r0
 cf0:	000009dc 	ldrdeq	r0, [r0], -ip
 cf4:	20001cd8 	ldrdcs	r1, [r0], -r8
 cf8:	0000009a 	muleq	r0, sl, r0
 cfc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 d00:	41018e02 	tstmi	r1, r2, lsl #28
 d04:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
 d08:	00000007 	andeq	r0, r0, r7
 d0c:	0000001c 	andeq	r0, r0, ip, lsl r0
 d10:	000009dc 	ldrdeq	r0, [r0], -ip
 d14:	20001d72 	andcs	r1, r0, r2, ror sp
 d18:	00000046 	andeq	r0, r0, r6, asr #32
 d1c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 d20:	41018e02 	tstmi	r1, r2, lsl #28
 d24:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 d28:	00000007 	andeq	r0, r0, r7
 d2c:	0000001c 	andeq	r0, r0, ip, lsl r0
 d30:	000009dc 	ldrdeq	r0, [r0], -ip
 d34:	20001db8 			; <UNDEFINED> instruction: 0x20001db8
 d38:	00000022 	andeq	r0, r0, r2, lsr #32
 d3c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 d40:	41018e02 	tstmi	r1, r2, lsl #28
 d44:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 d48:	00000007 	andeq	r0, r0, r7
 d4c:	0000001c 	andeq	r0, r0, ip, lsl r0
 d50:	000009dc 	ldrdeq	r0, [r0], -ip
 d54:	20001dda 	ldrdcs	r1, [r0], -sl
 d58:	000000ca 	andeq	r0, r0, sl, asr #1
 d5c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 d60:	41018e02 	tstmi	r1, r2, lsl #28
 d64:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
 d68:	00000007 	andeq	r0, r0, r7
 d6c:	0000001c 	andeq	r0, r0, ip, lsl r0
 d70:	000009dc 	ldrdeq	r0, [r0], -ip
 d74:	20001ea4 	andcs	r1, r0, r4, lsr #29
 d78:	00000048 	andeq	r0, r0, r8, asr #32
 d7c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 d80:	41018e02 	tstmi	r1, r2, lsl #28
 d84:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 d88:	00000007 	andeq	r0, r0, r7
 d8c:	0000000c 	andeq	r0, r0, ip
 d90:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 d94:	7c010001 	stcvc	0, cr0, [r1], {1}
 d98:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 d9c:	0000000c 	andeq	r0, r0, ip
 da0:	00000d8c 	andeq	r0, r0, ip, lsl #27
 da4:	20001eed 	andcs	r1, r0, sp, ror #29
 da8:	0000010a 	andeq	r0, r0, sl, lsl #2
 dac:	0000000c 	andeq	r0, r0, ip
 db0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 db4:	7c020001 	stcvc	0, cr0, [r2], {1}
 db8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 dbc:	00000014 	andeq	r0, r0, r4, lsl r0
 dc0:	00000dac 	andeq	r0, r0, ip, lsr #27
 dc4:	20002004 	andcs	r2, r0, r4
 dc8:	00000012 	andeq	r0, r0, r2, lsl r0
 dcc:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
 dd0:	00018e02 	andeq	r8, r1, r2, lsl #28
