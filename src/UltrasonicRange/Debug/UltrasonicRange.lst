
Debug/UltrasonicRange:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:


__attribute__((naked)) __attribute__((section (".start_section")) )
void startup ( void )
{
__asm__ volatile(" LDR R0,=0x2001C000\n");		/* set stack */
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <startup+0xc>)
__asm__ volatile(" MOV SP,R0\n");
20000002:	4685      	mov	sp, r0
__asm__ volatile(" BL main\n");					/* call main */
20000004:	f000 fedd 	bl	20000dc2 <main>
__asm__ volatile(".L1: B .L1\n");				/* never return */
20000008:	e7fe      	b.n	20000008 <startup+0x8>
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
20000014:	4b14      	ldr	r3, [pc, #80]	; (20000068 <RCC_DeInit+0x58>)
20000016:	681a      	ldr	r2, [r3, #0]
20000018:	4b13      	ldr	r3, [pc, #76]	; (20000068 <RCC_DeInit+0x58>)
2000001a:	2101      	movs	r1, #1
2000001c:	430a      	orrs	r2, r1
2000001e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
20000020:	4b11      	ldr	r3, [pc, #68]	; (20000068 <RCC_DeInit+0x58>)
20000022:	2200      	movs	r2, #0
20000024:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42xxx/43xxx/446xx/469xx/479xx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
20000026:	4b10      	ldr	r3, [pc, #64]	; (20000068 <RCC_DeInit+0x58>)
20000028:	681a      	ldr	r2, [r3, #0]
2000002a:	4b0f      	ldr	r3, [pc, #60]	; (20000068 <RCC_DeInit+0x58>)
2000002c:	490f      	ldr	r1, [pc, #60]	; (2000006c <RCC_DeInit+0x5c>)
2000002e:	400a      	ands	r2, r1
20000030:	601a      	str	r2, [r3, #0]
  
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
20000032:	4b0d      	ldr	r3, [pc, #52]	; (20000068 <RCC_DeInit+0x58>)
20000034:	4a0e      	ldr	r2, [pc, #56]	; (20000070 <RCC_DeInit+0x60>)
20000036:	605a      	str	r2, [r3, #4]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F413_423xx) || defined(STM32F469_479xx)  
  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
20000038:	4a0b      	ldr	r2, [pc, #44]	; (20000068 <RCC_DeInit+0x58>)
2000003a:	2384      	movs	r3, #132	; 0x84
2000003c:	490d      	ldr	r1, [pc, #52]	; (20000074 <RCC_DeInit+0x64>)
2000003e:	50d1      	str	r1, [r2, r3]
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE || STM32F446xx || STM32F413_423xx || STM32F469_479xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx) 
  /* Reset PLLSAICFGR register, only available for STM32F42xxx/43xxx/446xx/469xx/479xx devices */
  RCC->PLLSAICFGR = 0x24003000;
20000040:	4a09      	ldr	r2, [pc, #36]	; (20000068 <RCC_DeInit+0x58>)
20000042:	2388      	movs	r3, #136	; 0x88
20000044:	490c      	ldr	r1, [pc, #48]	; (20000078 <RCC_DeInit+0x68>)
20000046:	50d1      	str	r1, [r2, r3]
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F446xx || STM32F469_479xx */
  
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
20000048:	4b07      	ldr	r3, [pc, #28]	; (20000068 <RCC_DeInit+0x58>)
2000004a:	681a      	ldr	r2, [r3, #0]
2000004c:	4b06      	ldr	r3, [pc, #24]	; (20000068 <RCC_DeInit+0x58>)
2000004e:	490b      	ldr	r1, [pc, #44]	; (2000007c <RCC_DeInit+0x6c>)
20000050:	400a      	ands	r2, r1
20000052:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
20000054:	4b04      	ldr	r3, [pc, #16]	; (20000068 <RCC_DeInit+0x58>)
20000056:	2200      	movs	r2, #0
20000058:	60da      	str	r2, [r3, #12]

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx and STM32F413_423xx devices */
  RCC->DCKCFGR = 0x00000000;
2000005a:	4a03      	ldr	r2, [pc, #12]	; (20000068 <RCC_DeInit+0x58>)
2000005c:	238c      	movs	r3, #140	; 0x8c
2000005e:	2100      	movs	r1, #0
20000060:	50d1      	str	r1, [r2, r3]
  
#if defined(STM32F410xx) || defined(STM32F413_423xx)
  /* Disable LPTIM and FMPI2C clock prescalers selection, only available for STM32F410xx and STM32F413_423xx devices */
  RCC->DCKCFGR2 = 0x00000000;
#endif /* STM32F410xx || STM32F413_423xx */  
}
20000062:	46c0      	nop			; (mov r8, r8)
20000064:	46bd      	mov	sp, r7
20000066:	bd80      	pop	{r7, pc}
20000068:	40023800 	andmi	r3, r2, r0, lsl #16
2000006c:	eaf6ffff 	b	1fdc0070 <startup-0x23ff90>
20000070:	24003010 	strcs	r3, [r0], #-16
20000074:	20003000 	andcs	r3, r0, r0
20000078:	24003000 	strcs	r3, [r0], #-0
2000007c:	fffbffff 			; <UNDEFINED> instruction: 0xfffbffff

20000080 <RCC_HSEConfig>:
  *            @arg RCC_HSE_ON: turn ON the HSE oscillator
  *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint8_t RCC_HSE)
{
20000080:	b580      	push	{r7, lr}
20000082:	b082      	sub	sp, #8
20000084:	af00      	add	r7, sp, #0
20000086:	0002      	movs	r2, r0
20000088:	1dfb      	adds	r3, r7, #7
2000008a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
2000008c:	4b05      	ldr	r3, [pc, #20]	; (200000a4 <RCC_HSEConfig+0x24>)
2000008e:	2200      	movs	r2, #0
20000090:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
20000092:	4a04      	ldr	r2, [pc, #16]	; (200000a4 <RCC_HSEConfig+0x24>)
20000094:	1dfb      	adds	r3, r7, #7
20000096:	781b      	ldrb	r3, [r3, #0]
20000098:	7013      	strb	r3, [r2, #0]
}
2000009a:	46c0      	nop			; (mov r8, r8)
2000009c:	46bd      	mov	sp, r7
2000009e:	b002      	add	sp, #8
200000a0:	bd80      	pop	{r7, pc}
200000a2:	46c0      	nop			; (mov r8, r8)
200000a4:	40023802 	andmi	r3, r2, r2, lsl #16

200000a8 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
200000a8:	b590      	push	{r4, r7, lr}
200000aa:	b083      	sub	sp, #12
200000ac:	af00      	add	r7, sp, #0
  __IO uint32_t startupcounter = 0;
200000ae:	2300      	movs	r3, #0
200000b0:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
200000b2:	1dfb      	adds	r3, r7, #7
200000b4:	2200      	movs	r2, #0
200000b6:	701a      	strb	r2, [r3, #0]
  FlagStatus hsestatus = RESET;
200000b8:	1dbb      	adds	r3, r7, #6
200000ba:	2200      	movs	r2, #0
200000bc:	701a      	strb	r2, [r3, #0]
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
200000be:	1dbc      	adds	r4, r7, #6
200000c0:	2031      	movs	r0, #49	; 0x31
200000c2:	f000 fda1 	bl	20000c08 <RCC_GetFlagStatus>
200000c6:	0003      	movs	r3, r0
200000c8:	7023      	strb	r3, [r4, #0]
    startupcounter++;
200000ca:	683b      	ldr	r3, [r7, #0]
200000cc:	3301      	adds	r3, #1
200000ce:	603b      	str	r3, [r7, #0]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
200000d0:	683a      	ldr	r2, [r7, #0]
200000d2:	23a0      	movs	r3, #160	; 0xa0
200000d4:	01db      	lsls	r3, r3, #7
200000d6:	429a      	cmp	r2, r3
200000d8:	d003      	beq.n	200000e2 <RCC_WaitForHSEStartUp+0x3a>
200000da:	1dbb      	adds	r3, r7, #6
200000dc:	781b      	ldrb	r3, [r3, #0]
200000de:	2b00      	cmp	r3, #0
200000e0:	d0ed      	beq.n	200000be <RCC_WaitForHSEStartUp+0x16>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
200000e2:	2031      	movs	r0, #49	; 0x31
200000e4:	f000 fd90 	bl	20000c08 <RCC_GetFlagStatus>
200000e8:	1e03      	subs	r3, r0, #0
200000ea:	d003      	beq.n	200000f4 <RCC_WaitForHSEStartUp+0x4c>
  {
    status = SUCCESS;
200000ec:	1dfb      	adds	r3, r7, #7
200000ee:	2201      	movs	r2, #1
200000f0:	701a      	strb	r2, [r3, #0]
200000f2:	e002      	b.n	200000fa <RCC_WaitForHSEStartUp+0x52>
  }
  else
  {
    status = ERROR;
200000f4:	1dfb      	adds	r3, r7, #7
200000f6:	2200      	movs	r2, #0
200000f8:	701a      	strb	r2, [r3, #0]
  }
  return (status);
200000fa:	1dfb      	adds	r3, r7, #7
200000fc:	781b      	ldrb	r3, [r3, #0]
}
200000fe:	0018      	movs	r0, r3
20000100:	46bd      	mov	sp, r7
20000102:	b003      	add	sp, #12
20000104:	bd90      	pop	{r4, r7, pc}

20000106 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *         This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
20000106:	b580      	push	{r7, lr}
20000108:	b084      	sub	sp, #16
2000010a:	af00      	add	r7, sp, #0
2000010c:	0002      	movs	r2, r0
2000010e:	1dfb      	adds	r3, r7, #7
20000110:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0;
20000112:	2300      	movs	r3, #0
20000114:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
20000116:	4b0a      	ldr	r3, [pc, #40]	; (20000140 <RCC_AdjustHSICalibrationValue+0x3a>)
20000118:	681b      	ldr	r3, [r3, #0]
2000011a:	60fb      	str	r3, [r7, #12]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
2000011c:	68fb      	ldr	r3, [r7, #12]
2000011e:	22f8      	movs	r2, #248	; 0xf8
20000120:	4393      	bics	r3, r2
20000122:	60fb      	str	r3, [r7, #12]

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
20000124:	1dfb      	adds	r3, r7, #7
20000126:	781b      	ldrb	r3, [r3, #0]
20000128:	00db      	lsls	r3, r3, #3
2000012a:	68fa      	ldr	r2, [r7, #12]
2000012c:	4313      	orrs	r3, r2
2000012e:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CR = tmpreg;
20000130:	4b03      	ldr	r3, [pc, #12]	; (20000140 <RCC_AdjustHSICalibrationValue+0x3a>)
20000132:	68fa      	ldr	r2, [r7, #12]
20000134:	601a      	str	r2, [r3, #0]
}
20000136:	46c0      	nop			; (mov r8, r8)
20000138:	46bd      	mov	sp, r7
2000013a:	b004      	add	sp, #16
2000013c:	bd80      	pop	{r7, pc}
2000013e:	46c0      	nop			; (mov r8, r8)
20000140:	40023800 	andmi	r3, r2, r0, lsl #16

20000144 <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.  
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
20000144:	b580      	push	{r7, lr}
20000146:	b082      	sub	sp, #8
20000148:	af00      	add	r7, sp, #0
2000014a:	0002      	movs	r2, r0
2000014c:	1dfb      	adds	r3, r7, #7
2000014e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
20000150:	4b03      	ldr	r3, [pc, #12]	; (20000160 <RCC_HSICmd+0x1c>)
20000152:	1dfa      	adds	r2, r7, #7
20000154:	7812      	ldrb	r2, [r2, #0]
20000156:	601a      	str	r2, [r3, #0]
}
20000158:	46c0      	nop			; (mov r8, r8)
2000015a:	46bd      	mov	sp, r7
2000015c:	b002      	add	sp, #8
2000015e:	bd80      	pop	{r7, pc}
20000160:	42470000 	submi	r0, r7, #0

20000164 <RCC_LSEConfig>:
  *            @arg RCC_LSE_ON: turn ON the LSE oscillator
  *            @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
20000164:	b580      	push	{r7, lr}
20000166:	b082      	sub	sp, #8
20000168:	af00      	add	r7, sp, #0
2000016a:	0002      	movs	r2, r0
2000016c:	1dfb      	adds	r3, r7, #7
2000016e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
20000170:	4b0c      	ldr	r3, [pc, #48]	; (200001a4 <RCC_LSEConfig+0x40>)
20000172:	2200      	movs	r2, #0
20000174:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
20000176:	4b0b      	ldr	r3, [pc, #44]	; (200001a4 <RCC_LSEConfig+0x40>)
20000178:	2200      	movs	r2, #0
2000017a:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
2000017c:	1dfb      	adds	r3, r7, #7
2000017e:	781b      	ldrb	r3, [r3, #0]
20000180:	2b01      	cmp	r3, #1
20000182:	d002      	beq.n	2000018a <RCC_LSEConfig+0x26>
20000184:	2b04      	cmp	r3, #4
20000186:	d004      	beq.n	20000192 <RCC_LSEConfig+0x2e>
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;
    default:
      break;
20000188:	e007      	b.n	2000019a <RCC_LSEConfig+0x36>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
2000018a:	4b06      	ldr	r3, [pc, #24]	; (200001a4 <RCC_LSEConfig+0x40>)
2000018c:	2201      	movs	r2, #1
2000018e:	701a      	strb	r2, [r3, #0]
      break;
20000190:	e003      	b.n	2000019a <RCC_LSEConfig+0x36>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
20000192:	4b04      	ldr	r3, [pc, #16]	; (200001a4 <RCC_LSEConfig+0x40>)
20000194:	2205      	movs	r2, #5
20000196:	701a      	strb	r2, [r3, #0]
      break;
20000198:	46c0      	nop			; (mov r8, r8)
  }
}
2000019a:	46c0      	nop			; (mov r8, r8)
2000019c:	46bd      	mov	sp, r7
2000019e:	b002      	add	sp, #8
200001a0:	bd80      	pop	{r7, pc}
200001a2:	46c0      	nop			; (mov r8, r8)
200001a4:	40023870 	andmi	r3, r2, r0, ror r8

200001a8 <RCC_LSICmd>:
  * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
  *         clock cycles. 
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
200001a8:	b580      	push	{r7, lr}
200001aa:	b082      	sub	sp, #8
200001ac:	af00      	add	r7, sp, #0
200001ae:	0002      	movs	r2, r0
200001b0:	1dfb      	adds	r3, r7, #7
200001b2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
200001b4:	4b03      	ldr	r3, [pc, #12]	; (200001c4 <RCC_LSICmd+0x1c>)
200001b6:	1dfa      	adds	r2, r7, #7
200001b8:	7812      	ldrb	r2, [r2, #0]
200001ba:	601a      	str	r2, [r3, #0]
}
200001bc:	46c0      	nop			; (mov r8, r8)
200001be:	46bd      	mov	sp, r7
200001c0:	b002      	add	sp, #8
200001c2:	bd80      	pop	{r7, pc}
200001c4:	42470e80 	submi	r0, r7, #128, 28	; 0x800

200001c8 <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
200001c8:	b580      	push	{r7, lr}
200001ca:	b084      	sub	sp, #16
200001cc:	af00      	add	r7, sp, #0
200001ce:	60f8      	str	r0, [r7, #12]
200001d0:	60b9      	str	r1, [r7, #8]
200001d2:	607a      	str	r2, [r7, #4]
200001d4:	603b      	str	r3, [r7, #0]
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
200001d6:	687b      	ldr	r3, [r7, #4]
200001d8:	019a      	lsls	r2, r3, #6
200001da:	68bb      	ldr	r3, [r7, #8]
200001dc:	431a      	orrs	r2, r3
200001de:	683b      	ldr	r3, [r7, #0]
200001e0:	085b      	lsrs	r3, r3, #1
200001e2:	3b01      	subs	r3, #1
200001e4:	041b      	lsls	r3, r3, #16
200001e6:	431a      	orrs	r2, r3
200001e8:	68fb      	ldr	r3, [r7, #12]
200001ea:	431a      	orrs	r2, r3
200001ec:	0011      	movs	r1, r2
                 (PLLQ << 24);
200001ee:	69bb      	ldr	r3, [r7, #24]
200001f0:	061a      	lsls	r2, r3, #24
  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
200001f2:	4b03      	ldr	r3, [pc, #12]	; (20000200 <RCC_PLLConfig+0x38>)
200001f4:	430a      	orrs	r2, r1
200001f6:	605a      	str	r2, [r3, #4]
}
200001f8:	46c0      	nop			; (mov r8, r8)
200001fa:	46bd      	mov	sp, r7
200001fc:	b004      	add	sp, #16
200001fe:	bd80      	pop	{r7, pc}
20000200:	40023800 	andmi	r3, r2, r0, lsl #16

20000204 <RCC_PLLCmd>:
  * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
  * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
20000204:	b580      	push	{r7, lr}
20000206:	b082      	sub	sp, #8
20000208:	af00      	add	r7, sp, #0
2000020a:	0002      	movs	r2, r0
2000020c:	1dfb      	adds	r3, r7, #7
2000020e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
20000210:	4b03      	ldr	r3, [pc, #12]	; (20000220 <RCC_PLLCmd+0x1c>)
20000212:	1dfa      	adds	r2, r7, #7
20000214:	7812      	ldrb	r2, [r2, #0]
20000216:	601a      	str	r2, [r3, #0]
}
20000218:	46c0      	nop			; (mov r8, r8)
2000021a:	46bd      	mov	sp, r7
2000021c:	b002      	add	sp, #8
2000021e:	bd80      	pop	{r7, pc}
20000220:	42470060 	submi	r0, r7, #96	; 0x60

20000224 <RCC_PLLI2SConfig>:
  *         on the I2S clock frequency.
  *   
  * @retval None
  */
void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR)
{
20000224:	b580      	push	{r7, lr}
20000226:	b082      	sub	sp, #8
20000228:	af00      	add	r7, sp, #0
2000022a:	6078      	str	r0, [r7, #4]
2000022c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
2000022e:	687b      	ldr	r3, [r7, #4]
20000230:	019a      	lsls	r2, r3, #6
20000232:	683b      	ldr	r3, [r7, #0]
20000234:	071b      	lsls	r3, r3, #28
20000236:	4904      	ldr	r1, [pc, #16]	; (20000248 <RCC_PLLI2SConfig+0x24>)
20000238:	4313      	orrs	r3, r2
2000023a:	2284      	movs	r2, #132	; 0x84
2000023c:	508b      	str	r3, [r1, r2]
}
2000023e:	46c0      	nop			; (mov r8, r8)
20000240:	46bd      	mov	sp, r7
20000242:	b002      	add	sp, #8
20000244:	bd80      	pop	{r7, pc}
20000246:	46c0      	nop			; (mov r8, r8)
20000248:	40023800 	andmi	r3, r2, r0, lsl #16

2000024c <RCC_PLLI2SCmd>:
  * @note   The PLLI2S is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLI2S. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
2000024c:	b580      	push	{r7, lr}
2000024e:	b082      	sub	sp, #8
20000250:	af00      	add	r7, sp, #0
20000252:	0002      	movs	r2, r0
20000254:	1dfb      	adds	r3, r7, #7
20000256:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
20000258:	4b03      	ldr	r3, [pc, #12]	; (20000268 <RCC_PLLI2SCmd+0x1c>)
2000025a:	1dfa      	adds	r2, r7, #7
2000025c:	7812      	ldrb	r2, [r2, #0]
2000025e:	601a      	str	r2, [r3, #0]
}
20000260:	46c0      	nop			; (mov r8, r8)
20000262:	46bd      	mov	sp, r7
20000264:	b002      	add	sp, #8
20000266:	bd80      	pop	{r7, pc}
20000268:	42470068 	submi	r0, r7, #104	; 0x68

2000026c <RCC_PLLSAIConfig>:
  *          This parameter must be a number between 2 and 7.
  *   
  * @retval None
  */
void RCC_PLLSAIConfig(uint32_t PLLSAIN, uint32_t PLLSAIQ, uint32_t PLLSAIR)
{
2000026c:	b580      	push	{r7, lr}
2000026e:	b084      	sub	sp, #16
20000270:	af00      	add	r7, sp, #0
20000272:	60f8      	str	r0, [r7, #12]
20000274:	60b9      	str	r1, [r7, #8]
20000276:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIN));
  assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIR));
  assert_param(IS_RCC_PLLSAIQ_VALUE(PLLSAIQ));
  
  RCC->PLLSAICFGR = (PLLSAIN << 6) | (PLLSAIQ << 24) | (PLLSAIR << 28);
20000278:	68fb      	ldr	r3, [r7, #12]
2000027a:	019a      	lsls	r2, r3, #6
2000027c:	68bb      	ldr	r3, [r7, #8]
2000027e:	061b      	lsls	r3, r3, #24
20000280:	431a      	orrs	r2, r3
20000282:	687b      	ldr	r3, [r7, #4]
20000284:	071b      	lsls	r3, r3, #28
20000286:	4904      	ldr	r1, [pc, #16]	; (20000298 <RCC_PLLSAIConfig+0x2c>)
20000288:	4313      	orrs	r3, r2
2000028a:	2288      	movs	r2, #136	; 0x88
2000028c:	508b      	str	r3, [r1, r2]
}
2000028e:	46c0      	nop			; (mov r8, r8)
20000290:	46bd      	mov	sp, r7
20000292:	b004      	add	sp, #16
20000294:	bd80      	pop	{r7, pc}
20000296:	46c0      	nop			; (mov r8, r8)
20000298:	40023800 	andmi	r3, r2, r0, lsl #16

2000029c <RCC_PLLSAICmd>:
  * @note   The PLLSAI is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLSAI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLSAICmd(FunctionalState NewState)
{
2000029c:	b580      	push	{r7, lr}
2000029e:	b082      	sub	sp, #8
200002a0:	af00      	add	r7, sp, #0
200002a2:	0002      	movs	r2, r0
200002a4:	1dfb      	adds	r3, r7, #7
200002a6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLSAION_BB = (uint32_t)NewState;
200002a8:	4b03      	ldr	r3, [pc, #12]	; (200002b8 <RCC_PLLSAICmd+0x1c>)
200002aa:	1dfa      	adds	r2, r7, #7
200002ac:	7812      	ldrb	r2, [r2, #0]
200002ae:	601a      	str	r2, [r3, #0]
}
200002b0:	46c0      	nop			; (mov r8, r8)
200002b2:	46bd      	mov	sp, r7
200002b4:	b002      	add	sp, #8
200002b6:	bd80      	pop	{r7, pc}
200002b8:	42470070 	submi	r0, r7, #112	; 0x70

200002bc <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
200002bc:	b580      	push	{r7, lr}
200002be:	b082      	sub	sp, #8
200002c0:	af00      	add	r7, sp, #0
200002c2:	0002      	movs	r2, r0
200002c4:	1dfb      	adds	r3, r7, #7
200002c6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
200002c8:	4b03      	ldr	r3, [pc, #12]	; (200002d8 <RCC_ClockSecuritySystemCmd+0x1c>)
200002ca:	1dfa      	adds	r2, r7, #7
200002cc:	7812      	ldrb	r2, [r2, #0]
200002ce:	601a      	str	r2, [r3, #0]
}
200002d0:	46c0      	nop			; (mov r8, r8)
200002d2:	46bd      	mov	sp, r7
200002d4:	b002      	add	sp, #8
200002d6:	bd80      	pop	{r7, pc}
200002d8:	4247004c 	submi	r0, r7, #76	; 0x4c

200002dc <RCC_MCO1Config>:
  *            @arg RCC_MCO1Div_4: division by 4 applied to MCO1 clock
  *            @arg RCC_MCO1Div_5: division by 5 applied to MCO1 clock
  * @retval None
  */
void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
{
200002dc:	b580      	push	{r7, lr}
200002de:	b084      	sub	sp, #16
200002e0:	af00      	add	r7, sp, #0
200002e2:	6078      	str	r0, [r7, #4]
200002e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
200002e6:	2300      	movs	r3, #0
200002e8:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
200002ea:	4b0a      	ldr	r3, [pc, #40]	; (20000314 <RCC_MCO1Config+0x38>)
200002ec:	689b      	ldr	r3, [r3, #8]
200002ee:	60fb      	str	r3, [r7, #12]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
200002f0:	68fb      	ldr	r3, [r7, #12]
200002f2:	4a09      	ldr	r2, [pc, #36]	; (20000318 <RCC_MCO1Config+0x3c>)
200002f4:	4013      	ands	r3, r2
200002f6:	60fb      	str	r3, [r7, #12]

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
200002f8:	687a      	ldr	r2, [r7, #4]
200002fa:	683b      	ldr	r3, [r7, #0]
200002fc:	4313      	orrs	r3, r2
200002fe:	68fa      	ldr	r2, [r7, #12]
20000300:	4313      	orrs	r3, r2
20000302:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
20000304:	4b03      	ldr	r3, [pc, #12]	; (20000314 <RCC_MCO1Config+0x38>)
20000306:	68fa      	ldr	r2, [r7, #12]
20000308:	609a      	str	r2, [r3, #8]

#if defined(STM32F410xx)
  RCC_MCO1Cmd(ENABLE);
#endif /* STM32F410xx */   
}
2000030a:	46c0      	nop			; (mov r8, r8)
2000030c:	46bd      	mov	sp, r7
2000030e:	b004      	add	sp, #16
20000310:	bd80      	pop	{r7, pc}
20000312:	46c0      	nop			; (mov r8, r8)
20000314:	40023800 	andmi	r3, r2, r0, lsl #16
20000318:	f89fffff 			; <UNDEFINED> instruction: 0xf89fffff

2000031c <RCC_MCO2Config>:
  * @note  For STM32F410xx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)
{
2000031c:	b580      	push	{r7, lr}
2000031e:	b084      	sub	sp, #16
20000320:	af00      	add	r7, sp, #0
20000322:	6078      	str	r0, [r7, #4]
20000324:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
20000326:	2300      	movs	r3, #0
20000328:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
2000032a:	4b0a      	ldr	r3, [pc, #40]	; (20000354 <RCC_MCO2Config+0x38>)
2000032c:	689b      	ldr	r3, [r3, #8]
2000032e:	60fb      	str	r3, [r7, #12]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
20000330:	68fb      	ldr	r3, [r7, #12]
20000332:	015b      	lsls	r3, r3, #5
20000334:	095b      	lsrs	r3, r3, #5
20000336:	60fb      	str	r3, [r7, #12]

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
20000338:	687a      	ldr	r2, [r7, #4]
2000033a:	683b      	ldr	r3, [r7, #0]
2000033c:	4313      	orrs	r3, r2
2000033e:	68fa      	ldr	r2, [r7, #12]
20000340:	4313      	orrs	r3, r2
20000342:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
20000344:	4b03      	ldr	r3, [pc, #12]	; (20000354 <RCC_MCO2Config+0x38>)
20000346:	68fa      	ldr	r2, [r7, #12]
20000348:	609a      	str	r2, [r3, #8]

#if defined(STM32F410xx)
  RCC_MCO2Cmd(ENABLE);
#endif /* STM32F410xx */   
}
2000034a:	46c0      	nop			; (mov r8, r8)
2000034c:	46bd      	mov	sp, r7
2000034e:	b004      	add	sp, #16
20000350:	bd80      	pop	{r7, pc}
20000352:	46c0      	nop			; (mov r8, r8)
20000354:	40023800 	andmi	r3, r2, r0, lsl #16

20000358 <RCC_SYSCLKConfig>:
  *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source (RCC_SYSCLKSource_PLLPCLK for STM32F446xx devices)
  *            @arg RCC_SYSCLKSource_PLLRCLK: PLL R selected as system clock source only for STM32F412xG, STM32F413_423xx and STM32F446xx devices
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
20000358:	b580      	push	{r7, lr}
2000035a:	b084      	sub	sp, #16
2000035c:	af00      	add	r7, sp, #0
2000035e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000360:	2300      	movs	r3, #0
20000362:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
20000364:	4b08      	ldr	r3, [pc, #32]	; (20000388 <RCC_SYSCLKConfig+0x30>)
20000366:	689b      	ldr	r3, [r3, #8]
20000368:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
2000036a:	68fb      	ldr	r3, [r7, #12]
2000036c:	2203      	movs	r2, #3
2000036e:	4393      	bics	r3, r2
20000370:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
20000372:	68fa      	ldr	r2, [r7, #12]
20000374:	687b      	ldr	r3, [r7, #4]
20000376:	4313      	orrs	r3, r2
20000378:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
2000037a:	4b03      	ldr	r3, [pc, #12]	; (20000388 <RCC_SYSCLKConfig+0x30>)
2000037c:	68fa      	ldr	r2, [r7, #12]
2000037e:	609a      	str	r2, [r3, #8]
}
20000380:	46c0      	nop			; (mov r8, r8)
20000382:	46bd      	mov	sp, r7
20000384:	b004      	add	sp, #16
20000386:	bd80      	pop	{r7, pc}
20000388:	40023800 	andmi	r3, r2, r0, lsl #16

2000038c <RCC_GetSYSCLKSource>:
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock (PLL P for STM32F446xx devices)
  *              - 0x0C: PLL R used as system clock (only for STM32F412xG, STM32F413_423xx and STM32F446xx devices)
  */
uint8_t RCC_GetSYSCLKSource(void)
{
2000038c:	b580      	push	{r7, lr}
2000038e:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
20000390:	4b04      	ldr	r3, [pc, #16]	; (200003a4 <RCC_GetSYSCLKSource+0x18>)
20000392:	689b      	ldr	r3, [r3, #8]
20000394:	b2db      	uxtb	r3, r3
20000396:	220c      	movs	r2, #12
20000398:	4013      	ands	r3, r2
2000039a:	b2db      	uxtb	r3, r3
}
2000039c:	0018      	movs	r0, r3
2000039e:	46bd      	mov	sp, r7
200003a0:	bd80      	pop	{r7, pc}
200003a2:	46c0      	nop			; (mov r8, r8)
200003a4:	40023800 	andmi	r3, r2, r0, lsl #16

200003a8 <RCC_HCLKConfig>:
  *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
200003a8:	b580      	push	{r7, lr}
200003aa:	b084      	sub	sp, #16
200003ac:	af00      	add	r7, sp, #0
200003ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
200003b0:	2300      	movs	r3, #0
200003b2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
200003b4:	4b08      	ldr	r3, [pc, #32]	; (200003d8 <RCC_HCLKConfig+0x30>)
200003b6:	689b      	ldr	r3, [r3, #8]
200003b8:	60fb      	str	r3, [r7, #12]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
200003ba:	68fb      	ldr	r3, [r7, #12]
200003bc:	22f0      	movs	r2, #240	; 0xf0
200003be:	4393      	bics	r3, r2
200003c0:	60fb      	str	r3, [r7, #12]

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
200003c2:	68fa      	ldr	r2, [r7, #12]
200003c4:	687b      	ldr	r3, [r7, #4]
200003c6:	4313      	orrs	r3, r2
200003c8:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
200003ca:	4b03      	ldr	r3, [pc, #12]	; (200003d8 <RCC_HCLKConfig+0x30>)
200003cc:	68fa      	ldr	r2, [r7, #12]
200003ce:	609a      	str	r2, [r3, #8]
}
200003d0:	46c0      	nop			; (mov r8, r8)
200003d2:	46bd      	mov	sp, r7
200003d4:	b004      	add	sp, #16
200003d6:	bd80      	pop	{r7, pc}
200003d8:	40023800 	andmi	r3, r2, r0, lsl #16

200003dc <RCC_PCLK1Config>:
  *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
200003dc:	b580      	push	{r7, lr}
200003de:	b084      	sub	sp, #16
200003e0:	af00      	add	r7, sp, #0
200003e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
200003e4:	2300      	movs	r3, #0
200003e6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
200003e8:	4b08      	ldr	r3, [pc, #32]	; (2000040c <RCC_PCLK1Config+0x30>)
200003ea:	689b      	ldr	r3, [r3, #8]
200003ec:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
200003ee:	68fb      	ldr	r3, [r7, #12]
200003f0:	4a07      	ldr	r2, [pc, #28]	; (20000410 <RCC_PCLK1Config+0x34>)
200003f2:	4013      	ands	r3, r2
200003f4:	60fb      	str	r3, [r7, #12]

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
200003f6:	68fa      	ldr	r2, [r7, #12]
200003f8:	687b      	ldr	r3, [r7, #4]
200003fa:	4313      	orrs	r3, r2
200003fc:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
200003fe:	4b03      	ldr	r3, [pc, #12]	; (2000040c <RCC_PCLK1Config+0x30>)
20000400:	68fa      	ldr	r2, [r7, #12]
20000402:	609a      	str	r2, [r3, #8]
}
20000404:	46c0      	nop			; (mov r8, r8)
20000406:	46bd      	mov	sp, r7
20000408:	b004      	add	sp, #16
2000040a:	bd80      	pop	{r7, pc}
2000040c:	40023800 	andmi	r3, r2, r0, lsl #16
20000410:	ffffe3ff 			; <UNDEFINED> instruction: 0xffffe3ff

20000414 <RCC_PCLK2Config>:
  *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
20000414:	b580      	push	{r7, lr}
20000416:	b084      	sub	sp, #16
20000418:	af00      	add	r7, sp, #0
2000041a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
2000041c:	2300      	movs	r3, #0
2000041e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
20000420:	4b09      	ldr	r3, [pc, #36]	; (20000448 <RCC_PCLK2Config+0x34>)
20000422:	689b      	ldr	r3, [r3, #8]
20000424:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
20000426:	68fb      	ldr	r3, [r7, #12]
20000428:	4a08      	ldr	r2, [pc, #32]	; (2000044c <RCC_PCLK2Config+0x38>)
2000042a:	4013      	ands	r3, r2
2000042c:	60fb      	str	r3, [r7, #12]

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
2000042e:	687b      	ldr	r3, [r7, #4]
20000430:	00db      	lsls	r3, r3, #3
20000432:	68fa      	ldr	r2, [r7, #12]
20000434:	4313      	orrs	r3, r2
20000436:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
20000438:	4b03      	ldr	r3, [pc, #12]	; (20000448 <RCC_PCLK2Config+0x34>)
2000043a:	68fa      	ldr	r2, [r7, #12]
2000043c:	609a      	str	r2, [r3, #8]
}
2000043e:	46c0      	nop			; (mov r8, r8)
20000440:	46bd      	mov	sp, r7
20000442:	b004      	add	sp, #16
20000444:	bd80      	pop	{r7, pc}
20000446:	46c0      	nop			; (mov r8, r8)
20000448:	40023800 	andmi	r3, r2, r0, lsl #16
2000044c:	ffff1fff 			; <UNDEFINED> instruction: 0xffff1fff

20000450 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
20000450:	b580      	push	{r7, lr}
20000452:	b088      	sub	sp, #32
20000454:	af00      	add	r7, sp, #0
20000456:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
20000458:	2300      	movs	r3, #0
2000045a:	61bb      	str	r3, [r7, #24]
2000045c:	2300      	movs	r3, #0
2000045e:	617b      	str	r3, [r7, #20]
20000460:	2300      	movs	r3, #0
20000462:	61fb      	str	r3, [r7, #28]
20000464:	2302      	movs	r3, #2
20000466:	613b      	str	r3, [r7, #16]
20000468:	2300      	movs	r3, #0
2000046a:	60fb      	str	r3, [r7, #12]
2000046c:	2302      	movs	r3, #2
2000046e:	60bb      	str	r3, [r7, #8]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
20000470:	4b4c      	ldr	r3, [pc, #304]	; (200005a4 <RCC_GetClocksFreq+0x154>)
20000472:	689b      	ldr	r3, [r3, #8]
20000474:	220c      	movs	r2, #12
20000476:	4013      	ands	r3, r2
20000478:	61bb      	str	r3, [r7, #24]
  
  switch (tmp)
2000047a:	69bb      	ldr	r3, [r7, #24]
2000047c:	2b08      	cmp	r3, #8
2000047e:	d011      	beq.n	200004a4 <RCC_GetClocksFreq+0x54>
20000480:	69bb      	ldr	r3, [r7, #24]
20000482:	2b08      	cmp	r3, #8
20000484:	d848      	bhi.n	20000518 <RCC_GetClocksFreq+0xc8>
20000486:	69bb      	ldr	r3, [r7, #24]
20000488:	2b00      	cmp	r3, #0
2000048a:	d003      	beq.n	20000494 <RCC_GetClocksFreq+0x44>
2000048c:	69bb      	ldr	r3, [r7, #24]
2000048e:	2b04      	cmp	r3, #4
20000490:	d004      	beq.n	2000049c <RCC_GetClocksFreq+0x4c>
20000492:	e041      	b.n	20000518 <RCC_GetClocksFreq+0xc8>
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
20000494:	687b      	ldr	r3, [r7, #4]
20000496:	4a44      	ldr	r2, [pc, #272]	; (200005a8 <RCC_GetClocksFreq+0x158>)
20000498:	601a      	str	r2, [r3, #0]
    break;
2000049a:	e041      	b.n	20000520 <RCC_GetClocksFreq+0xd0>
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
2000049c:	687b      	ldr	r3, [r7, #4]
2000049e:	4a43      	ldr	r2, [pc, #268]	; (200005ac <RCC_GetClocksFreq+0x15c>)
200004a0:	601a      	str	r2, [r3, #0]
    break;
200004a2:	e03d      	b.n	20000520 <RCC_GetClocksFreq+0xd0>
  case 0x08:  /* PLL P used as system clock  source */
    
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
200004a4:	4b3f      	ldr	r3, [pc, #252]	; (200005a4 <RCC_GetClocksFreq+0x154>)
200004a6:	685b      	ldr	r3, [r3, #4]
200004a8:	0d9b      	lsrs	r3, r3, #22
200004aa:	2201      	movs	r2, #1
200004ac:	4013      	ands	r3, r2
200004ae:	60fb      	str	r3, [r7, #12]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
200004b0:	4b3c      	ldr	r3, [pc, #240]	; (200005a4 <RCC_GetClocksFreq+0x154>)
200004b2:	685b      	ldr	r3, [r3, #4]
200004b4:	223f      	movs	r2, #63	; 0x3f
200004b6:	4013      	ands	r3, r2
200004b8:	60bb      	str	r3, [r7, #8]
    
    if (pllsource != 0)
200004ba:	68fb      	ldr	r3, [r7, #12]
200004bc:	2b00      	cmp	r3, #0
200004be:	d00d      	beq.n	200004dc <RCC_GetClocksFreq+0x8c>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
200004c0:	68b9      	ldr	r1, [r7, #8]
200004c2:	483a      	ldr	r0, [pc, #232]	; (200005ac <RCC_GetClocksFreq+0x15c>)
200004c4:	f003 f8e8 	bl	20003698 <__udivsi3>
200004c8:	0003      	movs	r3, r0
200004ca:	001a      	movs	r2, r3
200004cc:	4b35      	ldr	r3, [pc, #212]	; (200005a4 <RCC_GetClocksFreq+0x154>)
200004ce:	685b      	ldr	r3, [r3, #4]
200004d0:	099b      	lsrs	r3, r3, #6
200004d2:	05db      	lsls	r3, r3, #23
200004d4:	0ddb      	lsrs	r3, r3, #23
200004d6:	4353      	muls	r3, r2
200004d8:	61fb      	str	r3, [r7, #28]
200004da:	e00c      	b.n	200004f6 <RCC_GetClocksFreq+0xa6>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
200004dc:	68b9      	ldr	r1, [r7, #8]
200004de:	4832      	ldr	r0, [pc, #200]	; (200005a8 <RCC_GetClocksFreq+0x158>)
200004e0:	f003 f8da 	bl	20003698 <__udivsi3>
200004e4:	0003      	movs	r3, r0
200004e6:	001a      	movs	r2, r3
200004e8:	4b2e      	ldr	r3, [pc, #184]	; (200005a4 <RCC_GetClocksFreq+0x154>)
200004ea:	685b      	ldr	r3, [r3, #4]
200004ec:	099b      	lsrs	r3, r3, #6
200004ee:	05db      	lsls	r3, r3, #23
200004f0:	0ddb      	lsrs	r3, r3, #23
200004f2:	4353      	muls	r3, r2
200004f4:	61fb      	str	r3, [r7, #28]
    }
    
    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
200004f6:	4b2b      	ldr	r3, [pc, #172]	; (200005a4 <RCC_GetClocksFreq+0x154>)
200004f8:	685b      	ldr	r3, [r3, #4]
200004fa:	0c1b      	lsrs	r3, r3, #16
200004fc:	2203      	movs	r2, #3
200004fe:	4013      	ands	r3, r2
20000500:	3301      	adds	r3, #1
20000502:	005b      	lsls	r3, r3, #1
20000504:	613b      	str	r3, [r7, #16]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
20000506:	6939      	ldr	r1, [r7, #16]
20000508:	69f8      	ldr	r0, [r7, #28]
2000050a:	f003 f8c5 	bl	20003698 <__udivsi3>
2000050e:	0003      	movs	r3, r0
20000510:	001a      	movs	r2, r3
20000512:	687b      	ldr	r3, [r7, #4]
20000514:	601a      	str	r2, [r3, #0]
    break;
20000516:	e003      	b.n	20000520 <RCC_GetClocksFreq+0xd0>
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;    
    break;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    
  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
20000518:	687b      	ldr	r3, [r7, #4]
2000051a:	4a23      	ldr	r2, [pc, #140]	; (200005a8 <RCC_GetClocksFreq+0x158>)
2000051c:	601a      	str	r2, [r3, #0]
    break;
2000051e:	46c0      	nop			; (mov r8, r8)
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
  
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
20000520:	4b20      	ldr	r3, [pc, #128]	; (200005a4 <RCC_GetClocksFreq+0x154>)
20000522:	689b      	ldr	r3, [r3, #8]
20000524:	22f0      	movs	r2, #240	; 0xf0
20000526:	4013      	ands	r3, r2
20000528:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
2000052a:	69bb      	ldr	r3, [r7, #24]
2000052c:	091b      	lsrs	r3, r3, #4
2000052e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
20000530:	4a1f      	ldr	r2, [pc, #124]	; (200005b0 <RCC_GetClocksFreq+0x160>)
20000532:	69bb      	ldr	r3, [r7, #24]
20000534:	18d3      	adds	r3, r2, r3
20000536:	781b      	ldrb	r3, [r3, #0]
20000538:	b2db      	uxtb	r3, r3
2000053a:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
2000053c:	687b      	ldr	r3, [r7, #4]
2000053e:	681a      	ldr	r2, [r3, #0]
20000540:	697b      	ldr	r3, [r7, #20]
20000542:	40da      	lsrs	r2, r3
20000544:	687b      	ldr	r3, [r7, #4]
20000546:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
20000548:	4b16      	ldr	r3, [pc, #88]	; (200005a4 <RCC_GetClocksFreq+0x154>)
2000054a:	689a      	ldr	r2, [r3, #8]
2000054c:	23e0      	movs	r3, #224	; 0xe0
2000054e:	015b      	lsls	r3, r3, #5
20000550:	4013      	ands	r3, r2
20000552:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
20000554:	69bb      	ldr	r3, [r7, #24]
20000556:	0a9b      	lsrs	r3, r3, #10
20000558:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
2000055a:	4a15      	ldr	r2, [pc, #84]	; (200005b0 <RCC_GetClocksFreq+0x160>)
2000055c:	69bb      	ldr	r3, [r7, #24]
2000055e:	18d3      	adds	r3, r2, r3
20000560:	781b      	ldrb	r3, [r3, #0]
20000562:	b2db      	uxtb	r3, r3
20000564:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
20000566:	687b      	ldr	r3, [r7, #4]
20000568:	685a      	ldr	r2, [r3, #4]
2000056a:	697b      	ldr	r3, [r7, #20]
2000056c:	40da      	lsrs	r2, r3
2000056e:	687b      	ldr	r3, [r7, #4]
20000570:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
20000572:	4b0c      	ldr	r3, [pc, #48]	; (200005a4 <RCC_GetClocksFreq+0x154>)
20000574:	689a      	ldr	r2, [r3, #8]
20000576:	23e0      	movs	r3, #224	; 0xe0
20000578:	021b      	lsls	r3, r3, #8
2000057a:	4013      	ands	r3, r2
2000057c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
2000057e:	69bb      	ldr	r3, [r7, #24]
20000580:	0b5b      	lsrs	r3, r3, #13
20000582:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
20000584:	4a0a      	ldr	r2, [pc, #40]	; (200005b0 <RCC_GetClocksFreq+0x160>)
20000586:	69bb      	ldr	r3, [r7, #24]
20000588:	18d3      	adds	r3, r2, r3
2000058a:	781b      	ldrb	r3, [r3, #0]
2000058c:	b2db      	uxtb	r3, r3
2000058e:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
20000590:	687b      	ldr	r3, [r7, #4]
20000592:	685a      	ldr	r2, [r3, #4]
20000594:	697b      	ldr	r3, [r7, #20]
20000596:	40da      	lsrs	r2, r3
20000598:	687b      	ldr	r3, [r7, #4]
2000059a:	60da      	str	r2, [r3, #12]
}
2000059c:	46c0      	nop			; (mov r8, r8)
2000059e:	46bd      	mov	sp, r7
200005a0:	b008      	add	sp, #32
200005a2:	bd80      	pop	{r7, pc}
200005a4:	40023800 	andmi	r3, r2, r0, lsl #16
200005a8:	00f42400 	rscseq	r2, r4, r0, lsl #8
200005ac:	017d7840 	cmneq	sp, r0, asr #16
200005b0:	20003870 	andcs	r3, r0, r0, ror r8

200005b4 <RCC_RTCCLKConfig>:
  *         RTC clock source).
  *  
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
200005b4:	b580      	push	{r7, lr}
200005b6:	b084      	sub	sp, #16
200005b8:	af00      	add	r7, sp, #0
200005ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
200005bc:	2300      	movs	r3, #0
200005be:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
200005c0:	687a      	ldr	r2, [r7, #4]
200005c2:	23c0      	movs	r3, #192	; 0xc0
200005c4:	009b      	lsls	r3, r3, #2
200005c6:	401a      	ands	r2, r3
200005c8:	23c0      	movs	r3, #192	; 0xc0
200005ca:	009b      	lsls	r3, r3, #2
200005cc:	429a      	cmp	r2, r3
200005ce:	d10f      	bne.n	200005f0 <RCC_RTCCLKConfig+0x3c>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
200005d0:	4b0d      	ldr	r3, [pc, #52]	; (20000608 <RCC_RTCCLKConfig+0x54>)
200005d2:	689b      	ldr	r3, [r3, #8]
200005d4:	60fb      	str	r3, [r7, #12]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
200005d6:	68fb      	ldr	r3, [r7, #12]
200005d8:	4a0c      	ldr	r2, [pc, #48]	; (2000060c <RCC_RTCCLKConfig+0x58>)
200005da:	4013      	ands	r3, r2
200005dc:	60fb      	str	r3, [r7, #12]

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
200005de:	687b      	ldr	r3, [r7, #4]
200005e0:	4a0b      	ldr	r2, [pc, #44]	; (20000610 <RCC_RTCCLKConfig+0x5c>)
200005e2:	4013      	ands	r3, r2
200005e4:	68fa      	ldr	r2, [r7, #12]
200005e6:	4313      	orrs	r3, r2
200005e8:	60fb      	str	r3, [r7, #12]

    /* Store the new value */
    RCC->CFGR = tmpreg;
200005ea:	4b07      	ldr	r3, [pc, #28]	; (20000608 <RCC_RTCCLKConfig+0x54>)
200005ec:	68fa      	ldr	r2, [r7, #12]
200005ee:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
200005f0:	4b05      	ldr	r3, [pc, #20]	; (20000608 <RCC_RTCCLKConfig+0x54>)
200005f2:	6f19      	ldr	r1, [r3, #112]	; 0x70
200005f4:	687b      	ldr	r3, [r7, #4]
200005f6:	051b      	lsls	r3, r3, #20
200005f8:	0d1a      	lsrs	r2, r3, #20
200005fa:	4b03      	ldr	r3, [pc, #12]	; (20000608 <RCC_RTCCLKConfig+0x54>)
200005fc:	430a      	orrs	r2, r1
200005fe:	671a      	str	r2, [r3, #112]	; 0x70
}
20000600:	46c0      	nop			; (mov r8, r8)
20000602:	46bd      	mov	sp, r7
20000604:	b004      	add	sp, #16
20000606:	bd80      	pop	{r7, pc}
20000608:	40023800 	andmi	r3, r2, r0, lsl #16
2000060c:	ffe0ffff 			; <UNDEFINED> instruction: 0xffe0ffff
20000610:	0ffffcff 	svceq	0x00fffcff

20000614 <RCC_RTCCLKCmd>:
  *         using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
20000614:	b580      	push	{r7, lr}
20000616:	b082      	sub	sp, #8
20000618:	af00      	add	r7, sp, #0
2000061a:	0002      	movs	r2, r0
2000061c:	1dfb      	adds	r3, r7, #7
2000061e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
20000620:	4b03      	ldr	r3, [pc, #12]	; (20000630 <RCC_RTCCLKCmd+0x1c>)
20000622:	1dfa      	adds	r2, r7, #7
20000624:	7812      	ldrb	r2, [r2, #0]
20000626:	601a      	str	r2, [r3, #0]
}
20000628:	46c0      	nop			; (mov r8, r8)
2000062a:	46bd      	mov	sp, r7
2000062c:	b002      	add	sp, #8
2000062e:	bd80      	pop	{r7, pc}
20000630:	42470e3c 	submi	r0, r7, #60, 28	; 0x3c0

20000634 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
20000634:	b580      	push	{r7, lr}
20000636:	b082      	sub	sp, #8
20000638:	af00      	add	r7, sp, #0
2000063a:	0002      	movs	r2, r0
2000063c:	1dfb      	adds	r3, r7, #7
2000063e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
20000640:	4b03      	ldr	r3, [pc, #12]	; (20000650 <RCC_BackupResetCmd+0x1c>)
20000642:	1dfa      	adds	r2, r7, #7
20000644:	7812      	ldrb	r2, [r2, #0]
20000646:	601a      	str	r2, [r3, #0]
}
20000648:	46c0      	nop			; (mov r8, r8)
2000064a:	46bd      	mov	sp, r7
2000064c:	b002      	add	sp, #8
2000064e:	bd80      	pop	{r7, pc}
20000650:	42470e40 	submi	r0, r7, #64, 28	; 0x400

20000654 <RCC_I2SCLKConfig>:
  *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as I2S clock source
  * @retval None
  */
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
20000654:	b580      	push	{r7, lr}
20000656:	b082      	sub	sp, #8
20000658:	af00      	add	r7, sp, #0
2000065a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;  
2000065c:	4b03      	ldr	r3, [pc, #12]	; (2000066c <RCC_I2SCLKConfig+0x18>)
2000065e:	687a      	ldr	r2, [r7, #4]
20000660:	601a      	str	r2, [r3, #0]
}
20000662:	46c0      	nop			; (mov r8, r8)
20000664:	46bd      	mov	sp, r7
20000666:	b002      	add	sp, #8
20000668:	bd80      	pop	{r7, pc}
2000066a:	46c0      	nop			; (mov r8, r8)
2000066c:	4247015c 	submi	r0, r7, #92, 2

20000670 <RCC_SAIBlockACLKConfig>:
  *            @arg RCC_SAIACLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as SAI1 Block A clock
  * @retval None
  */
void RCC_SAIBlockACLKConfig(uint32_t RCC_SAIBlockACLKSource)
{
20000670:	b580      	push	{r7, lr}
20000672:	b084      	sub	sp, #16
20000674:	af00      	add	r7, sp, #0
20000676:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000678:	2300      	movs	r3, #0
2000067a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIACLK_SOURCE(RCC_SAIBlockACLKSource));
  
  tmpreg = RCC->DCKCFGR;
2000067c:	4a09      	ldr	r2, [pc, #36]	; (200006a4 <RCC_SAIBlockACLKConfig+0x34>)
2000067e:	238c      	movs	r3, #140	; 0x8c
20000680:	58d3      	ldr	r3, [r2, r3]
20000682:	60fb      	str	r3, [r7, #12]

  /* Clear RCC_DCKCFGR_SAI1ASRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1ASRC;
20000684:	68fb      	ldr	r3, [r7, #12]
20000686:	4a08      	ldr	r2, [pc, #32]	; (200006a8 <RCC_SAIBlockACLKConfig+0x38>)
20000688:	4013      	ands	r3, r2
2000068a:	60fb      	str	r3, [r7, #12]

  /* Set SAI Block A source selection value */
  tmpreg |= RCC_SAIBlockACLKSource;
2000068c:	68fa      	ldr	r2, [r7, #12]
2000068e:	687b      	ldr	r3, [r7, #4]
20000690:	4313      	orrs	r3, r2
20000692:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
20000694:	4903      	ldr	r1, [pc, #12]	; (200006a4 <RCC_SAIBlockACLKConfig+0x34>)
20000696:	228c      	movs	r2, #140	; 0x8c
20000698:	68fb      	ldr	r3, [r7, #12]
2000069a:	508b      	str	r3, [r1, r2]
}
2000069c:	46c0      	nop			; (mov r8, r8)
2000069e:	46bd      	mov	sp, r7
200006a0:	b004      	add	sp, #16
200006a2:	bd80      	pop	{r7, pc}
200006a4:	40023800 	andmi	r3, r2, r0, lsl #16
200006a8:	ffcfffff 			; <UNDEFINED> instruction: 0xffcfffff

200006ac <RCC_SAIBlockBCLKConfig>:
  *            @arg RCC_SAIBCLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as SAI1 Block B clock
  * @retval None
  */
void RCC_SAIBlockBCLKConfig(uint32_t RCC_SAIBlockBCLKSource)
{
200006ac:	b580      	push	{r7, lr}
200006ae:	b084      	sub	sp, #16
200006b0:	af00      	add	r7, sp, #0
200006b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
200006b4:	2300      	movs	r3, #0
200006b6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIBCLK_SOURCE(RCC_SAIBlockBCLKSource));
  
  tmpreg = RCC->DCKCFGR;
200006b8:	4a09      	ldr	r2, [pc, #36]	; (200006e0 <RCC_SAIBlockBCLKConfig+0x34>)
200006ba:	238c      	movs	r3, #140	; 0x8c
200006bc:	58d3      	ldr	r3, [r2, r3]
200006be:	60fb      	str	r3, [r7, #12]

  /* Clear RCC_DCKCFGR_SAI1BSRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1BSRC;
200006c0:	68fb      	ldr	r3, [r7, #12]
200006c2:	4a08      	ldr	r2, [pc, #32]	; (200006e4 <RCC_SAIBlockBCLKConfig+0x38>)
200006c4:	4013      	ands	r3, r2
200006c6:	60fb      	str	r3, [r7, #12]

  /* Set SAI Block B source selection value */
  tmpreg |= RCC_SAIBlockBCLKSource;
200006c8:	68fa      	ldr	r2, [r7, #12]
200006ca:	687b      	ldr	r3, [r7, #4]
200006cc:	4313      	orrs	r3, r2
200006ce:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
200006d0:	4903      	ldr	r1, [pc, #12]	; (200006e0 <RCC_SAIBlockBCLKConfig+0x34>)
200006d2:	228c      	movs	r2, #140	; 0x8c
200006d4:	68fb      	ldr	r3, [r7, #12]
200006d6:	508b      	str	r3, [r1, r2]
}
200006d8:	46c0      	nop			; (mov r8, r8)
200006da:	46bd      	mov	sp, r7
200006dc:	b004      	add	sp, #16
200006de:	bd80      	pop	{r7, pc}
200006e0:	40023800 	andmi	r3, r2, r0, lsl #16
200006e4:	ff3fffff 			; <UNDEFINED> instruction: 0xff3fffff

200006e8 <RCC_SAIPLLI2SClkDivConfig>:
  *          SAI1 clock frequency = f(PLLI2S_Q) / RCC_PLLI2SDivQ 
  *              
  * @retval None
  */
void RCC_SAIPLLI2SClkDivConfig(uint32_t RCC_PLLI2SDivQ)  
{
200006e8:	b580      	push	{r7, lr}
200006ea:	b084      	sub	sp, #16
200006ec:	af00      	add	r7, sp, #0
200006ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
200006f0:	2300      	movs	r3, #0
200006f2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(RCC_PLLI2SDivQ));
  
  tmpreg = RCC->DCKCFGR;
200006f4:	4a0a      	ldr	r2, [pc, #40]	; (20000720 <RCC_SAIPLLI2SClkDivConfig+0x38>)
200006f6:	238c      	movs	r3, #140	; 0x8c
200006f8:	58d3      	ldr	r3, [r2, r3]
200006fa:	60fb      	str	r3, [r7, #12]

  /* Clear PLLI2SDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLI2SDIVQ);
200006fc:	68fb      	ldr	r3, [r7, #12]
200006fe:	221f      	movs	r2, #31
20000700:	4393      	bics	r3, r2
20000702:	60fb      	str	r3, [r7, #12]

  /* Set PLLI2SDIVQ values */
  tmpreg |= (RCC_PLLI2SDivQ - 1);
20000704:	687b      	ldr	r3, [r7, #4]
20000706:	3b01      	subs	r3, #1
20000708:	68fa      	ldr	r2, [r7, #12]
2000070a:	4313      	orrs	r3, r2
2000070c:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
2000070e:	4904      	ldr	r1, [pc, #16]	; (20000720 <RCC_SAIPLLI2SClkDivConfig+0x38>)
20000710:	228c      	movs	r2, #140	; 0x8c
20000712:	68fb      	ldr	r3, [r7, #12]
20000714:	508b      	str	r3, [r1, r2]
}
20000716:	46c0      	nop			; (mov r8, r8)
20000718:	46bd      	mov	sp, r7
2000071a:	b004      	add	sp, #16
2000071c:	bd80      	pop	{r7, pc}
2000071e:	46c0      	nop			; (mov r8, r8)
20000720:	40023800 	andmi	r3, r2, r0, lsl #16

20000724 <RCC_SAIPLLSAIClkDivConfig>:
  *          SAI1 clock frequency = f(PLLSAI_Q) / RCC_PLLSAIDivQ  
  *              
  * @retval None
  */
void RCC_SAIPLLSAIClkDivConfig(uint32_t RCC_PLLSAIDivQ)  
{
20000724:	b580      	push	{r7, lr}
20000726:	b084      	sub	sp, #16
20000728:	af00      	add	r7, sp, #0
2000072a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
2000072c:	2300      	movs	r3, #0
2000072e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(RCC_PLLSAIDivQ));
  
  tmpreg = RCC->DCKCFGR;
20000730:	4a0a      	ldr	r2, [pc, #40]	; (2000075c <RCC_SAIPLLSAIClkDivConfig+0x38>)
20000732:	238c      	movs	r3, #140	; 0x8c
20000734:	58d3      	ldr	r3, [r2, r3]
20000736:	60fb      	str	r3, [r7, #12]

  /* Clear PLLI2SDIVQ[4:0] and PLLSAIDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLSAIDIVQ);
20000738:	68fb      	ldr	r3, [r7, #12]
2000073a:	4a09      	ldr	r2, [pc, #36]	; (20000760 <RCC_SAIPLLSAIClkDivConfig+0x3c>)
2000073c:	4013      	ands	r3, r2
2000073e:	60fb      	str	r3, [r7, #12]

  /* Set PLLSAIDIVQ values */
  tmpreg |= ((RCC_PLLSAIDivQ - 1) << 8);
20000740:	687b      	ldr	r3, [r7, #4]
20000742:	3b01      	subs	r3, #1
20000744:	021b      	lsls	r3, r3, #8
20000746:	68fa      	ldr	r2, [r7, #12]
20000748:	4313      	orrs	r3, r2
2000074a:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
2000074c:	4903      	ldr	r1, [pc, #12]	; (2000075c <RCC_SAIPLLSAIClkDivConfig+0x38>)
2000074e:	228c      	movs	r2, #140	; 0x8c
20000750:	68fb      	ldr	r3, [r7, #12]
20000752:	508b      	str	r3, [r1, r2]
}
20000754:	46c0      	nop			; (mov r8, r8)
20000756:	46bd      	mov	sp, r7
20000758:	b004      	add	sp, #16
2000075a:	bd80      	pop	{r7, pc}
2000075c:	40023800 	andmi	r3, r2, r0, lsl #16
20000760:	ffffe0ff 			; <UNDEFINED> instruction: 0xffffe0ff

20000764 <RCC_LTDCCLKDivConfig>:
  *            @arg RCC_PLLSAIDivR_Div16: LTDC clock = f(PLLSAI_R)/16
  *            
  * @retval None
  */
void RCC_LTDCCLKDivConfig(uint32_t RCC_PLLSAIDivR)
{
20000764:	b580      	push	{r7, lr}
20000766:	b084      	sub	sp, #16
20000768:	af00      	add	r7, sp, #0
2000076a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
2000076c:	2300      	movs	r3, #0
2000076e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVR_VALUE(RCC_PLLSAIDivR));
  
  tmpreg = RCC->DCKCFGR;
20000770:	4a09      	ldr	r2, [pc, #36]	; (20000798 <RCC_LTDCCLKDivConfig+0x34>)
20000772:	238c      	movs	r3, #140	; 0x8c
20000774:	58d3      	ldr	r3, [r2, r3]
20000776:	60fb      	str	r3, [r7, #12]

  /* Clear PLLSAIDIVR[2:0] bits */
  tmpreg &= ~RCC_DCKCFGR_PLLSAIDIVR;
20000778:	68fb      	ldr	r3, [r7, #12]
2000077a:	4a08      	ldr	r2, [pc, #32]	; (2000079c <RCC_LTDCCLKDivConfig+0x38>)
2000077c:	4013      	ands	r3, r2
2000077e:	60fb      	str	r3, [r7, #12]

  /* Set PLLSAIDIVR values */
  tmpreg |= RCC_PLLSAIDivR;
20000780:	68fa      	ldr	r2, [r7, #12]
20000782:	687b      	ldr	r3, [r7, #4]
20000784:	4313      	orrs	r3, r2
20000786:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
20000788:	4903      	ldr	r1, [pc, #12]	; (20000798 <RCC_LTDCCLKDivConfig+0x34>)
2000078a:	228c      	movs	r2, #140	; 0x8c
2000078c:	68fb      	ldr	r3, [r7, #12]
2000078e:	508b      	str	r3, [r1, r2]
}
20000790:	46c0      	nop			; (mov r8, r8)
20000792:	46bd      	mov	sp, r7
20000794:	b004      	add	sp, #16
20000796:	bd80      	pop	{r7, pc}
20000798:	40023800 	andmi	r3, r2, r0, lsl #16
2000079c:	fffcffff 			; <UNDEFINED> instruction: 0xfffcffff

200007a0 <RCC_TIMCLKPresConfig>:
  *                 else it is equal to [(HPRE * PPREx) / 4] if PPREx is corresponding 
  *                 to division by 8 or more.
  * @retval None
  */
void RCC_TIMCLKPresConfig(uint32_t RCC_TIMCLKPrescaler)
{
200007a0:	b580      	push	{r7, lr}
200007a2:	b082      	sub	sp, #8
200007a4:	af00      	add	r7, sp, #0
200007a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_TIMCLK_PRESCALER(RCC_TIMCLKPrescaler));

  *(__IO uint32_t *) DCKCFGR_TIMPRE_BB = RCC_TIMCLKPrescaler;
200007a8:	4b03      	ldr	r3, [pc, #12]	; (200007b8 <RCC_TIMCLKPresConfig+0x18>)
200007aa:	687a      	ldr	r2, [r7, #4]
200007ac:	601a      	str	r2, [r3, #0]
}
200007ae:	46c0      	nop			; (mov r8, r8)
200007b0:	46bd      	mov	sp, r7
200007b2:	b002      	add	sp, #8
200007b4:	bd80      	pop	{r7, pc}
200007b6:	46c0      	nop			; (mov r8, r8)
200007b8:	424711e0 	submi	r1, r7, #224, 2	; 0x38

200007bc <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
200007bc:	b580      	push	{r7, lr}
200007be:	b082      	sub	sp, #8
200007c0:	af00      	add	r7, sp, #0
200007c2:	6078      	str	r0, [r7, #4]
200007c4:	000a      	movs	r2, r1
200007c6:	1cfb      	adds	r3, r7, #3
200007c8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
200007ca:	1cfb      	adds	r3, r7, #3
200007cc:	781b      	ldrb	r3, [r3, #0]
200007ce:	2b00      	cmp	r3, #0
200007d0:	d006      	beq.n	200007e0 <RCC_AHB1PeriphClockCmd+0x24>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
200007d2:	4b09      	ldr	r3, [pc, #36]	; (200007f8 <RCC_AHB1PeriphClockCmd+0x3c>)
200007d4:	6b19      	ldr	r1, [r3, #48]	; 0x30
200007d6:	4b08      	ldr	r3, [pc, #32]	; (200007f8 <RCC_AHB1PeriphClockCmd+0x3c>)
200007d8:	687a      	ldr	r2, [r7, #4]
200007da:	430a      	orrs	r2, r1
200007dc:	631a      	str	r2, [r3, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
200007de:	e006      	b.n	200007ee <RCC_AHB1PeriphClockCmd+0x32>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
200007e0:	4b05      	ldr	r3, [pc, #20]	; (200007f8 <RCC_AHB1PeriphClockCmd+0x3c>)
200007e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
200007e4:	687b      	ldr	r3, [r7, #4]
200007e6:	43d9      	mvns	r1, r3
200007e8:	4b03      	ldr	r3, [pc, #12]	; (200007f8 <RCC_AHB1PeriphClockCmd+0x3c>)
200007ea:	400a      	ands	r2, r1
200007ec:	631a      	str	r2, [r3, #48]	; 0x30
}
200007ee:	46c0      	nop			; (mov r8, r8)
200007f0:	46bd      	mov	sp, r7
200007f2:	b002      	add	sp, #8
200007f4:	bd80      	pop	{r7, pc}
200007f6:	46c0      	nop			; (mov r8, r8)
200007f8:	40023800 	andmi	r3, r2, r0, lsl #16

200007fc <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
200007fc:	b580      	push	{r7, lr}
200007fe:	b082      	sub	sp, #8
20000800:	af00      	add	r7, sp, #0
20000802:	6078      	str	r0, [r7, #4]
20000804:	000a      	movs	r2, r1
20000806:	1cfb      	adds	r3, r7, #3
20000808:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
2000080a:	1cfb      	adds	r3, r7, #3
2000080c:	781b      	ldrb	r3, [r3, #0]
2000080e:	2b00      	cmp	r3, #0
20000810:	d006      	beq.n	20000820 <RCC_AHB2PeriphClockCmd+0x24>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
20000812:	4b09      	ldr	r3, [pc, #36]	; (20000838 <RCC_AHB2PeriphClockCmd+0x3c>)
20000814:	6b59      	ldr	r1, [r3, #52]	; 0x34
20000816:	4b08      	ldr	r3, [pc, #32]	; (20000838 <RCC_AHB2PeriphClockCmd+0x3c>)
20000818:	687a      	ldr	r2, [r7, #4]
2000081a:	430a      	orrs	r2, r1
2000081c:	635a      	str	r2, [r3, #52]	; 0x34
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
  }
}
2000081e:	e006      	b.n	2000082e <RCC_AHB2PeriphClockCmd+0x32>
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
20000820:	4b05      	ldr	r3, [pc, #20]	; (20000838 <RCC_AHB2PeriphClockCmd+0x3c>)
20000822:	6b5a      	ldr	r2, [r3, #52]	; 0x34
20000824:	687b      	ldr	r3, [r7, #4]
20000826:	43d9      	mvns	r1, r3
20000828:	4b03      	ldr	r3, [pc, #12]	; (20000838 <RCC_AHB2PeriphClockCmd+0x3c>)
2000082a:	400a      	ands	r2, r1
2000082c:	635a      	str	r2, [r3, #52]	; 0x34
}
2000082e:	46c0      	nop			; (mov r8, r8)
20000830:	46bd      	mov	sp, r7
20000832:	b002      	add	sp, #8
20000834:	bd80      	pop	{r7, pc}
20000836:	46c0      	nop			; (mov r8, r8)
20000838:	40023800 	andmi	r3, r2, r0, lsl #16

2000083c <RCC_AHB3PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
2000083c:	b580      	push	{r7, lr}
2000083e:	b082      	sub	sp, #8
20000840:	af00      	add	r7, sp, #0
20000842:	6078      	str	r0, [r7, #4]
20000844:	000a      	movs	r2, r1
20000846:	1cfb      	adds	r3, r7, #3
20000848:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
2000084a:	1cfb      	adds	r3, r7, #3
2000084c:	781b      	ldrb	r3, [r3, #0]
2000084e:	2b00      	cmp	r3, #0
20000850:	d006      	beq.n	20000860 <RCC_AHB3PeriphClockCmd+0x24>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
20000852:	4b09      	ldr	r3, [pc, #36]	; (20000878 <RCC_AHB3PeriphClockCmd+0x3c>)
20000854:	6b99      	ldr	r1, [r3, #56]	; 0x38
20000856:	4b08      	ldr	r3, [pc, #32]	; (20000878 <RCC_AHB3PeriphClockCmd+0x3c>)
20000858:	687a      	ldr	r2, [r7, #4]
2000085a:	430a      	orrs	r2, r1
2000085c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
  }
}
2000085e:	e006      	b.n	2000086e <RCC_AHB3PeriphClockCmd+0x32>
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
20000860:	4b05      	ldr	r3, [pc, #20]	; (20000878 <RCC_AHB3PeriphClockCmd+0x3c>)
20000862:	6b9a      	ldr	r2, [r3, #56]	; 0x38
20000864:	687b      	ldr	r3, [r7, #4]
20000866:	43d9      	mvns	r1, r3
20000868:	4b03      	ldr	r3, [pc, #12]	; (20000878 <RCC_AHB3PeriphClockCmd+0x3c>)
2000086a:	400a      	ands	r2, r1
2000086c:	639a      	str	r2, [r3, #56]	; 0x38
}
2000086e:	46c0      	nop			; (mov r8, r8)
20000870:	46bd      	mov	sp, r7
20000872:	b002      	add	sp, #8
20000874:	bd80      	pop	{r7, pc}
20000876:	46c0      	nop			; (mov r8, r8)
20000878:	40023800 	andmi	r3, r2, r0, lsl #16

2000087c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
2000087c:	b580      	push	{r7, lr}
2000087e:	b082      	sub	sp, #8
20000880:	af00      	add	r7, sp, #0
20000882:	6078      	str	r0, [r7, #4]
20000884:	000a      	movs	r2, r1
20000886:	1cfb      	adds	r3, r7, #3
20000888:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
2000088a:	1cfb      	adds	r3, r7, #3
2000088c:	781b      	ldrb	r3, [r3, #0]
2000088e:	2b00      	cmp	r3, #0
20000890:	d006      	beq.n	200008a0 <RCC_APB1PeriphClockCmd+0x24>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
20000892:	4b09      	ldr	r3, [pc, #36]	; (200008b8 <RCC_APB1PeriphClockCmd+0x3c>)
20000894:	6c19      	ldr	r1, [r3, #64]	; 0x40
20000896:	4b08      	ldr	r3, [pc, #32]	; (200008b8 <RCC_APB1PeriphClockCmd+0x3c>)
20000898:	687a      	ldr	r2, [r7, #4]
2000089a:	430a      	orrs	r2, r1
2000089c:	641a      	str	r2, [r3, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
2000089e:	e006      	b.n	200008ae <RCC_APB1PeriphClockCmd+0x32>
    RCC->APB1ENR &= ~RCC_APB1Periph;
200008a0:	4b05      	ldr	r3, [pc, #20]	; (200008b8 <RCC_APB1PeriphClockCmd+0x3c>)
200008a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
200008a4:	687b      	ldr	r3, [r7, #4]
200008a6:	43d9      	mvns	r1, r3
200008a8:	4b03      	ldr	r3, [pc, #12]	; (200008b8 <RCC_APB1PeriphClockCmd+0x3c>)
200008aa:	400a      	ands	r2, r1
200008ac:	641a      	str	r2, [r3, #64]	; 0x40
}
200008ae:	46c0      	nop			; (mov r8, r8)
200008b0:	46bd      	mov	sp, r7
200008b2:	b002      	add	sp, #8
200008b4:	bd80      	pop	{r7, pc}
200008b6:	46c0      	nop			; (mov r8, r8)
200008b8:	40023800 	andmi	r3, r2, r0, lsl #16

200008bc <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
200008bc:	b580      	push	{r7, lr}
200008be:	b082      	sub	sp, #8
200008c0:	af00      	add	r7, sp, #0
200008c2:	6078      	str	r0, [r7, #4]
200008c4:	000a      	movs	r2, r1
200008c6:	1cfb      	adds	r3, r7, #3
200008c8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
200008ca:	1cfb      	adds	r3, r7, #3
200008cc:	781b      	ldrb	r3, [r3, #0]
200008ce:	2b00      	cmp	r3, #0
200008d0:	d006      	beq.n	200008e0 <RCC_APB2PeriphClockCmd+0x24>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
200008d2:	4b09      	ldr	r3, [pc, #36]	; (200008f8 <RCC_APB2PeriphClockCmd+0x3c>)
200008d4:	6c59      	ldr	r1, [r3, #68]	; 0x44
200008d6:	4b08      	ldr	r3, [pc, #32]	; (200008f8 <RCC_APB2PeriphClockCmd+0x3c>)
200008d8:	687a      	ldr	r2, [r7, #4]
200008da:	430a      	orrs	r2, r1
200008dc:	645a      	str	r2, [r3, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
200008de:	e006      	b.n	200008ee <RCC_APB2PeriphClockCmd+0x32>
    RCC->APB2ENR &= ~RCC_APB2Periph;
200008e0:	4b05      	ldr	r3, [pc, #20]	; (200008f8 <RCC_APB2PeriphClockCmd+0x3c>)
200008e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
200008e4:	687b      	ldr	r3, [r7, #4]
200008e6:	43d9      	mvns	r1, r3
200008e8:	4b03      	ldr	r3, [pc, #12]	; (200008f8 <RCC_APB2PeriphClockCmd+0x3c>)
200008ea:	400a      	ands	r2, r1
200008ec:	645a      	str	r2, [r3, #68]	; 0x44
}
200008ee:	46c0      	nop			; (mov r8, r8)
200008f0:	46bd      	mov	sp, r7
200008f2:	b002      	add	sp, #8
200008f4:	bd80      	pop	{r7, pc}
200008f6:	46c0      	nop			; (mov r8, r8)
200008f8:	40023800 	andmi	r3, r2, r0, lsl #16

200008fc <RCC_AHB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
200008fc:	b580      	push	{r7, lr}
200008fe:	b082      	sub	sp, #8
20000900:	af00      	add	r7, sp, #0
20000902:	6078      	str	r0, [r7, #4]
20000904:	000a      	movs	r2, r1
20000906:	1cfb      	adds	r3, r7, #3
20000908:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
2000090a:	1cfb      	adds	r3, r7, #3
2000090c:	781b      	ldrb	r3, [r3, #0]
2000090e:	2b00      	cmp	r3, #0
20000910:	d006      	beq.n	20000920 <RCC_AHB1PeriphResetCmd+0x24>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
20000912:	4b09      	ldr	r3, [pc, #36]	; (20000938 <RCC_AHB1PeriphResetCmd+0x3c>)
20000914:	6919      	ldr	r1, [r3, #16]
20000916:	4b08      	ldr	r3, [pc, #32]	; (20000938 <RCC_AHB1PeriphResetCmd+0x3c>)
20000918:	687a      	ldr	r2, [r7, #4]
2000091a:	430a      	orrs	r2, r1
2000091c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
  }
}
2000091e:	e006      	b.n	2000092e <RCC_AHB1PeriphResetCmd+0x32>
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
20000920:	4b05      	ldr	r3, [pc, #20]	; (20000938 <RCC_AHB1PeriphResetCmd+0x3c>)
20000922:	691a      	ldr	r2, [r3, #16]
20000924:	687b      	ldr	r3, [r7, #4]
20000926:	43d9      	mvns	r1, r3
20000928:	4b03      	ldr	r3, [pc, #12]	; (20000938 <RCC_AHB1PeriphResetCmd+0x3c>)
2000092a:	400a      	ands	r2, r1
2000092c:	611a      	str	r2, [r3, #16]
}
2000092e:	46c0      	nop			; (mov r8, r8)
20000930:	46bd      	mov	sp, r7
20000932:	b002      	add	sp, #8
20000934:	bd80      	pop	{r7, pc}
20000936:	46c0      	nop			; (mov r8, r8)
20000938:	40023800 	andmi	r3, r2, r0, lsl #16

2000093c <RCC_AHB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
2000093c:	b580      	push	{r7, lr}
2000093e:	b082      	sub	sp, #8
20000940:	af00      	add	r7, sp, #0
20000942:	6078      	str	r0, [r7, #4]
20000944:	000a      	movs	r2, r1
20000946:	1cfb      	adds	r3, r7, #3
20000948:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
2000094a:	1cfb      	adds	r3, r7, #3
2000094c:	781b      	ldrb	r3, [r3, #0]
2000094e:	2b00      	cmp	r3, #0
20000950:	d006      	beq.n	20000960 <RCC_AHB2PeriphResetCmd+0x24>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
20000952:	4b09      	ldr	r3, [pc, #36]	; (20000978 <RCC_AHB2PeriphResetCmd+0x3c>)
20000954:	6959      	ldr	r1, [r3, #20]
20000956:	4b08      	ldr	r3, [pc, #32]	; (20000978 <RCC_AHB2PeriphResetCmd+0x3c>)
20000958:	687a      	ldr	r2, [r7, #4]
2000095a:	430a      	orrs	r2, r1
2000095c:	615a      	str	r2, [r3, #20]
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
  }
}
2000095e:	e006      	b.n	2000096e <RCC_AHB2PeriphResetCmd+0x32>
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
20000960:	4b05      	ldr	r3, [pc, #20]	; (20000978 <RCC_AHB2PeriphResetCmd+0x3c>)
20000962:	695a      	ldr	r2, [r3, #20]
20000964:	687b      	ldr	r3, [r7, #4]
20000966:	43d9      	mvns	r1, r3
20000968:	4b03      	ldr	r3, [pc, #12]	; (20000978 <RCC_AHB2PeriphResetCmd+0x3c>)
2000096a:	400a      	ands	r2, r1
2000096c:	615a      	str	r2, [r3, #20]
}
2000096e:	46c0      	nop			; (mov r8, r8)
20000970:	46bd      	mov	sp, r7
20000972:	b002      	add	sp, #8
20000974:	bd80      	pop	{r7, pc}
20000976:	46c0      	nop			; (mov r8, r8)
20000978:	40023800 	andmi	r3, r2, r0, lsl #16

2000097c <RCC_AHB3PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
2000097c:	b580      	push	{r7, lr}
2000097e:	b082      	sub	sp, #8
20000980:	af00      	add	r7, sp, #0
20000982:	6078      	str	r0, [r7, #4]
20000984:	000a      	movs	r2, r1
20000986:	1cfb      	adds	r3, r7, #3
20000988:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
2000098a:	1cfb      	adds	r3, r7, #3
2000098c:	781b      	ldrb	r3, [r3, #0]
2000098e:	2b00      	cmp	r3, #0
20000990:	d006      	beq.n	200009a0 <RCC_AHB3PeriphResetCmd+0x24>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
20000992:	4b09      	ldr	r3, [pc, #36]	; (200009b8 <RCC_AHB3PeriphResetCmd+0x3c>)
20000994:	6999      	ldr	r1, [r3, #24]
20000996:	4b08      	ldr	r3, [pc, #32]	; (200009b8 <RCC_AHB3PeriphResetCmd+0x3c>)
20000998:	687a      	ldr	r2, [r7, #4]
2000099a:	430a      	orrs	r2, r1
2000099c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
  }
}
2000099e:	e006      	b.n	200009ae <RCC_AHB3PeriphResetCmd+0x32>
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
200009a0:	4b05      	ldr	r3, [pc, #20]	; (200009b8 <RCC_AHB3PeriphResetCmd+0x3c>)
200009a2:	699a      	ldr	r2, [r3, #24]
200009a4:	687b      	ldr	r3, [r7, #4]
200009a6:	43d9      	mvns	r1, r3
200009a8:	4b03      	ldr	r3, [pc, #12]	; (200009b8 <RCC_AHB3PeriphResetCmd+0x3c>)
200009aa:	400a      	ands	r2, r1
200009ac:	619a      	str	r2, [r3, #24]
}
200009ae:	46c0      	nop			; (mov r8, r8)
200009b0:	46bd      	mov	sp, r7
200009b2:	b002      	add	sp, #8
200009b4:	bd80      	pop	{r7, pc}
200009b6:	46c0      	nop			; (mov r8, r8)
200009b8:	40023800 	andmi	r3, r2, r0, lsl #16

200009bc <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
200009bc:	b580      	push	{r7, lr}
200009be:	b082      	sub	sp, #8
200009c0:	af00      	add	r7, sp, #0
200009c2:	6078      	str	r0, [r7, #4]
200009c4:	000a      	movs	r2, r1
200009c6:	1cfb      	adds	r3, r7, #3
200009c8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
200009ca:	1cfb      	adds	r3, r7, #3
200009cc:	781b      	ldrb	r3, [r3, #0]
200009ce:	2b00      	cmp	r3, #0
200009d0:	d006      	beq.n	200009e0 <RCC_APB1PeriphResetCmd+0x24>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
200009d2:	4b09      	ldr	r3, [pc, #36]	; (200009f8 <RCC_APB1PeriphResetCmd+0x3c>)
200009d4:	6a19      	ldr	r1, [r3, #32]
200009d6:	4b08      	ldr	r3, [pc, #32]	; (200009f8 <RCC_APB1PeriphResetCmd+0x3c>)
200009d8:	687a      	ldr	r2, [r7, #4]
200009da:	430a      	orrs	r2, r1
200009dc:	621a      	str	r2, [r3, #32]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
200009de:	e006      	b.n	200009ee <RCC_APB1PeriphResetCmd+0x32>
    RCC->APB1RSTR &= ~RCC_APB1Periph;
200009e0:	4b05      	ldr	r3, [pc, #20]	; (200009f8 <RCC_APB1PeriphResetCmd+0x3c>)
200009e2:	6a1a      	ldr	r2, [r3, #32]
200009e4:	687b      	ldr	r3, [r7, #4]
200009e6:	43d9      	mvns	r1, r3
200009e8:	4b03      	ldr	r3, [pc, #12]	; (200009f8 <RCC_APB1PeriphResetCmd+0x3c>)
200009ea:	400a      	ands	r2, r1
200009ec:	621a      	str	r2, [r3, #32]
}
200009ee:	46c0      	nop			; (mov r8, r8)
200009f0:	46bd      	mov	sp, r7
200009f2:	b002      	add	sp, #8
200009f4:	bd80      	pop	{r7, pc}
200009f6:	46c0      	nop			; (mov r8, r8)
200009f8:	40023800 	andmi	r3, r2, r0, lsl #16

200009fc <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
200009fc:	b580      	push	{r7, lr}
200009fe:	b082      	sub	sp, #8
20000a00:	af00      	add	r7, sp, #0
20000a02:	6078      	str	r0, [r7, #4]
20000a04:	000a      	movs	r2, r1
20000a06:	1cfb      	adds	r3, r7, #3
20000a08:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000a0a:	1cfb      	adds	r3, r7, #3
20000a0c:	781b      	ldrb	r3, [r3, #0]
20000a0e:	2b00      	cmp	r3, #0
20000a10:	d006      	beq.n	20000a20 <RCC_APB2PeriphResetCmd+0x24>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
20000a12:	4b09      	ldr	r3, [pc, #36]	; (20000a38 <RCC_APB2PeriphResetCmd+0x3c>)
20000a14:	6a59      	ldr	r1, [r3, #36]	; 0x24
20000a16:	4b08      	ldr	r3, [pc, #32]	; (20000a38 <RCC_APB2PeriphResetCmd+0x3c>)
20000a18:	687a      	ldr	r2, [r7, #4]
20000a1a:	430a      	orrs	r2, r1
20000a1c:	625a      	str	r2, [r3, #36]	; 0x24
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
20000a1e:	e006      	b.n	20000a2e <RCC_APB2PeriphResetCmd+0x32>
    RCC->APB2RSTR &= ~RCC_APB2Periph;
20000a20:	4b05      	ldr	r3, [pc, #20]	; (20000a38 <RCC_APB2PeriphResetCmd+0x3c>)
20000a22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
20000a24:	687b      	ldr	r3, [r7, #4]
20000a26:	43d9      	mvns	r1, r3
20000a28:	4b03      	ldr	r3, [pc, #12]	; (20000a38 <RCC_APB2PeriphResetCmd+0x3c>)
20000a2a:	400a      	ands	r2, r1
20000a2c:	625a      	str	r2, [r3, #36]	; 0x24
}
20000a2e:	46c0      	nop			; (mov r8, r8)
20000a30:	46bd      	mov	sp, r7
20000a32:	b002      	add	sp, #8
20000a34:	bd80      	pop	{r7, pc}
20000a36:	46c0      	nop			; (mov r8, r8)
20000a38:	40023800 	andmi	r3, r2, r0, lsl #16

20000a3c <RCC_AHB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
20000a3c:	b580      	push	{r7, lr}
20000a3e:	b082      	sub	sp, #8
20000a40:	af00      	add	r7, sp, #0
20000a42:	6078      	str	r0, [r7, #4]
20000a44:	000a      	movs	r2, r1
20000a46:	1cfb      	adds	r3, r7, #3
20000a48:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000a4a:	1cfb      	adds	r3, r7, #3
20000a4c:	781b      	ldrb	r3, [r3, #0]
20000a4e:	2b00      	cmp	r3, #0
20000a50:	d006      	beq.n	20000a60 <RCC_AHB1PeriphClockLPModeCmd+0x24>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
20000a52:	4b09      	ldr	r3, [pc, #36]	; (20000a78 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
20000a54:	6d19      	ldr	r1, [r3, #80]	; 0x50
20000a56:	4b08      	ldr	r3, [pc, #32]	; (20000a78 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
20000a58:	687a      	ldr	r2, [r7, #4]
20000a5a:	430a      	orrs	r2, r1
20000a5c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
  }
}
20000a5e:	e006      	b.n	20000a6e <RCC_AHB1PeriphClockLPModeCmd+0x32>
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
20000a60:	4b05      	ldr	r3, [pc, #20]	; (20000a78 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
20000a62:	6d1a      	ldr	r2, [r3, #80]	; 0x50
20000a64:	687b      	ldr	r3, [r7, #4]
20000a66:	43d9      	mvns	r1, r3
20000a68:	4b03      	ldr	r3, [pc, #12]	; (20000a78 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
20000a6a:	400a      	ands	r2, r1
20000a6c:	651a      	str	r2, [r3, #80]	; 0x50
}
20000a6e:	46c0      	nop			; (mov r8, r8)
20000a70:	46bd      	mov	sp, r7
20000a72:	b002      	add	sp, #8
20000a74:	bd80      	pop	{r7, pc}
20000a76:	46c0      	nop			; (mov r8, r8)
20000a78:	40023800 	andmi	r3, r2, r0, lsl #16

20000a7c <RCC_AHB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
20000a7c:	b580      	push	{r7, lr}
20000a7e:	b082      	sub	sp, #8
20000a80:	af00      	add	r7, sp, #0
20000a82:	6078      	str	r0, [r7, #4]
20000a84:	000a      	movs	r2, r1
20000a86:	1cfb      	adds	r3, r7, #3
20000a88:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000a8a:	1cfb      	adds	r3, r7, #3
20000a8c:	781b      	ldrb	r3, [r3, #0]
20000a8e:	2b00      	cmp	r3, #0
20000a90:	d006      	beq.n	20000aa0 <RCC_AHB2PeriphClockLPModeCmd+0x24>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
20000a92:	4b09      	ldr	r3, [pc, #36]	; (20000ab8 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
20000a94:	6d59      	ldr	r1, [r3, #84]	; 0x54
20000a96:	4b08      	ldr	r3, [pc, #32]	; (20000ab8 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
20000a98:	687a      	ldr	r2, [r7, #4]
20000a9a:	430a      	orrs	r2, r1
20000a9c:	655a      	str	r2, [r3, #84]	; 0x54
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
  }
}
20000a9e:	e006      	b.n	20000aae <RCC_AHB2PeriphClockLPModeCmd+0x32>
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
20000aa0:	4b05      	ldr	r3, [pc, #20]	; (20000ab8 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
20000aa2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
20000aa4:	687b      	ldr	r3, [r7, #4]
20000aa6:	43d9      	mvns	r1, r3
20000aa8:	4b03      	ldr	r3, [pc, #12]	; (20000ab8 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
20000aaa:	400a      	ands	r2, r1
20000aac:	655a      	str	r2, [r3, #84]	; 0x54
}
20000aae:	46c0      	nop			; (mov r8, r8)
20000ab0:	46bd      	mov	sp, r7
20000ab2:	b002      	add	sp, #8
20000ab4:	bd80      	pop	{r7, pc}
20000ab6:	46c0      	nop			; (mov r8, r8)
20000ab8:	40023800 	andmi	r3, r2, r0, lsl #16

20000abc <RCC_AHB3PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
20000abc:	b580      	push	{r7, lr}
20000abe:	b082      	sub	sp, #8
20000ac0:	af00      	add	r7, sp, #0
20000ac2:	6078      	str	r0, [r7, #4]
20000ac4:	000a      	movs	r2, r1
20000ac6:	1cfb      	adds	r3, r7, #3
20000ac8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000aca:	1cfb      	adds	r3, r7, #3
20000acc:	781b      	ldrb	r3, [r3, #0]
20000ace:	2b00      	cmp	r3, #0
20000ad0:	d006      	beq.n	20000ae0 <RCC_AHB3PeriphClockLPModeCmd+0x24>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
20000ad2:	4b09      	ldr	r3, [pc, #36]	; (20000af8 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
20000ad4:	6d99      	ldr	r1, [r3, #88]	; 0x58
20000ad6:	4b08      	ldr	r3, [pc, #32]	; (20000af8 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
20000ad8:	687a      	ldr	r2, [r7, #4]
20000ada:	430a      	orrs	r2, r1
20000adc:	659a      	str	r2, [r3, #88]	; 0x58
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
  }
}
20000ade:	e006      	b.n	20000aee <RCC_AHB3PeriphClockLPModeCmd+0x32>
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
20000ae0:	4b05      	ldr	r3, [pc, #20]	; (20000af8 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
20000ae2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
20000ae4:	687b      	ldr	r3, [r7, #4]
20000ae6:	43d9      	mvns	r1, r3
20000ae8:	4b03      	ldr	r3, [pc, #12]	; (20000af8 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
20000aea:	400a      	ands	r2, r1
20000aec:	659a      	str	r2, [r3, #88]	; 0x58
}
20000aee:	46c0      	nop			; (mov r8, r8)
20000af0:	46bd      	mov	sp, r7
20000af2:	b002      	add	sp, #8
20000af4:	bd80      	pop	{r7, pc}
20000af6:	46c0      	nop			; (mov r8, r8)
20000af8:	40023800 	andmi	r3, r2, r0, lsl #16

20000afc <RCC_APB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
20000afc:	b580      	push	{r7, lr}
20000afe:	b082      	sub	sp, #8
20000b00:	af00      	add	r7, sp, #0
20000b02:	6078      	str	r0, [r7, #4]
20000b04:	000a      	movs	r2, r1
20000b06:	1cfb      	adds	r3, r7, #3
20000b08:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000b0a:	1cfb      	adds	r3, r7, #3
20000b0c:	781b      	ldrb	r3, [r3, #0]
20000b0e:	2b00      	cmp	r3, #0
20000b10:	d006      	beq.n	20000b20 <RCC_APB1PeriphClockLPModeCmd+0x24>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
20000b12:	4b09      	ldr	r3, [pc, #36]	; (20000b38 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
20000b14:	6e19      	ldr	r1, [r3, #96]	; 0x60
20000b16:	4b08      	ldr	r3, [pc, #32]	; (20000b38 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
20000b18:	687a      	ldr	r2, [r7, #4]
20000b1a:	430a      	orrs	r2, r1
20000b1c:	661a      	str	r2, [r3, #96]	; 0x60
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
  }
}
20000b1e:	e006      	b.n	20000b2e <RCC_APB1PeriphClockLPModeCmd+0x32>
    RCC->APB1LPENR &= ~RCC_APB1Periph;
20000b20:	4b05      	ldr	r3, [pc, #20]	; (20000b38 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
20000b22:	6e1a      	ldr	r2, [r3, #96]	; 0x60
20000b24:	687b      	ldr	r3, [r7, #4]
20000b26:	43d9      	mvns	r1, r3
20000b28:	4b03      	ldr	r3, [pc, #12]	; (20000b38 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
20000b2a:	400a      	ands	r2, r1
20000b2c:	661a      	str	r2, [r3, #96]	; 0x60
}
20000b2e:	46c0      	nop			; (mov r8, r8)
20000b30:	46bd      	mov	sp, r7
20000b32:	b002      	add	sp, #8
20000b34:	bd80      	pop	{r7, pc}
20000b36:	46c0      	nop			; (mov r8, r8)
20000b38:	40023800 	andmi	r3, r2, r0, lsl #16

20000b3c <RCC_APB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
20000b3c:	b580      	push	{r7, lr}
20000b3e:	b082      	sub	sp, #8
20000b40:	af00      	add	r7, sp, #0
20000b42:	6078      	str	r0, [r7, #4]
20000b44:	000a      	movs	r2, r1
20000b46:	1cfb      	adds	r3, r7, #3
20000b48:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000b4a:	1cfb      	adds	r3, r7, #3
20000b4c:	781b      	ldrb	r3, [r3, #0]
20000b4e:	2b00      	cmp	r3, #0
20000b50:	d006      	beq.n	20000b60 <RCC_APB2PeriphClockLPModeCmd+0x24>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
20000b52:	4b09      	ldr	r3, [pc, #36]	; (20000b78 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
20000b54:	6e59      	ldr	r1, [r3, #100]	; 0x64
20000b56:	4b08      	ldr	r3, [pc, #32]	; (20000b78 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
20000b58:	687a      	ldr	r2, [r7, #4]
20000b5a:	430a      	orrs	r2, r1
20000b5c:	665a      	str	r2, [r3, #100]	; 0x64
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
  }
}
20000b5e:	e006      	b.n	20000b6e <RCC_APB2PeriphClockLPModeCmd+0x32>
    RCC->APB2LPENR &= ~RCC_APB2Periph;
20000b60:	4b05      	ldr	r3, [pc, #20]	; (20000b78 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
20000b62:	6e5a      	ldr	r2, [r3, #100]	; 0x64
20000b64:	687b      	ldr	r3, [r7, #4]
20000b66:	43d9      	mvns	r1, r3
20000b68:	4b03      	ldr	r3, [pc, #12]	; (20000b78 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
20000b6a:	400a      	ands	r2, r1
20000b6c:	665a      	str	r2, [r3, #100]	; 0x64
}
20000b6e:	46c0      	nop			; (mov r8, r8)
20000b70:	46bd      	mov	sp, r7
20000b72:	b002      	add	sp, #8
20000b74:	bd80      	pop	{r7, pc}
20000b76:	46c0      	nop			; (mov r8, r8)
20000b78:	40023800 	andmi	r3, r2, r0, lsl #16

20000b7c <RCC_LSEModeConfig>:
  *            @arg RCC_LSE_LOWPOWER_MODE:  LSE oscillator in low power mode.
  *            @arg RCC_LSE_HIGHDRIVE_MODE: LSE oscillator in High Drive mode.
  * @retval None
  */
void RCC_LSEModeConfig(uint8_t RCC_Mode)
{
20000b7c:	b580      	push	{r7, lr}
20000b7e:	b082      	sub	sp, #8
20000b80:	af00      	add	r7, sp, #0
20000b82:	0002      	movs	r2, r0
20000b84:	1dfb      	adds	r3, r7, #7
20000b86:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_LSE_MODE(RCC_Mode));
  
  if(RCC_Mode == RCC_LSE_HIGHDRIVE_MODE)
20000b88:	1dfb      	adds	r3, r7, #7
20000b8a:	781b      	ldrb	r3, [r3, #0]
20000b8c:	2b01      	cmp	r3, #1
20000b8e:	d106      	bne.n	20000b9e <RCC_LSEModeConfig+0x22>
  {
    SET_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
20000b90:	4b08      	ldr	r3, [pc, #32]	; (20000bb4 <RCC_LSEModeConfig+0x38>)
20000b92:	6f1a      	ldr	r2, [r3, #112]	; 0x70
20000b94:	4b07      	ldr	r3, [pc, #28]	; (20000bb4 <RCC_LSEModeConfig+0x38>)
20000b96:	2108      	movs	r1, #8
20000b98:	430a      	orrs	r2, r1
20000b9a:	671a      	str	r2, [r3, #112]	; 0x70
  }
  else
  {
    CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
  }
}
20000b9c:	e005      	b.n	20000baa <RCC_LSEModeConfig+0x2e>
    CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
20000b9e:	4b05      	ldr	r3, [pc, #20]	; (20000bb4 <RCC_LSEModeConfig+0x38>)
20000ba0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
20000ba2:	4b04      	ldr	r3, [pc, #16]	; (20000bb4 <RCC_LSEModeConfig+0x38>)
20000ba4:	2108      	movs	r1, #8
20000ba6:	438a      	bics	r2, r1
20000ba8:	671a      	str	r2, [r3, #112]	; 0x70
}
20000baa:	46c0      	nop			; (mov r8, r8)
20000bac:	46bd      	mov	sp, r7
20000bae:	b002      	add	sp, #8
20000bb0:	bd80      	pop	{r7, pc}
20000bb2:	46c0      	nop			; (mov r8, r8)
20000bb4:	40023800 	andmi	r3, r2, r0, lsl #16

20000bb8 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
20000bb8:	b580      	push	{r7, lr}
20000bba:	b082      	sub	sp, #8
20000bbc:	af00      	add	r7, sp, #0
20000bbe:	0002      	movs	r2, r0
20000bc0:	1dfb      	adds	r3, r7, #7
20000bc2:	701a      	strb	r2, [r3, #0]
20000bc4:	1dbb      	adds	r3, r7, #6
20000bc6:	1c0a      	adds	r2, r1, #0
20000bc8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000bca:	1dbb      	adds	r3, r7, #6
20000bcc:	781b      	ldrb	r3, [r3, #0]
20000bce:	2b00      	cmp	r3, #0
20000bd0:	d009      	beq.n	20000be6 <RCC_ITConfig+0x2e>
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
20000bd2:	4b0c      	ldr	r3, [pc, #48]	; (20000c04 <RCC_ITConfig+0x4c>)
20000bd4:	781b      	ldrb	r3, [r3, #0]
20000bd6:	b2da      	uxtb	r2, r3
20000bd8:	490a      	ldr	r1, [pc, #40]	; (20000c04 <RCC_ITConfig+0x4c>)
20000bda:	1dfb      	adds	r3, r7, #7
20000bdc:	781b      	ldrb	r3, [r3, #0]
20000bde:	4313      	orrs	r3, r2
20000be0:	b2db      	uxtb	r3, r3
20000be2:	700b      	strb	r3, [r1, #0]
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
  }
}
20000be4:	e00a      	b.n	20000bfc <RCC_ITConfig+0x44>
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
20000be6:	4b07      	ldr	r3, [pc, #28]	; (20000c04 <RCC_ITConfig+0x4c>)
20000be8:	781b      	ldrb	r3, [r3, #0]
20000bea:	b2db      	uxtb	r3, r3
20000bec:	1dfa      	adds	r2, r7, #7
20000bee:	7812      	ldrb	r2, [r2, #0]
20000bf0:	43d2      	mvns	r2, r2
20000bf2:	b2d2      	uxtb	r2, r2
20000bf4:	4903      	ldr	r1, [pc, #12]	; (20000c04 <RCC_ITConfig+0x4c>)
20000bf6:	4013      	ands	r3, r2
20000bf8:	b2db      	uxtb	r3, r3
20000bfa:	700b      	strb	r3, [r1, #0]
}
20000bfc:	46c0      	nop			; (mov r8, r8)
20000bfe:	46bd      	mov	sp, r7
20000c00:	b002      	add	sp, #8
20000c02:	bd80      	pop	{r7, pc}
20000c04:	4002380d 	andmi	r3, r2, sp, lsl #16

20000c08 <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
20000c08:	b580      	push	{r7, lr}
20000c0a:	b086      	sub	sp, #24
20000c0c:	af00      	add	r7, sp, #0
20000c0e:	0002      	movs	r2, r0
20000c10:	1dfb      	adds	r3, r7, #7
20000c12:	701a      	strb	r2, [r3, #0]
  uint32_t tmp = 0;
20000c14:	2300      	movs	r3, #0
20000c16:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
20000c18:	2300      	movs	r3, #0
20000c1a:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
20000c1c:	2313      	movs	r3, #19
20000c1e:	18fb      	adds	r3, r7, r3
20000c20:	2200      	movs	r2, #0
20000c22:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
20000c24:	1dfb      	adds	r3, r7, #7
20000c26:	781b      	ldrb	r3, [r3, #0]
20000c28:	095b      	lsrs	r3, r3, #5
20000c2a:	b2db      	uxtb	r3, r3
20000c2c:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
20000c2e:	68fb      	ldr	r3, [r7, #12]
20000c30:	2b01      	cmp	r3, #1
20000c32:	d103      	bne.n	20000c3c <RCC_GetFlagStatus+0x34>
  {
    statusreg = RCC->CR;
20000c34:	4b14      	ldr	r3, [pc, #80]	; (20000c88 <RCC_GetFlagStatus+0x80>)
20000c36:	681b      	ldr	r3, [r3, #0]
20000c38:	617b      	str	r3, [r7, #20]
20000c3a:	e009      	b.n	20000c50 <RCC_GetFlagStatus+0x48>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
20000c3c:	68fb      	ldr	r3, [r7, #12]
20000c3e:	2b02      	cmp	r3, #2
20000c40:	d103      	bne.n	20000c4a <RCC_GetFlagStatus+0x42>
  {
    statusreg = RCC->BDCR;
20000c42:	4b11      	ldr	r3, [pc, #68]	; (20000c88 <RCC_GetFlagStatus+0x80>)
20000c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
20000c46:	617b      	str	r3, [r7, #20]
20000c48:	e002      	b.n	20000c50 <RCC_GetFlagStatus+0x48>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
20000c4a:	4b0f      	ldr	r3, [pc, #60]	; (20000c88 <RCC_GetFlagStatus+0x80>)
20000c4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
20000c4e:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
20000c50:	1dfb      	adds	r3, r7, #7
20000c52:	781b      	ldrb	r3, [r3, #0]
20000c54:	221f      	movs	r2, #31
20000c56:	4013      	ands	r3, r2
20000c58:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
20000c5a:	697a      	ldr	r2, [r7, #20]
20000c5c:	68fb      	ldr	r3, [r7, #12]
20000c5e:	40da      	lsrs	r2, r3
20000c60:	0013      	movs	r3, r2
20000c62:	2201      	movs	r2, #1
20000c64:	4013      	ands	r3, r2
20000c66:	d004      	beq.n	20000c72 <RCC_GetFlagStatus+0x6a>
  {
    bitstatus = SET;
20000c68:	2313      	movs	r3, #19
20000c6a:	18fb      	adds	r3, r7, r3
20000c6c:	2201      	movs	r2, #1
20000c6e:	701a      	strb	r2, [r3, #0]
20000c70:	e003      	b.n	20000c7a <RCC_GetFlagStatus+0x72>
  }
  else
  {
    bitstatus = RESET;
20000c72:	2313      	movs	r3, #19
20000c74:	18fb      	adds	r3, r7, r3
20000c76:	2200      	movs	r2, #0
20000c78:	701a      	strb	r2, [r3, #0]
  }
  /* Return the flag status */
  return bitstatus;
20000c7a:	2313      	movs	r3, #19
20000c7c:	18fb      	adds	r3, r7, r3
20000c7e:	781b      	ldrb	r3, [r3, #0]
}
20000c80:	0018      	movs	r0, r3
20000c82:	46bd      	mov	sp, r7
20000c84:	b006      	add	sp, #24
20000c86:	bd80      	pop	{r7, pc}
20000c88:	40023800 	andmi	r3, r2, r0, lsl #16

20000c8c <RCC_ClearFlag>:
  *         RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
20000c8c:	b580      	push	{r7, lr}
20000c8e:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
20000c90:	4b04      	ldr	r3, [pc, #16]	; (20000ca4 <RCC_ClearFlag+0x18>)
20000c92:	6f5a      	ldr	r2, [r3, #116]	; 0x74
20000c94:	4b03      	ldr	r3, [pc, #12]	; (20000ca4 <RCC_ClearFlag+0x18>)
20000c96:	2180      	movs	r1, #128	; 0x80
20000c98:	0449      	lsls	r1, r1, #17
20000c9a:	430a      	orrs	r2, r1
20000c9c:	675a      	str	r2, [r3, #116]	; 0x74
}
20000c9e:	46c0      	nop			; (mov r8, r8)
20000ca0:	46bd      	mov	sp, r7
20000ca2:	bd80      	pop	{r7, pc}
20000ca4:	40023800 	andmi	r3, r2, r0, lsl #16

20000ca8 <RCC_GetITStatus>:
  *            @arg RCC_IT_PLLSAIRDY: PLLSAI clock ready interrupt (only for STM32F42xxx/43xxx/446xx/469xx/479xx devices)
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
20000ca8:	b580      	push	{r7, lr}
20000caa:	b084      	sub	sp, #16
20000cac:	af00      	add	r7, sp, #0
20000cae:	0002      	movs	r2, r0
20000cb0:	1dfb      	adds	r3, r7, #7
20000cb2:	701a      	strb	r2, [r3, #0]
  ITStatus bitstatus = RESET;
20000cb4:	210f      	movs	r1, #15
20000cb6:	187b      	adds	r3, r7, r1
20000cb8:	2200      	movs	r2, #0
20000cba:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
20000cbc:	4b0a      	ldr	r3, [pc, #40]	; (20000ce8 <RCC_GetITStatus+0x40>)
20000cbe:	68db      	ldr	r3, [r3, #12]
20000cc0:	1dfa      	adds	r2, r7, #7
20000cc2:	7812      	ldrb	r2, [r2, #0]
20000cc4:	4013      	ands	r3, r2
20000cc6:	d003      	beq.n	20000cd0 <RCC_GetITStatus+0x28>
  {
    bitstatus = SET;
20000cc8:	187b      	adds	r3, r7, r1
20000cca:	2201      	movs	r2, #1
20000ccc:	701a      	strb	r2, [r3, #0]
20000cce:	e003      	b.n	20000cd8 <RCC_GetITStatus+0x30>
  }
  else
  {
    bitstatus = RESET;
20000cd0:	230f      	movs	r3, #15
20000cd2:	18fb      	adds	r3, r7, r3
20000cd4:	2200      	movs	r2, #0
20000cd6:	701a      	strb	r2, [r3, #0]
  }
  /* Return the RCC_IT status */
  return  bitstatus;
20000cd8:	230f      	movs	r3, #15
20000cda:	18fb      	adds	r3, r7, r3
20000cdc:	781b      	ldrb	r3, [r3, #0]
}
20000cde:	0018      	movs	r0, r3
20000ce0:	46bd      	mov	sp, r7
20000ce2:	b004      	add	sp, #16
20000ce4:	bd80      	pop	{r7, pc}
20000ce6:	46c0      	nop			; (mov r8, r8)
20000ce8:	40023800 	andmi	r3, r2, r0, lsl #16

20000cec <RCC_ClearITPendingBit>:
  *            @arg RCC_IT_PLLSAIRDY: PLLSAI ready interrupt (only for STM32F42xxx/43xxx/446xx/469xx/479xx devices) 
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
20000cec:	b580      	push	{r7, lr}
20000cee:	b082      	sub	sp, #8
20000cf0:	af00      	add	r7, sp, #0
20000cf2:	0002      	movs	r2, r0
20000cf4:	1dfb      	adds	r3, r7, #7
20000cf6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
20000cf8:	4a03      	ldr	r2, [pc, #12]	; (20000d08 <RCC_ClearITPendingBit+0x1c>)
20000cfa:	1dfb      	adds	r3, r7, #7
20000cfc:	781b      	ldrb	r3, [r3, #0]
20000cfe:	7013      	strb	r3, [r2, #0]
}
20000d00:	46c0      	nop			; (mov r8, r8)
20000d02:	46bd      	mov	sp, r7
20000d04:	b002      	add	sp, #8
20000d06:	bd80      	pop	{r7, pc}
20000d08:	4002380e 	andmi	r3, r2, lr, lsl #16

20000d0c <init_met>:

void init_met(void){
20000d0c:	b590      	push	{r4, r7, lr}
20000d0e:	b085      	sub	sp, #20
20000d10:	af00      	add	r7, sp, #0
	 
	 GPIO_InitTypeDef trig;
	 GPIO_InitTypeDef echo;
	
	 GPIO_StructInit(&trig);
20000d12:	2408      	movs	r4, #8
20000d14:	193b      	adds	r3, r7, r4
20000d16:	0018      	movs	r0, r3
20000d18:	f000 fa33 	bl	20001182 <GPIO_StructInit>
	 GPIO_StructInit(&echo);
20000d1c:	003b      	movs	r3, r7
20000d1e:	0018      	movs	r0, r3
20000d20:	f000 fa2f 	bl	20001182 <GPIO_StructInit>
	 
	 trig.GPIO_Pin = GPIO_Pin_0;
20000d24:	193b      	adds	r3, r7, r4
20000d26:	2201      	movs	r2, #1
20000d28:	601a      	str	r2, [r3, #0]
	 trig.GPIO_PuPd = GPIO_PuPd_DOWN;
20000d2a:	193b      	adds	r3, r7, r4
20000d2c:	2202      	movs	r2, #2
20000d2e:	71da      	strb	r2, [r3, #7]
	 trig.GPIO_OType = GPIO_OType_PP;
20000d30:	193b      	adds	r3, r7, r4
20000d32:	2200      	movs	r2, #0
20000d34:	719a      	strb	r2, [r3, #6]
	 trig.GPIO_Mode = GPIO_Mode_OUT;
20000d36:	193b      	adds	r3, r7, r4
20000d38:	2201      	movs	r2, #1
20000d3a:	711a      	strb	r2, [r3, #4]
	 
	 
	 echo.GPIO_Pin = GPIO_Pin_1;
20000d3c:	003b      	movs	r3, r7
20000d3e:	2202      	movs	r2, #2
20000d40:	601a      	str	r2, [r3, #0]
	 echo.GPIO_PuPd = GPIO_PuPd_DOWN;
20000d42:	003b      	movs	r3, r7
20000d44:	2202      	movs	r2, #2
20000d46:	71da      	strb	r2, [r3, #7]
	 echo.GPIO_OType = GPIO_OType_PP;
20000d48:	003b      	movs	r3, r7
20000d4a:	2200      	movs	r2, #0
20000d4c:	719a      	strb	r2, [r3, #6]
	 echo.GPIO_Mode = GPIO_Mode_IN;
20000d4e:	003b      	movs	r3, r7
20000d50:	2200      	movs	r2, #0
20000d52:	711a      	strb	r2, [r3, #4]
	
	GPIO_Init(GPIOD,&echo);
20000d54:	003b      	movs	r3, r7
20000d56:	4a07      	ldr	r2, [pc, #28]	; (20000d74 <init_met+0x68>)
20000d58:	0019      	movs	r1, r3
20000d5a:	0010      	movs	r0, r2
20000d5c:	f000 f984 	bl	20001068 <GPIO_Init>
	GPIO_Init(GPIOD,&trig);
20000d60:	193b      	adds	r3, r7, r4
20000d62:	4a04      	ldr	r2, [pc, #16]	; (20000d74 <init_met+0x68>)
20000d64:	0019      	movs	r1, r3
20000d66:	0010      	movs	r0, r2
20000d68:	f000 f97e 	bl	20001068 <GPIO_Init>
} 
20000d6c:	46c0      	nop			; (mov r8, r8)
20000d6e:	46bd      	mov	sp, r7
20000d70:	b005      	add	sp, #20
20000d72:	bd90      	pop	{r4, r7, pc}
20000d74:	40020c00 	andmi	r0, r2, r0, lsl #24

20000d78 <TIM_Configration>:

 void TIM_Configration(void){
20000d78:	b580      	push	{r7, lr}
20000d7a:	b084      	sub	sp, #16
20000d7c:	af00      	add	r7, sp, #0
	 
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
20000d7e:	2101      	movs	r1, #1
20000d80:	2001      	movs	r0, #1
20000d82:	f7ff fd7b 	bl	2000087c <RCC_APB1PeriphClockCmd>
	TIM_TimeBaseInitTypeDef TIM_timer;
	TIM_timer.TIM_Prescaler = 0x0;
20000d86:	1d3b      	adds	r3, r7, #4
20000d88:	2200      	movs	r2, #0
20000d8a:	801a      	strh	r2, [r3, #0]
	TIM_timer.TIM_Period = 0xFFFFFFFF;
20000d8c:	1d3b      	adds	r3, r7, #4
20000d8e:	2201      	movs	r2, #1
20000d90:	4252      	negs	r2, r2
20000d92:	605a      	str	r2, [r3, #4]
	TIM_timer.TIM_ClockDivision = TIM_CKD_DIV1;
20000d94:	1d3b      	adds	r3, r7, #4
20000d96:	2200      	movs	r2, #0
20000d98:	811a      	strh	r2, [r3, #8]
	TIM_timer.TIM_CounterMode = TIM_CounterMode_Up;
20000d9a:	1d3b      	adds	r3, r7, #4
20000d9c:	2200      	movs	r2, #0
20000d9e:	805a      	strh	r2, [r3, #2]
	TIM_TimeBaseInit(TIM2, &TIM_timer);
20000da0:	1d3a      	adds	r2, r7, #4
20000da2:	2380      	movs	r3, #128	; 0x80
20000da4:	05db      	lsls	r3, r3, #23
20000da6:	0011      	movs	r1, r2
20000da8:	0018      	movs	r0, r3
20000daa:	f000 fc71 	bl	20001690 <TIM_TimeBaseInit>
	TIM_Cmd(TIM2, ENABLE);
20000dae:	2380      	movs	r3, #128	; 0x80
20000db0:	05db      	lsls	r3, r3, #23
20000db2:	2101      	movs	r1, #1
20000db4:	0018      	movs	r0, r3
20000db6:	f000 fe03 	bl	200019c0 <TIM_Cmd>
 }
20000dba:	46c0      	nop			; (mov r8, r8)
20000dbc:	46bd      	mov	sp, r7
20000dbe:	b004      	add	sp, #16
20000dc0:	bd80      	pop	{r7, pc}

20000dc2 <main>:
 
 


void main(void)
{
20000dc2:	b580      	push	{r7, lr}
20000dc4:	b08c      	sub	sp, #48	; 0x30
20000dc6:	af00      	add	r7, sp, #0
	
	unsigned int echo_start, echo_end, echo_time, distance;
	char a[30];
	init_met();
20000dc8:	f7ff ffa0 	bl	20000d0c <init_met>
	TIM_Configration();
20000dcc:	f7ff ffd4 	bl	20000d78 <TIM_Configration>
	GPIO_ResetBits(GPIOD, GPIO_Pin_0);
20000dd0:	4b43      	ldr	r3, [pc, #268]	; (20000ee0 <main+0x11e>)
20000dd2:	2101      	movs	r1, #1
20000dd4:	0018      	movs	r0, r3
20000dd6:	f000 fa75 	bl	200012c4 <GPIO_ResetBits>
	print("\nwelcome");
20000dda:	4b42      	ldr	r3, [pc, #264]	; (20000ee4 <main+0x122>)
20000ddc:	0018      	movs	r0, r3
20000dde:	f000 fb59 	bl	20001494 <print>
	
	while(1){
		
	TIM_SetCounter(TIM2,0);				// delay between measurments 
20000de2:	2380      	movs	r3, #128	; 0x80
20000de4:	05db      	lsls	r3, r3, #23
20000de6:	2100      	movs	r1, #0
20000de8:	0018      	movs	r0, r3
20000dea:	f000 fd21 	bl	20001830 <TIM_SetCounter>
	while(TIM_GetCounter(TIM2) < 168 * 60000);
20000dee:	46c0      	nop			; (mov r8, r8)
20000df0:	2380      	movs	r3, #128	; 0x80
20000df2:	05db      	lsls	r3, r3, #23
20000df4:	0018      	movs	r0, r3
20000df6:	f000 fd33 	bl	20001860 <TIM_GetCounter>
20000dfa:	0003      	movs	r3, r0
20000dfc:	4a3a      	ldr	r2, [pc, #232]	; (20000ee8 <main+0x126>)
20000dfe:	4293      	cmp	r3, r2
20000e00:	d9f6      	bls.n	20000df0 <main+0x2e>
	
	GPIO_SetBits(GPIOD, GPIO_Pin_0); // Sets trigger pin	
20000e02:	4b37      	ldr	r3, [pc, #220]	; (20000ee0 <main+0x11e>)
20000e04:	2101      	movs	r1, #1
20000e06:	0018      	movs	r0, r3
20000e08:	f000 fa4d 	bl	200012a6 <GPIO_SetBits>

	TIM_SetCounter(TIM2,0);				// 10 mikroseconds delay
20000e0c:	2380      	movs	r3, #128	; 0x80
20000e0e:	05db      	lsls	r3, r3, #23
20000e10:	2100      	movs	r1, #0
20000e12:	0018      	movs	r0, r3
20000e14:	f000 fd0c 	bl	20001830 <TIM_SetCounter>
	while(TIM_GetCounter(TIM2) < 168 * 10);
20000e18:	46c0      	nop			; (mov r8, r8)
20000e1a:	2380      	movs	r3, #128	; 0x80
20000e1c:	05db      	lsls	r3, r3, #23
20000e1e:	0018      	movs	r0, r3
20000e20:	f000 fd1e 	bl	20001860 <TIM_GetCounter>
20000e24:	0002      	movs	r2, r0
20000e26:	23d2      	movs	r3, #210	; 0xd2
20000e28:	00db      	lsls	r3, r3, #3
20000e2a:	429a      	cmp	r2, r3
20000e2c:	d3f5      	bcc.n	20000e1a <main+0x58>
	
	GPIO_ResetBits(GPIOD, GPIO_Pin_0);	// Clear trigger pin
20000e2e:	4b2c      	ldr	r3, [pc, #176]	; (20000ee0 <main+0x11e>)
20000e30:	2101      	movs	r1, #1
20000e32:	0018      	movs	r0, r3
20000e34:	f000 fa46 	bl	200012c4 <GPIO_ResetBits>
	
	// wait for echo 
	
	while(!(GPIO_ReadInputDataBit(GPIOD, GPIO_Pin_1))) {
20000e38:	e006      	b.n	20000e48 <main+0x86>
		echo_start = TIM_GetCounter(TIM2);
20000e3a:	2380      	movs	r3, #128	; 0x80
20000e3c:	05db      	lsls	r3, r3, #23
20000e3e:	0018      	movs	r0, r3
20000e40:	f000 fd0e 	bl	20001860 <TIM_GetCounter>
20000e44:	0003      	movs	r3, r0
20000e46:	62fb      	str	r3, [r7, #44]	; 0x2c
	while(!(GPIO_ReadInputDataBit(GPIOD, GPIO_Pin_1))) {
20000e48:	4b25      	ldr	r3, [pc, #148]	; (20000ee0 <main+0x11e>)
20000e4a:	2102      	movs	r1, #2
20000e4c:	0018      	movs	r0, r3
20000e4e:	f000 f9d4 	bl	200011fa <GPIO_ReadInputDataBit>
20000e52:	1e03      	subs	r3, r0, #0
20000e54:	d0f1      	beq.n	20000e3a <main+0x78>
	}
	
	while(GPIO_ReadInputDataBit(GPIOD, GPIO_Pin_1)) {
20000e56:	e006      	b.n	20000e66 <main+0xa4>
		echo_end = TIM_GetCounter(TIM2);
20000e58:	2380      	movs	r3, #128	; 0x80
20000e5a:	05db      	lsls	r3, r3, #23
20000e5c:	0018      	movs	r0, r3
20000e5e:	f000 fcff 	bl	20001860 <TIM_GetCounter>
20000e62:	0003      	movs	r3, r0
20000e64:	62bb      	str	r3, [r7, #40]	; 0x28
	while(GPIO_ReadInputDataBit(GPIOD, GPIO_Pin_1)) {
20000e66:	4b1e      	ldr	r3, [pc, #120]	; (20000ee0 <main+0x11e>)
20000e68:	2102      	movs	r1, #2
20000e6a:	0018      	movs	r0, r3
20000e6c:	f000 f9c5 	bl	200011fa <GPIO_ReadInputDataBit>
20000e70:	1e03      	subs	r3, r0, #0
20000e72:	d1f1      	bne.n	20000e58 <main+0x96>
		
	}
	
	// Correction for clock overflow during measurment of the echo.
	if(echo_start >= echo_end){	
20000e74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
20000e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
20000e78:	429a      	cmp	r2, r3
20000e7a:	d305      	bcc.n	20000e88 <main+0xc6>
		echo_time = echo_end + (0xFFFFFFFF - echo_start);
20000e7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
20000e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20000e80:	1ad3      	subs	r3, r2, r3
20000e82:	3b01      	subs	r3, #1
20000e84:	627b      	str	r3, [r7, #36]	; 0x24
20000e86:	e003      	b.n	20000e90 <main+0xce>
	} else{
		echo_time = echo_end - echo_start;
20000e88:	6aba      	ldr	r2, [r7, #40]	; 0x28
20000e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20000e8c:	1ad3      	subs	r3, r2, r3
20000e8e:	627b      	str	r3, [r7, #36]	; 0x24
	}
	distance = 343 * echo_time / ((168000000/100));
20000e90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20000e92:	0013      	movs	r3, r2
20000e94:	00db      	lsls	r3, r3, #3
20000e96:	1a9b      	subs	r3, r3, r2
20000e98:	00da      	lsls	r2, r3, #3
20000e9a:	1ad2      	subs	r2, r2, r3
20000e9c:	00d3      	lsls	r3, r2, #3
20000e9e:	1a9b      	subs	r3, r3, r2
20000ea0:	4912      	ldr	r1, [pc, #72]	; (20000eec <main+0x12a>)
20000ea2:	0018      	movs	r0, r3
20000ea4:	f002 fbf8 	bl	20003698 <__udivsi3>
20000ea8:	0003      	movs	r3, r0
20000eaa:	623b      	str	r3, [r7, #32]
	if(distance<400){
20000eac:	6a3a      	ldr	r2, [r7, #32]
20000eae:	23c8      	movs	r3, #200	; 0xc8
20000eb0:	005b      	lsls	r3, r3, #1
20000eb2:	429a      	cmp	r2, r3
20000eb4:	d20a      	bcs.n	20000ecc <main+0x10a>
	
	print(itoa(distance,a,10));
20000eb6:	0039      	movs	r1, r7
20000eb8:	6a3b      	ldr	r3, [r7, #32]
20000eba:	220a      	movs	r2, #10
20000ebc:	0018      	movs	r0, r3
20000ebe:	f002 fc8f 	bl	200037e0 <itoa>
20000ec2:	0003      	movs	r3, r0
20000ec4:	0018      	movs	r0, r3
20000ec6:	f000 fae5 	bl	20001494 <print>
20000eca:	e003      	b.n	20000ed4 <main+0x112>
	}else{print("distance is too far");}
20000ecc:	4b08      	ldr	r3, [pc, #32]	; (20000ef0 <main+0x12e>)
20000ece:	0018      	movs	r0, r3
20000ed0:	f000 fae0 	bl	20001494 <print>
	
	
	print("\n");
20000ed4:	4b07      	ldr	r3, [pc, #28]	; (20000ef4 <main+0x132>)
20000ed6:	0018      	movs	r0, r3
20000ed8:	f000 fadc 	bl	20001494 <print>
	TIM_SetCounter(TIM2,0);				// delay between measurments 
20000edc:	e781      	b.n	20000de2 <main+0x20>
20000ede:	46c0      	nop			; (mov r8, r8)
20000ee0:	40020c00 	andmi	r0, r2, r0, lsl #24
20000ee4:	20003880 	andcs	r3, r0, r0, lsl #17
20000ee8:	0099ceff 			; <UNDEFINED> instruction: 0x0099ceff
20000eec:	0019a280 	andseq	sl, r9, r0, lsl #5
20000ef0:	2000388c 	andcs	r3, r0, ip, lsl #17
20000ef4:	200038a0 	andcs	r3, r0, r0, lsr #17

20000ef8 <GPIO_DeInit>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices.  
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
20000ef8:	b580      	push	{r7, lr}
20000efa:	b082      	sub	sp, #8
20000efc:	af00      	add	r7, sp, #0
20000efe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
20000f00:	687b      	ldr	r3, [r7, #4]
20000f02:	4a4e      	ldr	r2, [pc, #312]	; (2000103c <GPIO_DeInit+0x144>)
20000f04:	4293      	cmp	r3, r2
20000f06:	d108      	bne.n	20000f1a <GPIO_DeInit+0x22>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
20000f08:	2101      	movs	r1, #1
20000f0a:	2001      	movs	r0, #1
20000f0c:	f7ff fcf6 	bl	200008fc <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
20000f10:	2100      	movs	r1, #0
20000f12:	2001      	movs	r0, #1
20000f14:	f7ff fcf2 	bl	200008fc <RCC_AHB1PeriphResetCmd>
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
20000f18:	e08c      	b.n	20001034 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOB)
20000f1a:	687b      	ldr	r3, [r7, #4]
20000f1c:	4a48      	ldr	r2, [pc, #288]	; (20001040 <GPIO_DeInit+0x148>)
20000f1e:	4293      	cmp	r3, r2
20000f20:	d108      	bne.n	20000f34 <GPIO_DeInit+0x3c>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
20000f22:	2101      	movs	r1, #1
20000f24:	2002      	movs	r0, #2
20000f26:	f7ff fce9 	bl	200008fc <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
20000f2a:	2100      	movs	r1, #0
20000f2c:	2002      	movs	r0, #2
20000f2e:	f7ff fce5 	bl	200008fc <RCC_AHB1PeriphResetCmd>
}
20000f32:	e07f      	b.n	20001034 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOC)
20000f34:	687b      	ldr	r3, [r7, #4]
20000f36:	4a43      	ldr	r2, [pc, #268]	; (20001044 <GPIO_DeInit+0x14c>)
20000f38:	4293      	cmp	r3, r2
20000f3a:	d108      	bne.n	20000f4e <GPIO_DeInit+0x56>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
20000f3c:	2101      	movs	r1, #1
20000f3e:	2004      	movs	r0, #4
20000f40:	f7ff fcdc 	bl	200008fc <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
20000f44:	2100      	movs	r1, #0
20000f46:	2004      	movs	r0, #4
20000f48:	f7ff fcd8 	bl	200008fc <RCC_AHB1PeriphResetCmd>
}
20000f4c:	e072      	b.n	20001034 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOD)
20000f4e:	687b      	ldr	r3, [r7, #4]
20000f50:	4a3d      	ldr	r2, [pc, #244]	; (20001048 <GPIO_DeInit+0x150>)
20000f52:	4293      	cmp	r3, r2
20000f54:	d108      	bne.n	20000f68 <GPIO_DeInit+0x70>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
20000f56:	2101      	movs	r1, #1
20000f58:	2008      	movs	r0, #8
20000f5a:	f7ff fccf 	bl	200008fc <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
20000f5e:	2100      	movs	r1, #0
20000f60:	2008      	movs	r0, #8
20000f62:	f7ff fccb 	bl	200008fc <RCC_AHB1PeriphResetCmd>
}
20000f66:	e065      	b.n	20001034 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOE)
20000f68:	687b      	ldr	r3, [r7, #4]
20000f6a:	4a38      	ldr	r2, [pc, #224]	; (2000104c <GPIO_DeInit+0x154>)
20000f6c:	4293      	cmp	r3, r2
20000f6e:	d108      	bne.n	20000f82 <GPIO_DeInit+0x8a>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
20000f70:	2101      	movs	r1, #1
20000f72:	2010      	movs	r0, #16
20000f74:	f7ff fcc2 	bl	200008fc <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
20000f78:	2100      	movs	r1, #0
20000f7a:	2010      	movs	r0, #16
20000f7c:	f7ff fcbe 	bl	200008fc <RCC_AHB1PeriphResetCmd>
}
20000f80:	e058      	b.n	20001034 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOF)
20000f82:	687b      	ldr	r3, [r7, #4]
20000f84:	4a32      	ldr	r2, [pc, #200]	; (20001050 <GPIO_DeInit+0x158>)
20000f86:	4293      	cmp	r3, r2
20000f88:	d108      	bne.n	20000f9c <GPIO_DeInit+0xa4>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
20000f8a:	2101      	movs	r1, #1
20000f8c:	2020      	movs	r0, #32
20000f8e:	f7ff fcb5 	bl	200008fc <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
20000f92:	2100      	movs	r1, #0
20000f94:	2020      	movs	r0, #32
20000f96:	f7ff fcb1 	bl	200008fc <RCC_AHB1PeriphResetCmd>
}
20000f9a:	e04b      	b.n	20001034 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOG)
20000f9c:	687b      	ldr	r3, [r7, #4]
20000f9e:	4a2d      	ldr	r2, [pc, #180]	; (20001054 <GPIO_DeInit+0x15c>)
20000fa0:	4293      	cmp	r3, r2
20000fa2:	d108      	bne.n	20000fb6 <GPIO_DeInit+0xbe>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
20000fa4:	2101      	movs	r1, #1
20000fa6:	2040      	movs	r0, #64	; 0x40
20000fa8:	f7ff fca8 	bl	200008fc <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
20000fac:	2100      	movs	r1, #0
20000fae:	2040      	movs	r0, #64	; 0x40
20000fb0:	f7ff fca4 	bl	200008fc <RCC_AHB1PeriphResetCmd>
}
20000fb4:	e03e      	b.n	20001034 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOH)
20000fb6:	687b      	ldr	r3, [r7, #4]
20000fb8:	4a27      	ldr	r2, [pc, #156]	; (20001058 <GPIO_DeInit+0x160>)
20000fba:	4293      	cmp	r3, r2
20000fbc:	d108      	bne.n	20000fd0 <GPIO_DeInit+0xd8>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
20000fbe:	2101      	movs	r1, #1
20000fc0:	2080      	movs	r0, #128	; 0x80
20000fc2:	f7ff fc9b 	bl	200008fc <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
20000fc6:	2100      	movs	r1, #0
20000fc8:	2080      	movs	r0, #128	; 0x80
20000fca:	f7ff fc97 	bl	200008fc <RCC_AHB1PeriphResetCmd>
}
20000fce:	e031      	b.n	20001034 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOI)
20000fd0:	687b      	ldr	r3, [r7, #4]
20000fd2:	4a22      	ldr	r2, [pc, #136]	; (2000105c <GPIO_DeInit+0x164>)
20000fd4:	4293      	cmp	r3, r2
20000fd6:	d10c      	bne.n	20000ff2 <GPIO_DeInit+0xfa>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
20000fd8:	2380      	movs	r3, #128	; 0x80
20000fda:	005b      	lsls	r3, r3, #1
20000fdc:	2101      	movs	r1, #1
20000fde:	0018      	movs	r0, r3
20000fe0:	f7ff fc8c 	bl	200008fc <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
20000fe4:	2380      	movs	r3, #128	; 0x80
20000fe6:	005b      	lsls	r3, r3, #1
20000fe8:	2100      	movs	r1, #0
20000fea:	0018      	movs	r0, r3
20000fec:	f7ff fc86 	bl	200008fc <RCC_AHB1PeriphResetCmd>
}
20000ff0:	e020      	b.n	20001034 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOJ)
20000ff2:	687b      	ldr	r3, [r7, #4]
20000ff4:	4a1a      	ldr	r2, [pc, #104]	; (20001060 <GPIO_DeInit+0x168>)
20000ff6:	4293      	cmp	r3, r2
20000ff8:	d10c      	bne.n	20001014 <GPIO_DeInit+0x11c>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, ENABLE);
20000ffa:	2380      	movs	r3, #128	; 0x80
20000ffc:	009b      	lsls	r3, r3, #2
20000ffe:	2101      	movs	r1, #1
20001000:	0018      	movs	r0, r3
20001002:	f7ff fc7b 	bl	200008fc <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, DISABLE);
20001006:	2380      	movs	r3, #128	; 0x80
20001008:	009b      	lsls	r3, r3, #2
2000100a:	2100      	movs	r1, #0
2000100c:	0018      	movs	r0, r3
2000100e:	f7ff fc75 	bl	200008fc <RCC_AHB1PeriphResetCmd>
}
20001012:	e00f      	b.n	20001034 <GPIO_DeInit+0x13c>
    if (GPIOx == GPIOK)
20001014:	687b      	ldr	r3, [r7, #4]
20001016:	4a13      	ldr	r2, [pc, #76]	; (20001064 <GPIO_DeInit+0x16c>)
20001018:	4293      	cmp	r3, r2
2000101a:	d10b      	bne.n	20001034 <GPIO_DeInit+0x13c>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
2000101c:	2380      	movs	r3, #128	; 0x80
2000101e:	00db      	lsls	r3, r3, #3
20001020:	2101      	movs	r1, #1
20001022:	0018      	movs	r0, r3
20001024:	f7ff fc6a 	bl	200008fc <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
20001028:	2380      	movs	r3, #128	; 0x80
2000102a:	00db      	lsls	r3, r3, #3
2000102c:	2100      	movs	r1, #0
2000102e:	0018      	movs	r0, r3
20001030:	f7ff fc64 	bl	200008fc <RCC_AHB1PeriphResetCmd>
}
20001034:	46c0      	nop			; (mov r8, r8)
20001036:	46bd      	mov	sp, r7
20001038:	b002      	add	sp, #8
2000103a:	bd80      	pop	{r7, pc}
2000103c:	40020000 	andmi	r0, r2, r0
20001040:	40020400 	andmi	r0, r2, r0, lsl #8
20001044:	40020800 	andmi	r0, r2, r0, lsl #16
20001048:	40020c00 	andmi	r0, r2, r0, lsl #24
2000104c:	40021000 	andmi	r1, r2, r0
20001050:	40021400 	andmi	r1, r2, r0, lsl #8
20001054:	40021800 	andmi	r1, r2, r0, lsl #16
20001058:	40021c00 	andmi	r1, r2, r0, lsl #24
2000105c:	40022000 	andmi	r2, r2, r0
20001060:	40022400 	andmi	r2, r2, r0, lsl #8
20001064:	40022800 	andmi	r2, r2, r0, lsl #16

20001068 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
20001068:	b580      	push	{r7, lr}
2000106a:	b086      	sub	sp, #24
2000106c:	af00      	add	r7, sp, #0
2000106e:	6078      	str	r0, [r7, #4]
20001070:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
20001072:	2300      	movs	r3, #0
20001074:	617b      	str	r3, [r7, #20]
20001076:	2300      	movs	r3, #0
20001078:	613b      	str	r3, [r7, #16]
2000107a:	2300      	movs	r3, #0
2000107c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
2000107e:	2300      	movs	r3, #0
20001080:	617b      	str	r3, [r7, #20]
20001082:	e076      	b.n	20001172 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
20001084:	2201      	movs	r2, #1
20001086:	697b      	ldr	r3, [r7, #20]
20001088:	409a      	lsls	r2, r3
2000108a:	0013      	movs	r3, r2
2000108c:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
2000108e:	683b      	ldr	r3, [r7, #0]
20001090:	681a      	ldr	r2, [r3, #0]
20001092:	693b      	ldr	r3, [r7, #16]
20001094:	4013      	ands	r3, r2
20001096:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
20001098:	68fa      	ldr	r2, [r7, #12]
2000109a:	693b      	ldr	r3, [r7, #16]
2000109c:	429a      	cmp	r2, r3
2000109e:	d165      	bne.n	2000116c <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
200010a0:	687b      	ldr	r3, [r7, #4]
200010a2:	681b      	ldr	r3, [r3, #0]
200010a4:	697a      	ldr	r2, [r7, #20]
200010a6:	0052      	lsls	r2, r2, #1
200010a8:	2103      	movs	r1, #3
200010aa:	4091      	lsls	r1, r2
200010ac:	000a      	movs	r2, r1
200010ae:	43d2      	mvns	r2, r2
200010b0:	401a      	ands	r2, r3
200010b2:	687b      	ldr	r3, [r7, #4]
200010b4:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
200010b6:	687b      	ldr	r3, [r7, #4]
200010b8:	681a      	ldr	r2, [r3, #0]
200010ba:	683b      	ldr	r3, [r7, #0]
200010bc:	791b      	ldrb	r3, [r3, #4]
200010be:	0019      	movs	r1, r3
200010c0:	697b      	ldr	r3, [r7, #20]
200010c2:	005b      	lsls	r3, r3, #1
200010c4:	4099      	lsls	r1, r3
200010c6:	000b      	movs	r3, r1
200010c8:	431a      	orrs	r2, r3
200010ca:	687b      	ldr	r3, [r7, #4]
200010cc:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
200010ce:	683b      	ldr	r3, [r7, #0]
200010d0:	791b      	ldrb	r3, [r3, #4]
200010d2:	2b01      	cmp	r3, #1
200010d4:	d003      	beq.n	200010de <GPIO_Init+0x76>
200010d6:	683b      	ldr	r3, [r7, #0]
200010d8:	791b      	ldrb	r3, [r3, #4]
200010da:	2b02      	cmp	r3, #2
200010dc:	d12e      	bne.n	2000113c <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
200010de:	687b      	ldr	r3, [r7, #4]
200010e0:	689b      	ldr	r3, [r3, #8]
200010e2:	697a      	ldr	r2, [r7, #20]
200010e4:	0052      	lsls	r2, r2, #1
200010e6:	2103      	movs	r1, #3
200010e8:	4091      	lsls	r1, r2
200010ea:	000a      	movs	r2, r1
200010ec:	43d2      	mvns	r2, r2
200010ee:	401a      	ands	r2, r3
200010f0:	687b      	ldr	r3, [r7, #4]
200010f2:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
200010f4:	687b      	ldr	r3, [r7, #4]
200010f6:	689a      	ldr	r2, [r3, #8]
200010f8:	683b      	ldr	r3, [r7, #0]
200010fa:	795b      	ldrb	r3, [r3, #5]
200010fc:	0019      	movs	r1, r3
200010fe:	697b      	ldr	r3, [r7, #20]
20001100:	005b      	lsls	r3, r3, #1
20001102:	4099      	lsls	r1, r3
20001104:	000b      	movs	r3, r1
20001106:	431a      	orrs	r2, r3
20001108:	687b      	ldr	r3, [r7, #4]
2000110a:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
2000110c:	687b      	ldr	r3, [r7, #4]
2000110e:	685b      	ldr	r3, [r3, #4]
20001110:	697a      	ldr	r2, [r7, #20]
20001112:	b292      	uxth	r2, r2
20001114:	0011      	movs	r1, r2
20001116:	2201      	movs	r2, #1
20001118:	408a      	lsls	r2, r1
2000111a:	43d2      	mvns	r2, r2
2000111c:	401a      	ands	r2, r3
2000111e:	687b      	ldr	r3, [r7, #4]
20001120:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
20001122:	687b      	ldr	r3, [r7, #4]
20001124:	685b      	ldr	r3, [r3, #4]
20001126:	683a      	ldr	r2, [r7, #0]
20001128:	7992      	ldrb	r2, [r2, #6]
2000112a:	0011      	movs	r1, r2
2000112c:	697a      	ldr	r2, [r7, #20]
2000112e:	b292      	uxth	r2, r2
20001130:	4091      	lsls	r1, r2
20001132:	000a      	movs	r2, r1
20001134:	b292      	uxth	r2, r2
20001136:	431a      	orrs	r2, r3
20001138:	687b      	ldr	r3, [r7, #4]
2000113a:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
2000113c:	687b      	ldr	r3, [r7, #4]
2000113e:	68db      	ldr	r3, [r3, #12]
20001140:	697a      	ldr	r2, [r7, #20]
20001142:	b292      	uxth	r2, r2
20001144:	0052      	lsls	r2, r2, #1
20001146:	2103      	movs	r1, #3
20001148:	4091      	lsls	r1, r2
2000114a:	000a      	movs	r2, r1
2000114c:	43d2      	mvns	r2, r2
2000114e:	401a      	ands	r2, r3
20001150:	687b      	ldr	r3, [r7, #4]
20001152:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
20001154:	687b      	ldr	r3, [r7, #4]
20001156:	68da      	ldr	r2, [r3, #12]
20001158:	683b      	ldr	r3, [r7, #0]
2000115a:	79db      	ldrb	r3, [r3, #7]
2000115c:	0019      	movs	r1, r3
2000115e:	697b      	ldr	r3, [r7, #20]
20001160:	005b      	lsls	r3, r3, #1
20001162:	4099      	lsls	r1, r3
20001164:	000b      	movs	r3, r1
20001166:	431a      	orrs	r2, r3
20001168:	687b      	ldr	r3, [r7, #4]
2000116a:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
2000116c:	697b      	ldr	r3, [r7, #20]
2000116e:	3301      	adds	r3, #1
20001170:	617b      	str	r3, [r7, #20]
20001172:	697b      	ldr	r3, [r7, #20]
20001174:	2b0f      	cmp	r3, #15
20001176:	d985      	bls.n	20001084 <GPIO_Init+0x1c>
    }
  }
}
20001178:	46c0      	nop			; (mov r8, r8)
2000117a:	46c0      	nop			; (mov r8, r8)
2000117c:	46bd      	mov	sp, r7
2000117e:	b006      	add	sp, #24
20001180:	bd80      	pop	{r7, pc}

20001182 <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
20001182:	b580      	push	{r7, lr}
20001184:	b082      	sub	sp, #8
20001186:	af00      	add	r7, sp, #0
20001188:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
2000118a:	687b      	ldr	r3, [r7, #4]
2000118c:	4a08      	ldr	r2, [pc, #32]	; (200011b0 <GPIO_StructInit+0x2e>)
2000118e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
20001190:	687b      	ldr	r3, [r7, #4]
20001192:	2200      	movs	r2, #0
20001194:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
20001196:	687b      	ldr	r3, [r7, #4]
20001198:	2200      	movs	r2, #0
2000119a:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
2000119c:	687b      	ldr	r3, [r7, #4]
2000119e:	2200      	movs	r2, #0
200011a0:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
200011a2:	687b      	ldr	r3, [r7, #4]
200011a4:	2200      	movs	r2, #0
200011a6:	71da      	strb	r2, [r3, #7]
}
200011a8:	46c0      	nop			; (mov r8, r8)
200011aa:	46bd      	mov	sp, r7
200011ac:	b002      	add	sp, #8
200011ae:	bd80      	pop	{r7, pc}
200011b0:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>

200011b4 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
200011b4:	b580      	push	{r7, lr}
200011b6:	b084      	sub	sp, #16
200011b8:	af00      	add	r7, sp, #0
200011ba:	6078      	str	r0, [r7, #4]
200011bc:	000a      	movs	r2, r1
200011be:	1cbb      	adds	r3, r7, #2
200011c0:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmp = 0x00010000;
200011c2:	2380      	movs	r3, #128	; 0x80
200011c4:	025b      	lsls	r3, r3, #9
200011c6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
200011c8:	1cbb      	adds	r3, r7, #2
200011ca:	881a      	ldrh	r2, [r3, #0]
200011cc:	68fb      	ldr	r3, [r7, #12]
200011ce:	4313      	orrs	r3, r2
200011d0:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
200011d2:	68fa      	ldr	r2, [r7, #12]
200011d4:	687b      	ldr	r3, [r7, #4]
200011d6:	61da      	str	r2, [r3, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
200011d8:	1cbb      	adds	r3, r7, #2
200011da:	881a      	ldrh	r2, [r3, #0]
200011dc:	687b      	ldr	r3, [r7, #4]
200011de:	61da      	str	r2, [r3, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
200011e0:	68fa      	ldr	r2, [r7, #12]
200011e2:	687b      	ldr	r3, [r7, #4]
200011e4:	61da      	str	r2, [r3, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
200011e6:	687b      	ldr	r3, [r7, #4]
200011e8:	69db      	ldr	r3, [r3, #28]
200011ea:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
200011ec:	687b      	ldr	r3, [r7, #4]
200011ee:	69db      	ldr	r3, [r3, #28]
200011f0:	60fb      	str	r3, [r7, #12]
}
200011f2:	46c0      	nop			; (mov r8, r8)
200011f4:	46bd      	mov	sp, r7
200011f6:	b004      	add	sp, #16
200011f8:	bd80      	pop	{r7, pc}

200011fa <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
200011fa:	b580      	push	{r7, lr}
200011fc:	b084      	sub	sp, #16
200011fe:	af00      	add	r7, sp, #0
20001200:	6078      	str	r0, [r7, #4]
20001202:	000a      	movs	r2, r1
20001204:	1cbb      	adds	r3, r7, #2
20001206:	801a      	strh	r2, [r3, #0]
  uint8_t bitstatus = 0x00;
20001208:	210f      	movs	r1, #15
2000120a:	187b      	adds	r3, r7, r1
2000120c:	2200      	movs	r2, #0
2000120e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
20001210:	687b      	ldr	r3, [r7, #4]
20001212:	691b      	ldr	r3, [r3, #16]
20001214:	1cba      	adds	r2, r7, #2
20001216:	8812      	ldrh	r2, [r2, #0]
20001218:	4013      	ands	r3, r2
2000121a:	d003      	beq.n	20001224 <GPIO_ReadInputDataBit+0x2a>
  {
    bitstatus = (uint8_t)Bit_SET;
2000121c:	187b      	adds	r3, r7, r1
2000121e:	2201      	movs	r2, #1
20001220:	701a      	strb	r2, [r3, #0]
20001222:	e003      	b.n	2000122c <GPIO_ReadInputDataBit+0x32>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
20001224:	230f      	movs	r3, #15
20001226:	18fb      	adds	r3, r7, r3
20001228:	2200      	movs	r2, #0
2000122a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
2000122c:	230f      	movs	r3, #15
2000122e:	18fb      	adds	r3, r7, r3
20001230:	781b      	ldrb	r3, [r3, #0]
}
20001232:	0018      	movs	r0, r3
20001234:	46bd      	mov	sp, r7
20001236:	b004      	add	sp, #16
20001238:	bd80      	pop	{r7, pc}

2000123a <GPIO_ReadInputData>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
2000123a:	b580      	push	{r7, lr}
2000123c:	b082      	sub	sp, #8
2000123e:	af00      	add	r7, sp, #0
20001240:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
20001242:	687b      	ldr	r3, [r7, #4]
20001244:	691b      	ldr	r3, [r3, #16]
20001246:	b29b      	uxth	r3, r3
}
20001248:	0018      	movs	r0, r3
2000124a:	46bd      	mov	sp, r7
2000124c:	b002      	add	sp, #8
2000124e:	bd80      	pop	{r7, pc}

20001250 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *          This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20001250:	b580      	push	{r7, lr}
20001252:	b084      	sub	sp, #16
20001254:	af00      	add	r7, sp, #0
20001256:	6078      	str	r0, [r7, #4]
20001258:	000a      	movs	r2, r1
2000125a:	1cbb      	adds	r3, r7, #2
2000125c:	801a      	strh	r2, [r3, #0]
  uint8_t bitstatus = 0x00;
2000125e:	210f      	movs	r1, #15
20001260:	187b      	adds	r3, r7, r1
20001262:	2200      	movs	r2, #0
20001264:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if (((GPIOx->ODR) & GPIO_Pin) != (uint32_t)Bit_RESET)
20001266:	687b      	ldr	r3, [r7, #4]
20001268:	695b      	ldr	r3, [r3, #20]
2000126a:	1cba      	adds	r2, r7, #2
2000126c:	8812      	ldrh	r2, [r2, #0]
2000126e:	4013      	ands	r3, r2
20001270:	d003      	beq.n	2000127a <GPIO_ReadOutputDataBit+0x2a>
  {
    bitstatus = (uint8_t)Bit_SET;
20001272:	187b      	adds	r3, r7, r1
20001274:	2201      	movs	r2, #1
20001276:	701a      	strb	r2, [r3, #0]
20001278:	e003      	b.n	20001282 <GPIO_ReadOutputDataBit+0x32>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
2000127a:	230f      	movs	r3, #15
2000127c:	18fb      	adds	r3, r7, r3
2000127e:	2200      	movs	r2, #0
20001280:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
20001282:	230f      	movs	r3, #15
20001284:	18fb      	adds	r3, r7, r3
20001286:	781b      	ldrb	r3, [r3, #0]
}
20001288:	0018      	movs	r0, r3
2000128a:	46bd      	mov	sp, r7
2000128c:	b004      	add	sp, #16
2000128e:	bd80      	pop	{r7, pc}

20001290 <GPIO_ReadOutputData>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
20001290:	b580      	push	{r7, lr}
20001292:	b082      	sub	sp, #8
20001294:	af00      	add	r7, sp, #0
20001296:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
20001298:	687b      	ldr	r3, [r7, #4]
2000129a:	695b      	ldr	r3, [r3, #20]
2000129c:	b29b      	uxth	r3, r3
}
2000129e:	0018      	movs	r0, r3
200012a0:	46bd      	mov	sp, r7
200012a2:	b002      	add	sp, #8
200012a4:	bd80      	pop	{r7, pc}

200012a6 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
200012a6:	b580      	push	{r7, lr}
200012a8:	b082      	sub	sp, #8
200012aa:	af00      	add	r7, sp, #0
200012ac:	6078      	str	r0, [r7, #4]
200012ae:	000a      	movs	r2, r1
200012b0:	1cbb      	adds	r3, r7, #2
200012b2:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
200012b4:	687b      	ldr	r3, [r7, #4]
200012b6:	1cba      	adds	r2, r7, #2
200012b8:	8812      	ldrh	r2, [r2, #0]
200012ba:	831a      	strh	r2, [r3, #24]
}
200012bc:	46c0      	nop			; (mov r8, r8)
200012be:	46bd      	mov	sp, r7
200012c0:	b002      	add	sp, #8
200012c2:	bd80      	pop	{r7, pc}

200012c4 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
200012c4:	b580      	push	{r7, lr}
200012c6:	b082      	sub	sp, #8
200012c8:	af00      	add	r7, sp, #0
200012ca:	6078      	str	r0, [r7, #4]
200012cc:	000a      	movs	r2, r1
200012ce:	1cbb      	adds	r3, r7, #2
200012d0:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
200012d2:	687b      	ldr	r3, [r7, #4]
200012d4:	1cba      	adds	r2, r7, #2
200012d6:	8812      	ldrh	r2, [r2, #0]
200012d8:	835a      	strh	r2, [r3, #26]
}
200012da:	46c0      	nop			; (mov r8, r8)
200012dc:	46bd      	mov	sp, r7
200012de:	b002      	add	sp, #8
200012e0:	bd80      	pop	{r7, pc}

200012e2 <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
200012e2:	b580      	push	{r7, lr}
200012e4:	b082      	sub	sp, #8
200012e6:	af00      	add	r7, sp, #0
200012e8:	6078      	str	r0, [r7, #4]
200012ea:	0008      	movs	r0, r1
200012ec:	0011      	movs	r1, r2
200012ee:	1cbb      	adds	r3, r7, #2
200012f0:	1c02      	adds	r2, r0, #0
200012f2:	801a      	strh	r2, [r3, #0]
200012f4:	1c7b      	adds	r3, r7, #1
200012f6:	1c0a      	adds	r2, r1, #0
200012f8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
200012fa:	1c7b      	adds	r3, r7, #1
200012fc:	781b      	ldrb	r3, [r3, #0]
200012fe:	2b00      	cmp	r3, #0
20001300:	d004      	beq.n	2000130c <GPIO_WriteBit+0x2a>
  {
    GPIOx->BSRRL = GPIO_Pin;
20001302:	687b      	ldr	r3, [r7, #4]
20001304:	1cba      	adds	r2, r7, #2
20001306:	8812      	ldrh	r2, [r2, #0]
20001308:	831a      	strh	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
  }
}
2000130a:	e003      	b.n	20001314 <GPIO_WriteBit+0x32>
    GPIOx->BSRRH = GPIO_Pin ;
2000130c:	687b      	ldr	r3, [r7, #4]
2000130e:	1cba      	adds	r2, r7, #2
20001310:	8812      	ldrh	r2, [r2, #0]
20001312:	835a      	strh	r2, [r3, #26]
}
20001314:	46c0      	nop			; (mov r8, r8)
20001316:	46bd      	mov	sp, r7
20001318:	b002      	add	sp, #8
2000131a:	bd80      	pop	{r7, pc}

2000131c <GPIO_Write>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
2000131c:	b580      	push	{r7, lr}
2000131e:	b082      	sub	sp, #8
20001320:	af00      	add	r7, sp, #0
20001322:	6078      	str	r0, [r7, #4]
20001324:	000a      	movs	r2, r1
20001326:	1cbb      	adds	r3, r7, #2
20001328:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
2000132a:	1cbb      	adds	r3, r7, #2
2000132c:	881a      	ldrh	r2, [r3, #0]
2000132e:	687b      	ldr	r3, [r7, #4]
20001330:	615a      	str	r2, [r3, #20]
}
20001332:	46c0      	nop			; (mov r8, r8)
20001334:	46bd      	mov	sp, r7
20001336:	b002      	add	sp, #8
20001338:	bd80      	pop	{r7, pc}

2000133a <GPIO_ToggleBits>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
2000133a:	b580      	push	{r7, lr}
2000133c:	b082      	sub	sp, #8
2000133e:	af00      	add	r7, sp, #0
20001340:	6078      	str	r0, [r7, #4]
20001342:	000a      	movs	r2, r1
20001344:	1cbb      	adds	r3, r7, #2
20001346:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
20001348:	687b      	ldr	r3, [r7, #4]
2000134a:	695a      	ldr	r2, [r3, #20]
2000134c:	1cbb      	adds	r3, r7, #2
2000134e:	881b      	ldrh	r3, [r3, #0]
20001350:	405a      	eors	r2, r3
20001352:	687b      	ldr	r3, [r7, #4]
20001354:	615a      	str	r2, [r3, #20]
}
20001356:	46c0      	nop			; (mov r8, r8)
20001358:	46bd      	mov	sp, r7
2000135a:	b002      	add	sp, #8
2000135c:	bd80      	pop	{r7, pc}

2000135e <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
2000135e:	b580      	push	{r7, lr}
20001360:	b084      	sub	sp, #16
20001362:	af00      	add	r7, sp, #0
20001364:	6078      	str	r0, [r7, #4]
20001366:	0008      	movs	r0, r1
20001368:	0011      	movs	r1, r2
2000136a:	1cbb      	adds	r3, r7, #2
2000136c:	1c02      	adds	r2, r0, #0
2000136e:	801a      	strh	r2, [r3, #0]
20001370:	1c7b      	adds	r3, r7, #1
20001372:	1c0a      	adds	r2, r1, #0
20001374:	701a      	strb	r2, [r3, #0]
  uint32_t temp = 0x00;
20001376:	2300      	movs	r3, #0
20001378:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
2000137a:	2300      	movs	r3, #0
2000137c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
2000137e:	1c7b      	adds	r3, r7, #1
20001380:	781a      	ldrb	r2, [r3, #0]
20001382:	1cbb      	adds	r3, r7, #2
20001384:	881b      	ldrh	r3, [r3, #0]
20001386:	2107      	movs	r1, #7
20001388:	400b      	ands	r3, r1
2000138a:	009b      	lsls	r3, r3, #2
2000138c:	409a      	lsls	r2, r3
2000138e:	0013      	movs	r3, r2
20001390:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
20001392:	1cbb      	adds	r3, r7, #2
20001394:	881b      	ldrh	r3, [r3, #0]
20001396:	08db      	lsrs	r3, r3, #3
20001398:	b29b      	uxth	r3, r3
2000139a:	001a      	movs	r2, r3
2000139c:	687b      	ldr	r3, [r7, #4]
2000139e:	3208      	adds	r2, #8
200013a0:	0092      	lsls	r2, r2, #2
200013a2:	58d3      	ldr	r3, [r2, r3]
200013a4:	1cba      	adds	r2, r7, #2
200013a6:	8812      	ldrh	r2, [r2, #0]
200013a8:	2107      	movs	r1, #7
200013aa:	400a      	ands	r2, r1
200013ac:	0092      	lsls	r2, r2, #2
200013ae:	210f      	movs	r1, #15
200013b0:	4091      	lsls	r1, r2
200013b2:	000a      	movs	r2, r1
200013b4:	43d2      	mvns	r2, r2
200013b6:	1cb9      	adds	r1, r7, #2
200013b8:	8809      	ldrh	r1, [r1, #0]
200013ba:	08c9      	lsrs	r1, r1, #3
200013bc:	b289      	uxth	r1, r1
200013be:	0008      	movs	r0, r1
200013c0:	401a      	ands	r2, r3
200013c2:	0011      	movs	r1, r2
200013c4:	687b      	ldr	r3, [r7, #4]
200013c6:	0002      	movs	r2, r0
200013c8:	3208      	adds	r2, #8
200013ca:	0092      	lsls	r2, r2, #2
200013cc:	50d1      	str	r1, [r2, r3]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
200013ce:	1cbb      	adds	r3, r7, #2
200013d0:	881b      	ldrh	r3, [r3, #0]
200013d2:	08db      	lsrs	r3, r3, #3
200013d4:	b29b      	uxth	r3, r3
200013d6:	001a      	movs	r2, r3
200013d8:	687b      	ldr	r3, [r7, #4]
200013da:	3208      	adds	r2, #8
200013dc:	0092      	lsls	r2, r2, #2
200013de:	58d3      	ldr	r3, [r2, r3]
200013e0:	68fa      	ldr	r2, [r7, #12]
200013e2:	4313      	orrs	r3, r2
200013e4:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
200013e6:	1cbb      	adds	r3, r7, #2
200013e8:	881b      	ldrh	r3, [r3, #0]
200013ea:	08db      	lsrs	r3, r3, #3
200013ec:	b29b      	uxth	r3, r3
200013ee:	001a      	movs	r2, r3
200013f0:	687b      	ldr	r3, [r7, #4]
200013f2:	3208      	adds	r2, #8
200013f4:	0092      	lsls	r2, r2, #2
200013f6:	68b9      	ldr	r1, [r7, #8]
200013f8:	50d1      	str	r1, [r2, r3]
}
200013fa:	46c0      	nop			; (mov r8, r8)
200013fc:	46bd      	mov	sp, r7
200013fe:	b004      	add	sp, #16
20001400:	bd80      	pop	{r7, pc}
20001402:	46c0      	nop			; (mov r8, r8)

20001404 <out_char>:
    volatile unsigned short gtpr;
} USART;

#define USART1  ((USART *) 0x40011000) 

void out_char( char c ) {
20001404:	b580      	push	{r7, lr}
20001406:	b082      	sub	sp, #8
20001408:	af00      	add	r7, sp, #0
2000140a:	0002      	movs	r2, r0
2000140c:	1dfb      	adds	r3, r7, #7
2000140e:	701a      	strb	r2, [r3, #0]
    // wait until usart1 is ready
    while (( USART1->sr & 0x80) == 0);
20001410:	46c0      	nop			; (mov r8, r8)
20001412:	4b0b      	ldr	r3, [pc, #44]	; (20001440 <out_char+0x3c>)
20001414:	881b      	ldrh	r3, [r3, #0]
20001416:	b29b      	uxth	r3, r3
20001418:	001a      	movs	r2, r3
2000141a:	2380      	movs	r3, #128	; 0x80
2000141c:	4013      	ands	r3, r2
2000141e:	d0f8      	beq.n	20001412 <out_char+0xe>
    // write character to usart1 
    USART1->dr = (unsigned short) c;
20001420:	4a07      	ldr	r2, [pc, #28]	; (20001440 <out_char+0x3c>)
20001422:	1dfb      	adds	r3, r7, #7
20001424:	781b      	ldrb	r3, [r3, #0]
20001426:	b29b      	uxth	r3, r3
20001428:	8093      	strh	r3, [r2, #4]
    if( c == '\n')
2000142a:	1dfb      	adds	r3, r7, #7
2000142c:	781b      	ldrb	r3, [r3, #0]
2000142e:	2b0a      	cmp	r3, #10
20001430:	d102      	bne.n	20001438 <out_char+0x34>
        out_char('\r');
20001432:	200d      	movs	r0, #13
20001434:	f7ff ffe6 	bl	20001404 <out_char>
}
20001438:	46c0      	nop			; (mov r8, r8)
2000143a:	46bd      	mov	sp, r7
2000143c:	b002      	add	sp, #8
2000143e:	bd80      	pop	{r7, pc}
20001440:	40011000 	andmi	r1, r1, r0

20001444 <test_char>:

char test_char(void) {
20001444:	b580      	push	{r7, lr}
20001446:	af00      	add	r7, sp, #0
    // if character arrived at usart1, return it
    if( (USART1->sr & 0x20)==0)
20001448:	4b07      	ldr	r3, [pc, #28]	; (20001468 <test_char+0x24>)
2000144a:	881b      	ldrh	r3, [r3, #0]
2000144c:	b29b      	uxth	r3, r3
2000144e:	001a      	movs	r2, r3
20001450:	2320      	movs	r3, #32
20001452:	4013      	ands	r3, r2
20001454:	d101      	bne.n	2000145a <test_char+0x16>
        return 0;
20001456:	2300      	movs	r3, #0
20001458:	e003      	b.n	20001462 <test_char+0x1e>
    return (char) USART1->dr;
2000145a:	4b03      	ldr	r3, [pc, #12]	; (20001468 <test_char+0x24>)
2000145c:	889b      	ldrh	r3, [r3, #4]
2000145e:	b29b      	uxth	r3, r3
20001460:	b2db      	uxtb	r3, r3
}
20001462:	0018      	movs	r0, r3
20001464:	46bd      	mov	sp, r7
20001466:	bd80      	pop	{r7, pc}
20001468:	40011000 	andmi	r1, r1, r0

2000146c <_getchar>:

char _getchar(void) {
2000146c:	b580      	push	{r7, lr}
2000146e:	af00      	add	r7, sp, #0
    // wait until character arrived at usart1, then return it
    while( (USART1->sr & 0x20)==0);
20001470:	46c0      	nop			; (mov r8, r8)
20001472:	4b07      	ldr	r3, [pc, #28]	; (20001490 <_getchar+0x24>)
20001474:	881b      	ldrh	r3, [r3, #0]
20001476:	b29b      	uxth	r3, r3
20001478:	001a      	movs	r2, r3
2000147a:	2320      	movs	r3, #32
2000147c:	4013      	ands	r3, r2
2000147e:	d0f8      	beq.n	20001472 <_getchar+0x6>
    return (char) USART1->dr;
20001480:	4b03      	ldr	r3, [pc, #12]	; (20001490 <_getchar+0x24>)
20001482:	889b      	ldrh	r3, [r3, #4]
20001484:	b29b      	uxth	r3, r3
20001486:	b2db      	uxtb	r3, r3
}
20001488:	0018      	movs	r0, r3
2000148a:	46bd      	mov	sp, r7
2000148c:	bd80      	pop	{r7, pc}
2000148e:	46c0      	nop			; (mov r8, r8)
20001490:	40011000 	andmi	r1, r1, r0

20001494 <print>:

void print(char* s){
20001494:	b580      	push	{r7, lr}
20001496:	b082      	sub	sp, #8
20001498:	af00      	add	r7, sp, #0
2000149a:	6078      	str	r0, [r7, #4]
    while (*s != '\0')
2000149c:	e006      	b.n	200014ac <print+0x18>
        out_char(*(s++));
2000149e:	687b      	ldr	r3, [r7, #4]
200014a0:	1c5a      	adds	r2, r3, #1
200014a2:	607a      	str	r2, [r7, #4]
200014a4:	781b      	ldrb	r3, [r3, #0]
200014a6:	0018      	movs	r0, r3
200014a8:	f7ff ffac 	bl	20001404 <out_char>
    while (*s != '\0')
200014ac:	687b      	ldr	r3, [r7, #4]
200014ae:	781b      	ldrb	r3, [r3, #0]
200014b0:	2b00      	cmp	r3, #0
200014b2:	d1f4      	bne.n	2000149e <print+0xa>
200014b4:	46c0      	nop			; (mov r8, r8)
200014b6:	46c0      	nop			; (mov r8, r8)
200014b8:	46bd      	mov	sp, r7
200014ba:	b002      	add	sp, #8
200014bc:	bd80      	pop	{r7, pc}
200014be:	46c0      	nop			; (mov r8, r8)

200014c0 <TIM_DeInit>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval None

  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
200014c0:	b580      	push	{r7, lr}
200014c2:	b082      	sub	sp, #8
200014c4:	af00      	add	r7, sp, #0
200014c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
200014c8:	687b      	ldr	r3, [r7, #4]
200014ca:	4a64      	ldr	r2, [pc, #400]	; (2000165c <TIM_DeInit+0x19c>)
200014cc:	4293      	cmp	r3, r2
200014ce:	d108      	bne.n	200014e2 <TIM_DeInit+0x22>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
200014d0:	2101      	movs	r1, #1
200014d2:	2001      	movs	r0, #1
200014d4:	f7ff fa92 	bl	200009fc <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
200014d8:	2100      	movs	r1, #0
200014da:	2001      	movs	r0, #1
200014dc:	f7ff fa8e 	bl	200009fc <RCC_APB2PeriphResetCmd>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
200014e0:	e0b8      	b.n	20001654 <TIM_DeInit+0x194>
  else if (TIMx == TIM2) 
200014e2:	687a      	ldr	r2, [r7, #4]
200014e4:	2380      	movs	r3, #128	; 0x80
200014e6:	05db      	lsls	r3, r3, #23
200014e8:	429a      	cmp	r2, r3
200014ea:	d108      	bne.n	200014fe <TIM_DeInit+0x3e>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
200014ec:	2101      	movs	r1, #1
200014ee:	2001      	movs	r0, #1
200014f0:	f7ff fa64 	bl	200009bc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
200014f4:	2100      	movs	r1, #0
200014f6:	2001      	movs	r0, #1
200014f8:	f7ff fa60 	bl	200009bc <RCC_APB1PeriphResetCmd>
}
200014fc:	e0aa      	b.n	20001654 <TIM_DeInit+0x194>
  else if (TIMx == TIM3)
200014fe:	687b      	ldr	r3, [r7, #4]
20001500:	4a57      	ldr	r2, [pc, #348]	; (20001660 <TIM_DeInit+0x1a0>)
20001502:	4293      	cmp	r3, r2
20001504:	d108      	bne.n	20001518 <TIM_DeInit+0x58>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
20001506:	2101      	movs	r1, #1
20001508:	2002      	movs	r0, #2
2000150a:	f7ff fa57 	bl	200009bc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
2000150e:	2100      	movs	r1, #0
20001510:	2002      	movs	r0, #2
20001512:	f7ff fa53 	bl	200009bc <RCC_APB1PeriphResetCmd>
}
20001516:	e09d      	b.n	20001654 <TIM_DeInit+0x194>
  else if (TIMx == TIM4)
20001518:	687b      	ldr	r3, [r7, #4]
2000151a:	4a52      	ldr	r2, [pc, #328]	; (20001664 <TIM_DeInit+0x1a4>)
2000151c:	4293      	cmp	r3, r2
2000151e:	d108      	bne.n	20001532 <TIM_DeInit+0x72>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
20001520:	2101      	movs	r1, #1
20001522:	2004      	movs	r0, #4
20001524:	f7ff fa4a 	bl	200009bc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
20001528:	2100      	movs	r1, #0
2000152a:	2004      	movs	r0, #4
2000152c:	f7ff fa46 	bl	200009bc <RCC_APB1PeriphResetCmd>
}
20001530:	e090      	b.n	20001654 <TIM_DeInit+0x194>
  else if (TIMx == TIM5)
20001532:	687b      	ldr	r3, [r7, #4]
20001534:	4a4c      	ldr	r2, [pc, #304]	; (20001668 <TIM_DeInit+0x1a8>)
20001536:	4293      	cmp	r3, r2
20001538:	d108      	bne.n	2000154c <TIM_DeInit+0x8c>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
2000153a:	2101      	movs	r1, #1
2000153c:	2008      	movs	r0, #8
2000153e:	f7ff fa3d 	bl	200009bc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
20001542:	2100      	movs	r1, #0
20001544:	2008      	movs	r0, #8
20001546:	f7ff fa39 	bl	200009bc <RCC_APB1PeriphResetCmd>
}
2000154a:	e083      	b.n	20001654 <TIM_DeInit+0x194>
  else if (TIMx == TIM6)  
2000154c:	687b      	ldr	r3, [r7, #4]
2000154e:	4a47      	ldr	r2, [pc, #284]	; (2000166c <TIM_DeInit+0x1ac>)
20001550:	4293      	cmp	r3, r2
20001552:	d108      	bne.n	20001566 <TIM_DeInit+0xa6>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
20001554:	2101      	movs	r1, #1
20001556:	2010      	movs	r0, #16
20001558:	f7ff fa30 	bl	200009bc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
2000155c:	2100      	movs	r1, #0
2000155e:	2010      	movs	r0, #16
20001560:	f7ff fa2c 	bl	200009bc <RCC_APB1PeriphResetCmd>
}
20001564:	e076      	b.n	20001654 <TIM_DeInit+0x194>
  else if (TIMx == TIM7)
20001566:	687b      	ldr	r3, [r7, #4]
20001568:	4a41      	ldr	r2, [pc, #260]	; (20001670 <TIM_DeInit+0x1b0>)
2000156a:	4293      	cmp	r3, r2
2000156c:	d108      	bne.n	20001580 <TIM_DeInit+0xc0>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
2000156e:	2101      	movs	r1, #1
20001570:	2020      	movs	r0, #32
20001572:	f7ff fa23 	bl	200009bc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
20001576:	2100      	movs	r1, #0
20001578:	2020      	movs	r0, #32
2000157a:	f7ff fa1f 	bl	200009bc <RCC_APB1PeriphResetCmd>
}
2000157e:	e069      	b.n	20001654 <TIM_DeInit+0x194>
  else if (TIMx == TIM8)
20001580:	687b      	ldr	r3, [r7, #4]
20001582:	4a3c      	ldr	r2, [pc, #240]	; (20001674 <TIM_DeInit+0x1b4>)
20001584:	4293      	cmp	r3, r2
20001586:	d108      	bne.n	2000159a <TIM_DeInit+0xda>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
20001588:	2101      	movs	r1, #1
2000158a:	2002      	movs	r0, #2
2000158c:	f7ff fa36 	bl	200009fc <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
20001590:	2100      	movs	r1, #0
20001592:	2002      	movs	r0, #2
20001594:	f7ff fa32 	bl	200009fc <RCC_APB2PeriphResetCmd>
}
20001598:	e05c      	b.n	20001654 <TIM_DeInit+0x194>
  else if (TIMx == TIM9)
2000159a:	687b      	ldr	r3, [r7, #4]
2000159c:	4a36      	ldr	r2, [pc, #216]	; (20001678 <TIM_DeInit+0x1b8>)
2000159e:	4293      	cmp	r3, r2
200015a0:	d10c      	bne.n	200015bc <TIM_DeInit+0xfc>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
200015a2:	2380      	movs	r3, #128	; 0x80
200015a4:	025b      	lsls	r3, r3, #9
200015a6:	2101      	movs	r1, #1
200015a8:	0018      	movs	r0, r3
200015aa:	f7ff fa27 	bl	200009fc <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
200015ae:	2380      	movs	r3, #128	; 0x80
200015b0:	025b      	lsls	r3, r3, #9
200015b2:	2100      	movs	r1, #0
200015b4:	0018      	movs	r0, r3
200015b6:	f7ff fa21 	bl	200009fc <RCC_APB2PeriphResetCmd>
}
200015ba:	e04b      	b.n	20001654 <TIM_DeInit+0x194>
  else if (TIMx == TIM10)
200015bc:	687b      	ldr	r3, [r7, #4]
200015be:	4a2f      	ldr	r2, [pc, #188]	; (2000167c <TIM_DeInit+0x1bc>)
200015c0:	4293      	cmp	r3, r2
200015c2:	d10c      	bne.n	200015de <TIM_DeInit+0x11e>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
200015c4:	2380      	movs	r3, #128	; 0x80
200015c6:	029b      	lsls	r3, r3, #10
200015c8:	2101      	movs	r1, #1
200015ca:	0018      	movs	r0, r3
200015cc:	f7ff fa16 	bl	200009fc <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
200015d0:	2380      	movs	r3, #128	; 0x80
200015d2:	029b      	lsls	r3, r3, #10
200015d4:	2100      	movs	r1, #0
200015d6:	0018      	movs	r0, r3
200015d8:	f7ff fa10 	bl	200009fc <RCC_APB2PeriphResetCmd>
}
200015dc:	e03a      	b.n	20001654 <TIM_DeInit+0x194>
  else if (TIMx == TIM11) 
200015de:	687b      	ldr	r3, [r7, #4]
200015e0:	4a27      	ldr	r2, [pc, #156]	; (20001680 <TIM_DeInit+0x1c0>)
200015e2:	4293      	cmp	r3, r2
200015e4:	d10c      	bne.n	20001600 <TIM_DeInit+0x140>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
200015e6:	2380      	movs	r3, #128	; 0x80
200015e8:	02db      	lsls	r3, r3, #11
200015ea:	2101      	movs	r1, #1
200015ec:	0018      	movs	r0, r3
200015ee:	f7ff fa05 	bl	200009fc <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
200015f2:	2380      	movs	r3, #128	; 0x80
200015f4:	02db      	lsls	r3, r3, #11
200015f6:	2100      	movs	r1, #0
200015f8:	0018      	movs	r0, r3
200015fa:	f7ff f9ff 	bl	200009fc <RCC_APB2PeriphResetCmd>
}
200015fe:	e029      	b.n	20001654 <TIM_DeInit+0x194>
  else if (TIMx == TIM12)
20001600:	687b      	ldr	r3, [r7, #4]
20001602:	4a20      	ldr	r2, [pc, #128]	; (20001684 <TIM_DeInit+0x1c4>)
20001604:	4293      	cmp	r3, r2
20001606:	d108      	bne.n	2000161a <TIM_DeInit+0x15a>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
20001608:	2101      	movs	r1, #1
2000160a:	2040      	movs	r0, #64	; 0x40
2000160c:	f7ff f9d6 	bl	200009bc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
20001610:	2100      	movs	r1, #0
20001612:	2040      	movs	r0, #64	; 0x40
20001614:	f7ff f9d2 	bl	200009bc <RCC_APB1PeriphResetCmd>
}
20001618:	e01c      	b.n	20001654 <TIM_DeInit+0x194>
  else if (TIMx == TIM13) 
2000161a:	687b      	ldr	r3, [r7, #4]
2000161c:	4a1a      	ldr	r2, [pc, #104]	; (20001688 <TIM_DeInit+0x1c8>)
2000161e:	4293      	cmp	r3, r2
20001620:	d108      	bne.n	20001634 <TIM_DeInit+0x174>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
20001622:	2101      	movs	r1, #1
20001624:	2080      	movs	r0, #128	; 0x80
20001626:	f7ff f9c9 	bl	200009bc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
2000162a:	2100      	movs	r1, #0
2000162c:	2080      	movs	r0, #128	; 0x80
2000162e:	f7ff f9c5 	bl	200009bc <RCC_APB1PeriphResetCmd>
}
20001632:	e00f      	b.n	20001654 <TIM_DeInit+0x194>
    if (TIMx == TIM14) 
20001634:	687b      	ldr	r3, [r7, #4]
20001636:	4a15      	ldr	r2, [pc, #84]	; (2000168c <TIM_DeInit+0x1cc>)
20001638:	4293      	cmp	r3, r2
2000163a:	d10b      	bne.n	20001654 <TIM_DeInit+0x194>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
2000163c:	2380      	movs	r3, #128	; 0x80
2000163e:	005b      	lsls	r3, r3, #1
20001640:	2101      	movs	r1, #1
20001642:	0018      	movs	r0, r3
20001644:	f7ff f9ba 	bl	200009bc <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
20001648:	2380      	movs	r3, #128	; 0x80
2000164a:	005b      	lsls	r3, r3, #1
2000164c:	2100      	movs	r1, #0
2000164e:	0018      	movs	r0, r3
20001650:	f7ff f9b4 	bl	200009bc <RCC_APB1PeriphResetCmd>
}
20001654:	46c0      	nop			; (mov r8, r8)
20001656:	46bd      	mov	sp, r7
20001658:	b002      	add	sp, #8
2000165a:	bd80      	pop	{r7, pc}
2000165c:	40010000 	andmi	r0, r1, r0
20001660:	40000400 	andmi	r0, r0, r0, lsl #8
20001664:	40000800 	andmi	r0, r0, r0, lsl #16
20001668:	40000c00 	andmi	r0, r0, r0, lsl #24
2000166c:	40001000 	andmi	r1, r0, r0
20001670:	40001400 	andmi	r1, r0, r0, lsl #8
20001674:	40010400 	andmi	r0, r1, r0, lsl #8
20001678:	40014000 	andmi	r4, r1, r0
2000167c:	40014400 	andmi	r4, r1, r0, lsl #8
20001680:	40014800 	andmi	r4, r1, r0, lsl #16
20001684:	40001800 	andmi	r1, r0, r0, lsl #16
20001688:	40001c00 	andmi	r1, r0, r0, lsl #24
2000168c:	40002000 	andmi	r2, r0, r0

20001690 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
20001690:	b580      	push	{r7, lr}
20001692:	b084      	sub	sp, #16
20001694:	af00      	add	r7, sp, #0
20001696:	6078      	str	r0, [r7, #4]
20001698:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
2000169a:	210e      	movs	r1, #14
2000169c:	187b      	adds	r3, r7, r1
2000169e:	2200      	movs	r2, #0
200016a0:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
200016a2:	187b      	adds	r3, r7, r1
200016a4:	687a      	ldr	r2, [r7, #4]
200016a6:	8812      	ldrh	r2, [r2, #0]
200016a8:	801a      	strh	r2, [r3, #0]

  if((TIMx == TIM1) || (TIMx == TIM8)||
200016aa:	687b      	ldr	r3, [r7, #4]
200016ac:	4a2e      	ldr	r2, [pc, #184]	; (20001768 <TIM_TimeBaseInit+0xd8>)
200016ae:	4293      	cmp	r3, r2
200016b0:	d014      	beq.n	200016dc <TIM_TimeBaseInit+0x4c>
200016b2:	687b      	ldr	r3, [r7, #4]
200016b4:	4a2d      	ldr	r2, [pc, #180]	; (2000176c <TIM_TimeBaseInit+0xdc>)
200016b6:	4293      	cmp	r3, r2
200016b8:	d010      	beq.n	200016dc <TIM_TimeBaseInit+0x4c>
200016ba:	687a      	ldr	r2, [r7, #4]
200016bc:	2380      	movs	r3, #128	; 0x80
200016be:	05db      	lsls	r3, r3, #23
200016c0:	429a      	cmp	r2, r3
200016c2:	d00b      	beq.n	200016dc <TIM_TimeBaseInit+0x4c>
     (TIMx == TIM2) || (TIMx == TIM3)||
200016c4:	687b      	ldr	r3, [r7, #4]
200016c6:	4a2a      	ldr	r2, [pc, #168]	; (20001770 <TIM_TimeBaseInit+0xe0>)
200016c8:	4293      	cmp	r3, r2
200016ca:	d007      	beq.n	200016dc <TIM_TimeBaseInit+0x4c>
200016cc:	687b      	ldr	r3, [r7, #4]
200016ce:	4a29      	ldr	r2, [pc, #164]	; (20001774 <TIM_TimeBaseInit+0xe4>)
200016d0:	4293      	cmp	r3, r2
200016d2:	d003      	beq.n	200016dc <TIM_TimeBaseInit+0x4c>
     (TIMx == TIM4) || (TIMx == TIM5)) 
200016d4:	687b      	ldr	r3, [r7, #4]
200016d6:	4a28      	ldr	r2, [pc, #160]	; (20001778 <TIM_TimeBaseInit+0xe8>)
200016d8:	4293      	cmp	r3, r2
200016da:	d10d      	bne.n	200016f8 <TIM_TimeBaseInit+0x68>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
200016dc:	200e      	movs	r0, #14
200016de:	183b      	adds	r3, r7, r0
200016e0:	183a      	adds	r2, r7, r0
200016e2:	8812      	ldrh	r2, [r2, #0]
200016e4:	2170      	movs	r1, #112	; 0x70
200016e6:	438a      	bics	r2, r1
200016e8:	801a      	strh	r2, [r3, #0]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
200016ea:	683b      	ldr	r3, [r7, #0]
200016ec:	8859      	ldrh	r1, [r3, #2]
200016ee:	183b      	adds	r3, r7, r0
200016f0:	183a      	adds	r2, r7, r0
200016f2:	8812      	ldrh	r2, [r2, #0]
200016f4:	430a      	orrs	r2, r1
200016f6:	801a      	strh	r2, [r3, #0]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
200016f8:	687b      	ldr	r3, [r7, #4]
200016fa:	4a20      	ldr	r2, [pc, #128]	; (2000177c <TIM_TimeBaseInit+0xec>)
200016fc:	4293      	cmp	r3, r2
200016fe:	d011      	beq.n	20001724 <TIM_TimeBaseInit+0x94>
20001700:	687b      	ldr	r3, [r7, #4]
20001702:	4a1f      	ldr	r2, [pc, #124]	; (20001780 <TIM_TimeBaseInit+0xf0>)
20001704:	4293      	cmp	r3, r2
20001706:	d00d      	beq.n	20001724 <TIM_TimeBaseInit+0x94>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
20001708:	200e      	movs	r0, #14
2000170a:	183b      	adds	r3, r7, r0
2000170c:	183a      	adds	r2, r7, r0
2000170e:	8812      	ldrh	r2, [r2, #0]
20001710:	491c      	ldr	r1, [pc, #112]	; (20001784 <TIM_TimeBaseInit+0xf4>)
20001712:	400a      	ands	r2, r1
20001714:	801a      	strh	r2, [r3, #0]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
20001716:	683b      	ldr	r3, [r7, #0]
20001718:	8919      	ldrh	r1, [r3, #8]
2000171a:	183b      	adds	r3, r7, r0
2000171c:	183a      	adds	r2, r7, r0
2000171e:	8812      	ldrh	r2, [r2, #0]
20001720:	430a      	orrs	r2, r1
20001722:	801a      	strh	r2, [r3, #0]
  }

  TIMx->CR1 = tmpcr1;
20001724:	687b      	ldr	r3, [r7, #4]
20001726:	220e      	movs	r2, #14
20001728:	18ba      	adds	r2, r7, r2
2000172a:	8812      	ldrh	r2, [r2, #0]
2000172c:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
2000172e:	683b      	ldr	r3, [r7, #0]
20001730:	685a      	ldr	r2, [r3, #4]
20001732:	687b      	ldr	r3, [r7, #4]
20001734:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
20001736:	683b      	ldr	r3, [r7, #0]
20001738:	881a      	ldrh	r2, [r3, #0]
2000173a:	687b      	ldr	r3, [r7, #4]
2000173c:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
2000173e:	687b      	ldr	r3, [r7, #4]
20001740:	4a09      	ldr	r2, [pc, #36]	; (20001768 <TIM_TimeBaseInit+0xd8>)
20001742:	4293      	cmp	r3, r2
20001744:	d003      	beq.n	2000174e <TIM_TimeBaseInit+0xbe>
20001746:	687b      	ldr	r3, [r7, #4]
20001748:	4a08      	ldr	r2, [pc, #32]	; (2000176c <TIM_TimeBaseInit+0xdc>)
2000174a:	4293      	cmp	r3, r2
2000174c:	d104      	bne.n	20001758 <TIM_TimeBaseInit+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
2000174e:	683b      	ldr	r3, [r7, #0]
20001750:	7a9b      	ldrb	r3, [r3, #10]
20001752:	b29a      	uxth	r2, r3
20001754:	687b      	ldr	r3, [r7, #4]
20001756:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
20001758:	687b      	ldr	r3, [r7, #4]
2000175a:	2201      	movs	r2, #1
2000175c:	829a      	strh	r2, [r3, #20]
}
2000175e:	46c0      	nop			; (mov r8, r8)
20001760:	46bd      	mov	sp, r7
20001762:	b004      	add	sp, #16
20001764:	bd80      	pop	{r7, pc}
20001766:	46c0      	nop			; (mov r8, r8)
20001768:	40010000 	andmi	r0, r1, r0
2000176c:	40010400 	andmi	r0, r1, r0, lsl #8
20001770:	40000400 	andmi	r0, r0, r0, lsl #8
20001774:	40000800 	andmi	r0, r0, r0, lsl #16
20001778:	40000c00 	andmi	r0, r0, r0, lsl #24
2000177c:	40001000 	andmi	r1, r0, r0
20001780:	40001400 	andmi	r1, r0, r0, lsl #8
20001784:	fffffcff 			; <UNDEFINED> instruction: 0xfffffcff

20001788 <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
20001788:	b580      	push	{r7, lr}
2000178a:	b082      	sub	sp, #8
2000178c:	af00      	add	r7, sp, #0
2000178e:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
20001790:	687b      	ldr	r3, [r7, #4]
20001792:	2201      	movs	r2, #1
20001794:	4252      	negs	r2, r2
20001796:	605a      	str	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
20001798:	687b      	ldr	r3, [r7, #4]
2000179a:	2200      	movs	r2, #0
2000179c:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
2000179e:	687b      	ldr	r3, [r7, #4]
200017a0:	2200      	movs	r2, #0
200017a2:	811a      	strh	r2, [r3, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
200017a4:	687b      	ldr	r3, [r7, #4]
200017a6:	2200      	movs	r2, #0
200017a8:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
200017aa:	687b      	ldr	r3, [r7, #4]
200017ac:	2200      	movs	r2, #0
200017ae:	729a      	strb	r2, [r3, #10]
}
200017b0:	46c0      	nop			; (mov r8, r8)
200017b2:	46bd      	mov	sp, r7
200017b4:	b002      	add	sp, #8
200017b6:	bd80      	pop	{r7, pc}

200017b8 <TIM_PrescalerConfig>:
  *            @arg TIM_PSCReloadMode_Update: The Prescaler is loaded at the update event.
  *            @arg TIM_PSCReloadMode_Immediate: The Prescaler is loaded immediately.
  * @retval None
  */
void TIM_PrescalerConfig(TIM_TypeDef* TIMx, uint16_t Prescaler, uint16_t TIM_PSCReloadMode)
{
200017b8:	b580      	push	{r7, lr}
200017ba:	b082      	sub	sp, #8
200017bc:	af00      	add	r7, sp, #0
200017be:	6078      	str	r0, [r7, #4]
200017c0:	0008      	movs	r0, r1
200017c2:	0011      	movs	r1, r2
200017c4:	1cbb      	adds	r3, r7, #2
200017c6:	1c02      	adds	r2, r0, #0
200017c8:	801a      	strh	r2, [r3, #0]
200017ca:	003b      	movs	r3, r7
200017cc:	1c0a      	adds	r2, r1, #0
200017ce:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
200017d0:	687b      	ldr	r3, [r7, #4]
200017d2:	1cba      	adds	r2, r7, #2
200017d4:	8812      	ldrh	r2, [r2, #0]
200017d6:	851a      	strh	r2, [r3, #40]	; 0x28
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
200017d8:	687b      	ldr	r3, [r7, #4]
200017da:	003a      	movs	r2, r7
200017dc:	8812      	ldrh	r2, [r2, #0]
200017de:	829a      	strh	r2, [r3, #20]
}
200017e0:	46c0      	nop			; (mov r8, r8)
200017e2:	46bd      	mov	sp, r7
200017e4:	b002      	add	sp, #8
200017e6:	bd80      	pop	{r7, pc}

200017e8 <TIM_CounterModeConfig>:
  *            @arg TIM_CounterMode_CenterAligned2: TIM Center Aligned Mode2
  *            @arg TIM_CounterMode_CenterAligned3: TIM Center Aligned Mode3
  * @retval None
  */
void TIM_CounterModeConfig(TIM_TypeDef* TIMx, uint16_t TIM_CounterMode)
{
200017e8:	b580      	push	{r7, lr}
200017ea:	b084      	sub	sp, #16
200017ec:	af00      	add	r7, sp, #0
200017ee:	6078      	str	r0, [r7, #4]
200017f0:	000a      	movs	r2, r1
200017f2:	1cbb      	adds	r3, r7, #2
200017f4:	801a      	strh	r2, [r3, #0]
  uint16_t tmpcr1 = 0;
200017f6:	200e      	movs	r0, #14
200017f8:	183b      	adds	r3, r7, r0
200017fa:	2200      	movs	r2, #0
200017fc:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));

  tmpcr1 = TIMx->CR1;
200017fe:	183b      	adds	r3, r7, r0
20001800:	687a      	ldr	r2, [r7, #4]
20001802:	8812      	ldrh	r2, [r2, #0]
20001804:	801a      	strh	r2, [r3, #0]

  /* Reset the CMS and DIR Bits */
  tmpcr1 &= (uint16_t)~(TIM_CR1_DIR | TIM_CR1_CMS);
20001806:	183b      	adds	r3, r7, r0
20001808:	183a      	adds	r2, r7, r0
2000180a:	8812      	ldrh	r2, [r2, #0]
2000180c:	2170      	movs	r1, #112	; 0x70
2000180e:	438a      	bics	r2, r1
20001810:	801a      	strh	r2, [r3, #0]

  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
20001812:	183b      	adds	r3, r7, r0
20001814:	1839      	adds	r1, r7, r0
20001816:	1cba      	adds	r2, r7, #2
20001818:	8809      	ldrh	r1, [r1, #0]
2000181a:	8812      	ldrh	r2, [r2, #0]
2000181c:	430a      	orrs	r2, r1
2000181e:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
20001820:	687b      	ldr	r3, [r7, #4]
20001822:	183a      	adds	r2, r7, r0
20001824:	8812      	ldrh	r2, [r2, #0]
20001826:	801a      	strh	r2, [r3, #0]
}
20001828:	46c0      	nop			; (mov r8, r8)
2000182a:	46bd      	mov	sp, r7
2000182c:	b004      	add	sp, #16
2000182e:	bd80      	pop	{r7, pc}

20001830 <TIM_SetCounter>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @param  Counter: specifies the Counter register new value.
  * @retval None
  */
void TIM_SetCounter(TIM_TypeDef* TIMx, uint32_t Counter)
{
20001830:	b580      	push	{r7, lr}
20001832:	b082      	sub	sp, #8
20001834:	af00      	add	r7, sp, #0
20001836:	6078      	str	r0, [r7, #4]
20001838:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Counter Register value */
  TIMx->CNT = Counter;
2000183a:	687b      	ldr	r3, [r7, #4]
2000183c:	683a      	ldr	r2, [r7, #0]
2000183e:	625a      	str	r2, [r3, #36]	; 0x24
}
20001840:	46c0      	nop			; (mov r8, r8)
20001842:	46bd      	mov	sp, r7
20001844:	b002      	add	sp, #8
20001846:	bd80      	pop	{r7, pc}

20001848 <TIM_SetAutoreload>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @param  Autoreload: specifies the Autoreload register new value.
  * @retval None
  */
void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint32_t Autoreload)
{
20001848:	b580      	push	{r7, lr}
2000184a:	b082      	sub	sp, #8
2000184c:	af00      	add	r7, sp, #0
2000184e:	6078      	str	r0, [r7, #4]
20001850:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
20001852:	687b      	ldr	r3, [r7, #4]
20001854:	683a      	ldr	r2, [r7, #0]
20001856:	62da      	str	r2, [r3, #44]	; 0x2c
}
20001858:	46c0      	nop			; (mov r8, r8)
2000185a:	46bd      	mov	sp, r7
2000185c:	b002      	add	sp, #8
2000185e:	bd80      	pop	{r7, pc}

20001860 <TIM_GetCounter>:
  * @brief  Gets the TIMx Counter value.
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval Counter Register value
  */
uint32_t TIM_GetCounter(TIM_TypeDef* TIMx)
{
20001860:	b580      	push	{r7, lr}
20001862:	b082      	sub	sp, #8
20001864:	af00      	add	r7, sp, #0
20001866:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Counter Register value */
  return TIMx->CNT;
20001868:	687b      	ldr	r3, [r7, #4]
2000186a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
2000186c:	0018      	movs	r0, r3
2000186e:	46bd      	mov	sp, r7
20001870:	b002      	add	sp, #8
20001872:	bd80      	pop	{r7, pc}

20001874 <TIM_GetPrescaler>:
  * @brief  Gets the TIMx Prescaler value.
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval Prescaler Register value.
  */
uint16_t TIM_GetPrescaler(TIM_TypeDef* TIMx)
{
20001874:	b580      	push	{r7, lr}
20001876:	b082      	sub	sp, #8
20001878:	af00      	add	r7, sp, #0
2000187a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Prescaler Register value */
  return TIMx->PSC;
2000187c:	687b      	ldr	r3, [r7, #4]
2000187e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
20001880:	b29b      	uxth	r3, r3
}
20001882:	0018      	movs	r0, r3
20001884:	46bd      	mov	sp, r7
20001886:	b002      	add	sp, #8
20001888:	bd80      	pop	{r7, pc}

2000188a <TIM_UpdateDisableConfig>:
  * @param  NewState: new state of the TIMx UDIS bit
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_UpdateDisableConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
2000188a:	b580      	push	{r7, lr}
2000188c:	b082      	sub	sp, #8
2000188e:	af00      	add	r7, sp, #0
20001890:	6078      	str	r0, [r7, #4]
20001892:	000a      	movs	r2, r1
20001894:	1cfb      	adds	r3, r7, #3
20001896:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20001898:	1cfb      	adds	r3, r7, #3
2000189a:	781b      	ldrb	r3, [r3, #0]
2000189c:	2b00      	cmp	r3, #0
2000189e:	d008      	beq.n	200018b2 <TIM_UpdateDisableConfig+0x28>
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
200018a0:	687b      	ldr	r3, [r7, #4]
200018a2:	881b      	ldrh	r3, [r3, #0]
200018a4:	b29b      	uxth	r3, r3
200018a6:	2202      	movs	r2, #2
200018a8:	4313      	orrs	r3, r2
200018aa:	b29a      	uxth	r2, r3
200018ac:	687b      	ldr	r3, [r7, #4]
200018ae:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_UDIS;
  }
}
200018b0:	e007      	b.n	200018c2 <TIM_UpdateDisableConfig+0x38>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_UDIS;
200018b2:	687b      	ldr	r3, [r7, #4]
200018b4:	881b      	ldrh	r3, [r3, #0]
200018b6:	b29b      	uxth	r3, r3
200018b8:	2202      	movs	r2, #2
200018ba:	4393      	bics	r3, r2
200018bc:	b29a      	uxth	r2, r3
200018be:	687b      	ldr	r3, [r7, #4]
200018c0:	801a      	strh	r2, [r3, #0]
}
200018c2:	46c0      	nop			; (mov r8, r8)
200018c4:	46bd      	mov	sp, r7
200018c6:	b002      	add	sp, #8
200018c8:	bd80      	pop	{r7, pc}

200018ca <TIM_UpdateRequestConfig>:
  *                 generation through the slave mode controller.
  *            @arg TIM_UpdateSource_Regular: Source of update is counter overflow/underflow.
  * @retval None
  */
void TIM_UpdateRequestConfig(TIM_TypeDef* TIMx, uint16_t TIM_UpdateSource)
{
200018ca:	b580      	push	{r7, lr}
200018cc:	b082      	sub	sp, #8
200018ce:	af00      	add	r7, sp, #0
200018d0:	6078      	str	r0, [r7, #4]
200018d2:	000a      	movs	r2, r1
200018d4:	1cbb      	adds	r3, r7, #2
200018d6:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
200018d8:	1cbb      	adds	r3, r7, #2
200018da:	881b      	ldrh	r3, [r3, #0]
200018dc:	2b00      	cmp	r3, #0
200018de:	d008      	beq.n	200018f2 <TIM_UpdateRequestConfig+0x28>
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
200018e0:	687b      	ldr	r3, [r7, #4]
200018e2:	881b      	ldrh	r3, [r3, #0]
200018e4:	b29b      	uxth	r3, r3
200018e6:	2204      	movs	r2, #4
200018e8:	4313      	orrs	r3, r2
200018ea:	b29a      	uxth	r2, r3
200018ec:	687b      	ldr	r3, [r7, #4]
200018ee:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_URS;
  }
}
200018f0:	e007      	b.n	20001902 <TIM_UpdateRequestConfig+0x38>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_URS;
200018f2:	687b      	ldr	r3, [r7, #4]
200018f4:	881b      	ldrh	r3, [r3, #0]
200018f6:	b29b      	uxth	r3, r3
200018f8:	2204      	movs	r2, #4
200018fa:	4393      	bics	r3, r2
200018fc:	b29a      	uxth	r2, r3
200018fe:	687b      	ldr	r3, [r7, #4]
20001900:	801a      	strh	r2, [r3, #0]
}
20001902:	46c0      	nop			; (mov r8, r8)
20001904:	46bd      	mov	sp, r7
20001906:	b002      	add	sp, #8
20001908:	bd80      	pop	{r7, pc}

2000190a <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
2000190a:	b580      	push	{r7, lr}
2000190c:	b082      	sub	sp, #8
2000190e:	af00      	add	r7, sp, #0
20001910:	6078      	str	r0, [r7, #4]
20001912:	000a      	movs	r2, r1
20001914:	1cfb      	adds	r3, r7, #3
20001916:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20001918:	1cfb      	adds	r3, r7, #3
2000191a:	781b      	ldrb	r3, [r3, #0]
2000191c:	2b00      	cmp	r3, #0
2000191e:	d008      	beq.n	20001932 <TIM_ARRPreloadConfig+0x28>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
20001920:	687b      	ldr	r3, [r7, #4]
20001922:	881b      	ldrh	r3, [r3, #0]
20001924:	b29b      	uxth	r3, r3
20001926:	2280      	movs	r2, #128	; 0x80
20001928:	4313      	orrs	r3, r2
2000192a:	b29a      	uxth	r2, r3
2000192c:	687b      	ldr	r3, [r7, #4]
2000192e:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
  }
}
20001930:	e007      	b.n	20001942 <TIM_ARRPreloadConfig+0x38>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
20001932:	687b      	ldr	r3, [r7, #4]
20001934:	881b      	ldrh	r3, [r3, #0]
20001936:	b29b      	uxth	r3, r3
20001938:	2280      	movs	r2, #128	; 0x80
2000193a:	4393      	bics	r3, r2
2000193c:	b29a      	uxth	r2, r3
2000193e:	687b      	ldr	r3, [r7, #4]
20001940:	801a      	strh	r2, [r3, #0]
}
20001942:	46c0      	nop			; (mov r8, r8)
20001944:	46bd      	mov	sp, r7
20001946:	b002      	add	sp, #8
20001948:	bd80      	pop	{r7, pc}

2000194a <TIM_SelectOnePulseMode>:
  *            @arg TIM_OPMode_Single
  *            @arg TIM_OPMode_Repetitive
  * @retval None
  */
void TIM_SelectOnePulseMode(TIM_TypeDef* TIMx, uint16_t TIM_OPMode)
{
2000194a:	b580      	push	{r7, lr}
2000194c:	b082      	sub	sp, #8
2000194e:	af00      	add	r7, sp, #0
20001950:	6078      	str	r0, [r7, #4]
20001952:	000a      	movs	r2, r1
20001954:	1cbb      	adds	r3, r7, #2
20001956:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));

  /* Reset the OPM Bit */
  TIMx->CR1 &= (uint16_t)~TIM_CR1_OPM;
20001958:	687b      	ldr	r3, [r7, #4]
2000195a:	881b      	ldrh	r3, [r3, #0]
2000195c:	b29b      	uxth	r3, r3
2000195e:	2208      	movs	r2, #8
20001960:	4393      	bics	r3, r2
20001962:	b29a      	uxth	r2, r3
20001964:	687b      	ldr	r3, [r7, #4]
20001966:	801a      	strh	r2, [r3, #0]

  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
20001968:	687b      	ldr	r3, [r7, #4]
2000196a:	881b      	ldrh	r3, [r3, #0]
2000196c:	b29a      	uxth	r2, r3
2000196e:	1cbb      	adds	r3, r7, #2
20001970:	881b      	ldrh	r3, [r3, #0]
20001972:	4313      	orrs	r3, r2
20001974:	b29a      	uxth	r2, r3
20001976:	687b      	ldr	r3, [r7, #4]
20001978:	801a      	strh	r2, [r3, #0]
}
2000197a:	46c0      	nop			; (mov r8, r8)
2000197c:	46bd      	mov	sp, r7
2000197e:	b002      	add	sp, #8
20001980:	bd80      	pop	{r7, pc}

20001982 <TIM_SetClockDivision>:
  *            @arg TIM_CKD_DIV2: TDTS = 2*Tck_tim
  *            @arg TIM_CKD_DIV4: TDTS = 4*Tck_tim
  * @retval None
  */
void TIM_SetClockDivision(TIM_TypeDef* TIMx, uint16_t TIM_CKD)
{
20001982:	b580      	push	{r7, lr}
20001984:	b082      	sub	sp, #8
20001986:	af00      	add	r7, sp, #0
20001988:	6078      	str	r0, [r7, #4]
2000198a:	000a      	movs	r2, r1
2000198c:	1cbb      	adds	r3, r7, #2
2000198e:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));

  /* Reset the CKD Bits */
  TIMx->CR1 &= (uint16_t)(~TIM_CR1_CKD);
20001990:	687b      	ldr	r3, [r7, #4]
20001992:	881b      	ldrh	r3, [r3, #0]
20001994:	b29b      	uxth	r3, r3
20001996:	4a09      	ldr	r2, [pc, #36]	; (200019bc <TIM_SetClockDivision+0x3a>)
20001998:	4013      	ands	r3, r2
2000199a:	b29a      	uxth	r2, r3
2000199c:	687b      	ldr	r3, [r7, #4]
2000199e:	801a      	strh	r2, [r3, #0]

  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
200019a0:	687b      	ldr	r3, [r7, #4]
200019a2:	881b      	ldrh	r3, [r3, #0]
200019a4:	b29a      	uxth	r2, r3
200019a6:	1cbb      	adds	r3, r7, #2
200019a8:	881b      	ldrh	r3, [r3, #0]
200019aa:	4313      	orrs	r3, r2
200019ac:	b29a      	uxth	r2, r3
200019ae:	687b      	ldr	r3, [r7, #4]
200019b0:	801a      	strh	r2, [r3, #0]
}
200019b2:	46c0      	nop			; (mov r8, r8)
200019b4:	46bd      	mov	sp, r7
200019b6:	b002      	add	sp, #8
200019b8:	bd80      	pop	{r7, pc}
200019ba:	46c0      	nop			; (mov r8, r8)
200019bc:	fffffcff 			; <UNDEFINED> instruction: 0xfffffcff

200019c0 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
200019c0:	b580      	push	{r7, lr}
200019c2:	b082      	sub	sp, #8
200019c4:	af00      	add	r7, sp, #0
200019c6:	6078      	str	r0, [r7, #4]
200019c8:	000a      	movs	r2, r1
200019ca:	1cfb      	adds	r3, r7, #3
200019cc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
200019ce:	1cfb      	adds	r3, r7, #3
200019d0:	781b      	ldrb	r3, [r3, #0]
200019d2:	2b00      	cmp	r3, #0
200019d4:	d008      	beq.n	200019e8 <TIM_Cmd+0x28>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
200019d6:	687b      	ldr	r3, [r7, #4]
200019d8:	881b      	ldrh	r3, [r3, #0]
200019da:	b29b      	uxth	r3, r3
200019dc:	2201      	movs	r2, #1
200019de:	4313      	orrs	r3, r2
200019e0:	b29a      	uxth	r2, r3
200019e2:	687b      	ldr	r3, [r7, #4]
200019e4:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
200019e6:	e007      	b.n	200019f8 <TIM_Cmd+0x38>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
200019e8:	687b      	ldr	r3, [r7, #4]
200019ea:	881b      	ldrh	r3, [r3, #0]
200019ec:	b29b      	uxth	r3, r3
200019ee:	2201      	movs	r2, #1
200019f0:	4393      	bics	r3, r2
200019f2:	b29a      	uxth	r2, r3
200019f4:	687b      	ldr	r3, [r7, #4]
200019f6:	801a      	strh	r2, [r3, #0]
}
200019f8:	46c0      	nop			; (mov r8, r8)
200019fa:	46bd      	mov	sp, r7
200019fc:	b002      	add	sp, #8
200019fe:	bd80      	pop	{r7, pc}

20001a00 <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
20001a00:	b590      	push	{r4, r7, lr}
20001a02:	b085      	sub	sp, #20
20001a04:	af00      	add	r7, sp, #0
20001a06:	6078      	str	r0, [r7, #4]
20001a08:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
20001a0a:	210a      	movs	r1, #10
20001a0c:	187b      	adds	r3, r7, r1
20001a0e:	2200      	movs	r2, #0
20001a10:	801a      	strh	r2, [r3, #0]
20001a12:	240e      	movs	r4, #14
20001a14:	193b      	adds	r3, r7, r4
20001a16:	2200      	movs	r2, #0
20001a18:	801a      	strh	r2, [r3, #0]
20001a1a:	200c      	movs	r0, #12
20001a1c:	183b      	adds	r3, r7, r0
20001a1e:	2200      	movs	r2, #0
20001a20:	801a      	strh	r2, [r3, #0]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
20001a22:	687b      	ldr	r3, [r7, #4]
20001a24:	8c1b      	ldrh	r3, [r3, #32]
20001a26:	b29b      	uxth	r3, r3
20001a28:	2201      	movs	r2, #1
20001a2a:	4393      	bics	r3, r2
20001a2c:	b29a      	uxth	r2, r3
20001a2e:	687b      	ldr	r3, [r7, #4]
20001a30:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
20001a32:	193b      	adds	r3, r7, r4
20001a34:	687a      	ldr	r2, [r7, #4]
20001a36:	8c12      	ldrh	r2, [r2, #32]
20001a38:	801a      	strh	r2, [r3, #0]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
20001a3a:	183b      	adds	r3, r7, r0
20001a3c:	687a      	ldr	r2, [r7, #4]
20001a3e:	8892      	ldrh	r2, [r2, #4]
20001a40:	801a      	strh	r2, [r3, #0]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
20001a42:	187b      	adds	r3, r7, r1
20001a44:	687a      	ldr	r2, [r7, #4]
20001a46:	8b12      	ldrh	r2, [r2, #24]
20001a48:	801a      	strh	r2, [r3, #0]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
20001a4a:	187b      	adds	r3, r7, r1
20001a4c:	0008      	movs	r0, r1
20001a4e:	187a      	adds	r2, r7, r1
20001a50:	8812      	ldrh	r2, [r2, #0]
20001a52:	2170      	movs	r1, #112	; 0x70
20001a54:	438a      	bics	r2, r1
20001a56:	801a      	strh	r2, [r3, #0]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
20001a58:	183b      	adds	r3, r7, r0
20001a5a:	183a      	adds	r2, r7, r0
20001a5c:	8812      	ldrh	r2, [r2, #0]
20001a5e:	2103      	movs	r1, #3
20001a60:	438a      	bics	r2, r1
20001a62:	801a      	strh	r2, [r3, #0]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
20001a64:	683b      	ldr	r3, [r7, #0]
20001a66:	8819      	ldrh	r1, [r3, #0]
20001a68:	183b      	adds	r3, r7, r0
20001a6a:	183a      	adds	r2, r7, r0
20001a6c:	8812      	ldrh	r2, [r2, #0]
20001a6e:	430a      	orrs	r2, r1
20001a70:	801a      	strh	r2, [r3, #0]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
20001a72:	0020      	movs	r0, r4
20001a74:	183b      	adds	r3, r7, r0
20001a76:	183a      	adds	r2, r7, r0
20001a78:	8812      	ldrh	r2, [r2, #0]
20001a7a:	2102      	movs	r1, #2
20001a7c:	438a      	bics	r2, r1
20001a7e:	801a      	strh	r2, [r3, #0]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
20001a80:	683b      	ldr	r3, [r7, #0]
20001a82:	8999      	ldrh	r1, [r3, #12]
20001a84:	183b      	adds	r3, r7, r0
20001a86:	183a      	adds	r2, r7, r0
20001a88:	8812      	ldrh	r2, [r2, #0]
20001a8a:	430a      	orrs	r2, r1
20001a8c:	801a      	strh	r2, [r3, #0]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
20001a8e:	683b      	ldr	r3, [r7, #0]
20001a90:	8859      	ldrh	r1, [r3, #2]
20001a92:	183b      	adds	r3, r7, r0
20001a94:	183a      	adds	r2, r7, r0
20001a96:	8812      	ldrh	r2, [r2, #0]
20001a98:	430a      	orrs	r2, r1
20001a9a:	801a      	strh	r2, [r3, #0]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
20001a9c:	687b      	ldr	r3, [r7, #4]
20001a9e:	4a2a      	ldr	r2, [pc, #168]	; (20001b48 <TIM_OC1Init+0x148>)
20001aa0:	4293      	cmp	r3, r2
20001aa2:	d003      	beq.n	20001aac <TIM_OC1Init+0xac>
20001aa4:	687b      	ldr	r3, [r7, #4]
20001aa6:	4a29      	ldr	r2, [pc, #164]	; (20001b4c <TIM_OC1Init+0x14c>)
20001aa8:	4293      	cmp	r3, r2
20001aaa:	d135      	bne.n	20001b18 <TIM_OC1Init+0x118>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
20001aac:	200e      	movs	r0, #14
20001aae:	183b      	adds	r3, r7, r0
20001ab0:	183a      	adds	r2, r7, r0
20001ab2:	8812      	ldrh	r2, [r2, #0]
20001ab4:	2108      	movs	r1, #8
20001ab6:	438a      	bics	r2, r1
20001ab8:	801a      	strh	r2, [r3, #0]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
20001aba:	683b      	ldr	r3, [r7, #0]
20001abc:	89d9      	ldrh	r1, [r3, #14]
20001abe:	183b      	adds	r3, r7, r0
20001ac0:	183a      	adds	r2, r7, r0
20001ac2:	8812      	ldrh	r2, [r2, #0]
20001ac4:	430a      	orrs	r2, r1
20001ac6:	801a      	strh	r2, [r3, #0]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
20001ac8:	183b      	adds	r3, r7, r0
20001aca:	183a      	adds	r2, r7, r0
20001acc:	8812      	ldrh	r2, [r2, #0]
20001ace:	2104      	movs	r1, #4
20001ad0:	438a      	bics	r2, r1
20001ad2:	801a      	strh	r2, [r3, #0]
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
20001ad4:	683b      	ldr	r3, [r7, #0]
20001ad6:	8899      	ldrh	r1, [r3, #4]
20001ad8:	183b      	adds	r3, r7, r0
20001ada:	183a      	adds	r2, r7, r0
20001adc:	8812      	ldrh	r2, [r2, #0]
20001ade:	430a      	orrs	r2, r1
20001ae0:	801a      	strh	r2, [r3, #0]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
20001ae2:	200c      	movs	r0, #12
20001ae4:	183b      	adds	r3, r7, r0
20001ae6:	183a      	adds	r2, r7, r0
20001ae8:	8812      	ldrh	r2, [r2, #0]
20001aea:	4919      	ldr	r1, [pc, #100]	; (20001b50 <TIM_OC1Init+0x150>)
20001aec:	400a      	ands	r2, r1
20001aee:	801a      	strh	r2, [r3, #0]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
20001af0:	183b      	adds	r3, r7, r0
20001af2:	183a      	adds	r2, r7, r0
20001af4:	8812      	ldrh	r2, [r2, #0]
20001af6:	4917      	ldr	r1, [pc, #92]	; (20001b54 <TIM_OC1Init+0x154>)
20001af8:	400a      	ands	r2, r1
20001afa:	801a      	strh	r2, [r3, #0]
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
20001afc:	683b      	ldr	r3, [r7, #0]
20001afe:	8a19      	ldrh	r1, [r3, #16]
20001b00:	183b      	adds	r3, r7, r0
20001b02:	183a      	adds	r2, r7, r0
20001b04:	8812      	ldrh	r2, [r2, #0]
20001b06:	430a      	orrs	r2, r1
20001b08:	801a      	strh	r2, [r3, #0]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
20001b0a:	683b      	ldr	r3, [r7, #0]
20001b0c:	8a59      	ldrh	r1, [r3, #18]
20001b0e:	183b      	adds	r3, r7, r0
20001b10:	183a      	adds	r2, r7, r0
20001b12:	8812      	ldrh	r2, [r2, #0]
20001b14:	430a      	orrs	r2, r1
20001b16:	801a      	strh	r2, [r3, #0]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
20001b18:	687b      	ldr	r3, [r7, #4]
20001b1a:	220c      	movs	r2, #12
20001b1c:	18ba      	adds	r2, r7, r2
20001b1e:	8812      	ldrh	r2, [r2, #0]
20001b20:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
20001b22:	687b      	ldr	r3, [r7, #4]
20001b24:	220a      	movs	r2, #10
20001b26:	18ba      	adds	r2, r7, r2
20001b28:	8812      	ldrh	r2, [r2, #0]
20001b2a:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
20001b2c:	683b      	ldr	r3, [r7, #0]
20001b2e:	689a      	ldr	r2, [r3, #8]
20001b30:	687b      	ldr	r3, [r7, #4]
20001b32:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
20001b34:	687b      	ldr	r3, [r7, #4]
20001b36:	220e      	movs	r2, #14
20001b38:	18ba      	adds	r2, r7, r2
20001b3a:	8812      	ldrh	r2, [r2, #0]
20001b3c:	841a      	strh	r2, [r3, #32]
}
20001b3e:	46c0      	nop			; (mov r8, r8)
20001b40:	46bd      	mov	sp, r7
20001b42:	b005      	add	sp, #20
20001b44:	bd90      	pop	{r4, r7, pc}
20001b46:	46c0      	nop			; (mov r8, r8)
20001b48:	40010000 	andmi	r0, r1, r0
20001b4c:	40010400 	andmi	r0, r1, r0, lsl #8
20001b50:	fffffeff 			; <UNDEFINED> instruction: 0xfffffeff
20001b54:	fffffdff 			; <UNDEFINED> instruction: 0xfffffdff

20001b58 <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
20001b58:	b590      	push	{r4, r7, lr}
20001b5a:	b085      	sub	sp, #20
20001b5c:	af00      	add	r7, sp, #0
20001b5e:	6078      	str	r0, [r7, #4]
20001b60:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
20001b62:	210a      	movs	r1, #10
20001b64:	187b      	adds	r3, r7, r1
20001b66:	2200      	movs	r2, #0
20001b68:	801a      	strh	r2, [r3, #0]
20001b6a:	240e      	movs	r4, #14
20001b6c:	193b      	adds	r3, r7, r4
20001b6e:	2200      	movs	r2, #0
20001b70:	801a      	strh	r2, [r3, #0]
20001b72:	200c      	movs	r0, #12
20001b74:	183b      	adds	r3, r7, r0
20001b76:	2200      	movs	r2, #0
20001b78:	801a      	strh	r2, [r3, #0]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
20001b7a:	687b      	ldr	r3, [r7, #4]
20001b7c:	8c1b      	ldrh	r3, [r3, #32]
20001b7e:	b29b      	uxth	r3, r3
20001b80:	2210      	movs	r2, #16
20001b82:	4393      	bics	r3, r2
20001b84:	b29a      	uxth	r2, r3
20001b86:	687b      	ldr	r3, [r7, #4]
20001b88:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
20001b8a:	193b      	adds	r3, r7, r4
20001b8c:	687a      	ldr	r2, [r7, #4]
20001b8e:	8c12      	ldrh	r2, [r2, #32]
20001b90:	801a      	strh	r2, [r3, #0]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
20001b92:	183b      	adds	r3, r7, r0
20001b94:	687a      	ldr	r2, [r7, #4]
20001b96:	8892      	ldrh	r2, [r2, #4]
20001b98:	801a      	strh	r2, [r3, #0]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
20001b9a:	187b      	adds	r3, r7, r1
20001b9c:	687a      	ldr	r2, [r7, #4]
20001b9e:	8b12      	ldrh	r2, [r2, #24]
20001ba0:	801a      	strh	r2, [r3, #0]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
20001ba2:	187b      	adds	r3, r7, r1
20001ba4:	0008      	movs	r0, r1
20001ba6:	187a      	adds	r2, r7, r1
20001ba8:	8812      	ldrh	r2, [r2, #0]
20001baa:	4944      	ldr	r1, [pc, #272]	; (20001cbc <TIM_OC2Init+0x164>)
20001bac:	400a      	ands	r2, r1
20001bae:	801a      	strh	r2, [r3, #0]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
20001bb0:	183b      	adds	r3, r7, r0
20001bb2:	183a      	adds	r2, r7, r0
20001bb4:	8812      	ldrh	r2, [r2, #0]
20001bb6:	4942      	ldr	r1, [pc, #264]	; (20001cc0 <TIM_OC2Init+0x168>)
20001bb8:	400a      	ands	r2, r1
20001bba:	801a      	strh	r2, [r3, #0]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
20001bbc:	683b      	ldr	r3, [r7, #0]
20001bbe:	881b      	ldrh	r3, [r3, #0]
20001bc0:	021b      	lsls	r3, r3, #8
20001bc2:	b299      	uxth	r1, r3
20001bc4:	183b      	adds	r3, r7, r0
20001bc6:	183a      	adds	r2, r7, r0
20001bc8:	8812      	ldrh	r2, [r2, #0]
20001bca:	430a      	orrs	r2, r1
20001bcc:	801a      	strh	r2, [r3, #0]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
20001bce:	0020      	movs	r0, r4
20001bd0:	183b      	adds	r3, r7, r0
20001bd2:	183a      	adds	r2, r7, r0
20001bd4:	8812      	ldrh	r2, [r2, #0]
20001bd6:	2120      	movs	r1, #32
20001bd8:	438a      	bics	r2, r1
20001bda:	801a      	strh	r2, [r3, #0]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
20001bdc:	683b      	ldr	r3, [r7, #0]
20001bde:	899b      	ldrh	r3, [r3, #12]
20001be0:	011b      	lsls	r3, r3, #4
20001be2:	b299      	uxth	r1, r3
20001be4:	183b      	adds	r3, r7, r0
20001be6:	183a      	adds	r2, r7, r0
20001be8:	8812      	ldrh	r2, [r2, #0]
20001bea:	430a      	orrs	r2, r1
20001bec:	801a      	strh	r2, [r3, #0]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
20001bee:	683b      	ldr	r3, [r7, #0]
20001bf0:	885b      	ldrh	r3, [r3, #2]
20001bf2:	011b      	lsls	r3, r3, #4
20001bf4:	b299      	uxth	r1, r3
20001bf6:	183b      	adds	r3, r7, r0
20001bf8:	183a      	adds	r2, r7, r0
20001bfa:	8812      	ldrh	r2, [r2, #0]
20001bfc:	430a      	orrs	r2, r1
20001bfe:	801a      	strh	r2, [r3, #0]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
20001c00:	687b      	ldr	r3, [r7, #4]
20001c02:	4a30      	ldr	r2, [pc, #192]	; (20001cc4 <TIM_OC2Init+0x16c>)
20001c04:	4293      	cmp	r3, r2
20001c06:	d003      	beq.n	20001c10 <TIM_OC2Init+0xb8>
20001c08:	687b      	ldr	r3, [r7, #4]
20001c0a:	4a2f      	ldr	r2, [pc, #188]	; (20001cc8 <TIM_OC2Init+0x170>)
20001c0c:	4293      	cmp	r3, r2
20001c0e:	d13d      	bne.n	20001c8c <TIM_OC2Init+0x134>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
20001c10:	200e      	movs	r0, #14
20001c12:	183b      	adds	r3, r7, r0
20001c14:	183a      	adds	r2, r7, r0
20001c16:	8812      	ldrh	r2, [r2, #0]
20001c18:	2180      	movs	r1, #128	; 0x80
20001c1a:	438a      	bics	r2, r1
20001c1c:	801a      	strh	r2, [r3, #0]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
20001c1e:	683b      	ldr	r3, [r7, #0]
20001c20:	89db      	ldrh	r3, [r3, #14]
20001c22:	011b      	lsls	r3, r3, #4
20001c24:	b299      	uxth	r1, r3
20001c26:	183b      	adds	r3, r7, r0
20001c28:	183a      	adds	r2, r7, r0
20001c2a:	8812      	ldrh	r2, [r2, #0]
20001c2c:	430a      	orrs	r2, r1
20001c2e:	801a      	strh	r2, [r3, #0]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
20001c30:	183b      	adds	r3, r7, r0
20001c32:	183a      	adds	r2, r7, r0
20001c34:	8812      	ldrh	r2, [r2, #0]
20001c36:	2140      	movs	r1, #64	; 0x40
20001c38:	438a      	bics	r2, r1
20001c3a:	801a      	strh	r2, [r3, #0]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
20001c3c:	683b      	ldr	r3, [r7, #0]
20001c3e:	889b      	ldrh	r3, [r3, #4]
20001c40:	011b      	lsls	r3, r3, #4
20001c42:	b299      	uxth	r1, r3
20001c44:	183b      	adds	r3, r7, r0
20001c46:	183a      	adds	r2, r7, r0
20001c48:	8812      	ldrh	r2, [r2, #0]
20001c4a:	430a      	orrs	r2, r1
20001c4c:	801a      	strh	r2, [r3, #0]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
20001c4e:	200c      	movs	r0, #12
20001c50:	183b      	adds	r3, r7, r0
20001c52:	183a      	adds	r2, r7, r0
20001c54:	8812      	ldrh	r2, [r2, #0]
20001c56:	491d      	ldr	r1, [pc, #116]	; (20001ccc <TIM_OC2Init+0x174>)
20001c58:	400a      	ands	r2, r1
20001c5a:	801a      	strh	r2, [r3, #0]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
20001c5c:	183b      	adds	r3, r7, r0
20001c5e:	183a      	adds	r2, r7, r0
20001c60:	8812      	ldrh	r2, [r2, #0]
20001c62:	491b      	ldr	r1, [pc, #108]	; (20001cd0 <TIM_OC2Init+0x178>)
20001c64:	400a      	ands	r2, r1
20001c66:	801a      	strh	r2, [r3, #0]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
20001c68:	683b      	ldr	r3, [r7, #0]
20001c6a:	8a1b      	ldrh	r3, [r3, #16]
20001c6c:	009b      	lsls	r3, r3, #2
20001c6e:	b299      	uxth	r1, r3
20001c70:	183b      	adds	r3, r7, r0
20001c72:	183a      	adds	r2, r7, r0
20001c74:	8812      	ldrh	r2, [r2, #0]
20001c76:	430a      	orrs	r2, r1
20001c78:	801a      	strh	r2, [r3, #0]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
20001c7a:	683b      	ldr	r3, [r7, #0]
20001c7c:	8a5b      	ldrh	r3, [r3, #18]
20001c7e:	009b      	lsls	r3, r3, #2
20001c80:	b299      	uxth	r1, r3
20001c82:	183b      	adds	r3, r7, r0
20001c84:	183a      	adds	r2, r7, r0
20001c86:	8812      	ldrh	r2, [r2, #0]
20001c88:	430a      	orrs	r2, r1
20001c8a:	801a      	strh	r2, [r3, #0]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
20001c8c:	687b      	ldr	r3, [r7, #4]
20001c8e:	220c      	movs	r2, #12
20001c90:	18ba      	adds	r2, r7, r2
20001c92:	8812      	ldrh	r2, [r2, #0]
20001c94:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
20001c96:	687b      	ldr	r3, [r7, #4]
20001c98:	220a      	movs	r2, #10
20001c9a:	18ba      	adds	r2, r7, r2
20001c9c:	8812      	ldrh	r2, [r2, #0]
20001c9e:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
20001ca0:	683b      	ldr	r3, [r7, #0]
20001ca2:	689a      	ldr	r2, [r3, #8]
20001ca4:	687b      	ldr	r3, [r7, #4]
20001ca6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
20001ca8:	687b      	ldr	r3, [r7, #4]
20001caa:	220e      	movs	r2, #14
20001cac:	18ba      	adds	r2, r7, r2
20001cae:	8812      	ldrh	r2, [r2, #0]
20001cb0:	841a      	strh	r2, [r3, #32]
}
20001cb2:	46c0      	nop			; (mov r8, r8)
20001cb4:	46bd      	mov	sp, r7
20001cb6:	b005      	add	sp, #20
20001cb8:	bd90      	pop	{r4, r7, pc}
20001cba:	46c0      	nop			; (mov r8, r8)
20001cbc:	ffff8fff 			; <UNDEFINED> instruction: 0xffff8fff
20001cc0:	fffffcff 			; <UNDEFINED> instruction: 0xfffffcff
20001cc4:	40010000 	andmi	r0, r1, r0
20001cc8:	40010400 	andmi	r0, r1, r0, lsl #8
20001ccc:	fffffbff 			; <UNDEFINED> instruction: 0xfffffbff
20001cd0:	fffff7ff 			; <UNDEFINED> instruction: 0xfffff7ff

20001cd4 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
20001cd4:	b590      	push	{r4, r7, lr}
20001cd6:	b085      	sub	sp, #20
20001cd8:	af00      	add	r7, sp, #0
20001cda:	6078      	str	r0, [r7, #4]
20001cdc:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
20001cde:	210a      	movs	r1, #10
20001ce0:	187b      	adds	r3, r7, r1
20001ce2:	2200      	movs	r2, #0
20001ce4:	801a      	strh	r2, [r3, #0]
20001ce6:	240e      	movs	r4, #14
20001ce8:	193b      	adds	r3, r7, r4
20001cea:	2200      	movs	r2, #0
20001cec:	801a      	strh	r2, [r3, #0]
20001cee:	200c      	movs	r0, #12
20001cf0:	183b      	adds	r3, r7, r0
20001cf2:	2200      	movs	r2, #0
20001cf4:	801a      	strh	r2, [r3, #0]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
20001cf6:	687b      	ldr	r3, [r7, #4]
20001cf8:	8c1b      	ldrh	r3, [r3, #32]
20001cfa:	b29b      	uxth	r3, r3
20001cfc:	4a4d      	ldr	r2, [pc, #308]	; (20001e34 <TIM_OC3Init+0x160>)
20001cfe:	4013      	ands	r3, r2
20001d00:	b29a      	uxth	r2, r3
20001d02:	687b      	ldr	r3, [r7, #4]
20001d04:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
20001d06:	193b      	adds	r3, r7, r4
20001d08:	687a      	ldr	r2, [r7, #4]
20001d0a:	8c12      	ldrh	r2, [r2, #32]
20001d0c:	801a      	strh	r2, [r3, #0]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
20001d0e:	183b      	adds	r3, r7, r0
20001d10:	687a      	ldr	r2, [r7, #4]
20001d12:	8892      	ldrh	r2, [r2, #4]
20001d14:	801a      	strh	r2, [r3, #0]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
20001d16:	187b      	adds	r3, r7, r1
20001d18:	687a      	ldr	r2, [r7, #4]
20001d1a:	8b92      	ldrh	r2, [r2, #28]
20001d1c:	801a      	strh	r2, [r3, #0]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
20001d1e:	187b      	adds	r3, r7, r1
20001d20:	0008      	movs	r0, r1
20001d22:	187a      	adds	r2, r7, r1
20001d24:	8812      	ldrh	r2, [r2, #0]
20001d26:	2170      	movs	r1, #112	; 0x70
20001d28:	438a      	bics	r2, r1
20001d2a:	801a      	strh	r2, [r3, #0]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
20001d2c:	183b      	adds	r3, r7, r0
20001d2e:	183a      	adds	r2, r7, r0
20001d30:	8812      	ldrh	r2, [r2, #0]
20001d32:	2103      	movs	r1, #3
20001d34:	438a      	bics	r2, r1
20001d36:	801a      	strh	r2, [r3, #0]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
20001d38:	683b      	ldr	r3, [r7, #0]
20001d3a:	8819      	ldrh	r1, [r3, #0]
20001d3c:	183b      	adds	r3, r7, r0
20001d3e:	183a      	adds	r2, r7, r0
20001d40:	8812      	ldrh	r2, [r2, #0]
20001d42:	430a      	orrs	r2, r1
20001d44:	801a      	strh	r2, [r3, #0]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
20001d46:	0020      	movs	r0, r4
20001d48:	183b      	adds	r3, r7, r0
20001d4a:	183a      	adds	r2, r7, r0
20001d4c:	8812      	ldrh	r2, [r2, #0]
20001d4e:	493a      	ldr	r1, [pc, #232]	; (20001e38 <TIM_OC3Init+0x164>)
20001d50:	400a      	ands	r2, r1
20001d52:	801a      	strh	r2, [r3, #0]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
20001d54:	683b      	ldr	r3, [r7, #0]
20001d56:	899b      	ldrh	r3, [r3, #12]
20001d58:	021b      	lsls	r3, r3, #8
20001d5a:	b299      	uxth	r1, r3
20001d5c:	183b      	adds	r3, r7, r0
20001d5e:	183a      	adds	r2, r7, r0
20001d60:	8812      	ldrh	r2, [r2, #0]
20001d62:	430a      	orrs	r2, r1
20001d64:	801a      	strh	r2, [r3, #0]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
20001d66:	683b      	ldr	r3, [r7, #0]
20001d68:	885b      	ldrh	r3, [r3, #2]
20001d6a:	021b      	lsls	r3, r3, #8
20001d6c:	b299      	uxth	r1, r3
20001d6e:	183b      	adds	r3, r7, r0
20001d70:	183a      	adds	r2, r7, r0
20001d72:	8812      	ldrh	r2, [r2, #0]
20001d74:	430a      	orrs	r2, r1
20001d76:	801a      	strh	r2, [r3, #0]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
20001d78:	687b      	ldr	r3, [r7, #4]
20001d7a:	4a30      	ldr	r2, [pc, #192]	; (20001e3c <TIM_OC3Init+0x168>)
20001d7c:	4293      	cmp	r3, r2
20001d7e:	d003      	beq.n	20001d88 <TIM_OC3Init+0xb4>
20001d80:	687b      	ldr	r3, [r7, #4]
20001d82:	4a2f      	ldr	r2, [pc, #188]	; (20001e40 <TIM_OC3Init+0x16c>)
20001d84:	4293      	cmp	r3, r2
20001d86:	d13d      	bne.n	20001e04 <TIM_OC3Init+0x130>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
20001d88:	200e      	movs	r0, #14
20001d8a:	183b      	adds	r3, r7, r0
20001d8c:	183a      	adds	r2, r7, r0
20001d8e:	8812      	ldrh	r2, [r2, #0]
20001d90:	492c      	ldr	r1, [pc, #176]	; (20001e44 <TIM_OC3Init+0x170>)
20001d92:	400a      	ands	r2, r1
20001d94:	801a      	strh	r2, [r3, #0]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
20001d96:	683b      	ldr	r3, [r7, #0]
20001d98:	89db      	ldrh	r3, [r3, #14]
20001d9a:	021b      	lsls	r3, r3, #8
20001d9c:	b299      	uxth	r1, r3
20001d9e:	183b      	adds	r3, r7, r0
20001da0:	183a      	adds	r2, r7, r0
20001da2:	8812      	ldrh	r2, [r2, #0]
20001da4:	430a      	orrs	r2, r1
20001da6:	801a      	strh	r2, [r3, #0]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
20001da8:	183b      	adds	r3, r7, r0
20001daa:	183a      	adds	r2, r7, r0
20001dac:	8812      	ldrh	r2, [r2, #0]
20001dae:	4926      	ldr	r1, [pc, #152]	; (20001e48 <TIM_OC3Init+0x174>)
20001db0:	400a      	ands	r2, r1
20001db2:	801a      	strh	r2, [r3, #0]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
20001db4:	683b      	ldr	r3, [r7, #0]
20001db6:	889b      	ldrh	r3, [r3, #4]
20001db8:	021b      	lsls	r3, r3, #8
20001dba:	b299      	uxth	r1, r3
20001dbc:	183b      	adds	r3, r7, r0
20001dbe:	183a      	adds	r2, r7, r0
20001dc0:	8812      	ldrh	r2, [r2, #0]
20001dc2:	430a      	orrs	r2, r1
20001dc4:	801a      	strh	r2, [r3, #0]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
20001dc6:	200c      	movs	r0, #12
20001dc8:	183b      	adds	r3, r7, r0
20001dca:	183a      	adds	r2, r7, r0
20001dcc:	8812      	ldrh	r2, [r2, #0]
20001dce:	491f      	ldr	r1, [pc, #124]	; (20001e4c <TIM_OC3Init+0x178>)
20001dd0:	400a      	ands	r2, r1
20001dd2:	801a      	strh	r2, [r3, #0]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
20001dd4:	183b      	adds	r3, r7, r0
20001dd6:	183a      	adds	r2, r7, r0
20001dd8:	8812      	ldrh	r2, [r2, #0]
20001dda:	491d      	ldr	r1, [pc, #116]	; (20001e50 <TIM_OC3Init+0x17c>)
20001ddc:	400a      	ands	r2, r1
20001dde:	801a      	strh	r2, [r3, #0]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
20001de0:	683b      	ldr	r3, [r7, #0]
20001de2:	8a1b      	ldrh	r3, [r3, #16]
20001de4:	011b      	lsls	r3, r3, #4
20001de6:	b299      	uxth	r1, r3
20001de8:	183b      	adds	r3, r7, r0
20001dea:	183a      	adds	r2, r7, r0
20001dec:	8812      	ldrh	r2, [r2, #0]
20001dee:	430a      	orrs	r2, r1
20001df0:	801a      	strh	r2, [r3, #0]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
20001df2:	683b      	ldr	r3, [r7, #0]
20001df4:	8a5b      	ldrh	r3, [r3, #18]
20001df6:	011b      	lsls	r3, r3, #4
20001df8:	b299      	uxth	r1, r3
20001dfa:	183b      	adds	r3, r7, r0
20001dfc:	183a      	adds	r2, r7, r0
20001dfe:	8812      	ldrh	r2, [r2, #0]
20001e00:	430a      	orrs	r2, r1
20001e02:	801a      	strh	r2, [r3, #0]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
20001e04:	687b      	ldr	r3, [r7, #4]
20001e06:	220c      	movs	r2, #12
20001e08:	18ba      	adds	r2, r7, r2
20001e0a:	8812      	ldrh	r2, [r2, #0]
20001e0c:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
20001e0e:	687b      	ldr	r3, [r7, #4]
20001e10:	220a      	movs	r2, #10
20001e12:	18ba      	adds	r2, r7, r2
20001e14:	8812      	ldrh	r2, [r2, #0]
20001e16:	839a      	strh	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
20001e18:	683b      	ldr	r3, [r7, #0]
20001e1a:	689a      	ldr	r2, [r3, #8]
20001e1c:	687b      	ldr	r3, [r7, #4]
20001e1e:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
20001e20:	687b      	ldr	r3, [r7, #4]
20001e22:	220e      	movs	r2, #14
20001e24:	18ba      	adds	r2, r7, r2
20001e26:	8812      	ldrh	r2, [r2, #0]
20001e28:	841a      	strh	r2, [r3, #32]
}
20001e2a:	46c0      	nop			; (mov r8, r8)
20001e2c:	46bd      	mov	sp, r7
20001e2e:	b005      	add	sp, #20
20001e30:	bd90      	pop	{r4, r7, pc}
20001e32:	46c0      	nop			; (mov r8, r8)
20001e34:	fffffeff 			; <UNDEFINED> instruction: 0xfffffeff
20001e38:	fffffdff 			; <UNDEFINED> instruction: 0xfffffdff
20001e3c:	40010000 	andmi	r0, r1, r0
20001e40:	40010400 	andmi	r0, r1, r0, lsl #8
20001e44:	fffff7ff 			; <UNDEFINED> instruction: 0xfffff7ff
20001e48:	fffffbff 			; <UNDEFINED> instruction: 0xfffffbff
20001e4c:	ffffefff 			; <UNDEFINED> instruction: 0xffffefff
20001e50:	ffffdfff 			; <UNDEFINED> instruction: 0xffffdfff

20001e54 <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
20001e54:	b590      	push	{r4, r7, lr}
20001e56:	b085      	sub	sp, #20
20001e58:	af00      	add	r7, sp, #0
20001e5a:	6078      	str	r0, [r7, #4]
20001e5c:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
20001e5e:	210c      	movs	r1, #12
20001e60:	187b      	adds	r3, r7, r1
20001e62:	2200      	movs	r2, #0
20001e64:	801a      	strh	r2, [r3, #0]
20001e66:	240a      	movs	r4, #10
20001e68:	193b      	adds	r3, r7, r4
20001e6a:	2200      	movs	r2, #0
20001e6c:	801a      	strh	r2, [r3, #0]
20001e6e:	200e      	movs	r0, #14
20001e70:	183b      	adds	r3, r7, r0
20001e72:	2200      	movs	r2, #0
20001e74:	801a      	strh	r2, [r3, #0]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
20001e76:	687b      	ldr	r3, [r7, #4]
20001e78:	8c1b      	ldrh	r3, [r3, #32]
20001e7a:	b29b      	uxth	r3, r3
20001e7c:	4a37      	ldr	r2, [pc, #220]	; (20001f5c <TIM_OC4Init+0x108>)
20001e7e:	4013      	ands	r3, r2
20001e80:	b29a      	uxth	r2, r3
20001e82:	687b      	ldr	r3, [r7, #4]
20001e84:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
20001e86:	193b      	adds	r3, r7, r4
20001e88:	687a      	ldr	r2, [r7, #4]
20001e8a:	8c12      	ldrh	r2, [r2, #32]
20001e8c:	801a      	strh	r2, [r3, #0]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
20001e8e:	183b      	adds	r3, r7, r0
20001e90:	687a      	ldr	r2, [r7, #4]
20001e92:	8892      	ldrh	r2, [r2, #4]
20001e94:	801a      	strh	r2, [r3, #0]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
20001e96:	187b      	adds	r3, r7, r1
20001e98:	687a      	ldr	r2, [r7, #4]
20001e9a:	8b92      	ldrh	r2, [r2, #28]
20001e9c:	801a      	strh	r2, [r3, #0]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
20001e9e:	187b      	adds	r3, r7, r1
20001ea0:	0008      	movs	r0, r1
20001ea2:	187a      	adds	r2, r7, r1
20001ea4:	8812      	ldrh	r2, [r2, #0]
20001ea6:	492e      	ldr	r1, [pc, #184]	; (20001f60 <TIM_OC4Init+0x10c>)
20001ea8:	400a      	ands	r2, r1
20001eaa:	801a      	strh	r2, [r3, #0]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
20001eac:	183b      	adds	r3, r7, r0
20001eae:	183a      	adds	r2, r7, r0
20001eb0:	8812      	ldrh	r2, [r2, #0]
20001eb2:	492c      	ldr	r1, [pc, #176]	; (20001f64 <TIM_OC4Init+0x110>)
20001eb4:	400a      	ands	r2, r1
20001eb6:	801a      	strh	r2, [r3, #0]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
20001eb8:	683b      	ldr	r3, [r7, #0]
20001eba:	881b      	ldrh	r3, [r3, #0]
20001ebc:	021b      	lsls	r3, r3, #8
20001ebe:	b299      	uxth	r1, r3
20001ec0:	183b      	adds	r3, r7, r0
20001ec2:	183a      	adds	r2, r7, r0
20001ec4:	8812      	ldrh	r2, [r2, #0]
20001ec6:	430a      	orrs	r2, r1
20001ec8:	801a      	strh	r2, [r3, #0]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
20001eca:	0020      	movs	r0, r4
20001ecc:	183b      	adds	r3, r7, r0
20001ece:	183a      	adds	r2, r7, r0
20001ed0:	8812      	ldrh	r2, [r2, #0]
20001ed2:	4925      	ldr	r1, [pc, #148]	; (20001f68 <TIM_OC4Init+0x114>)
20001ed4:	400a      	ands	r2, r1
20001ed6:	801a      	strh	r2, [r3, #0]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
20001ed8:	683b      	ldr	r3, [r7, #0]
20001eda:	899b      	ldrh	r3, [r3, #12]
20001edc:	031b      	lsls	r3, r3, #12
20001ede:	b299      	uxth	r1, r3
20001ee0:	183b      	adds	r3, r7, r0
20001ee2:	183a      	adds	r2, r7, r0
20001ee4:	8812      	ldrh	r2, [r2, #0]
20001ee6:	430a      	orrs	r2, r1
20001ee8:	801a      	strh	r2, [r3, #0]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
20001eea:	683b      	ldr	r3, [r7, #0]
20001eec:	885b      	ldrh	r3, [r3, #2]
20001eee:	031b      	lsls	r3, r3, #12
20001ef0:	b299      	uxth	r1, r3
20001ef2:	183b      	adds	r3, r7, r0
20001ef4:	183a      	adds	r2, r7, r0
20001ef6:	8812      	ldrh	r2, [r2, #0]
20001ef8:	430a      	orrs	r2, r1
20001efa:	801a      	strh	r2, [r3, #0]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
20001efc:	687b      	ldr	r3, [r7, #4]
20001efe:	4a1b      	ldr	r2, [pc, #108]	; (20001f6c <TIM_OC4Init+0x118>)
20001f00:	4293      	cmp	r3, r2
20001f02:	d003      	beq.n	20001f0c <TIM_OC4Init+0xb8>
20001f04:	687b      	ldr	r3, [r7, #4]
20001f06:	4a1a      	ldr	r2, [pc, #104]	; (20001f70 <TIM_OC4Init+0x11c>)
20001f08:	4293      	cmp	r3, r2
20001f0a:	d10f      	bne.n	20001f2c <TIM_OC4Init+0xd8>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
20001f0c:	200e      	movs	r0, #14
20001f0e:	183b      	adds	r3, r7, r0
20001f10:	183a      	adds	r2, r7, r0
20001f12:	8812      	ldrh	r2, [r2, #0]
20001f14:	4917      	ldr	r1, [pc, #92]	; (20001f74 <TIM_OC4Init+0x120>)
20001f16:	400a      	ands	r2, r1
20001f18:	801a      	strh	r2, [r3, #0]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
20001f1a:	683b      	ldr	r3, [r7, #0]
20001f1c:	8a1b      	ldrh	r3, [r3, #16]
20001f1e:	019b      	lsls	r3, r3, #6
20001f20:	b299      	uxth	r1, r3
20001f22:	183b      	adds	r3, r7, r0
20001f24:	183a      	adds	r2, r7, r0
20001f26:	8812      	ldrh	r2, [r2, #0]
20001f28:	430a      	orrs	r2, r1
20001f2a:	801a      	strh	r2, [r3, #0]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
20001f2c:	687b      	ldr	r3, [r7, #4]
20001f2e:	220e      	movs	r2, #14
20001f30:	18ba      	adds	r2, r7, r2
20001f32:	8812      	ldrh	r2, [r2, #0]
20001f34:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
20001f36:	687b      	ldr	r3, [r7, #4]
20001f38:	220c      	movs	r2, #12
20001f3a:	18ba      	adds	r2, r7, r2
20001f3c:	8812      	ldrh	r2, [r2, #0]
20001f3e:	839a      	strh	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
20001f40:	683b      	ldr	r3, [r7, #0]
20001f42:	689a      	ldr	r2, [r3, #8]
20001f44:	687b      	ldr	r3, [r7, #4]
20001f46:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
20001f48:	687b      	ldr	r3, [r7, #4]
20001f4a:	220a      	movs	r2, #10
20001f4c:	18ba      	adds	r2, r7, r2
20001f4e:	8812      	ldrh	r2, [r2, #0]
20001f50:	841a      	strh	r2, [r3, #32]
}
20001f52:	46c0      	nop			; (mov r8, r8)
20001f54:	46bd      	mov	sp, r7
20001f56:	b005      	add	sp, #20
20001f58:	bd90      	pop	{r4, r7, pc}
20001f5a:	46c0      	nop			; (mov r8, r8)
20001f5c:	ffffefff 			; <UNDEFINED> instruction: 0xffffefff
20001f60:	ffff8fff 			; <UNDEFINED> instruction: 0xffff8fff
20001f64:	fffffcff 			; <UNDEFINED> instruction: 0xfffffcff
20001f68:	ffffdfff 			; <UNDEFINED> instruction: 0xffffdfff
20001f6c:	40010000 	andmi	r0, r1, r0
20001f70:	40010400 	andmi	r0, r1, r0, lsl #8
20001f74:	ffffbfff 			; <UNDEFINED> instruction: 0xffffbfff

20001f78 <TIM_OCStructInit>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
20001f78:	b580      	push	{r7, lr}
20001f7a:	b082      	sub	sp, #8
20001f7c:	af00      	add	r7, sp, #0
20001f7e:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
20001f80:	687b      	ldr	r3, [r7, #4]
20001f82:	2200      	movs	r2, #0
20001f84:	801a      	strh	r2, [r3, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
20001f86:	687b      	ldr	r3, [r7, #4]
20001f88:	2200      	movs	r2, #0
20001f8a:	805a      	strh	r2, [r3, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
20001f8c:	687b      	ldr	r3, [r7, #4]
20001f8e:	2200      	movs	r2, #0
20001f90:	809a      	strh	r2, [r3, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x00000000;
20001f92:	687b      	ldr	r3, [r7, #4]
20001f94:	2200      	movs	r2, #0
20001f96:	609a      	str	r2, [r3, #8]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
20001f98:	687b      	ldr	r3, [r7, #4]
20001f9a:	2200      	movs	r2, #0
20001f9c:	819a      	strh	r2, [r3, #12]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
20001f9e:	687b      	ldr	r3, [r7, #4]
20001fa0:	2200      	movs	r2, #0
20001fa2:	81da      	strh	r2, [r3, #14]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
20001fa4:	687b      	ldr	r3, [r7, #4]
20001fa6:	2200      	movs	r2, #0
20001fa8:	821a      	strh	r2, [r3, #16]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
20001faa:	687b      	ldr	r3, [r7, #4]
20001fac:	2200      	movs	r2, #0
20001fae:	825a      	strh	r2, [r3, #18]
}
20001fb0:	46c0      	nop			; (mov r8, r8)
20001fb2:	46bd      	mov	sp, r7
20001fb4:	b002      	add	sp, #8
20001fb6:	bd80      	pop	{r7, pc}

20001fb8 <TIM_SelectOCxM>:
  *            @arg TIM_ForcedAction_Active
  *            @arg TIM_ForcedAction_InActive
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
{
20001fb8:	b580      	push	{r7, lr}
20001fba:	b084      	sub	sp, #16
20001fbc:	af00      	add	r7, sp, #0
20001fbe:	6078      	str	r0, [r7, #4]
20001fc0:	0008      	movs	r0, r1
20001fc2:	0011      	movs	r1, r2
20001fc4:	1cbb      	adds	r3, r7, #2
20001fc6:	1c02      	adds	r2, r0, #0
20001fc8:	801a      	strh	r2, [r3, #0]
20001fca:	003b      	movs	r3, r7
20001fcc:	1c0a      	adds	r2, r1, #0
20001fce:	801a      	strh	r2, [r3, #0]
  uint32_t tmp = 0;
20001fd0:	2300      	movs	r3, #0
20001fd2:	60fb      	str	r3, [r7, #12]
  uint16_t tmp1 = 0;
20001fd4:	210a      	movs	r1, #10
20001fd6:	187b      	adds	r3, r7, r1
20001fd8:	2200      	movs	r2, #0
20001fda:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
20001fdc:	687b      	ldr	r3, [r7, #4]
20001fde:	60fb      	str	r3, [r7, #12]
  tmp += CCMR_OFFSET;
20001fe0:	68fb      	ldr	r3, [r7, #12]
20001fe2:	3318      	adds	r3, #24
20001fe4:	60fb      	str	r3, [r7, #12]

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
20001fe6:	1cbb      	adds	r3, r7, #2
20001fe8:	881b      	ldrh	r3, [r3, #0]
20001fea:	2201      	movs	r2, #1
20001fec:	409a      	lsls	r2, r3
20001fee:	187b      	adds	r3, r7, r1
20001ff0:	801a      	strh	r2, [r3, #0]

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
20001ff2:	687b      	ldr	r3, [r7, #4]
20001ff4:	8c1b      	ldrh	r3, [r3, #32]
20001ff6:	b29b      	uxth	r3, r3
20001ff8:	187a      	adds	r2, r7, r1
20001ffa:	8812      	ldrh	r2, [r2, #0]
20001ffc:	43d2      	mvns	r2, r2
20001ffe:	b292      	uxth	r2, r2
20002000:	4013      	ands	r3, r2
20002002:	b29a      	uxth	r2, r3
20002004:	687b      	ldr	r3, [r7, #4]
20002006:	841a      	strh	r2, [r3, #32]

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
20002008:	1cbb      	adds	r3, r7, #2
2000200a:	881b      	ldrh	r3, [r3, #0]
2000200c:	2b00      	cmp	r3, #0
2000200e:	d003      	beq.n	20002018 <TIM_SelectOCxM+0x60>
20002010:	1cbb      	adds	r3, r7, #2
20002012:	881b      	ldrh	r3, [r3, #0]
20002014:	2b08      	cmp	r3, #8
20002016:	d115      	bne.n	20002044 <TIM_SelectOCxM+0x8c>
  {
    tmp += (TIM_Channel>>1);
20002018:	1cbb      	adds	r3, r7, #2
2000201a:	881b      	ldrh	r3, [r3, #0]
2000201c:	085b      	lsrs	r3, r3, #1
2000201e:	b29b      	uxth	r3, r3
20002020:	001a      	movs	r2, r3
20002022:	68fb      	ldr	r3, [r7, #12]
20002024:	189b      	adds	r3, r3, r2
20002026:	60fb      	str	r3, [r7, #12]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC13M_MASK;
20002028:	68fb      	ldr	r3, [r7, #12]
2000202a:	681a      	ldr	r2, [r3, #0]
2000202c:	68fb      	ldr	r3, [r7, #12]
2000202e:	4915      	ldr	r1, [pc, #84]	; (20002084 <TIM_SelectOCxM+0xcc>)
20002030:	400a      	ands	r2, r1
20002032:	601a      	str	r2, [r3, #0]
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
20002034:	68fb      	ldr	r3, [r7, #12]
20002036:	6819      	ldr	r1, [r3, #0]
20002038:	003b      	movs	r3, r7
2000203a:	881a      	ldrh	r2, [r3, #0]
2000203c:	68fb      	ldr	r3, [r7, #12]
2000203e:	430a      	orrs	r2, r1
20002040:	601a      	str	r2, [r3, #0]
20002042:	e01a      	b.n	2000207a <TIM_SelectOCxM+0xc2>
  }
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
20002044:	1cbb      	adds	r3, r7, #2
20002046:	881b      	ldrh	r3, [r3, #0]
20002048:	3b04      	subs	r3, #4
2000204a:	b29b      	uxth	r3, r3
2000204c:	085b      	lsrs	r3, r3, #1
2000204e:	b29b      	uxth	r3, r3
20002050:	001a      	movs	r2, r3
20002052:	68fb      	ldr	r3, [r7, #12]
20002054:	189b      	adds	r3, r3, r2
20002056:	60fb      	str	r3, [r7, #12]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC24M_MASK;
20002058:	68fb      	ldr	r3, [r7, #12]
2000205a:	681a      	ldr	r2, [r3, #0]
2000205c:	68fb      	ldr	r3, [r7, #12]
2000205e:	490a      	ldr	r1, [pc, #40]	; (20002088 <TIM_SelectOCxM+0xd0>)
20002060:	400a      	ands	r2, r1
20002062:	601a      	str	r2, [r3, #0]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
20002064:	68fb      	ldr	r3, [r7, #12]
20002066:	681a      	ldr	r2, [r3, #0]
20002068:	003b      	movs	r3, r7
2000206a:	881b      	ldrh	r3, [r3, #0]
2000206c:	021b      	lsls	r3, r3, #8
2000206e:	b29b      	uxth	r3, r3
20002070:	0019      	movs	r1, r3
20002072:	68fb      	ldr	r3, [r7, #12]
20002074:	430a      	orrs	r2, r1
20002076:	601a      	str	r2, [r3, #0]
  }
}
20002078:	46c0      	nop			; (mov r8, r8)
2000207a:	46c0      	nop			; (mov r8, r8)
2000207c:	46bd      	mov	sp, r7
2000207e:	b004      	add	sp, #16
20002080:	bd80      	pop	{r7, pc}
20002082:	46c0      	nop			; (mov r8, r8)
20002084:	0000ff8f 	andeq	pc, r0, pc, lsl #31
20002088:	00008fff 	strdeq	r8, [r0], -pc	; <UNPREDICTABLE>

2000208c <TIM_SetCompare1>:
  * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint32_t Compare1)
{
2000208c:	b580      	push	{r7, lr}
2000208e:	b082      	sub	sp, #8
20002090:	af00      	add	r7, sp, #0
20002092:	6078      	str	r0, [r7, #4]
20002094:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
20002096:	687b      	ldr	r3, [r7, #4]
20002098:	683a      	ldr	r2, [r7, #0]
2000209a:	635a      	str	r2, [r3, #52]	; 0x34
}
2000209c:	46c0      	nop			; (mov r8, r8)
2000209e:	46bd      	mov	sp, r7
200020a0:	b002      	add	sp, #8
200020a2:	bd80      	pop	{r7, pc}

200020a4 <TIM_SetCompare2>:
  *         peripheral.
  * @param  Compare2: specifies the Capture Compare2 register new value.
  * @retval None
  */
void TIM_SetCompare2(TIM_TypeDef* TIMx, uint32_t Compare2)
{
200020a4:	b580      	push	{r7, lr}
200020a6:	b082      	sub	sp, #8
200020a8:	af00      	add	r7, sp, #0
200020aa:	6078      	str	r0, [r7, #4]
200020ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
200020ae:	687b      	ldr	r3, [r7, #4]
200020b0:	683a      	ldr	r2, [r7, #0]
200020b2:	639a      	str	r2, [r3, #56]	; 0x38
}
200020b4:	46c0      	nop			; (mov r8, r8)
200020b6:	46bd      	mov	sp, r7
200020b8:	b002      	add	sp, #8
200020ba:	bd80      	pop	{r7, pc}

200020bc <TIM_SetCompare3>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare3: specifies the Capture Compare3 register new value.
  * @retval None
  */
void TIM_SetCompare3(TIM_TypeDef* TIMx, uint32_t Compare3)
{
200020bc:	b580      	push	{r7, lr}
200020be:	b082      	sub	sp, #8
200020c0:	af00      	add	r7, sp, #0
200020c2:	6078      	str	r0, [r7, #4]
200020c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
200020c6:	687b      	ldr	r3, [r7, #4]
200020c8:	683a      	ldr	r2, [r7, #0]
200020ca:	63da      	str	r2, [r3, #60]	; 0x3c
}
200020cc:	46c0      	nop			; (mov r8, r8)
200020ce:	46bd      	mov	sp, r7
200020d0:	b002      	add	sp, #8
200020d2:	bd80      	pop	{r7, pc}

200020d4 <TIM_SetCompare4>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare4: specifies the Capture Compare4 register new value.
  * @retval None
  */
void TIM_SetCompare4(TIM_TypeDef* TIMx, uint32_t Compare4)
{
200020d4:	b580      	push	{r7, lr}
200020d6:	b082      	sub	sp, #8
200020d8:	af00      	add	r7, sp, #0
200020da:	6078      	str	r0, [r7, #4]
200020dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
200020de:	687b      	ldr	r3, [r7, #4]
200020e0:	683a      	ldr	r2, [r7, #0]
200020e2:	641a      	str	r2, [r3, #64]	; 0x40
}
200020e4:	46c0      	nop			; (mov r8, r8)
200020e6:	46bd      	mov	sp, r7
200020e8:	b002      	add	sp, #8
200020ea:	bd80      	pop	{r7, pc}

200020ec <TIM_ForcedOC1Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC1REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC1REF.
  * @retval None
  */
void TIM_ForcedOC1Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
200020ec:	b580      	push	{r7, lr}
200020ee:	b084      	sub	sp, #16
200020f0:	af00      	add	r7, sp, #0
200020f2:	6078      	str	r0, [r7, #4]
200020f4:	000a      	movs	r2, r1
200020f6:	1cbb      	adds	r3, r7, #2
200020f8:	801a      	strh	r2, [r3, #0]
  uint16_t tmpccmr1 = 0;
200020fa:	200e      	movs	r0, #14
200020fc:	183b      	adds	r3, r7, r0
200020fe:	2200      	movs	r2, #0
20002100:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
20002102:	183b      	adds	r3, r7, r0
20002104:	687a      	ldr	r2, [r7, #4]
20002106:	8b12      	ldrh	r2, [r2, #24]
20002108:	801a      	strh	r2, [r3, #0]

  /* Reset the OC1M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1M;
2000210a:	183b      	adds	r3, r7, r0
2000210c:	183a      	adds	r2, r7, r0
2000210e:	8812      	ldrh	r2, [r2, #0]
20002110:	2170      	movs	r1, #112	; 0x70
20002112:	438a      	bics	r2, r1
20002114:	801a      	strh	r2, [r3, #0]

  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
20002116:	183b      	adds	r3, r7, r0
20002118:	1839      	adds	r1, r7, r0
2000211a:	1cba      	adds	r2, r7, #2
2000211c:	8809      	ldrh	r1, [r1, #0]
2000211e:	8812      	ldrh	r2, [r2, #0]
20002120:	430a      	orrs	r2, r1
20002122:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
20002124:	687b      	ldr	r3, [r7, #4]
20002126:	183a      	adds	r2, r7, r0
20002128:	8812      	ldrh	r2, [r2, #0]
2000212a:	831a      	strh	r2, [r3, #24]
}
2000212c:	46c0      	nop			; (mov r8, r8)
2000212e:	46bd      	mov	sp, r7
20002130:	b004      	add	sp, #16
20002132:	bd80      	pop	{r7, pc}

20002134 <TIM_ForcedOC2Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC2REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC2REF.
  * @retval None
  */
void TIM_ForcedOC2Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
20002134:	b580      	push	{r7, lr}
20002136:	b084      	sub	sp, #16
20002138:	af00      	add	r7, sp, #0
2000213a:	6078      	str	r0, [r7, #4]
2000213c:	000a      	movs	r2, r1
2000213e:	1cbb      	adds	r3, r7, #2
20002140:	801a      	strh	r2, [r3, #0]
  uint16_t tmpccmr1 = 0;
20002142:	200e      	movs	r0, #14
20002144:	183b      	adds	r3, r7, r0
20002146:	2200      	movs	r2, #0
20002148:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
2000214a:	183b      	adds	r3, r7, r0
2000214c:	687a      	ldr	r2, [r7, #4]
2000214e:	8b12      	ldrh	r2, [r2, #24]
20002150:	801a      	strh	r2, [r3, #0]

  /* Reset the OC2M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2M;
20002152:	183b      	adds	r3, r7, r0
20002154:	183a      	adds	r2, r7, r0
20002156:	8812      	ldrh	r2, [r2, #0]
20002158:	4909      	ldr	r1, [pc, #36]	; (20002180 <TIM_ForcedOC2Config+0x4c>)
2000215a:	400a      	ands	r2, r1
2000215c:	801a      	strh	r2, [r3, #0]

  /* Configure The Forced output Mode */
  tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
2000215e:	1cbb      	adds	r3, r7, #2
20002160:	881b      	ldrh	r3, [r3, #0]
20002162:	021b      	lsls	r3, r3, #8
20002164:	b299      	uxth	r1, r3
20002166:	183b      	adds	r3, r7, r0
20002168:	183a      	adds	r2, r7, r0
2000216a:	8812      	ldrh	r2, [r2, #0]
2000216c:	430a      	orrs	r2, r1
2000216e:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
20002170:	687b      	ldr	r3, [r7, #4]
20002172:	183a      	adds	r2, r7, r0
20002174:	8812      	ldrh	r2, [r2, #0]
20002176:	831a      	strh	r2, [r3, #24]
}
20002178:	46c0      	nop			; (mov r8, r8)
2000217a:	46bd      	mov	sp, r7
2000217c:	b004      	add	sp, #16
2000217e:	bd80      	pop	{r7, pc}
20002180:	ffff8fff 			; <UNDEFINED> instruction: 0xffff8fff

20002184 <TIM_ForcedOC3Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC3REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC3REF.
  * @retval None
  */
void TIM_ForcedOC3Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
20002184:	b580      	push	{r7, lr}
20002186:	b084      	sub	sp, #16
20002188:	af00      	add	r7, sp, #0
2000218a:	6078      	str	r0, [r7, #4]
2000218c:	000a      	movs	r2, r1
2000218e:	1cbb      	adds	r3, r7, #2
20002190:	801a      	strh	r2, [r3, #0]
  uint16_t tmpccmr2 = 0;
20002192:	200e      	movs	r0, #14
20002194:	183b      	adds	r3, r7, r0
20002196:	2200      	movs	r2, #0
20002198:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));

  tmpccmr2 = TIMx->CCMR2;
2000219a:	183b      	adds	r3, r7, r0
2000219c:	687a      	ldr	r2, [r7, #4]
2000219e:	8b92      	ldrh	r2, [r2, #28]
200021a0:	801a      	strh	r2, [r3, #0]

  /* Reset the OC1M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3M;
200021a2:	183b      	adds	r3, r7, r0
200021a4:	183a      	adds	r2, r7, r0
200021a6:	8812      	ldrh	r2, [r2, #0]
200021a8:	2170      	movs	r1, #112	; 0x70
200021aa:	438a      	bics	r2, r1
200021ac:	801a      	strh	r2, [r3, #0]

  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
200021ae:	183b      	adds	r3, r7, r0
200021b0:	1839      	adds	r1, r7, r0
200021b2:	1cba      	adds	r2, r7, #2
200021b4:	8809      	ldrh	r1, [r1, #0]
200021b6:	8812      	ldrh	r2, [r2, #0]
200021b8:	430a      	orrs	r2, r1
200021ba:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
200021bc:	687b      	ldr	r3, [r7, #4]
200021be:	183a      	adds	r2, r7, r0
200021c0:	8812      	ldrh	r2, [r2, #0]
200021c2:	839a      	strh	r2, [r3, #28]
}
200021c4:	46c0      	nop			; (mov r8, r8)
200021c6:	46bd      	mov	sp, r7
200021c8:	b004      	add	sp, #16
200021ca:	bd80      	pop	{r7, pc}

200021cc <TIM_ForcedOC4Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC4REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC4REF.
  * @retval None
  */
void TIM_ForcedOC4Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
200021cc:	b580      	push	{r7, lr}
200021ce:	b084      	sub	sp, #16
200021d0:	af00      	add	r7, sp, #0
200021d2:	6078      	str	r0, [r7, #4]
200021d4:	000a      	movs	r2, r1
200021d6:	1cbb      	adds	r3, r7, #2
200021d8:	801a      	strh	r2, [r3, #0]
  uint16_t tmpccmr2 = 0;
200021da:	200e      	movs	r0, #14
200021dc:	183b      	adds	r3, r7, r0
200021de:	2200      	movs	r2, #0
200021e0:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
200021e2:	183b      	adds	r3, r7, r0
200021e4:	687a      	ldr	r2, [r7, #4]
200021e6:	8b92      	ldrh	r2, [r2, #28]
200021e8:	801a      	strh	r2, [r3, #0]

  /* Reset the OC2M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4M;
200021ea:	183b      	adds	r3, r7, r0
200021ec:	183a      	adds	r2, r7, r0
200021ee:	8812      	ldrh	r2, [r2, #0]
200021f0:	4909      	ldr	r1, [pc, #36]	; (20002218 <TIM_ForcedOC4Config+0x4c>)
200021f2:	400a      	ands	r2, r1
200021f4:	801a      	strh	r2, [r3, #0]

  /* Configure The Forced output Mode */
  tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
200021f6:	1cbb      	adds	r3, r7, #2
200021f8:	881b      	ldrh	r3, [r3, #0]
200021fa:	021b      	lsls	r3, r3, #8
200021fc:	b299      	uxth	r1, r3
200021fe:	183b      	adds	r3, r7, r0
20002200:	183a      	adds	r2, r7, r0
20002202:	8812      	ldrh	r2, [r2, #0]
20002204:	430a      	orrs	r2, r1
20002206:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
20002208:	687b      	ldr	r3, [r7, #4]
2000220a:	183a      	adds	r2, r7, r0
2000220c:	8812      	ldrh	r2, [r2, #0]
2000220e:	839a      	strh	r2, [r3, #28]
}
20002210:	46c0      	nop			; (mov r8, r8)
20002212:	46bd      	mov	sp, r7
20002214:	b004      	add	sp, #16
20002216:	bd80      	pop	{r7, pc}
20002218:	ffff8fff 			; <UNDEFINED> instruction: 0xffff8fff

2000221c <TIM_OC1PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
2000221c:	b580      	push	{r7, lr}
2000221e:	b084      	sub	sp, #16
20002220:	af00      	add	r7, sp, #0
20002222:	6078      	str	r0, [r7, #4]
20002224:	000a      	movs	r2, r1
20002226:	1cbb      	adds	r3, r7, #2
20002228:	801a      	strh	r2, [r3, #0]
  uint16_t tmpccmr1 = 0;
2000222a:	200e      	movs	r0, #14
2000222c:	183b      	adds	r3, r7, r0
2000222e:	2200      	movs	r2, #0
20002230:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
20002232:	183b      	adds	r3, r7, r0
20002234:	687a      	ldr	r2, [r7, #4]
20002236:	8b12      	ldrh	r2, [r2, #24]
20002238:	801a      	strh	r2, [r3, #0]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC1PE);
2000223a:	183b      	adds	r3, r7, r0
2000223c:	183a      	adds	r2, r7, r0
2000223e:	8812      	ldrh	r2, [r2, #0]
20002240:	2108      	movs	r1, #8
20002242:	438a      	bics	r2, r1
20002244:	801a      	strh	r2, [r3, #0]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
20002246:	183b      	adds	r3, r7, r0
20002248:	1839      	adds	r1, r7, r0
2000224a:	1cba      	adds	r2, r7, #2
2000224c:	8809      	ldrh	r1, [r1, #0]
2000224e:	8812      	ldrh	r2, [r2, #0]
20002250:	430a      	orrs	r2, r1
20002252:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
20002254:	687b      	ldr	r3, [r7, #4]
20002256:	183a      	adds	r2, r7, r0
20002258:	8812      	ldrh	r2, [r2, #0]
2000225a:	831a      	strh	r2, [r3, #24]
}
2000225c:	46c0      	nop			; (mov r8, r8)
2000225e:	46bd      	mov	sp, r7
20002260:	b004      	add	sp, #16
20002262:	bd80      	pop	{r7, pc}

20002264 <TIM_OC2PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
20002264:	b580      	push	{r7, lr}
20002266:	b084      	sub	sp, #16
20002268:	af00      	add	r7, sp, #0
2000226a:	6078      	str	r0, [r7, #4]
2000226c:	000a      	movs	r2, r1
2000226e:	1cbb      	adds	r3, r7, #2
20002270:	801a      	strh	r2, [r3, #0]
  uint16_t tmpccmr1 = 0;
20002272:	200e      	movs	r0, #14
20002274:	183b      	adds	r3, r7, r0
20002276:	2200      	movs	r2, #0
20002278:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
2000227a:	183b      	adds	r3, r7, r0
2000227c:	687a      	ldr	r2, [r7, #4]
2000227e:	8b12      	ldrh	r2, [r2, #24]
20002280:	801a      	strh	r2, [r3, #0]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2PE);
20002282:	183b      	adds	r3, r7, r0
20002284:	183a      	adds	r2, r7, r0
20002286:	8812      	ldrh	r2, [r2, #0]
20002288:	4909      	ldr	r1, [pc, #36]	; (200022b0 <TIM_OC2PreloadConfig+0x4c>)
2000228a:	400a      	ands	r2, r1
2000228c:	801a      	strh	r2, [r3, #0]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
2000228e:	1cbb      	adds	r3, r7, #2
20002290:	881b      	ldrh	r3, [r3, #0]
20002292:	021b      	lsls	r3, r3, #8
20002294:	b299      	uxth	r1, r3
20002296:	183b      	adds	r3, r7, r0
20002298:	183a      	adds	r2, r7, r0
2000229a:	8812      	ldrh	r2, [r2, #0]
2000229c:	430a      	orrs	r2, r1
2000229e:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
200022a0:	687b      	ldr	r3, [r7, #4]
200022a2:	183a      	adds	r2, r7, r0
200022a4:	8812      	ldrh	r2, [r2, #0]
200022a6:	831a      	strh	r2, [r3, #24]
}
200022a8:	46c0      	nop			; (mov r8, r8)
200022aa:	46bd      	mov	sp, r7
200022ac:	b004      	add	sp, #16
200022ae:	bd80      	pop	{r7, pc}
200022b0:	fffff7ff 			; <UNDEFINED> instruction: 0xfffff7ff

200022b4 <TIM_OC3PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
200022b4:	b580      	push	{r7, lr}
200022b6:	b084      	sub	sp, #16
200022b8:	af00      	add	r7, sp, #0
200022ba:	6078      	str	r0, [r7, #4]
200022bc:	000a      	movs	r2, r1
200022be:	1cbb      	adds	r3, r7, #2
200022c0:	801a      	strh	r2, [r3, #0]
  uint16_t tmpccmr2 = 0;
200022c2:	200e      	movs	r0, #14
200022c4:	183b      	adds	r3, r7, r0
200022c6:	2200      	movs	r2, #0
200022c8:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
200022ca:	183b      	adds	r3, r7, r0
200022cc:	687a      	ldr	r2, [r7, #4]
200022ce:	8b92      	ldrh	r2, [r2, #28]
200022d0:	801a      	strh	r2, [r3, #0]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
200022d2:	183b      	adds	r3, r7, r0
200022d4:	183a      	adds	r2, r7, r0
200022d6:	8812      	ldrh	r2, [r2, #0]
200022d8:	2108      	movs	r1, #8
200022da:	438a      	bics	r2, r1
200022dc:	801a      	strh	r2, [r3, #0]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
200022de:	183b      	adds	r3, r7, r0
200022e0:	1839      	adds	r1, r7, r0
200022e2:	1cba      	adds	r2, r7, #2
200022e4:	8809      	ldrh	r1, [r1, #0]
200022e6:	8812      	ldrh	r2, [r2, #0]
200022e8:	430a      	orrs	r2, r1
200022ea:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
200022ec:	687b      	ldr	r3, [r7, #4]
200022ee:	183a      	adds	r2, r7, r0
200022f0:	8812      	ldrh	r2, [r2, #0]
200022f2:	839a      	strh	r2, [r3, #28]
}
200022f4:	46c0      	nop			; (mov r8, r8)
200022f6:	46bd      	mov	sp, r7
200022f8:	b004      	add	sp, #16
200022fa:	bd80      	pop	{r7, pc}

200022fc <TIM_OC4PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
200022fc:	b580      	push	{r7, lr}
200022fe:	b084      	sub	sp, #16
20002300:	af00      	add	r7, sp, #0
20002302:	6078      	str	r0, [r7, #4]
20002304:	000a      	movs	r2, r1
20002306:	1cbb      	adds	r3, r7, #2
20002308:	801a      	strh	r2, [r3, #0]
  uint16_t tmpccmr2 = 0;
2000230a:	200e      	movs	r0, #14
2000230c:	183b      	adds	r3, r7, r0
2000230e:	2200      	movs	r2, #0
20002310:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
20002312:	183b      	adds	r3, r7, r0
20002314:	687a      	ldr	r2, [r7, #4]
20002316:	8b92      	ldrh	r2, [r2, #28]
20002318:	801a      	strh	r2, [r3, #0]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
2000231a:	183b      	adds	r3, r7, r0
2000231c:	183a      	adds	r2, r7, r0
2000231e:	8812      	ldrh	r2, [r2, #0]
20002320:	4909      	ldr	r1, [pc, #36]	; (20002348 <TIM_OC4PreloadConfig+0x4c>)
20002322:	400a      	ands	r2, r1
20002324:	801a      	strh	r2, [r3, #0]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
20002326:	1cbb      	adds	r3, r7, #2
20002328:	881b      	ldrh	r3, [r3, #0]
2000232a:	021b      	lsls	r3, r3, #8
2000232c:	b299      	uxth	r1, r3
2000232e:	183b      	adds	r3, r7, r0
20002330:	183a      	adds	r2, r7, r0
20002332:	8812      	ldrh	r2, [r2, #0]
20002334:	430a      	orrs	r2, r1
20002336:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
20002338:	687b      	ldr	r3, [r7, #4]
2000233a:	183a      	adds	r2, r7, r0
2000233c:	8812      	ldrh	r2, [r2, #0]
2000233e:	839a      	strh	r2, [r3, #28]
}
20002340:	46c0      	nop			; (mov r8, r8)
20002342:	46bd      	mov	sp, r7
20002344:	b004      	add	sp, #16
20002346:	bd80      	pop	{r7, pc}
20002348:	fffff7ff 			; <UNDEFINED> instruction: 0xfffff7ff

2000234c <TIM_OC1FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC1FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
2000234c:	b580      	push	{r7, lr}
2000234e:	b084      	sub	sp, #16
20002350:	af00      	add	r7, sp, #0
20002352:	6078      	str	r0, [r7, #4]
20002354:	000a      	movs	r2, r1
20002356:	1cbb      	adds	r3, r7, #2
20002358:	801a      	strh	r2, [r3, #0]
  uint16_t tmpccmr1 = 0;
2000235a:	200e      	movs	r0, #14
2000235c:	183b      	adds	r3, r7, r0
2000235e:	2200      	movs	r2, #0
20002360:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
20002362:	183b      	adds	r3, r7, r0
20002364:	687a      	ldr	r2, [r7, #4]
20002366:	8b12      	ldrh	r2, [r2, #24]
20002368:	801a      	strh	r2, [r3, #0]

  /* Reset the OC1FE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1FE;
2000236a:	183b      	adds	r3, r7, r0
2000236c:	183a      	adds	r2, r7, r0
2000236e:	8812      	ldrh	r2, [r2, #0]
20002370:	2104      	movs	r1, #4
20002372:	438a      	bics	r2, r1
20002374:	801a      	strh	r2, [r3, #0]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
20002376:	183b      	adds	r3, r7, r0
20002378:	1839      	adds	r1, r7, r0
2000237a:	1cba      	adds	r2, r7, #2
2000237c:	8809      	ldrh	r1, [r1, #0]
2000237e:	8812      	ldrh	r2, [r2, #0]
20002380:	430a      	orrs	r2, r1
20002382:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
20002384:	687b      	ldr	r3, [r7, #4]
20002386:	183a      	adds	r2, r7, r0
20002388:	8812      	ldrh	r2, [r2, #0]
2000238a:	831a      	strh	r2, [r3, #24]
}
2000238c:	46c0      	nop			; (mov r8, r8)
2000238e:	46bd      	mov	sp, r7
20002390:	b004      	add	sp, #16
20002392:	bd80      	pop	{r7, pc}

20002394 <TIM_OC2FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC2FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
20002394:	b580      	push	{r7, lr}
20002396:	b084      	sub	sp, #16
20002398:	af00      	add	r7, sp, #0
2000239a:	6078      	str	r0, [r7, #4]
2000239c:	000a      	movs	r2, r1
2000239e:	1cbb      	adds	r3, r7, #2
200023a0:	801a      	strh	r2, [r3, #0]
  uint16_t tmpccmr1 = 0;
200023a2:	200e      	movs	r0, #14
200023a4:	183b      	adds	r3, r7, r0
200023a6:	2200      	movs	r2, #0
200023a8:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
200023aa:	183b      	adds	r3, r7, r0
200023ac:	687a      	ldr	r2, [r7, #4]
200023ae:	8b12      	ldrh	r2, [r2, #24]
200023b0:	801a      	strh	r2, [r3, #0]

  /* Reset the OC2FE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2FE);
200023b2:	183b      	adds	r3, r7, r0
200023b4:	183a      	adds	r2, r7, r0
200023b6:	8812      	ldrh	r2, [r2, #0]
200023b8:	4909      	ldr	r1, [pc, #36]	; (200023e0 <TIM_OC2FastConfig+0x4c>)
200023ba:	400a      	ands	r2, r1
200023bc:	801a      	strh	r2, [r3, #0]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
200023be:	1cbb      	adds	r3, r7, #2
200023c0:	881b      	ldrh	r3, [r3, #0]
200023c2:	021b      	lsls	r3, r3, #8
200023c4:	b299      	uxth	r1, r3
200023c6:	183b      	adds	r3, r7, r0
200023c8:	183a      	adds	r2, r7, r0
200023ca:	8812      	ldrh	r2, [r2, #0]
200023cc:	430a      	orrs	r2, r1
200023ce:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
200023d0:	687b      	ldr	r3, [r7, #4]
200023d2:	183a      	adds	r2, r7, r0
200023d4:	8812      	ldrh	r2, [r2, #0]
200023d6:	831a      	strh	r2, [r3, #24]
}
200023d8:	46c0      	nop			; (mov r8, r8)
200023da:	46bd      	mov	sp, r7
200023dc:	b004      	add	sp, #16
200023de:	bd80      	pop	{r7, pc}
200023e0:	fffffbff 			; <UNDEFINED> instruction: 0xfffffbff

200023e4 <TIM_OC3FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC3FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
200023e4:	b580      	push	{r7, lr}
200023e6:	b084      	sub	sp, #16
200023e8:	af00      	add	r7, sp, #0
200023ea:	6078      	str	r0, [r7, #4]
200023ec:	000a      	movs	r2, r1
200023ee:	1cbb      	adds	r3, r7, #2
200023f0:	801a      	strh	r2, [r3, #0]
  uint16_t tmpccmr2 = 0;
200023f2:	200e      	movs	r0, #14
200023f4:	183b      	adds	r3, r7, r0
200023f6:	2200      	movs	r2, #0
200023f8:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
200023fa:	183b      	adds	r3, r7, r0
200023fc:	687a      	ldr	r2, [r7, #4]
200023fe:	8b92      	ldrh	r2, [r2, #28]
20002400:	801a      	strh	r2, [r3, #0]

  /* Reset the OC3FE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3FE;
20002402:	183b      	adds	r3, r7, r0
20002404:	183a      	adds	r2, r7, r0
20002406:	8812      	ldrh	r2, [r2, #0]
20002408:	2104      	movs	r1, #4
2000240a:	438a      	bics	r2, r1
2000240c:	801a      	strh	r2, [r3, #0]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
2000240e:	183b      	adds	r3, r7, r0
20002410:	1839      	adds	r1, r7, r0
20002412:	1cba      	adds	r2, r7, #2
20002414:	8809      	ldrh	r1, [r1, #0]
20002416:	8812      	ldrh	r2, [r2, #0]
20002418:	430a      	orrs	r2, r1
2000241a:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
2000241c:	687b      	ldr	r3, [r7, #4]
2000241e:	183a      	adds	r2, r7, r0
20002420:	8812      	ldrh	r2, [r2, #0]
20002422:	839a      	strh	r2, [r3, #28]
}
20002424:	46c0      	nop			; (mov r8, r8)
20002426:	46bd      	mov	sp, r7
20002428:	b004      	add	sp, #16
2000242a:	bd80      	pop	{r7, pc}

2000242c <TIM_OC4FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC4FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
2000242c:	b580      	push	{r7, lr}
2000242e:	b084      	sub	sp, #16
20002430:	af00      	add	r7, sp, #0
20002432:	6078      	str	r0, [r7, #4]
20002434:	000a      	movs	r2, r1
20002436:	1cbb      	adds	r3, r7, #2
20002438:	801a      	strh	r2, [r3, #0]
  uint16_t tmpccmr2 = 0;
2000243a:	200e      	movs	r0, #14
2000243c:	183b      	adds	r3, r7, r0
2000243e:	2200      	movs	r2, #0
20002440:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
20002442:	183b      	adds	r3, r7, r0
20002444:	687a      	ldr	r2, [r7, #4]
20002446:	8b92      	ldrh	r2, [r2, #28]
20002448:	801a      	strh	r2, [r3, #0]

  /* Reset the OC4FE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4FE);
2000244a:	183b      	adds	r3, r7, r0
2000244c:	183a      	adds	r2, r7, r0
2000244e:	8812      	ldrh	r2, [r2, #0]
20002450:	4909      	ldr	r1, [pc, #36]	; (20002478 <TIM_OC4FastConfig+0x4c>)
20002452:	400a      	ands	r2, r1
20002454:	801a      	strh	r2, [r3, #0]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
20002456:	1cbb      	adds	r3, r7, #2
20002458:	881b      	ldrh	r3, [r3, #0]
2000245a:	021b      	lsls	r3, r3, #8
2000245c:	b299      	uxth	r1, r3
2000245e:	183b      	adds	r3, r7, r0
20002460:	183a      	adds	r2, r7, r0
20002462:	8812      	ldrh	r2, [r2, #0]
20002464:	430a      	orrs	r2, r1
20002466:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
20002468:	687b      	ldr	r3, [r7, #4]
2000246a:	183a      	adds	r2, r7, r0
2000246c:	8812      	ldrh	r2, [r2, #0]
2000246e:	839a      	strh	r2, [r3, #28]
}
20002470:	46c0      	nop			; (mov r8, r8)
20002472:	46bd      	mov	sp, r7
20002474:	b004      	add	sp, #16
20002476:	bd80      	pop	{r7, pc}
20002478:	fffffbff 			; <UNDEFINED> instruction: 0xfffffbff

2000247c <TIM_ClearOC1Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC1Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
2000247c:	b580      	push	{r7, lr}
2000247e:	b084      	sub	sp, #16
20002480:	af00      	add	r7, sp, #0
20002482:	6078      	str	r0, [r7, #4]
20002484:	000a      	movs	r2, r1
20002486:	1cbb      	adds	r3, r7, #2
20002488:	801a      	strh	r2, [r3, #0]
  uint16_t tmpccmr1 = 0;
2000248a:	200e      	movs	r0, #14
2000248c:	183b      	adds	r3, r7, r0
2000248e:	2200      	movs	r2, #0
20002490:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
20002492:	183b      	adds	r3, r7, r0
20002494:	687a      	ldr	r2, [r7, #4]
20002496:	8b12      	ldrh	r2, [r2, #24]
20002498:	801a      	strh	r2, [r3, #0]

  /* Reset the OC1CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1CE;
2000249a:	183b      	adds	r3, r7, r0
2000249c:	183a      	adds	r2, r7, r0
2000249e:	8812      	ldrh	r2, [r2, #0]
200024a0:	2180      	movs	r1, #128	; 0x80
200024a2:	438a      	bics	r2, r1
200024a4:	801a      	strh	r2, [r3, #0]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
200024a6:	183b      	adds	r3, r7, r0
200024a8:	1839      	adds	r1, r7, r0
200024aa:	1cba      	adds	r2, r7, #2
200024ac:	8809      	ldrh	r1, [r1, #0]
200024ae:	8812      	ldrh	r2, [r2, #0]
200024b0:	430a      	orrs	r2, r1
200024b2:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
200024b4:	687b      	ldr	r3, [r7, #4]
200024b6:	183a      	adds	r2, r7, r0
200024b8:	8812      	ldrh	r2, [r2, #0]
200024ba:	831a      	strh	r2, [r3, #24]
}
200024bc:	46c0      	nop			; (mov r8, r8)
200024be:	46bd      	mov	sp, r7
200024c0:	b004      	add	sp, #16
200024c2:	bd80      	pop	{r7, pc}

200024c4 <TIM_ClearOC2Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC2Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
200024c4:	b580      	push	{r7, lr}
200024c6:	b084      	sub	sp, #16
200024c8:	af00      	add	r7, sp, #0
200024ca:	6078      	str	r0, [r7, #4]
200024cc:	000a      	movs	r2, r1
200024ce:	1cbb      	adds	r3, r7, #2
200024d0:	801a      	strh	r2, [r3, #0]
  uint16_t tmpccmr1 = 0;
200024d2:	200e      	movs	r0, #14
200024d4:	183b      	adds	r3, r7, r0
200024d6:	2200      	movs	r2, #0
200024d8:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
200024da:	183b      	adds	r3, r7, r0
200024dc:	687a      	ldr	r2, [r7, #4]
200024de:	8b12      	ldrh	r2, [r2, #24]
200024e0:	801a      	strh	r2, [r3, #0]

  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2CE;
200024e2:	183b      	adds	r3, r7, r0
200024e4:	183a      	adds	r2, r7, r0
200024e6:	8812      	ldrh	r2, [r2, #0]
200024e8:	0452      	lsls	r2, r2, #17
200024ea:	0c52      	lsrs	r2, r2, #17
200024ec:	801a      	strh	r2, [r3, #0]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
200024ee:	1cbb      	adds	r3, r7, #2
200024f0:	881b      	ldrh	r3, [r3, #0]
200024f2:	021b      	lsls	r3, r3, #8
200024f4:	b299      	uxth	r1, r3
200024f6:	183b      	adds	r3, r7, r0
200024f8:	183a      	adds	r2, r7, r0
200024fa:	8812      	ldrh	r2, [r2, #0]
200024fc:	430a      	orrs	r2, r1
200024fe:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
20002500:	687b      	ldr	r3, [r7, #4]
20002502:	183a      	adds	r2, r7, r0
20002504:	8812      	ldrh	r2, [r2, #0]
20002506:	831a      	strh	r2, [r3, #24]
}
20002508:	46c0      	nop			; (mov r8, r8)
2000250a:	46bd      	mov	sp, r7
2000250c:	b004      	add	sp, #16
2000250e:	bd80      	pop	{r7, pc}

20002510 <TIM_ClearOC3Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC3Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
20002510:	b580      	push	{r7, lr}
20002512:	b084      	sub	sp, #16
20002514:	af00      	add	r7, sp, #0
20002516:	6078      	str	r0, [r7, #4]
20002518:	000a      	movs	r2, r1
2000251a:	1cbb      	adds	r3, r7, #2
2000251c:	801a      	strh	r2, [r3, #0]
  uint16_t tmpccmr2 = 0;
2000251e:	200e      	movs	r0, #14
20002520:	183b      	adds	r3, r7, r0
20002522:	2200      	movs	r2, #0
20002524:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
20002526:	183b      	adds	r3, r7, r0
20002528:	687a      	ldr	r2, [r7, #4]
2000252a:	8b92      	ldrh	r2, [r2, #28]
2000252c:	801a      	strh	r2, [r3, #0]

  /* Reset the OC3CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3CE;
2000252e:	183b      	adds	r3, r7, r0
20002530:	183a      	adds	r2, r7, r0
20002532:	8812      	ldrh	r2, [r2, #0]
20002534:	2180      	movs	r1, #128	; 0x80
20002536:	438a      	bics	r2, r1
20002538:	801a      	strh	r2, [r3, #0]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
2000253a:	183b      	adds	r3, r7, r0
2000253c:	1839      	adds	r1, r7, r0
2000253e:	1cba      	adds	r2, r7, #2
20002540:	8809      	ldrh	r1, [r1, #0]
20002542:	8812      	ldrh	r2, [r2, #0]
20002544:	430a      	orrs	r2, r1
20002546:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
20002548:	687b      	ldr	r3, [r7, #4]
2000254a:	183a      	adds	r2, r7, r0
2000254c:	8812      	ldrh	r2, [r2, #0]
2000254e:	839a      	strh	r2, [r3, #28]
}
20002550:	46c0      	nop			; (mov r8, r8)
20002552:	46bd      	mov	sp, r7
20002554:	b004      	add	sp, #16
20002556:	bd80      	pop	{r7, pc}

20002558 <TIM_ClearOC4Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC4Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
20002558:	b580      	push	{r7, lr}
2000255a:	b084      	sub	sp, #16
2000255c:	af00      	add	r7, sp, #0
2000255e:	6078      	str	r0, [r7, #4]
20002560:	000a      	movs	r2, r1
20002562:	1cbb      	adds	r3, r7, #2
20002564:	801a      	strh	r2, [r3, #0]
  uint16_t tmpccmr2 = 0;
20002566:	200e      	movs	r0, #14
20002568:	183b      	adds	r3, r7, r0
2000256a:	2200      	movs	r2, #0
2000256c:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
2000256e:	183b      	adds	r3, r7, r0
20002570:	687a      	ldr	r2, [r7, #4]
20002572:	8b92      	ldrh	r2, [r2, #28]
20002574:	801a      	strh	r2, [r3, #0]

  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4CE;
20002576:	183b      	adds	r3, r7, r0
20002578:	183a      	adds	r2, r7, r0
2000257a:	8812      	ldrh	r2, [r2, #0]
2000257c:	0452      	lsls	r2, r2, #17
2000257e:	0c52      	lsrs	r2, r2, #17
20002580:	801a      	strh	r2, [r3, #0]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
20002582:	1cbb      	adds	r3, r7, #2
20002584:	881b      	ldrh	r3, [r3, #0]
20002586:	021b      	lsls	r3, r3, #8
20002588:	b299      	uxth	r1, r3
2000258a:	183b      	adds	r3, r7, r0
2000258c:	183a      	adds	r2, r7, r0
2000258e:	8812      	ldrh	r2, [r2, #0]
20002590:	430a      	orrs	r2, r1
20002592:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
20002594:	687b      	ldr	r3, [r7, #4]
20002596:	183a      	adds	r2, r7, r0
20002598:	8812      	ldrh	r2, [r2, #0]
2000259a:	839a      	strh	r2, [r3, #28]
}
2000259c:	46c0      	nop			; (mov r8, r8)
2000259e:	46bd      	mov	sp, r7
200025a0:	b004      	add	sp, #16
200025a2:	bd80      	pop	{r7, pc}

200025a4 <TIM_OC1PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
200025a4:	b580      	push	{r7, lr}
200025a6:	b084      	sub	sp, #16
200025a8:	af00      	add	r7, sp, #0
200025aa:	6078      	str	r0, [r7, #4]
200025ac:	000a      	movs	r2, r1
200025ae:	1cbb      	adds	r3, r7, #2
200025b0:	801a      	strh	r2, [r3, #0]
  uint16_t tmpccer = 0;
200025b2:	200e      	movs	r0, #14
200025b4:	183b      	adds	r3, r7, r0
200025b6:	2200      	movs	r2, #0
200025b8:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
200025ba:	183b      	adds	r3, r7, r0
200025bc:	687a      	ldr	r2, [r7, #4]
200025be:	8c12      	ldrh	r2, [r2, #32]
200025c0:	801a      	strh	r2, [r3, #0]

  /* Set or Reset the CC1P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC1P);
200025c2:	183b      	adds	r3, r7, r0
200025c4:	183a      	adds	r2, r7, r0
200025c6:	8812      	ldrh	r2, [r2, #0]
200025c8:	2102      	movs	r1, #2
200025ca:	438a      	bics	r2, r1
200025cc:	801a      	strh	r2, [r3, #0]
  tmpccer |= TIM_OCPolarity;
200025ce:	183b      	adds	r3, r7, r0
200025d0:	1839      	adds	r1, r7, r0
200025d2:	1cba      	adds	r2, r7, #2
200025d4:	8809      	ldrh	r1, [r1, #0]
200025d6:	8812      	ldrh	r2, [r2, #0]
200025d8:	430a      	orrs	r2, r1
200025da:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
200025dc:	687b      	ldr	r3, [r7, #4]
200025de:	183a      	adds	r2, r7, r0
200025e0:	8812      	ldrh	r2, [r2, #0]
200025e2:	841a      	strh	r2, [r3, #32]
}
200025e4:	46c0      	nop			; (mov r8, r8)
200025e6:	46bd      	mov	sp, r7
200025e8:	b004      	add	sp, #16
200025ea:	bd80      	pop	{r7, pc}

200025ec <TIM_OC1NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
200025ec:	b580      	push	{r7, lr}
200025ee:	b084      	sub	sp, #16
200025f0:	af00      	add	r7, sp, #0
200025f2:	6078      	str	r0, [r7, #4]
200025f4:	000a      	movs	r2, r1
200025f6:	1cbb      	adds	r3, r7, #2
200025f8:	801a      	strh	r2, [r3, #0]
  uint16_t tmpccer = 0;
200025fa:	200e      	movs	r0, #14
200025fc:	183b      	adds	r3, r7, r0
200025fe:	2200      	movs	r2, #0
20002600:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
20002602:	183b      	adds	r3, r7, r0
20002604:	687a      	ldr	r2, [r7, #4]
20002606:	8c12      	ldrh	r2, [r2, #32]
20002608:	801a      	strh	r2, [r3, #0]

  /* Set or Reset the CC1NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
2000260a:	183b      	adds	r3, r7, r0
2000260c:	183a      	adds	r2, r7, r0
2000260e:	8812      	ldrh	r2, [r2, #0]
20002610:	2108      	movs	r1, #8
20002612:	438a      	bics	r2, r1
20002614:	801a      	strh	r2, [r3, #0]
  tmpccer |= TIM_OCNPolarity;
20002616:	183b      	adds	r3, r7, r0
20002618:	1839      	adds	r1, r7, r0
2000261a:	1cba      	adds	r2, r7, #2
2000261c:	8809      	ldrh	r1, [r1, #0]
2000261e:	8812      	ldrh	r2, [r2, #0]
20002620:	430a      	orrs	r2, r1
20002622:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
20002624:	687b      	ldr	r3, [r7, #4]
20002626:	183a      	adds	r2, r7, r0
20002628:	8812      	ldrh	r2, [r2, #0]
2000262a:	841a      	strh	r2, [r3, #32]
}
2000262c:	46c0      	nop			; (mov r8, r8)
2000262e:	46bd      	mov	sp, r7
20002630:	b004      	add	sp, #16
20002632:	bd80      	pop	{r7, pc}

20002634 <TIM_OC2PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
20002634:	b580      	push	{r7, lr}
20002636:	b084      	sub	sp, #16
20002638:	af00      	add	r7, sp, #0
2000263a:	6078      	str	r0, [r7, #4]
2000263c:	000a      	movs	r2, r1
2000263e:	1cbb      	adds	r3, r7, #2
20002640:	801a      	strh	r2, [r3, #0]
  uint16_t tmpccer = 0;
20002642:	200e      	movs	r0, #14
20002644:	183b      	adds	r3, r7, r0
20002646:	2200      	movs	r2, #0
20002648:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
2000264a:	183b      	adds	r3, r7, r0
2000264c:	687a      	ldr	r2, [r7, #4]
2000264e:	8c12      	ldrh	r2, [r2, #32]
20002650:	801a      	strh	r2, [r3, #0]

  /* Set or Reset the CC2P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC2P);
20002652:	183b      	adds	r3, r7, r0
20002654:	183a      	adds	r2, r7, r0
20002656:	8812      	ldrh	r2, [r2, #0]
20002658:	2120      	movs	r1, #32
2000265a:	438a      	bics	r2, r1
2000265c:	801a      	strh	r2, [r3, #0]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
2000265e:	1cbb      	adds	r3, r7, #2
20002660:	881b      	ldrh	r3, [r3, #0]
20002662:	011b      	lsls	r3, r3, #4
20002664:	b299      	uxth	r1, r3
20002666:	183b      	adds	r3, r7, r0
20002668:	183a      	adds	r2, r7, r0
2000266a:	8812      	ldrh	r2, [r2, #0]
2000266c:	430a      	orrs	r2, r1
2000266e:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
20002670:	687b      	ldr	r3, [r7, #4]
20002672:	183a      	adds	r2, r7, r0
20002674:	8812      	ldrh	r2, [r2, #0]
20002676:	841a      	strh	r2, [r3, #32]
}
20002678:	46c0      	nop			; (mov r8, r8)
2000267a:	46bd      	mov	sp, r7
2000267c:	b004      	add	sp, #16
2000267e:	bd80      	pop	{r7, pc}

20002680 <TIM_OC2NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
20002680:	b580      	push	{r7, lr}
20002682:	b084      	sub	sp, #16
20002684:	af00      	add	r7, sp, #0
20002686:	6078      	str	r0, [r7, #4]
20002688:	000a      	movs	r2, r1
2000268a:	1cbb      	adds	r3, r7, #2
2000268c:	801a      	strh	r2, [r3, #0]
  uint16_t tmpccer = 0;
2000268e:	200e      	movs	r0, #14
20002690:	183b      	adds	r3, r7, r0
20002692:	2200      	movs	r2, #0
20002694:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
20002696:	183b      	adds	r3, r7, r0
20002698:	687a      	ldr	r2, [r7, #4]
2000269a:	8c12      	ldrh	r2, [r2, #32]
2000269c:	801a      	strh	r2, [r3, #0]

  /* Set or Reset the CC2NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
2000269e:	183b      	adds	r3, r7, r0
200026a0:	183a      	adds	r2, r7, r0
200026a2:	8812      	ldrh	r2, [r2, #0]
200026a4:	2180      	movs	r1, #128	; 0x80
200026a6:	438a      	bics	r2, r1
200026a8:	801a      	strh	r2, [r3, #0]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
200026aa:	1cbb      	adds	r3, r7, #2
200026ac:	881b      	ldrh	r3, [r3, #0]
200026ae:	011b      	lsls	r3, r3, #4
200026b0:	b299      	uxth	r1, r3
200026b2:	183b      	adds	r3, r7, r0
200026b4:	183a      	adds	r2, r7, r0
200026b6:	8812      	ldrh	r2, [r2, #0]
200026b8:	430a      	orrs	r2, r1
200026ba:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
200026bc:	687b      	ldr	r3, [r7, #4]
200026be:	183a      	adds	r2, r7, r0
200026c0:	8812      	ldrh	r2, [r2, #0]
200026c2:	841a      	strh	r2, [r3, #32]
}
200026c4:	46c0      	nop			; (mov r8, r8)
200026c6:	46bd      	mov	sp, r7
200026c8:	b004      	add	sp, #16
200026ca:	bd80      	pop	{r7, pc}

200026cc <TIM_OC3PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
200026cc:	b580      	push	{r7, lr}
200026ce:	b084      	sub	sp, #16
200026d0:	af00      	add	r7, sp, #0
200026d2:	6078      	str	r0, [r7, #4]
200026d4:	000a      	movs	r2, r1
200026d6:	1cbb      	adds	r3, r7, #2
200026d8:	801a      	strh	r2, [r3, #0]
  uint16_t tmpccer = 0;
200026da:	200e      	movs	r0, #14
200026dc:	183b      	adds	r3, r7, r0
200026de:	2200      	movs	r2, #0
200026e0:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
200026e2:	183b      	adds	r3, r7, r0
200026e4:	687a      	ldr	r2, [r7, #4]
200026e6:	8c12      	ldrh	r2, [r2, #32]
200026e8:	801a      	strh	r2, [r3, #0]

  /* Set or Reset the CC3P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
200026ea:	183b      	adds	r3, r7, r0
200026ec:	183a      	adds	r2, r7, r0
200026ee:	8812      	ldrh	r2, [r2, #0]
200026f0:	4909      	ldr	r1, [pc, #36]	; (20002718 <TIM_OC3PolarityConfig+0x4c>)
200026f2:	400a      	ands	r2, r1
200026f4:	801a      	strh	r2, [r3, #0]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
200026f6:	1cbb      	adds	r3, r7, #2
200026f8:	881b      	ldrh	r3, [r3, #0]
200026fa:	021b      	lsls	r3, r3, #8
200026fc:	b299      	uxth	r1, r3
200026fe:	183b      	adds	r3, r7, r0
20002700:	183a      	adds	r2, r7, r0
20002702:	8812      	ldrh	r2, [r2, #0]
20002704:	430a      	orrs	r2, r1
20002706:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
20002708:	687b      	ldr	r3, [r7, #4]
2000270a:	183a      	adds	r2, r7, r0
2000270c:	8812      	ldrh	r2, [r2, #0]
2000270e:	841a      	strh	r2, [r3, #32]
}
20002710:	46c0      	nop			; (mov r8, r8)
20002712:	46bd      	mov	sp, r7
20002714:	b004      	add	sp, #16
20002716:	bd80      	pop	{r7, pc}
20002718:	fffffdff 			; <UNDEFINED> instruction: 0xfffffdff

2000271c <TIM_OC3NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
2000271c:	b580      	push	{r7, lr}
2000271e:	b084      	sub	sp, #16
20002720:	af00      	add	r7, sp, #0
20002722:	6078      	str	r0, [r7, #4]
20002724:	000a      	movs	r2, r1
20002726:	1cbb      	adds	r3, r7, #2
20002728:	801a      	strh	r2, [r3, #0]
  uint16_t tmpccer = 0;
2000272a:	200e      	movs	r0, #14
2000272c:	183b      	adds	r3, r7, r0
2000272e:	2200      	movs	r2, #0
20002730:	801a      	strh	r2, [r3, #0]
 
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
20002732:	183b      	adds	r3, r7, r0
20002734:	687a      	ldr	r2, [r7, #4]
20002736:	8c12      	ldrh	r2, [r2, #32]
20002738:	801a      	strh	r2, [r3, #0]

  /* Set or Reset the CC3NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
2000273a:	183b      	adds	r3, r7, r0
2000273c:	183a      	adds	r2, r7, r0
2000273e:	8812      	ldrh	r2, [r2, #0]
20002740:	4909      	ldr	r1, [pc, #36]	; (20002768 <TIM_OC3NPolarityConfig+0x4c>)
20002742:	400a      	ands	r2, r1
20002744:	801a      	strh	r2, [r3, #0]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
20002746:	1cbb      	adds	r3, r7, #2
20002748:	881b      	ldrh	r3, [r3, #0]
2000274a:	021b      	lsls	r3, r3, #8
2000274c:	b299      	uxth	r1, r3
2000274e:	183b      	adds	r3, r7, r0
20002750:	183a      	adds	r2, r7, r0
20002752:	8812      	ldrh	r2, [r2, #0]
20002754:	430a      	orrs	r2, r1
20002756:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
20002758:	687b      	ldr	r3, [r7, #4]
2000275a:	183a      	adds	r2, r7, r0
2000275c:	8812      	ldrh	r2, [r2, #0]
2000275e:	841a      	strh	r2, [r3, #32]
}
20002760:	46c0      	nop			; (mov r8, r8)
20002762:	46bd      	mov	sp, r7
20002764:	b004      	add	sp, #16
20002766:	bd80      	pop	{r7, pc}
20002768:	fffff7ff 			; <UNDEFINED> instruction: 0xfffff7ff

2000276c <TIM_OC4PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC4PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
2000276c:	b580      	push	{r7, lr}
2000276e:	b084      	sub	sp, #16
20002770:	af00      	add	r7, sp, #0
20002772:	6078      	str	r0, [r7, #4]
20002774:	000a      	movs	r2, r1
20002776:	1cbb      	adds	r3, r7, #2
20002778:	801a      	strh	r2, [r3, #0]
  uint16_t tmpccer = 0;
2000277a:	200e      	movs	r0, #14
2000277c:	183b      	adds	r3, r7, r0
2000277e:	2200      	movs	r2, #0
20002780:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
20002782:	183b      	adds	r3, r7, r0
20002784:	687a      	ldr	r2, [r7, #4]
20002786:	8c12      	ldrh	r2, [r2, #32]
20002788:	801a      	strh	r2, [r3, #0]

  /* Set or Reset the CC4P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
2000278a:	183b      	adds	r3, r7, r0
2000278c:	183a      	adds	r2, r7, r0
2000278e:	8812      	ldrh	r2, [r2, #0]
20002790:	4909      	ldr	r1, [pc, #36]	; (200027b8 <TIM_OC4PolarityConfig+0x4c>)
20002792:	400a      	ands	r2, r1
20002794:	801a      	strh	r2, [r3, #0]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
20002796:	1cbb      	adds	r3, r7, #2
20002798:	881b      	ldrh	r3, [r3, #0]
2000279a:	031b      	lsls	r3, r3, #12
2000279c:	b299      	uxth	r1, r3
2000279e:	183b      	adds	r3, r7, r0
200027a0:	183a      	adds	r2, r7, r0
200027a2:	8812      	ldrh	r2, [r2, #0]
200027a4:	430a      	orrs	r2, r1
200027a6:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
200027a8:	687b      	ldr	r3, [r7, #4]
200027aa:	183a      	adds	r2, r7, r0
200027ac:	8812      	ldrh	r2, [r2, #0]
200027ae:	841a      	strh	r2, [r3, #32]
}
200027b0:	46c0      	nop			; (mov r8, r8)
200027b2:	46bd      	mov	sp, r7
200027b4:	b004      	add	sp, #16
200027b6:	bd80      	pop	{r7, pc}
200027b8:	ffffdfff 			; <UNDEFINED> instruction: 0xffffdfff

200027bc <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
200027bc:	b580      	push	{r7, lr}
200027be:	b084      	sub	sp, #16
200027c0:	af00      	add	r7, sp, #0
200027c2:	6078      	str	r0, [r7, #4]
200027c4:	0008      	movs	r0, r1
200027c6:	0011      	movs	r1, r2
200027c8:	1cbb      	adds	r3, r7, #2
200027ca:	1c02      	adds	r2, r0, #0
200027cc:	801a      	strh	r2, [r3, #0]
200027ce:	003b      	movs	r3, r7
200027d0:	1c0a      	adds	r2, r1, #0
200027d2:	801a      	strh	r2, [r3, #0]
  uint16_t tmp = 0;
200027d4:	210e      	movs	r1, #14
200027d6:	187b      	adds	r3, r7, r1
200027d8:	2200      	movs	r2, #0
200027da:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;
200027dc:	1cbb      	adds	r3, r7, #2
200027de:	881b      	ldrh	r3, [r3, #0]
200027e0:	2201      	movs	r2, #1
200027e2:	409a      	lsls	r2, r3
200027e4:	187b      	adds	r3, r7, r1
200027e6:	801a      	strh	r2, [r3, #0]

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
200027e8:	687b      	ldr	r3, [r7, #4]
200027ea:	8c1b      	ldrh	r3, [r3, #32]
200027ec:	b29b      	uxth	r3, r3
200027ee:	187a      	adds	r2, r7, r1
200027f0:	8812      	ldrh	r2, [r2, #0]
200027f2:	43d2      	mvns	r2, r2
200027f4:	b292      	uxth	r2, r2
200027f6:	4013      	ands	r3, r2
200027f8:	b29a      	uxth	r2, r3
200027fa:	687b      	ldr	r3, [r7, #4]
200027fc:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
200027fe:	687b      	ldr	r3, [r7, #4]
20002800:	8c1b      	ldrh	r3, [r3, #32]
20002802:	b29a      	uxth	r2, r3
20002804:	003b      	movs	r3, r7
20002806:	8819      	ldrh	r1, [r3, #0]
20002808:	1cbb      	adds	r3, r7, #2
2000280a:	881b      	ldrh	r3, [r3, #0]
2000280c:	4099      	lsls	r1, r3
2000280e:	000b      	movs	r3, r1
20002810:	b29b      	uxth	r3, r3
20002812:	4313      	orrs	r3, r2
20002814:	b29a      	uxth	r2, r3
20002816:	687b      	ldr	r3, [r7, #4]
20002818:	841a      	strh	r2, [r3, #32]
}
2000281a:	46c0      	nop			; (mov r8, r8)
2000281c:	46bd      	mov	sp, r7
2000281e:	b004      	add	sp, #16
20002820:	bd80      	pop	{r7, pc}

20002822 <TIM_CCxNCmd>:
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
20002822:	b580      	push	{r7, lr}
20002824:	b084      	sub	sp, #16
20002826:	af00      	add	r7, sp, #0
20002828:	6078      	str	r0, [r7, #4]
2000282a:	0008      	movs	r0, r1
2000282c:	0011      	movs	r1, r2
2000282e:	1cbb      	adds	r3, r7, #2
20002830:	1c02      	adds	r2, r0, #0
20002832:	801a      	strh	r2, [r3, #0]
20002834:	003b      	movs	r3, r7
20002836:	1c0a      	adds	r2, r1, #0
20002838:	801a      	strh	r2, [r3, #0]
  uint16_t tmp = 0;
2000283a:	210e      	movs	r1, #14
2000283c:	187b      	adds	r3, r7, r1
2000283e:	2200      	movs	r2, #0
20002840:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_SET << TIM_Channel;
20002842:	1cbb      	adds	r3, r7, #2
20002844:	881b      	ldrh	r3, [r3, #0]
20002846:	2204      	movs	r2, #4
20002848:	409a      	lsls	r2, r3
2000284a:	187b      	adds	r3, r7, r1
2000284c:	801a      	strh	r2, [r3, #0]

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
2000284e:	687b      	ldr	r3, [r7, #4]
20002850:	8c1b      	ldrh	r3, [r3, #32]
20002852:	b29b      	uxth	r3, r3
20002854:	187a      	adds	r2, r7, r1
20002856:	8812      	ldrh	r2, [r2, #0]
20002858:	43d2      	mvns	r2, r2
2000285a:	b292      	uxth	r2, r2
2000285c:	4013      	ands	r3, r2
2000285e:	b29a      	uxth	r2, r3
20002860:	687b      	ldr	r3, [r7, #4]
20002862:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
20002864:	687b      	ldr	r3, [r7, #4]
20002866:	8c1b      	ldrh	r3, [r3, #32]
20002868:	b29a      	uxth	r2, r3
2000286a:	003b      	movs	r3, r7
2000286c:	8819      	ldrh	r1, [r3, #0]
2000286e:	1cbb      	adds	r3, r7, #2
20002870:	881b      	ldrh	r3, [r3, #0]
20002872:	4099      	lsls	r1, r3
20002874:	000b      	movs	r3, r1
20002876:	b29b      	uxth	r3, r3
20002878:	4313      	orrs	r3, r2
2000287a:	b29a      	uxth	r2, r3
2000287c:	687b      	ldr	r3, [r7, #4]
2000287e:	841a      	strh	r2, [r3, #32]
}
20002880:	46c0      	nop			; (mov r8, r8)
20002882:	46bd      	mov	sp, r7
20002884:	b004      	add	sp, #16
20002886:	bd80      	pop	{r7, pc}

20002888 <TIM_ICInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
20002888:	b580      	push	{r7, lr}
2000288a:	b082      	sub	sp, #8
2000288c:	af00      	add	r7, sp, #0
2000288e:	6078      	str	r0, [r7, #4]
20002890:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
20002892:	683b      	ldr	r3, [r7, #0]
20002894:	881b      	ldrh	r3, [r3, #0]
20002896:	2b00      	cmp	r3, #0
20002898:	d110      	bne.n	200028bc <TIM_ICInit+0x34>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
2000289a:	683b      	ldr	r3, [r7, #0]
2000289c:	8859      	ldrh	r1, [r3, #2]
2000289e:	683b      	ldr	r3, [r7, #0]
200028a0:	889a      	ldrh	r2, [r3, #4]
200028a2:	683b      	ldr	r3, [r7, #0]
200028a4:	891b      	ldrh	r3, [r3, #8]
200028a6:	6878      	ldr	r0, [r7, #4]
200028a8:	f000 fd58 	bl	2000335c <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
200028ac:	683b      	ldr	r3, [r7, #0]
200028ae:	88da      	ldrh	r2, [r3, #6]
200028b0:	687b      	ldr	r3, [r7, #4]
200028b2:	0011      	movs	r1, r2
200028b4:	0018      	movs	r0, r3
200028b6:	f000 f8f3 	bl	20002aa0 <TIM_SetIC1Prescaler>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
200028ba:	e039      	b.n	20002930 <TIM_ICInit+0xa8>
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
200028bc:	683b      	ldr	r3, [r7, #0]
200028be:	881b      	ldrh	r3, [r3, #0]
200028c0:	2b04      	cmp	r3, #4
200028c2:	d110      	bne.n	200028e6 <TIM_ICInit+0x5e>
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
200028c4:	683b      	ldr	r3, [r7, #0]
200028c6:	8859      	ldrh	r1, [r3, #2]
200028c8:	683b      	ldr	r3, [r7, #0]
200028ca:	889a      	ldrh	r2, [r3, #4]
200028cc:	683b      	ldr	r3, [r7, #0]
200028ce:	891b      	ldrh	r3, [r3, #8]
200028d0:	6878      	ldr	r0, [r7, #4]
200028d2:	f000 fd9c 	bl	2000340e <TI2_Config>
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
200028d6:	683b      	ldr	r3, [r7, #0]
200028d8:	88da      	ldrh	r2, [r3, #6]
200028da:	687b      	ldr	r3, [r7, #4]
200028dc:	0011      	movs	r1, r2
200028de:	0018      	movs	r0, r3
200028e0:	f000 f8fa 	bl	20002ad8 <TIM_SetIC2Prescaler>
}
200028e4:	e024      	b.n	20002930 <TIM_ICInit+0xa8>
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
200028e6:	683b      	ldr	r3, [r7, #0]
200028e8:	881b      	ldrh	r3, [r3, #0]
200028ea:	2b08      	cmp	r3, #8
200028ec:	d110      	bne.n	20002910 <TIM_ICInit+0x88>
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
200028ee:	683b      	ldr	r3, [r7, #0]
200028f0:	8859      	ldrh	r1, [r3, #2]
200028f2:	683b      	ldr	r3, [r7, #0]
200028f4:	889a      	ldrh	r2, [r3, #4]
200028f6:	683b      	ldr	r3, [r7, #0]
200028f8:	891b      	ldrh	r3, [r3, #8]
200028fa:	6878      	ldr	r0, [r7, #4]
200028fc:	f000 fdf2 	bl	200034e4 <TI3_Config>
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
20002900:	683b      	ldr	r3, [r7, #0]
20002902:	88da      	ldrh	r2, [r3, #6]
20002904:	687b      	ldr	r3, [r7, #4]
20002906:	0011      	movs	r1, r2
20002908:	0018      	movs	r0, r3
2000290a:	f000 f905 	bl	20002b18 <TIM_SetIC3Prescaler>
}
2000290e:	e00f      	b.n	20002930 <TIM_ICInit+0xa8>
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
20002910:	683b      	ldr	r3, [r7, #0]
20002912:	8859      	ldrh	r1, [r3, #2]
20002914:	683b      	ldr	r3, [r7, #0]
20002916:	889a      	ldrh	r2, [r3, #4]
20002918:	683b      	ldr	r3, [r7, #0]
2000291a:	891b      	ldrh	r3, [r3, #8]
2000291c:	6878      	ldr	r0, [r7, #4]
2000291e:	f000 fe4b 	bl	200035b8 <TI4_Config>
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
20002922:	683b      	ldr	r3, [r7, #0]
20002924:	88da      	ldrh	r2, [r3, #6]
20002926:	687b      	ldr	r3, [r7, #4]
20002928:	0011      	movs	r1, r2
2000292a:	0018      	movs	r0, r3
2000292c:	f000 f910 	bl	20002b50 <TIM_SetIC4Prescaler>
}
20002930:	46c0      	nop			; (mov r8, r8)
20002932:	46bd      	mov	sp, r7
20002934:	b002      	add	sp, #8
20002936:	bd80      	pop	{r7, pc}

20002938 <TIM_ICStructInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
20002938:	b580      	push	{r7, lr}
2000293a:	b082      	sub	sp, #8
2000293c:	af00      	add	r7, sp, #0
2000293e:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
20002940:	687b      	ldr	r3, [r7, #4]
20002942:	2200      	movs	r2, #0
20002944:	801a      	strh	r2, [r3, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
20002946:	687b      	ldr	r3, [r7, #4]
20002948:	2200      	movs	r2, #0
2000294a:	805a      	strh	r2, [r3, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
2000294c:	687b      	ldr	r3, [r7, #4]
2000294e:	2201      	movs	r2, #1
20002950:	809a      	strh	r2, [r3, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
20002952:	687b      	ldr	r3, [r7, #4]
20002954:	2200      	movs	r2, #0
20002956:	80da      	strh	r2, [r3, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
20002958:	687b      	ldr	r3, [r7, #4]
2000295a:	2200      	movs	r2, #0
2000295c:	811a      	strh	r2, [r3, #8]
}
2000295e:	46c0      	nop			; (mov r8, r8)
20002960:	46bd      	mov	sp, r7
20002962:	b002      	add	sp, #8
20002964:	bd80      	pop	{r7, pc}

20002966 <TIM_PWMIConfig>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
20002966:	b590      	push	{r4, r7, lr}
20002968:	b085      	sub	sp, #20
2000296a:	af00      	add	r7, sp, #0
2000296c:	6078      	str	r0, [r7, #4]
2000296e:	6039      	str	r1, [r7, #0]
  uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
20002970:	210e      	movs	r1, #14
20002972:	187b      	adds	r3, r7, r1
20002974:	2200      	movs	r2, #0
20002976:	801a      	strh	r2, [r3, #0]
  uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
20002978:	230c      	movs	r3, #12
2000297a:	18fb      	adds	r3, r7, r3
2000297c:	2201      	movs	r2, #1
2000297e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
20002980:	683b      	ldr	r3, [r7, #0]
20002982:	885b      	ldrh	r3, [r3, #2]
20002984:	2b00      	cmp	r3, #0
20002986:	d103      	bne.n	20002990 <TIM_PWMIConfig+0x2a>
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
20002988:	187b      	adds	r3, r7, r1
2000298a:	2202      	movs	r2, #2
2000298c:	801a      	strh	r2, [r3, #0]
2000298e:	e003      	b.n	20002998 <TIM_PWMIConfig+0x32>
  }
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
20002990:	230e      	movs	r3, #14
20002992:	18fb      	adds	r3, r7, r3
20002994:	2200      	movs	r2, #0
20002996:	801a      	strh	r2, [r3, #0]
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
20002998:	683b      	ldr	r3, [r7, #0]
2000299a:	889b      	ldrh	r3, [r3, #4]
2000299c:	2b01      	cmp	r3, #1
2000299e:	d104      	bne.n	200029aa <TIM_PWMIConfig+0x44>
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
200029a0:	230c      	movs	r3, #12
200029a2:	18fb      	adds	r3, r7, r3
200029a4:	2202      	movs	r2, #2
200029a6:	801a      	strh	r2, [r3, #0]
200029a8:	e003      	b.n	200029b2 <TIM_PWMIConfig+0x4c>
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
200029aa:	230c      	movs	r3, #12
200029ac:	18fb      	adds	r3, r7, r3
200029ae:	2201      	movs	r2, #1
200029b0:	801a      	strh	r2, [r3, #0]
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
200029b2:	683b      	ldr	r3, [r7, #0]
200029b4:	881b      	ldrh	r3, [r3, #0]
200029b6:	2b00      	cmp	r3, #0
200029b8:	d123      	bne.n	20002a02 <TIM_PWMIConfig+0x9c>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
200029ba:	683b      	ldr	r3, [r7, #0]
200029bc:	8859      	ldrh	r1, [r3, #2]
200029be:	683b      	ldr	r3, [r7, #0]
200029c0:	889a      	ldrh	r2, [r3, #4]
200029c2:	683b      	ldr	r3, [r7, #0]
200029c4:	891b      	ldrh	r3, [r3, #8]
200029c6:	6878      	ldr	r0, [r7, #4]
200029c8:	f000 fcc8 	bl	2000335c <TI1_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
200029cc:	683b      	ldr	r3, [r7, #0]
200029ce:	88da      	ldrh	r2, [r3, #6]
200029d0:	687b      	ldr	r3, [r7, #4]
200029d2:	0011      	movs	r1, r2
200029d4:	0018      	movs	r0, r3
200029d6:	f000 f863 	bl	20002aa0 <TIM_SetIC1Prescaler>
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
200029da:	683b      	ldr	r3, [r7, #0]
200029dc:	891c      	ldrh	r4, [r3, #8]
200029de:	230c      	movs	r3, #12
200029e0:	18fb      	adds	r3, r7, r3
200029e2:	881a      	ldrh	r2, [r3, #0]
200029e4:	230e      	movs	r3, #14
200029e6:	18fb      	adds	r3, r7, r3
200029e8:	8819      	ldrh	r1, [r3, #0]
200029ea:	6878      	ldr	r0, [r7, #4]
200029ec:	0023      	movs	r3, r4
200029ee:	f000 fd0e 	bl	2000340e <TI2_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
200029f2:	683b      	ldr	r3, [r7, #0]
200029f4:	88da      	ldrh	r2, [r3, #6]
200029f6:	687b      	ldr	r3, [r7, #4]
200029f8:	0011      	movs	r1, r2
200029fa:	0018      	movs	r0, r3
200029fc:	f000 f86c 	bl	20002ad8 <TIM_SetIC2Prescaler>
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
20002a00:	e022      	b.n	20002a48 <TIM_PWMIConfig+0xe2>
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
20002a02:	683b      	ldr	r3, [r7, #0]
20002a04:	8859      	ldrh	r1, [r3, #2]
20002a06:	683b      	ldr	r3, [r7, #0]
20002a08:	889a      	ldrh	r2, [r3, #4]
20002a0a:	683b      	ldr	r3, [r7, #0]
20002a0c:	891b      	ldrh	r3, [r3, #8]
20002a0e:	6878      	ldr	r0, [r7, #4]
20002a10:	f000 fcfd 	bl	2000340e <TI2_Config>
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
20002a14:	683b      	ldr	r3, [r7, #0]
20002a16:	88da      	ldrh	r2, [r3, #6]
20002a18:	687b      	ldr	r3, [r7, #4]
20002a1a:	0011      	movs	r1, r2
20002a1c:	0018      	movs	r0, r3
20002a1e:	f000 f85b 	bl	20002ad8 <TIM_SetIC2Prescaler>
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
20002a22:	683b      	ldr	r3, [r7, #0]
20002a24:	891c      	ldrh	r4, [r3, #8]
20002a26:	230c      	movs	r3, #12
20002a28:	18fb      	adds	r3, r7, r3
20002a2a:	881a      	ldrh	r2, [r3, #0]
20002a2c:	230e      	movs	r3, #14
20002a2e:	18fb      	adds	r3, r7, r3
20002a30:	8819      	ldrh	r1, [r3, #0]
20002a32:	6878      	ldr	r0, [r7, #4]
20002a34:	0023      	movs	r3, r4
20002a36:	f000 fc91 	bl	2000335c <TI1_Config>
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
20002a3a:	683b      	ldr	r3, [r7, #0]
20002a3c:	88da      	ldrh	r2, [r3, #6]
20002a3e:	687b      	ldr	r3, [r7, #4]
20002a40:	0011      	movs	r1, r2
20002a42:	0018      	movs	r0, r3
20002a44:	f000 f82c 	bl	20002aa0 <TIM_SetIC1Prescaler>
}
20002a48:	46c0      	nop			; (mov r8, r8)
20002a4a:	46bd      	mov	sp, r7
20002a4c:	b005      	add	sp, #20
20002a4e:	bd90      	pop	{r4, r7, pc}

20002a50 <TIM_GetCapture1>:
  * @brief  Gets the TIMx Input Capture 1 value.
  * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
  * @retval Capture Compare 1 Register value.
  */
uint32_t TIM_GetCapture1(TIM_TypeDef* TIMx)
{
20002a50:	b580      	push	{r7, lr}
20002a52:	b082      	sub	sp, #8
20002a54:	af00      	add	r7, sp, #0
20002a56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
20002a58:	687b      	ldr	r3, [r7, #4]
20002a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
20002a5c:	0018      	movs	r0, r3
20002a5e:	46bd      	mov	sp, r7
20002a60:	b002      	add	sp, #8
20002a62:	bd80      	pop	{r7, pc}

20002a64 <TIM_GetCapture2>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
  *         peripheral.
  * @retval Capture Compare 2 Register value.
  */
uint32_t TIM_GetCapture2(TIM_TypeDef* TIMx)
{
20002a64:	b580      	push	{r7, lr}
20002a66:	b082      	sub	sp, #8
20002a68:	af00      	add	r7, sp, #0
20002a6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
20002a6c:	687b      	ldr	r3, [r7, #4]
20002a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
20002a70:	0018      	movs	r0, r3
20002a72:	46bd      	mov	sp, r7
20002a74:	b002      	add	sp, #8
20002a76:	bd80      	pop	{r7, pc}

20002a78 <TIM_GetCapture3>:
  * @brief  Gets the TIMx Input Capture 3 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 3 Register value.
  */
uint32_t TIM_GetCapture3(TIM_TypeDef* TIMx)
{
20002a78:	b580      	push	{r7, lr}
20002a7a:	b082      	sub	sp, #8
20002a7c:	af00      	add	r7, sp, #0
20002a7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 

  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
20002a80:	687b      	ldr	r3, [r7, #4]
20002a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
20002a84:	0018      	movs	r0, r3
20002a86:	46bd      	mov	sp, r7
20002a88:	b002      	add	sp, #8
20002a8a:	bd80      	pop	{r7, pc}

20002a8c <TIM_GetCapture4>:
  * @brief  Gets the TIMx Input Capture 4 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 4 Register value.
  */
uint32_t TIM_GetCapture4(TIM_TypeDef* TIMx)
{
20002a8c:	b580      	push	{r7, lr}
20002a8e:	b082      	sub	sp, #8
20002a90:	af00      	add	r7, sp, #0
20002a92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
20002a94:	687b      	ldr	r3, [r7, #4]
20002a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
20002a98:	0018      	movs	r0, r3
20002a9a:	46bd      	mov	sp, r7
20002a9c:	b002      	add	sp, #8
20002a9e:	bd80      	pop	{r7, pc}

20002aa0 <TIM_SetIC1Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
20002aa0:	b580      	push	{r7, lr}
20002aa2:	b082      	sub	sp, #8
20002aa4:	af00      	add	r7, sp, #0
20002aa6:	6078      	str	r0, [r7, #4]
20002aa8:	000a      	movs	r2, r1
20002aaa:	1cbb      	adds	r3, r7, #2
20002aac:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
20002aae:	687b      	ldr	r3, [r7, #4]
20002ab0:	8b1b      	ldrh	r3, [r3, #24]
20002ab2:	b29b      	uxth	r3, r3
20002ab4:	220c      	movs	r2, #12
20002ab6:	4393      	bics	r3, r2
20002ab8:	b29a      	uxth	r2, r3
20002aba:	687b      	ldr	r3, [r7, #4]
20002abc:	831a      	strh	r2, [r3, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
20002abe:	687b      	ldr	r3, [r7, #4]
20002ac0:	8b1b      	ldrh	r3, [r3, #24]
20002ac2:	b29a      	uxth	r2, r3
20002ac4:	1cbb      	adds	r3, r7, #2
20002ac6:	881b      	ldrh	r3, [r3, #0]
20002ac8:	4313      	orrs	r3, r2
20002aca:	b29a      	uxth	r2, r3
20002acc:	687b      	ldr	r3, [r7, #4]
20002ace:	831a      	strh	r2, [r3, #24]
}
20002ad0:	46c0      	nop			; (mov r8, r8)
20002ad2:	46bd      	mov	sp, r7
20002ad4:	b002      	add	sp, #8
20002ad6:	bd80      	pop	{r7, pc}

20002ad8 <TIM_SetIC2Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
20002ad8:	b580      	push	{r7, lr}
20002ada:	b082      	sub	sp, #8
20002adc:	af00      	add	r7, sp, #0
20002ade:	6078      	str	r0, [r7, #4]
20002ae0:	000a      	movs	r2, r1
20002ae2:	1cbb      	adds	r3, r7, #2
20002ae4:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
20002ae6:	687b      	ldr	r3, [r7, #4]
20002ae8:	8b1b      	ldrh	r3, [r3, #24]
20002aea:	b29b      	uxth	r3, r3
20002aec:	4a09      	ldr	r2, [pc, #36]	; (20002b14 <TIM_SetIC2Prescaler+0x3c>)
20002aee:	4013      	ands	r3, r2
20002af0:	b29a      	uxth	r2, r3
20002af2:	687b      	ldr	r3, [r7, #4]
20002af4:	831a      	strh	r2, [r3, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
20002af6:	687b      	ldr	r3, [r7, #4]
20002af8:	8b1b      	ldrh	r3, [r3, #24]
20002afa:	b29a      	uxth	r2, r3
20002afc:	1cbb      	adds	r3, r7, #2
20002afe:	881b      	ldrh	r3, [r3, #0]
20002b00:	021b      	lsls	r3, r3, #8
20002b02:	b29b      	uxth	r3, r3
20002b04:	4313      	orrs	r3, r2
20002b06:	b29a      	uxth	r2, r3
20002b08:	687b      	ldr	r3, [r7, #4]
20002b0a:	831a      	strh	r2, [r3, #24]
}
20002b0c:	46c0      	nop			; (mov r8, r8)
20002b0e:	46bd      	mov	sp, r7
20002b10:	b002      	add	sp, #8
20002b12:	bd80      	pop	{r7, pc}
20002b14:	fffff3ff 			; <UNDEFINED> instruction: 0xfffff3ff

20002b18 <TIM_SetIC3Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
20002b18:	b580      	push	{r7, lr}
20002b1a:	b082      	sub	sp, #8
20002b1c:	af00      	add	r7, sp, #0
20002b1e:	6078      	str	r0, [r7, #4]
20002b20:	000a      	movs	r2, r1
20002b22:	1cbb      	adds	r3, r7, #2
20002b24:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC3PSC;
20002b26:	687b      	ldr	r3, [r7, #4]
20002b28:	8b9b      	ldrh	r3, [r3, #28]
20002b2a:	b29b      	uxth	r3, r3
20002b2c:	220c      	movs	r2, #12
20002b2e:	4393      	bics	r3, r2
20002b30:	b29a      	uxth	r2, r3
20002b32:	687b      	ldr	r3, [r7, #4]
20002b34:	839a      	strh	r2, [r3, #28]

  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
20002b36:	687b      	ldr	r3, [r7, #4]
20002b38:	8b9b      	ldrh	r3, [r3, #28]
20002b3a:	b29a      	uxth	r2, r3
20002b3c:	1cbb      	adds	r3, r7, #2
20002b3e:	881b      	ldrh	r3, [r3, #0]
20002b40:	4313      	orrs	r3, r2
20002b42:	b29a      	uxth	r2, r3
20002b44:	687b      	ldr	r3, [r7, #4]
20002b46:	839a      	strh	r2, [r3, #28]
}
20002b48:	46c0      	nop			; (mov r8, r8)
20002b4a:	46bd      	mov	sp, r7
20002b4c:	b002      	add	sp, #8
20002b4e:	bd80      	pop	{r7, pc}

20002b50 <TIM_SetIC4Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{  
20002b50:	b580      	push	{r7, lr}
20002b52:	b082      	sub	sp, #8
20002b54:	af00      	add	r7, sp, #0
20002b56:	6078      	str	r0, [r7, #4]
20002b58:	000a      	movs	r2, r1
20002b5a:	1cbb      	adds	r3, r7, #2
20002b5c:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC4PSC;
20002b5e:	687b      	ldr	r3, [r7, #4]
20002b60:	8b9b      	ldrh	r3, [r3, #28]
20002b62:	b29b      	uxth	r3, r3
20002b64:	4a09      	ldr	r2, [pc, #36]	; (20002b8c <TIM_SetIC4Prescaler+0x3c>)
20002b66:	4013      	ands	r3, r2
20002b68:	b29a      	uxth	r2, r3
20002b6a:	687b      	ldr	r3, [r7, #4]
20002b6c:	839a      	strh	r2, [r3, #28]

  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
20002b6e:	687b      	ldr	r3, [r7, #4]
20002b70:	8b9b      	ldrh	r3, [r3, #28]
20002b72:	b29a      	uxth	r2, r3
20002b74:	1cbb      	adds	r3, r7, #2
20002b76:	881b      	ldrh	r3, [r3, #0]
20002b78:	021b      	lsls	r3, r3, #8
20002b7a:	b29b      	uxth	r3, r3
20002b7c:	4313      	orrs	r3, r2
20002b7e:	b29a      	uxth	r2, r3
20002b80:	687b      	ldr	r3, [r7, #4]
20002b82:	839a      	strh	r2, [r3, #28]
}
20002b84:	46c0      	nop			; (mov r8, r8)
20002b86:	46bd      	mov	sp, r7
20002b88:	b002      	add	sp, #8
20002b8a:	bd80      	pop	{r7, pc}
20002b8c:	fffff3ff 			; <UNDEFINED> instruction: 0xfffff3ff

20002b90 <TIM_BDTRConfig>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure that
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval None
  */
void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
{
20002b90:	b580      	push	{r7, lr}
20002b92:	b082      	sub	sp, #8
20002b94:	af00      	add	r7, sp, #0
20002b96:	6078      	str	r0, [r7, #4]
20002b98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
20002b9a:	683b      	ldr	r3, [r7, #0]
20002b9c:	881a      	ldrh	r2, [r3, #0]
20002b9e:	683b      	ldr	r3, [r7, #0]
20002ba0:	885b      	ldrh	r3, [r3, #2]
20002ba2:	4313      	orrs	r3, r2
20002ba4:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
20002ba6:	683b      	ldr	r3, [r7, #0]
20002ba8:	889b      	ldrh	r3, [r3, #4]
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
20002baa:	4313      	orrs	r3, r2
20002bac:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
20002bae:	683b      	ldr	r3, [r7, #0]
20002bb0:	88db      	ldrh	r3, [r3, #6]
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
20002bb2:	4313      	orrs	r3, r2
20002bb4:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
20002bb6:	683b      	ldr	r3, [r7, #0]
20002bb8:	891b      	ldrh	r3, [r3, #8]
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
20002bba:	4313      	orrs	r3, r2
20002bbc:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
20002bbe:	683b      	ldr	r3, [r7, #0]
20002bc0:	895b      	ldrh	r3, [r3, #10]
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
20002bc2:	4313      	orrs	r3, r2
20002bc4:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
20002bc6:	683b      	ldr	r3, [r7, #0]
20002bc8:	899b      	ldrh	r3, [r3, #12]
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
20002bca:	4313      	orrs	r3, r2
20002bcc:	b299      	uxth	r1, r3
20002bce:	687b      	ldr	r3, [r7, #4]
20002bd0:	2244      	movs	r2, #68	; 0x44
20002bd2:	5299      	strh	r1, [r3, r2]
}
20002bd4:	46c0      	nop			; (mov r8, r8)
20002bd6:	46bd      	mov	sp, r7
20002bd8:	b002      	add	sp, #8
20002bda:	bd80      	pop	{r7, pc}

20002bdc <TIM_BDTRStructInit>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
20002bdc:	b580      	push	{r7, lr}
20002bde:	b082      	sub	sp, #8
20002be0:	af00      	add	r7, sp, #0
20002be2:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
20002be4:	687b      	ldr	r3, [r7, #4]
20002be6:	2200      	movs	r2, #0
20002be8:	801a      	strh	r2, [r3, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
20002bea:	687b      	ldr	r3, [r7, #4]
20002bec:	2200      	movs	r2, #0
20002bee:	805a      	strh	r2, [r3, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
20002bf0:	687b      	ldr	r3, [r7, #4]
20002bf2:	2200      	movs	r2, #0
20002bf4:	809a      	strh	r2, [r3, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
20002bf6:	687b      	ldr	r3, [r7, #4]
20002bf8:	2200      	movs	r2, #0
20002bfa:	80da      	strh	r2, [r3, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
20002bfc:	687b      	ldr	r3, [r7, #4]
20002bfe:	2200      	movs	r2, #0
20002c00:	811a      	strh	r2, [r3, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
20002c02:	687b      	ldr	r3, [r7, #4]
20002c04:	2200      	movs	r2, #0
20002c06:	815a      	strh	r2, [r3, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
20002c08:	687b      	ldr	r3, [r7, #4]
20002c0a:	2200      	movs	r2, #0
20002c0c:	819a      	strh	r2, [r3, #12]
}
20002c0e:	46c0      	nop			; (mov r8, r8)
20002c10:	46bd      	mov	sp, r7
20002c12:	b002      	add	sp, #8
20002c14:	bd80      	pop	{r7, pc}

20002c16 <TIM_CtrlPWMOutputs>:
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
20002c16:	b580      	push	{r7, lr}
20002c18:	b082      	sub	sp, #8
20002c1a:	af00      	add	r7, sp, #0
20002c1c:	6078      	str	r0, [r7, #4]
20002c1e:	000a      	movs	r2, r1
20002c20:	1cfb      	adds	r3, r7, #3
20002c22:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20002c24:	1cfb      	adds	r3, r7, #3
20002c26:	781b      	ldrb	r3, [r3, #0]
20002c28:	2b00      	cmp	r3, #0
20002c2a:	d00a      	beq.n	20002c42 <TIM_CtrlPWMOutputs+0x2c>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
20002c2c:	687b      	ldr	r3, [r7, #4]
20002c2e:	2244      	movs	r2, #68	; 0x44
20002c30:	5a9b      	ldrh	r3, [r3, r2]
20002c32:	b29b      	uxth	r3, r3
20002c34:	4a0a      	ldr	r2, [pc, #40]	; (20002c60 <TIM_CtrlPWMOutputs+0x4a>)
20002c36:	4313      	orrs	r3, r2
20002c38:	b299      	uxth	r1, r3
20002c3a:	687b      	ldr	r3, [r7, #4]
20002c3c:	2244      	movs	r2, #68	; 0x44
20002c3e:	5299      	strh	r1, [r3, r2]
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
  }  
}
20002c40:	e009      	b.n	20002c56 <TIM_CtrlPWMOutputs+0x40>
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
20002c42:	687b      	ldr	r3, [r7, #4]
20002c44:	2244      	movs	r2, #68	; 0x44
20002c46:	5a9b      	ldrh	r3, [r3, r2]
20002c48:	b29b      	uxth	r3, r3
20002c4a:	045b      	lsls	r3, r3, #17
20002c4c:	0c5b      	lsrs	r3, r3, #17
20002c4e:	b299      	uxth	r1, r3
20002c50:	687b      	ldr	r3, [r7, #4]
20002c52:	2244      	movs	r2, #68	; 0x44
20002c54:	5299      	strh	r1, [r3, r2]
}
20002c56:	46c0      	nop			; (mov r8, r8)
20002c58:	46bd      	mov	sp, r7
20002c5a:	b002      	add	sp, #8
20002c5c:	bd80      	pop	{r7, pc}
20002c5e:	46c0      	nop			; (mov r8, r8)
20002c60:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000

20002c64 <TIM_SelectCOM>:
  * @param  NewState: new state of the Commutation event.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCOM(TIM_TypeDef* TIMx, FunctionalState NewState)
{
20002c64:	b580      	push	{r7, lr}
20002c66:	b082      	sub	sp, #8
20002c68:	af00      	add	r7, sp, #0
20002c6a:	6078      	str	r0, [r7, #4]
20002c6c:	000a      	movs	r2, r1
20002c6e:	1cfb      	adds	r3, r7, #3
20002c70:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20002c72:	1cfb      	adds	r3, r7, #3
20002c74:	781b      	ldrb	r3, [r3, #0]
20002c76:	2b00      	cmp	r3, #0
20002c78:	d008      	beq.n	20002c8c <TIM_SelectCOM+0x28>
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
20002c7a:	687b      	ldr	r3, [r7, #4]
20002c7c:	889b      	ldrh	r3, [r3, #4]
20002c7e:	b29b      	uxth	r3, r3
20002c80:	2204      	movs	r2, #4
20002c82:	4313      	orrs	r3, r2
20002c84:	b29a      	uxth	r2, r3
20002c86:	687b      	ldr	r3, [r7, #4]
20002c88:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCUS;
  }
}
20002c8a:	e007      	b.n	20002c9c <TIM_SelectCOM+0x38>
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCUS;
20002c8c:	687b      	ldr	r3, [r7, #4]
20002c8e:	889b      	ldrh	r3, [r3, #4]
20002c90:	b29b      	uxth	r3, r3
20002c92:	2204      	movs	r2, #4
20002c94:	4393      	bics	r3, r2
20002c96:	b29a      	uxth	r2, r3
20002c98:	687b      	ldr	r3, [r7, #4]
20002c9a:	809a      	strh	r2, [r3, #4]
}
20002c9c:	46c0      	nop			; (mov r8, r8)
20002c9e:	46bd      	mov	sp, r7
20002ca0:	b002      	add	sp, #8
20002ca2:	bd80      	pop	{r7, pc}

20002ca4 <TIM_CCPreloadControl>:
  * @param  NewState: new state of the Capture Compare Preload Control bit
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
20002ca4:	b580      	push	{r7, lr}
20002ca6:	b082      	sub	sp, #8
20002ca8:	af00      	add	r7, sp, #0
20002caa:	6078      	str	r0, [r7, #4]
20002cac:	000a      	movs	r2, r1
20002cae:	1cfb      	adds	r3, r7, #3
20002cb0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20002cb2:	1cfb      	adds	r3, r7, #3
20002cb4:	781b      	ldrb	r3, [r3, #0]
20002cb6:	2b00      	cmp	r3, #0
20002cb8:	d008      	beq.n	20002ccc <TIM_CCPreloadControl+0x28>
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
20002cba:	687b      	ldr	r3, [r7, #4]
20002cbc:	889b      	ldrh	r3, [r3, #4]
20002cbe:	b29b      	uxth	r3, r3
20002cc0:	2201      	movs	r2, #1
20002cc2:	4313      	orrs	r3, r2
20002cc4:	b29a      	uxth	r2, r3
20002cc6:	687b      	ldr	r3, [r7, #4]
20002cc8:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCPC;
  }
}
20002cca:	e007      	b.n	20002cdc <TIM_CCPreloadControl+0x38>
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCPC;
20002ccc:	687b      	ldr	r3, [r7, #4]
20002cce:	889b      	ldrh	r3, [r3, #4]
20002cd0:	b29b      	uxth	r3, r3
20002cd2:	2201      	movs	r2, #1
20002cd4:	4393      	bics	r3, r2
20002cd6:	b29a      	uxth	r2, r3
20002cd8:	687b      	ldr	r3, [r7, #4]
20002cda:	809a      	strh	r2, [r3, #4]
}
20002cdc:	46c0      	nop			; (mov r8, r8)
20002cde:	46bd      	mov	sp, r7
20002ce0:	b002      	add	sp, #8
20002ce2:	bd80      	pop	{r7, pc}

20002ce4 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
20002ce4:	b580      	push	{r7, lr}
20002ce6:	b082      	sub	sp, #8
20002ce8:	af00      	add	r7, sp, #0
20002cea:	6078      	str	r0, [r7, #4]
20002cec:	0008      	movs	r0, r1
20002cee:	0011      	movs	r1, r2
20002cf0:	1cbb      	adds	r3, r7, #2
20002cf2:	1c02      	adds	r2, r0, #0
20002cf4:	801a      	strh	r2, [r3, #0]
20002cf6:	1c7b      	adds	r3, r7, #1
20002cf8:	1c0a      	adds	r2, r1, #0
20002cfa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
20002cfc:	1c7b      	adds	r3, r7, #1
20002cfe:	781b      	ldrb	r3, [r3, #0]
20002d00:	2b00      	cmp	r3, #0
20002d02:	d009      	beq.n	20002d18 <TIM_ITConfig+0x34>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
20002d04:	687b      	ldr	r3, [r7, #4]
20002d06:	899b      	ldrh	r3, [r3, #12]
20002d08:	b29a      	uxth	r2, r3
20002d0a:	1cbb      	adds	r3, r7, #2
20002d0c:	881b      	ldrh	r3, [r3, #0]
20002d0e:	4313      	orrs	r3, r2
20002d10:	b29a      	uxth	r2, r3
20002d12:	687b      	ldr	r3, [r7, #4]
20002d14:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
20002d16:	e00a      	b.n	20002d2e <TIM_ITConfig+0x4a>
    TIMx->DIER &= (uint16_t)~TIM_IT;
20002d18:	687b      	ldr	r3, [r7, #4]
20002d1a:	899b      	ldrh	r3, [r3, #12]
20002d1c:	b29b      	uxth	r3, r3
20002d1e:	1cba      	adds	r2, r7, #2
20002d20:	8812      	ldrh	r2, [r2, #0]
20002d22:	43d2      	mvns	r2, r2
20002d24:	b292      	uxth	r2, r2
20002d26:	4013      	ands	r3, r2
20002d28:	b29a      	uxth	r2, r3
20002d2a:	687b      	ldr	r3, [r7, #4]
20002d2c:	819a      	strh	r2, [r3, #12]
}
20002d2e:	46c0      	nop			; (mov r8, r8)
20002d30:	46bd      	mov	sp, r7
20002d32:	b002      	add	sp, #8
20002d34:	bd80      	pop	{r7, pc}

20002d36 <TIM_GenerateEvent>:
  * @note   TIM_EventSource_COM and TIM_EventSource_Break are used only with TIM1 and TIM8.
  *        
  * @retval None
  */
void TIM_GenerateEvent(TIM_TypeDef* TIMx, uint16_t TIM_EventSource)
{ 
20002d36:	b580      	push	{r7, lr}
20002d38:	b082      	sub	sp, #8
20002d3a:	af00      	add	r7, sp, #0
20002d3c:	6078      	str	r0, [r7, #4]
20002d3e:	000a      	movs	r2, r1
20002d40:	1cbb      	adds	r3, r7, #2
20002d42:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
 
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
20002d44:	687b      	ldr	r3, [r7, #4]
20002d46:	1cba      	adds	r2, r7, #2
20002d48:	8812      	ldrh	r2, [r2, #0]
20002d4a:	829a      	strh	r2, [r3, #20]
}
20002d4c:	46c0      	nop			; (mov r8, r8)
20002d4e:	46bd      	mov	sp, r7
20002d50:	b002      	add	sp, #8
20002d52:	bd80      	pop	{r7, pc}

20002d54 <TIM_GetFlagStatus>:
  * @note   TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.    
  *
  * @retval The new state of TIM_FLAG (SET or RESET).
  */
FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{ 
20002d54:	b580      	push	{r7, lr}
20002d56:	b084      	sub	sp, #16
20002d58:	af00      	add	r7, sp, #0
20002d5a:	6078      	str	r0, [r7, #4]
20002d5c:	000a      	movs	r2, r1
20002d5e:	1cbb      	adds	r3, r7, #2
20002d60:	801a      	strh	r2, [r3, #0]
  ITStatus bitstatus = RESET;  
20002d62:	210f      	movs	r1, #15
20002d64:	187b      	adds	r3, r7, r1
20002d66:	2200      	movs	r2, #0
20002d68:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));

  
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
20002d6a:	687b      	ldr	r3, [r7, #4]
20002d6c:	8a1b      	ldrh	r3, [r3, #16]
20002d6e:	b29b      	uxth	r3, r3
20002d70:	1cba      	adds	r2, r7, #2
20002d72:	8812      	ldrh	r2, [r2, #0]
20002d74:	4013      	ands	r3, r2
20002d76:	b29b      	uxth	r3, r3
20002d78:	2b00      	cmp	r3, #0
20002d7a:	d003      	beq.n	20002d84 <TIM_GetFlagStatus+0x30>
  {
    bitstatus = SET;
20002d7c:	187b      	adds	r3, r7, r1
20002d7e:	2201      	movs	r2, #1
20002d80:	701a      	strb	r2, [r3, #0]
20002d82:	e003      	b.n	20002d8c <TIM_GetFlagStatus+0x38>
  }
  else
  {
    bitstatus = RESET;
20002d84:	230f      	movs	r3, #15
20002d86:	18fb      	adds	r3, r7, r3
20002d88:	2200      	movs	r2, #0
20002d8a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
20002d8c:	230f      	movs	r3, #15
20002d8e:	18fb      	adds	r3, r7, r3
20002d90:	781b      	ldrb	r3, [r3, #0]
}
20002d92:	0018      	movs	r0, r3
20002d94:	46bd      	mov	sp, r7
20002d96:	b004      	add	sp, #16
20002d98:	bd80      	pop	{r7, pc}

20002d9a <TIM_ClearFlag>:
  * @note   TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.
  *    
  * @retval None
  */
void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{  
20002d9a:	b580      	push	{r7, lr}
20002d9c:	b082      	sub	sp, #8
20002d9e:	af00      	add	r7, sp, #0
20002da0:	6078      	str	r0, [r7, #4]
20002da2:	000a      	movs	r2, r1
20002da4:	1cbb      	adds	r3, r7, #2
20002da6:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
20002da8:	1cbb      	adds	r3, r7, #2
20002daa:	881b      	ldrh	r3, [r3, #0]
20002dac:	43db      	mvns	r3, r3
20002dae:	b29a      	uxth	r2, r3
20002db0:	687b      	ldr	r3, [r7, #4]
20002db2:	821a      	strh	r2, [r3, #16]
}
20002db4:	46c0      	nop			; (mov r8, r8)
20002db6:	46bd      	mov	sp, r7
20002db8:	b002      	add	sp, #8
20002dba:	bd80      	pop	{r7, pc}

20002dbc <TIM_GetITStatus>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *     
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
20002dbc:	b5b0      	push	{r4, r5, r7, lr}
20002dbe:	b084      	sub	sp, #16
20002dc0:	af00      	add	r7, sp, #0
20002dc2:	6078      	str	r0, [r7, #4]
20002dc4:	000a      	movs	r2, r1
20002dc6:	1cbb      	adds	r3, r7, #2
20002dc8:	801a      	strh	r2, [r3, #0]
  ITStatus bitstatus = RESET;  
20002dca:	250f      	movs	r5, #15
20002dcc:	197b      	adds	r3, r7, r5
20002dce:	2200      	movs	r2, #0
20002dd0:	701a      	strb	r2, [r3, #0]
  uint16_t itstatus = 0x0, itenable = 0x0;
20002dd2:	200c      	movs	r0, #12
20002dd4:	183b      	adds	r3, r7, r0
20002dd6:	2200      	movs	r2, #0
20002dd8:	801a      	strh	r2, [r3, #0]
20002dda:	240a      	movs	r4, #10
20002ddc:	193b      	adds	r3, r7, r4
20002dde:	2200      	movs	r2, #0
20002de0:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
20002de2:	687b      	ldr	r3, [r7, #4]
20002de4:	8a1b      	ldrh	r3, [r3, #16]
20002de6:	b29a      	uxth	r2, r3
20002de8:	183b      	adds	r3, r7, r0
20002dea:	1cb9      	adds	r1, r7, #2
20002dec:	8809      	ldrh	r1, [r1, #0]
20002dee:	400a      	ands	r2, r1
20002df0:	801a      	strh	r2, [r3, #0]
  
  itenable = TIMx->DIER & TIM_IT;
20002df2:	687b      	ldr	r3, [r7, #4]
20002df4:	899b      	ldrh	r3, [r3, #12]
20002df6:	b29a      	uxth	r2, r3
20002df8:	193b      	adds	r3, r7, r4
20002dfa:	1cb9      	adds	r1, r7, #2
20002dfc:	8809      	ldrh	r1, [r1, #0]
20002dfe:	400a      	ands	r2, r1
20002e00:	801a      	strh	r2, [r3, #0]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
20002e02:	183b      	adds	r3, r7, r0
20002e04:	881b      	ldrh	r3, [r3, #0]
20002e06:	2b00      	cmp	r3, #0
20002e08:	d007      	beq.n	20002e1a <TIM_GetITStatus+0x5e>
20002e0a:	193b      	adds	r3, r7, r4
20002e0c:	881b      	ldrh	r3, [r3, #0]
20002e0e:	2b00      	cmp	r3, #0
20002e10:	d003      	beq.n	20002e1a <TIM_GetITStatus+0x5e>
  {
    bitstatus = SET;
20002e12:	197b      	adds	r3, r7, r5
20002e14:	2201      	movs	r2, #1
20002e16:	701a      	strb	r2, [r3, #0]
20002e18:	e003      	b.n	20002e22 <TIM_GetITStatus+0x66>
  }
  else
  {
    bitstatus = RESET;
20002e1a:	230f      	movs	r3, #15
20002e1c:	18fb      	adds	r3, r7, r3
20002e1e:	2200      	movs	r2, #0
20002e20:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
20002e22:	230f      	movs	r3, #15
20002e24:	18fb      	adds	r3, r7, r3
20002e26:	781b      	ldrb	r3, [r3, #0]
}
20002e28:	0018      	movs	r0, r3
20002e2a:	46bd      	mov	sp, r7
20002e2c:	b004      	add	sp, #16
20002e2e:	bdb0      	pop	{r4, r5, r7, pc}

20002e30 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
20002e30:	b580      	push	{r7, lr}
20002e32:	b082      	sub	sp, #8
20002e34:	af00      	add	r7, sp, #0
20002e36:	6078      	str	r0, [r7, #4]
20002e38:	000a      	movs	r2, r1
20002e3a:	1cbb      	adds	r3, r7, #2
20002e3c:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
20002e3e:	1cbb      	adds	r3, r7, #2
20002e40:	881b      	ldrh	r3, [r3, #0]
20002e42:	43db      	mvns	r3, r3
20002e44:	b29a      	uxth	r2, r3
20002e46:	687b      	ldr	r3, [r7, #4]
20002e48:	821a      	strh	r2, [r3, #16]
}
20002e4a:	46c0      	nop			; (mov r8, r8)
20002e4c:	46bd      	mov	sp, r7
20002e4e:	b002      	add	sp, #8
20002e50:	bd80      	pop	{r7, pc}

20002e52 <TIM_DMAConfig>:
  * @param  TIM_DMABurstLength: DMA Burst length. This parameter can be one value
  *         between: TIM_DMABurstLength_1Transfer and TIM_DMABurstLength_18Transfers.
  * @retval None
  */
void TIM_DMAConfig(TIM_TypeDef* TIMx, uint16_t TIM_DMABase, uint16_t TIM_DMABurstLength)
{
20002e52:	b580      	push	{r7, lr}
20002e54:	b082      	sub	sp, #8
20002e56:	af00      	add	r7, sp, #0
20002e58:	6078      	str	r0, [r7, #4]
20002e5a:	0008      	movs	r0, r1
20002e5c:	0011      	movs	r1, r2
20002e5e:	1cbb      	adds	r3, r7, #2
20002e60:	1c02      	adds	r2, r0, #0
20002e62:	801a      	strh	r2, [r3, #0]
20002e64:	003b      	movs	r3, r7
20002e66:	1c0a      	adds	r2, r1, #0
20002e68:	801a      	strh	r2, [r3, #0]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase)); 
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));

  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
20002e6a:	1cba      	adds	r2, r7, #2
20002e6c:	003b      	movs	r3, r7
20002e6e:	8812      	ldrh	r2, [r2, #0]
20002e70:	881b      	ldrh	r3, [r3, #0]
20002e72:	4313      	orrs	r3, r2
20002e74:	b299      	uxth	r1, r3
20002e76:	687b      	ldr	r3, [r7, #4]
20002e78:	2248      	movs	r2, #72	; 0x48
20002e7a:	5299      	strh	r1, [r3, r2]
}
20002e7c:	46c0      	nop			; (mov r8, r8)
20002e7e:	46bd      	mov	sp, r7
20002e80:	b002      	add	sp, #8
20002e82:	bd80      	pop	{r7, pc}

20002e84 <TIM_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
{ 
20002e84:	b580      	push	{r7, lr}
20002e86:	b082      	sub	sp, #8
20002e88:	af00      	add	r7, sp, #0
20002e8a:	6078      	str	r0, [r7, #4]
20002e8c:	0008      	movs	r0, r1
20002e8e:	0011      	movs	r1, r2
20002e90:	1cbb      	adds	r3, r7, #2
20002e92:	1c02      	adds	r2, r0, #0
20002e94:	801a      	strh	r2, [r3, #0]
20002e96:	1c7b      	adds	r3, r7, #1
20002e98:	1c0a      	adds	r2, r1, #0
20002e9a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx)); 
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
20002e9c:	1c7b      	adds	r3, r7, #1
20002e9e:	781b      	ldrb	r3, [r3, #0]
20002ea0:	2b00      	cmp	r3, #0
20002ea2:	d009      	beq.n	20002eb8 <TIM_DMACmd+0x34>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
20002ea4:	687b      	ldr	r3, [r7, #4]
20002ea6:	899b      	ldrh	r3, [r3, #12]
20002ea8:	b29a      	uxth	r2, r3
20002eaa:	1cbb      	adds	r3, r7, #2
20002eac:	881b      	ldrh	r3, [r3, #0]
20002eae:	4313      	orrs	r3, r2
20002eb0:	b29a      	uxth	r2, r3
20002eb2:	687b      	ldr	r3, [r7, #4]
20002eb4:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
  }
}
20002eb6:	e00a      	b.n	20002ece <TIM_DMACmd+0x4a>
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
20002eb8:	687b      	ldr	r3, [r7, #4]
20002eba:	899b      	ldrh	r3, [r3, #12]
20002ebc:	b29b      	uxth	r3, r3
20002ebe:	1cba      	adds	r2, r7, #2
20002ec0:	8812      	ldrh	r2, [r2, #0]
20002ec2:	43d2      	mvns	r2, r2
20002ec4:	b292      	uxth	r2, r2
20002ec6:	4013      	ands	r3, r2
20002ec8:	b29a      	uxth	r2, r3
20002eca:	687b      	ldr	r3, [r7, #4]
20002ecc:	819a      	strh	r2, [r3, #12]
}
20002ece:	46c0      	nop			; (mov r8, r8)
20002ed0:	46bd      	mov	sp, r7
20002ed2:	b002      	add	sp, #8
20002ed4:	bd80      	pop	{r7, pc}

20002ed6 <TIM_SelectCCDMA>:
  * @param  NewState: new state of the Capture Compare DMA source
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCCDMA(TIM_TypeDef* TIMx, FunctionalState NewState)
{
20002ed6:	b580      	push	{r7, lr}
20002ed8:	b082      	sub	sp, #8
20002eda:	af00      	add	r7, sp, #0
20002edc:	6078      	str	r0, [r7, #4]
20002ede:	000a      	movs	r2, r1
20002ee0:	1cfb      	adds	r3, r7, #3
20002ee2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20002ee4:	1cfb      	adds	r3, r7, #3
20002ee6:	781b      	ldrb	r3, [r3, #0]
20002ee8:	2b00      	cmp	r3, #0
20002eea:	d008      	beq.n	20002efe <TIM_SelectCCDMA+0x28>
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
20002eec:	687b      	ldr	r3, [r7, #4]
20002eee:	889b      	ldrh	r3, [r3, #4]
20002ef0:	b29b      	uxth	r3, r3
20002ef2:	2208      	movs	r2, #8
20002ef4:	4313      	orrs	r3, r2
20002ef6:	b29a      	uxth	r2, r3
20002ef8:	687b      	ldr	r3, [r7, #4]
20002efa:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCDS;
  }
}
20002efc:	e007      	b.n	20002f0e <TIM_SelectCCDMA+0x38>
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCDS;
20002efe:	687b      	ldr	r3, [r7, #4]
20002f00:	889b      	ldrh	r3, [r3, #4]
20002f02:	b29b      	uxth	r3, r3
20002f04:	2208      	movs	r2, #8
20002f06:	4393      	bics	r3, r2
20002f08:	b29a      	uxth	r2, r3
20002f0a:	687b      	ldr	r3, [r7, #4]
20002f0c:	809a      	strh	r2, [r3, #4]
}
20002f0e:	46c0      	nop			; (mov r8, r8)
20002f10:	46bd      	mov	sp, r7
20002f12:	b002      	add	sp, #8
20002f14:	bd80      	pop	{r7, pc}

20002f16 <TIM_InternalClockConfig>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
  *         peripheral.
  * @retval None
  */
void TIM_InternalClockConfig(TIM_TypeDef* TIMx)
{
20002f16:	b580      	push	{r7, lr}
20002f18:	b082      	sub	sp, #8
20002f1a:	af00      	add	r7, sp, #0
20002f1c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  (uint16_t)~TIM_SMCR_SMS;
20002f1e:	687b      	ldr	r3, [r7, #4]
20002f20:	891b      	ldrh	r3, [r3, #8]
20002f22:	b29b      	uxth	r3, r3
20002f24:	2207      	movs	r2, #7
20002f26:	4393      	bics	r3, r2
20002f28:	b29a      	uxth	r2, r3
20002f2a:	687b      	ldr	r3, [r7, #4]
20002f2c:	811a      	strh	r2, [r3, #8]
}
20002f2e:	46c0      	nop			; (mov r8, r8)
20002f30:	46bd      	mov	sp, r7
20002f32:	b002      	add	sp, #8
20002f34:	bd80      	pop	{r7, pc}

20002f36 <TIM_ITRxExternalClockConfig>:
  *            @arg TIM_TS_ITR2: Internal Trigger 2
  *            @arg TIM_TS_ITR3: Internal Trigger 3
  * @retval None
  */
void TIM_ITRxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
20002f36:	b580      	push	{r7, lr}
20002f38:	b082      	sub	sp, #8
20002f3a:	af00      	add	r7, sp, #0
20002f3c:	6078      	str	r0, [r7, #4]
20002f3e:	000a      	movs	r2, r1
20002f40:	1cbb      	adds	r3, r7, #2
20002f42:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_INTERNAL_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);
20002f44:	1cbb      	adds	r3, r7, #2
20002f46:	881a      	ldrh	r2, [r3, #0]
20002f48:	687b      	ldr	r3, [r7, #4]
20002f4a:	0011      	movs	r1, r2
20002f4c:	0018      	movs	r0, r3
20002f4e:	f000 f8b9 	bl	200030c4 <TIM_SelectInputTrigger>

  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
20002f52:	687b      	ldr	r3, [r7, #4]
20002f54:	891b      	ldrh	r3, [r3, #8]
20002f56:	b29b      	uxth	r3, r3
20002f58:	2207      	movs	r2, #7
20002f5a:	4313      	orrs	r3, r2
20002f5c:	b29a      	uxth	r2, r3
20002f5e:	687b      	ldr	r3, [r7, #4]
20002f60:	811a      	strh	r2, [r3, #8]
}
20002f62:	46c0      	nop			; (mov r8, r8)
20002f64:	46bd      	mov	sp, r7
20002f66:	b002      	add	sp, #8
20002f68:	bd80      	pop	{r7, pc}

20002f6a <TIM_TIxExternalClockConfig>:
  *          This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
20002f6a:	b5b0      	push	{r4, r5, r7, lr}
20002f6c:	b084      	sub	sp, #16
20002f6e:	af00      	add	r7, sp, #0
20002f70:	60f8      	str	r0, [r7, #12]
20002f72:	000c      	movs	r4, r1
20002f74:	0010      	movs	r0, r2
20002f76:	0019      	movs	r1, r3
20002f78:	250a      	movs	r5, #10
20002f7a:	197b      	adds	r3, r7, r5
20002f7c:	1c22      	adds	r2, r4, #0
20002f7e:	801a      	strh	r2, [r3, #0]
20002f80:	2408      	movs	r4, #8
20002f82:	193b      	adds	r3, r7, r4
20002f84:	1c02      	adds	r2, r0, #0
20002f86:	801a      	strh	r2, [r3, #0]
20002f88:	1dbb      	adds	r3, r7, #6
20002f8a:	1c0a      	adds	r2, r1, #0
20002f8c:	801a      	strh	r2, [r3, #0]
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
20002f8e:	197b      	adds	r3, r7, r5
20002f90:	881b      	ldrh	r3, [r3, #0]
20002f92:	2b60      	cmp	r3, #96	; 0x60
20002f94:	d109      	bne.n	20002faa <TIM_TIxExternalClockConfig+0x40>
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
20002f96:	1dbb      	adds	r3, r7, #6
20002f98:	881a      	ldrh	r2, [r3, #0]
20002f9a:	193b      	adds	r3, r7, r4
20002f9c:	8819      	ldrh	r1, [r3, #0]
20002f9e:	68f8      	ldr	r0, [r7, #12]
20002fa0:	0013      	movs	r3, r2
20002fa2:	2201      	movs	r2, #1
20002fa4:	f000 fa33 	bl	2000340e <TI2_Config>
20002fa8:	e009      	b.n	20002fbe <TIM_TIxExternalClockConfig+0x54>
  }
  else
  {
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
20002faa:	1dbb      	adds	r3, r7, #6
20002fac:	881a      	ldrh	r2, [r3, #0]
20002fae:	2308      	movs	r3, #8
20002fb0:	18fb      	adds	r3, r7, r3
20002fb2:	8819      	ldrh	r1, [r3, #0]
20002fb4:	68f8      	ldr	r0, [r7, #12]
20002fb6:	0013      	movs	r3, r2
20002fb8:	2201      	movs	r2, #1
20002fba:	f000 f9cf 	bl	2000335c <TI1_Config>
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
20002fbe:	230a      	movs	r3, #10
20002fc0:	18fb      	adds	r3, r7, r3
20002fc2:	881a      	ldrh	r2, [r3, #0]
20002fc4:	68fb      	ldr	r3, [r7, #12]
20002fc6:	0011      	movs	r1, r2
20002fc8:	0018      	movs	r0, r3
20002fca:	f000 f87b 	bl	200030c4 <TIM_SelectInputTrigger>
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
20002fce:	68fb      	ldr	r3, [r7, #12]
20002fd0:	891b      	ldrh	r3, [r3, #8]
20002fd2:	b29b      	uxth	r3, r3
20002fd4:	2207      	movs	r2, #7
20002fd6:	4313      	orrs	r3, r2
20002fd8:	b29a      	uxth	r2, r3
20002fda:	68fb      	ldr	r3, [r7, #12]
20002fdc:	811a      	strh	r2, [r3, #8]
}
20002fde:	46c0      	nop			; (mov r8, r8)
20002fe0:	46bd      	mov	sp, r7
20002fe2:	b004      	add	sp, #16
20002fe4:	bdb0      	pop	{r4, r5, r7, pc}

20002fe6 <TIM_ETRClockMode1Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                            uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
20002fe6:	b5f0      	push	{r4, r5, r6, r7, lr}
20002fe8:	b087      	sub	sp, #28
20002fea:	af00      	add	r7, sp, #0
20002fec:	60f8      	str	r0, [r7, #12]
20002fee:	000c      	movs	r4, r1
20002ff0:	0010      	movs	r0, r2
20002ff2:	0019      	movs	r1, r3
20002ff4:	260a      	movs	r6, #10
20002ff6:	19bb      	adds	r3, r7, r6
20002ff8:	1c22      	adds	r2, r4, #0
20002ffa:	801a      	strh	r2, [r3, #0]
20002ffc:	2308      	movs	r3, #8
20002ffe:	18fb      	adds	r3, r7, r3
20003000:	1c02      	adds	r2, r0, #0
20003002:	801a      	strh	r2, [r3, #0]
20003004:	1dbb      	adds	r3, r7, #6
20003006:	1c0a      	adds	r2, r1, #0
20003008:	801a      	strh	r2, [r3, #0]
  uint16_t tmpsmcr = 0;
2000300a:	2516      	movs	r5, #22
2000300c:	197b      	adds	r3, r7, r5
2000300e:	2200      	movs	r2, #0
20003010:	801a      	strh	r2, [r3, #0]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
20003012:	1dbb      	adds	r3, r7, #6
20003014:	881c      	ldrh	r4, [r3, #0]
20003016:	2308      	movs	r3, #8
20003018:	18fb      	adds	r3, r7, r3
2000301a:	881a      	ldrh	r2, [r3, #0]
2000301c:	19bb      	adds	r3, r7, r6
2000301e:	8819      	ldrh	r1, [r3, #0]
20003020:	68f8      	ldr	r0, [r7, #12]
20003022:	0023      	movs	r3, r4
20003024:	f000 f8c6 	bl	200031b4 <TIM_ETRConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
20003028:	197b      	adds	r3, r7, r5
2000302a:	68fa      	ldr	r2, [r7, #12]
2000302c:	8912      	ldrh	r2, [r2, #8]
2000302e:	801a      	strh	r2, [r3, #0]

  /* Reset the SMS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
20003030:	197b      	adds	r3, r7, r5
20003032:	0028      	movs	r0, r5
20003034:	197a      	adds	r2, r7, r5
20003036:	8812      	ldrh	r2, [r2, #0]
20003038:	2107      	movs	r1, #7
2000303a:	438a      	bics	r2, r1
2000303c:	801a      	strh	r2, [r3, #0]

  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;
2000303e:	183b      	adds	r3, r7, r0
20003040:	183a      	adds	r2, r7, r0
20003042:	8812      	ldrh	r2, [r2, #0]
20003044:	2107      	movs	r1, #7
20003046:	430a      	orrs	r2, r1
20003048:	801a      	strh	r2, [r3, #0]

  /* Select the Trigger selection : ETRF */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
2000304a:	183b      	adds	r3, r7, r0
2000304c:	183a      	adds	r2, r7, r0
2000304e:	8812      	ldrh	r2, [r2, #0]
20003050:	2170      	movs	r1, #112	; 0x70
20003052:	438a      	bics	r2, r1
20003054:	801a      	strh	r2, [r3, #0]
  tmpsmcr |= TIM_TS_ETRF;
20003056:	183b      	adds	r3, r7, r0
20003058:	183a      	adds	r2, r7, r0
2000305a:	8812      	ldrh	r2, [r2, #0]
2000305c:	2170      	movs	r1, #112	; 0x70
2000305e:	430a      	orrs	r2, r1
20003060:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
20003062:	68fb      	ldr	r3, [r7, #12]
20003064:	183a      	adds	r2, r7, r0
20003066:	8812      	ldrh	r2, [r2, #0]
20003068:	811a      	strh	r2, [r3, #8]
}
2000306a:	46c0      	nop			; (mov r8, r8)
2000306c:	46bd      	mov	sp, r7
2000306e:	b007      	add	sp, #28
20003070:	bdf0      	pop	{r4, r5, r6, r7, pc}

20003072 <TIM_ETRClockMode2Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
20003072:	b5f0      	push	{r4, r5, r6, r7, lr}
20003074:	b085      	sub	sp, #20
20003076:	af00      	add	r7, sp, #0
20003078:	60f8      	str	r0, [r7, #12]
2000307a:	000c      	movs	r4, r1
2000307c:	0010      	movs	r0, r2
2000307e:	0019      	movs	r1, r3
20003080:	250a      	movs	r5, #10
20003082:	197b      	adds	r3, r7, r5
20003084:	1c22      	adds	r2, r4, #0
20003086:	801a      	strh	r2, [r3, #0]
20003088:	2608      	movs	r6, #8
2000308a:	19bb      	adds	r3, r7, r6
2000308c:	1c02      	adds	r2, r0, #0
2000308e:	801a      	strh	r2, [r3, #0]
20003090:	1dbb      	adds	r3, r7, #6
20003092:	1c0a      	adds	r2, r1, #0
20003094:	801a      	strh	r2, [r3, #0]
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
20003096:	1dbb      	adds	r3, r7, #6
20003098:	881c      	ldrh	r4, [r3, #0]
2000309a:	19bb      	adds	r3, r7, r6
2000309c:	881a      	ldrh	r2, [r3, #0]
2000309e:	197b      	adds	r3, r7, r5
200030a0:	8819      	ldrh	r1, [r3, #0]
200030a2:	68f8      	ldr	r0, [r7, #12]
200030a4:	0023      	movs	r3, r4
200030a6:	f000 f885 	bl	200031b4 <TIM_ETRConfig>

  /* Enable the External clock mode2 */
  TIMx->SMCR |= TIM_SMCR_ECE;
200030aa:	68fb      	ldr	r3, [r7, #12]
200030ac:	891b      	ldrh	r3, [r3, #8]
200030ae:	b29b      	uxth	r3, r3
200030b0:	2280      	movs	r2, #128	; 0x80
200030b2:	01d2      	lsls	r2, r2, #7
200030b4:	4313      	orrs	r3, r2
200030b6:	b29a      	uxth	r2, r3
200030b8:	68fb      	ldr	r3, [r7, #12]
200030ba:	811a      	strh	r2, [r3, #8]
}
200030bc:	46c0      	nop			; (mov r8, r8)
200030be:	46bd      	mov	sp, r7
200030c0:	b005      	add	sp, #20
200030c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

200030c4 <TIM_SelectInputTrigger>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
200030c4:	b580      	push	{r7, lr}
200030c6:	b084      	sub	sp, #16
200030c8:	af00      	add	r7, sp, #0
200030ca:	6078      	str	r0, [r7, #4]
200030cc:	000a      	movs	r2, r1
200030ce:	1cbb      	adds	r3, r7, #2
200030d0:	801a      	strh	r2, [r3, #0]
  uint16_t tmpsmcr = 0;
200030d2:	200e      	movs	r0, #14
200030d4:	183b      	adds	r3, r7, r0
200030d6:	2200      	movs	r2, #0
200030d8:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
200030da:	183b      	adds	r3, r7, r0
200030dc:	687a      	ldr	r2, [r7, #4]
200030de:	8912      	ldrh	r2, [r2, #8]
200030e0:	801a      	strh	r2, [r3, #0]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
200030e2:	183b      	adds	r3, r7, r0
200030e4:	183a      	adds	r2, r7, r0
200030e6:	8812      	ldrh	r2, [r2, #0]
200030e8:	2170      	movs	r1, #112	; 0x70
200030ea:	438a      	bics	r2, r1
200030ec:	801a      	strh	r2, [r3, #0]

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
200030ee:	183b      	adds	r3, r7, r0
200030f0:	1839      	adds	r1, r7, r0
200030f2:	1cba      	adds	r2, r7, #2
200030f4:	8809      	ldrh	r1, [r1, #0]
200030f6:	8812      	ldrh	r2, [r2, #0]
200030f8:	430a      	orrs	r2, r1
200030fa:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
200030fc:	687b      	ldr	r3, [r7, #4]
200030fe:	183a      	adds	r2, r7, r0
20003100:	8812      	ldrh	r2, [r2, #0]
20003102:	811a      	strh	r2, [r3, #8]
}
20003104:	46c0      	nop			; (mov r8, r8)
20003106:	46bd      	mov	sp, r7
20003108:	b004      	add	sp, #16
2000310a:	bd80      	pop	{r7, pc}

2000310c <TIM_SelectOutputTrigger>:
  *            @arg TIM_TRGOSource_OC4Ref: OC4REF signal is used as the trigger output(TRGO)
  *
  * @retval None
  */
void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
{
2000310c:	b580      	push	{r7, lr}
2000310e:	b082      	sub	sp, #8
20003110:	af00      	add	r7, sp, #0
20003112:	6078      	str	r0, [r7, #4]
20003114:	000a      	movs	r2, r1
20003116:	1cbb      	adds	r3, r7, #2
20003118:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
2000311a:	687b      	ldr	r3, [r7, #4]
2000311c:	889b      	ldrh	r3, [r3, #4]
2000311e:	b29b      	uxth	r3, r3
20003120:	2270      	movs	r2, #112	; 0x70
20003122:	4393      	bics	r3, r2
20003124:	b29a      	uxth	r2, r3
20003126:	687b      	ldr	r3, [r7, #4]
20003128:	809a      	strh	r2, [r3, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
2000312a:	687b      	ldr	r3, [r7, #4]
2000312c:	889b      	ldrh	r3, [r3, #4]
2000312e:	b29a      	uxth	r2, r3
20003130:	1cbb      	adds	r3, r7, #2
20003132:	881b      	ldrh	r3, [r3, #0]
20003134:	4313      	orrs	r3, r2
20003136:	b29a      	uxth	r2, r3
20003138:	687b      	ldr	r3, [r7, #4]
2000313a:	809a      	strh	r2, [r3, #4]
}
2000313c:	46c0      	nop			; (mov r8, r8)
2000313e:	46bd      	mov	sp, r7
20003140:	b002      	add	sp, #8
20003142:	bd80      	pop	{r7, pc}

20003144 <TIM_SelectSlaveMode>:
  *            @arg TIM_SlaveMode_Trigger:   The counter starts at a rising edge of the trigger TRGI
  *            @arg TIM_SlaveMode_External1: Rising edges of the selected trigger (TRGI) clock the counter
  * @retval None
  */
void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_SlaveMode)
{
20003144:	b580      	push	{r7, lr}
20003146:	b082      	sub	sp, #8
20003148:	af00      	add	r7, sp, #0
2000314a:	6078      	str	r0, [r7, #4]
2000314c:	000a      	movs	r2, r1
2000314e:	1cbb      	adds	r3, r7, #2
20003150:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));

  /* Reset the SMS Bits */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_SMS;
20003152:	687b      	ldr	r3, [r7, #4]
20003154:	891b      	ldrh	r3, [r3, #8]
20003156:	b29b      	uxth	r3, r3
20003158:	2207      	movs	r2, #7
2000315a:	4393      	bics	r3, r2
2000315c:	b29a      	uxth	r2, r3
2000315e:	687b      	ldr	r3, [r7, #4]
20003160:	811a      	strh	r2, [r3, #8]

  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
20003162:	687b      	ldr	r3, [r7, #4]
20003164:	891b      	ldrh	r3, [r3, #8]
20003166:	b29a      	uxth	r2, r3
20003168:	1cbb      	adds	r3, r7, #2
2000316a:	881b      	ldrh	r3, [r3, #0]
2000316c:	4313      	orrs	r3, r2
2000316e:	b29a      	uxth	r2, r3
20003170:	687b      	ldr	r3, [r7, #4]
20003172:	811a      	strh	r2, [r3, #8]
}
20003174:	46c0      	nop			; (mov r8, r8)
20003176:	46bd      	mov	sp, r7
20003178:	b002      	add	sp, #8
2000317a:	bd80      	pop	{r7, pc}

2000317c <TIM_SelectMasterSlaveMode>:
  *                                             and its slaves (through TRGO)
  *            @arg TIM_MasterSlaveMode_Disable: No action
  * @retval None
  */
void TIM_SelectMasterSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_MasterSlaveMode)
{
2000317c:	b580      	push	{r7, lr}
2000317e:	b082      	sub	sp, #8
20003180:	af00      	add	r7, sp, #0
20003182:	6078      	str	r0, [r7, #4]
20003184:	000a      	movs	r2, r1
20003186:	1cbb      	adds	r3, r7, #2
20003188:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));

  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_MSM;
2000318a:	687b      	ldr	r3, [r7, #4]
2000318c:	891b      	ldrh	r3, [r3, #8]
2000318e:	b29b      	uxth	r3, r3
20003190:	2280      	movs	r2, #128	; 0x80
20003192:	4393      	bics	r3, r2
20003194:	b29a      	uxth	r2, r3
20003196:	687b      	ldr	r3, [r7, #4]
20003198:	811a      	strh	r2, [r3, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
2000319a:	687b      	ldr	r3, [r7, #4]
2000319c:	891b      	ldrh	r3, [r3, #8]
2000319e:	b29a      	uxth	r2, r3
200031a0:	1cbb      	adds	r3, r7, #2
200031a2:	881b      	ldrh	r3, [r3, #0]
200031a4:	4313      	orrs	r3, r2
200031a6:	b29a      	uxth	r2, r3
200031a8:	687b      	ldr	r3, [r7, #4]
200031aa:	811a      	strh	r2, [r3, #8]
}
200031ac:	46c0      	nop			; (mov r8, r8)
200031ae:	46bd      	mov	sp, r7
200031b0:	b002      	add	sp, #8
200031b2:	bd80      	pop	{r7, pc}

200031b4 <TIM_ETRConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                   uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
200031b4:	b5b0      	push	{r4, r5, r7, lr}
200031b6:	b086      	sub	sp, #24
200031b8:	af00      	add	r7, sp, #0
200031ba:	60f8      	str	r0, [r7, #12]
200031bc:	000c      	movs	r4, r1
200031be:	0010      	movs	r0, r2
200031c0:	0019      	movs	r1, r3
200031c2:	250a      	movs	r5, #10
200031c4:	197b      	adds	r3, r7, r5
200031c6:	1c22      	adds	r2, r4, #0
200031c8:	801a      	strh	r2, [r3, #0]
200031ca:	2408      	movs	r4, #8
200031cc:	193b      	adds	r3, r7, r4
200031ce:	1c02      	adds	r2, r0, #0
200031d0:	801a      	strh	r2, [r3, #0]
200031d2:	1dbb      	adds	r3, r7, #6
200031d4:	1c0a      	adds	r2, r1, #0
200031d6:	801a      	strh	r2, [r3, #0]
  uint16_t tmpsmcr = 0;
200031d8:	2016      	movs	r0, #22
200031da:	183b      	adds	r3, r7, r0
200031dc:	2200      	movs	r2, #0
200031de:	801a      	strh	r2, [r3, #0]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
200031e0:	183b      	adds	r3, r7, r0
200031e2:	68fa      	ldr	r2, [r7, #12]
200031e4:	8912      	ldrh	r2, [r2, #8]
200031e6:	801a      	strh	r2, [r3, #0]

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
200031e8:	183b      	adds	r3, r7, r0
200031ea:	183a      	adds	r2, r7, r0
200031ec:	8812      	ldrh	r2, [r2, #0]
200031ee:	21ff      	movs	r1, #255	; 0xff
200031f0:	400a      	ands	r2, r1
200031f2:	801a      	strh	r2, [r3, #0]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
200031f4:	1dbb      	adds	r3, r7, #6
200031f6:	881b      	ldrh	r3, [r3, #0]
200031f8:	021b      	lsls	r3, r3, #8
200031fa:	b29a      	uxth	r2, r3
200031fc:	193b      	adds	r3, r7, r4
200031fe:	881b      	ldrh	r3, [r3, #0]
20003200:	4313      	orrs	r3, r2
20003202:	b29a      	uxth	r2, r3
20003204:	197b      	adds	r3, r7, r5
20003206:	881b      	ldrh	r3, [r3, #0]
20003208:	4313      	orrs	r3, r2
2000320a:	b299      	uxth	r1, r3
2000320c:	183b      	adds	r3, r7, r0
2000320e:	183a      	adds	r2, r7, r0
20003210:	8812      	ldrh	r2, [r2, #0]
20003212:	430a      	orrs	r2, r1
20003214:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
20003216:	68fb      	ldr	r3, [r7, #12]
20003218:	183a      	adds	r2, r7, r0
2000321a:	8812      	ldrh	r2, [r2, #0]
2000321c:	811a      	strh	r2, [r3, #8]
}
2000321e:	46c0      	nop			; (mov r8, r8)
20003220:	46bd      	mov	sp, r7
20003222:	b006      	add	sp, #24
20003224:	bdb0      	pop	{r4, r5, r7, pc}

20003226 <TIM_EncoderInterfaceConfig>:
  *            @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
20003226:	b5f0      	push	{r4, r5, r6, r7, lr}
20003228:	b087      	sub	sp, #28
2000322a:	af00      	add	r7, sp, #0
2000322c:	60f8      	str	r0, [r7, #12]
2000322e:	000c      	movs	r4, r1
20003230:	0010      	movs	r0, r2
20003232:	0019      	movs	r1, r3
20003234:	260a      	movs	r6, #10
20003236:	19bb      	adds	r3, r7, r6
20003238:	1c22      	adds	r2, r4, #0
2000323a:	801a      	strh	r2, [r3, #0]
2000323c:	2308      	movs	r3, #8
2000323e:	18fb      	adds	r3, r7, r3
20003240:	1c02      	adds	r2, r0, #0
20003242:	801a      	strh	r2, [r3, #0]
20003244:	1dbb      	adds	r3, r7, #6
20003246:	1c0a      	adds	r2, r1, #0
20003248:	801a      	strh	r2, [r3, #0]
  uint16_t tmpsmcr = 0;
2000324a:	2116      	movs	r1, #22
2000324c:	187b      	adds	r3, r7, r1
2000324e:	2200      	movs	r2, #0
20003250:	801a      	strh	r2, [r3, #0]
  uint16_t tmpccmr1 = 0;
20003252:	2414      	movs	r4, #20
20003254:	193b      	adds	r3, r7, r4
20003256:	2200      	movs	r2, #0
20003258:	801a      	strh	r2, [r3, #0]
  uint16_t tmpccer = 0;
2000325a:	2512      	movs	r5, #18
2000325c:	197b      	adds	r3, r7, r5
2000325e:	2200      	movs	r2, #0
20003260:	801a      	strh	r2, [r3, #0]
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
20003262:	187b      	adds	r3, r7, r1
20003264:	68fa      	ldr	r2, [r7, #12]
20003266:	8912      	ldrh	r2, [r2, #8]
20003268:	801a      	strh	r2, [r3, #0]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
2000326a:	193b      	adds	r3, r7, r4
2000326c:	68fa      	ldr	r2, [r7, #12]
2000326e:	8b12      	ldrh	r2, [r2, #24]
20003270:	801a      	strh	r2, [r3, #0]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
20003272:	197b      	adds	r3, r7, r5
20003274:	68fa      	ldr	r2, [r7, #12]
20003276:	8c12      	ldrh	r2, [r2, #32]
20003278:	801a      	strh	r2, [r3, #0]

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
2000327a:	0008      	movs	r0, r1
2000327c:	183b      	adds	r3, r7, r0
2000327e:	183a      	adds	r2, r7, r0
20003280:	8812      	ldrh	r2, [r2, #0]
20003282:	2107      	movs	r1, #7
20003284:	438a      	bics	r2, r1
20003286:	801a      	strh	r2, [r3, #0]
  tmpsmcr |= TIM_EncoderMode;
20003288:	183b      	adds	r3, r7, r0
2000328a:	1839      	adds	r1, r7, r0
2000328c:	19ba      	adds	r2, r7, r6
2000328e:	8809      	ldrh	r1, [r1, #0]
20003290:	8812      	ldrh	r2, [r2, #0]
20003292:	430a      	orrs	r2, r1
20003294:	801a      	strh	r2, [r3, #0]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
20003296:	193b      	adds	r3, r7, r4
20003298:	193a      	adds	r2, r7, r4
2000329a:	8812      	ldrh	r2, [r2, #0]
2000329c:	4916      	ldr	r1, [pc, #88]	; (200032f8 <TIM_EncoderInterfaceConfig+0xd2>)
2000329e:	400a      	ands	r2, r1
200032a0:	801a      	strh	r2, [r3, #0]
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
200032a2:	193b      	adds	r3, r7, r4
200032a4:	193a      	adds	r2, r7, r4
200032a6:	8812      	ldrh	r2, [r2, #0]
200032a8:	2102      	movs	r1, #2
200032aa:	31ff      	adds	r1, #255	; 0xff
200032ac:	430a      	orrs	r2, r1
200032ae:	801a      	strh	r2, [r3, #0]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
200032b0:	197b      	adds	r3, r7, r5
200032b2:	197a      	adds	r2, r7, r5
200032b4:	8812      	ldrh	r2, [r2, #0]
200032b6:	2122      	movs	r1, #34	; 0x22
200032b8:	438a      	bics	r2, r1
200032ba:	801a      	strh	r2, [r3, #0]
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
200032bc:	1dbb      	adds	r3, r7, #6
200032be:	881b      	ldrh	r3, [r3, #0]
200032c0:	011b      	lsls	r3, r3, #4
200032c2:	b29a      	uxth	r2, r3
200032c4:	2308      	movs	r3, #8
200032c6:	18fb      	adds	r3, r7, r3
200032c8:	881b      	ldrh	r3, [r3, #0]
200032ca:	4313      	orrs	r3, r2
200032cc:	b299      	uxth	r1, r3
200032ce:	197b      	adds	r3, r7, r5
200032d0:	197a      	adds	r2, r7, r5
200032d2:	8812      	ldrh	r2, [r2, #0]
200032d4:	430a      	orrs	r2, r1
200032d6:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
200032d8:	68fb      	ldr	r3, [r7, #12]
200032da:	183a      	adds	r2, r7, r0
200032dc:	8812      	ldrh	r2, [r2, #0]
200032de:	811a      	strh	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
200032e0:	68fb      	ldr	r3, [r7, #12]
200032e2:	193a      	adds	r2, r7, r4
200032e4:	8812      	ldrh	r2, [r2, #0]
200032e6:	831a      	strh	r2, [r3, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
200032e8:	68fb      	ldr	r3, [r7, #12]
200032ea:	197a      	adds	r2, r7, r5
200032ec:	8812      	ldrh	r2, [r2, #0]
200032ee:	841a      	strh	r2, [r3, #32]
}
200032f0:	46c0      	nop			; (mov r8, r8)
200032f2:	46bd      	mov	sp, r7
200032f4:	b007      	add	sp, #28
200032f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
200032f8:	fffffcfc 			; <UNDEFINED> instruction: 0xfffffcfc

200032fc <TIM_SelectHallSensor>:
  * @param  NewState: new state of the TIMx Hall sensor interface.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectHallSensor(TIM_TypeDef* TIMx, FunctionalState NewState)
{
200032fc:	b580      	push	{r7, lr}
200032fe:	b082      	sub	sp, #8
20003300:	af00      	add	r7, sp, #0
20003302:	6078      	str	r0, [r7, #4]
20003304:	000a      	movs	r2, r1
20003306:	1cfb      	adds	r3, r7, #3
20003308:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
2000330a:	1cfb      	adds	r3, r7, #3
2000330c:	781b      	ldrb	r3, [r3, #0]
2000330e:	2b00      	cmp	r3, #0
20003310:	d008      	beq.n	20003324 <TIM_SelectHallSensor+0x28>
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
20003312:	687b      	ldr	r3, [r7, #4]
20003314:	889b      	ldrh	r3, [r3, #4]
20003316:	b29b      	uxth	r3, r3
20003318:	2280      	movs	r2, #128	; 0x80
2000331a:	4313      	orrs	r3, r2
2000331c:	b29a      	uxth	r2, r3
2000331e:	687b      	ldr	r3, [r7, #4]
20003320:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_TI1S;
  }
}
20003322:	e007      	b.n	20003334 <TIM_SelectHallSensor+0x38>
    TIMx->CR2 &= (uint16_t)~TIM_CR2_TI1S;
20003324:	687b      	ldr	r3, [r7, #4]
20003326:	889b      	ldrh	r3, [r3, #4]
20003328:	b29b      	uxth	r3, r3
2000332a:	2280      	movs	r2, #128	; 0x80
2000332c:	4393      	bics	r3, r2
2000332e:	b29a      	uxth	r2, r3
20003330:	687b      	ldr	r3, [r7, #4]
20003332:	809a      	strh	r2, [r3, #4]
}
20003334:	46c0      	nop			; (mov r8, r8)
20003336:	46bd      	mov	sp, r7
20003338:	b002      	add	sp, #8
2000333a:	bd80      	pop	{r7, pc}

2000333c <TIM_RemapConfig>:
  *            @arg TIM11_HSE:      TIM11 CH4 input is connected to HSE_RTC clock
  *                                 (HSE divided by a programmable prescaler)  
  * @retval None
  */
void TIM_RemapConfig(TIM_TypeDef* TIMx, uint16_t TIM_Remap)
{
2000333c:	b580      	push	{r7, lr}
2000333e:	b082      	sub	sp, #8
20003340:	af00      	add	r7, sp, #0
20003342:	6078      	str	r0, [r7, #4]
20003344:	000a      	movs	r2, r1
20003346:	1cbb      	adds	r3, r7, #2
20003348:	801a      	strh	r2, [r3, #0]
 /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_REMAP(TIM_Remap));

  /* Set the Timer remapping configuration */
  TIMx->OR =  TIM_Remap;
2000334a:	687b      	ldr	r3, [r7, #4]
2000334c:	1cba      	adds	r2, r7, #2
2000334e:	2150      	movs	r1, #80	; 0x50
20003350:	8812      	ldrh	r2, [r2, #0]
20003352:	525a      	strh	r2, [r3, r1]
}
20003354:	46c0      	nop			; (mov r8, r8)
20003356:	46bd      	mov	sp, r7
20003358:	b002      	add	sp, #8
2000335a:	bd80      	pop	{r7, pc}

2000335c <TI1_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
2000335c:	b5f0      	push	{r4, r5, r6, r7, lr}
2000335e:	b087      	sub	sp, #28
20003360:	af00      	add	r7, sp, #0
20003362:	60f8      	str	r0, [r7, #12]
20003364:	000c      	movs	r4, r1
20003366:	0010      	movs	r0, r2
20003368:	0019      	movs	r1, r3
2000336a:	250a      	movs	r5, #10
2000336c:	197b      	adds	r3, r7, r5
2000336e:	1c22      	adds	r2, r4, #0
20003370:	801a      	strh	r2, [r3, #0]
20003372:	2608      	movs	r6, #8
20003374:	19bb      	adds	r3, r7, r6
20003376:	1c02      	adds	r2, r0, #0
20003378:	801a      	strh	r2, [r3, #0]
2000337a:	1dbb      	adds	r3, r7, #6
2000337c:	1c0a      	adds	r2, r1, #0
2000337e:	801a      	strh	r2, [r3, #0]
  uint16_t tmpccmr1 = 0, tmpccer = 0;
20003380:	2016      	movs	r0, #22
20003382:	183b      	adds	r3, r7, r0
20003384:	2200      	movs	r2, #0
20003386:	801a      	strh	r2, [r3, #0]
20003388:	2414      	movs	r4, #20
2000338a:	193b      	adds	r3, r7, r4
2000338c:	2200      	movs	r2, #0
2000338e:	801a      	strh	r2, [r3, #0]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
20003390:	68fb      	ldr	r3, [r7, #12]
20003392:	8c1b      	ldrh	r3, [r3, #32]
20003394:	b29b      	uxth	r3, r3
20003396:	2201      	movs	r2, #1
20003398:	4393      	bics	r3, r2
2000339a:	b29a      	uxth	r2, r3
2000339c:	68fb      	ldr	r3, [r7, #12]
2000339e:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
200033a0:	183b      	adds	r3, r7, r0
200033a2:	68fa      	ldr	r2, [r7, #12]
200033a4:	8b12      	ldrh	r2, [r2, #24]
200033a6:	801a      	strh	r2, [r3, #0]
  tmpccer = TIMx->CCER;
200033a8:	193b      	adds	r3, r7, r4
200033aa:	68fa      	ldr	r2, [r7, #12]
200033ac:	8c12      	ldrh	r2, [r2, #32]
200033ae:	801a      	strh	r2, [r3, #0]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
200033b0:	183b      	adds	r3, r7, r0
200033b2:	183a      	adds	r2, r7, r0
200033b4:	8812      	ldrh	r2, [r2, #0]
200033b6:	21f3      	movs	r1, #243	; 0xf3
200033b8:	438a      	bics	r2, r1
200033ba:	801a      	strh	r2, [r3, #0]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
200033bc:	1dbb      	adds	r3, r7, #6
200033be:	881b      	ldrh	r3, [r3, #0]
200033c0:	011b      	lsls	r3, r3, #4
200033c2:	b29a      	uxth	r2, r3
200033c4:	19bb      	adds	r3, r7, r6
200033c6:	881b      	ldrh	r3, [r3, #0]
200033c8:	4313      	orrs	r3, r2
200033ca:	b299      	uxth	r1, r3
200033cc:	183b      	adds	r3, r7, r0
200033ce:	183a      	adds	r2, r7, r0
200033d0:	8812      	ldrh	r2, [r2, #0]
200033d2:	430a      	orrs	r2, r1
200033d4:	801a      	strh	r2, [r3, #0]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
200033d6:	193b      	adds	r3, r7, r4
200033d8:	193a      	adds	r2, r7, r4
200033da:	8812      	ldrh	r2, [r2, #0]
200033dc:	210a      	movs	r1, #10
200033de:	438a      	bics	r2, r1
200033e0:	801a      	strh	r2, [r3, #0]
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
200033e2:	197a      	adds	r2, r7, r5
200033e4:	193b      	adds	r3, r7, r4
200033e6:	8812      	ldrh	r2, [r2, #0]
200033e8:	881b      	ldrh	r3, [r3, #0]
200033ea:	4313      	orrs	r3, r2
200033ec:	b29a      	uxth	r2, r3
200033ee:	193b      	adds	r3, r7, r4
200033f0:	2101      	movs	r1, #1
200033f2:	430a      	orrs	r2, r1
200033f4:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
200033f6:	68fb      	ldr	r3, [r7, #12]
200033f8:	183a      	adds	r2, r7, r0
200033fa:	8812      	ldrh	r2, [r2, #0]
200033fc:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
200033fe:	68fb      	ldr	r3, [r7, #12]
20003400:	193a      	adds	r2, r7, r4
20003402:	8812      	ldrh	r2, [r2, #0]
20003404:	841a      	strh	r2, [r3, #32]
}
20003406:	46c0      	nop			; (mov r8, r8)
20003408:	46bd      	mov	sp, r7
2000340a:	b007      	add	sp, #28
2000340c:	bdf0      	pop	{r4, r5, r6, r7, pc}

2000340e <TI2_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
2000340e:	b5f0      	push	{r4, r5, r6, r7, lr}
20003410:	b087      	sub	sp, #28
20003412:	af00      	add	r7, sp, #0
20003414:	60f8      	str	r0, [r7, #12]
20003416:	000c      	movs	r4, r1
20003418:	0010      	movs	r0, r2
2000341a:	0019      	movs	r1, r3
2000341c:	260a      	movs	r6, #10
2000341e:	19bb      	adds	r3, r7, r6
20003420:	1c22      	adds	r2, r4, #0
20003422:	801a      	strh	r2, [r3, #0]
20003424:	2308      	movs	r3, #8
20003426:	18fb      	adds	r3, r7, r3
20003428:	1c02      	adds	r2, r0, #0
2000342a:	801a      	strh	r2, [r3, #0]
2000342c:	1dbb      	adds	r3, r7, #6
2000342e:	1c0a      	adds	r2, r1, #0
20003430:	801a      	strh	r2, [r3, #0]
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
20003432:	2116      	movs	r1, #22
20003434:	187b      	adds	r3, r7, r1
20003436:	2200      	movs	r2, #0
20003438:	801a      	strh	r2, [r3, #0]
2000343a:	2414      	movs	r4, #20
2000343c:	193b      	adds	r3, r7, r4
2000343e:	2200      	movs	r2, #0
20003440:	801a      	strh	r2, [r3, #0]
20003442:	2512      	movs	r5, #18
20003444:	197b      	adds	r3, r7, r5
20003446:	2200      	movs	r2, #0
20003448:	801a      	strh	r2, [r3, #0]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
2000344a:	68fb      	ldr	r3, [r7, #12]
2000344c:	8c1b      	ldrh	r3, [r3, #32]
2000344e:	b29b      	uxth	r3, r3
20003450:	2210      	movs	r2, #16
20003452:	4393      	bics	r3, r2
20003454:	b29a      	uxth	r2, r3
20003456:	68fb      	ldr	r3, [r7, #12]
20003458:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
2000345a:	187b      	adds	r3, r7, r1
2000345c:	68fa      	ldr	r2, [r7, #12]
2000345e:	8b12      	ldrh	r2, [r2, #24]
20003460:	801a      	strh	r2, [r3, #0]
  tmpccer = TIMx->CCER;
20003462:	193b      	adds	r3, r7, r4
20003464:	68fa      	ldr	r2, [r7, #12]
20003466:	8c12      	ldrh	r2, [r2, #32]
20003468:	801a      	strh	r2, [r3, #0]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
2000346a:	197b      	adds	r3, r7, r5
2000346c:	19ba      	adds	r2, r7, r6
2000346e:	8812      	ldrh	r2, [r2, #0]
20003470:	0112      	lsls	r2, r2, #4
20003472:	801a      	strh	r2, [r3, #0]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
20003474:	187b      	adds	r3, r7, r1
20003476:	0008      	movs	r0, r1
20003478:	187a      	adds	r2, r7, r1
2000347a:	8812      	ldrh	r2, [r2, #0]
2000347c:	4918      	ldr	r1, [pc, #96]	; (200034e0 <TI2_Config+0xd2>)
2000347e:	400a      	ands	r2, r1
20003480:	801a      	strh	r2, [r3, #0]
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
20003482:	1dbb      	adds	r3, r7, #6
20003484:	881b      	ldrh	r3, [r3, #0]
20003486:	031b      	lsls	r3, r3, #12
20003488:	b299      	uxth	r1, r3
2000348a:	183b      	adds	r3, r7, r0
2000348c:	183a      	adds	r2, r7, r0
2000348e:	8812      	ldrh	r2, [r2, #0]
20003490:	430a      	orrs	r2, r1
20003492:	801a      	strh	r2, [r3, #0]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
20003494:	2308      	movs	r3, #8
20003496:	18fb      	adds	r3, r7, r3
20003498:	881b      	ldrh	r3, [r3, #0]
2000349a:	021b      	lsls	r3, r3, #8
2000349c:	b299      	uxth	r1, r3
2000349e:	183b      	adds	r3, r7, r0
200034a0:	183a      	adds	r2, r7, r0
200034a2:	8812      	ldrh	r2, [r2, #0]
200034a4:	430a      	orrs	r2, r1
200034a6:	801a      	strh	r2, [r3, #0]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
200034a8:	193b      	adds	r3, r7, r4
200034aa:	193a      	adds	r2, r7, r4
200034ac:	8812      	ldrh	r2, [r2, #0]
200034ae:	21a0      	movs	r1, #160	; 0xa0
200034b0:	438a      	bics	r2, r1
200034b2:	801a      	strh	r2, [r3, #0]
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
200034b4:	197a      	adds	r2, r7, r5
200034b6:	193b      	adds	r3, r7, r4
200034b8:	8812      	ldrh	r2, [r2, #0]
200034ba:	881b      	ldrh	r3, [r3, #0]
200034bc:	4313      	orrs	r3, r2
200034be:	b29a      	uxth	r2, r3
200034c0:	193b      	adds	r3, r7, r4
200034c2:	2110      	movs	r1, #16
200034c4:	430a      	orrs	r2, r1
200034c6:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
200034c8:	68fb      	ldr	r3, [r7, #12]
200034ca:	183a      	adds	r2, r7, r0
200034cc:	8812      	ldrh	r2, [r2, #0]
200034ce:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
200034d0:	68fb      	ldr	r3, [r7, #12]
200034d2:	193a      	adds	r2, r7, r4
200034d4:	8812      	ldrh	r2, [r2, #0]
200034d6:	841a      	strh	r2, [r3, #32]
}
200034d8:	46c0      	nop			; (mov r8, r8)
200034da:	46bd      	mov	sp, r7
200034dc:	b007      	add	sp, #28
200034de:	bdf0      	pop	{r4, r5, r6, r7, pc}
200034e0:	00000cff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

200034e4 <TI3_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
200034e4:	b5f0      	push	{r4, r5, r6, r7, lr}
200034e6:	b087      	sub	sp, #28
200034e8:	af00      	add	r7, sp, #0
200034ea:	60f8      	str	r0, [r7, #12]
200034ec:	000c      	movs	r4, r1
200034ee:	0010      	movs	r0, r2
200034f0:	0019      	movs	r1, r3
200034f2:	260a      	movs	r6, #10
200034f4:	19bb      	adds	r3, r7, r6
200034f6:	1c22      	adds	r2, r4, #0
200034f8:	801a      	strh	r2, [r3, #0]
200034fa:	2308      	movs	r3, #8
200034fc:	18fb      	adds	r3, r7, r3
200034fe:	1c02      	adds	r2, r0, #0
20003500:	801a      	strh	r2, [r3, #0]
20003502:	1dbb      	adds	r3, r7, #6
20003504:	1c0a      	adds	r2, r1, #0
20003506:	801a      	strh	r2, [r3, #0]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
20003508:	2116      	movs	r1, #22
2000350a:	187b      	adds	r3, r7, r1
2000350c:	2200      	movs	r2, #0
2000350e:	801a      	strh	r2, [r3, #0]
20003510:	2414      	movs	r4, #20
20003512:	193b      	adds	r3, r7, r4
20003514:	2200      	movs	r2, #0
20003516:	801a      	strh	r2, [r3, #0]
20003518:	2512      	movs	r5, #18
2000351a:	197b      	adds	r3, r7, r5
2000351c:	2200      	movs	r2, #0
2000351e:	801a      	strh	r2, [r3, #0]

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
20003520:	68fb      	ldr	r3, [r7, #12]
20003522:	8c1b      	ldrh	r3, [r3, #32]
20003524:	b29b      	uxth	r3, r3
20003526:	4a22      	ldr	r2, [pc, #136]	; (200035b0 <TI3_Config+0xcc>)
20003528:	4013      	ands	r3, r2
2000352a:	b29a      	uxth	r2, r3
2000352c:	68fb      	ldr	r3, [r7, #12]
2000352e:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
20003530:	187b      	adds	r3, r7, r1
20003532:	68fa      	ldr	r2, [r7, #12]
20003534:	8b92      	ldrh	r2, [r2, #28]
20003536:	801a      	strh	r2, [r3, #0]
  tmpccer = TIMx->CCER;
20003538:	193b      	adds	r3, r7, r4
2000353a:	68fa      	ldr	r2, [r7, #12]
2000353c:	8c12      	ldrh	r2, [r2, #32]
2000353e:	801a      	strh	r2, [r3, #0]
  tmp = (uint16_t)(TIM_ICPolarity << 8);
20003540:	197b      	adds	r3, r7, r5
20003542:	19ba      	adds	r2, r7, r6
20003544:	8812      	ldrh	r2, [r2, #0]
20003546:	0212      	lsls	r2, r2, #8
20003548:	801a      	strh	r2, [r3, #0]

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
2000354a:	187b      	adds	r3, r7, r1
2000354c:	0008      	movs	r0, r1
2000354e:	187a      	adds	r2, r7, r1
20003550:	8812      	ldrh	r2, [r2, #0]
20003552:	21f3      	movs	r1, #243	; 0xf3
20003554:	438a      	bics	r2, r1
20003556:	801a      	strh	r2, [r3, #0]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
20003558:	1dbb      	adds	r3, r7, #6
2000355a:	881b      	ldrh	r3, [r3, #0]
2000355c:	011b      	lsls	r3, r3, #4
2000355e:	b29a      	uxth	r2, r3
20003560:	2308      	movs	r3, #8
20003562:	18fb      	adds	r3, r7, r3
20003564:	881b      	ldrh	r3, [r3, #0]
20003566:	4313      	orrs	r3, r2
20003568:	b299      	uxth	r1, r3
2000356a:	183b      	adds	r3, r7, r0
2000356c:	183a      	adds	r2, r7, r0
2000356e:	8812      	ldrh	r2, [r2, #0]
20003570:	430a      	orrs	r2, r1
20003572:	801a      	strh	r2, [r3, #0]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
20003574:	193b      	adds	r3, r7, r4
20003576:	193a      	adds	r2, r7, r4
20003578:	8812      	ldrh	r2, [r2, #0]
2000357a:	490e      	ldr	r1, [pc, #56]	; (200035b4 <TI3_Config+0xd0>)
2000357c:	400a      	ands	r2, r1
2000357e:	801a      	strh	r2, [r3, #0]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
20003580:	197a      	adds	r2, r7, r5
20003582:	193b      	adds	r3, r7, r4
20003584:	8812      	ldrh	r2, [r2, #0]
20003586:	881b      	ldrh	r3, [r3, #0]
20003588:	4313      	orrs	r3, r2
2000358a:	b29a      	uxth	r2, r3
2000358c:	193b      	adds	r3, r7, r4
2000358e:	2180      	movs	r1, #128	; 0x80
20003590:	0049      	lsls	r1, r1, #1
20003592:	430a      	orrs	r2, r1
20003594:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
20003596:	68fb      	ldr	r3, [r7, #12]
20003598:	183a      	adds	r2, r7, r0
2000359a:	8812      	ldrh	r2, [r2, #0]
2000359c:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer;
2000359e:	68fb      	ldr	r3, [r7, #12]
200035a0:	193a      	adds	r2, r7, r4
200035a2:	8812      	ldrh	r2, [r2, #0]
200035a4:	841a      	strh	r2, [r3, #32]
}
200035a6:	46c0      	nop			; (mov r8, r8)
200035a8:	46bd      	mov	sp, r7
200035aa:	b007      	add	sp, #28
200035ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
200035ae:	46c0      	nop			; (mov r8, r8)
200035b0:	fffffeff 			; <UNDEFINED> instruction: 0xfffffeff
200035b4:	fffff5ff 			; <UNDEFINED> instruction: 0xfffff5ff

200035b8 <TI4_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
200035b8:	b5f0      	push	{r4, r5, r6, r7, lr}
200035ba:	b087      	sub	sp, #28
200035bc:	af00      	add	r7, sp, #0
200035be:	60f8      	str	r0, [r7, #12]
200035c0:	000c      	movs	r4, r1
200035c2:	0010      	movs	r0, r2
200035c4:	0019      	movs	r1, r3
200035c6:	260a      	movs	r6, #10
200035c8:	19bb      	adds	r3, r7, r6
200035ca:	1c22      	adds	r2, r4, #0
200035cc:	801a      	strh	r2, [r3, #0]
200035ce:	2308      	movs	r3, #8
200035d0:	18fb      	adds	r3, r7, r3
200035d2:	1c02      	adds	r2, r0, #0
200035d4:	801a      	strh	r2, [r3, #0]
200035d6:	1dbb      	adds	r3, r7, #6
200035d8:	1c0a      	adds	r2, r1, #0
200035da:	801a      	strh	r2, [r3, #0]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
200035dc:	2116      	movs	r1, #22
200035de:	187b      	adds	r3, r7, r1
200035e0:	2200      	movs	r2, #0
200035e2:	801a      	strh	r2, [r3, #0]
200035e4:	2414      	movs	r4, #20
200035e6:	193b      	adds	r3, r7, r4
200035e8:	2200      	movs	r2, #0
200035ea:	801a      	strh	r2, [r3, #0]
200035ec:	2512      	movs	r5, #18
200035ee:	197b      	adds	r3, r7, r5
200035f0:	2200      	movs	r2, #0
200035f2:	801a      	strh	r2, [r3, #0]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
200035f4:	68fb      	ldr	r3, [r7, #12]
200035f6:	8c1b      	ldrh	r3, [r3, #32]
200035f8:	b29b      	uxth	r3, r3
200035fa:	4a24      	ldr	r2, [pc, #144]	; (2000368c <TI4_Config+0xd4>)
200035fc:	4013      	ands	r3, r2
200035fe:	b29a      	uxth	r2, r3
20003600:	68fb      	ldr	r3, [r7, #12]
20003602:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
20003604:	187b      	adds	r3, r7, r1
20003606:	68fa      	ldr	r2, [r7, #12]
20003608:	8b92      	ldrh	r2, [r2, #28]
2000360a:	801a      	strh	r2, [r3, #0]
  tmpccer = TIMx->CCER;
2000360c:	193b      	adds	r3, r7, r4
2000360e:	68fa      	ldr	r2, [r7, #12]
20003610:	8c12      	ldrh	r2, [r2, #32]
20003612:	801a      	strh	r2, [r3, #0]
  tmp = (uint16_t)(TIM_ICPolarity << 12);
20003614:	197b      	adds	r3, r7, r5
20003616:	19ba      	adds	r2, r7, r6
20003618:	8812      	ldrh	r2, [r2, #0]
2000361a:	0312      	lsls	r2, r2, #12
2000361c:	801a      	strh	r2, [r3, #0]

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
2000361e:	187b      	adds	r3, r7, r1
20003620:	0008      	movs	r0, r1
20003622:	187a      	adds	r2, r7, r1
20003624:	8812      	ldrh	r2, [r2, #0]
20003626:	491a      	ldr	r1, [pc, #104]	; (20003690 <TI4_Config+0xd8>)
20003628:	400a      	ands	r2, r1
2000362a:	801a      	strh	r2, [r3, #0]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
2000362c:	2308      	movs	r3, #8
2000362e:	18fb      	adds	r3, r7, r3
20003630:	881b      	ldrh	r3, [r3, #0]
20003632:	021b      	lsls	r3, r3, #8
20003634:	b299      	uxth	r1, r3
20003636:	183b      	adds	r3, r7, r0
20003638:	183a      	adds	r2, r7, r0
2000363a:	8812      	ldrh	r2, [r2, #0]
2000363c:	430a      	orrs	r2, r1
2000363e:	801a      	strh	r2, [r3, #0]
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
20003640:	1dbb      	adds	r3, r7, #6
20003642:	881b      	ldrh	r3, [r3, #0]
20003644:	031b      	lsls	r3, r3, #12
20003646:	b299      	uxth	r1, r3
20003648:	183b      	adds	r3, r7, r0
2000364a:	183a      	adds	r2, r7, r0
2000364c:	8812      	ldrh	r2, [r2, #0]
2000364e:	430a      	orrs	r2, r1
20003650:	801a      	strh	r2, [r3, #0]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
20003652:	193b      	adds	r3, r7, r4
20003654:	193a      	adds	r2, r7, r4
20003656:	8812      	ldrh	r2, [r2, #0]
20003658:	490e      	ldr	r1, [pc, #56]	; (20003694 <TI4_Config+0xdc>)
2000365a:	400a      	ands	r2, r1
2000365c:	801a      	strh	r2, [r3, #0]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
2000365e:	197a      	adds	r2, r7, r5
20003660:	193b      	adds	r3, r7, r4
20003662:	8812      	ldrh	r2, [r2, #0]
20003664:	881b      	ldrh	r3, [r3, #0]
20003666:	4313      	orrs	r3, r2
20003668:	b29a      	uxth	r2, r3
2000366a:	193b      	adds	r3, r7, r4
2000366c:	2180      	movs	r1, #128	; 0x80
2000366e:	0149      	lsls	r1, r1, #5
20003670:	430a      	orrs	r2, r1
20003672:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
20003674:	68fb      	ldr	r3, [r7, #12]
20003676:	183a      	adds	r2, r7, r0
20003678:	8812      	ldrh	r2, [r2, #0]
2000367a:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
2000367c:	68fb      	ldr	r3, [r7, #12]
2000367e:	193a      	adds	r2, r7, r4
20003680:	8812      	ldrh	r2, [r2, #0]
20003682:	841a      	strh	r2, [r3, #32]
}
20003684:	46c0      	nop			; (mov r8, r8)
20003686:	46bd      	mov	sp, r7
20003688:	b007      	add	sp, #28
2000368a:	bdf0      	pop	{r4, r5, r6, r7, pc}
2000368c:	ffffefff 			; <UNDEFINED> instruction: 0xffffefff
20003690:	00000cff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20003694:	00005fff 	strdeq	r5, [r0], -pc	; <UNPREDICTABLE>

20003698 <__udivsi3>:
20003698:	2200      	movs	r2, #0
2000369a:	0843      	lsrs	r3, r0, #1
2000369c:	428b      	cmp	r3, r1
2000369e:	d374      	bcc.n	2000378a <__udivsi3+0xf2>
200036a0:	0903      	lsrs	r3, r0, #4
200036a2:	428b      	cmp	r3, r1
200036a4:	d35f      	bcc.n	20003766 <__udivsi3+0xce>
200036a6:	0a03      	lsrs	r3, r0, #8
200036a8:	428b      	cmp	r3, r1
200036aa:	d344      	bcc.n	20003736 <__udivsi3+0x9e>
200036ac:	0b03      	lsrs	r3, r0, #12
200036ae:	428b      	cmp	r3, r1
200036b0:	d328      	bcc.n	20003704 <__udivsi3+0x6c>
200036b2:	0c03      	lsrs	r3, r0, #16
200036b4:	428b      	cmp	r3, r1
200036b6:	d30d      	bcc.n	200036d4 <__udivsi3+0x3c>
200036b8:	22ff      	movs	r2, #255	; 0xff
200036ba:	0209      	lsls	r1, r1, #8
200036bc:	ba12      	rev	r2, r2
200036be:	0c03      	lsrs	r3, r0, #16
200036c0:	428b      	cmp	r3, r1
200036c2:	d302      	bcc.n	200036ca <__udivsi3+0x32>
200036c4:	1212      	asrs	r2, r2, #8
200036c6:	0209      	lsls	r1, r1, #8
200036c8:	d065      	beq.n	20003796 <__udivsi3+0xfe>
200036ca:	0b03      	lsrs	r3, r0, #12
200036cc:	428b      	cmp	r3, r1
200036ce:	d319      	bcc.n	20003704 <__udivsi3+0x6c>
200036d0:	e000      	b.n	200036d4 <__udivsi3+0x3c>
200036d2:	0a09      	lsrs	r1, r1, #8
200036d4:	0bc3      	lsrs	r3, r0, #15
200036d6:	428b      	cmp	r3, r1
200036d8:	d301      	bcc.n	200036de <__udivsi3+0x46>
200036da:	03cb      	lsls	r3, r1, #15
200036dc:	1ac0      	subs	r0, r0, r3
200036de:	4152      	adcs	r2, r2
200036e0:	0b83      	lsrs	r3, r0, #14
200036e2:	428b      	cmp	r3, r1
200036e4:	d301      	bcc.n	200036ea <__udivsi3+0x52>
200036e6:	038b      	lsls	r3, r1, #14
200036e8:	1ac0      	subs	r0, r0, r3
200036ea:	4152      	adcs	r2, r2
200036ec:	0b43      	lsrs	r3, r0, #13
200036ee:	428b      	cmp	r3, r1
200036f0:	d301      	bcc.n	200036f6 <__udivsi3+0x5e>
200036f2:	034b      	lsls	r3, r1, #13
200036f4:	1ac0      	subs	r0, r0, r3
200036f6:	4152      	adcs	r2, r2
200036f8:	0b03      	lsrs	r3, r0, #12
200036fa:	428b      	cmp	r3, r1
200036fc:	d301      	bcc.n	20003702 <__udivsi3+0x6a>
200036fe:	030b      	lsls	r3, r1, #12
20003700:	1ac0      	subs	r0, r0, r3
20003702:	4152      	adcs	r2, r2
20003704:	0ac3      	lsrs	r3, r0, #11
20003706:	428b      	cmp	r3, r1
20003708:	d301      	bcc.n	2000370e <__udivsi3+0x76>
2000370a:	02cb      	lsls	r3, r1, #11
2000370c:	1ac0      	subs	r0, r0, r3
2000370e:	4152      	adcs	r2, r2
20003710:	0a83      	lsrs	r3, r0, #10
20003712:	428b      	cmp	r3, r1
20003714:	d301      	bcc.n	2000371a <__udivsi3+0x82>
20003716:	028b      	lsls	r3, r1, #10
20003718:	1ac0      	subs	r0, r0, r3
2000371a:	4152      	adcs	r2, r2
2000371c:	0a43      	lsrs	r3, r0, #9
2000371e:	428b      	cmp	r3, r1
20003720:	d301      	bcc.n	20003726 <__udivsi3+0x8e>
20003722:	024b      	lsls	r3, r1, #9
20003724:	1ac0      	subs	r0, r0, r3
20003726:	4152      	adcs	r2, r2
20003728:	0a03      	lsrs	r3, r0, #8
2000372a:	428b      	cmp	r3, r1
2000372c:	d301      	bcc.n	20003732 <__udivsi3+0x9a>
2000372e:	020b      	lsls	r3, r1, #8
20003730:	1ac0      	subs	r0, r0, r3
20003732:	4152      	adcs	r2, r2
20003734:	d2cd      	bcs.n	200036d2 <__udivsi3+0x3a>
20003736:	09c3      	lsrs	r3, r0, #7
20003738:	428b      	cmp	r3, r1
2000373a:	d301      	bcc.n	20003740 <__udivsi3+0xa8>
2000373c:	01cb      	lsls	r3, r1, #7
2000373e:	1ac0      	subs	r0, r0, r3
20003740:	4152      	adcs	r2, r2
20003742:	0983      	lsrs	r3, r0, #6
20003744:	428b      	cmp	r3, r1
20003746:	d301      	bcc.n	2000374c <__udivsi3+0xb4>
20003748:	018b      	lsls	r3, r1, #6
2000374a:	1ac0      	subs	r0, r0, r3
2000374c:	4152      	adcs	r2, r2
2000374e:	0943      	lsrs	r3, r0, #5
20003750:	428b      	cmp	r3, r1
20003752:	d301      	bcc.n	20003758 <__udivsi3+0xc0>
20003754:	014b      	lsls	r3, r1, #5
20003756:	1ac0      	subs	r0, r0, r3
20003758:	4152      	adcs	r2, r2
2000375a:	0903      	lsrs	r3, r0, #4
2000375c:	428b      	cmp	r3, r1
2000375e:	d301      	bcc.n	20003764 <__udivsi3+0xcc>
20003760:	010b      	lsls	r3, r1, #4
20003762:	1ac0      	subs	r0, r0, r3
20003764:	4152      	adcs	r2, r2
20003766:	08c3      	lsrs	r3, r0, #3
20003768:	428b      	cmp	r3, r1
2000376a:	d301      	bcc.n	20003770 <__udivsi3+0xd8>
2000376c:	00cb      	lsls	r3, r1, #3
2000376e:	1ac0      	subs	r0, r0, r3
20003770:	4152      	adcs	r2, r2
20003772:	0883      	lsrs	r3, r0, #2
20003774:	428b      	cmp	r3, r1
20003776:	d301      	bcc.n	2000377c <__udivsi3+0xe4>
20003778:	008b      	lsls	r3, r1, #2
2000377a:	1ac0      	subs	r0, r0, r3
2000377c:	4152      	adcs	r2, r2
2000377e:	0843      	lsrs	r3, r0, #1
20003780:	428b      	cmp	r3, r1
20003782:	d301      	bcc.n	20003788 <__udivsi3+0xf0>
20003784:	004b      	lsls	r3, r1, #1
20003786:	1ac0      	subs	r0, r0, r3
20003788:	4152      	adcs	r2, r2
2000378a:	1a41      	subs	r1, r0, r1
2000378c:	d200      	bcs.n	20003790 <__udivsi3+0xf8>
2000378e:	4601      	mov	r1, r0
20003790:	4152      	adcs	r2, r2
20003792:	4610      	mov	r0, r2
20003794:	4770      	bx	lr
20003796:	e7ff      	b.n	20003798 <__udivsi3+0x100>
20003798:	b501      	push	{r0, lr}
2000379a:	2000      	movs	r0, #0
2000379c:	f000 f806 	bl	200037ac <__aeabi_idiv0>
200037a0:	bd02      	pop	{r1, pc}
200037a2:	46c0      	nop			; (mov r8, r8)

200037a4 <__aeabi_uidivmod>:
200037a4:	2900      	cmp	r1, #0
200037a6:	d0f7      	beq.n	20003798 <__udivsi3+0x100>
200037a8:	e776      	b.n	20003698 <__udivsi3>
200037aa:	4770      	bx	lr

200037ac <__aeabi_idiv0>:
200037ac:	4770      	bx	lr
200037ae:	46c0      	nop			; (mov r8, r8)

200037b0 <__itoa>:
200037b0:	1e93      	subs	r3, r2, #2
200037b2:	b510      	push	{r4, lr}
200037b4:	000c      	movs	r4, r1
200037b6:	2b22      	cmp	r3, #34	; 0x22
200037b8:	d904      	bls.n	200037c4 <__itoa+0x14>
200037ba:	2300      	movs	r3, #0
200037bc:	001c      	movs	r4, r3
200037be:	700b      	strb	r3, [r1, #0]
200037c0:	0020      	movs	r0, r4
200037c2:	bd10      	pop	{r4, pc}
200037c4:	2a0a      	cmp	r2, #10
200037c6:	d109      	bne.n	200037dc <__itoa+0x2c>
200037c8:	2800      	cmp	r0, #0
200037ca:	da07      	bge.n	200037dc <__itoa+0x2c>
200037cc:	232d      	movs	r3, #45	; 0x2d
200037ce:	700b      	strb	r3, [r1, #0]
200037d0:	2101      	movs	r1, #1
200037d2:	4240      	negs	r0, r0
200037d4:	1861      	adds	r1, r4, r1
200037d6:	f000 f807 	bl	200037e8 <__utoa>
200037da:	e7f1      	b.n	200037c0 <__itoa+0x10>
200037dc:	2100      	movs	r1, #0
200037de:	e7f9      	b.n	200037d4 <__itoa+0x24>

200037e0 <itoa>:
200037e0:	b510      	push	{r4, lr}
200037e2:	f7ff ffe5 	bl	200037b0 <__itoa>
200037e6:	bd10      	pop	{r4, pc}

200037e8 <__utoa>:
200037e8:	b5f0      	push	{r4, r5, r6, r7, lr}
200037ea:	0016      	movs	r6, r2
200037ec:	b08d      	sub	sp, #52	; 0x34
200037ee:	0007      	movs	r7, r0
200037f0:	000c      	movs	r4, r1
200037f2:	2225      	movs	r2, #37	; 0x25
200037f4:	4916      	ldr	r1, [pc, #88]	; (20003850 <__utoa+0x68>)
200037f6:	a802      	add	r0, sp, #8
200037f8:	f000 f830 	bl	2000385c <memcpy>
200037fc:	1eb3      	subs	r3, r6, #2
200037fe:	2500      	movs	r5, #0
20003800:	2b22      	cmp	r3, #34	; 0x22
20003802:	d820      	bhi.n	20003846 <__utoa+0x5e>
20003804:	1e63      	subs	r3, r4, #1
20003806:	9300      	str	r3, [sp, #0]
20003808:	ab02      	add	r3, sp, #8
2000380a:	9301      	str	r3, [sp, #4]
2000380c:	0038      	movs	r0, r7
2000380e:	0031      	movs	r1, r6
20003810:	f7ff ffc8 	bl	200037a4 <__aeabi_uidivmod>
20003814:	000b      	movs	r3, r1
20003816:	9a01      	ldr	r2, [sp, #4]
20003818:	0029      	movs	r1, r5
2000381a:	5cd3      	ldrb	r3, [r2, r3]
2000381c:	9a00      	ldr	r2, [sp, #0]
2000381e:	3501      	adds	r5, #1
20003820:	5553      	strb	r3, [r2, r5]
20003822:	003b      	movs	r3, r7
20003824:	0007      	movs	r7, r0
20003826:	429e      	cmp	r6, r3
20003828:	d9f0      	bls.n	2000380c <__utoa+0x24>
2000382a:	2300      	movs	r3, #0
2000382c:	0022      	movs	r2, r4
2000382e:	5563      	strb	r3, [r4, r5]
20003830:	000b      	movs	r3, r1
20003832:	1ac8      	subs	r0, r1, r3
20003834:	4283      	cmp	r3, r0
20003836:	dd08      	ble.n	2000384a <__utoa+0x62>
20003838:	7810      	ldrb	r0, [r2, #0]
2000383a:	5ce5      	ldrb	r5, [r4, r3]
2000383c:	7015      	strb	r5, [r2, #0]
2000383e:	54e0      	strb	r0, [r4, r3]
20003840:	3201      	adds	r2, #1
20003842:	3b01      	subs	r3, #1
20003844:	e7f5      	b.n	20003832 <__utoa+0x4a>
20003846:	7025      	strb	r5, [r4, #0]
20003848:	002c      	movs	r4, r5
2000384a:	0020      	movs	r0, r4
2000384c:	b00d      	add	sp, #52	; 0x34
2000384e:	bdf0      	pop	{r4, r5, r6, r7, pc}
20003850:	200038a2 	andcs	r3, r0, r2, lsr #17

20003854 <utoa>:
20003854:	b510      	push	{r4, lr}
20003856:	f7ff ffc7 	bl	200037e8 <__utoa>
2000385a:	bd10      	pop	{r4, pc}

2000385c <memcpy>:
2000385c:	2300      	movs	r3, #0
2000385e:	b510      	push	{r4, lr}
20003860:	429a      	cmp	r2, r3
20003862:	d100      	bne.n	20003866 <memcpy+0xa>
20003864:	bd10      	pop	{r4, pc}
20003866:	5ccc      	ldrb	r4, [r1, r3]
20003868:	54c4      	strb	r4, [r0, r3]
2000386a:	3301      	adds	r3, #1
2000386c:	e7f8      	b.n	20003860 <memcpy+0x4>
	...

20003870 <APBAHBPrescTable>:
20003870:	00000000 	andeq	r0, r0, r0
20003874:	04030201 	streq	r0, [r3], #-513	; 0xfffffdff
20003878:	04030201 	streq	r0, [r3], #-513	; 0xfffffdff
2000387c:	09080706 	stmdbeq	r8, {r1, r2, r8, r9, sl}
20003880:	6c65770a 	stclvs	7, cr7, [r5], #-40	; 0xffffffd8
20003884:	656d6f63 	strbvs	r6, [sp, #-3939]!	; 0xfffff09d
20003888:	00000000 	andeq	r0, r0, r0
2000388c:	74736964 	ldrbtvc	r6, [r3], #-2404	; 0xfffff69c
20003890:	65636e61 	strbvs	r6, [r3, #-3681]!	; 0xfffff19f
20003894:	20736920 	rsbscs	r6, r3, r0, lsr #18
20003898:	206f6f74 	rsbcs	r6, pc, r4, ror pc	; <UNPREDICTABLE>
2000389c:	00726166 	rsbseq	r6, r2, r6, ror #2
200038a0:	3130000a 	teqcc	r0, sl
200038a4:	35343332 	ldrcc	r3, [r4, #-818]!	; 0xfffffcce
200038a8:	39383736 	ldmdbcc	r8!, {r1, r2, r4, r5, r8, r9, sl, ip, sp}
200038ac:	64636261 	strbtvs	r6, [r3], #-609	; 0xfffffd9f
200038b0:	68676665 	stmdavs	r7!, {r0, r2, r5, r6, r9, sl, sp, lr}^
200038b4:	6c6b6a69 			; <UNDEFINED> instruction: 0x6c6b6a69
200038b8:	706f6e6d 	rsbvc	r6, pc, sp, ror #28
200038bc:	74737271 	ldrbtvc	r7, [r3], #-625	; 0xfffffd8f
200038c0:	78777675 	ldmdavc	r7!, {r0, r2, r4, r5, r6, r9, sl, ip, sp, lr}^
200038c4:	00007a79 	andeq	r7, r0, r9, ror sl

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	00000f34 	andeq	r0, r0, r4, lsr pc
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	0000029c 	muleq	r0, ip, r2
      10:	00082b0c 	andeq	r2, r8, ip, lsl #22
      14:	00090b00 	andeq	r0, r9, r0, lsl #22
      18:	00001000 	andeq	r1, r0, r0
      1c:	000cfc20 	andeq	pc, ip, r0, lsr #24
      20:	00000000 	andeq	r0, r0, r0
      24:	06010200 	streq	r0, [r1], -r0, lsl #4
      28:	000007bc 			; <UNDEFINED> instruction: 0x000007bc
      2c:	00006c03 	andeq	r6, r0, r3, lsl #24
      30:	182b0200 	stmdane	fp!, {r9}
      34:	00000038 	andeq	r0, r0, r8, lsr r0
      38:	ba080102 	blt	200448 <startup-0x1fdffbb8>
      3c:	02000007 	andeq	r0, r0, #7
      40:	061b0502 	ldreq	r0, [fp], -r2, lsl #10
      44:	4c030000 	stcmi	0, cr0, [r3], {-0}
      48:	02000007 	andeq	r0, r0, #7
      4c:	00521939 	subseq	r1, r2, r9, lsr r9
      50:	02020000 	andeq	r0, r2, #0
      54:	00040307 	andeq	r0, r4, r7, lsl #6
      58:	07730300 	ldrbeq	r0, [r3, -r0, lsl #6]!
      5c:	4d020000 	stcmi	0, cr0, [r2, #-0]
      60:	00006518 	andeq	r6, r0, r8, lsl r5
      64:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
      68:	0000020e 	andeq	r0, r0, lr, lsl #4
      6c:	00026303 	andeq	r6, r2, r3, lsl #6
      70:	194f0200 	stmdbne	pc, {r9}^	; <UNPREDICTABLE>
      74:	00000078 	andeq	r0, r0, r8, ror r0
      78:	e0070402 	and	r0, r7, r2, lsl #8
      7c:	02000000 	andeq	r0, r0, #0
      80:	02090508 	andeq	r0, r9, #8, 10	; 0x2000000
      84:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
      88:	0000db07 	andeq	sp, r0, r7, lsl #22
      8c:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
      90:	00746e69 	rsbseq	r6, r4, r9, ror #28
      94:	e5070402 	str	r0, [r7, #-1026]	; 0xfffffbfe
      98:	03000000 	movweq	r0, #0
      9c:	0000006e 	andeq	r0, r0, lr, rrx
      a0:	2c131803 	ldccs	8, cr1, [r3], {3}
      a4:	05000000 	streq	r0, [r0, #-0]
      a8:	0000009b 	muleq	r0, fp, r0
      ac:	0000a706 	andeq	sl, r0, r6, lsl #14
      b0:	074e0300 	strbeq	r0, [lr, -r0, lsl #6]
      b4:	24030000 	strcs	r0, [r3], #-0
      b8:	00004614 	andeq	r4, r0, r4, lsl r6
      bc:	07750300 	ldrbeq	r0, [r5, -r0, lsl #6]!
      c0:	2c030000 	stccs	0, cr0, [r3], {-0}
      c4:	00005913 	andeq	r5, r0, r3, lsl r9
      c8:	00bd0500 	adcseq	r0, sp, r0, lsl #10
      cc:	65030000 	strvs	r0, [r3, #-0]
      d0:	03000002 	movweq	r0, #2
      d4:	006c1430 	rsbeq	r1, ip, r0, lsr r4
      d8:	ce050000 	cdpgt	0, 0, cr0, cr5, cr0, {0}
      dc:	07000000 	streq	r0, [r0, -r0]
      e0:	000000ce 	andeq	r0, r0, lr, asr #1
      e4:	000000ef 	andeq	r0, r0, pc, ror #1
      e8:	00009408 	andeq	r9, r0, r8, lsl #8
      ec:	09000100 	stmdbeq	r0, {r8}
      f0:	000005fe 	strdeq	r0, [r0], -lr
      f4:	1906fa04 	stmdbne	r6, {r2, r9, fp, ip, sp, lr, pc}
      f8:	000000c9 	andeq	r0, r0, r9, asr #1
      fc:	0003650a 	andeq	r6, r3, sl, lsl #10
     100:	113b0500 	teqne	fp, r0, lsl #10
     104:	000000ce 	andeq	r0, r0, lr, asr #1
     108:	3801070b 	stmdacc	r1, {r0, r1, r3, r8, r9, sl}
     10c:	06000000 	streq	r0, [r0], -r0
     110:	240e035d 	strcs	r0, [lr], #-861	; 0xfffffca3
     114:	0c000001 	stceq	0, cr0, [r0], {1}
     118:	00000d6c 	andeq	r0, r0, ip, ror #26
     11c:	45530d00 	ldrbmi	r0, [r3, #-3328]	; 0xfffff300
     120:	00010054 	andeq	r0, r1, r4, asr r0
     124:	0005c60e 	andeq	ip, r5, lr, lsl #12
     128:	035d0600 	cmpeq	sp, #0, 12
     12c:	00010828 	andeq	r0, r1, r8, lsr #16
     130:	07840e00 	streq	r0, [r4, r0, lsl #28]
     134:	5d060000 	stcpl	0, cr0, [r6, #-0]
     138:	01083403 	tsteq	r8, r3, lsl #8
     13c:	070b0000 	streq	r0, [fp, -r0]
     140:	00003801 	andeq	r3, r0, r1, lsl #16
     144:	035f0600 	cmpeq	pc, #0, 12
     148:	00015a0e 	andeq	r5, r1, lr, lsl #20
     14c:	035d0c00 	cmpeq	sp, #0, 24
     150:	0c000000 	stceq	0, cr0, [r0], {-0}
     154:	00000195 	muleq	r0, r5, r1
     158:	1b0e0001 	blne	380164 <startup-0x1fc7fe9c>
     15c:	06000005 	streq	r0, [r0], -r5
     160:	3e2f035f 	mcrcc	3, 1, r0, cr15, cr15, {2}
     164:	0b000001 	bleq	170 <startup-0x1ffffe90>
     168:	00380107 	eorseq	r0, r8, r7, lsl #2
     16c:	62060000 	andvs	r0, r6, #0
     170:	01830e03 	orreq	r0, r3, r3, lsl #28
     174:	b60c0000 	strlt	r0, [ip], -r0
     178:	00000004 	andeq	r0, r0, r4
     17c:	0008db0c 	andeq	sp, r8, ip, lsl #22
     180:	0e000100 	adfeqs	f0, f0, f0
     184:	0000026e 	andeq	r0, r0, lr, ror #4
     188:	2c036206 	sfmcs	f6, 4, [r3], {6}
     18c:	00000167 	andeq	r0, r0, r7, ror #2
     190:	6406980f 	strvs	r9, [r6], #-2063	; 0xfffff7f1
     194:	03760906 	cmneq	r6, #98304	; 0x18000
     198:	43100000 	tstmi	r0, #0
     19c:	66060052 			; <UNDEFINED> instruction: 0x66060052
     1a0:	00da1106 	sbcseq	r1, sl, r6, lsl #2
     1a4:	11000000 	mrsne	r0, (UNDEF: 0)
     1a8:	00000248 	andeq	r0, r0, r8, asr #4
     1ac:	11066706 	tstne	r6, r6, lsl #14
     1b0:	000000da 	ldrdeq	r0, [r0], -sl
     1b4:	05741104 	ldrbeq	r1, [r4, #-260]!	; 0xfffffefc
     1b8:	68060000 	stmdavs	r6, {}	; <UNPREDICTABLE>
     1bc:	00da1106 	sbcseq	r1, sl, r6, lsl #2
     1c0:	10080000 	andne	r0, r8, r0
     1c4:	00524943 	subseq	r4, r2, r3, asr #18
     1c8:	11066906 	tstne	r6, r6, lsl #18
     1cc:	000000da 	ldrdeq	r0, [r0], -sl
     1d0:	0155110c 	cmpeq	r5, ip, lsl #2
     1d4:	6a060000 	bvs	1801dc <startup-0x1fe7fe24>
     1d8:	00da1106 	sbcseq	r1, sl, r6, lsl #2
     1dc:	11100000 	tstne	r0, r0
     1e0:	00000757 	andeq	r0, r0, r7, asr r7
     1e4:	11066b06 	tstne	r6, r6, lsl #22
     1e8:	000000da 	ldrdeq	r0, [r0], -sl
     1ec:	06631114 			; <UNDEFINED> instruction: 0x06631114
     1f0:	6c060000 	stcvs	0, cr0, [r6], {-0}
     1f4:	00da1106 	sbcseq	r1, sl, r6, lsl #2
     1f8:	11180000 	tstne	r8, r0
     1fc:	00000579 	andeq	r0, r0, r9, ror r5
     200:	11066d06 	tstne	r6, r6, lsl #26
     204:	000000ce 	andeq	r0, r0, lr, asr #1
     208:	0895111c 	ldmeq	r5, {r2, r3, r4, r8, ip}
     20c:	6e060000 	cdpvs	0, 0, cr0, cr6, cr0, {0}
     210:	00da1106 	sbcseq	r1, sl, r6, lsl #2
     214:	11200000 			; <UNDEFINED> instruction: 0x11200000
     218:	0000019c 	muleq	r0, ip, r1
     21c:	11066f06 	tstne	r6, r6, lsl #30
     220:	000000da 	ldrdeq	r0, [r0], -sl
     224:	05831124 	streq	r1, [r3, #292]	; 0x124
     228:	70060000 	andvc	r0, r6, r0
     22c:	00df1106 	sbcseq	r1, pc, r6, lsl #2
     230:	11280000 			; <UNDEFINED> instruction: 0x11280000
     234:	00000903 	andeq	r0, r0, r3, lsl #18
     238:	11067106 	tstne	r6, r6, lsl #2
     23c:	000000da 	ldrdeq	r0, [r0], -sl
     240:	07951130 			; <UNDEFINED> instruction: 0x07951130
     244:	72060000 	andvc	r0, r6, #0
     248:	00da1106 	sbcseq	r1, sl, r6, lsl #2
     24c:	11340000 	teqne	r4, r0
     250:	000004f7 	strdeq	r0, [r0], -r7
     254:	11067306 	tstne	r6, r6, lsl #6
     258:	000000da 	ldrdeq	r0, [r0], -sl
     25c:	058d1138 	streq	r1, [sp, #312]	; 0x138
     260:	74060000 	strvc	r0, [r6], #-0
     264:	00ce1106 	sbceq	r1, lr, r6, lsl #2
     268:	113c0000 	teqne	ip, r0
     26c:	0000078d 	andeq	r0, r0, sp, lsl #15
     270:	11067506 	tstne	r6, r6, lsl #10
     274:	000000da 	ldrdeq	r0, [r0], -sl
     278:	065b1140 	ldrbeq	r1, [fp], -r0, asr #2
     27c:	76060000 	strvc	r0, [r6], -r0
     280:	00da1106 	sbcseq	r1, sl, r6, lsl #2
     284:	11440000 	mrsne	r0, (UNDEF: 68)
     288:	00000597 	muleq	r0, r7, r5
     28c:	11067706 	tstne	r6, r6, lsl #14
     290:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     294:	010d1148 	tsteq	sp, r8, asr #2
     298:	78060000 	stmdavc	r6, {}	; <UNPREDICTABLE>
     29c:	00da1106 	sbcseq	r1, sl, r6, lsl #2
     2a0:	11500000 	cmpne	r0, r0
     2a4:	00000511 	andeq	r0, r0, r1, lsl r5
     2a8:	11067906 	tstne	r6, r6, lsl #18
     2ac:	000000da 	ldrdeq	r0, [r0], -sl
     2b0:	08211154 	stmdaeq	r1!, {r2, r4, r6, r8, ip}
     2b4:	7a060000 	bvc	1802bc <startup-0x1fe7fd44>
     2b8:	00da1106 	sbcseq	r1, sl, r6, lsl #2
     2bc:	11580000 	cmpne	r8, r0
     2c0:	000005a1 	andeq	r0, r0, r1, lsr #11
     2c4:	11067b06 	tstne	r6, r6, lsl #22
     2c8:	000000ce 	andeq	r0, r0, lr, asr #1
     2cc:	0011115c 	andseq	r1, r1, ip, asr r1
     2d0:	7c060000 	stcvc	0, cr0, [r6], {-0}
     2d4:	00da1106 	sbcseq	r1, sl, r6, lsl #2
     2d8:	11600000 	cmnne	r0, r0
     2dc:	00000469 	andeq	r0, r0, r9, ror #8
     2e0:	11067d06 	tstne	r6, r6, lsl #26
     2e4:	000000da 	ldrdeq	r0, [r0], -sl
     2e8:	05ab1164 	streq	r1, [fp, #356]!	; 0x164
     2ec:	7e060000 	cdpvc	0, 0, cr0, cr6, cr0, {0}
     2f0:	00df1106 	sbcseq	r1, pc, r6, lsl #2
     2f4:	11680000 	cmnne	r8, r0
     2f8:	000008b2 			; <UNDEFINED> instruction: 0x000008b2
     2fc:	11067f06 	tstne	r6, r6, lsl #30
     300:	000000da 	ldrdeq	r0, [r0], -sl
     304:	53431070 	movtpl	r1, #12400	; 0x3070
     308:	80060052 	andhi	r0, r6, r2, asr r0
     30c:	00da1106 	sbcseq	r1, sl, r6, lsl #2
     310:	11740000 	cmnne	r4, r0
     314:	000005b5 			; <UNDEFINED> instruction: 0x000005b5
     318:	11068106 	tstne	r6, r6, lsl #2
     31c:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     320:	081b1178 	ldmdaeq	fp, {r3, r4, r5, r6, r8, ip}
     324:	82060000 	andhi	r0, r6, #0
     328:	00da1106 	sbcseq	r1, sl, r6, lsl #2
     32c:	11800000 	orrne	r0, r0, r0
     330:	00000416 	andeq	r0, r0, r6, lsl r4
     334:	11068306 	tstne	r6, r6, lsl #6
     338:	000000da 	ldrdeq	r0, [r0], -sl
     33c:	056e1184 	strbeq	r1, [lr, #-388]!	; 0xfffffe7c
     340:	84060000 	strhi	r0, [r6], #-0
     344:	00da1106 	sbcseq	r1, sl, r6, lsl #2
     348:	11880000 	orrne	r0, r8, r0
     34c:	0000013f 	andeq	r0, r0, pc, lsr r1
     350:	11068506 	tstne	r6, r6, lsl #10
     354:	000000da 	ldrdeq	r0, [r0], -sl
     358:	08a9118c 	stmiaeq	r9!, {r2, r3, r7, r8, ip}
     35c:	86060000 	strhi	r0, [r6], -r0
     360:	00da1106 	sbcseq	r1, sl, r6, lsl #2
     364:	11900000 	orrsne	r0, r0, r0
     368:	0000015e 	andeq	r0, r0, lr, asr r1
     36c:	11068706 	tstne	r6, r6, lsl #14
     370:	000000da 	ldrdeq	r0, [r0], -sl
     374:	9d0e0094 	stcls	0, cr0, [lr, #-592]	; 0xfffffdb0
     378:	06000003 	streq	r0, [r0], -r3
     37c:	90030689 	andls	r0, r3, r9, lsl #13
     380:	12000001 	andne	r0, r0, #1
     384:	09300710 	ldmdbeq	r0!, {r4, r8, r9, sl}
     388:	000003c1 	andeq	r0, r0, r1, asr #7
     38c:	00005113 	andeq	r5, r0, r3, lsl r1
     390:	0c320700 	ldceq	7, cr0, [r2], #-0
     394:	000000ce 	andeq	r0, r0, lr, asr #1
     398:	03381300 	teqeq	r8, #0, 6
     39c:	33070000 	movwcc	r0, #28672	; 0x7000
     3a0:	0000ce0c 	andeq	ip, r0, ip, lsl #28
     3a4:	d2130400 	andsle	r0, r3, #0, 8
     3a8:	07000006 	streq	r0, [r0, -r6]
     3ac:	00ce0c34 	sbceq	r0, lr, r4, lsr ip
     3b0:	13080000 	movwne	r0, #32768	; 0x8000
     3b4:	0000016e 	andeq	r0, r0, lr, ror #2
     3b8:	ce0c3507 	cfsh32gt	mvfx3, mvfx12, #7
     3bc:	0c000000 	stceq	0, cr0, [r0], {-0}
     3c0:	08f10300 	ldmeq	r1!, {r8, r9}^
     3c4:	36070000 	strcc	r0, [r7], -r0
     3c8:	00038302 	andeq	r8, r3, r2, lsl #6
     3cc:	00ac0700 	adceq	r0, ip, r0, lsl #14
     3d0:	03dd0000 	bicseq	r0, sp, #0
     3d4:	94080000 	strls	r0, [r8], #-0
     3d8:	0f000000 	svceq	0x00000000
     3dc:	03cd0600 	biceq	r0, sp, #0, 12
     3e0:	dd050000 	stcle	0, cr0, [r5, #-0]
     3e4:	14000003 	strne	r0, [r0], #-3
     3e8:	000006e2 	andeq	r0, r0, r2, ror #13
     3ec:	e2149901 	ands	r9, r4, #16384	; 0x4000
     3f0:	05000003 	streq	r0, [r0, #-3]
     3f4:	00387003 	eorseq	r7, r8, r3
     3f8:	00c51520 	sbceq	r1, r5, r0, lsr #10
     3fc:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
     400:	0cec060c 	stcleq	6, cr0, [ip], #48	; 0x30
     404:	00202000 	eoreq	r2, r0, r0
     408:	9c010000 	stcls	0, cr0, [r1], {-0}
     40c:	00000421 	andeq	r0, r0, r1, lsr #8
     410:	0000f216 	andeq	pc, r0, r6, lsl r2	; <UNPREDICTABLE>
     414:	0c5e0100 	ldfeqe	f0, [lr], {-0}
     418:	00009b24 	andeq	r9, r0, r4, lsr #22
     41c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     420:	077d1700 	ldrbeq	r1, [sp, -r0, lsl #14]!
     424:	3c010000 	stccc	0, cr0, [r1], {-0}
     428:	01310a0c 	teqeq	r1, ip, lsl #20
     42c:	0ca80000 	stceq	0, cr0, [r8]
     430:	00442000 	subeq	r2, r4, r0
     434:	9c010000 	stcls	0, cr0, [r1], {-0}
     438:	0000045d 	andeq	r0, r0, sp, asr r4
     43c:	0000f216 	andeq	pc, r0, r6, lsl r2	; <UNPREDICTABLE>
     440:	0c3c0100 	ldfeqs	f0, [ip], #-0
     444:	00009b22 	andeq	r9, r0, r2, lsr #22
     448:	6f910200 	svcvs	0x00910200
     44c:	00032e18 	andeq	r2, r3, r8, lsl lr
     450:	0c3e0100 	ldfeqs	f0, [lr], #-0
     454:	0001310c 	andeq	r3, r1, ip, lsl #2
     458:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     45c:	01471900 	cmpeq	r7, r0, lsl #18
     460:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
     464:	0c8c060c 	stceq	6, cr0, [ip], {12}
     468:	001c2000 	andseq	r2, ip, r0
     46c:	9c010000 	stcls	0, cr0, [r1], {-0}
     470:	0005bf17 	andeq	fp, r5, r7, lsl pc
     474:	0bfb0100 	bleq	ffec087c <APBAHBPrescTable+0xdfebd00c>
     478:	0001240c 	andeq	r2, r1, ip, lsl #8
     47c:	000c0800 	andeq	r0, ip, r0, lsl #16
     480:	00008420 	andeq	r8, r0, r0, lsr #8
     484:	cc9c0100 	ldfgts	f0, [ip], {0}
     488:	16000004 	strne	r0, [r0], -r4
     48c:	00000236 	andeq	r0, r0, r6, lsr r2
     490:	260bfb01 	strcs	pc, [fp], -r1, lsl #22
     494:	0000009b 	muleq	r0, fp, r0
     498:	1a679102 	bne	19e48a8 <startup-0x1e61b758>
     49c:	00706d74 	rsbseq	r6, r0, r4, ror sp
     4a0:	0c0bfd01 	stceq	13, cr15, [fp], {1}
     4a4:	000000ce 	andeq	r0, r0, lr, asr #1
     4a8:	186c9102 	stmdane	ip!, {r1, r8, ip, pc}^
     4ac:	00000047 	andeq	r0, r0, r7, asr #32
     4b0:	0c0bfe01 	stceq	14, cr15, [fp], {1}
     4b4:	000000ce 	andeq	r0, r0, lr, asr #1
     4b8:	18749102 	ldmdane	r4!, {r1, r8, ip, pc}^
     4bc:	0000032e 	andeq	r0, r0, lr, lsr #6
     4c0:	0e0bff01 	cdpeq	15, 0, cr15, cr11, cr1, {0}
     4c4:	00000124 	andeq	r0, r0, r4, lsr #2
     4c8:	00739102 	rsbseq	r9, r3, r2, lsl #2
     4cc:	0008ce15 	andeq	ip, r8, r5, lsl lr
     4d0:	0bd60100 	bleq	ff5808d8 <APBAHBPrescTable+0xdf57d068>
     4d4:	000bb806 	andeq	fp, fp, r6, lsl #16
     4d8:	00005020 	andeq	r5, r0, r0, lsr #32
     4dc:	049c0100 	ldreq	r0, [ip], #256	; 0x100
     4e0:	16000005 	strne	r0, [r0], -r5
     4e4:	000000f2 	strdeq	r0, [r0], -r2
     4e8:	1b0bd601 	blne	2f5cf4 <startup-0x1fd0a30c>
     4ec:	0000009b 	muleq	r0, fp, r0
     4f0:	16779102 	ldrbtne	r9, [r7], -r2, lsl #2
     4f4:	0000023f 	andeq	r0, r0, pc, lsr r2
     4f8:	330bd601 	movwcc	sp, #46593	; 0xb601
     4fc:	0000015a 	andeq	r0, r0, sl, asr r1
     500:	00769102 	rsbseq	r9, r6, r2, lsl #2
     504:	0004ff15 	andeq	pc, r4, r5, lsl pc	; <UNPREDICTABLE>
     508:	0a9e0100 	beq	fe780910 <APBAHBPrescTable+0xde77d0a0>
     50c:	000b7c06 	andeq	r7, fp, r6, lsl #24
     510:	00003c20 	andeq	r3, r0, r0, lsr #24
     514:	2c9c0100 	ldfcss	f0, [ip], {0}
     518:	16000005 	strne	r0, [r0], -r5
     51c:	0000066c 	andeq	r0, r0, ip, ror #12
     520:	200a9e01 	andcs	r9, sl, r1, lsl #28
     524:	0000009b 	muleq	r0, fp, r0
     528:	00779102 	rsbseq	r9, r7, r2, lsl #2
     52c:	00012215 	andeq	r2, r1, r5, lsl r2
     530:	0a860100 	beq	fe180938 <APBAHBPrescTable+0xde17d0c8>
     534:	000b3c06 	andeq	r3, fp, r6, lsl #24
     538:	00004020 	andeq	r4, r0, r0, lsr #32
     53c:	649c0100 	ldrvs	r0, [ip], #256	; 0x100
     540:	16000005 	strne	r0, [r0], -r5
     544:	000007d7 	ldrdeq	r0, [r0], -r7
     548:	2c0a8601 	stccs	6, cr8, [sl], {1}
     54c:	000000ce 	andeq	r0, r0, lr, asr #1
     550:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
     554:	0000023f 	andeq	r0, r0, pc, lsr r2
     558:	4c0a8601 	stcmi	6, cr8, [sl], {1}
     55c:	0000015a 	andeq	r0, r0, sl, asr r1
     560:	00739102 	rsbseq	r9, r3, r2, lsl #2
     564:	00068c15 	andeq	r8, r6, r5, lsl ip
     568:	0a520100 	beq	1480970 <startup-0x1eb7f690>
     56c:	000afc06 	andeq	pc, sl, r6, lsl #24
     570:	00004020 	andeq	r4, r0, r0, lsr #32
     574:	9c9c0100 	ldflss	f0, [ip], {0}
     578:	16000005 	strne	r0, [r0], -r5
     57c:	00000347 	andeq	r0, r0, r7, asr #6
     580:	2c0a5201 	sfmcs	f5, 4, [sl], {1}
     584:	000000ce 	andeq	r0, r0, lr, asr #1
     588:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
     58c:	0000023f 	andeq	r0, r0, pc, lsr r2
     590:	4c0a5201 	sfmmi	f5, 4, [sl], {1}
     594:	0000015a 	andeq	r0, r0, sl, asr r1
     598:	00739102 	rsbseq	r9, r3, r2, lsl #2
     59c:	00079d15 	andeq	r9, r7, r5, lsl sp
     5a0:	0a190100 	beq	6409a8 <startup-0x1f9bf658>
     5a4:	000abc06 	andeq	fp, sl, r6, lsl #24
     5a8:	00004020 	andeq	r4, r0, r0, lsr #32
     5ac:	d49c0100 	ldrle	r0, [ip], #256	; 0x100
     5b0:	16000005 	strne	r0, [r0], -r5
     5b4:	00000473 	andeq	r0, r0, r3, ror r4
     5b8:	2c0a1901 			; <UNDEFINED> instruction: 0x2c0a1901
     5bc:	000000ce 	andeq	r0, r0, lr, asr #1
     5c0:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
     5c4:	0000023f 	andeq	r0, r0, pc, lsr r2
     5c8:	4c0a1901 			; <UNDEFINED> instruction: 0x4c0a1901
     5cc:	0000015a 	andeq	r0, r0, sl, asr r1
     5d0:	00739102 	rsbseq	r9, r3, r2, lsl #2
     5d4:	00042115 	andeq	r2, r4, r5, lsl r1
     5d8:	09fb0100 	ldmibeq	fp!, {r8}^
     5dc:	000a7c06 	andeq	r7, sl, r6, lsl #24
     5e0:	00004020 	andeq	r4, r0, r0, lsr #32
     5e4:	0c9c0100 	ldfeqs	f0, [ip], {0}
     5e8:	16000006 	strne	r0, [r0], -r6
     5ec:	0000045a 	andeq	r0, r0, sl, asr r4
     5f0:	2c09fb01 			; <UNDEFINED> instruction: 0x2c09fb01
     5f4:	000000ce 	andeq	r0, r0, lr, asr #1
     5f8:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
     5fc:	0000023f 	andeq	r0, r0, pc, lsr r2
     600:	4c09fb01 			; <UNDEFINED> instruction: 0x4c09fb01
     604:	0000015a 	andeq	r0, r0, sl, asr r1
     608:	00739102 	rsbseq	r9, r3, r2, lsl #2
     60c:	00095915 	andeq	r5, r9, r5, lsl r9
     610:	09db0100 	ldmibeq	fp, {r8}^
     614:	000a3c06 	andeq	r3, sl, r6, lsl #24
     618:	00004020 	andeq	r4, r0, r0, lsr #32
     61c:	449c0100 	ldrmi	r0, [ip], #256	; 0x100
     620:	16000006 	strne	r0, [r0], -r6
     624:	000000fe 	strdeq	r0, [r0], -lr
     628:	2c09db01 			; <UNDEFINED> instruction: 0x2c09db01
     62c:	000000ce 	andeq	r0, r0, lr, asr #1
     630:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
     634:	0000023f 	andeq	r0, r0, pc, lsr r2
     638:	4c09db01 			; <UNDEFINED> instruction: 0x4c09db01
     63c:	0000015a 	andeq	r0, r0, sl, asr r1
     640:	00739102 	rsbseq	r9, r3, r2, lsl #2
     644:	00053715 	andeq	r3, r5, r5, lsl r7
     648:	09aa0100 	stmibeq	sl!, {r8}
     64c:	0009fc06 	andeq	pc, r9, r6, lsl #24
     650:	00004020 	andeq	r4, r0, r0, lsr #32
     654:	7c9c0100 	ldfvcs	f0, [ip], {0}
     658:	16000006 	strne	r0, [r0], -r6
     65c:	000007d7 	ldrdeq	r0, [r0], -r7
     660:	2609aa01 	strcs	sl, [r9], -r1, lsl #20
     664:	000000ce 	andeq	r0, r0, lr, asr #1
     668:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
     66c:	0000023f 	andeq	r0, r0, pc, lsr r2
     670:	4609aa01 	strmi	sl, [r9], -r1, lsl #20
     674:	0000015a 	andeq	r0, r0, sl, asr r1
     678:	00739102 	rsbseq	r9, r3, r2, lsl #2
     67c:	00008515 	andeq	r8, r0, r5, lsl r5
     680:	097b0100 	ldmdbeq	fp!, {r8}^
     684:	0009bc06 	andeq	fp, r9, r6, lsl #24
     688:	00004020 	andeq	r4, r0, r0, lsr #32
     68c:	b49c0100 	ldrlt	r0, [ip], #256	; 0x100
     690:	16000006 	strne	r0, [r0], -r6
     694:	00000347 	andeq	r0, r0, r7, asr #6
     698:	26097b01 	strcs	r7, [r9], -r1, lsl #22
     69c:	000000ce 	andeq	r0, r0, lr, asr #1
     6a0:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
     6a4:	0000023f 	andeq	r0, r0, pc, lsr r2
     6a8:	46097b01 	strmi	r7, [r9], -r1, lsl #22
     6ac:	0000015a 	andeq	r0, r0, sl, asr r1
     6b0:	00739102 	rsbseq	r9, r3, r2, lsl #2
     6b4:	0001b515 	andeq	fp, r1, r5, lsl r5
     6b8:	09450100 	stmdbeq	r5, {r8}^
     6bc:	00097c06 	andeq	r7, r9, r6, lsl #24
     6c0:	00004020 	andeq	r4, r0, r0, lsr #32
     6c4:	ec9c0100 	ldfs	f0, [ip], {0}
     6c8:	16000006 	strne	r0, [r0], -r6
     6cc:	00000473 	andeq	r0, r0, r3, ror r4
     6d0:	26094501 	strcs	r4, [r9], -r1, lsl #10
     6d4:	000000ce 	andeq	r0, r0, lr, asr #1
     6d8:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
     6dc:	0000023f 	andeq	r0, r0, pc, lsr r2
     6e0:	46094501 	strmi	r4, [r9], -r1, lsl #10
     6e4:	0000015a 	andeq	r0, r0, sl, asr r1
     6e8:	00739102 	rsbseq	r9, r3, r2, lsl #2
     6ec:	00067515 	andeq	r7, r6, r5, lsl r5
     6f0:	092a0100 	stmdbeq	sl!, {r8}
     6f4:	00093c06 	andeq	r3, r9, r6, lsl #24
     6f8:	00004020 	andeq	r4, r0, r0, lsr #32
     6fc:	249c0100 	ldrcs	r0, [ip], #256	; 0x100
     700:	16000007 	strne	r0, [r0], -r7
     704:	0000045a 	andeq	r0, r0, sl, asr r4
     708:	26092a01 	strcs	r2, [r9], -r1, lsl #20
     70c:	000000ce 	andeq	r0, r0, lr, asr #1
     710:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
     714:	0000023f 	andeq	r0, r0, pc, lsr r2
     718:	46092a01 	strmi	r2, [r9], -r1, lsl #20
     71c:	0000015a 	andeq	r0, r0, sl, asr r1
     720:	00739102 	rsbseq	r9, r3, r2, lsl #2
     724:	0001e315 	andeq	lr, r1, r5, lsl r3
     728:	090d0100 	stmdbeq	sp, {r8}
     72c:	0008fc06 	andeq	pc, r8, r6, lsl #24
     730:	00004020 	andeq	r4, r0, r0, lsr #32
     734:	5c9c0100 	ldfpls	f0, [ip], {0}
     738:	16000007 	strne	r0, [r0], -r7
     73c:	000000fe 	strdeq	r0, [r0], -lr
     740:	26090d01 	strcs	r0, [r9], -r1, lsl #26
     744:	000000ce 	andeq	r0, r0, lr, asr #1
     748:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
     74c:	0000023f 	andeq	r0, r0, pc, lsr r2
     750:	46090d01 	strmi	r0, [r9], -r1, lsl #26
     754:	0000015a 	andeq	r0, r0, sl, asr r1
     758:	00739102 	rsbseq	r9, r3, r2, lsl #2
     75c:	00073515 	andeq	r3, r7, r5, lsl r5
     760:	08e30100 	stmiaeq	r3!, {r8}^
     764:	0008bc06 	andeq	fp, r8, r6, lsl #24
     768:	00004020 	andeq	r4, r0, r0, lsr #32
     76c:	949c0100 	ldrls	r0, [ip], #256	; 0x100
     770:	16000007 	strne	r0, [r0], -r7
     774:	000007d7 	ldrdeq	r0, [r0], -r7
     778:	2608e301 	strcs	lr, [r8], -r1, lsl #6
     77c:	000000ce 	andeq	r0, r0, lr, asr #1
     780:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
     784:	0000023f 	andeq	r0, r0, pc, lsr r2
     788:	4608e301 	strmi	lr, [r8], -r1, lsl #6
     78c:	0000015a 	andeq	r0, r0, sl, asr r1
     790:	00739102 	rsbseq	r9, r3, r2, lsl #2
     794:	0008b715 	andeq	fp, r8, r5, lsl r7
     798:	08af0100 	stmiaeq	pc!, {r8}	; <UNPREDICTABLE>
     79c:	00087c06 	andeq	r7, r8, r6, lsl #24
     7a0:	00004020 	andeq	r4, r0, r0, lsr #32
     7a4:	cc9c0100 	ldfgts	f0, [ip], {0}
     7a8:	16000007 	strne	r0, [r0], -r7
     7ac:	00000347 	andeq	r0, r0, r7, asr #6
     7b0:	2608af01 	strcs	sl, [r8], -r1, lsl #30
     7b4:	000000ce 	andeq	r0, r0, lr, asr #1
     7b8:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
     7bc:	0000023f 	andeq	r0, r0, pc, lsr r2
     7c0:	4608af01 	strmi	sl, [r8], -r1, lsl #30
     7c4:	0000015a 	andeq	r0, r0, sl, asr r1
     7c8:	00739102 	rsbseq	r9, r3, r2, lsl #2
     7cc:	00097615 	andeq	r7, r9, r5, lsl r6
     7d0:	08760100 	ldmdaeq	r6!, {r8}^
     7d4:	00083c06 	andeq	r3, r8, r6, lsl #24
     7d8:	00004020 	andeq	r4, r0, r0, lsr #32
     7dc:	049c0100 	ldreq	r0, [ip], #256	; 0x100
     7e0:	16000008 	strne	r0, [r0], -r8
     7e4:	00000473 	andeq	r0, r0, r3, ror r4
     7e8:	26087601 	strcs	r7, [r8], -r1, lsl #12
     7ec:	000000ce 	andeq	r0, r0, lr, asr #1
     7f0:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
     7f4:	0000023f 	andeq	r0, r0, pc, lsr r2
     7f8:	46087601 	strmi	r7, [r8], -r1, lsl #12
     7fc:	0000015a 	andeq	r0, r0, sl, asr r1
     800:	00739102 	rsbseq	r9, r3, r2, lsl #2
     804:	00017e15 	andeq	r7, r1, r5, lsl lr
     808:	08580100 	ldmdaeq	r8, {r8}^
     80c:	0007fc06 	andeq	pc, r7, r6, lsl #24
     810:	00004020 	andeq	r4, r0, r0, lsr #32
     814:	3c9c0100 	ldfccs	f0, [ip], {0}
     818:	16000008 	strne	r0, [r0], -r8
     81c:	0000045a 	andeq	r0, r0, sl, asr r4
     820:	26085801 	strcs	r5, [r8], -r1, lsl #16
     824:	000000ce 	andeq	r0, r0, lr, asr #1
     828:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
     82c:	0000023f 	andeq	r0, r0, pc, lsr r2
     830:	46085801 	strmi	r5, [r8], -r1, lsl #16
     834:	0000015a 	andeq	r0, r0, sl, asr r1
     838:	00739102 	rsbseq	r9, r3, r2, lsl #2
     83c:	00064415 	andeq	r4, r6, r5, lsl r4
     840:	08380100 	ldmdaeq	r8!, {r8}
     844:	0007bc06 	andeq	fp, r7, r6, lsl #24
     848:	00004020 	andeq	r4, r0, r0, lsr #32
     84c:	749c0100 	ldrvc	r0, [ip], #256	; 0x100
     850:	16000008 	strne	r0, [r0], -r8
     854:	000000fe 	strdeq	r0, [r0], -lr
     858:	26083801 	strcs	r3, [r8], -r1, lsl #16
     85c:	000000ce 	andeq	r0, r0, lr, asr #1
     860:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
     864:	0000023f 	andeq	r0, r0, pc, lsr r2
     868:	46083801 	strmi	r3, [r8], -r1, lsl #16
     86c:	0000015a 	andeq	r0, r0, sl, asr r1
     870:	00739102 	rsbseq	r9, r3, r2, lsl #2
     874:	0007e615 	andeq	lr, r7, r5, lsl r6
     878:	080e0100 	stmdaeq	lr, {r8}
     87c:	0007a006 	andeq	sl, r7, r6
     880:	00001c20 	andeq	r1, r0, r0, lsr #24
     884:	9c9c0100 	ldflss	f0, [ip], {0}
     888:	16000008 	strne	r0, [r0], -r8
     88c:	00000625 	andeq	r0, r0, r5, lsr #12
     890:	24080e01 	strcs	r0, [r8], #-3585	; 0xfffff1ff
     894:	000000ce 	andeq	r0, r0, lr, asr #1
     898:	00749102 	rsbseq	r9, r4, r2, lsl #2
     89c:	0003ee15 	andeq	lr, r3, r5, lsl lr
     8a0:	078e0100 	streq	r0, [lr, r0, lsl #2]
     8a4:	00076406 	andeq	r6, r7, r6, lsl #8
     8a8:	00003c20 	andeq	r3, r0, r0, lsr #24
     8ac:	d49c0100 	ldrle	r0, [ip], #256	; 0x100
     8b0:	16000008 	strne	r0, [r0], -r8
     8b4:	00000038 	andeq	r0, r0, r8, lsr r0
     8b8:	24078e01 	strcs	r8, [r7], #-3585	; 0xfffff1ff
     8bc:	000000ce 	andeq	r0, r0, lr, asr #1
     8c0:	186c9102 	stmdane	ip!, {r1, r8, ip, pc}^
     8c4:	00000167 	andeq	r0, r0, r7, ror #2
     8c8:	0c079001 	stceq	0, cr9, [r7], {1}
     8cc:	000000ce 	andeq	r0, r0, lr, asr #1
     8d0:	00749102 	rsbseq	r9, r4, r2, lsl #2
     8d4:	0000a115 	andeq	sl, r0, r5, lsl r1
     8d8:	072b0100 	streq	r0, [fp, -r0, lsl #2]!
     8dc:	00072406 	andeq	r2, r7, r6, lsl #8
     8e0:	00004020 	andeq	r4, r0, r0, lsr #32
     8e4:	0c9c0100 	ldfeqs	f0, [ip], {0}
     8e8:	16000009 	strne	r0, [r0], -r9
     8ec:	00000029 	andeq	r0, r0, r9, lsr #32
     8f0:	29072b01 	stmdbcs	r7, {r0, r8, r9, fp, sp}
     8f4:	000000ce 	andeq	r0, r0, lr, asr #1
     8f8:	186c9102 	stmdane	ip!, {r1, r8, ip, pc}^
     8fc:	00000167 	andeq	r0, r0, r7, ror #2
     900:	0c072d01 	stceq	13, cr2, [r7], {1}
     904:	000000ce 	andeq	r0, r0, lr, asr #1
     908:	00749102 	rsbseq	r9, r4, r2, lsl #2
     90c:	00048e15 	andeq	r8, r4, r5, lsl lr
     910:	070b0100 	streq	r0, [fp, -r0, lsl #2]
     914:	0006e806 	andeq	lr, r6, r6, lsl #16
     918:	00003c20 	andeq	r3, r0, r0, lsr #24
     91c:	449c0100 	ldrmi	r0, [ip], #256	; 0x100
     920:	16000009 	strne	r0, [r0], -r9
     924:	000004d7 	ldrdeq	r0, [r0], -r7
     928:	29070b01 	stmdbcs	r7, {r0, r8, r9, fp}
     92c:	000000ce 	andeq	r0, r0, lr, asr #1
     930:	186c9102 	stmdane	ip!, {r1, r8, ip, pc}^
     934:	00000167 	andeq	r0, r0, r7, ror #2
     938:	0c070d01 	stceq	13, cr0, [r7], {1}
     93c:	000000ce 	andeq	r0, r0, lr, asr #1
     940:	00749102 	rsbseq	r9, r4, r2, lsl #2
     944:	0005df15 	andeq	sp, r5, r5, lsl pc
     948:	06ea0100 	strbteq	r0, [sl], r0, lsl #2
     94c:	0006ac06 	andeq	sl, r6, r6, lsl #24
     950:	00003c20 	andeq	r3, r0, r0, lsr #24
     954:	7c9c0100 	ldfvcs	f0, [ip], {0}
     958:	16000009 	strne	r0, [r0], -r9
     95c:	000003d7 	ldrdeq	r0, [r0], -r7
     960:	2606ea01 	strcs	lr, [r6], -r1, lsl #20
     964:	000000ce 	andeq	r0, r0, lr, asr #1
     968:	186c9102 	stmdane	ip!, {r1, r8, ip, pc}^
     96c:	00000167 	andeq	r0, r0, r7, ror #2
     970:	0c06ec01 	stceq	12, cr14, [r6], {1}
     974:	000000ce 	andeq	r0, r0, lr, asr #1
     978:	00749102 	rsbseq	r9, r4, r2, lsl #2
     97c:	0001cc15 	andeq	ip, r1, r5, lsl ip
     980:	06c60100 	strbeq	r0, [r6], r0, lsl #2
     984:	00067006 	andeq	r7, r6, r6
     988:	00003c20 	andeq	r3, r0, r0, lsr #24
     98c:	b49c0100 	ldrlt	r0, [ip], #256	; 0x100
     990:	16000009 	strne	r0, [r0], -r9
     994:	000003c0 	andeq	r0, r0, r0, asr #7
     998:	2606c601 	strcs	ip, [r6], -r1, lsl #12
     99c:	000000ce 	andeq	r0, r0, lr, asr #1
     9a0:	186c9102 	stmdane	ip!, {r1, r8, ip, pc}^
     9a4:	00000167 	andeq	r0, r0, r7, ror #2
     9a8:	0c06c801 	stceq	8, cr12, [r6], {1}
     9ac:	000000ce 	andeq	r0, r0, lr, asr #1
     9b0:	00749102 	rsbseq	r9, r4, r2, lsl #2
     9b4:	0007fb15 	andeq	pc, r7, r5, lsl fp	; <UNPREDICTABLE>
     9b8:	06ab0100 	strteq	r0, [fp], r0, lsl #2
     9bc:	00065406 	andeq	r5, r6, r6, lsl #8
     9c0:	00001c20 	andeq	r1, r0, r0, lsr #24
     9c4:	dc9c0100 	ldfles	f0, [ip], {0}
     9c8:	16000009 	strne	r0, [r0], -r9
     9cc:	0000055d 	andeq	r0, r0, sp, asr r5
     9d0:	2006ab01 	andcs	sl, r6, r1, lsl #22
     9d4:	000000ce 	andeq	r0, r0, lr, asr #1
     9d8:	00749102 	rsbseq	r9, r4, r2, lsl #2
     9dc:	00025015 	andeq	r5, r2, r5, lsl r0
     9e0:	05ef0100 	strbeq	r0, [pc, #256]!	; ae8 <startup-0x1ffff518>
     9e4:	00063406 	andeq	r3, r6, r6, lsl #8
     9e8:	00002020 	andeq	r2, r0, r0, lsr #32
     9ec:	049c0100 	ldreq	r0, [ip], #256	; 0x100
     9f0:	1600000a 	strne	r0, [r0], -sl
     9f4:	0000023f 	andeq	r0, r0, pc, lsr r2
     9f8:	2905ef01 	stmdbcs	r5, {r0, r8, r9, sl, fp, sp, lr, pc}
     9fc:	0000015a 	andeq	r0, r0, sl, asr r1
     a00:	00779102 	rsbseq	r9, r7, r2, lsl #2
     a04:	0004a815 	andeq	sl, r4, r5, lsl r8
     a08:	05de0100 	ldrbeq	r0, [lr, #256]	; 0x100
     a0c:	00061406 	andeq	r1, r6, r6, lsl #8
     a10:	00002020 	andeq	r2, r0, r0, lsr #32
     a14:	2c9c0100 	ldfcss	f0, [ip], {0}
     a18:	1600000a 	strne	r0, [r0], -sl
     a1c:	0000023f 	andeq	r0, r0, pc, lsr r2
     a20:	2405de01 	strcs	sp, [r5], #-3585	; 0xfffff1ff
     a24:	0000015a 	andeq	r0, r0, sl, asr r1
     a28:	00779102 	rsbseq	r9, r7, r2, lsl #2
     a2c:	00093e15 	andeq	r3, r9, r5, lsl lr
     a30:	05be0100 	ldreq	r0, [lr, #256]!	; 0x100
     a34:	0005b406 	andeq	fp, r5, r6, lsl #8
     a38:	00006020 	andeq	r6, r0, r0, lsr #32
     a3c:	649c0100 	ldrvs	r0, [ip], #256	; 0x100
     a40:	1600000a 	strne	r0, [r0], -sl
     a44:	000003af 	andeq	r0, r0, pc, lsr #7
     a48:	2005be01 	andcs	fp, r5, r1, lsl #28
     a4c:	000000ce 	andeq	r0, r0, lr, asr #1
     a50:	186c9102 	stmdane	ip!, {r1, r8, ip, pc}^
     a54:	00000167 	andeq	r0, r0, r7, ror #2
     a58:	0c05c001 	stceq	0, cr12, [r5], {1}
     a5c:	000000ce 	andeq	r0, r0, lr, asr #1
     a60:	00749102 	rsbseq	r9, r4, r2, lsl #2
     a64:	0007231b 	andeq	r2, r7, fp, lsl r3
     a68:	05250100 	streq	r0, [r5, #-256]!	; 0xffffff00
     a6c:	00045006 	andeq	r5, r4, r6
     a70:	00016420 	andeq	r6, r1, r0, lsr #8
     a74:	ec9c0100 	ldfs	f0, [ip], {0}
     a78:	1600000a 	strne	r0, [r0], -sl
     a7c:	00000117 	andeq	r0, r0, r7, lsl r1
     a80:	2b052501 	blcs	149e8c <startup-0x1feb6174>
     a84:	00000aec 	andeq	r0, r0, ip, ror #21
     a88:	1a5c9102 	bne	1724e98 <startup-0x1e8db168>
     a8c:	00706d74 	rsbseq	r6, r0, r4, ror sp
     a90:	0c052701 	stceq	7, cr2, [r5], {1}
     a94:	000000ce 	andeq	r0, r0, lr, asr #1
     a98:	18709102 	ldmdane	r0!, {r1, r8, ip, pc}^
     a9c:	000003a9 	andeq	r0, r0, r9, lsr #7
     aa0:	15052701 	strne	r2, [r5, #-1793]	; 0xfffff8ff
     aa4:	000000ce 	andeq	r0, r0, lr, asr #1
     aa8:	186c9102 	stmdane	ip!, {r1, r8, ip, pc}^
     aac:	00000356 	andeq	r0, r0, r6, asr r3
     ab0:	20052701 	andcs	r2, r5, r1, lsl #14
     ab4:	000000ce 	andeq	r0, r0, lr, asr #1
     ab8:	18749102 	ldmdane	r4!, {r1, r8, ip, pc}^
     abc:	00000067 	andeq	r0, r0, r7, rrx
     ac0:	2c052701 	stccs	7, cr2, [r5], {1}
     ac4:	000000ce 	andeq	r0, r0, lr, asr #1
     ac8:	18689102 	stmdane	r8!, {r1, r8, ip, pc}^
     acc:	0000094f 	andeq	r0, r0, pc, asr #18
     ad0:	36052701 	strcc	r2, [r5], -r1, lsl #14
     ad4:	000000ce 	andeq	r0, r0, lr, asr #1
     ad8:	18649102 	stmdane	r4!, {r1, r8, ip, pc}^
     adc:	00000062 	andeq	r0, r0, r2, rrx
     ae0:	45052701 	strmi	r2, [r5, #-1793]	; 0xfffff8ff
     ae4:	000000ce 	andeq	r0, r0, lr, asr #1
     ae8:	00609102 	rsbeq	r9, r0, r2, lsl #2
     aec:	03c1041c 	biceq	r0, r1, #28, 8	; 0x1c000000
     af0:	a9150000 	ldmdbge	r5, {}	; <UNPREDICTABLE>
     af4:	01000006 	tsteq	r0, r6
     af8:	140604f1 	strne	r0, [r6], #-1265	; 0xfffffb0f
     afc:	3c200004 	stccc	0, cr0, [r0], #-16
     b00:	01000000 	mrseq	r0, (UNDEF: 0)
     b04:	000b2a9c 	muleq	fp, ip, sl
     b08:	00001600 	andeq	r1, r0, r0, lsl #12
     b0c:	f1010000 	setend	le
     b10:	00ce1f04 	sbceq	r1, lr, r4, lsl #30
     b14:	91020000 	mrsls	r0, (UNDEF: 2)
     b18:	0167186c 	cmneq	r7, ip, ror #16
     b1c:	f3010000 	vhadd.u8	d0, d1, d0
     b20:	00ce0c04 	sbceq	r0, lr, r4, lsl #24
     b24:	91020000 	mrsls	r0, (UNDEF: 2)
     b28:	a5150074 	ldrge	r0, [r5, #-116]	; 0xffffff8c
     b2c:	01000001 	tsteq	r0, r1
     b30:	dc0604d2 	cfstrsle	mvf0, [r6], {210}	; 0xd2
     b34:	38200003 	stmdacc	r0!, {r0, r1}
     b38:	01000000 	mrseq	r0, (UNDEF: 0)
     b3c:	000b629c 	muleq	fp, ip, r2
     b40:	00001600 	andeq	r1, r0, r0, lsl #12
     b44:	d2010000 	andle	r0, r1, #0
     b48:	00ce1f04 	sbceq	r1, lr, r4, lsl #30
     b4c:	91020000 	mrsls	r0, (UNDEF: 2)
     b50:	0167186c 	cmneq	r7, ip, ror #16
     b54:	d4010000 	strle	r0, [r1], #-0
     b58:	00ce0c04 	sbceq	r0, lr, r4, lsl #24
     b5c:	91020000 	mrsls	r0, (UNDEF: 2)
     b60:	fa150074 	blx	540d38 <startup-0x1fabf2c8>
     b64:	01000001 	tsteq	r0, r1
     b68:	a80604b3 	stmdage	r6, {r0, r1, r4, r5, r7, sl}
     b6c:	34200003 	strtcc	r0, [r0], #-3
     b70:	01000000 	mrseq	r0, (UNDEF: 0)
     b74:	000b9a9c 	muleq	fp, ip, sl
     b78:	03841600 	orreq	r1, r4, #0, 12
     b7c:	b3010000 	movwlt	r0, #4096	; 0x1000
     b80:	00ce1e04 	sbceq	r1, lr, r4, lsl #28
     b84:	91020000 	mrsls	r0, (UNDEF: 2)
     b88:	0167186c 	cmneq	r7, ip, ror #16
     b8c:	b5010000 	strlt	r0, [r1, #-0]
     b90:	00ce0c04 	sbceq	r0, lr, r4, lsl #24
     b94:	91020000 	mrsls	r0, (UNDEF: 2)
     b98:	881d0074 	ldmdahi	sp, {r2, r4, r5, r6}
     b9c:	01000002 	tsteq	r0, r2
     ba0:	9b09049a 	blls	241e10 <startup-0x1fdbe1f0>
     ba4:	8c000000 	stchi	0, cr0, [r0], {-0}
     ba8:	1c200003 	stcne	0, cr0, [r0], #-12
     bac:	01000000 	mrseq	r0, (UNDEF: 0)
     bb0:	0217159c 	andseq	r1, r7, #156, 10	; 0x27000000
     bb4:	7d010000 	stcvc	0, cr0, [r1, #-0]
     bb8:	03580604 	cmpeq	r8, #4, 12	; 0x400000
     bbc:	00342000 	eorseq	r2, r4, r0
     bc0:	9c010000 	stcls	0, cr0, [r1], {-0}
     bc4:	00000be9 	andeq	r0, r0, r9, ror #23
     bc8:	0006b916 	andeq	fp, r6, r6, lsl r9
     bcc:	047d0100 	ldrbteq	r0, [sp], #-256	; 0xffffff00
     bd0:	0000ce20 	andeq	ip, r0, r0, lsr #28
     bd4:	6c910200 	lfmvs	f0, 4, [r1], {0}
     bd8:	00016718 	andeq	r6, r1, r8, lsl r7
     bdc:	047f0100 	ldrbteq	r0, [pc], #-256	; be4 <startup-0x1ffff41c>
     be0:	0000ce0c 	andeq	ip, r0, ip, lsl #28
     be4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     be8:	080c1500 	stmdaeq	ip, {r8, sl, ip}
     bec:	b5010000 	strlt	r0, [r1, #-0]
     bf0:	031c0603 	tsteq	ip, #3145728	; 0x300000
     bf4:	003c2000 	eorseq	r2, ip, r0
     bf8:	9c010000 	stcls	0, cr0, [r1], {-0}
     bfc:	00000c31 	andeq	r0, r0, r1, lsr ip
     c00:	00054e16 	andeq	r4, r5, r6, lsl lr
     c04:	03b50100 			; <UNDEFINED> instruction: 0x03b50100
     c08:	0000ce1e 	andeq	ip, r0, lr, lsl lr
     c0c:	6c910200 	lfmvs	f0, 4, [r1], {0}
     c10:	00048216 	andeq	r8, r4, r6, lsl r2
     c14:	03b50100 			; <UNDEFINED> instruction: 0x03b50100
     c18:	0000ce37 	andeq	ip, r0, r7, lsr lr
     c1c:	68910200 	ldmvs	r1, {r9}
     c20:	00016718 	andeq	r6, r1, r8, lsl r7
     c24:	03b70100 			; <UNDEFINED> instruction: 0x03b70100
     c28:	0000ce0c 	andeq	ip, r0, ip, lsl #28
     c2c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     c30:	03751500 	cmneq	r5, #0, 10
     c34:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
     c38:	02dc0603 	sbcseq	r0, ip, #3145728	; 0x300000
     c3c:	00402000 	subeq	r2, r0, r0
     c40:	9c010000 	stcls	0, cr0, [r1], {-0}
     c44:	00000c79 	andeq	r0, r0, r9, ror ip
     c48:	00007616 	andeq	r7, r0, r6, lsl r6
     c4c:	03880100 	orreq	r0, r8, #0, 2
     c50:	0000ce1e 	andeq	ip, r0, lr, lsl lr
     c54:	6c910200 	lfmvs	f0, 4, [r1], {0}
     c58:	00052b16 	andeq	r2, r5, r6, lsl fp
     c5c:	03880100 	orreq	r0, r8, #0, 2
     c60:	0000ce37 	andeq	ip, r0, r7, lsr lr
     c64:	68910200 	ldmvs	r1, {r9}
     c68:	00016718 	andeq	r6, r1, r8, lsl r7
     c6c:	038a0100 	orreq	r0, sl, #0, 2
     c70:	0000ce0c 	andeq	ip, r0, ip, lsl #28
     c74:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     c78:	04bc1500 	ldrteq	r1, [ip], #1280	; 0x500
     c7c:	6f010000 	svcvs	0x00010000
     c80:	02bc0603 	adcseq	r0, ip, #3145728	; 0x300000
     c84:	00202000 	eoreq	r2, r0, r0
     c88:	9c010000 	stcls	0, cr0, [r1], {-0}
     c8c:	00000ca1 	andeq	r0, r0, r1, lsr #25
     c90:	00023f16 	andeq	r3, r2, r6, lsl pc
     c94:	036f0100 	cmneq	pc, #0, 2
     c98:	00015a31 	andeq	r5, r1, r1, lsr sl
     c9c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     ca0:	001b1500 	andseq	r1, fp, r0, lsl #10
     ca4:	5d010000 	stcpl	0, cr0, [r1, #-0]
     ca8:	029c0603 	addseq	r0, ip, #3145728	; 0x300000
     cac:	00202000 	eoreq	r2, r0, r0
     cb0:	9c010000 	stcls	0, cr0, [r1], {-0}
     cb4:	00000cc9 	andeq	r0, r0, r9, asr #25
     cb8:	00023f16 	andeq	r3, r2, r6, lsl pc
     cbc:	035d0100 	cmpeq	sp, #0, 2
     cc0:	00015a24 	andeq	r5, r1, r4, lsr #20
     cc4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     cc8:	04e61500 	strbteq	r1, [r6], #1280	; 0x500
     ccc:	49010000 	stmdbmi	r1, {}	; <UNPREDICTABLE>
     cd0:	026c0603 	rsbeq	r0, ip, #3145728	; 0x300000
     cd4:	00302000 	eorseq	r2, r0, r0
     cd8:	9c010000 	stcls	0, cr0, [r1], {-0}
     cdc:	00000d11 	andeq	r0, r0, r1, lsl sp
     ce0:	0005f616 	andeq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
     ce4:	03490100 	movteq	r0, #37120	; 0x9100
     ce8:	0000ce20 	andeq	ip, r0, r0, lsr #28
     cec:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     cf0:	00060b16 	andeq	r0, r6, r6, lsl fp
     cf4:	03490100 	movteq	r0, #37120	; 0x9100
     cf8:	0000ce32 	andeq	ip, r0, r2, lsr lr
     cfc:	70910200 	addsvc	r0, r1, r0, lsl #4
     d00:	00061316 	andeq	r1, r6, r6, lsl r3
     d04:	03490100 	movteq	r0, #37120	; 0x9100
     d08:	0000ce44 	andeq	ip, r0, r4, asr #28
     d0c:	6c910200 	lfmvs	f0, 4, [r1], {0}
     d10:	038f1500 	orreq	r1, pc, #0, 10
     d14:	dc010000 	stcle	0, cr0, [r1], {-0}
     d18:	024c0602 	subeq	r0, ip, #2097152	; 0x200000
     d1c:	00202000 	eoreq	r2, r0, r0
     d20:	9c010000 	stcls	0, cr0, [r1], {-0}
     d24:	00000d39 	andeq	r0, r0, r9, lsr sp
     d28:	00023f16 	andeq	r3, r2, r6, lsl pc
     d2c:	02dc0100 	sbcseq	r0, ip, #0, 2
     d30:	00015a24 	andeq	r5, r1, r4, lsr #20
     d34:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     d38:	043e1500 	ldrteq	r1, [lr], #-1280	; 0xfffffb00
     d3c:	51010000 	mrspl	r0, (UNDEF: 1)
     d40:	02240602 	eoreq	r0, r4, #2097152	; 0x200000
     d44:	00282000 	eoreq	r2, r8, r0
     d48:	9c010000 	stcls	0, cr0, [r1], {-0}
     d4c:	00000d71 	andeq	r0, r0, r1, ror sp
     d50:	00071b16 	andeq	r1, r7, r6, lsl fp
     d54:	02510100 	subseq	r0, r1, #0, 2
     d58:	0000ce20 	andeq	ip, r0, r0, lsr #28
     d5c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     d60:	00076b16 	andeq	r6, r7, r6, lsl fp
     d64:	02510100 	subseq	r0, r1, #0, 2
     d68:	0000ce32 	andeq	ip, r0, r2, lsr lr
     d6c:	70910200 	addsvc	r0, r1, r0, lsl #4
     d70:	06391500 	ldrteq	r1, [r9], -r0, lsl #10
     d74:	33010000 	movwcc	r0, #4096	; 0x1000
     d78:	02040602 	andeq	r0, r4, #2097152	; 0x200000
     d7c:	00202000 	eoreq	r2, r0, r0
     d80:	9c010000 	stcls	0, cr0, [r1], {-0}
     d84:	00000d99 	muleq	r0, r9, sp
     d88:	00023f16 	andeq	r3, r2, r6, lsl pc
     d8c:	02330100 	eorseq	r0, r3, #0, 2
     d90:	00015a21 	andeq	r5, r1, r1, lsr #20
     d94:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     d98:	08e31500 	stmiaeq	r3!, {r8, sl, ip}^
     d9c:	1b010000 	blne	40da4 <startup-0x1ffbf25c>
     da0:	01c80602 	biceq	r0, r8, r2, lsl #12
     da4:	003c2000 	eorseq	r2, ip, r0
     da8:	9c010000 	stcls	0, cr0, [r1], {-0}
     dac:	00000e01 	andeq	r0, r0, r1, lsl #28
     db0:	00027a16 	andeq	r7, r2, r6, lsl sl
     db4:	021b0100 	andseq	r0, fp, #0, 2
     db8:	0000ce1d 	andeq	ip, r0, sp, lsl lr
     dbc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     dc0:	0000f916 	andeq	pc, r0, r6, lsl r9	; <UNPREDICTABLE>
     dc4:	021b0100 	andseq	r0, fp, #0, 2
     dc8:	0000ce35 	andeq	ip, r0, r5, lsr lr
     dcc:	70910200 	addsvc	r0, r1, r0, lsl #4
     dd0:	00009c16 	andeq	r9, r0, r6, lsl ip
     dd4:	021b0100 	andseq	r0, fp, #0, 2
     dd8:	0000ce44 	andeq	ip, r0, r4, asr #28
     ddc:	6c910200 	lfmvs	f0, 4, [r1], {0}
     de0:	0000bb16 	andeq	fp, r0, r6, lsl fp
     de4:	021b0100 	andseq	r0, fp, #0, 2
     de8:	0000ce53 	andeq	ip, r0, r3, asr lr
     dec:	68910200 	ldmvs	r1, {r9}
     df0:	0000c016 	andeq	ip, r0, r6, lsl r0
     df4:	021b0100 	andseq	r0, fp, #0, 2
     df8:	0000ce62 	andeq	ip, r0, r2, ror #28
     dfc:	00910200 	addseq	r0, r1, r0, lsl #4
     e00:	089e1500 	ldmeq	lr, {r8, sl, ip}
     e04:	b8010000 	stmdalt	r1, {}	; <UNPREDICTABLE>
     e08:	01a80601 			; <UNDEFINED> instruction: 0x01a80601
     e0c:	00202000 	eoreq	r2, r0, r0
     e10:	9c010000 	stcls	0, cr0, [r1], {-0}
     e14:	00000e29 	andeq	r0, r0, r9, lsr #28
     e18:	00023f16 	andeq	r3, r2, r6, lsl pc
     e1c:	01b80100 			; <UNDEFINED> instruction: 0x01b80100
     e20:	00015a21 	andeq	r5, r1, r1, lsr #20
     e24:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     e28:	02281500 	eoreq	r1, r8, #0, 10
     e2c:	90010000 	andls	r0, r1, r0
     e30:	01640601 	cmneq	r4, r1, lsl #12
     e34:	00442000 	subeq	r2, r4, r0
     e38:	9c010000 	stcls	0, cr0, [r1], {-0}
     e3c:	00000e51 	andeq	r0, r0, r1, asr lr
     e40:	00000916 	andeq	r0, r0, r6, lsl r9
     e44:	01900100 	orrseq	r0, r0, r0, lsl #2
     e48:	00009b1c 	andeq	r9, r0, ip, lsl fp
     e4c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     e50:	044f1500 	strbeq	r1, [pc], #-1280	; e58 <startup-0x1ffff1a8>
     e54:	77010000 	strvc	r0, [r1, -r0]
     e58:	01440601 	cmpeq	r4, r1, lsl #12
     e5c:	00202000 	eoreq	r2, r0, r0
     e60:	9c010000 	stcls	0, cr0, [r1], {-0}
     e64:	00000e79 	andeq	r0, r0, r9, ror lr
     e68:	00023f16 	andeq	r3, r2, r6, lsl pc
     e6c:	01770100 	cmneq	r7, r0, lsl #2
     e70:	00015a21 	andeq	r5, r1, r1, lsr #20
     e74:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     e78:	06f31500 	ldrbteq	r1, [r3], r0, lsl #10
     e7c:	53010000 	movwpl	r0, #4096	; 0x1000
     e80:	01060601 	tsteq	r6, r1, lsl #12
     e84:	003e2000 	eorseq	r2, lr, r0
     e88:	9c010000 	stcls	0, cr0, [r1], {-0}
     e8c:	00000eb1 			; <UNDEFINED> instruction: 0x00000eb1
     e90:	0006fd16 	andeq	pc, r6, r6, lsl sp	; <UNPREDICTABLE>
     e94:	01530100 	cmpeq	r3, r0, lsl #2
     e98:	00009b2c 	andeq	r9, r0, ip, lsr #22
     e9c:	6f910200 	svcvs	0x00910200
     ea0:	00016718 	andeq	r6, r1, r8, lsl r7
     ea4:	01550100 	cmpeq	r5, r0, lsl #2
     ea8:	0000ce0c 	andeq	ip, r0, ip, lsl #28
     eac:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     eb0:	03181e00 	tsteq	r8, #0, 28
     eb4:	34010000 	strcc	r0, [r1], #-0
     eb8:	01830d01 	orreq	r0, r3, r1, lsl #26
     ebc:	00a80000 	adceq	r0, r8, r0
     ec0:	005e2000 	subseq	r2, lr, r0
     ec4:	9c010000 	stcls	0, cr0, [r1], {-0}
     ec8:	00000efd 	strdeq	r0, [r0], -sp
     ecc:	0007c818 	andeq	ip, r7, r8, lsl r8
     ed0:	01360100 	teqeq	r6, r0, lsl #2
     ed4:	0000da11 	andeq	sp, r0, r1, lsl sl
     ed8:	68910200 	ldmvs	r1, {r9}
     edc:	00071418 	andeq	r1, r7, r8, lsl r4
     ee0:	01370100 	teqeq	r7, r0, lsl #2
     ee4:	0001830f 	andeq	r8, r1, pc, lsl #6
     ee8:	6f910200 	svcvs	0x00910200
     eec:	00071118 	andeq	r1, r7, r8, lsl r1
     ef0:	01380100 	teqeq	r8, r0, lsl #2
     ef4:	0001240e 	andeq	r2, r1, lr, lsl #8
     ef8:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
     efc:	05d11500 	ldrbeq	r1, [r1, #1280]	; 0x500
     f00:	1c010000 	stcne	0, cr0, [r1], {-0}
     f04:	00800601 	addeq	r0, r0, r1, lsl #12
     f08:	00282000 	eoreq	r2, r8, r0
     f0c:	9c010000 	stcls	0, cr0, [r1], {-0}
     f10:	00000f25 	andeq	r0, r0, r5, lsr #30
     f14:	0006ca16 	andeq	ip, r6, r6, lsl sl
     f18:	011c0100 	tsteq	ip, r0, lsl #2
     f1c:	00009b1c 	andeq	r9, r0, ip, lsl fp
     f20:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     f24:	07601f00 	strbeq	r1, [r0, -r0, lsl #30]!
     f28:	e1010000 	mrs	r0, (UNDEF: 1)
     f2c:	00001006 	andeq	r1, r0, r6
     f30:	00007020 	andeq	r7, r0, r0, lsr #32
     f34:	009c0100 	addseq	r0, ip, r0, lsl #2
     f38:	00000637 	andeq	r0, r0, r7, lsr r6
     f3c:	02150004 	andseq	r0, r5, #4
     f40:	01040000 	mrseq	r0, (UNDEF: 4)
     f44:	0000029c 	muleq	r0, ip, r2
     f48:	000be50c 	andeq	lr, fp, ip, lsl #10
     f4c:	00090b00 	andeq	r0, r9, r0, lsl #22
	...
     f58:	0007d900 	andeq	sp, r7, r0, lsl #18
     f5c:	06010200 	streq	r0, [r1], -r0, lsl #4
     f60:	000007bc 			; <UNDEFINED> instruction: 0x000007bc
     f64:	00006c03 	andeq	r6, r0, r3, lsl #24
     f68:	182b0200 	stmdane	fp!, {r9}
     f6c:	00000038 	andeq	r0, r0, r8, lsr r0
     f70:	ba080102 	blt	201380 <startup-0x1fdfec80>
     f74:	02000007 	andeq	r0, r0, #7
     f78:	061b0502 	ldreq	r0, [fp], -r2, lsl #10
     f7c:	4c030000 	stcmi	0, cr0, [r3], {-0}
     f80:	02000007 	andeq	r0, r0, #7
     f84:	00521939 	subseq	r1, r2, r9, lsr r9
     f88:	02020000 	andeq	r0, r2, #0
     f8c:	00040307 	andeq	r0, r4, r7, lsl #6
     f90:	07730300 	ldrbeq	r0, [r3, -r0, lsl #6]!
     f94:	4d020000 	stcmi	0, cr0, [r2, #-0]
     f98:	00006518 	andeq	r6, r0, r8, lsl r5
     f9c:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
     fa0:	0000020e 	andeq	r0, r0, lr, lsl #4
     fa4:	00026303 	andeq	r6, r2, r3, lsl #6
     fa8:	194f0200 	stmdbne	pc, {r9}^	; <UNPREDICTABLE>
     fac:	00000078 	andeq	r0, r0, r8, ror r0
     fb0:	e0070402 	and	r0, r7, r2, lsl #8
     fb4:	02000000 	andeq	r0, r0, #0
     fb8:	02090508 	andeq	r0, r9, #8, 10	; 0x2000000
     fbc:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
     fc0:	0000db07 	andeq	sp, r0, r7, lsl #22
     fc4:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
     fc8:	00746e69 	rsbseq	r6, r4, r9, ror #28
     fcc:	e5070402 	str	r0, [r7, #-1026]	; 0xfffffbfe
     fd0:	03000000 	movweq	r0, #0
     fd4:	0000006e 	andeq	r0, r0, lr, rrx
     fd8:	2c131803 	ldccs	8, cr1, [r3], {3}
     fdc:	03000000 	movweq	r0, #0
     fe0:	0000074e 	andeq	r0, r0, lr, asr #14
     fe4:	46142403 	ldrmi	r2, [r4], -r3, lsl #8
     fe8:	05000000 	streq	r0, [r0, #-0]
     fec:	000000a7 	andeq	r0, r0, r7, lsr #1
     ff0:	00077503 	andeq	r7, r7, r3, lsl #10
     ff4:	132c0300 			; <UNDEFINED> instruction: 0x132c0300
     ff8:	00000059 	andeq	r0, r0, r9, asr r0
     ffc:	0000b805 	andeq	fp, r0, r5, lsl #16
    1000:	02650300 	rsbeq	r0, r5, #0, 6
    1004:	30030000 	andcc	r0, r3, r0
    1008:	00006c14 	andeq	r6, r0, r4, lsl ip
    100c:	00c90500 	sbceq	r0, r9, r0, lsl #10
    1010:	fe060000 	cdp2	0, 0, cr0, cr6, cr0, {0}
    1014:	04000005 	streq	r0, [r0], #-5
    1018:	c41906fa 	ldrgt	r0, [r9], #-1786	; 0xfffff906
    101c:	07000000 	streq	r0, [r0, -r0]
    1020:	00000365 	andeq	r0, r0, r5, ror #6
    1024:	c9113b05 	ldmdbgt	r1, {r0, r2, r8, r9, fp, ip, sp}
    1028:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    102c:	00380107 	eorseq	r0, r8, r7, lsl #2
    1030:	5f060000 	svcpl	0x00060000
    1034:	010f0e03 	tsteq	pc, r3, lsl #28
    1038:	5d090000 	stcpl	0, cr0, [r9, #-0]
    103c:	00000003 	andeq	r0, r0, r3
    1040:	00019509 	andeq	r9, r1, r9, lsl #10
    1044:	0a000100 	beq	144c <startup-0x1fffebb4>
    1048:	05c30628 	strbeq	r0, [r3, #1576]	; 0x628
    104c:	0001a609 	andeq	sl, r1, r9, lsl #12
    1050:	0ac90b00 	beq	ff243c58 <APBAHBPrescTable+0xdf2403e8>
    1054:	c5060000 	strgt	r0, [r6, #-0]
    1058:	00d51105 	sbcseq	r1, r5, r5, lsl #2
    105c:	0b000000 	bleq	1064 <startup-0x1fffef9c>
    1060:	00000a65 	andeq	r0, r0, r5, ror #20
    1064:	1105c606 	tstne	r5, r6, lsl #12
    1068:	000000d5 	ldrdeq	r0, [r0], -r5
    106c:	09b00b04 	ldmibeq	r0!, {r2, r8, r9, fp}
    1070:	c7060000 	strgt	r0, [r6, -r0]
    1074:	00d51105 	sbcseq	r1, r5, r5, lsl #2
    1078:	0b080000 	bleq	201080 <startup-0x1fdfef80>
    107c:	00000b74 	andeq	r0, r0, r4, ror fp
    1080:	1105c806 	tstne	r5, r6, lsl #16
    1084:	000000d5 	ldrdeq	r0, [r0], -r5
    1088:	44490c0c 	strbmi	r0, [r9], #-3084	; 0xfffff3f4
    108c:	c9060052 	stmdbgt	r6, {r1, r4, r6}
    1090:	00d51105 	sbcseq	r1, r5, r5, lsl #2
    1094:	0c100000 	ldceq	0, cr0, [r0], {-0}
    1098:	0052444f 	subseq	r4, r2, pc, asr #8
    109c:	1105ca06 	tstne	r5, r6, lsl #20
    10a0:	000000d5 	ldrdeq	r0, [r0], -r5
    10a4:	0c9c0b14 	vldmiaeq	ip, {d0-d9}
    10a8:	cb060000 	blgt	1810b0 <startup-0x1fe7ef50>
    10ac:	00b31105 	adcseq	r1, r3, r5, lsl #2
    10b0:	0b180000 	bleq	6010b8 <startup-0x1f9fef48>
    10b4:	00000ac3 	andeq	r0, r0, r3, asr #21
    10b8:	1105cc06 	tstne	r5, r6, lsl #24
    10bc:	000000b3 	strheq	r0, [r0], -r3
    10c0:	0ca20b1a 	vstmiaeq	r2!, {d0-d12}
    10c4:	cd060000 	stcgt	0, cr0, [r6, #-0]
    10c8:	00d51105 	sbcseq	r1, r5, r5, lsl #2
    10cc:	0c1c0000 	ldceq	0, cr0, [ip], {-0}
    10d0:	00524641 	subseq	r4, r2, r1, asr #12
    10d4:	1105ce06 	tstne	r5, r6, lsl #28
    10d8:	000001b6 			; <UNDEFINED> instruction: 0x000001b6
    10dc:	d50d0020 	strle	r0, [sp, #-32]	; 0xffffffe0
    10e0:	b6000000 	strlt	r0, [r0], -r0
    10e4:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    10e8:	00000094 	muleq	r0, r4, r0
    10ec:	a6050001 	strge	r0, [r5], -r1
    10f0:	0f000001 	svceq	0x00000001
    10f4:	0000098d 	andeq	r0, r0, sp, lsl #19
    10f8:	0305cf06 	movweq	ip, #24326	; 0x5f06
    10fc:	0000010f 	andeq	r0, r0, pc, lsl #2
    1100:	4706540a 	strmi	r5, [r6, -sl, lsl #8]
    1104:	03c90907 	biceq	r0, r9, #114688	; 0x1c000
    1108:	430c0000 	movwmi	r0, #49152	; 0xc000
    110c:	06003152 			; <UNDEFINED> instruction: 0x06003152
    1110:	b3110749 	tstlt	r1, #19136512	; 0x1240000
    1114:	00000000 	andeq	r0, r0, r0
    1118:	0005790b 	andeq	r7, r5, fp, lsl #18
    111c:	074a0600 	strbeq	r0, [sl, -r0, lsl #12]
    1120:	0000a711 	andeq	sl, r0, r1, lsl r7
    1124:	430c0200 	movwmi	r0, #49664	; 0xc200
    1128:	06003252 			; <UNDEFINED> instruction: 0x06003252
    112c:	b311074b 	tstlt	r1, #19660800	; 0x12c0000
    1130:	04000000 	streq	r0, [r0], #-0
    1134:	0005830b 	andeq	r8, r5, fp, lsl #6
    1138:	074c0600 	strbeq	r0, [ip, -r0, lsl #12]
    113c:	0000a711 	andeq	sl, r0, r1, lsl r7
    1140:	fe0b0600 	cdp2	6, 0, cr0, cr11, cr0, {0}
    1144:	0600000a 	streq	r0, [r0], -sl
    1148:	b311074d 	tstlt	r1, #20185088	; 0x1340000
    114c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1150:	00058d0b 	andeq	r8, r5, fp, lsl #26
    1154:	074e0600 	strbeq	r0, [lr, -r0, lsl #12]
    1158:	0000a711 	andeq	sl, r0, r1, lsl r7
    115c:	6f0b0a00 	svcvs	0x000b0a00
    1160:	0600000b 	streq	r0, [r0], -fp
    1164:	b311074f 	tstlt	r1, #20709376	; 0x13c0000
    1168:	0c000000 	stceq	0, cr0, [r0], {-0}
    116c:	0005970b 	andeq	r9, r5, fp, lsl #14
    1170:	07500600 	ldrbeq	r0, [r0, -r0, lsl #12]
    1174:	0000a711 	andeq	sl, r0, r1, lsl r7
    1178:	530c0e00 	movwpl	r0, #52736	; 0xce00
    117c:	51060052 	qaddpl	r0, r2, r6
    1180:	00b31107 	adcseq	r1, r3, r7, lsl #2
    1184:	0b100000 	bleq	40118c <startup-0x1fbfee74>
    1188:	000005a1 	andeq	r0, r0, r1, lsr #11
    118c:	11075206 	tstne	r7, r6, lsl #4
    1190:	000000a7 	andeq	r0, r0, r7, lsr #1
    1194:	47450c12 	smlaldmi	r0, r5, r2, ip
    1198:	53060052 	movwpl	r0, #24658	; 0x6052
    119c:	00b31107 	adcseq	r1, r3, r7, lsl #2
    11a0:	0b140000 	bleq	5011a8 <startup-0x1fafee58>
    11a4:	000005ab 	andeq	r0, r0, fp, lsr #11
    11a8:	11075406 	tstne	r7, r6, lsl #8
    11ac:	000000a7 	andeq	r0, r0, r7, lsr #1
    11b0:	09ce0b16 	stmibeq	lr, {r1, r2, r4, r8, r9, fp}^
    11b4:	55060000 	strpl	r0, [r6, #-0]
    11b8:	00b31107 	adcseq	r1, r3, r7, lsl #2
    11bc:	0b180000 	bleq	6011c4 <startup-0x1f9fee3c>
    11c0:	000005b5 			; <UNDEFINED> instruction: 0x000005b5
    11c4:	11075606 	tstne	r7, r6, lsl #12
    11c8:	000000a7 	andeq	r0, r0, r7, lsr #1
    11cc:	09d40b1a 	ldmibeq	r4, {r1, r3, r4, r8, r9, fp}^
    11d0:	57060000 	strpl	r0, [r6, -r0]
    11d4:	00b31107 	adcseq	r1, r3, r7, lsl #2
    11d8:	0b1c0000 	bleq	7011e0 <startup-0x1f8fee20>
    11dc:	00000ba6 	andeq	r0, r0, r6, lsr #23
    11e0:	11075806 	tstne	r7, r6, lsl #16
    11e4:	000000a7 	andeq	r0, r0, r7, lsr #1
    11e8:	09ab0b1e 	stmibeq	fp!, {r1, r2, r3, r4, r8, r9, fp}
    11ec:	59060000 	stmdbpl	r6, {}	; <UNPREDICTABLE>
    11f0:	00b31107 	adcseq	r1, r3, r7, lsl #2
    11f4:	0b200000 	bleq	8011fc <startup-0x1f7fee04>
    11f8:	00000bb0 			; <UNDEFINED> instruction: 0x00000bb0
    11fc:	11075a06 	tstne	r7, r6, lsl #20
    1200:	000000a7 	andeq	r0, r0, r7, lsr #1
    1204:	4e430c22 	cdpmi	12, 4, cr0, cr3, cr2, {1}
    1208:	5b060054 	blpl	181360 <startup-0x1fe7eca0>
    120c:	00d51107 	sbcseq	r1, r5, r7, lsl #2
    1210:	0c240000 	stceq	0, cr0, [r4], #-0
    1214:	00435350 	subeq	r5, r3, r0, asr r3
    1218:	11075c06 	tstne	r7, r6, lsl #24
    121c:	000000b3 	strheq	r0, [r0], -r3
    1220:	0bba0b28 	bleq	fee83ec8 <APBAHBPrescTable+0xdee80658>
    1224:	5d060000 	stcpl	0, cr0, [r6, #-0]
    1228:	00a71107 	adceq	r1, r7, r7, lsl #2
    122c:	0c2a0000 	stceq	0, cr0, [sl], #-0
    1230:	00525241 	subseq	r5, r2, r1, asr #4
    1234:	11075e06 	tstne	r7, r6, lsl #28
    1238:	000000d5 	ldrdeq	r0, [r0], -r5
    123c:	43520c2c 	cmpmi	r2, #44, 24	; 0x2c00
    1240:	5f060052 	svcpl	0x00060052
    1244:	00b31107 	adcseq	r1, r3, r7, lsl #2
    1248:	0b300000 	bleq	c01250 <startup-0x1f3fedb0>
    124c:	00000b03 	andeq	r0, r0, r3, lsl #22
    1250:	11076006 	tstne	r7, r6
    1254:	000000a7 	andeq	r0, r0, r7, lsr #1
    1258:	0aaf0b32 	beq	febc3f28 <APBAHBPrescTable+0xdebc06b8>
    125c:	61060000 	mrsvs	r0, (UNDEF: 6)
    1260:	00d51107 	sbcseq	r1, r5, r7, lsl #2
    1264:	0b340000 	bleq	d0126c <startup-0x1f2fed94>
    1268:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
    126c:	11076206 	tstne	r7, r6, lsl #4
    1270:	000000d5 	ldrdeq	r0, [r0], -r5
    1274:	0ab90b38 	beq	fee43f5c <APBAHBPrescTable+0xdee406ec>
    1278:	63060000 	movwvs	r0, #24576	; 0x6000
    127c:	00d51107 	sbcseq	r1, r5, r7, lsl #2
    1280:	0b3c0000 	bleq	f01288 <startup-0x1f0fed78>
    1284:	00000abe 			; <UNDEFINED> instruction: 0x00000abe
    1288:	11076406 	tstne	r7, r6, lsl #8
    128c:	000000d5 	ldrdeq	r0, [r0], -r5
    1290:	0b6a0b40 	bleq	1a83f98 <startup-0x1e57c068>
    1294:	65060000 	strvs	r0, [r6, #-0]
    1298:	00b31107 	adcseq	r1, r3, r7, lsl #2
    129c:	0b440000 	bleq	11012a4 <startup-0x1eefed5c>
    12a0:	00000a6c 	andeq	r0, r0, ip, ror #20
    12a4:	11076606 	tstne	r7, r6, lsl #12
    12a8:	000000a7 	andeq	r0, r0, r7, lsr #1
    12ac:	43440c46 	movtmi	r0, #19526	; 0x4c46
    12b0:	67060052 	smlsdvs	r6, r2, r0, r0
    12b4:	00b31107 	adcseq	r1, r3, r7, lsl #2
    12b8:	0b480000 	bleq	12012c0 <startup-0x1edfed40>
    12bc:	00000b0e 	andeq	r0, r0, lr, lsl #22
    12c0:	11076806 	tstne	r7, r6, lsl #16
    12c4:	000000a7 	andeq	r0, r0, r7, lsr #1
    12c8:	09c90b4a 	stmibeq	r9, {r1, r3, r6, r8, r9, fp}^
    12cc:	69060000 	stmdbvs	r6, {}	; <UNPREDICTABLE>
    12d0:	00b31107 	adcseq	r1, r3, r7, lsl #2
    12d4:	0b4c0000 	bleq	13012dc <startup-0x1ecfed24>
    12d8:	00000b19 	andeq	r0, r0, r9, lsl fp
    12dc:	11076a06 	tstne	r7, r6, lsl #20
    12e0:	000000a7 	andeq	r0, r0, r7, lsr #1
    12e4:	524f0c4e 	subpl	r0, pc, #19968	; 0x4e00
    12e8:	076b0600 	strbeq	r0, [fp, -r0, lsl #12]!
    12ec:	0000b311 	andeq	fp, r0, r1, lsl r3
    12f0:	5a0b5000 	bpl	2d52f8 <startup-0x1fd2ad08>
    12f4:	0600000a 	streq	r0, [r0], -sl
    12f8:	a711076c 	ldrge	r0, [r1, -ip, ror #14]
    12fc:	52000000 	andpl	r0, r0, #0
    1300:	0aed0f00 	beq	ffb44f08 <APBAHBPrescTable+0xdfb41698>
    1304:	6d060000 	stcvs	0, cr0, [r6, #-0]
    1308:	01c80307 	biceq	r0, r8, r7, lsl #6
    130c:	07100000 	ldreq	r0, [r0, -r0]
    1310:	00003801 	andeq	r3, r0, r1, lsl #16
    1314:	01420700 	cmpeq	r2, r0, lsl #14
    1318:	000003fd 	strdeq	r0, [r0], -sp
    131c:	000c8f09 	andeq	r8, ip, r9, lsl #30
    1320:	99090000 	stmdbls	r9, {}	; <UNPREDICTABLE>
    1324:	0100000a 	tsteq	r0, sl
    1328:	000a1809 	andeq	r1, sl, r9, lsl #16
    132c:	4d090200 	sfmmi	f0, 4, [r9, #-0]
    1330:	0300000a 	movweq	r0, #10
    1334:	09b80300 	ldmibeq	r8!, {r8, r9}
    1338:	47070000 	strmi	r0, [r7, -r0]
    133c:	0003d602 	andeq	sp, r3, r2, lsl #12
    1340:	01071000 	mrseq	r1, (UNDEF: 7)
    1344:	00000038 	andeq	r0, r0, r8, lsr r0
    1348:	24014f07 	strcs	r4, [r1], #-3847	; 0xfffff0f9
    134c:	09000004 	stmdbeq	r0, {r2}
    1350:	00000adf 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    1354:	09e80900 	stmibeq	r8!, {r8, fp}^
    1358:	00010000 	andeq	r0, r1, r0
    135c:	0009fb03 	andeq	pc, r9, r3, lsl #22
    1360:	02520700 	subseq	r0, r2, #0, 14
    1364:	00000409 	andeq	r0, r0, r9, lsl #8
    1368:	38010710 	stmdacc	r1, {r4, r8, r9, sl}
    136c:	07000000 	streq	r0, [r0, -r0]
    1370:	0457015a 	ldrbeq	r0, [r7], #-346	; 0xfffffea6
    1374:	97090000 	strls	r0, [r9, -r0]
    1378:	0000000b 	andeq	r0, r0, fp
    137c:	000b2409 	andeq	r2, fp, r9, lsl #8
    1380:	80090100 	andhi	r0, r9, r0, lsl #2
    1384:	0200000a 	andeq	r0, r0, #10
    1388:	000acf09 	andeq	ip, sl, r9, lsl #30
    138c:	03000300 	movweq	r0, #768	; 0x300
    1390:	00000bc4 	andeq	r0, r0, r4, asr #23
    1394:	30025f07 	andcc	r5, r2, r7, lsl #30
    1398:	10000004 	andne	r0, r0, r4
    139c:	00380107 	eorseq	r0, r8, r7, lsl #2
    13a0:	6e070000 	cdpvs	0, 0, cr0, cr7, cr0, {0}
    13a4:	00048401 	andeq	r8, r4, r1, lsl #8
    13a8:	0c380900 			; <UNDEFINED> instruction: 0x0c380900
    13ac:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    13b0:	00000c72 	andeq	r0, r0, r2, ror ip
    13b4:	0bd60901 	bleq	ff5837c0 <APBAHBPrescTable+0xdf57ff50>
    13b8:	00020000 	andeq	r0, r2, r0
    13bc:	000c6103 	andeq	r6, ip, r3, lsl #2
    13c0:	02720700 	rsbseq	r0, r2, #0, 14
    13c4:	00000463 	andeq	r0, r0, r3, ror #8
    13c8:	84070811 	strhi	r0, [r7], #-2065	; 0xfffff7ef
    13cc:	0004db09 	andeq	sp, r4, r9, lsl #22
    13d0:	0a771200 	beq	1dc5bd8 <startup-0x1e23a428>
    13d4:	86070000 	strhi	r0, [r7], -r0
    13d8:	0000c90c 	andeq	ip, r0, ip, lsl #18
    13dc:	ac120000 	ldcge	0, cr0, [r2], {-0}
    13e0:	0700000c 	streq	r0, [r0, -ip]
    13e4:	03fd1489 	mvnseq	r1, #-1996488704	; 0x89000000
    13e8:	12040000 	andne	r0, r4, #0
    13ec:	00000a37 	andeq	r0, r0, r7, lsr sl
    13f0:	57158c07 	ldrpl	r8, [r5, -r7, lsl #24]
    13f4:	05000004 	streq	r0, [r0, #-4]
    13f8:	000a0d12 	andeq	r0, sl, r2, lsl sp
    13fc:	158f0700 	strne	r0, [pc, #1792]	; 1b04 <startup-0x1fffe4fc>
    1400:	00000424 	andeq	r0, r0, r4, lsr #8
    1404:	0c571206 	lfmeq	f1, 2, [r7], {6}
    1408:	92070000 	andls	r0, r7, #0
    140c:	00048414 	andeq	r8, r4, r4, lsl r4
    1410:	03000700 	movweq	r0, #1792	; 0x700
    1414:	00000b36 	andeq	r0, r0, r6, lsr fp
    1418:	90029407 	andls	r9, r2, r7, lsl #8
    141c:	11000004 	tstne	r0, r4
    1420:	0937080c 	ldmdbeq	r7!, {r2, r3, fp}
    1424:	00000532 	andeq	r0, r0, r2, lsr r5
    1428:	0009da12 	andeq	sp, r9, r2, lsl sl
    142c:	0c390800 	ldceq	8, cr0, [r9], #-0
    1430:	000000a7 	andeq	r0, r0, r7, lsr #1
    1434:	0c7f1200 	lfmeq	f1, 2, [pc], #-0	; 143c <startup-0x1fffebc4>
    1438:	3c080000 	stccc	0, cr0, [r8], {-0}
    143c:	0000a70c 	andeq	sl, r0, ip, lsl #14
    1440:	47120200 	ldrmi	r0, [r2, -r0, lsl #4]
    1444:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    1448:	00c90c3f 	sbceq	r0, r9, pc, lsr ip
    144c:	12040000 	andne	r0, r4, #0
    1450:	00000a25 	andeq	r0, r0, r5, lsr #20
    1454:	a70c4308 	strge	r4, [ip, -r8, lsl #6]
    1458:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    145c:	000c2212 	andeq	r2, ip, r2, lsl r2
    1460:	0b460800 	bleq	1183468 <startup-0x1ee7cb98>
    1464:	0000009b 	muleq	r0, fp, r0
    1468:	5203000a 	andpl	r0, r3, #10
    146c:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    1470:	04e7034e 	strbteq	r0, [r7], #846	; 0x34e
    1474:	f6130000 			; <UNDEFINED> instruction: 0xf6130000
    1478:	01000009 	tsteq	r0, r9
    147c:	0dc2063c 	stcleq	6, cr0, [r2, #240]	; 0xf0
    1480:	01362000 	teqeq	r6, r0
    1484:	9c010000 	stcls	0, cr0, [r1], {-0}
    1488:	000005b6 			; <UNDEFINED> instruction: 0x000005b6
    148c:	000a4214 	andeq	r4, sl, r4, lsl r2
    1490:	0f3f0100 	svceq	0x003f0100
    1494:	00000094 	muleq	r0, r4, r0
    1498:	14749102 	ldrbtne	r9, [r4], #-258	; 0xfffffefe
    149c:	00000c4e 	andeq	r0, r0, lr, asr #24
    14a0:	941b3f01 	ldrls	r3, [fp], #-3841	; 0xfffff0ff
    14a4:	02000000 	andeq	r0, r0, #0
    14a8:	83147091 	tsthi	r4, #145	; 0x91
    14ac:	0100000b 	tsteq	r0, fp
    14b0:	0094253f 	addseq	r2, r4, pc, lsr r5
    14b4:	91020000 	mrsls	r0, (UNDEF: 2)
    14b8:	0b7a146c 	bleq	1e86670 <startup-0x1e179990>
    14bc:	3f010000 	svccc	0x00010000
    14c0:	00009430 	andeq	r9, r0, r0, lsr r4
    14c4:	68910200 	ldmvs	r1, {r9}
    14c8:	01006115 	tsteq	r0, r5, lsl r1
    14cc:	05b60740 	ldreq	r0, [r6, #1856]!	; 0x740
    14d0:	91020000 	mrsls	r0, (UNDEF: 2)
    14d4:	0eb61648 	cdpeq	6, 11, cr1, cr6, cr8, {2}
    14d8:	00142000 	andseq	r2, r4, r0
    14dc:	f9170000 			; <UNDEFINED> instruction: 0xf9170000
    14e0:	0100000a 	tsteq	r0, sl
    14e4:	008d0866 	addeq	r0, sp, r6, ror #16
    14e8:	00180000 	andseq	r0, r8, r0
    14ec:	c60d0000 	strgt	r0, [sp], -r0
    14f0:	c6000005 	strgt	r0, [r0], -r5
    14f4:	0e000005 	cdpeq	0, 0, cr0, cr0, cr5, {0}
    14f8:	00000094 	muleq	r0, r4, r0
    14fc:	0102001d 	tsteq	r2, sp, lsl r0
    1500:	0007c308 	andeq	ip, r7, r8, lsl #6
    1504:	099a1300 	ldmibeq	sl, {r8, r9, ip}
    1508:	2d010000 	stccs	0, cr0, [r1, #-0]
    150c:	000d7807 	andeq	r7, sp, r7, lsl #16
    1510:	00004a20 	andeq	r4, r0, r0, lsr #20
    1514:	f39c0100 	vaddw.u16	q0, q6, d0
    1518:	14000005 	strne	r0, [r0], #-5
    151c:	00000b8d 	andeq	r0, r0, sp, lsl #23
    1520:	321a3001 	andscc	r3, sl, #1
    1524:	02000005 	andeq	r0, r0, #5
    1528:	13006c91 	movwne	r6, #3217	; 0xc91
    152c:	00000a90 	muleq	r0, r0, sl
    1530:	0c061601 	stceq	6, cr1, [r6], {1}
    1534:	6c20000d 	stcvs	0, cr0, [r0], #-52	; 0xffffffcc
    1538:	01000000 	mrseq	r0, (UNDEF: 0)
    153c:	0006289c 	muleq	r6, ip, r8
    1540:	0ca71400 	cfstrseq	mvf1, [r7]
    1544:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
    1548:	0004db14 	andeq	sp, r4, r4, lsl fp
    154c:	68910200 	ldmvs	r1, {r9}
    1550:	000c4914 	andeq	r4, ip, r4, lsl r9
    1554:	14190100 	ldrne	r0, [r9], #-256	; 0xffffff00
    1558:	000004db 	ldrdeq	r0, [r0], -fp
    155c:	00609102 	rsbeq	r9, r0, r2, lsl #2
    1560:	000aa719 	andeq	sl, sl, r9, lsl r7
    1564:	060e0100 	streq	r0, [lr], -r0, lsl #2
    1568:	20000000 	andcs	r0, r0, r0
    156c:	0000000c 	andeq	r0, r0, ip
    1570:	7b009c01 	blvc	2857c <startup-0x1ffd7a84>
    1574:	04000006 	streq	r0, [r0], #-6
    1578:	00039500 	andeq	r9, r3, r0, lsl #10
    157c:	9c010400 	cfstrsls	mvf0, [r1], {-0}
    1580:	0c000002 	stceq	0, cr0, [r0], {2}
    1584:	00000cd9 	ldrdeq	r0, [r0], -r9
    1588:	0000090b 	andeq	r0, r0, fp, lsl #18
    158c:	20000ef8 	strdcs	r0, [r0], -r8
    1590:	0000050a 	andeq	r0, r0, sl, lsl #10
    1594:	00000a9a 	muleq	r0, sl, sl
    1598:	bc060102 	stflts	f0, [r6], {2}
    159c:	03000007 	movweq	r0, #7
    15a0:	0000006c 	andeq	r0, r0, ip, rrx
    15a4:	38182b02 	ldmdacc	r8, {r1, r8, r9, fp, sp}
    15a8:	02000000 	andeq	r0, r0, #0
    15ac:	07ba0801 	ldreq	r0, [sl, r1, lsl #16]!
    15b0:	02020000 	andeq	r0, r2, #0
    15b4:	00061b05 	andeq	r1, r6, r5, lsl #22
    15b8:	074c0300 	strbeq	r0, [ip, -r0, lsl #6]
    15bc:	39020000 	stmdbcc	r2, {}	; <UNPREDICTABLE>
    15c0:	00005219 	andeq	r5, r0, r9, lsl r2
    15c4:	07020200 	streq	r0, [r2, -r0, lsl #4]
    15c8:	00000403 	andeq	r0, r0, r3, lsl #8
    15cc:	00077303 	andeq	r7, r7, r3, lsl #6
    15d0:	184d0200 	stmdane	sp, {r9}^
    15d4:	00000065 	andeq	r0, r0, r5, rrx
    15d8:	0e050402 	cdpeq	4, 0, cr0, cr5, cr2, {0}
    15dc:	03000002 	movweq	r0, #2
    15e0:	00000263 	andeq	r0, r0, r3, ror #4
    15e4:	78194f02 	ldmdavc	r9, {r1, r8, r9, sl, fp, lr}
    15e8:	02000000 	andeq	r0, r0, #0
    15ec:	00e00704 	rsceq	r0, r0, r4, lsl #14
    15f0:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    15f4:	00020905 	andeq	r0, r2, r5, lsl #18
    15f8:	07080200 	streq	r0, [r8, -r0, lsl #4]
    15fc:	000000db 	ldrdeq	r0, [r0], -fp
    1600:	69050404 	stmdbvs	r5, {r2, sl}
    1604:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    1608:	00e50704 	rsceq	r0, r5, r4, lsl #14
    160c:	6e030000 	cdpvs	0, 0, cr0, cr3, cr0, {0}
    1610:	03000000 	movweq	r0, #0
    1614:	002c1318 	eoreq	r1, ip, r8, lsl r3
    1618:	4e030000 	cdpmi	0, 0, cr0, cr3, cr0, {0}
    161c:	03000007 	movweq	r0, #7
    1620:	00461424 	subeq	r1, r6, r4, lsr #8
    1624:	a7050000 	strge	r0, [r5, -r0]
    1628:	03000000 	movweq	r0, #0
    162c:	00000775 	andeq	r0, r0, r5, ror r7
    1630:	59132c03 	ldmdbpl	r3, {r0, r1, sl, fp, sp}
    1634:	05000000 	streq	r0, [r0, #-0]
    1638:	000000b8 	strheq	r0, [r0], -r8
    163c:	00026503 	andeq	r6, r2, r3, lsl #10
    1640:	14300300 	ldrtne	r0, [r0], #-768	; 0xfffffd00
    1644:	0000006c 	andeq	r0, r0, ip, rrx
    1648:	0000c905 	andeq	ip, r0, r5, lsl #18
    164c:	05fe0600 	ldrbeq	r0, [lr, #1536]!	; 0x600
    1650:	fa040000 	blx	101658 <startup-0x1fefe9a8>
    1654:	00c41906 	sbceq	r1, r4, r6, lsl #18
    1658:	65070000 	strvs	r0, [r7, #-0]
    165c:	05000003 	streq	r0, [r0, #-3]
    1660:	00c9113b 	sbceq	r1, r9, fp, lsr r1
    1664:	07080000 	streq	r0, [r8, -r0]
    1668:	00003801 	andeq	r3, r0, r1, lsl #16
    166c:	035f0600 	cmpeq	pc, #0, 12
    1670:	00010f0e 	andeq	r0, r1, lr, lsl #30
    1674:	035d0900 	cmpeq	sp, #0, 18
    1678:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    167c:	00000195 	muleq	r0, r5, r1
    1680:	280a0001 	stmdacs	sl, {r0}
    1684:	0905c306 	stmdbeq	r5, {r1, r2, r8, r9, lr, pc}
    1688:	000001a6 	andeq	r0, r0, r6, lsr #3
    168c:	000ac90b 	andeq	ip, sl, fp, lsl #18
    1690:	05c50600 	strbeq	r0, [r5, #1536]	; 0x600
    1694:	0000d511 	andeq	sp, r0, r1, lsl r5
    1698:	650b0000 	strvs	r0, [fp, #-0]
    169c:	0600000a 	streq	r0, [r0], -sl
    16a0:	d51105c6 	ldrle	r0, [r1, #-1478]	; 0xfffffa3a
    16a4:	04000000 	streq	r0, [r0], #-0
    16a8:	0009b00b 	andeq	fp, r9, fp
    16ac:	05c70600 	strbeq	r0, [r7, #1536]	; 0x600
    16b0:	0000d511 	andeq	sp, r0, r1, lsl r5
    16b4:	740b0800 	strvc	r0, [fp], #-2048	; 0xfffff800
    16b8:	0600000b 	streq	r0, [r0], -fp
    16bc:	d51105c8 	ldrle	r0, [r1, #-1480]	; 0xfffffa38
    16c0:	0c000000 	stceq	0, cr0, [r0], {-0}
    16c4:	5244490c 	subpl	r4, r4, #12, 18	; 0x30000
    16c8:	05c90600 	strbeq	r0, [r9, #1536]	; 0x600
    16cc:	0000d511 	andeq	sp, r0, r1, lsl r5
    16d0:	4f0c1000 	svcmi	0x000c1000
    16d4:	06005244 	streq	r5, [r0], -r4, asr #4
    16d8:	d51105ca 	ldrle	r0, [r1, #-1482]	; 0xfffffa36
    16dc:	14000000 	strne	r0, [r0], #-0
    16e0:	000c9c0b 	andeq	r9, ip, fp, lsl #24
    16e4:	05cb0600 	strbeq	r0, [fp, #1536]	; 0x600
    16e8:	0000b311 	andeq	fp, r0, r1, lsl r3
    16ec:	c30b1800 	movwgt	r1, #47104	; 0xb800
    16f0:	0600000a 	streq	r0, [r0], -sl
    16f4:	b31105cc 	tstlt	r1, #204, 10	; 0x33000000
    16f8:	1a000000 	bne	1700 <startup-0x1fffe900>
    16fc:	000ca20b 	andeq	sl, ip, fp, lsl #4
    1700:	05cd0600 	strbeq	r0, [sp, #1536]	; 0x600
    1704:	0000d511 	andeq	sp, r0, r1, lsl r5
    1708:	410c1c00 	tstmi	ip, r0, lsl #24
    170c:	06005246 	streq	r5, [r0], -r6, asr #4
    1710:	b61105ce 	ldrlt	r0, [r1], -lr, asr #11
    1714:	20000001 	andcs	r0, r0, r1
    1718:	00d50d00 	sbcseq	r0, r5, r0, lsl #26
    171c:	01b60000 			; <UNDEFINED> instruction: 0x01b60000
    1720:	940e0000 	strls	r0, [lr], #-0
    1724:	01000000 	mrseq	r0, (UNDEF: 0)
    1728:	01a60500 			; <UNDEFINED> instruction: 0x01a60500
    172c:	8d0f0000 	stchi	0, cr0, [pc, #-0]	; 1734 <startup-0x1fffe8cc>
    1730:	06000009 	streq	r0, [r0], -r9
    1734:	0f0305cf 	svceq	0x000305cf
    1738:	10000001 	andne	r0, r0, r1
    173c:	00380107 	eorseq	r0, r8, r7, lsl #2
    1740:	42070000 	andmi	r0, r7, #0
    1744:	0001ef01 	andeq	lr, r1, r1, lsl #30
    1748:	0c8f0900 			; <UNDEFINED> instruction: 0x0c8f0900
    174c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    1750:	00000a99 	muleq	r0, r9, sl
    1754:	0a180901 	beq	603b60 <startup-0x1f9fc4a0>
    1758:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    175c:	00000a4d 	andeq	r0, r0, sp, asr #20
    1760:	b8030003 	stmdalt	r3, {r0, r1}
    1764:	07000009 	streq	r0, [r0, -r9]
    1768:	01c80247 	biceq	r0, r8, r7, asr #4
    176c:	07100000 	ldreq	r0, [r0, -r0]
    1770:	00003801 	andeq	r3, r0, r1, lsl #16
    1774:	014f0700 	cmpeq	pc, r0, lsl #14
    1778:	00000216 	andeq	r0, r0, r6, lsl r2
    177c:	000adf09 	andeq	sp, sl, r9, lsl #30
    1780:	e8090000 	stmda	r9, {}	; <UNPREDICTABLE>
    1784:	01000009 	tsteq	r0, r9
    1788:	09fb0300 	ldmibeq	fp!, {r8, r9}^
    178c:	52070000 	andpl	r0, r7, #0
    1790:	0001fb02 	andeq	pc, r1, r2, lsl #22
    1794:	01071000 	mrseq	r1, (UNDEF: 7)
    1798:	00000038 	andeq	r0, r0, r8, lsr r0
    179c:	49015a07 	stmdbmi	r1, {r0, r1, r2, r9, fp, ip, lr}
    17a0:	09000002 	stmdbeq	r0, {r1}
    17a4:	00000b97 	muleq	r0, r7, fp
    17a8:	0b240900 	bleq	903bb0 <startup-0x1f6fc450>
    17ac:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    17b0:	00000a80 	andeq	r0, r0, r0, lsl #21
    17b4:	0acf0902 	beq	ff3c3bc4 <APBAHBPrescTable+0xdf3c0354>
    17b8:	00030000 	andeq	r0, r3, r0
    17bc:	000bc403 	andeq	ip, fp, r3, lsl #8
    17c0:	025f0700 	subseq	r0, pc, #0, 14
    17c4:	00000222 	andeq	r0, r0, r2, lsr #4
    17c8:	38010710 	stmdacc	r1, {r4, r8, r9, sl}
    17cc:	07000000 	streq	r0, [r0, -r0]
    17d0:	0276016e 	rsbseq	r0, r6, #-2147483621	; 0x8000001b
    17d4:	38090000 	stmdacc	r9, {}	; <UNPREDICTABLE>
    17d8:	0000000c 	andeq	r0, r0, ip
    17dc:	000c7209 	andeq	r7, ip, r9, lsl #4
    17e0:	d6090100 	strle	r0, [r9], -r0, lsl #2
    17e4:	0200000b 	andeq	r0, r0, #11
    17e8:	0c610300 	stcleq	3, cr0, [r1], #-0
    17ec:	72070000 	andvc	r0, r7, #0
    17f0:	00025502 	andeq	r5, r2, r2, lsl #10
    17f4:	01071000 	mrseq	r1, (UNDEF: 7)
    17f8:	00000038 	andeq	r0, r0, r8, lsr r0
    17fc:	9d017a07 	vstrls	s14, [r1, #-28]	; 0xffffffe4
    1800:	09000002 	stmdbeq	r0, {r1}
    1804:	00000d68 	andeq	r0, r0, r8, ror #26
    1808:	0cbd0900 			; <UNDEFINED> instruction: 0x0cbd0900
    180c:	00010000 	andeq	r0, r1, r0
    1810:	000e1503 	andeq	r1, lr, r3, lsl #10
    1814:	027d0700 	rsbseq	r0, sp, #0, 14
    1818:	00000282 	andeq	r0, r0, r2, lsl #5
    181c:	84070811 	strhi	r0, [r7], #-2065	; 0xfffff7ef
    1820:	0002f409 	andeq	pc, r2, r9, lsl #8
    1824:	0a771200 	beq	1dc602c <startup-0x1e239fd4>
    1828:	86070000 	strhi	r0, [r7], -r0
    182c:	0000c90c 	andeq	ip, r0, ip, lsl #18
    1830:	ac120000 	ldcge	0, cr0, [r2], {-0}
    1834:	0700000c 	streq	r0, [r0, -ip]
    1838:	01ef1489 	mvneq	r1, r9, lsl #9
    183c:	12040000 	andne	r0, r4, #0
    1840:	00000a37 	andeq	r0, r0, r7, lsr sl
    1844:	49158c07 	ldmdbmi	r5, {r0, r1, r2, sl, fp, pc}
    1848:	05000002 	streq	r0, [r0, #-2]
    184c:	000a0d12 	andeq	r0, sl, r2, lsl sp
    1850:	158f0700 	strne	r0, [pc, #1792]	; 1f58 <startup-0x1fffe0a8>
    1854:	00000216 	andeq	r0, r0, r6, lsl r2
    1858:	0c571206 	lfmeq	f1, 2, [r7], {6}
    185c:	92070000 	andls	r0, r7, #0
    1860:	00027614 	andeq	r7, r2, r4, lsl r6
    1864:	03000700 	movweq	r0, #1792	; 0x700
    1868:	00000b36 	andeq	r0, r0, r6, lsr fp
    186c:	a9029407 	stmdbge	r2, {r0, r1, r2, sl, ip, pc}
    1870:	13000002 	movwne	r0, #2
    1874:	00000e52 	andeq	r0, r0, r2, asr lr
    1878:	06024301 	streq	r4, [r2], -r1, lsl #6
    187c:	2000135e 	andcs	r1, r0, lr, asr r3
    1880:	000000a4 	andeq	r0, r0, r4, lsr #1
    1884:	03689c01 	cmneq	r8, #256	; 0x100
    1888:	35140000 	ldrcc	r0, [r4, #-0]
    188c:	0100000e 	tsteq	r0, lr
    1890:	68250243 	stmdavs	r5!, {r0, r1, r6, r9}
    1894:	02000003 	andeq	r0, r0, #3
    1898:	e0146c91 	muls	r4, r1, ip
    189c:	0100000d 	tsteq	r0, sp
    18a0:	a7350243 	ldrge	r0, [r5, -r3, asr #4]!
    18a4:	02000000 	andeq	r0, r0, #0
    18a8:	44146a91 	ldrmi	r6, [r4], #-2705	; 0xfffff56f
    18ac:	0100000d 	tsteq	r0, sp
    18b0:	9b4d0243 	blls	13421c4 <startup-0x1ecbde3c>
    18b4:	02000000 	andeq	r0, r0, #0
    18b8:	4c156991 			; <UNDEFINED> instruction: 0x4c156991
    18bc:	0100000d 	tsteq	r0, sp
    18c0:	c90c0245 	stmdbgt	ip, {r0, r2, r6, r9}
    18c4:	02000000 	andeq	r0, r0, #0
    18c8:	4b157491 	blmi	55eb14 <startup-0x1faa14ec>
    18cc:	0100000e 	tsteq	r0, lr
    18d0:	c90c0246 	stmdbgt	ip, {r1, r2, r6, r9}
    18d4:	02000000 	andeq	r0, r0, #0
    18d8:	16007091 			; <UNDEFINED> instruction: 0x16007091
    18dc:	0001bb04 	andeq	fp, r1, r4, lsl #22
    18e0:	0e3b1300 	cdpeq	3, 3, cr1, cr11, cr0, {0}
    18e4:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
    18e8:	133a0601 	teqne	sl, #1048576	; 0x100000
    18ec:	00242000 	eoreq	r2, r4, r0
    18f0:	9c010000 	stcls	0, cr0, [r1], {-0}
    18f4:	000003a6 	andeq	r0, r0, r6, lsr #7
    18f8:	000e3514 	andeq	r3, lr, r4, lsl r5
    18fc:	01f00100 	mvnseq	r0, r0, lsl #2
    1900:	00036824 	andeq	r6, r3, r4, lsr #16
    1904:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1908:	000a7714 	andeq	r7, sl, r4, lsl r7
    190c:	01f00100 	mvnseq	r0, r0, lsl #2
    1910:	0000a734 	andeq	sl, r0, r4, lsr r7
    1914:	72910200 	addsvc	r0, r1, #0, 4
    1918:	0e2a1300 	cdpeq	3, 2, cr1, cr10, cr0, {0}
    191c:	e0010000 	and	r0, r1, r0
    1920:	131c0601 	tstne	ip, #1048576	; 0x100000
    1924:	001e2000 	andseq	r2, lr, r0
    1928:	9c010000 	stcls	0, cr0, [r1], {-0}
    192c:	000003de 	ldrdeq	r0, [r0], -lr
    1930:	000e3514 	andeq	r3, lr, r4, lsl r5
    1934:	01e00100 	mvneq	r0, r0, lsl #2
    1938:	0003681f 	andeq	r6, r3, pc, lsl r8
    193c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1940:	000dd814 	andeq	sp, sp, r4, lsl r8
    1944:	01e00100 	mvneq	r0, r0, lsl #2
    1948:	0000a72f 	andeq	sl, r0, pc, lsr #14
    194c:	72910200 	addsvc	r0, r1, #0, 4
    1950:	0d721300 	ldcleq	3, cr1, [r2, #-0]
    1954:	c7010000 	strgt	r0, [r1, -r0]
    1958:	12e20601 	rscne	r0, r2, #1048576	; 0x100000
    195c:	003a2000 	eorseq	r2, sl, r0
    1960:	9c010000 	stcls	0, cr0, [r1], {-0}
    1964:	00000426 	andeq	r0, r0, r6, lsr #8
    1968:	000e3514 	andeq	r3, lr, r4, lsl r5
    196c:	01c70100 	biceq	r0, r7, r0, lsl #2
    1970:	00036822 	andeq	r6, r3, r2, lsr #16
    1974:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1978:	000a7714 	andeq	r7, sl, r4, lsl r7
    197c:	01c70100 	biceq	r0, r7, r0, lsl #2
    1980:	0000a732 	andeq	sl, r0, r2, lsr r7
    1984:	72910200 	addsvc	r0, r1, #0, 4
    1988:	000d6114 	andeq	r6, sp, r4, lsl r1
    198c:	01c70100 	biceq	r0, r7, r0, lsl #2
    1990:	00029d46 	andeq	r9, r2, r6, asr #26
    1994:	71910200 	orrsvc	r0, r1, r0, lsl #4
    1998:	0d971300 	ldceq	3, cr1, [r7]
    199c:	b1010000 	mrslt	r0, (UNDEF: 1)
    19a0:	12c40601 	sbcne	r0, r4, #1048576	; 0x100000
    19a4:	001e2000 	andseq	r2, lr, r0
    19a8:	9c010000 	stcls	0, cr0, [r1], {-0}
    19ac:	0000045e 	andeq	r0, r0, lr, asr r4
    19b0:	000e3514 	andeq	r3, lr, r4, lsl r5
    19b4:	01b10100 			; <UNDEFINED> instruction: 0x01b10100
    19b8:	00036823 	andeq	r6, r3, r3, lsr #16
    19bc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    19c0:	000a7714 	andeq	r7, sl, r4, lsl r7
    19c4:	01b10100 			; <UNDEFINED> instruction: 0x01b10100
    19c8:	0000a733 	andeq	sl, r0, r3, lsr r7
    19cc:	72910200 	addsvc	r0, r1, #0, 4
    19d0:	0d801300 	stceq	3, cr1, [r0]
    19d4:	9c010000 	stcls	0, cr0, [r1], {-0}
    19d8:	12a60601 	adcne	r0, r6, #1048576	; 0x100000
    19dc:	001e2000 	andseq	r2, lr, r0
    19e0:	9c010000 	stcls	0, cr0, [r1], {-0}
    19e4:	00000496 	muleq	r0, r6, r4
    19e8:	000e3514 	andeq	r3, lr, r4, lsl r5
    19ec:	019c0100 	orrseq	r0, ip, r0, lsl #2
    19f0:	00036821 	andeq	r6, r3, r1, lsr #16
    19f4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    19f8:	000a7714 	andeq	r7, sl, r4, lsl r7
    19fc:	019c0100 	orrseq	r0, ip, r0, lsl #2
    1a00:	0000a731 	andeq	sl, r0, r1, lsr r7
    1a04:	72910200 	addsvc	r0, r1, #0, 4
    1a08:	0cc51700 	stcleq	7, cr1, [r5], {0}
    1a0c:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
    1a10:	00a70a01 	adceq	r0, r7, r1, lsl #20
    1a14:	12900000 	addsne	r0, r0, #0
    1a18:	00162000 	andseq	r2, r6, r0
    1a1c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1a20:	000004c2 	andeq	r0, r0, r2, asr #9
    1a24:	000e3514 	andeq	r3, lr, r4, lsl r5
    1a28:	01880100 	orreq	r0, r8, r0, lsl #2
    1a2c:	0003682c 	andeq	r6, r3, ip, lsr #16
    1a30:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1a34:	0e631700 	cdpeq	7, 6, cr1, cr3, cr0, {0}
    1a38:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
    1a3c:	009b0901 	addseq	r0, fp, r1, lsl #18
    1a40:	12500000 	subsne	r0, r0, #0
    1a44:	00402000 	subeq	r2, r0, r0
    1a48:	9c010000 	stcls	0, cr0, [r1], {-0}
    1a4c:	0000050e 	andeq	r0, r0, lr, lsl #10
    1a50:	000e3514 	andeq	r3, lr, r4, lsl r5
    1a54:	016e0100 	cmneq	lr, r0, lsl #2
    1a58:	0003682e 	andeq	r6, r3, lr, lsr #16
    1a5c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1a60:	000a7714 	andeq	r7, sl, r4, lsl r7
    1a64:	016e0100 	cmneq	lr, r0, lsl #2
    1a68:	0000a73e 	andeq	sl, r0, lr, lsr r7
    1a6c:	6a910200 	bvs	fe442274 <APBAHBPrescTable+0xde43ea04>
    1a70:	00032e15 	andeq	r2, r3, r5, lsl lr
    1a74:	01700100 	cmneq	r0, r0, lsl #2
    1a78:	00009b0b 	andeq	r9, r0, fp, lsl #22
    1a7c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    1a80:	0def1700 	stcleq	7, cr1, [pc]	; 1a88 <startup-0x1fffe578>
    1a84:	5d010000 	stcpl	0, cr0, [r1, #-0]
    1a88:	00a70a01 	adceq	r0, r7, r1, lsl #20
    1a8c:	123a0000 	eorsne	r0, sl, #0
    1a90:	00162000 	andseq	r2, r6, r0
    1a94:	9c010000 	stcls	0, cr0, [r1], {-0}
    1a98:	0000053a 	andeq	r0, r0, sl, lsr r5
    1a9c:	000e3514 	andeq	r3, lr, r4, lsl r5
    1aa0:	015d0100 	cmpeq	sp, r0, lsl #2
    1aa4:	0003682b 	andeq	r6, r3, fp, lsr #16
    1aa8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1aac:	0db21700 	ldceq	7, cr1, [r2]
    1ab0:	43010000 	movwmi	r0, #4096	; 0x1000
    1ab4:	009b0901 	addseq	r0, fp, r1, lsl #18
    1ab8:	11fa0000 	mvnsne	r0, r0
    1abc:	00402000 	subeq	r2, r0, r0
    1ac0:	9c010000 	stcls	0, cr0, [r1], {-0}
    1ac4:	00000586 	andeq	r0, r0, r6, lsl #11
    1ac8:	000e3514 	andeq	r3, lr, r4, lsl r5
    1acc:	01430100 	mrseq	r0, (UNDEF: 83)
    1ad0:	0003682d 	andeq	r6, r3, sp, lsr #16
    1ad4:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1ad8:	000a7714 	andeq	r7, sl, r4, lsl r7
    1adc:	01430100 	mrseq	r0, (UNDEF: 83)
    1ae0:	0000a73d 	andeq	sl, r0, sp, lsr r7
    1ae4:	6a910200 	bvs	fe4422ec <APBAHBPrescTable+0xde43ea7c>
    1ae8:	00032e15 	andeq	r2, r3, r5, lsl lr
    1aec:	01450100 	mrseq	r0, (UNDEF: 85)
    1af0:	00009b0b 	andeq	r9, r0, fp, lsl #22
    1af4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    1af8:	0e021300 	cdpeq	3, 0, cr1, cr2, cr0, {0}
    1afc:	15010000 	strne	r0, [r1, #-0]
    1b00:	11b40601 			; <UNDEFINED> instruction: 0x11b40601
    1b04:	00462000 	subeq	r2, r6, r0
    1b08:	9c010000 	stcls	0, cr0, [r1], {-0}
    1b0c:	000005ce 	andeq	r0, r0, lr, asr #11
    1b10:	000e3514 	andeq	r3, lr, r4, lsl r5
    1b14:	01150100 	tsteq	r5, r0, lsl #2
    1b18:	00036827 	andeq	r6, r3, r7, lsr #16
    1b1c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1b20:	000a7714 	andeq	r7, sl, r4, lsl r7
    1b24:	01150100 	tsteq	r5, r0, lsl #2
    1b28:	0000a737 	andeq	sl, r0, r7, lsr r7
    1b2c:	6a910200 	bvs	fe442334 <APBAHBPrescTable+0xde43eac4>
    1b30:	706d7418 	rsbvc	r7, sp, r8, lsl r4
    1b34:	01170100 	tsteq	r7, r0, lsl #2
    1b38:	0000d511 	andeq	sp, r0, r1, lsl r5
    1b3c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1b40:	0d511900 	vldreq.16	s3, [r1, #-0]	; <UNPREDICTABLE>
    1b44:	fe010000 	cdp2	0, 0, cr0, cr1, cr0, {0}
    1b48:	00118206 	andseq	r8, r1, r6, lsl #4
    1b4c:	00003220 	andeq	r3, r0, r0, lsr #4
    1b50:	f49c0100 			; <UNDEFINED> instruction: 0xf49c0100
    1b54:	1a000005 	bne	1b70 <startup-0x1fffe490>
    1b58:	00000dc8 	andeq	r0, r0, r8, asr #27
    1b5c:	f428fe01 			; <UNDEFINED> instruction: 0xf428fe01
    1b60:	02000005 	andeq	r0, r0, #5
    1b64:	16007491 			; <UNDEFINED> instruction: 0x16007491
    1b68:	0002f404 	andeq	pc, r2, r4, lsl #8
    1b6c:	0d8d1900 	vstreq.16	s2, [sp]	; <UNPREDICTABLE>
    1b70:	ca010000 	bgt	41b78 <startup-0x1ffbe488>
    1b74:	00106806 	andseq	r6, r0, r6, lsl #16
    1b78:	00011a20 	andeq	r1, r1, r0, lsr #20
    1b7c:	5c9c0100 	ldfpls	f0, [ip], {0}
    1b80:	1a000006 	bne	1ba0 <startup-0x1fffe460>
    1b84:	00000e35 	andeq	r0, r0, r5, lsr lr
    1b88:	681eca01 	ldmdavs	lr, {r0, r9, fp, lr, pc}
    1b8c:	02000003 	andeq	r0, r0, #3
    1b90:	c81a6491 	ldmdagt	sl, {r0, r4, r7, sl, sp, lr}
    1b94:	0100000d 	tsteq	r0, sp
    1b98:	05f437ca 	ldrbeq	r3, [r4, #1994]!	; 0x7ca
    1b9c:	91020000 	mrsls	r0, (UNDEF: 2)
    1ba0:	0cb61b60 	vldmiaeq	r6!, {d1-<overflow reg d48>}
    1ba4:	cc010000 	stcgt	0, cr0, [r1], {-0}
    1ba8:	0000c90c 	andeq	ip, r0, ip, lsl #18
    1bac:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1bb0:	736f701c 	cmnvc	pc, #28
    1bb4:	1bcc0100 	blne	ff301fbc <APBAHBPrescTable+0xdf2fe74c>
    1bb8:	000000c9 	andeq	r0, r0, r9, asr #1
    1bbc:	1b709102 	blne	1c25fcc <startup-0x1e3da034>
    1bc0:	00000e1f 	andeq	r0, r0, pc, lsl lr
    1bc4:	c928cc01 	stmdbgt	r8!, {r0, sl, fp, lr, pc}
    1bc8:	02000000 	andeq	r0, r0, #0
    1bcc:	1d006c91 	stcne	12, cr6, [r0, #-580]	; 0xfffffdbc
    1bd0:	00000da6 	andeq	r0, r0, r6, lsr #27
    1bd4:	f8067f01 			; <UNDEFINED> instruction: 0xf8067f01
    1bd8:	7020000e 	eorvc	r0, r0, lr
    1bdc:	01000001 	tsteq	r0, r1
    1be0:	0e351a9c 			; <UNDEFINED> instruction: 0x0e351a9c
    1be4:	7f010000 	svcvc	0x00010000
    1be8:	00036820 	andeq	r6, r3, r0, lsr #16
    1bec:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1bf0:	016c0000 	cmneq	ip, r0
    1bf4:	00040000 	andeq	r0, r4, r0
    1bf8:	0000057b 	andeq	r0, r0, fp, ror r5
    1bfc:	029c0104 	addseq	r0, ip, #4, 2
    1c00:	d10c0000 	mrsle	r0, (UNDEF: 12)
    1c04:	0b00000e 	bleq	1c44 <startup-0x1fffe3bc>
    1c08:	04000009 	streq	r0, [r0], #-9
    1c0c:	ba200014 	blt	801c64 <startup-0x1f7fe39c>
    1c10:	02000000 	andeq	r0, r0, #0
    1c14:	0200000f 	andeq	r0, r0, #15
    1c18:	00000f05 	andeq	r0, r0, r5, lsl #30
    1c1c:	1003011a 	andne	r0, r3, sl, lsl r1
    1c20:	000000da 	ldrdeq	r0, [r0], -sl
    1c24:	00727303 	rsbseq	r7, r2, r3, lsl #6
    1c28:	e11d0401 	tst	sp, r1, lsl #8
    1c2c:	00000000 	andeq	r0, r0, r0
    1c30:	000ea904 	andeq	sl, lr, r4, lsl #18
    1c34:	1d050100 	stfnes	f0, [r5, #-0]
    1c38:	000000e1 	andeq	r0, r0, r1, ror #1
    1c3c:	72640302 	rsbvc	r0, r4, #134217728	; 0x8000000
    1c40:	1d060100 	stfnes	f0, [r6, #-0]
    1c44:	000000e1 	andeq	r0, r0, r1, ror #1
    1c48:	0eb10404 	cdpeq	4, 11, cr0, cr1, cr4, {0}
    1c4c:	07010000 	streq	r0, [r1, -r0]
    1c50:	0000e11d 	andeq	lr, r0, sp, lsl r1
    1c54:	62030600 	andvs	r0, r3, #0, 12
    1c58:	01007272 	tsteq	r0, r2, ror r2
    1c5c:	00e11d08 	rsceq	r1, r1, r8, lsl #26
    1c60:	04080000 	streq	r0, [r8], #-0
    1c64:	00000eb9 			; <UNDEFINED> instruction: 0x00000eb9
    1c68:	e11d0901 	tst	sp, r1, lsl #18
    1c6c:	0a000000 	beq	1c74 <startup-0x1fffe38c>
    1c70:	31726303 	cmncc	r2, r3, lsl #6
    1c74:	1d0a0100 	stfnes	f0, [sl, #-0]
    1c78:	000000e1 	andeq	r0, r0, r1, ror #1
    1c7c:	0ec1040c 	cdpeq	4, 12, cr0, cr1, cr12, {0}
    1c80:	0b010000 	bleq	41c88 <startup-0x1ffbe378>
    1c84:	0000e11d 	andeq	lr, r0, sp, lsl r1
    1c88:	63030e00 	movwvs	r0, #15872	; 0x3e00
    1c8c:	01003272 	tsteq	r0, r2, ror r2
    1c90:	00e11d0c 	rsceq	r1, r1, ip, lsl #26
    1c94:	04100000 	ldreq	r0, [r0], #-0
    1c98:	00000ec9 	andeq	r0, r0, r9, asr #29
    1c9c:	e11d0d01 	tst	sp, r1, lsl #26
    1ca0:	12000000 	andne	r0, r0, #0
    1ca4:	33726303 	cmncc	r2, #201326592	; 0xc000000
    1ca8:	1d0e0100 	stfnes	f0, [lr, #-0]
    1cac:	000000e1 	andeq	r0, r0, r1, ror #1
    1cb0:	0e890414 	mcreq	4, 4, r0, cr9, cr4, {0}
    1cb4:	0f010000 	svceq	0x00010000
    1cb8:	0000e11d 	andeq	lr, r0, sp, lsl r1
    1cbc:	a4041600 	strge	r1, [r4], #-1536	; 0xfffffa00
    1cc0:	0100000e 	tsteq	r0, lr
    1cc4:	00e11d10 	rsceq	r1, r1, r0, lsl sp
    1cc8:	00180000 	andseq	r0, r8, r0
    1ccc:	03070205 	movweq	r0, #29189	; 0x7205
    1cd0:	06000004 	streq	r0, [r0], -r4
    1cd4:	000000da 	ldrdeq	r0, [r0], -sl
    1cd8:	000f0507 	andeq	r0, pc, r7, lsl #10
    1cdc:	03110100 	tsteq	r1, #0, 2
    1ce0:	00000025 	andeq	r0, r0, r5, lsr #32
    1ce4:	000e8308 	andeq	r8, lr, r8, lsl #6
    1ce8:	062b0100 	strteq	r0, [fp], -r0, lsl #2
    1cec:	20001494 	mulcs	r0, r4, r4
    1cf0:	0000002a 	andeq	r0, r0, sl, lsr #32
    1cf4:	01169c01 	tsteq	r6, r1, lsl #24
    1cf8:	73090000 	movwvc	r0, #36864	; 0x9000
    1cfc:	122b0100 	eorne	r0, fp, #0, 2
    1d00:	00000116 	andeq	r0, r0, r6, lsl r1
    1d04:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1d08:	011c040a 	tsteq	ip, sl, lsl #8
    1d0c:	01050000 	mrseq	r0, (UNDEF: 5)
    1d10:	0007c308 	andeq	ip, r7, r8, lsl #6
    1d14:	0e910b00 	vfnmseq.f64	d0, d1, d0
    1d18:	25010000 	strcs	r0, [r1, #-0]
    1d1c:	00011c06 	andeq	r1, r1, r6, lsl #24
    1d20:	00146c00 	andseq	r6, r4, r0, lsl #24
    1d24:	00002820 	andeq	r2, r0, r0, lsr #16
    1d28:	0b9c0100 	bleq	fe702130 <APBAHBPrescTable+0xde6fe8c0>
    1d2c:	00000e9a 	muleq	r0, sl, lr
    1d30:	1c061e01 	stcne	14, cr1, [r6], {1}
    1d34:	44000001 	strmi	r0, [r0], #-1
    1d38:	28200014 	stmdacs	r0!, {r2, r4}
    1d3c:	01000000 	mrseq	r0, (UNDEF: 0)
    1d40:	0e7a0c9c 	mrceq	12, 3, r0, cr10, cr12, {4}
    1d44:	15010000 	strne	r0, [r1, #-0]
    1d48:	00140406 	andseq	r0, r4, r6, lsl #8
    1d4c:	00004020 	andeq	r4, r0, r0, lsr #32
    1d50:	099c0100 	ldmibeq	ip, {r8}
    1d54:	15010063 	strne	r0, [r1, #-99]	; 0xffffff9d
    1d58:	00011c15 	andeq	r1, r1, r5, lsl ip
    1d5c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    1d60:	1e220000 	cdpne	0, 2, cr0, cr2, cr0, {0}
    1d64:	00040000 	andeq	r0, r4, r0
    1d68:	0000064f 	andeq	r0, r0, pc, asr #12
    1d6c:	029c0104 	addseq	r0, ip, #4, 2
    1d70:	b50c0000 	strlt	r0, [ip, #-0]
    1d74:	0b000018 	bleq	1ddc <startup-0x1fffe224>
    1d78:	c0000009 	andgt	r0, r0, r9
    1d7c:	d8200014 	stmdale	r0!, {r2, r4}
    1d80:	e0000021 	and	r0, r0, r1, lsr #32
    1d84:	0200000f 	andeq	r0, r0, #15
    1d88:	07bc0601 	ldreq	r0, [ip, r1, lsl #12]!
    1d8c:	6c030000 	stcvs	0, cr0, [r3], {-0}
    1d90:	02000000 	andeq	r0, r0, #0
    1d94:	0038182b 	eorseq	r1, r8, fp, lsr #16
    1d98:	01020000 	mrseq	r0, (UNDEF: 2)
    1d9c:	0007ba08 	andeq	fp, r7, r8, lsl #20
    1da0:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    1da4:	0000061b 	andeq	r0, r0, fp, lsl r6
    1da8:	00074c03 	andeq	r4, r7, r3, lsl #24
    1dac:	19390200 	ldmdbne	r9!, {r9}
    1db0:	00000052 	andeq	r0, r0, r2, asr r0
    1db4:	03070202 	movweq	r0, #29186	; 0x7202
    1db8:	03000004 	movweq	r0, #4
    1dbc:	00000773 	andeq	r0, r0, r3, ror r7
    1dc0:	65184d02 	ldrvs	r4, [r8, #-3330]	; 0xfffff2fe
    1dc4:	02000000 	andeq	r0, r0, #0
    1dc8:	020e0504 	andeq	r0, lr, #4, 10	; 0x1000000
    1dcc:	63030000 	movwvs	r0, #12288	; 0x3000
    1dd0:	02000002 	andeq	r0, r0, #2
    1dd4:	0078194f 	rsbseq	r1, r8, pc, asr #18
    1dd8:	04020000 	streq	r0, [r2], #-0
    1ddc:	0000e007 	andeq	lr, r0, r7
    1de0:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    1de4:	00000209 	andeq	r0, r0, r9, lsl #4
    1de8:	db070802 	blle	1c3df8 <startup-0x1fe3c208>
    1dec:	04000000 	streq	r0, [r0], #-0
    1df0:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    1df4:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    1df8:	0000e507 	andeq	lr, r0, r7, lsl #10
    1dfc:	006e0300 	rsbeq	r0, lr, r0, lsl #6
    1e00:	18030000 	stmdane	r3, {}	; <UNPREDICTABLE>
    1e04:	00002c13 	andeq	r2, r0, r3, lsl ip
    1e08:	074e0300 	strbeq	r0, [lr, -r0, lsl #6]
    1e0c:	24030000 	strcs	r0, [r3], #-0
    1e10:	00004614 	andeq	r4, r0, r4, lsl r6
    1e14:	00a70500 	adceq	r0, r7, r0, lsl #10
    1e18:	75030000 	strvc	r0, [r3, #-0]
    1e1c:	03000007 	movweq	r0, #7
    1e20:	0059132c 	subseq	r1, r9, ip, lsr #6
    1e24:	b8050000 	stmdalt	r5, {}	; <UNPREDICTABLE>
    1e28:	03000000 	movweq	r0, #0
    1e2c:	00000265 	andeq	r0, r0, r5, ror #4
    1e30:	6c143003 	ldcvs	0, cr3, [r4], {3}
    1e34:	05000000 	streq	r0, [r0, #-0]
    1e38:	000000c9 	andeq	r0, r0, r9, asr #1
    1e3c:	0005fe06 	andeq	pc, r5, r6, lsl #28
    1e40:	06fa0400 	ldrbteq	r0, [sl], r0, lsl #8
    1e44:	0000c419 	andeq	ip, r0, r9, lsl r4
    1e48:	03650700 	cmneq	r5, #0, 14
    1e4c:	3b050000 	blcc	141e54 <startup-0x1febe1ac>
    1e50:	0000c911 	andeq	ip, r0, r1, lsl r9
    1e54:	01070800 	tsteq	r7, r0, lsl #16
    1e58:	00000038 	andeq	r0, r0, r8, lsr r0
    1e5c:	0e035d06 	cdpeq	13, 0, cr5, cr3, cr6, {0}
    1e60:	0000010f 	andeq	r0, r0, pc, lsl #2
    1e64:	000d6c09 	andeq	r6, sp, r9, lsl #24
    1e68:	530a0000 	movwpl	r0, #40960	; 0xa000
    1e6c:	01005445 	tsteq	r0, r5, asr #8
    1e70:	05c60b00 	strbeq	r0, [r6, #2816]	; 0xb00
    1e74:	5d060000 	stcpl	0, cr0, [r6, #-0]
    1e78:	00f32803 	rscseq	r2, r3, r3, lsl #16
    1e7c:	840b0000 	strhi	r0, [fp], #-0
    1e80:	06000007 	streq	r0, [r0], -r7
    1e84:	f334035d 	vcge.u<illegal width 64>	q0, q2, <illegal reg q6.5>
    1e88:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1e8c:	00380107 	eorseq	r0, r8, r7, lsl #2
    1e90:	5f060000 	svcpl	0x00060000
    1e94:	01450e03 	cmpeq	r5, r3, lsl #28
    1e98:	5d090000 	stcpl	0, cr0, [r9, #-0]
    1e9c:	00000003 	andeq	r0, r0, r3
    1ea0:	00019509 	andeq	r9, r1, r9, lsl #10
    1ea4:	0b000100 	bleq	22ac <startup-0x1fffdd54>
    1ea8:	0000051b 	andeq	r0, r0, fp, lsl r5
    1eac:	2f035f06 	svccs	0x00035f06
    1eb0:	00000129 	andeq	r0, r0, r9, lsr #2
    1eb4:	4706540c 	strmi	r5, [r6, -ip, lsl #8]
    1eb8:	03530907 	cmpeq	r3, #114688	; 0x1c000
    1ebc:	430d0000 	movwmi	r0, #53248	; 0xd000
    1ec0:	06003152 			; <UNDEFINED> instruction: 0x06003152
    1ec4:	b3110749 	tstlt	r1, #19136512	; 0x1240000
    1ec8:	00000000 	andeq	r0, r0, r0
    1ecc:	0005790e 	andeq	r7, r5, lr, lsl #18
    1ed0:	074a0600 	strbeq	r0, [sl, -r0, lsl #12]
    1ed4:	0000a711 	andeq	sl, r0, r1, lsl r7
    1ed8:	430d0200 	movwmi	r0, #53760	; 0xd200
    1edc:	06003252 			; <UNDEFINED> instruction: 0x06003252
    1ee0:	b311074b 	tstlt	r1, #19660800	; 0x12c0000
    1ee4:	04000000 	streq	r0, [r0], #-0
    1ee8:	0005830e 	andeq	r8, r5, lr, lsl #6
    1eec:	074c0600 	strbeq	r0, [ip, -r0, lsl #12]
    1ef0:	0000a711 	andeq	sl, r0, r1, lsl r7
    1ef4:	fe0e0600 	cdp2	6, 0, cr0, cr14, cr0, {0}
    1ef8:	0600000a 	streq	r0, [r0], -sl
    1efc:	b311074d 	tstlt	r1, #20185088	; 0x1340000
    1f00:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1f04:	00058d0e 	andeq	r8, r5, lr, lsl #26
    1f08:	074e0600 	strbeq	r0, [lr, -r0, lsl #12]
    1f0c:	0000a711 	andeq	sl, r0, r1, lsl r7
    1f10:	6f0e0a00 	svcvs	0x000e0a00
    1f14:	0600000b 	streq	r0, [r0], -fp
    1f18:	b311074f 	tstlt	r1, #20709376	; 0x13c0000
    1f1c:	0c000000 	stceq	0, cr0, [r0], {-0}
    1f20:	0005970e 	andeq	r9, r5, lr, lsl #14
    1f24:	07500600 	ldrbeq	r0, [r0, -r0, lsl #12]
    1f28:	0000a711 	andeq	sl, r0, r1, lsl r7
    1f2c:	530d0e00 	movwpl	r0, #56832	; 0xde00
    1f30:	51060052 	qaddpl	r0, r2, r6
    1f34:	00b31107 	adcseq	r1, r3, r7, lsl #2
    1f38:	0e100000 	cdpeq	0, 1, cr0, cr0, cr0, {0}
    1f3c:	000005a1 	andeq	r0, r0, r1, lsr #11
    1f40:	11075206 	tstne	r7, r6, lsl #4
    1f44:	000000a7 	andeq	r0, r0, r7, lsr #1
    1f48:	47450d12 	smlaldmi	r0, r5, r2, sp
    1f4c:	53060052 	movwpl	r0, #24658	; 0x6052
    1f50:	00b31107 	adcseq	r1, r3, r7, lsl #2
    1f54:	0e140000 	cdpeq	0, 1, cr0, cr4, cr0, {0}
    1f58:	000005ab 	andeq	r0, r0, fp, lsr #11
    1f5c:	11075406 	tstne	r7, r6, lsl #8
    1f60:	000000a7 	andeq	r0, r0, r7, lsr #1
    1f64:	09ce0e16 	stmibeq	lr, {r1, r2, r4, r9, sl, fp}^
    1f68:	55060000 	strpl	r0, [r6, #-0]
    1f6c:	00b31107 	adcseq	r1, r3, r7, lsl #2
    1f70:	0e180000 	cdpeq	0, 1, cr0, cr8, cr0, {0}
    1f74:	000005b5 			; <UNDEFINED> instruction: 0x000005b5
    1f78:	11075606 	tstne	r7, r6, lsl #12
    1f7c:	000000a7 	andeq	r0, r0, r7, lsr #1
    1f80:	09d40e1a 	ldmibeq	r4, {r1, r3, r4, r9, sl, fp}^
    1f84:	57060000 	strpl	r0, [r6, -r0]
    1f88:	00b31107 	adcseq	r1, r3, r7, lsl #2
    1f8c:	0e1c0000 	cdpeq	0, 1, cr0, cr12, cr0, {0}
    1f90:	00000ba6 	andeq	r0, r0, r6, lsr #23
    1f94:	11075806 	tstne	r7, r6, lsl #16
    1f98:	000000a7 	andeq	r0, r0, r7, lsr #1
    1f9c:	09ab0e1e 	stmibeq	fp!, {r1, r2, r3, r4, r9, sl, fp}
    1fa0:	59060000 	stmdbpl	r6, {}	; <UNPREDICTABLE>
    1fa4:	00b31107 	adcseq	r1, r3, r7, lsl #2
    1fa8:	0e200000 	cdpeq	0, 2, cr0, cr0, cr0, {0}
    1fac:	00000bb0 			; <UNDEFINED> instruction: 0x00000bb0
    1fb0:	11075a06 	tstne	r7, r6, lsl #20
    1fb4:	000000a7 	andeq	r0, r0, r7, lsr #1
    1fb8:	4e430d22 	cdpmi	13, 4, cr0, cr3, cr2, {1}
    1fbc:	5b060054 	blpl	182114 <startup-0x1fe7deec>
    1fc0:	00d51107 	sbcseq	r1, r5, r7, lsl #2
    1fc4:	0d240000 	stceq	0, cr0, [r4, #-0]
    1fc8:	00435350 	subeq	r5, r3, r0, asr r3
    1fcc:	11075c06 	tstne	r7, r6, lsl #24
    1fd0:	000000b3 	strheq	r0, [r0], -r3
    1fd4:	0bba0e28 	bleq	fee8587c <APBAHBPrescTable+0xdee8200c>
    1fd8:	5d060000 	stcpl	0, cr0, [r6, #-0]
    1fdc:	00a71107 	adceq	r1, r7, r7, lsl #2
    1fe0:	0d2a0000 	stceq	0, cr0, [sl, #-0]
    1fe4:	00525241 	subseq	r5, r2, r1, asr #4
    1fe8:	11075e06 	tstne	r7, r6, lsl #28
    1fec:	000000d5 	ldrdeq	r0, [r0], -r5
    1ff0:	43520d2c 	cmpmi	r2, #44, 26	; 0xb00
    1ff4:	5f060052 	svcpl	0x00060052
    1ff8:	00b31107 	adcseq	r1, r3, r7, lsl #2
    1ffc:	0e300000 	cdpeq	0, 3, cr0, cr0, cr0, {0}
    2000:	00000b03 	andeq	r0, r0, r3, lsl #22
    2004:	11076006 	tstne	r7, r6
    2008:	000000a7 	andeq	r0, r0, r7, lsr #1
    200c:	0aaf0e32 	beq	febc58dc <APBAHBPrescTable+0xdebc206c>
    2010:	61060000 	mrsvs	r0, (UNDEF: 6)
    2014:	00d51107 	sbcseq	r1, r5, r7, lsl #2
    2018:	0e340000 	cdpeq	0, 3, cr0, cr4, cr0, {0}
    201c:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
    2020:	11076206 	tstne	r7, r6, lsl #4
    2024:	000000d5 	ldrdeq	r0, [r0], -r5
    2028:	0ab90e38 	beq	fee45910 <APBAHBPrescTable+0xdee420a0>
    202c:	63060000 	movwvs	r0, #24576	; 0x6000
    2030:	00d51107 	sbcseq	r1, r5, r7, lsl #2
    2034:	0e3c0000 	cdpeq	0, 3, cr0, cr12, cr0, {0}
    2038:	00000abe 			; <UNDEFINED> instruction: 0x00000abe
    203c:	11076406 	tstne	r7, r6, lsl #8
    2040:	000000d5 	ldrdeq	r0, [r0], -r5
    2044:	0b6a0e40 	bleq	1a8594c <startup-0x1e57a6b4>
    2048:	65060000 	strvs	r0, [r6, #-0]
    204c:	00b31107 	adcseq	r1, r3, r7, lsl #2
    2050:	0e440000 	cdpeq	0, 4, cr0, cr4, cr0, {0}
    2054:	00000a6c 	andeq	r0, r0, ip, ror #20
    2058:	11076606 	tstne	r7, r6, lsl #12
    205c:	000000a7 	andeq	r0, r0, r7, lsr #1
    2060:	43440d46 	movtmi	r0, #19782	; 0x4d46
    2064:	67060052 	smlsdvs	r6, r2, r0, r0
    2068:	00b31107 	adcseq	r1, r3, r7, lsl #2
    206c:	0e480000 	cdpeq	0, 4, cr0, cr8, cr0, {0}
    2070:	00000b0e 	andeq	r0, r0, lr, lsl #22
    2074:	11076806 	tstne	r7, r6, lsl #16
    2078:	000000a7 	andeq	r0, r0, r7, lsr #1
    207c:	09c90e4a 	stmibeq	r9, {r1, r3, r6, r9, sl, fp}^
    2080:	69060000 	stmdbvs	r6, {}	; <UNPREDICTABLE>
    2084:	00b31107 	adcseq	r1, r3, r7, lsl #2
    2088:	0e4c0000 	cdpeq	0, 4, cr0, cr12, cr0, {0}
    208c:	00000b19 	andeq	r0, r0, r9, lsl fp
    2090:	11076a06 	tstne	r7, r6, lsl #20
    2094:	000000a7 	andeq	r0, r0, r7, lsr #1
    2098:	524f0d4e 	subpl	r0, pc, #4992	; 0x1380
    209c:	076b0600 	strbeq	r0, [fp, -r0, lsl #12]!
    20a0:	0000b311 	andeq	fp, r0, r1, lsl r3
    20a4:	5a0e5000 	bpl	3960ac <startup-0x1fc69f54>
    20a8:	0600000a 	streq	r0, [r0], -sl
    20ac:	a711076c 	ldrge	r0, [r1, -ip, ror #14]
    20b0:	52000000 	andpl	r0, r0, #0
    20b4:	0aed0b00 	beq	ffb44cbc <APBAHBPrescTable+0xdfb4144c>
    20b8:	6d060000 	stcvs	0, cr0, [r6, #-0]
    20bc:	01520307 	cmpeq	r2, r7, lsl #6
    20c0:	0c0f0000 	stceq	0, cr0, [pc], {-0}
    20c4:	ab093707 	blge	24fce8 <startup-0x1fdb0318>
    20c8:	10000003 	andne	r0, r0, r3
    20cc:	000009da 	ldrdeq	r0, [r0], -sl
    20d0:	a70c3907 	strge	r3, [ip, -r7, lsl #18]
    20d4:	00000000 	andeq	r0, r0, r0
    20d8:	000c7f10 	andeq	r7, ip, r0, lsl pc
    20dc:	0c3c0700 	ldceq	7, cr0, [ip], #-0
    20e0:	000000a7 	andeq	r0, r0, r7, lsr #1
    20e4:	0b471002 	bleq	11c60f4 <startup-0x1ee39f0c>
    20e8:	3f070000 	svccc	0x00070000
    20ec:	0000c90c 	andeq	ip, r0, ip, lsl #18
    20f0:	25100400 	ldrcs	r0, [r0, #-1024]	; 0xfffffc00
    20f4:	0700000a 	streq	r0, [r0, -sl]
    20f8:	00a70c43 	adceq	r0, r7, r3, asr #24
    20fc:	10080000 	andne	r0, r8, r0
    2100:	00000c22 	andeq	r0, r0, r2, lsr #24
    2104:	9b0b4607 	blls	2d3928 <startup-0x1fd2c6d8>
    2108:	0a000000 	beq	2110 <startup-0x1fffdef0>
    210c:	0b520300 	bleq	1482d14 <startup-0x1eb7d2ec>
    2110:	4e070000 	cdpmi	0, 0, cr0, cr7, cr0, {0}
    2114:	00036003 	andeq	r6, r3, r3
    2118:	07140f00 	ldreq	r0, [r4, -r0, lsl #30]
    211c:	04290954 	strteq	r0, [r9], #-2388	; 0xfffff6ac
    2120:	ce100000 	cdpgt	0, 1, cr0, cr0, cr0, {0}
    2124:	07000017 	smladeq	r0, r7, r0, r0
    2128:	00a70c56 	adceq	r0, r7, r6, asr ip
    212c:	10000000 	andne	r0, r0, r0
    2130:	00001581 	andeq	r1, r0, r1, lsl #11
    2134:	a70c5907 	strge	r5, [ip, -r7, lsl #18]
    2138:	02000000 	andeq	r0, r0, #0
    213c:	00113e10 	andseq	r3, r1, r0, lsl lr
    2140:	0c5c0700 	mrrceq	7, 0, r0, ip, cr0
    2144:	000000a7 	andeq	r0, r0, r7, lsr #1
    2148:	0fd71004 	svceq	0x00d71004
    214c:	60070000 	andvs	r0, r7, r0
    2150:	0000c90c 	andeq	ip, r0, ip, lsl #18
    2154:	8a100800 	bhi	40415c <startup-0x1fbfbea4>
    2158:	07000012 	smladeq	r0, r2, r0, r0
    215c:	00a70c63 	adceq	r0, r7, r3, ror #24
    2160:	100c0000 	andne	r0, ip, r0
    2164:	000016ca 	andeq	r1, r0, sl, asr #13
    2168:	a70c6607 	strge	r6, [ip, -r7, lsl #12]
    216c:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    2170:	00193c10 	andseq	r3, r9, r0, lsl ip
    2174:	0c6a0700 	stcleq	7, cr0, [sl], #-0
    2178:	000000a7 	andeq	r0, r0, r7, lsr #1
    217c:	14f41010 	ldrbtne	r1, [r4], #16
    2180:	6e070000 	cdpvs	0, 0, cr0, cr7, cr0, {0}
    2184:	0000a70c 	andeq	sl, r0, ip, lsl #14
    2188:	03001200 	movweq	r1, #512	; 0x200
    218c:	00001827 	andeq	r1, r0, r7, lsr #16
    2190:	b7037107 	strlt	r7, [r3, -r7, lsl #2]
    2194:	0f000003 	svceq	0x00000003
    2198:	0977070a 	ldmdbeq	r7!, {r1, r3, r8, r9, sl}^
    219c:	00000480 	andeq	r0, r0, r0, lsl #9
    21a0:	0010d310 	andseq	sp, r0, r0, lsl r3
    21a4:	0c7a0700 	ldcleq	7, cr0, [sl], #-0
    21a8:	000000a7 	andeq	r0, r0, r7, lsr #1
    21ac:	15a11000 	strne	r1, [r1, #0]!
    21b0:	7d070000 	stcvc	0, cr0, [r7, #-0]
    21b4:	0000a70c 	andeq	sl, r0, ip, lsl #14
    21b8:	61100200 	tstvs	r0, r0, lsl #4
    21bc:	07000010 	smladeq	r0, r0, r0, r0
    21c0:	00a70c80 	adceq	r0, r7, r0, lsl #25
    21c4:	10040000 	andne	r0, r4, r0
    21c8:	000014d8 	ldrdeq	r1, [r0], -r8
    21cc:	a70c8307 	strge	r8, [ip, -r7, lsl #6]
    21d0:	06000000 	streq	r0, [r0], -r0
    21d4:	00101110 	andseq	r1, r0, r0, lsl r1
    21d8:	0c860700 	stceq	7, cr0, [r6], {0}
    21dc:	000000a7 	andeq	r0, r0, r7, lsr #1
    21e0:	3b030008 	blcc	c2208 <startup-0x1ff3ddf8>
    21e4:	07000017 	smladeq	r0, r7, r0, r0
    21e8:	04350388 	ldrteq	r0, [r5], #-904	; 0xfffffc78
    21ec:	0e0f0000 	cdpeq	0, 0, cr0, cr15, cr0, {0}
    21f0:	f1098f07 			; <UNDEFINED> instruction: 0xf1098f07
    21f4:	10000004 	andne	r0, r0, r4
    21f8:	00001359 	andeq	r1, r0, r9, asr r3
    21fc:	a70c9207 	strge	r9, [ip, -r7, lsl #4]
    2200:	00000000 	andeq	r0, r0, r0
    2204:	00165010 	andseq	r5, r6, r0, lsl r0
    2208:	0c950700 	ldceq	7, cr0, [r5], {0}
    220c:	000000a7 	andeq	r0, r0, r7, lsr #1
    2210:	15cb1002 	strbne	r1, [fp, #2]
    2214:	98070000 	stmdals	r7, {}	; <UNPREDICTABLE>
    2218:	0000a70c 	andeq	sl, r0, ip, lsl #14
    221c:	8d100400 	cfldrshi	mvf0, [r0, #-0]
    2220:	07000014 	smladeq	r0, r4, r0, r0
    2224:	00a70c9b 	umlaleq	r0, r7, fp, ip
    2228:	10060000 	andne	r0, r6, r0
    222c:	00001483 	andeq	r1, r0, r3, lsl #9
    2230:	a70c9f07 	strge	r9, [ip, -r7, lsl #30]
    2234:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2238:	0017e910 	andseq	lr, r7, r0, lsl r9
    223c:	0ca20700 	stceq	7, cr0, [r2]
    2240:	000000a7 	andeq	r0, r0, r7, lsr #1
    2244:	1392100a 	orrsne	r1, r2, #10
    2248:	a5070000 	strge	r0, [r7, #-0]
    224c:	0000a70c 	andeq	sl, r0, ip, lsl #14
    2250:	03000c00 	movweq	r0, #3072	; 0xc00
    2254:	00001334 	andeq	r1, r0, r4, lsr r3
    2258:	8c03a707 	stchi	7, cr10, [r3], {7}
    225c:	11000004 	tstne	r0, r4
    2260:	0000127f 	andeq	r1, r0, pc, ror r2
    2264:	0d0d0001 	stceq	0, cr0, [sp, #-4]
    2268:	200035b8 			; <UNDEFINED> instruction: 0x200035b8
    226c:	000000e0 	andeq	r0, r0, r0, ror #1
    2270:	05859c01 	streq	r9, [r5, #3073]	; 0xc01
    2274:	67120000 	ldrvs	r0, [r2, -r0]
    2278:	01000013 	tsteq	r0, r3, lsl r0
    227c:	85250d00 	strhi	r0, [r5, #-3328]!	; 0xfffff300
    2280:	02000005 	andeq	r0, r0, #5
    2284:	a1125c91 			; <UNDEFINED> instruction: 0xa1125c91
    2288:	01000015 	tsteq	r0, r5, lsl r0
    228c:	a7340d00 	ldrge	r0, [r4, -r0, lsl #26]!
    2290:	02000000 	andeq	r0, r0, #0
    2294:	61125a91 			; <UNDEFINED> instruction: 0x61125a91
    2298:	01000010 	tsteq	r0, r0, lsl r0
    229c:	a74d0d00 	strbge	r0, [sp, -r0, lsl #26]
    22a0:	02000000 	andeq	r0, r0, #0
    22a4:	11125891 			; <UNDEFINED> instruction: 0x11125891
    22a8:	01000010 	tsteq	r0, r0, lsl r0
    22ac:	a7210d01 	strge	r0, [r1, -r1, lsl #26]!
    22b0:	02000000 	andeq	r0, r0, #0
    22b4:	ea135691 	b	4d7d00 <startup-0x1fb28300>
    22b8:	0100000f 	tsteq	r0, pc
    22bc:	a70c0d03 	strge	r0, [ip, -r3, lsl #26]
    22c0:	02000000 	andeq	r0, r0, #0
    22c4:	60136691 	mulsvs	r3, r1, r6
    22c8:	01000012 	tsteq	r0, r2, lsl r0
    22cc:	a71a0d03 	ldrge	r0, [sl, -r3, lsl #26]
    22d0:	02000000 	andeq	r0, r0, #0
    22d4:	74146491 	ldrvc	r6, [r4], #-1169	; 0xfffffb6f
    22d8:	0100706d 	tsteq	r0, sp, rrx
    22dc:	a7270d03 	strge	r0, [r7, -r3, lsl #26]!
    22e0:	02000000 	andeq	r0, r0, #0
    22e4:	15006291 	strne	r6, [r0, #-657]	; 0xfffffd6f
    22e8:	00035304 	andeq	r5, r3, r4, lsl #6
    22ec:	13e11100 	mvnne	r1, #0, 2
    22f0:	d7010000 	strle	r0, [r1, -r0]
    22f4:	34e40d0c 	strbtcc	r0, [r4], #3340	; 0xd0c
    22f8:	00d42000 	sbcseq	r2, r4, r0
    22fc:	9c010000 	stcls	0, cr0, [r1], {-0}
    2300:	00000613 	andeq	r0, r0, r3, lsl r6
    2304:	00136712 	andseq	r6, r3, r2, lsl r7
    2308:	0cd70100 	ldfeqe	f0, [r7], {0}
    230c:	00058525 	andeq	r8, r5, r5, lsr #10
    2310:	5c910200 	lfmpl	f0, 4, [r1], {0}
    2314:	0015a112 	andseq	sl, r5, r2, lsl r1
    2318:	0cd70100 	ldfeqe	f0, [r7], {0}
    231c:	0000a734 	andeq	sl, r0, r4, lsr r7
    2320:	5a910200 	bpl	fe442b28 <APBAHBPrescTable+0xde43f2b8>
    2324:	00106112 	andseq	r6, r0, r2, lsl r1
    2328:	0cd70100 	ldfeqe	f0, [r7], {0}
    232c:	0000a74d 	andeq	sl, r0, sp, asr #14
    2330:	58910200 	ldmpl	r1, {r9}
    2334:	00101112 	andseq	r1, r0, r2, lsl r1
    2338:	0cd80100 	ldfeqe	f0, [r8], {0}
    233c:	0000a721 	andeq	sl, r0, r1, lsr #14
    2340:	56910200 	ldrpl	r0, [r1], r0, lsl #4
    2344:	000fea13 	andeq	lr, pc, r3, lsl sl	; <UNPREDICTABLE>
    2348:	0cda0100 	ldfeqe	f0, [sl], {0}
    234c:	0000a70c 	andeq	sl, r0, ip, lsl #14
    2350:	66910200 	ldrvs	r0, [r1], r0, lsl #4
    2354:	00126013 	andseq	r6, r2, r3, lsl r0
    2358:	0cda0100 	ldfeqe	f0, [sl], {0}
    235c:	0000a71a 	andeq	sl, r0, sl, lsl r7
    2360:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    2364:	706d7414 	rsbvc	r7, sp, r4, lsl r4
    2368:	0cda0100 	ldfeqe	f0, [sl], {0}
    236c:	0000a727 	andeq	sl, r0, r7, lsr #14
    2370:	62910200 	addsvs	r0, r1, #0, 4
    2374:	169b1100 	ldrne	r1, [fp], r0, lsl #2
    2378:	ad010000 	stcge	0, cr0, [r1, #-0]
    237c:	340e0d0c 	strcc	r0, [lr], #-3340	; 0xfffff2f4
    2380:	00d62000 	sbcseq	r2, r6, r0
    2384:	9c010000 	stcls	0, cr0, [r1], {-0}
    2388:	0000069b 	muleq	r0, fp, r6
    238c:	00136712 	andseq	r6, r3, r2, lsl r7
    2390:	0cad0100 	stfeqs	f0, [sp]
    2394:	00058525 	andeq	r8, r5, r5, lsr #10
    2398:	5c910200 	lfmpl	f0, 4, [r1], {0}
    239c:	0015a112 	andseq	sl, r5, r2, lsl r1
    23a0:	0cad0100 	stfeqs	f0, [sp]
    23a4:	0000a734 	andeq	sl, r0, r4, lsr r7
    23a8:	5a910200 	bpl	fe442bb0 <APBAHBPrescTable+0xde43f340>
    23ac:	00106112 	andseq	r6, r0, r2, lsl r1
    23b0:	0cad0100 	stfeqs	f0, [sp]
    23b4:	0000a74d 	andeq	sl, r0, sp, asr #14
    23b8:	58910200 	ldmpl	r1, {r9}
    23bc:	00101112 	andseq	r1, r0, r2, lsl r1
    23c0:	0cae0100 	stfeqs	f0, [lr]
    23c4:	0000a721 	andeq	sl, r0, r1, lsr #14
    23c8:	56910200 	ldrpl	r0, [r1], r0, lsl #4
    23cc:	000fe113 	andeq	lr, pc, r3, lsl r1	; <UNPREDICTABLE>
    23d0:	0cb00100 	ldfeqs	f0, [r0]
    23d4:	0000a70c 	andeq	sl, r0, ip, lsl #14
    23d8:	66910200 	ldrvs	r0, [r1], r0, lsl #4
    23dc:	00126013 	andseq	r6, r2, r3, lsl r0
    23e0:	0cb00100 	ldfeqs	f0, [r0]
    23e4:	0000a71a 	andeq	sl, r0, sl, lsl r7
    23e8:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    23ec:	706d7414 	rsbvc	r7, sp, r4, lsl r4
    23f0:	0cb00100 	ldfeqs	f0, [r0]
    23f4:	0000a727 	andeq	sl, r0, r7, lsr #14
    23f8:	62910200 	addsvs	r0, r1, #0, 4
    23fc:	16f21100 	ldrbtne	r1, [r2], r0, lsl #2
    2400:	84010000 	strhi	r0, [r1], #-0
    2404:	335c0d0c 	cmpcc	ip, #12, 26	; 0x300
    2408:	00b22000 	adcseq	r2, r2, r0
    240c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2410:	00000713 	andeq	r0, r0, r3, lsl r7
    2414:	00136712 	andseq	r6, r3, r2, lsl r7
    2418:	0c840100 	stfeqs	f0, [r4], {0}
    241c:	00058525 	andeq	r8, r5, r5, lsr #10
    2420:	5c910200 	lfmpl	f0, 4, [r1], {0}
    2424:	0015a112 	andseq	sl, r5, r2, lsl r1
    2428:	0c840100 	stfeqs	f0, [r4], {0}
    242c:	0000a734 	andeq	sl, r0, r4, lsr r7
    2430:	5a910200 	bpl	fe442c38 <APBAHBPrescTable+0xde43f3c8>
    2434:	00106112 	andseq	r6, r0, r2, lsl r1
    2438:	0c840100 	stfeqs	f0, [r4], {0}
    243c:	0000a74d 	andeq	sl, r0, sp, asr #14
    2440:	58910200 	ldmpl	r1, {r9}
    2444:	00101112 	andseq	r1, r0, r2, lsl r1
    2448:	0c850100 	stfeqs	f0, [r5], {0}
    244c:	0000a721 	andeq	sl, r0, r1, lsr #14
    2450:	56910200 	ldrpl	r0, [r1], r0, lsl #4
    2454:	000fe113 	andeq	lr, pc, r3, lsl r1	; <UNPREDICTABLE>
    2458:	0c870100 	stfeqs	f0, [r7], {0}
    245c:	0000a70c 	andeq	sl, r0, ip, lsl #14
    2460:	66910200 	ldrvs	r0, [r1], r0, lsl #4
    2464:	00126013 	andseq	r6, r2, r3, lsl r0
    2468:	0c870100 	stfeqs	f0, [r7], {0}
    246c:	0000a71a 	andeq	sl, r0, sl, lsl r7
    2470:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    2474:	18671600 	stmdane	r7!, {r9, sl, ip}^
    2478:	65010000 	strvs	r0, [r1, #-0]
    247c:	333c060c 	teqcc	ip, #12, 12	; 0xc00000
    2480:	00202000 	eoreq	r2, r0, r0
    2484:	9c010000 	stcls	0, cr0, [r1], {-0}
    2488:	0000074b 	andeq	r0, r0, fp, asr #14
    248c:	00136712 	andseq	r6, r3, r2, lsl r7
    2490:	0c650100 	stfeqe	f0, [r5], #-0
    2494:	00058523 	andeq	r8, r5, r3, lsr #10
    2498:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    249c:	00152512 	andseq	r2, r5, r2, lsl r5
    24a0:	0c650100 	stfeqe	f0, [r5], #-0
    24a4:	0000a732 	andeq	sl, r0, r2, lsr r7
    24a8:	72910200 	addsvc	r0, r1, #0, 4
    24ac:	18831600 	stmne	r3, {r9, sl, ip}
    24b0:	32010000 	andcc	r0, r1, #0
    24b4:	32fc060c 	rscscc	r0, ip, #12, 12	; 0xc00000
    24b8:	00402000 	subeq	r2, r0, r0
    24bc:	9c010000 	stcls	0, cr0, [r1], {-0}
    24c0:	00000783 	andeq	r0, r0, r3, lsl #15
    24c4:	00136712 	andseq	r6, r3, r2, lsl r7
    24c8:	0c320100 	ldfeqs	f0, [r2], #-0
    24cc:	00058528 	andeq	r8, r5, r8, lsr #10
    24d0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    24d4:	00023f12 	andeq	r3, r2, r2, lsl pc
    24d8:	0c320100 	ldfeqs	f0, [r2], #-0
    24dc:	0001453e 	andeq	r4, r1, lr, lsr r5
    24e0:	73910200 	orrsvc	r0, r1, #0, 4
    24e4:	10761600 	rsbsne	r1, r6, r0, lsl #12
    24e8:	fe010000 	cdp2	0, 0, cr0, cr1, cr0, {0}
    24ec:	3226060b 	eorcc	r0, r6, #11534336	; 0xb00000
    24f0:	00d62000 	sbcseq	r2, r6, r0
    24f4:	9c010000 	stcls	0, cr0, [r1], {-0}
    24f8:	0000080b 	andeq	r0, r0, fp, lsl #16
    24fc:	00136712 	andseq	r6, r3, r2, lsl r7
    2500:	0bfe0100 	bleq	fff82908 <APBAHBPrescTable+0xdff7f098>
    2504:	0005852e 	andeq	r8, r5, lr, lsr #10
    2508:	5c910200 	lfmpl	f0, 4, [r1], {0}
    250c:	00136c12 	andseq	r6, r3, r2, lsl ip
    2510:	0bfe0100 	bleq	fff82918 <APBAHBPrescTable+0xdff7f0a8>
    2514:	0000a73d 	andeq	sl, r0, sp, lsr r7
    2518:	5a910200 	bpl	fe442d20 <APBAHBPrescTable+0xde43f4b0>
    251c:	0010b812 	andseq	fp, r0, r2, lsl r8
    2520:	0bff0100 	bleq	fffc2928 <APBAHBPrescTable+0xdffbf0b8>
    2524:	0000a72a 	andeq	sl, r0, sl, lsr #14
    2528:	58910200 	ldmpl	r1, {r9}
    252c:	000faf12 	andeq	sl, pc, r2, lsl pc	; <UNPREDICTABLE>
    2530:	0bff0100 	bleq	fffc2938 <APBAHBPrescTable+0xdffbf0c8>
    2534:	0000a744 	andeq	sl, r0, r4, asr #14
    2538:	56910200 	ldrpl	r0, [r1], r0, lsl #4
    253c:	00142913 	andseq	r2, r4, r3, lsl r9
    2540:	0c010100 	stfeqs	f0, [r1], {-0}
    2544:	0000a70c 	andeq	sl, r0, ip, lsl #14
    2548:	66910200 	ldrvs	r0, [r1], r0, lsl #4
    254c:	000fe113 	andeq	lr, pc, r3, lsl r1	; <UNPREDICTABLE>
    2550:	0c020100 	stfeqs	f0, [r2], {-0}
    2554:	0000a70c 	andeq	sl, r0, ip, lsl #14
    2558:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    255c:	00126013 	andseq	r6, r2, r3, lsl r0
    2560:	0c030100 	stfeqs	f0, [r3], {-0}
    2564:	0000a70c 	andeq	sl, r0, ip, lsl #14
    2568:	62910200 	addsvs	r0, r1, #0, 4
    256c:	194c1600 	stmdbne	ip, {r9, sl, ip}^
    2570:	c4010000 	strgt	r0, [r1], #-0
    2574:	31b4060b 			; <UNDEFINED> instruction: 0x31b4060b
    2578:	00722000 	rsbseq	r2, r2, r0
    257c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2580:	00000873 	andeq	r0, r0, r3, ror r8
    2584:	00136712 	andseq	r6, r3, r2, lsl r7
    2588:	0bc40100 	bleq	ff102990 <APBAHBPrescTable+0xdf0ff120>
    258c:	00058521 	andeq	r8, r5, r1, lsr #10
    2590:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    2594:	00146f12 	andseq	r6, r4, r2, lsl pc
    2598:	0bc40100 	bleq	ff1029a0 <APBAHBPrescTable+0xdf0ff130>
    259c:	0000a730 	andeq	sl, r0, r0, lsr r7
    25a0:	62910200 	addsvs	r0, r1, #0, 4
    25a4:	00143112 	andseq	r3, r4, r2, lsl r1
    25a8:	0bc50100 	bleq	ff1429b0 <APBAHBPrescTable+0xdf13f140>
    25ac:	0000a71d 	andeq	sl, r0, sp, lsl r7
    25b0:	60910200 	addsvs	r0, r1, r0, lsl #4
    25b4:	0018a812 	andseq	sl, r8, r2, lsl r8
    25b8:	0bc50100 	bleq	ff1429c0 <APBAHBPrescTable+0xdf13f150>
    25bc:	0000a73a 	andeq	sl, r0, sl, lsr r7
    25c0:	5e910200 	cdppl	2, 9, cr0, cr1, cr0, {0}
    25c4:	00142913 	andseq	r2, r4, r3, lsl r9
    25c8:	0bc70100 	bleq	ff1c29d0 <APBAHBPrescTable+0xdf1bf160>
    25cc:	0000a70c 	andeq	sl, r0, ip, lsl #14
    25d0:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
    25d4:	13081600 	movwne	r1, #34304	; 0x8600
    25d8:	a6010000 	strge	r0, [r1], -r0
    25dc:	317c060b 	cmncc	ip, fp, lsl #12
    25e0:	00382000 	eorseq	r2, r8, r0
    25e4:	9c010000 	stcls	0, cr0, [r1], {-0}
    25e8:	000008ab 	andeq	r0, r0, fp, lsr #17
    25ec:	00136712 	andseq	r6, r3, r2, lsl r7
    25f0:	0ba60100 	bleq	fe9829f8 <APBAHBPrescTable+0xde97f188>
    25f4:	0005852d 	andeq	r8, r5, sp, lsr #10
    25f8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    25fc:	0012e012 	andseq	lr, r2, r2, lsl r0
    2600:	0ba60100 	bleq	fe982a08 <APBAHBPrescTable+0xde97f198>
    2604:	0000a73c 	andeq	sl, r0, ip, lsr r7
    2608:	72910200 	addsvc	r0, r1, #0, 4
    260c:	12f41600 	rscsne	r1, r4, #0, 12
    2610:	8f010000 	svchi	0x00010000
    2614:	3144060b 	cmpcc	r4, fp, lsl #12
    2618:	00382000 	eorseq	r2, r8, r0
    261c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2620:	000008e3 	andeq	r0, r0, r3, ror #17
    2624:	00136712 	andseq	r6, r3, r2, lsl r7
    2628:	0b8f0100 	bleq	fe3c2a30 <APBAHBPrescTable+0xde3bf1c0>
    262c:	00058527 	andeq	r8, r5, r7, lsr #10
    2630:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2634:	0017c012 	andseq	ip, r7, r2, lsl r0
    2638:	0b8f0100 	bleq	fe3c2a40 <APBAHBPrescTable+0xde3bf1d0>
    263c:	0000a736 	andeq	sl, r0, r6, lsr r7
    2640:	72910200 	addsvc	r0, r1, #0, 4
    2644:	13a61600 			; <UNDEFINED> instruction: 0x13a61600
    2648:	77010000 	strvc	r0, [r1, -r0]
    264c:	310c060b 	tstcc	ip, fp, lsl #12
    2650:	00382000 	eorseq	r2, r8, r0
    2654:	9c010000 	stcls	0, cr0, [r1], {-0}
    2658:	0000091b 	andeq	r0, r0, fp, lsl r9
    265c:	00136712 	andseq	r6, r3, r2, lsl r7
    2660:	0b770100 	bleq	1dc2a68 <startup-0x1e23d598>
    2664:	0005852b 	andeq	r8, r5, fp, lsr #10
    2668:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    266c:	000f6312 	andeq	r6, pc, r2, lsl r3	; <UNPREDICTABLE>
    2670:	0b770100 	bleq	1dc2a78 <startup-0x1e23d588>
    2674:	0000a73a 	andeq	sl, r0, sl, lsr r7
    2678:	72910200 	addsvc	r0, r1, #0, 4
    267c:	0ffa1600 	svceq	0x00fa1600
    2680:	4c010000 	stcmi	0, cr0, [r1], {-0}
    2684:	30c4060b 	sbccc	r0, r4, fp, lsl #12
    2688:	00482000 	subeq	r2, r8, r0
    268c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2690:	00000963 	andeq	r0, r0, r3, ror #18
    2694:	00136712 	andseq	r6, r3, r2, lsl r7
    2698:	0b4c0100 	bleq	1302aa0 <startup-0x1ecfd560>
    269c:	0005852a 	andeq	r8, r5, sl, lsr #10
    26a0:	6c910200 	lfmvs	f0, 4, [r1], {0}
    26a4:	000f4c12 	andeq	r4, pc, r2, lsl ip	; <UNPREDICTABLE>
    26a8:	0b4c0100 	bleq	1302ab0 <startup-0x1ecfd550>
    26ac:	0000a739 	andeq	sl, r0, r9, lsr r7
    26b0:	6a910200 	bvs	fe442eb8 <APBAHBPrescTable+0xde43f648>
    26b4:	00142913 	andseq	r2, r4, r3, lsl r9
    26b8:	0b4e0100 	bleq	1382ac0 <startup-0x1ec7d540>
    26bc:	0000a70c 	andeq	sl, r0, ip, lsl #14
    26c0:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    26c4:	16da1700 	ldrbne	r1, [sl], r0, lsl #14
    26c8:	05010000 	streq	r0, [r1, #-0]
    26cc:	3072060b 	rsbscc	r0, r2, fp, lsl #12
    26d0:	00522000 	subseq	r2, r2, r0
    26d4:	9c010000 	stcls	0, cr0, [r1], {-0}
    26d8:	000009bb 			; <UNDEFINED> instruction: 0x000009bb
    26dc:	00136712 	andseq	r6, r3, r2, lsl r7
    26e0:	0b050100 	bleq	142ae8 <startup-0x1febd518>
    26e4:	0005852b 	andeq	r8, r5, fp, lsr #10
    26e8:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    26ec:	00146f12 	andseq	r6, r4, r2, lsl pc
    26f0:	0b050100 	bleq	142af8 <startup-0x1febd508>
    26f4:	0000a73a 	andeq	sl, r0, sl, lsr r7
    26f8:	62910200 	addsvs	r0, r1, #0, 4
    26fc:	00143112 	andseq	r3, r4, r2, lsl r1
    2700:	0b060100 	bleq	182b08 <startup-0x1fe7d4f8>
    2704:	0000a727 	andeq	sl, r0, r7, lsr #14
    2708:	60910200 	addsvs	r0, r1, r0, lsl #4
    270c:	0018a812 	andseq	sl, r8, r2, lsl r8
    2710:	0b060100 	bleq	182b18 <startup-0x1fe7d4e8>
    2714:	0000a744 	andeq	sl, r0, r4, asr #14
    2718:	5e910200 	cdppl	2, 9, cr0, cr1, cr0, {0}
    271c:	11261700 			; <UNDEFINED> instruction: 0x11261700
    2720:	d6010000 	strle	r0, [r1], -r0
    2724:	2fe6060a 	svccs	0x00e6060a
    2728:	008c2000 	addeq	r2, ip, r0
    272c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2730:	00000a23 	andeq	r0, r0, r3, lsr #20
    2734:	00136712 	andseq	r6, r3, r2, lsl r7
    2738:	0ad60100 	beq	ff582b40 <APBAHBPrescTable+0xdf57f2d0>
    273c:	0005852b 	andeq	r8, r5, fp, lsr #10
    2740:	5c910200 	lfmpl	f0, 4, [r1], {0}
    2744:	00146f12 	andseq	r6, r4, r2, lsl pc
    2748:	0ad60100 	beq	ff582b50 <APBAHBPrescTable+0xdf57f2e0>
    274c:	0000a73a 	andeq	sl, r0, sl, lsr r7
    2750:	5a910200 	bpl	fe442f58 <APBAHBPrescTable+0xde43f6e8>
    2754:	00143112 	andseq	r3, r4, r2, lsl r1
    2758:	0ad70100 	beq	ff5c2b60 <APBAHBPrescTable+0xdf5bf2f0>
    275c:	0000a726 	andeq	sl, r0, r6, lsr #14
    2760:	58910200 	ldmpl	r1, {r9}
    2764:	0018a812 	andseq	sl, r8, r2, lsl r8
    2768:	0ad70100 	beq	ff5c2b70 <APBAHBPrescTable+0xdf5bf300>
    276c:	0000a743 	andeq	sl, r0, r3, asr #14
    2770:	56910200 	ldrpl	r0, [r1], r0, lsl #4
    2774:	00142913 	andseq	r2, r4, r3, lsl r9
    2778:	0ad90100 	beq	ff642b80 <APBAHBPrescTable+0xdf63f310>
    277c:	0000a70c 	andeq	sl, r0, ip, lsl #14
    2780:	66910200 	ldrvs	r0, [r1], r0, lsl #4
    2784:	15b01700 	ldrne	r1, [r0, #1792]!	; 0x700
    2788:	ae010000 	cdpge	0, 0, cr0, cr1, cr0, {0}
    278c:	2f6a060a 	svccs	0x006a060a
    2790:	007c2000 	rsbseq	r2, ip, r0
    2794:	9c010000 	stcls	0, cr0, [r1], {-0}
    2798:	00000a7b 	andeq	r0, r0, fp, ror sl
    279c:	00136712 	andseq	r6, r3, r2, lsl r7
    27a0:	0aae0100 	beq	feb82ba8 <APBAHBPrescTable+0xdeb7f338>
    27a4:	0005852e 	andeq	r8, r5, lr, lsr #10
    27a8:	6c910200 	lfmvs	f0, 4, [r1], {0}
    27ac:	00166f12 	andseq	r6, r6, r2, lsl pc
    27b0:	0aae0100 	beq	feb82bb8 <APBAHBPrescTable+0xdeb7f348>
    27b4:	0000a73d 	andeq	sl, r0, sp, lsr r7
    27b8:	6a910200 	bvs	fe442fc0 <APBAHBPrescTable+0xde43f750>
    27bc:	0015a112 	andseq	sl, r5, r2, lsl r1
    27c0:	0aaf0100 	beq	febc2bc8 <APBAHBPrescTable+0xdebbf358>
    27c4:	0000a72a 	andeq	sl, r0, sl, lsr #14
    27c8:	68910200 	ldmvs	r1, {r9}
    27cc:	00101512 	andseq	r1, r0, r2, lsl r5
    27d0:	0aaf0100 	beq	febc2bd8 <APBAHBPrescTable+0xdebbf368>
    27d4:	0000a743 	andeq	sl, r0, r3, asr #14
    27d8:	66910200 	ldrvs	r0, [r1], r0, lsl #4
    27dc:	161d1700 	ldrne	r1, [sp], -r0, lsl #14
    27e0:	90010000 	andls	r0, r1, r0
    27e4:	2f36060a 	svccs	0x0036060a
    27e8:	00342000 	eorseq	r2, r4, r0
    27ec:	9c010000 	stcls	0, cr0, [r1], {-0}
    27f0:	00000ab3 			; <UNDEFINED> instruction: 0x00000ab3
    27f4:	00136712 	andseq	r6, r3, r2, lsl r7
    27f8:	0a900100 	beq	fe402c00 <APBAHBPrescTable+0xde3ff390>
    27fc:	0005852f 	andeq	r8, r5, pc, lsr #10
    2800:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2804:	000f4c12 	andeq	r4, pc, r2, lsl ip	; <UNPREDICTABLE>
    2808:	0a900100 	beq	fe402c10 <APBAHBPrescTable+0xde3ff3a0>
    280c:	0000a73e 	andeq	sl, r0, lr, lsr r7
    2810:	72910200 	addsvc	r0, r1, #0, 4
    2814:	101e1600 	andsne	r1, lr, r0, lsl #12
    2818:	7b010000 	blvc	42820 <startup-0x1ffbd7e0>
    281c:	2f16060a 	svccs	0x0016060a
    2820:	00202000 	eoreq	r2, r0, r0
    2824:	9c010000 	stcls	0, cr0, [r1], {-0}
    2828:	00000adb 	ldrdeq	r0, [r0], -fp
    282c:	00136712 	andseq	r6, r3, r2, lsl r7
    2830:	0a7b0100 	beq	1ec2c38 <startup-0x1e13d3c8>
    2834:	0005852b 	andeq	r8, r5, fp, lsr #10
    2838:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    283c:	11ec1600 	mvnne	r1, r0, lsl #12
    2840:	54010000 	strpl	r0, [r1], #-0
    2844:	2ed6060a 	cdpcs	6, 13, cr0, cr6, cr10, {0}
    2848:	00402000 	subeq	r2, r0, r0
    284c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2850:	00000b13 	andeq	r0, r0, r3, lsl fp
    2854:	00136712 	andseq	r6, r3, r2, lsl r7
    2858:	0a540100 	beq	1502c60 <startup-0x1eafd3a0>
    285c:	00058523 	andeq	r8, r5, r3, lsr #10
    2860:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2864:	00023f12 	andeq	r3, r2, r2, lsl pc
    2868:	0a540100 	beq	1502c70 <startup-0x1eafd390>
    286c:	00014539 	andeq	r4, r1, r9, lsr r5
    2870:	73910200 	orrsvc	r0, r1, #0, 4
    2874:	0f411600 	svceq	0x00411600
    2878:	3a010000 	bcc	42880 <startup-0x1ffbd780>
    287c:	2e84060a 	cdpcs	6, 8, cr0, cr4, cr10, {0}
    2880:	00522000 	subseq	r2, r2, r0
    2884:	9c010000 	stcls	0, cr0, [r1], {-0}
    2888:	00000b5b 	andeq	r0, r0, fp, asr fp
    288c:	00136712 	andseq	r6, r3, r2, lsl r7
    2890:	0a3a0100 	beq	e82c98 <startup-0x1f17d368>
    2894:	0005851e 	andeq	r8, r5, lr, lsl r5
    2898:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    289c:	0013ec12 	andseq	lr, r3, r2, lsl ip
    28a0:	0a3a0100 	beq	e82ca8 <startup-0x1f17d358>
    28a4:	0000a72d 	andeq	sl, r0, sp, lsr #14
    28a8:	72910200 	addsvc	r0, r1, #0, 4
    28ac:	00023f12 	andeq	r3, r2, r2, lsl pc
    28b0:	0a3a0100 	beq	e82cb8 <startup-0x1f17d348>
    28b4:	0001454c 	andeq	r4, r1, ip, asr #10
    28b8:	71910200 	orrsvc	r0, r1, r0, lsl #4
    28bc:	15561600 	ldrbne	r1, [r6, #-1536]	; 0xfffffa00
    28c0:	1f010000 	svcne	0x00010000
    28c4:	2e52060a 	cdpcs	6, 5, cr0, cr2, cr10, {0}
    28c8:	00322000 	eorseq	r2, r2, r0
    28cc:	9c010000 	stcls	0, cr0, [r1], {-0}
    28d0:	00000ba3 	andeq	r0, r0, r3, lsr #23
    28d4:	00136712 	andseq	r6, r3, r2, lsl r7
    28d8:	0a1f0100 	beq	7c2ce0 <startup-0x1f83d320>
    28dc:	00058521 	andeq	r8, r5, r1, lsr #10
    28e0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    28e4:	00150512 	andseq	r0, r5, r2, lsl r5
    28e8:	0a1f0100 	beq	7c2cf0 <startup-0x1f83d310>
    28ec:	0000a730 	andeq	sl, r0, r0, lsr r7
    28f0:	72910200 	addsvc	r0, r1, #0, 4
    28f4:	00121112 	andseq	r1, r2, r2, lsl r1
    28f8:	0a1f0100 	beq	7c2d00 <startup-0x1f83d300>
    28fc:	0000a746 	andeq	sl, r0, r6, asr #14
    2900:	70910200 	addsvc	r0, r1, r0, lsl #4
    2904:	17251600 	strne	r1, [r5, -r0, lsl #12]!
    2908:	fa010000 	blx	42910 <startup-0x1ffbd6f0>
    290c:	2e300609 	cfmsuba32cs	mvax0, mvax0, mvfx0, mvfx9
    2910:	00222000 	eoreq	r2, r2, r0
    2914:	9c010000 	stcls	0, cr0, [r1], {-0}
    2918:	00000bdb 	ldrdeq	r0, [r0], -fp
    291c:	00136712 	andseq	r6, r3, r2, lsl r7
    2920:	09fa0100 	ldmibeq	sl!, {r8}^
    2924:	00058529 	andeq	r8, r5, r9, lsr #10
    2928:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    292c:	00111f12 	andseq	r1, r1, r2, lsl pc
    2930:	09fa0100 	ldmibeq	sl!, {r8}^
    2934:	0000a738 	andeq	sl, r0, r8, lsr r7
    2938:	72910200 	addsvc	r0, r1, #0, 4
    293c:	152f1800 	strne	r1, [pc, #-2048]!	; 2144 <startup-0x1fffdebc>
    2940:	d1010000 	mrsle	r0, (UNDEF: 1)
    2944:	011c0a09 	tsteq	ip, r9, lsl #20
    2948:	2dbc0000 	ldccs	0, cr0, [ip]
    294c:	00742000 	rsbseq	r2, r4, r0
    2950:	9c010000 	stcls	0, cr0, [r1], {-0}
    2954:	00000c47 	andeq	r0, r0, r7, asr #24
    2958:	00136712 	andseq	r6, r3, r2, lsl r7
    295c:	09d10100 	ldmibeq	r1, {r8}^
    2960:	00058527 	andeq	r8, r5, r7, lsr #10
    2964:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    2968:	00111f12 	andseq	r1, r1, r2, lsl pc
    296c:	09d10100 	ldmibeq	r1, {r8}^
    2970:	0000a736 	andeq	sl, r0, r6, lsr r7
    2974:	62910200 	addsvs	r0, r1, #0, 4
    2978:	00032e13 	andeq	r2, r3, r3, lsl lr
    297c:	09d30100 	ldmibeq	r3, {r8}^
    2980:	00011c0c 	andeq	r1, r1, ip, lsl #24
    2984:	6f910200 	svcvs	0x00910200
    2988:	00032f13 	andeq	r2, r3, r3, lsl pc
    298c:	09d40100 	ldmibeq	r4, {r8}^
    2990:	0000a70c 	andeq	sl, r0, ip, lsl #14
    2994:	6c910200 	lfmvs	f0, 4, [r1], {0}
    2998:	00184813 	andseq	r4, r8, r3, lsl r8
    299c:	09d40100 	ldmibeq	r4, {r8}^
    29a0:	0000a71c 	andeq	sl, r0, ip, lsl r7
    29a4:	6a910200 	bvs	fe4431ac <APBAHBPrescTable+0xde43f93c>
    29a8:	12241600 	eorne	r1, r4, #0, 12
    29ac:	b5010000 	strlt	r0, [r1, #-0]
    29b0:	2d9a0609 	ldccs	6, cr0, [sl, #36]	; 0x24
    29b4:	00222000 	eoreq	r2, r2, r0
    29b8:	9c010000 	stcls	0, cr0, [r1], {-0}
    29bc:	00000c7f 	andeq	r0, r0, pc, ror ip
    29c0:	00136712 	andseq	r6, r3, r2, lsl r7
    29c4:	09b50100 	ldmibeq	r5!, {r8}
    29c8:	00058521 	andeq	r8, r5, r1, lsr #10
    29cc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    29d0:	000f9612 	andeq	r9, pc, r2, lsl r6	; <UNPREDICTABLE>
    29d4:	09b50100 	ldmibeq	r5!, {r8}
    29d8:	0000a730 	andeq	sl, r0, r0, lsr r7
    29dc:	72910200 	addsvc	r0, r1, #0, 4
    29e0:	13221800 			; <UNDEFINED> instruction: 0x13221800
    29e4:	8b010000 	blhi	429ec <startup-0x1ffbd614>
    29e8:	010f0c09 	tsteq	pc, r9, lsl #24
    29ec:	2d540000 	ldclcs	0, cr0, [r4, #-0]
    29f0:	00462000 	subeq	r2, r6, r0
    29f4:	9c010000 	stcls	0, cr0, [r1], {-0}
    29f8:	00000ccb 	andeq	r0, r0, fp, asr #25
    29fc:	00136712 	andseq	r6, r3, r2, lsl r7
    2a00:	098b0100 	stmibeq	fp, {r8}
    2a04:	0005852b 	andeq	r8, r5, fp, lsr #10
    2a08:	6c910200 	lfmvs	f0, 4, [r1], {0}
    2a0c:	000f9612 	andeq	r9, pc, r2, lsl r6	; <UNPREDICTABLE>
    2a10:	098b0100 	stmibeq	fp, {r8}
    2a14:	0000a73a 	andeq	sl, r0, sl, lsr r7
    2a18:	6a910200 	bvs	fe443220 <APBAHBPrescTable+0xde43f9b0>
    2a1c:	00032e13 	andeq	r2, r3, r3, lsl lr
    2a20:	098d0100 	stmibeq	sp, {r8}
    2a24:	00011c0c 	andeq	r1, r1, ip, lsl #24
    2a28:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    2a2c:	10a61600 	adcne	r1, r6, r0, lsl #12
    2a30:	6a010000 	bvs	42a38 <startup-0x1ffbd5c8>
    2a34:	2d360609 	ldccs	6, cr0, [r6, #-36]!	; 0xffffffdc
    2a38:	001e2000 	andseq	r2, lr, r0
    2a3c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2a40:	00000d03 	andeq	r0, r0, r3, lsl #26
    2a44:	00136712 	andseq	r6, r3, r2, lsl r7
    2a48:	096a0100 	stmdbeq	sl!, {r8}^
    2a4c:	00058525 	andeq	r8, r5, r5, lsr #10
    2a50:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2a54:	00159112 	andseq	r9, r5, r2, lsl r1
    2a58:	096a0100 	stmdbeq	sl!, {r8}^
    2a5c:	0000a734 	andeq	sl, r0, r4, lsr r7
    2a60:	72910200 	addsvc	r0, r1, #0, 4
    2a64:	15d91600 	ldrbne	r1, [r9, #1536]	; 0x600
    2a68:	44010000 	strmi	r0, [r1], #-0
    2a6c:	2ce40609 	stclcs	6, cr0, [r4], #36	; 0x24
    2a70:	00522000 	subseq	r2, r2, r0
    2a74:	9c010000 	stcls	0, cr0, [r1], {-0}
    2a78:	00000d4b 	andeq	r0, r0, fp, asr #26
    2a7c:	00136712 	andseq	r6, r3, r2, lsl r7
    2a80:	09440100 	stmdbeq	r4, {r8}^
    2a84:	00058520 	andeq	r8, r5, r0, lsr #10
    2a88:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2a8c:	00111f12 	andseq	r1, r1, r2, lsl pc
    2a90:	09440100 	stmdbeq	r4, {r8}^
    2a94:	0000a72f 	andeq	sl, r0, pc, lsr #14
    2a98:	72910200 	addsvc	r0, r1, #0, 4
    2a9c:	00023f12 	andeq	r3, r2, r2, lsl pc
    2aa0:	09440100 	stmdbeq	r4, {r8}^
    2aa4:	00014547 	andeq	r4, r1, r7, asr #10
    2aa8:	71910200 	orrsvc	r0, r1, r0, lsl #4
    2aac:	18121600 	ldmdane	r2, {r9, sl, ip}
    2ab0:	0b010000 	bleq	42ab8 <startup-0x1ffbd548>
    2ab4:	2ca40609 	stccs	6, cr0, [r4], #36	; 0x24
    2ab8:	00402000 	subeq	r2, r0, r0
    2abc:	9c010000 	stcls	0, cr0, [r1], {-0}
    2ac0:	00000d83 	andeq	r0, r0, r3, lsl #27
    2ac4:	00136712 	andseq	r6, r3, r2, lsl r7
    2ac8:	090b0100 	stmdbeq	fp, {r8}
    2acc:	00058528 	andeq	r8, r5, r8, lsr #10
    2ad0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2ad4:	00023f12 	andeq	r3, r2, r2, lsl pc
    2ad8:	090b0100 	stmdbeq	fp, {r8}
    2adc:	0001453e 	andeq	r4, r1, lr, lsr r5
    2ae0:	73910200 	orrsvc	r0, r1, #0, 4
    2ae4:	12521600 	subsne	r1, r2, #0, 12
    2ae8:	f2010000 	vhadd.s8	d0, d1, d0
    2aec:	2c640608 	stclcs	6, cr0, [r4], #-32	; 0xffffffe0
    2af0:	00402000 	subeq	r2, r0, r0
    2af4:	9c010000 	stcls	0, cr0, [r1], {-0}
    2af8:	00000dbb 			; <UNDEFINED> instruction: 0x00000dbb
    2afc:	00136712 	andseq	r6, r3, r2, lsl r7
    2b00:	08f20100 	ldmeq	r2!, {r8}^
    2b04:	00058521 	andeq	r8, r5, r1, lsr #10
    2b08:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2b0c:	00023f12 	andeq	r3, r2, r2, lsl pc
    2b10:	08f20100 	ldmeq	r2!, {r8}^
    2b14:	00014537 	andeq	r4, r1, r7, lsr r5
    2b18:	73910200 	orrsvc	r0, r1, #0, 4
    2b1c:	191f1600 	ldmdbne	pc, {r9, sl, ip}	; <UNPREDICTABLE>
    2b20:	d9010000 	stmdble	r1, {}	; <UNPREDICTABLE>
    2b24:	2c160608 	ldccs	6, cr0, [r6], {8}
    2b28:	004e2000 	subeq	r2, lr, r0
    2b2c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2b30:	00000df3 	strdeq	r0, [r0], -r3
    2b34:	00136712 	andseq	r6, r3, r2, lsl r7
    2b38:	08d90100 	ldmeq	r9, {r8}^
    2b3c:	00058526 	andeq	r8, r5, r6, lsr #10
    2b40:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2b44:	00023f12 	andeq	r3, r2, r2, lsl pc
    2b48:	08d90100 	ldmeq	r9, {r8}^
    2b4c:	0001453c 	andeq	r4, r1, ip, lsr r5
    2b50:	73910200 	orrsvc	r0, r1, #0, 4
    2b54:	14441600 	strbne	r1, [r4], #-1536	; 0xfffffa00
    2b58:	c6010000 	strgt	r0, [r1], -r0
    2b5c:	2bdc0608 	blcs	ff704384 <APBAHBPrescTable+0xdf700b14>
    2b60:	003a2000 	eorseq	r2, sl, r0
    2b64:	9c010000 	stcls	0, cr0, [r1], {-0}
    2b68:	00000e1b 	andeq	r0, r0, fp, lsl lr
    2b6c:	00168812 	andseq	r8, r6, r2, lsl r8
    2b70:	08c60100 	stmiaeq	r6, {r8}^
    2b74:	000e1b2e 	andeq	r1, lr, lr, lsr #22
    2b78:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2b7c:	f1041500 			; <UNDEFINED> instruction: 0xf1041500
    2b80:	16000004 	strne	r0, [r0], -r4
    2b84:	000015e6 	andeq	r1, r0, r6, ror #11
    2b88:	0608ad01 	streq	sl, [r8], -r1, lsl #26
    2b8c:	20002b90 	mulcs	r0, r0, fp
    2b90:	0000004c 	andeq	r0, r0, ip, asr #32
    2b94:	0e599c01 	cdpeq	12, 5, cr9, cr9, cr1, {0}
    2b98:	67120000 	ldrvs	r0, [r2, -r0]
    2b9c:	01000013 	tsteq	r0, r3, lsl r0
    2ba0:	852208ad 	strhi	r0, [r2, #-2221]!	; 0xfffff753
    2ba4:	02000005 	andeq	r0, r0, #5
    2ba8:	88127491 	ldmdahi	r2, {r0, r4, r7, sl, ip, sp, lr}
    2bac:	01000016 	tsteq	r0, r6, lsl r0
    2bb0:	1b3d08ad 	blne	f44e6c <startup-0x1f0bb194>
    2bb4:	0200000e 	andeq	r0, r0, #14
    2bb8:	16007091 			; <UNDEFINED> instruction: 0x16007091
    2bbc:	0000198c 	andeq	r1, r0, ip, lsl #19
    2bc0:	06087801 	streq	r7, [r8], -r1, lsl #16
    2bc4:	20002b50 	andcs	r2, r0, r0, asr fp
    2bc8:	00000040 	andeq	r0, r0, r0, asr #32
    2bcc:	0e919c01 	cdpeq	12, 9, cr9, cr1, cr1, {0}
    2bd0:	67120000 	ldrvs	r0, [r2, -r0]
    2bd4:	01000013 	tsteq	r0, r3, lsl r0
    2bd8:	85270878 	strhi	r0, [r7, #-2168]!	; 0xfffff788
    2bdc:	02000005 	andeq	r0, r0, #5
    2be0:	32127491 	andscc	r7, r2, #-1862270976	; 0x91000000
    2be4:	01000019 	tsteq	r0, r9, lsl r0
    2be8:	a7360878 			; <UNDEFINED> instruction: 0xa7360878
    2bec:	02000000 	andeq	r0, r0, #0
    2bf0:	16007291 			; <UNDEFINED> instruction: 0x16007291
    2bf4:	00001705 	andeq	r1, r0, r5, lsl #14
    2bf8:	06086001 	streq	r6, [r8], -r1
    2bfc:	20002b18 	andcs	r2, r0, r8, lsl fp
    2c00:	00000038 	andeq	r0, r0, r8, lsr r0
    2c04:	0ec99c01 	cdpeq	12, 12, cr9, cr9, cr1, {0}
    2c08:	67120000 	ldrvs	r0, [r2, -r0]
    2c0c:	01000013 	tsteq	r0, r3, lsl r0
    2c10:	85270860 	strhi	r0, [r7, #-2144]!	; 0xfffff7a0
    2c14:	02000005 	andeq	r0, r0, #5
    2c18:	32127491 	andscc	r7, r2, #-1862270976	; 0x91000000
    2c1c:	01000019 	tsteq	r0, r9, lsl r0
    2c20:	a7360860 	ldrge	r0, [r6, -r0, ror #16]!
    2c24:	02000000 	andeq	r0, r0, #0
    2c28:	16007291 			; <UNDEFINED> instruction: 0x16007291
    2c2c:	000015f5 	strdeq	r1, [r0], -r5
    2c30:	06084801 	streq	r4, [r8], -r1, lsl #16
    2c34:	20002ad8 	ldrdcs	r2, [r0], -r8
    2c38:	00000040 	andeq	r0, r0, r0, asr #32
    2c3c:	0f019c01 	svceq	0x00019c01
    2c40:	67120000 	ldrvs	r0, [r2, -r0]
    2c44:	01000013 	tsteq	r0, r3, lsl r0
    2c48:	85270848 	strhi	r0, [r7, #-2120]!	; 0xfffff7b8
    2c4c:	02000005 	andeq	r0, r0, #5
    2c50:	32127491 	andscc	r7, r2, #-1862270976	; 0x91000000
    2c54:	01000019 	tsteq	r0, r9, lsl r0
    2c58:	a7360848 	ldrge	r0, [r6, -r8, asr #16]!
    2c5c:	02000000 	andeq	r0, r0, #0
    2c60:	16007291 			; <UNDEFINED> instruction: 0x16007291
    2c64:	000013be 			; <UNDEFINED> instruction: 0x000013be
    2c68:	06082f01 	streq	r2, [r8], -r1, lsl #30
    2c6c:	20002aa0 	andcs	r2, r0, r0, lsr #21
    2c70:	00000038 	andeq	r0, r0, r8, lsr r0
    2c74:	0f399c01 	svceq	0x00399c01
    2c78:	67120000 	ldrvs	r0, [r2, -r0]
    2c7c:	01000013 	tsteq	r0, r3, lsl r0
    2c80:	8527082f 	strhi	r0, [r7, #-2095]!	; 0xfffff7d1
    2c84:	02000005 	andeq	r0, r0, #5
    2c88:	32127491 	andscc	r7, r2, #-1862270976	; 0x91000000
    2c8c:	01000019 	tsteq	r0, r9, lsl r0
    2c90:	a736082f 	ldrge	r0, [r6, -pc, lsr #16]!
    2c94:	02000000 	andeq	r0, r0, #0
    2c98:	18007291 	stmdane	r0, {r0, r4, r7, r9, ip, sp, lr}
    2c9c:	000011a3 	andeq	r1, r0, r3, lsr #3
    2ca0:	0a081b01 	beq	2098ac <startup-0x1fdf6754>
    2ca4:	000000c9 	andeq	r0, r0, r9, asr #1
    2ca8:	20002a8c 	andcs	r2, r0, ip, lsl #21
    2cac:	00000014 	andeq	r0, r0, r4, lsl r0
    2cb0:	0f659c01 	svceq	0x00659c01
    2cb4:	67120000 	ldrvs	r0, [r2, -r0]
    2cb8:	01000013 	tsteq	r0, r3, lsl r0
    2cbc:	8527081b 	strhi	r0, [r7, #-2075]!	; 0xfffff7e5
    2cc0:	02000005 	andeq	r0, r0, #5
    2cc4:	18007491 	stmdane	r0, {r0, r4, r7, sl, ip, sp, lr}
    2cc8:	00001193 	muleq	r0, r3, r1
    2ccc:	0a080d01 	beq	2060d8 <startup-0x1fdf9f28>
    2cd0:	000000c9 	andeq	r0, r0, r9, asr #1
    2cd4:	20002a78 	andcs	r2, r0, r8, ror sl
    2cd8:	00000014 	andeq	r0, r0, r4, lsl r0
    2cdc:	0f919c01 	svceq	0x00919c01
    2ce0:	67120000 	ldrvs	r0, [r2, -r0]
    2ce4:	01000013 	tsteq	r0, r3, lsl r0
    2ce8:	8527080d 	strhi	r0, [r7, #-2061]!	; 0xfffff7f3
    2cec:	02000005 	andeq	r0, r0, #5
    2cf0:	18007491 	stmdane	r0, {r0, r4, r7, sl, ip, sp, lr}
    2cf4:	00001183 	andeq	r1, r0, r3, lsl #3
    2cf8:	0a07ff01 	beq	202904 <startup-0x1fdfd6fc>
    2cfc:	000000c9 	andeq	r0, r0, r9, asr #1
    2d00:	20002a64 	andcs	r2, r0, r4, ror #20
    2d04:	00000014 	andeq	r0, r0, r4, lsl r0
    2d08:	0fbd9c01 	svceq	0x00bd9c01
    2d0c:	67120000 	ldrvs	r0, [r2, -r0]
    2d10:	01000013 	tsteq	r0, r3, lsl r0
    2d14:	852707ff 	strhi	r0, [r7, #-2047]!	; 0xfffff801
    2d18:	02000005 	andeq	r0, r0, #5
    2d1c:	18007491 	stmdane	r0, {r0, r4, r7, sl, ip, sp, lr}
    2d20:	000012d0 	ldrdeq	r1, [r0], -r0
    2d24:	0a07f001 	beq	1fed30 <startup-0x1fe012d0>
    2d28:	000000c9 	andeq	r0, r0, r9, asr #1
    2d2c:	20002a50 	andcs	r2, r0, r0, asr sl
    2d30:	00000014 	andeq	r0, r0, r4, lsl r0
    2d34:	0fe99c01 	svceq	0x00e99c01
    2d38:	67120000 	ldrvs	r0, [r2, -r0]
    2d3c:	01000013 	tsteq	r0, r3, lsl r0
    2d40:	852707f0 	strhi	r0, [r7, #-2032]!	; 0xfffff810
    2d44:	02000005 	andeq	r0, r0, #5
    2d48:	17007491 			; <UNDEFINED> instruction: 0x17007491
    2d4c:	000013d2 	ldrdeq	r1, [r0], -r2
    2d50:	0607b701 	streq	fp, [r7], -r1, lsl #14
    2d54:	20002966 	andcs	r2, r0, r6, ror #18
    2d58:	000000ea 	andeq	r0, r0, sl, ror #1
    2d5c:	10419c01 	subne	r9, r1, r1, lsl #24
    2d60:	67120000 	ldrvs	r0, [r2, -r0]
    2d64:	01000013 	tsteq	r0, r3, lsl r0
    2d68:	852207b7 	strhi	r0, [r2, #-1975]!	; 0xfffff849
    2d6c:	02000005 	andeq	r0, r0, #5
    2d70:	57126491 			; <UNDEFINED> instruction: 0x57126491
    2d74:	01000014 	tsteq	r0, r4, lsl r0
    2d78:	413b07b7 	teqmi	fp, r7	; <illegal shifter operand>
    2d7c:	02000010 	andeq	r0, r0, #16
    2d80:	bf136091 	svclt	0x00136091
    2d84:	01000011 	tsteq	r0, r1, lsl r0
    2d88:	a70c07b9 			; <UNDEFINED> instruction: 0xa70c07b9
    2d8c:	02000000 	andeq	r0, r0, #0
    2d90:	11136e91 			; <UNDEFINED> instruction: 0x11136e91
    2d94:	01000015 	tsteq	r0, r5, lsl r0
    2d98:	a70c07ba 			; <UNDEFINED> instruction: 0xa70c07ba
    2d9c:	02000000 	andeq	r0, r0, #0
    2da0:	15006c91 	strne	r6, [r0, #-3217]	; 0xfffff36f
    2da4:	00048004 	andeq	r8, r4, r4
    2da8:	11721600 	cmnne	r2, r0, lsl #12
    2dac:	a4010000 	strge	r0, [r1], #-0
    2db0:	29380607 	ldmdbcs	r8!, {r0, r1, r2, r9, sl}
    2db4:	002e2000 	eoreq	r2, lr, r0
    2db8:	9c010000 	stcls	0, cr0, [r1], {-0}
    2dbc:	0000106f 	andeq	r1, r0, pc, rrx
    2dc0:	00145712 	andseq	r5, r4, r2, lsl r7
    2dc4:	07a40100 	streq	r0, [r4, r0, lsl #2]!
    2dc8:	0010412a 	andseq	r4, r0, sl, lsr #2
    2dcc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2dd0:	17591700 	ldrbne	r1, [r9, -r0, lsl #14]
    2dd4:	6c010000 	stcvs	0, cr0, [r1], {-0}
    2dd8:	28880607 	stmcs	r8, {r0, r1, r2, r9, sl}
    2ddc:	00b02000 	adcseq	r2, r0, r0
    2de0:	9c010000 	stcls	0, cr0, [r1], {-0}
    2de4:	000010a7 	andeq	r1, r0, r7, lsr #1
    2de8:	00136712 	andseq	r6, r3, r2, lsl r7
    2dec:	076c0100 	strbeq	r0, [ip, -r0, lsl #2]!
    2df0:	0005851e 	andeq	r8, r5, lr, lsl r5
    2df4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2df8:	00145712 	andseq	r5, r4, r2, lsl r7
    2dfc:	076c0100 	strbeq	r0, [ip, -r0, lsl #2]!
    2e00:	00104137 	andseq	r4, r0, r7, lsr r1
    2e04:	70910200 	addsvc	r0, r1, r0, lsl #4
    2e08:	14e81600 	strbtne	r1, [r8], #1536	; 0x600
    2e0c:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
    2e10:	28220607 	stmdacs	r2!, {r0, r1, r2, r9, sl}
    2e14:	00662000 	rsbeq	r2, r6, r0
    2e18:	9c010000 	stcls	0, cr0, [r1], {-0}
    2e1c:	000010ff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
    2e20:	00136712 	andseq	r6, r3, r2, lsl r7
    2e24:	07180100 	ldreq	r0, [r8, -r0, lsl #2]
    2e28:	0005851f 	andeq	r8, r5, pc, lsl r5
    2e2c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    2e30:	0010d312 	andseq	sp, r0, r2, lsl r3
    2e34:	07180100 	ldreq	r0, [r8, -r0, lsl #2]
    2e38:	0000a72e 	andeq	sl, r0, lr, lsr #14
    2e3c:	6a910200 	bvs	fe443644 <APBAHBPrescTable+0xde43fdd4>
    2e40:	0011e312 	andseq	lr, r1, r2, lsl r3
    2e44:	07180100 	ldreq	r0, [r8, -r0, lsl #2]
    2e48:	0000a744 	andeq	sl, r0, r4, asr #14
    2e4c:	68910200 	ldmvs	r1, {r9}
    2e50:	706d7414 	rsbvc	r7, sp, r4, lsl r4
    2e54:	071a0100 	ldreq	r0, [sl, -r0, lsl #2]
    2e58:	0000a70c 	andeq	sl, r0, ip, lsl #14
    2e5c:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    2e60:	11061600 	tstne	r6, r0, lsl #12
    2e64:	fa010000 	blx	42e6c <startup-0x1ffbd194>
    2e68:	27bc0606 	ldrcs	r0, [ip, r6, lsl #12]!
    2e6c:	00662000 	rsbeq	r2, r6, r0
    2e70:	9c010000 	stcls	0, cr0, [r1], {-0}
    2e74:	00001157 	andeq	r1, r0, r7, asr r1
    2e78:	00136712 	andseq	r6, r3, r2, lsl r7
    2e7c:	06fa0100 	ldrbteq	r0, [sl], r0, lsl #2
    2e80:	0005851e 	andeq	r8, r5, lr, lsl r5
    2e84:	6c910200 	lfmvs	f0, 4, [r1], {0}
    2e88:	0010d312 	andseq	sp, r0, r2, lsl r3
    2e8c:	06fa0100 	ldrbteq	r0, [sl], r0, lsl #2
    2e90:	0000a72d 	andeq	sl, r0, sp, lsr #14
    2e94:	6a910200 	bvs	fe44369c <APBAHBPrescTable+0xde43fe2c>
    2e98:	00157912 	andseq	r7, r5, r2, lsl r9
    2e9c:	06fa0100 	ldrbteq	r0, [sl], r0, lsl #2
    2ea0:	0000a743 	andeq	sl, r0, r3, asr #14
    2ea4:	68910200 	ldmvs	r1, {r9}
    2ea8:	706d7414 	rsbvc	r7, sp, r4, lsl r4
    2eac:	06fc0100 	ldrbteq	r0, [ip], r0, lsl #2
    2eb0:	0000a70c 	andeq	sl, r0, ip, lsl #14
    2eb4:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    2eb8:	137c1600 	cmnne	ip, #0, 12
    2ebc:	db010000 	blle	42ec4 <startup-0x1ffbd13c>
    2ec0:	276c0606 	strbcs	r0, [ip, -r6, lsl #12]!
    2ec4:	00502000 	subseq	r2, r0, r0
    2ec8:	9c010000 	stcls	0, cr0, [r1], {-0}
    2ecc:	0000119f 	muleq	r0, pc, r1	; <UNPREDICTABLE>
    2ed0:	00136712 	andseq	r6, r3, r2, lsl r7
    2ed4:	06db0100 	ldrbeq	r0, [fp], r0, lsl #2
    2ed8:	00058529 	andeq	r8, r5, r9, lsr #10
    2edc:	6c910200 	lfmvs	f0, 4, [r1], {0}
    2ee0:	00128a12 	andseq	r8, r2, r2, lsl sl
    2ee4:	06db0100 	ldrbeq	r0, [fp], r0, lsl #2
    2ee8:	0000a738 	andeq	sl, r0, r8, lsr r7
    2eec:	6a910200 	bvs	fe4436f4 <APBAHBPrescTable+0xde43fe84>
    2ef0:	00126013 	andseq	r6, r2, r3, lsl r0
    2ef4:	06dd0100 	ldrbeq	r0, [sp], r0, lsl #2
    2ef8:	0000a70c 	andeq	sl, r0, ip, lsl #14
    2efc:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    2f00:	16391600 	ldrtne	r1, [r9], -r0, lsl #12
    2f04:	c0010000 	andgt	r0, r1, r0
    2f08:	271c0606 	ldrcs	r0, [ip, -r6, lsl #12]
    2f0c:	00502000 	subseq	r2, r0, r0
    2f10:	9c010000 	stcls	0, cr0, [r1], {-0}
    2f14:	000011e7 	andeq	r1, r0, r7, ror #3
    2f18:	00136712 	andseq	r6, r3, r2, lsl r7
    2f1c:	06c00100 	strbeq	r0, [r0], r0, lsl #2
    2f20:	0005852a 	andeq	r8, r5, sl, lsr #10
    2f24:	6c910200 	lfmvs	f0, 4, [r1], {0}
    2f28:	0016ca12 	andseq	ip, r6, r2, lsl sl
    2f2c:	06c00100 	strbeq	r0, [r0], r0, lsl #2
    2f30:	0000a739 	andeq	sl, r0, r9, lsr r7
    2f34:	6a910200 	bvs	fe44373c <APBAHBPrescTable+0xde43fecc>
    2f38:	00126013 	andseq	r6, r2, r3, lsl r0
    2f3c:	06c20100 	strbeq	r0, [r2], r0, lsl #2
    2f40:	0000a70c 	andeq	sl, r0, ip, lsl #14
    2f44:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    2f48:	18511600 	ldmdane	r1, {r9, sl, ip}^
    2f4c:	a5010000 	strge	r0, [r1, #-0]
    2f50:	26cc0606 	strbcs	r0, [ip], r6, lsl #12
    2f54:	00502000 	subseq	r2, r0, r0
    2f58:	9c010000 	stcls	0, cr0, [r1], {-0}
    2f5c:	0000122f 	andeq	r1, r0, pc, lsr #4
    2f60:	00136712 	andseq	r6, r3, r2, lsl r7
    2f64:	06a50100 	strteq	r0, [r5], r0, lsl #2
    2f68:	00058529 	andeq	r8, r5, r9, lsr #10
    2f6c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    2f70:	00128a12 	andseq	r8, r2, r2, lsl sl
    2f74:	06a50100 	strteq	r0, [r5], r0, lsl #2
    2f78:	0000a738 	andeq	sl, r0, r8, lsr r7
    2f7c:	6a910200 	bvs	fe443784 <APBAHBPrescTable+0xde43ff14>
    2f80:	00126013 	andseq	r6, r2, r3, lsl r0
    2f84:	06a70100 	strteq	r0, [r7], r0, lsl #2
    2f88:	0000a70c 	andeq	sl, r0, ip, lsl #14
    2f8c:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    2f90:	12681600 	rsbne	r1, r8, #0, 12
    2f94:	8a010000 	bhi	42f9c <startup-0x1ffbd064>
    2f98:	26800606 	strcs	r0, [r0], r6, lsl #12
    2f9c:	004c2000 	subeq	r2, ip, r0
    2fa0:	9c010000 	stcls	0, cr0, [r1], {-0}
    2fa4:	00001277 	andeq	r1, r0, r7, ror r2
    2fa8:	00136712 	andseq	r6, r3, r2, lsl r7
    2fac:	068a0100 	streq	r0, [sl], r0, lsl #2
    2fb0:	0005852a 	andeq	r8, r5, sl, lsr #10
    2fb4:	6c910200 	lfmvs	f0, 4, [r1], {0}
    2fb8:	0016ca12 	andseq	ip, r6, r2, lsl sl
    2fbc:	068a0100 	streq	r0, [sl], r0, lsl #2
    2fc0:	0000a739 	andeq	sl, r0, r9, lsr r7
    2fc4:	6a910200 	bvs	fe4437cc <APBAHBPrescTable+0xde43ff5c>
    2fc8:	00126013 	andseq	r6, r2, r3, lsl r0
    2fcc:	068c0100 	streq	r0, [ip], r0, lsl #2
    2fd0:	0000a70c 	andeq	sl, r0, ip, lsl #14
    2fd4:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    2fd8:	10361600 	eorsne	r1, r6, r0, lsl #12
    2fdc:	6f010000 	svcvs	0x00010000
    2fe0:	26340606 	ldrtcs	r0, [r4], -r6, lsl #12
    2fe4:	004c2000 	subeq	r2, ip, r0
    2fe8:	9c010000 	stcls	0, cr0, [r1], {-0}
    2fec:	000012bf 			; <UNDEFINED> instruction: 0x000012bf
    2ff0:	00136712 	andseq	r6, r3, r2, lsl r7
    2ff4:	066f0100 	strbteq	r0, [pc], -r0, lsl #2
    2ff8:	00058529 	andeq	r8, r5, r9, lsr #10
    2ffc:	6c910200 	lfmvs	f0, 4, [r1], {0}
    3000:	00128a12 	andseq	r8, r2, r2, lsl sl
    3004:	066f0100 	strbteq	r0, [pc], -r0, lsl #2
    3008:	0000a738 	andeq	sl, r0, r8, lsr r7
    300c:	6a910200 	bvs	fe443814 <APBAHBPrescTable+0xde43ffa4>
    3010:	00126013 	andseq	r6, r2, r3, lsl r0
    3014:	06710100 	ldrbteq	r0, [r1], -r0, lsl #2
    3018:	0000a70c 	andeq	sl, r0, ip, lsl #14
    301c:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    3020:	17fb1600 	ldrbne	r1, [fp, r0, lsl #12]!
    3024:	54010000 	strpl	r0, [r1], #-0
    3028:	25ec0606 	strbcs	r0, [ip, #1542]!	; 0x606
    302c:	00482000 	subeq	r2, r8, r0
    3030:	9c010000 	stcls	0, cr0, [r1], {-0}
    3034:	00001307 	andeq	r1, r0, r7, lsl #6
    3038:	00136712 	andseq	r6, r3, r2, lsl r7
    303c:	06540100 	ldrbeq	r0, [r4], -r0, lsl #2
    3040:	0005852a 	andeq	r8, r5, sl, lsr #10
    3044:	6c910200 	lfmvs	f0, 4, [r1], {0}
    3048:	0016ca12 	andseq	ip, r6, r2, lsl sl
    304c:	06540100 	ldrbeq	r0, [r4], -r0, lsl #2
    3050:	0000a739 	andeq	sl, r0, r9, lsr r7
    3054:	6a910200 	bvs	fe44385c <APBAHBPrescTable+0xde43ffec>
    3058:	00126013 	andseq	r6, r2, r3, lsl r0
    305c:	06560100 	ldrbeq	r0, [r6], -r0, lsl #2
    3060:	0000a70c 	andeq	sl, r0, ip, lsl #14
    3064:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    3068:	149a1600 	ldrne	r1, [sl], #1536	; 0x600
    306c:	39010000 	stmdbcc	r1, {}	; <UNPREDICTABLE>
    3070:	25a40606 	strcs	r0, [r4, #1542]!	; 0x606
    3074:	00482000 	subeq	r2, r8, r0
    3078:	9c010000 	stcls	0, cr0, [r1], {-0}
    307c:	0000134f 	andeq	r1, r0, pc, asr #6
    3080:	00136712 	andseq	r6, r3, r2, lsl r7
    3084:	06390100 	ldrteq	r0, [r9], -r0, lsl #2
    3088:	00058529 	andeq	r8, r5, r9, lsr #10
    308c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    3090:	00128a12 	andseq	r8, r2, r2, lsl sl
    3094:	06390100 	ldrteq	r0, [r9], -r0, lsl #2
    3098:	0000a738 	andeq	sl, r0, r8, lsr r7
    309c:	6a910200 	bvs	fe4438a4 <APBAHBPrescTable+0xde440034>
    30a0:	00126013 	andseq	r6, r2, r3, lsl r0
    30a4:	063b0100 	ldrteq	r0, [fp], -r0, lsl #2
    30a8:	0000a70c 	andeq	sl, r0, ip, lsl #14
    30ac:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    30b0:	17d91600 	ldrbne	r1, [r9, r0, lsl #12]
    30b4:	1c010000 	stcne	0, cr0, [r1], {-0}
    30b8:	25580606 	ldrbcs	r0, [r8, #-1542]	; 0xfffff9fa
    30bc:	004c2000 	subeq	r2, ip, r0
    30c0:	9c010000 	stcls	0, cr0, [r1], {-0}
    30c4:	00001397 	muleq	r0, r7, r3
    30c8:	00136712 	andseq	r6, r3, r2, lsl r7
    30cc:	061c0100 	ldreq	r0, [ip], -r0, lsl #2
    30d0:	00058523 	andeq	r8, r5, r3, lsr #10
    30d4:	6c910200 	lfmvs	f0, 4, [r1], {0}
    30d8:	00141d12 	andseq	r1, r4, r2, lsl sp
    30dc:	061c0100 	ldreq	r0, [ip], -r0, lsl #2
    30e0:	0000a732 	andeq	sl, r0, r2, lsr r7
    30e4:	6a910200 	bvs	fe4438ec <APBAHBPrescTable+0xde44007c>
    30e8:	000fea13 	andeq	lr, pc, r3, lsl sl	; <UNPREDICTABLE>
    30ec:	061e0100 	ldreq	r0, [lr], -r0, lsl #2
    30f0:	0000a70c 	andeq	sl, r0, ip, lsl #14
    30f4:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    30f8:	17b01600 	ldrne	r1, [r0, r0, lsl #12]!
    30fc:	ff010000 			; <UNDEFINED> instruction: 0xff010000
    3100:	25100605 	ldrcs	r0, [r0, #-1541]	; 0xfffff9fb
    3104:	00482000 	subeq	r2, r8, r0
    3108:	9c010000 	stcls	0, cr0, [r1], {-0}
    310c:	000013df 	ldrdeq	r1, [r0], -pc	; <UNPREDICTABLE>
    3110:	00136712 	andseq	r6, r3, r2, lsl r7
    3114:	05ff0100 	ldrbeq	r0, [pc, #256]!	; 321c <startup-0x1fffcde4>
    3118:	00058523 	andeq	r8, r5, r3, lsr #10
    311c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    3120:	00141d12 	andseq	r1, r4, r2, lsl sp
    3124:	05ff0100 	ldrbeq	r0, [pc, #256]!	; 322c <startup-0x1fffcdd4>
    3128:	0000a732 	andeq	sl, r0, r2, lsr r7
    312c:	6a910200 	bvs	fe443934 <APBAHBPrescTable+0xde4400c4>
    3130:	000fea13 	andeq	lr, pc, r3, lsl sl	; <UNPREDICTABLE>
    3134:	06010100 	streq	r0, [r1], -r0, lsl #2
    3138:	0000a70c 	andeq	sl, r0, ip, lsl #14
    313c:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    3140:	18981600 	ldmne	r8, {r9, sl, ip}
    3144:	e2010000 	and	r0, r1, #0
    3148:	24c40605 	strbcs	r0, [r4], #1541	; 0x605
    314c:	004c2000 	subeq	r2, ip, r0
    3150:	9c010000 	stcls	0, cr0, [r1], {-0}
    3154:	00001427 	andeq	r1, r0, r7, lsr #8
    3158:	00136712 	andseq	r6, r3, r2, lsl r7
    315c:	05e20100 	strbeq	r0, [r2, #256]!	; 0x100
    3160:	00058523 	andeq	r8, r5, r3, lsr #10
    3164:	6c910200 	lfmvs	f0, 4, [r1], {0}
    3168:	00141d12 	andseq	r1, r4, r2, lsl sp
    316c:	05e20100 	strbeq	r0, [r2, #256]!	; 0x100
    3170:	0000a732 	andeq	sl, r0, r2, lsr r7
    3174:	6a910200 	bvs	fe44397c <APBAHBPrescTable+0xde44010c>
    3178:	000fe113 	andeq	lr, pc, r3, lsl r1	; <UNPREDICTABLE>
    317c:	05e40100 	strbeq	r0, [r4, #256]!	; 0x100
    3180:	0000a70c 	andeq	sl, r0, ip, lsl #14
    3184:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    3188:	0f861600 	svceq	0x00861600
    318c:	c4010000 	strgt	r0, [r1], #-0
    3190:	247c0605 	ldrbtcs	r0, [ip], #-1541	; 0xfffff9fb
    3194:	00482000 	subeq	r2, r8, r0
    3198:	9c010000 	stcls	0, cr0, [r1], {-0}
    319c:	0000146f 	andeq	r1, r0, pc, ror #8
    31a0:	00136712 	andseq	r6, r3, r2, lsl r7
    31a4:	05c40100 	strbeq	r0, [r4, #256]	; 0x100
    31a8:	00058523 	andeq	r8, r5, r3, lsr #10
    31ac:	6c910200 	lfmvs	f0, 4, [r1], {0}
    31b0:	00141d12 	andseq	r1, r4, r2, lsl sp
    31b4:	05c40100 	strbeq	r0, [r4, #256]	; 0x100
    31b8:	0000a732 	andeq	sl, r0, r2, lsr r7
    31bc:	6a910200 	bvs	fe4439c4 <APBAHBPrescTable+0xde440154>
    31c0:	000fe113 	andeq	lr, pc, r3, lsl r1	; <UNPREDICTABLE>
    31c4:	05c60100 	strbeq	r0, [r6, #256]	; 0x100
    31c8:	0000a70c 	andeq	sl, r0, ip, lsl #14
    31cc:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    31d0:	16b81600 	ldrtne	r1, [r8], r0, lsl #12
    31d4:	a6010000 	strge	r0, [r1], -r0
    31d8:	242c0605 	strtcs	r0, [ip], #-1541	; 0xfffff9fb
    31dc:	00502000 	subseq	r2, r0, r0
    31e0:	9c010000 	stcls	0, cr0, [r1], {-0}
    31e4:	000014b7 			; <UNDEFINED> instruction: 0x000014b7
    31e8:	00136712 	andseq	r6, r3, r2, lsl r7
    31ec:	05a60100 	streq	r0, [r6, #256]!	; 0x100
    31f0:	00058525 	andeq	r8, r5, r5, lsr #10
    31f4:	6c910200 	lfmvs	f0, 4, [r1], {0}
    31f8:	0010c812 	andseq	ip, r0, r2, lsl r8
    31fc:	05a60100 	streq	r0, [r6, #256]!	; 0x100
    3200:	0000a734 	andeq	sl, r0, r4, lsr r7
    3204:	6a910200 	bvs	fe443a0c <APBAHBPrescTable+0xde44019c>
    3208:	000fea13 	andeq	lr, pc, r3, lsl sl	; <UNPREDICTABLE>
    320c:	05a80100 	streq	r0, [r8, #256]!	; 0x100
    3210:	0000a70c 	andeq	sl, r0, ip, lsl #14
    3214:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    3218:	19651600 	stmdbne	r5!, {r9, sl, ip}^
    321c:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
    3220:	23e40605 	mvncs	r0, #5242880	; 0x500000
    3224:	00482000 	subeq	r2, r8, r0
    3228:	9c010000 	stcls	0, cr0, [r1], {-0}
    322c:	000014ff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
    3230:	00136712 	andseq	r6, r3, r2, lsl r7
    3234:	05880100 	streq	r0, [r8, #256]	; 0x100
    3238:	00058525 	andeq	r8, r5, r5, lsr #10
    323c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    3240:	0010c812 	andseq	ip, r0, r2, lsl r8
    3244:	05880100 	streq	r0, [r8, #256]	; 0x100
    3248:	0000a734 	andeq	sl, r0, r4, lsr r7
    324c:	6a910200 	bvs	fe443a54 <APBAHBPrescTable+0xde4401e4>
    3250:	000fea13 	andeq	lr, pc, r3, lsl sl	; <UNPREDICTABLE>
    3254:	058a0100 	streq	r0, [sl, #256]	; 0x100
    3258:	0000a70c 	andeq	sl, r0, ip, lsl #14
    325c:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    3260:	16a61600 	strtne	r1, [r6], r0, lsl #12
    3264:	6a010000 	bvs	4326c <startup-0x1ffbcd94>
    3268:	23940605 	orrscs	r0, r4, #5242880	; 0x500000
    326c:	00502000 	subseq	r2, r0, r0
    3270:	9c010000 	stcls	0, cr0, [r1], {-0}
    3274:	00001547 	andeq	r1, r0, r7, asr #10
    3278:	00136712 	andseq	r6, r3, r2, lsl r7
    327c:	056a0100 	strbeq	r0, [sl, #-256]!	; 0xffffff00
    3280:	00058525 	andeq	r8, r5, r5, lsr #10
    3284:	6c910200 	lfmvs	f0, 4, [r1], {0}
    3288:	0010c812 	andseq	ip, r0, r2, lsl r8
    328c:	056a0100 	strbeq	r0, [sl, #-256]!	; 0xffffff00
    3290:	0000a734 	andeq	sl, r0, r4, lsr r7
    3294:	6a910200 	bvs	fe443a9c <APBAHBPrescTable+0xde44022c>
    3298:	000fe113 	andeq	lr, pc, r3, lsl r1	; <UNPREDICTABLE>
    329c:	056c0100 	strbeq	r0, [ip, #-256]!	; 0xffffff00
    32a0:	0000a70c 	andeq	sl, r0, ip, lsl #14
    32a4:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    32a8:	19a01600 	stmibne	r0!, {r9, sl, ip}
    32ac:	4b010000 	blmi	432b4 <startup-0x1ffbcd4c>
    32b0:	234c0605 	movtcs	r0, #50693	; 0xc605
    32b4:	00482000 	subeq	r2, r8, r0
    32b8:	9c010000 	stcls	0, cr0, [r1], {-0}
    32bc:	0000158f 	andeq	r1, r0, pc, lsl #11
    32c0:	00136712 	andseq	r6, r3, r2, lsl r7
    32c4:	054b0100 	strbeq	r0, [fp, #-256]	; 0xffffff00
    32c8:	00058525 	andeq	r8, r5, r5, lsr #10
    32cc:	6c910200 	lfmvs	f0, 4, [r1], {0}
    32d0:	0010c812 	andseq	ip, r0, r2, lsl r8
    32d4:	054b0100 	strbeq	r0, [fp, #-256]	; 0xffffff00
    32d8:	0000a734 	andeq	sl, r0, r4, lsr r7
    32dc:	6a910200 	bvs	fe443ae4 <APBAHBPrescTable+0xde440274>
    32e0:	000fe113 	andeq	lr, pc, r3, lsl r1	; <UNPREDICTABLE>
    32e4:	054d0100 	strbeq	r0, [sp, #-256]	; 0xffffff00
    32e8:	0000a70c 	andeq	sl, r0, ip, lsl #14
    32ec:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    32f0:	179b1600 	ldrne	r1, [fp, r0, lsl #12]
    32f4:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    32f8:	22fc0605 	rscscs	r0, ip, #5242880	; 0x500000
    32fc:	00502000 	subseq	r2, r0, r0
    3300:	9c010000 	stcls	0, cr0, [r1], {-0}
    3304:	000015d7 	ldrdeq	r1, [r0], -r7
    3308:	00136712 	andseq	r6, r3, r2, lsl r7
    330c:	052e0100 	streq	r0, [lr, #-256]!	; 0xffffff00
    3310:	00058528 	andeq	r8, r5, r8, lsr #10
    3314:	6c910200 	lfmvs	f0, 4, [r1], {0}
    3318:	00111112 	andseq	r1, r1, r2, lsl r1
    331c:	052e0100 	streq	r0, [lr, #-256]!	; 0xffffff00
    3320:	0000a737 	andeq	sl, r0, r7, lsr r7
    3324:	6a910200 	bvs	fe443b2c <APBAHBPrescTable+0xde4402bc>
    3328:	000fea13 	andeq	lr, pc, r3, lsl sl	; <UNPREDICTABLE>
    332c:	05300100 	ldreq	r0, [r0, #-256]!	; 0xffffff00
    3330:	0000a70c 	andeq	sl, r0, ip, lsl #14
    3334:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    3338:	19771600 	ldmdbne	r7!, {r9, sl, ip}^
    333c:	11010000 	mrsne	r0, (UNDEF: 1)
    3340:	22b40605 	adcscs	r0, r4, #5242880	; 0x500000
    3344:	00482000 	subeq	r2, r8, r0
    3348:	9c010000 	stcls	0, cr0, [r1], {-0}
    334c:	0000161f 	andeq	r1, r0, pc, lsl r6
    3350:	00136712 	andseq	r6, r3, r2, lsl r7
    3354:	05110100 	ldreq	r0, [r1, #-256]	; 0xffffff00
    3358:	00058528 	andeq	r8, r5, r8, lsr #10
    335c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    3360:	00111112 	andseq	r1, r1, r2, lsl r1
    3364:	05110100 	ldreq	r0, [r1, #-256]	; 0xffffff00
    3368:	0000a737 	andeq	sl, r0, r7, lsr r7
    336c:	6a910200 	bvs	fe443b74 <APBAHBPrescTable+0xde440304>
    3370:	000fea13 	andeq	lr, pc, r3, lsl sl	; <UNPREDICTABLE>
    3374:	05130100 	ldreq	r0, [r3, #-256]	; 0xffffff00
    3378:	0000a70c 	andeq	sl, r0, ip, lsl #14
    337c:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    3380:	10911600 	addsne	r1, r1, r0, lsl #12
    3384:	f4010000 	vst4.8	{d0-d3}, [r1], r0
    3388:	22640604 	rsbcs	r0, r4, #4, 12	; 0x400000
    338c:	00502000 	subseq	r2, r0, r0
    3390:	9c010000 	stcls	0, cr0, [r1], {-0}
    3394:	00001667 	andeq	r1, r0, r7, ror #12
    3398:	00136712 	andseq	r6, r3, r2, lsl r7
    339c:	04f40100 	ldrbteq	r0, [r4], #256	; 0x100
    33a0:	00058528 	andeq	r8, r5, r8, lsr #10
    33a4:	6c910200 	lfmvs	f0, 4, [r1], {0}
    33a8:	00111112 	andseq	r1, r1, r2, lsl r1
    33ac:	04f40100 	ldrbteq	r0, [r4], #256	; 0x100
    33b0:	0000a737 	andeq	sl, r0, r7, lsr r7
    33b4:	6a910200 	bvs	fe443bbc <APBAHBPrescTable+0xde44034c>
    33b8:	000fe113 	andeq	lr, pc, r3, lsl r1	; <UNPREDICTABLE>
    33bc:	04f60100 	ldrbteq	r0, [r6], #256	; 0x100
    33c0:	0000a70c 	andeq	sl, r0, ip, lsl #14
    33c4:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    33c8:	11fc1600 	mvnsne	r1, r0, lsl #12
    33cc:	d6010000 	strle	r0, [r1], -r0
    33d0:	221c0604 	andscs	r0, ip, #4, 12	; 0x400000
    33d4:	00482000 	subeq	r2, r8, r0
    33d8:	9c010000 	stcls	0, cr0, [r1], {-0}
    33dc:	000016af 	andeq	r1, r0, pc, lsr #13
    33e0:	00136712 	andseq	r6, r3, r2, lsl r7
    33e4:	04d60100 	ldrbeq	r0, [r6], #256	; 0x100
    33e8:	00058528 	andeq	r8, r5, r8, lsr #10
    33ec:	6c910200 	lfmvs	f0, 4, [r1], {0}
    33f0:	00111112 	andseq	r1, r1, r2, lsl r1
    33f4:	04d60100 	ldrbeq	r0, [r6], #256	; 0x100
    33f8:	0000a737 	andeq	sl, r0, r7, lsr r7
    33fc:	6a910200 	bvs	fe443c04 <APBAHBPrescTable+0xde440394>
    3400:	000fe113 	andeq	lr, pc, r3, lsl r1	; <UNPREDICTABLE>
    3404:	04d80100 	ldrbeq	r0, [r8], #256	; 0x100
    3408:	0000a70c 	andeq	sl, r0, ip, lsl #14
    340c:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    3410:	0f721600 	svceq	0x00721600
    3414:	ba010000 	blt	4341c <startup-0x1ffbcbe4>
    3418:	21cc0604 	biccs	r0, ip, r4, lsl #12
    341c:	00502000 	subseq	r2, r0, r0
    3420:	9c010000 	stcls	0, cr0, [r1], {-0}
    3424:	000016f7 	strdeq	r1, [r0], -r7
    3428:	00136712 	andseq	r6, r3, r2, lsl r7
    342c:	04ba0100 	ldrteq	r0, [sl], #256	; 0x100
    3430:	00058527 	andeq	r8, r5, r7, lsr #10
    3434:	6c910200 	lfmvs	f0, 4, [r1], {0}
    3438:	0010f512 	andseq	pc, r0, r2, lsl r5	; <UNPREDICTABLE>
    343c:	04ba0100 	ldrteq	r0, [sl], #256	; 0x100
    3440:	0000a736 	andeq	sl, r0, r6, lsr r7
    3444:	6a910200 	bvs	fe443c4c <APBAHBPrescTable+0xde4403dc>
    3448:	000fea13 	andeq	lr, pc, r3, lsl sl	; <UNPREDICTABLE>
    344c:	04bc0100 	ldrteq	r0, [ip], #256	; 0x100
    3450:	0000a70c 	andeq	sl, r0, ip, lsl #14
    3454:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    3458:	14c41600 	strbne	r1, [r4], #1536	; 0x600
    345c:	9d010000 	stcls	0, cr0, [r1, #-0]
    3460:	21840604 	orrcs	r0, r4, r4, lsl #12
    3464:	00482000 	subeq	r2, r8, r0
    3468:	9c010000 	stcls	0, cr0, [r1], {-0}
    346c:	0000173f 	andeq	r1, r0, pc, lsr r7
    3470:	00136712 	andseq	r6, r3, r2, lsl r7
    3474:	049d0100 	ldreq	r0, [sp], #256	; 0x100
    3478:	00058527 	andeq	r8, r5, r7, lsr #10
    347c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    3480:	0010f512 	andseq	pc, r0, r2, lsl r5	; <UNPREDICTABLE>
    3484:	049d0100 	ldreq	r0, [sp], #256	; 0x100
    3488:	0000a736 	andeq	sl, r0, r6, lsr r7
    348c:	6a910200 	bvs	fe443c94 <APBAHBPrescTable+0xde440424>
    3490:	000fea13 	andeq	lr, pc, r3, lsl sl	; <UNPREDICTABLE>
    3494:	049f0100 	ldreq	r0, [pc], #256	; 349c <startup-0x1fffcb64>
    3498:	0000a70c 	andeq	sl, r0, ip, lsl #14
    349c:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    34a0:	0f161600 	svceq	0x00161600
    34a4:	81010000 	mrshi	r0, (UNDEF: 1)
    34a8:	21340604 	teqcs	r4, r4, lsl #12
    34ac:	00502000 	subseq	r2, r0, r0
    34b0:	9c010000 	stcls	0, cr0, [r1], {-0}
    34b4:	00001787 	andeq	r1, r0, r7, lsl #15
    34b8:	00136712 	andseq	r6, r3, r2, lsl r7
    34bc:	04810100 	streq	r0, [r1], #256	; 0x100
    34c0:	00058527 	andeq	r8, r5, r7, lsr #10
    34c4:	6c910200 	lfmvs	f0, 4, [r1], {0}
    34c8:	0010f512 	andseq	pc, r0, r2, lsl r5	; <UNPREDICTABLE>
    34cc:	04810100 	streq	r0, [r1], #256	; 0x100
    34d0:	0000a736 	andeq	sl, r0, r6, lsr r7
    34d4:	6a910200 	bvs	fe443cdc <APBAHBPrescTable+0xde44046c>
    34d8:	000fe113 	andeq	lr, pc, r3, lsl r1	; <UNPREDICTABLE>
    34dc:	04830100 	streq	r0, [r3], #256	; 0x100
    34e0:	0000a70c 	andeq	sl, r0, ip, lsl #14
    34e4:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    34e8:	14b01600 	ldrtne	r1, [r0], #1536	; 0x600
    34ec:	64010000 	strvs	r0, [r1], #-0
    34f0:	20ec0604 	rsccs	r0, ip, r4, lsl #12
    34f4:	00482000 	subeq	r2, r8, r0
    34f8:	9c010000 	stcls	0, cr0, [r1], {-0}
    34fc:	000017cf 	andeq	r1, r0, pc, asr #15
    3500:	00136712 	andseq	r6, r3, r2, lsl r7
    3504:	04640100 	strbteq	r0, [r4], #-256	; 0xffffff00
    3508:	00058527 	andeq	r8, r5, r7, lsr #10
    350c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    3510:	0010f512 	andseq	pc, r0, r2, lsl r5	; <UNPREDICTABLE>
    3514:	04640100 	strbteq	r0, [r4], #-256	; 0xffffff00
    3518:	0000a736 	andeq	sl, r0, r6, lsr r7
    351c:	6a910200 	bvs	fe443d24 <APBAHBPrescTable+0xde4404b4>
    3520:	000fe113 	andeq	lr, pc, r3, lsl r1	; <UNPREDICTABLE>
    3524:	04660100 	strbteq	r0, [r6], #-256	; 0xffffff00
    3528:	0000a70c 	andeq	sl, r0, ip, lsl #14
    352c:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    3530:	17641600 	strbne	r1, [r4, -r0, lsl #12]!
    3534:	52010000 	andpl	r0, r1, #0
    3538:	20d40604 	sbcscs	r0, r4, r4, lsl #12
    353c:	00182000 	andseq	r2, r8, r0
    3540:	9c010000 	stcls	0, cr0, [r1], {-0}
    3544:	00001807 	andeq	r1, r0, r7, lsl #16
    3548:	00136712 	andseq	r6, r3, r2, lsl r7
    354c:	04520100 	ldrbeq	r0, [r2], #-256	; 0xffffff00
    3550:	00058523 	andeq	r8, r5, r3, lsr #10
    3554:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3558:	00176b12 	andseq	r6, r7, r2, lsl fp
    355c:	04520100 	ldrbeq	r0, [r2], #-256	; 0xffffff00
    3560:	0000c932 	andeq	ip, r0, r2, lsr r9
    3564:	70910200 	addsvc	r0, r1, r0, lsl #4
    3568:	12421600 	subne	r1, r2, #0, 12
    356c:	43010000 	movwmi	r0, #4096	; 0x1000
    3570:	20bc0604 	adcscs	r0, ip, r4, lsl #12
    3574:	00182000 	andseq	r2, r8, r0
    3578:	9c010000 	stcls	0, cr0, [r1], {-0}
    357c:	0000183f 	andeq	r1, r0, pc, lsr r8
    3580:	00136712 	andseq	r6, r3, r2, lsl r7
    3584:	04430100 	strbeq	r0, [r3], #-256	; 0xffffff00
    3588:	00058523 	andeq	r8, r5, r3, lsr #10
    358c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3590:	00124912 	andseq	r4, r2, r2, lsl r9
    3594:	04430100 	strbeq	r0, [r3], #-256	; 0xffffff00
    3598:	0000c932 	andeq	ip, r0, r2, lsr r9
    359c:	70910200 	addsvc	r0, r1, r0, lsl #4
    35a0:	12321600 	eorsne	r1, r2, #0, 12
    35a4:	34010000 	strcc	r0, [r1], #-0
    35a8:	20a40604 	adccs	r0, r4, r4, lsl #12
    35ac:	00182000 	andseq	r2, r8, r0
    35b0:	9c010000 	stcls	0, cr0, [r1], {-0}
    35b4:	00001877 	andeq	r1, r0, r7, ror r8
    35b8:	00136712 	andseq	r6, r3, r2, lsl r7
    35bc:	04340100 	ldrteq	r0, [r4], #-256	; 0xffffff00
    35c0:	00058523 	andeq	r8, r5, r3, lsr #10
    35c4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    35c8:	00123912 	andseq	r3, r2, r2, lsl r9
    35cc:	04340100 	ldrteq	r0, [r4], #-256	; 0xffffff00
    35d0:	0000c932 	andeq	ip, r0, r2, lsr r9
    35d4:	70910200 	addsvc	r0, r1, r0, lsl #4
    35d8:	0f9f1600 	svceq	0x009f1600
    35dc:	24010000 	strcs	r0, [r1], #-0
    35e0:	208c0604 	addcs	r0, ip, r4, lsl #12
    35e4:	00182000 	andseq	r2, r8, r0
    35e8:	9c010000 	stcls	0, cr0, [r1], {-0}
    35ec:	000018af 	andeq	r1, r0, pc, lsr #17
    35f0:	00136712 	andseq	r6, r3, r2, lsl r7
    35f4:	04240100 	strteq	r0, [r4], #-256	; 0xffffff00
    35f8:	00058523 	andeq	r8, r5, r3, lsr #10
    35fc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3600:	000fa612 	andeq	sl, pc, r2, lsl r6	; <UNPREDICTABLE>
    3604:	04240100 	strteq	r0, [r4], #-256	; 0xffffff00
    3608:	0000c932 	andeq	ip, r0, r2, lsr r9
    360c:	70910200 	addsvc	r0, r1, r0, lsl #4
    3610:	17741600 	ldrbne	r1, [r4, -r0, lsl #12]!
    3614:	f6010000 			; <UNDEFINED> instruction: 0xf6010000
    3618:	1fb80603 	svcne	0x00b80603
    361c:	00d42000 	sbcseq	r2, r4, r0
    3620:	9c010000 	stcls	0, cr0, [r1], {-0}
    3624:	00001917 	andeq	r1, r0, r7, lsl r9
    3628:	00136712 	andseq	r6, r3, r2, lsl r7
    362c:	03f60100 	mvnseq	r0, #0, 2
    3630:	00058522 	andeq	r8, r5, r2, lsr #10
    3634:	6c910200 	lfmvs	f0, 4, [r1], {0}
    3638:	0010d312 	andseq	sp, r0, r2, lsl r3
    363c:	03f60100 	mvnseq	r0, #0, 2
    3640:	0000a731 	andeq	sl, r0, r1, lsr r7
    3644:	6a910200 	bvs	fe443e4c <APBAHBPrescTable+0xde4405dc>
    3648:	0017ce12 	andseq	ip, r7, r2, lsl lr
    364c:	03f60100 	mvnseq	r0, #0, 2
    3650:	0000a747 	andeq	sl, r0, r7, asr #14
    3654:	68910200 	ldmvs	r1, {r9}
    3658:	706d7414 	rsbvc	r7, sp, r4, lsl r4
    365c:	03f80100 	mvnseq	r0, #0, 2
    3660:	0000c90c 	andeq	ip, r0, ip, lsl #18
    3664:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3668:	00107113 	andseq	r7, r0, r3, lsl r1
    366c:	03f90100 	mvnseq	r0, #0, 2
    3670:	0000a70c 	andeq	sl, r0, ip, lsl #14
    3674:	72910200 	addsvc	r0, r1, #0, 4
    3678:	13fa1600 	mvnsne	r1, #0, 12
    367c:	d2010000 	andle	r0, r1, #0
    3680:	1f780603 	svcne	0x00780603
    3684:	00402000 	subeq	r2, r0, r0
    3688:	9c010000 	stcls	0, cr0, [r1], {-0}
    368c:	0000193f 	andeq	r1, r0, pc, lsr r9
    3690:	00134812 	andseq	r4, r3, r2, lsl r8
    3694:	03d20100 	bicseq	r0, r2, #0, 2
    3698:	00193f2a 	andseq	r3, r9, sl, lsr #30
    369c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    36a0:	29041500 	stmdbcs	r4, {r8, sl, ip}
    36a4:	16000004 	strne	r0, [r0], -r4
    36a8:	0000174d 	andeq	r1, r0, sp, asr #14
    36ac:	06039301 	streq	r9, [r3], -r1, lsl #6
    36b0:	20001e54 	andcs	r1, r0, r4, asr lr
    36b4:	00000124 	andeq	r0, r0, r4, lsr #2
    36b8:	19ad9c01 	stmibne	sp!, {r0, sl, fp, ip, pc}
    36bc:	67120000 	ldrvs	r0, [r2, -r0]
    36c0:	01000013 	tsteq	r0, r3, lsl r0
    36c4:	851f0393 	ldrhi	r0, [pc, #-915]	; 3339 <startup-0x1fffccc7>
    36c8:	02000005 	andeq	r0, r0, #5
    36cc:	48126491 	ldmdami	r2, {r0, r4, r7, sl, sp, lr}
    36d0:	01000013 	tsteq	r0, r3, lsl r0
    36d4:	3f380393 	svccc	0x00380393
    36d8:	02000019 	andeq	r0, r0, #25
    36dc:	4f136091 	svcmi	0x00136091
    36e0:	01000011 	tsteq	r0, r1, lsl r0
    36e4:	a70c0395 			; <UNDEFINED> instruction: 0xa70c0395
    36e8:	02000000 	andeq	r0, r0, #0
    36ec:	60136c91 	mulsvs	r3, r1, ip
    36f0:	01000012 	tsteq	r0, r2, lsl r0
    36f4:	a71a0395 			; <UNDEFINED> instruction: 0xa71a0395
    36f8:	02000000 	andeq	r0, r0, #0
    36fc:	68136a91 	ldmdavs	r3, {r0, r4, r7, r9, fp, sp, lr}
    3700:	01000014 	tsteq	r0, r4, lsl r0
    3704:	a7270395 			; <UNDEFINED> instruction: 0xa7270395
    3708:	02000000 	andeq	r0, r0, #0
    370c:	16006e91 			; <UNDEFINED> instruction: 0x16006e91
    3710:	000011b3 			; <UNDEFINED> instruction: 0x000011b3
    3714:	06034301 	streq	r4, [r3], -r1, lsl #6
    3718:	20001cd4 	ldrdcs	r1, [r0], -r4
    371c:	00000180 	andeq	r0, r0, r0, lsl #3
    3720:	1a159c01 	bne	56a72c <startup-0x1fa958d4>
    3724:	67120000 	ldrvs	r0, [r2, -r0]
    3728:	01000013 	tsteq	r0, r3, lsl r0
    372c:	851f0343 	ldrhi	r0, [pc, #-835]	; 33f1 <startup-0x1fffcc0f>
    3730:	02000005 	andeq	r0, r0, #5
    3734:	48126491 	ldmdami	r2, {r0, r4, r7, sl, sp, lr}
    3738:	01000013 	tsteq	r0, r3, lsl r0
    373c:	3f380343 	svccc	0x00380343
    3740:	02000019 	andeq	r0, r0, #25
    3744:	4f136091 	svcmi	0x00136091
    3748:	01000011 	tsteq	r0, r1, lsl r0
    374c:	a70c0345 	strge	r0, [ip, -r5, asr #6]
    3750:	02000000 	andeq	r0, r0, #0
    3754:	60136a91 	mulsvs	r3, r1, sl
    3758:	01000012 	tsteq	r0, r2, lsl r0
    375c:	a71a0345 	ldrge	r0, [sl, -r5, asr #6]
    3760:	02000000 	andeq	r0, r0, #0
    3764:	68136e91 	ldmdavs	r3, {r0, r4, r7, r9, sl, fp, sp, lr}
    3768:	01000014 	tsteq	r0, r4, lsl r0
    376c:	a7270345 	strge	r0, [r7, -r5, asr #6]!
    3770:	02000000 	andeq	r0, r0, #0
    3774:	16006c91 			; <UNDEFINED> instruction: 0x16006c91
    3778:	00001719 	andeq	r1, r0, r9, lsl r7
    377c:	0602f201 	streq	pc, [r2], -r1, lsl #4
    3780:	20001b58 	andcs	r1, r0, r8, asr fp
    3784:	0000017c 	andeq	r0, r0, ip, ror r1
    3788:	1a7d9c01 	bne	1f6a794 <startup-0x1e09586c>
    378c:	67120000 	ldrvs	r0, [r2, -r0]
    3790:	01000013 	tsteq	r0, r3, lsl r0
    3794:	851f02f2 	ldrhi	r0, [pc, #-754]	; 34aa <startup-0x1fffcb56>
    3798:	02000005 	andeq	r0, r0, #5
    379c:	48126491 	ldmdami	r2, {r0, r4, r7, sl, sp, lr}
    37a0:	01000013 	tsteq	r0, r3, lsl r0
    37a4:	3f3802f2 	svccc	0x003802f2
    37a8:	02000019 	andeq	r0, r0, #25
    37ac:	4f136091 	svcmi	0x00136091
    37b0:	01000011 	tsteq	r0, r1, lsl r0
    37b4:	a70c02f4 			; <UNDEFINED> instruction: 0xa70c02f4
    37b8:	02000000 	andeq	r0, r0, #0
    37bc:	60136a91 	mulsvs	r3, r1, sl
    37c0:	01000012 	tsteq	r0, r2, lsl r0
    37c4:	a71a02f4 			; <UNDEFINED> instruction: 0xa71a02f4
    37c8:	02000000 	andeq	r0, r0, #0
    37cc:	68136e91 	ldmdavs	r3, {r0, r4, r7, r9, sl, fp, sp, lr}
    37d0:	01000014 	tsteq	r0, r4, lsl r0
    37d4:	a72702f4 			; <UNDEFINED> instruction: 0xa72702f4
    37d8:	02000000 	andeq	r0, r0, #0
    37dc:	16006c91 			; <UNDEFINED> instruction: 0x16006c91
    37e0:	00001877 	andeq	r1, r0, r7, ror r8
    37e4:	0602a101 	streq	sl, [r2], -r1, lsl #2
    37e8:	20001a00 	andcs	r1, r0, r0, lsl #20
    37ec:	00000158 	andeq	r0, r0, r8, asr r1
    37f0:	1ae59c01 	bne	ff96a7fc <APBAHBPrescTable+0xdf966f8c>
    37f4:	67120000 	ldrvs	r0, [r2, -r0]
    37f8:	01000013 	tsteq	r0, r3, lsl r0
    37fc:	851f02a1 	ldrhi	r0, [pc, #-673]	; 3563 <startup-0x1fffca9d>
    3800:	02000005 	andeq	r0, r0, #5
    3804:	48126491 	ldmdami	r2, {r0, r4, r7, sl, sp, lr}
    3808:	01000013 	tsteq	r0, r3, lsl r0
    380c:	3f3802a1 	svccc	0x003802a1
    3810:	02000019 	andeq	r0, r0, #25
    3814:	4f136091 	svcmi	0x00136091
    3818:	01000011 	tsteq	r0, r1, lsl r0
    381c:	a70c02a3 	strge	r0, [ip, -r3, lsr #5]
    3820:	02000000 	andeq	r0, r0, #0
    3824:	60136a91 	mulsvs	r3, r1, sl
    3828:	01000012 	tsteq	r0, r2, lsl r0
    382c:	a71a02a3 	ldrge	r0, [sl, -r3, lsr #5]
    3830:	02000000 	andeq	r0, r0, #0
    3834:	68136e91 	ldmdavs	r3, {r0, r4, r7, r9, sl, fp, sp, lr}
    3838:	01000014 	tsteq	r0, r4, lsl r0
    383c:	a72702a3 	strge	r0, [r7, -r3, lsr #5]!
    3840:	02000000 	andeq	r0, r0, #0
    3844:	16006c91 			; <UNDEFINED> instruction: 0x16006c91
    3848:	000016fd 	strdeq	r1, [r0], -sp
    384c:	06025001 	streq	r5, [r2], -r1
    3850:	200019c0 	andcs	r1, r0, r0, asr #19
    3854:	00000040 	andeq	r0, r0, r0, asr #32
    3858:	1b1d9c01 	blne	76a864 <startup-0x1f89579c>
    385c:	67120000 	ldrvs	r0, [r2, -r0]
    3860:	01000013 	tsteq	r0, r3, lsl r0
    3864:	851b0250 	ldrhi	r0, [fp, #-592]	; 0xfffffdb0
    3868:	02000005 	andeq	r0, r0, #5
    386c:	3f127491 	svccc	0x00127491
    3870:	01000002 	tsteq	r0, r2
    3874:	45310250 	ldrmi	r0, [r1, #-592]!	; 0xfffffdb0
    3878:	02000001 	andeq	r0, r0, #1
    387c:	16007391 			; <UNDEFINED> instruction: 0x16007391
    3880:	00001564 	andeq	r1, r0, r4, ror #10
    3884:	06023c01 	streq	r3, [r2], -r1, lsl #24
    3888:	20001982 	andcs	r1, r0, r2, lsl #19
    388c:	0000003e 	andeq	r0, r0, lr, lsr r0
    3890:	1b559c01 	blne	156a89c <startup-0x1ea95764>
    3894:	67120000 	ldrvs	r0, [r2, -r0]
    3898:	01000013 	tsteq	r0, r3, lsl r0
    389c:	8528023c 	strhi	r0, [r8, #-572]!	; 0xfffffdc4
    38a0:	02000005 	andeq	r0, r0, #5
    38a4:	58127491 	ldmdapl	r2, {r0, r4, r7, sl, ip, sp, lr}
    38a8:	01000011 	tsteq	r0, r1, lsl r0
    38ac:	a737023c 			; <UNDEFINED> instruction: 0xa737023c
    38b0:	02000000 	andeq	r0, r0, #0
    38b4:	16007291 			; <UNDEFINED> instruction: 0x16007291
    38b8:	00000f2a 	andeq	r0, r0, sl, lsr #30
    38bc:	06022501 	streq	r2, [r2], -r1, lsl #10
    38c0:	2000194a 	andcs	r1, r0, sl, asr #18
    38c4:	00000038 	andeq	r0, r0, r8, lsr r0
    38c8:	1b8d9c01 	blne	fe36a8d4 <APBAHBPrescTable+0xde367064>
    38cc:	67120000 	ldrvs	r0, [r2, -r0]
    38d0:	01000013 	tsteq	r0, r3, lsl r0
    38d4:	852a0225 	strhi	r0, [sl, #-549]!	; 0xfffffddb
    38d8:	02000005 	andeq	r0, r0, #5
    38dc:	0b127491 	bleq	4a0b28 <startup-0x1fb5f4d8>
    38e0:	0100000f 	tsteq	r0, pc
    38e4:	a7390225 	ldrge	r0, [r9, -r5, lsr #4]!
    38e8:	02000000 	andeq	r0, r0, #0
    38ec:	16007291 			; <UNDEFINED> instruction: 0x16007291
    38f0:	0000104c 	andeq	r1, r0, ip, asr #32
    38f4:	06020a01 	streq	r0, [r2], -r1, lsl #20
    38f8:	2000190a 	andcs	r1, r0, sl, lsl #18
    38fc:	00000040 	andeq	r0, r0, r0, asr #32
    3900:	1bc59c01 	blne	ff16a90c <APBAHBPrescTable+0xdf16709c>
    3904:	67120000 	ldrvs	r0, [r2, -r0]
    3908:	01000013 	tsteq	r0, r3, lsl r0
    390c:	8528020a 	strhi	r0, [r8, #-522]!	; 0xfffffdf6
    3910:	02000005 	andeq	r0, r0, #5
    3914:	3f127491 	svccc	0x00127491
    3918:	01000002 	tsteq	r0, r2
    391c:	453e020a 	ldrmi	r0, [lr, #-522]!	; 0xfffffdf6
    3920:	02000001 	andeq	r0, r0, #1
    3924:	16007391 			; <UNDEFINED> instruction: 0x16007391
    3928:	00001783 	andeq	r1, r0, r3, lsl #15
    392c:	0601f101 	streq	pc, [r1], -r1, lsl #2
    3930:	200018ca 	andcs	r1, r0, sl, asr #17
    3934:	00000040 	andeq	r0, r0, r0, asr #32
    3938:	1bfd9c01 	blne	fff6a944 <APBAHBPrescTable+0xdff670d4>
    393c:	67120000 	ldrvs	r0, [r2, -r0]
    3940:	01000013 	tsteq	r0, r3, lsl r0
    3944:	852b01f1 	strhi	r0, [fp, #-497]!	; 0xfffffe0f
    3948:	02000005 	andeq	r0, r0, #5
    394c:	d2127491 	andsle	r7, r2, #-1862270976	; 0x91000000
    3950:	01000011 	tsteq	r0, r1, lsl r0
    3954:	a73a01f1 			; <UNDEFINED> instruction: 0xa73a01f1
    3958:	02000000 	andeq	r0, r0, #0
    395c:	16007291 			; <UNDEFINED> instruction: 0x16007291
    3960:	00000fbf 			; <UNDEFINED> instruction: 0x00000fbf
    3964:	0601d401 	streq	sp, [r1], -r1, lsl #8
    3968:	2000188a 	andcs	r1, r0, sl, lsl #17
    396c:	00000040 	andeq	r0, r0, r0, asr #32
    3970:	1c359c01 	ldcne	12, cr9, [r5], #-4
    3974:	67120000 	ldrvs	r0, [r2, -r0]
    3978:	01000013 	tsteq	r0, r3, lsl r0
    397c:	852b01d4 	strhi	r0, [fp, #-468]!	; 0xfffffe2c
    3980:	02000005 	andeq	r0, r0, #5
    3984:	3f127491 	svccc	0x00127491
    3988:	01000002 	tsteq	r0, r2
    398c:	454101d4 	strbmi	r0, [r1, #-468]	; 0xfffffe2c
    3990:	02000001 	andeq	r0, r0, #1
    3994:	18007391 	stmdane	r0, {r0, r4, r7, r8, r9, ip, sp, lr}
    3998:	00001299 	muleq	r0, r9, r2
    399c:	0a01c401 	beq	749a8 <startup-0x1ff8b658>
    39a0:	000000a7 	andeq	r0, r0, r7, lsr #1
    39a4:	20001874 	andcs	r1, r0, r4, ror r8
    39a8:	00000016 	andeq	r0, r0, r6, lsl r0
    39ac:	1c619c01 	stclne	12, cr9, [r1], #-4
    39b0:	67120000 	ldrvs	r0, [r2, -r0]
    39b4:	01000013 	tsteq	r0, r3, lsl r0
    39b8:	852801c4 	strhi	r0, [r8, #-452]!	; 0xfffffe3c
    39bc:	02000005 	andeq	r0, r0, #5
    39c0:	18007491 	stmdane	r0, {r0, r4, r7, sl, ip, sp, lr}
    39c4:	000012aa 	andeq	r1, r0, sl, lsr #5
    39c8:	0a01b601 	beq	711d4 <startup-0x1ff8ee2c>
    39cc:	000000c9 	andeq	r0, r0, r9, asr #1
    39d0:	20001860 	andcs	r1, r0, r0, ror #16
    39d4:	00000014 	andeq	r0, r0, r4, lsl r0
    39d8:	1c8d9c01 	stcne	12, cr9, [sp], {1}
    39dc:	67120000 	ldrvs	r0, [r2, -r0]
    39e0:	01000013 	tsteq	r0, r3, lsl r0
    39e4:	852601b6 	strhi	r0, [r6, #-438]!	; 0xfffffe4a
    39e8:	02000005 	andeq	r0, r0, #5
    39ec:	16007491 			; <UNDEFINED> instruction: 0x16007491
    39f0:	00001160 	andeq	r1, r0, r0, ror #2
    39f4:	0601a801 	streq	sl, [r1], -r1, lsl #16
    39f8:	20001848 	andcs	r1, r0, r8, asr #16
    39fc:	00000018 	andeq	r0, r0, r8, lsl r0
    3a00:	1cc59c01 	stclne	12, cr9, [r5], {1}
    3a04:	67120000 	ldrvs	r0, [r2, -r0]
    3a08:	01000013 	tsteq	r0, r3, lsl r0
    3a0c:	852501a8 	strhi	r0, [r5, #-424]!	; 0xfffffe58
    3a10:	02000005 	andeq	r0, r0, #5
    3a14:	67127491 			; <UNDEFINED> instruction: 0x67127491
    3a18:	01000011 	tsteq	r0, r1, lsl r0
    3a1c:	c93401a8 	ldmdbgt	r4!, {r3, r5, r7, r8}
    3a20:	02000000 	andeq	r0, r0, #0
    3a24:	16007091 			; <UNDEFINED> instruction: 0x16007091
    3a28:	00001839 	andeq	r1, r0, r9, lsr r8
    3a2c:	06019901 	streq	r9, [r1], -r1, lsl #18
    3a30:	20001830 	andcs	r1, r0, r0, lsr r8
    3a34:	00000018 	andeq	r0, r0, r8, lsl r0
    3a38:	1cfd9c01 	ldclne	12, cr9, [sp], #4
    3a3c:	67120000 	ldrvs	r0, [r2, -r0]
    3a40:	01000013 	tsteq	r0, r3, lsl r0
    3a44:	85220199 	strhi	r0, [r2, #-409]!	; 0xfffffe67
    3a48:	02000005 	andeq	r0, r0, #5
    3a4c:	30127491 	mulscc	r2, r1, r4
    3a50:	0100000c 	tsteq	r0, ip
    3a54:	c9310199 	ldmdbgt	r1!, {r0, r3, r4, r7, r8}
    3a58:	02000000 	andeq	r0, r0, #0
    3a5c:	16007091 			; <UNDEFINED> instruction: 0x16007091
    3a60:	000010df 	ldrdeq	r1, [r0], -pc	; <UNPREDICTABLE>
    3a64:	06017f01 	streq	r7, [r1], -r1, lsl #30
    3a68:	200017e8 	andcs	r1, r0, r8, ror #15
    3a6c:	00000048 	andeq	r0, r0, r8, asr #32
    3a70:	1d459c01 	stclne	12, cr9, [r5, #-4]
    3a74:	67120000 	ldrvs	r0, [r2, -r0]
    3a78:	01000013 	tsteq	r0, r3, lsl r0
    3a7c:	8529017f 	strhi	r0, [r9, #-383]!	; 0xfffffe81
    3a80:	02000005 	andeq	r0, r0, #5
    3a84:	7f126c91 	svcvc	0x00126c91
    3a88:	0100000c 	tsteq	r0, ip
    3a8c:	a738017f 			; <UNDEFINED> instruction: 0xa738017f
    3a90:	02000000 	andeq	r0, r0, #0
    3a94:	f3136a91 	vpmin.u16	d6, d19, d1
    3a98:	0100000f 	tsteq	r0, pc
    3a9c:	a70c0181 	strge	r0, [ip, -r1, lsl #3]
    3aa0:	02000000 	andeq	r0, r0, #0
    3aa4:	16007691 			; <UNDEFINED> instruction: 0x16007691
    3aa8:	00001609 	andeq	r1, r0, r9, lsl #12
    3aac:	06016801 	streq	r6, [r1], -r1, lsl #16
    3ab0:	200017b8 			; <UNDEFINED> instruction: 0x200017b8
    3ab4:	00000030 	andeq	r0, r0, r0, lsr r0
    3ab8:	1d8d9c01 	stcne	12, cr9, [sp, #4]
    3abc:	67120000 	ldrvs	r0, [r2, -r0]
    3ac0:	01000013 	tsteq	r0, r3, lsl r0
    3ac4:	85270168 	strhi	r0, [r7, #-360]!	; 0xfffffe98
    3ac8:	02000005 	andeq	r0, r0, #5
    3acc:	c8127491 	ldmdagt	r2, {r0, r4, r7, sl, ip, sp, lr}
    3ad0:	01000013 	tsteq	r0, r3, lsl r0
    3ad4:	a7360168 	ldrge	r0, [r6, -r8, ror #2]!
    3ad8:	02000000 	andeq	r0, r0, #0
    3adc:	0b127291 	bleq	4a0528 <startup-0x1fb5fad8>
    3ae0:	01000014 	tsteq	r0, r4, lsl r0
    3ae4:	a74a0168 	strbge	r0, [sl, -r8, ror #2]
    3ae8:	02000000 	andeq	r0, r0, #0
    3aec:	16007091 			; <UNDEFINED> instruction: 0x16007091
    3af0:	000012b9 			; <UNDEFINED> instruction: 0x000012b9
    3af4:	06015401 	streq	r5, [r1], -r1, lsl #8
    3af8:	20001788 	andcs	r1, r0, r8, lsl #15
    3afc:	00000030 	andeq	r0, r0, r0, lsr r0
    3b00:	1db59c01 	ldcne	12, cr9, [r5, #4]!
    3b04:	3f120000 	svccc	0x00120000
    3b08:	01000015 	tsteq	r0, r5, lsl r0
    3b0c:	b5360154 	ldrlt	r0, [r6, #-340]!	; 0xfffffeac
    3b10:	0200001d 	andeq	r0, r0, #29
    3b14:	15007491 	strne	r7, [r0, #-1169]	; 0xfffffb6f
    3b18:	0003ab04 	andeq	sl, r3, r4, lsl #22
    3b1c:	165e1600 	ldrbne	r1, [lr], -r0, lsl #12
    3b20:	20010000 	andcs	r0, r1, r0
    3b24:	16900601 	ldrne	r0, [r0], r1, lsl #12
    3b28:	00f82000 	rscseq	r2, r8, r0
    3b2c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3b30:	00001e03 	andeq	r1, r0, r3, lsl #28
    3b34:	00136712 	andseq	r6, r3, r2, lsl r7
    3b38:	01200100 			; <UNDEFINED> instruction: 0x01200100
    3b3c:	00058524 	andeq	r8, r5, r4, lsr #10
    3b40:	6c910200 	lfmvs	f0, 4, [r1], {0}
    3b44:	00153f12 	andseq	r3, r5, r2, lsl pc
    3b48:	01200100 			; <UNDEFINED> instruction: 0x01200100
    3b4c:	001db543 	andseq	fp, sp, r3, asr #10
    3b50:	68910200 	ldmvs	r1, {r9}
    3b54:	000ff313 	andeq	pc, pc, r3, lsl r3	; <UNPREDICTABLE>
    3b58:	01220100 			; <UNDEFINED> instruction: 0x01220100
    3b5c:	0000a70c 	andeq	sl, r0, ip, lsl #14
    3b60:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    3b64:	195a1900 	ldmdbne	sl, {r8, fp, ip}^
    3b68:	c8010000 	stmdagt	r1, {}	; <UNPREDICTABLE>
    3b6c:	0014c006 	andseq	ip, r4, r6
    3b70:	0001d020 	andeq	sp, r1, r0, lsr #32
    3b74:	1a9c0100 	bne	fe703f7c <APBAHBPrescTable+0xde70070c>
    3b78:	00001367 	andeq	r1, r0, r7, ror #6
    3b7c:	851ec801 	ldrhi	ip, [lr, #-2049]	; 0xfffff7ff
    3b80:	02000005 	andeq	r0, r0, #5
    3b84:	00007491 	muleq	r0, r1, r4

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	110e1b0e 	tstne	lr, lr, lsl #22
   c:	10061201 	andne	r1, r6, r1, lsl #4
  10:	02000017 	andeq	r0, r0, #23
  14:	0b0b0024 	bleq	2c00ac <startup-0x1fd3ff54>
  18:	0e030b3e 	vmoveq.16	d3[0], r0
  1c:	16030000 	strne	r0, [r3], -r0
  20:	3a0e0300 	bcc	380c28 <startup-0x1fc7f3d8>
  24:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  28:	0013490b 	andseq	r4, r3, fp, lsl #18
  2c:	00240400 	eoreq	r0, r4, r0, lsl #8
  30:	0b3e0b0b 	bleq	f82c64 <startup-0x1f07d39c>
  34:	00000803 	andeq	r0, r0, r3, lsl #16
  38:	49003505 	stmdbmi	r0, {r0, r2, r8, sl, ip, sp}
  3c:	06000013 			; <UNDEFINED> instruction: 0x06000013
  40:	13490026 	movtne	r0, #36902	; 0x9026
  44:	01070000 	mrseq	r0, (UNDEF: 7)
  48:	01134901 	tsteq	r3, r1, lsl #18
  4c:	08000013 	stmdaeq	r0, {r0, r1, r4}
  50:	13490021 	movtne	r0, #36897	; 0x9021
  54:	00000b2f 	andeq	r0, r0, pc, lsr #22
  58:	03003409 	movweq	r3, #1033	; 0x409
  5c:	3b0b3a0e 	blcc	2ce89c <startup-0x1fd31764>
  60:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
  64:	3c193f13 	ldccc	15, cr3, [r9], {19}
  68:	0a000019 	beq	d4 <startup-0x1fffff2c>
  6c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  70:	0b3b0b3a 	bleq	ec2d60 <startup-0x1f13d2a0>
  74:	13490b39 	movtne	r0, #39737	; 0x9b39
  78:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
  7c:	040b0000 	streq	r0, [fp], #-0
  80:	0b0b3e01 	bleq	2cf88c <startup-0x1fd30774>
  84:	3a13490b 	bcc	4d24b8 <startup-0x1fb2db48>
  88:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
  8c:	0013010b 	andseq	r0, r3, fp, lsl #2
  90:	00280c00 	eoreq	r0, r8, r0, lsl #24
  94:	0b1c0e03 	bleq	7038a8 <startup-0x1f8fc758>
  98:	280d0000 	stmdacs	sp, {}	; <UNPREDICTABLE>
  9c:	1c080300 	stcne	3, cr0, [r8], {-0}
  a0:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
  a4:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
  a8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  ac:	13490b39 	movtne	r0, #39737	; 0x9b39
  b0:	130f0000 	movwne	r0, #61440	; 0xf000
  b4:	3a0b0b01 	bcc	2c2cc0 <startup-0x1fd3d340>
  b8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
  bc:	0013010b 	andseq	r0, r3, fp, lsl #2
  c0:	000d1000 	andeq	r1, sp, r0
  c4:	0b3a0803 	bleq	e820d8 <startup-0x1f17df28>
  c8:	0b39053b 	bleq	e415bc <startup-0x1f1bea44>
  cc:	0b381349 	bleq	e04df8 <startup-0x1f1fb208>
  d0:	0d110000 	ldceq	0, cr0, [r1, #-0]
  d4:	3a0e0300 	bcc	380cdc <startup-0x1fc7f324>
  d8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
  dc:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
  e0:	1200000b 	andne	r0, r0, #11
  e4:	0b0b0113 	bleq	2c0538 <startup-0x1fd3fac8>
  e8:	0b3b0b3a 	bleq	ec2dd8 <startup-0x1f13d228>
  ec:	13010b39 	movwne	r0, #6969	; 0x1b39
  f0:	0d130000 	ldceq	0, cr0, [r3, #-0]
  f4:	3a0e0300 	bcc	380cfc <startup-0x1fc7f304>
  f8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  fc:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 100:	1400000b 	strne	r0, [r0], #-11
 104:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 108:	0b3b0b3a 	bleq	ec2df8 <startup-0x1f13d208>
 10c:	13490b39 	movtne	r0, #39737	; 0x9b39
 110:	00001802 	andeq	r1, r0, r2, lsl #16
 114:	3f012e15 	svccc	0x00012e15
 118:	3a0e0319 	bcc	380d84 <startup-0x1fc7f27c>
 11c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 120:	1119270b 	tstne	r9, fp, lsl #14
 124:	40061201 	andmi	r1, r6, r1, lsl #4
 128:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 12c:	00001301 	andeq	r1, r0, r1, lsl #6
 130:	03000516 	movweq	r0, #1302	; 0x516
 134:	3b0b3a0e 	blcc	2ce974 <startup-0x1fd3168c>
 138:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 13c:	00180213 	andseq	r0, r8, r3, lsl r2
 140:	012e1700 			; <UNDEFINED> instruction: 0x012e1700
 144:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 148:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 14c:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 150:	01111349 	tsteq	r1, r9, asr #6
 154:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 158:	01194297 			; <UNDEFINED> instruction: 0x01194297
 15c:	18000013 	stmdane	r0, {r0, r1, r4}
 160:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 164:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 168:	13490b39 	movtne	r0, #39737	; 0x9b39
 16c:	00001802 	andeq	r1, r0, r2, lsl #16
 170:	3f002e19 	svccc	0x00002e19
 174:	3a0e0319 	bcc	380de0 <startup-0x1fc7f220>
 178:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 17c:	1119270b 	tstne	r9, fp, lsl #14
 180:	40061201 	andmi	r1, r6, r1, lsl #4
 184:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 188:	341a0000 	ldrcc	r0, [sl], #-0
 18c:	3a080300 	bcc	200d94 <startup-0x1fdff26c>
 190:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 194:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 198:	1b000018 	blne	200 <startup-0x1ffffe00>
 19c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 1a0:	0b3a0e03 	bleq	e839b4 <startup-0x1f17c64c>
 1a4:	0b39053b 	bleq	e41698 <startup-0x1f1be968>
 1a8:	01111927 	tsteq	r1, r7, lsr #18
 1ac:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 1b0:	01194296 			; <UNDEFINED> instruction: 0x01194296
 1b4:	1c000013 	stcne	0, cr0, [r0], {19}
 1b8:	0b0b000f 	bleq	2c01fc <startup-0x1fd3fe04>
 1bc:	00001349 	andeq	r1, r0, r9, asr #6
 1c0:	3f002e1d 	svccc	0x00002e1d
 1c4:	3a0e0319 	bcc	380e30 <startup-0x1fc7f1d0>
 1c8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 1cc:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 1d0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 1d4:	97184006 	ldrls	r4, [r8, -r6]
 1d8:	00001942 	andeq	r1, r0, r2, asr #18
 1dc:	3f012e1e 	svccc	0x00012e1e
 1e0:	3a0e0319 	bcc	380e4c <startup-0x1fc7f1b4>
 1e4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 1e8:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 1ec:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 1f0:	96184006 	ldrls	r4, [r8], -r6
 1f4:	13011942 	movwne	r1, #6466	; 0x1942
 1f8:	2e1f0000 	cdpcs	0, 1, cr0, cr15, cr0, {0}
 1fc:	03193f00 	tsteq	r9, #0, 30
 200:	3b0b3a0e 	blcc	2cea40 <startup-0x1fd315c0>
 204:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 208:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 20c:	97184006 	ldrls	r4, [r8, -r6]
 210:	00001942 	andeq	r1, r0, r2, asr #18
 214:	01110100 	tsteq	r1, r0, lsl #2
 218:	0b130e25 	bleq	4c3ab4 <startup-0x1fb3c54c>
 21c:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 220:	01111755 	tsteq	r1, r5, asr r7
 224:	00001710 	andeq	r1, r0, r0, lsl r7
 228:	0b002402 	bleq	9238 <startup-0x1fff6dc8>
 22c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 230:	0300000e 	movweq	r0, #14
 234:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 238:	0b3b0b3a 	bleq	ec2f28 <startup-0x1f13d0d8>
 23c:	13490b39 	movtne	r0, #39737	; 0x9b39
 240:	24040000 	strcs	r0, [r4], #-0
 244:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 248:	0008030b 	andeq	r0, r8, fp, lsl #6
 24c:	00350500 	eorseq	r0, r5, r0, lsl #10
 250:	00001349 	andeq	r1, r0, r9, asr #6
 254:	03003406 	movweq	r3, #1030	; 0x406
 258:	3b0b3a0e 	blcc	2cea98 <startup-0x1fd31568>
 25c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 260:	3c193f13 	ldccc	15, cr3, [r9], {19}
 264:	07000019 	smladeq	r0, r9, r0, r0
 268:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 26c:	0b3b0b3a 	bleq	ec2f5c <startup-0x1f13d0a4>
 270:	13490b39 	movtne	r0, #39737	; 0x9b39
 274:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 278:	04080000 	streq	r0, [r8], #-0
 27c:	0b0b3e01 	bleq	2cfa88 <startup-0x1fd30578>
 280:	3a13490b 	bcc	4d26b4 <startup-0x1fb2d94c>
 284:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 288:	0013010b 	andseq	r0, r3, fp, lsl #2
 28c:	00280900 	eoreq	r0, r8, r0, lsl #18
 290:	0b1c0e03 	bleq	703aa4 <startup-0x1f8fc55c>
 294:	130a0000 	movwne	r0, #40960	; 0xa000
 298:	3a0b0b01 	bcc	2c2ea4 <startup-0x1fd3d15c>
 29c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 2a0:	0013010b 	andseq	r0, r3, fp, lsl #2
 2a4:	000d0b00 	andeq	r0, sp, r0, lsl #22
 2a8:	0b3a0e03 	bleq	e83abc <startup-0x1f17c544>
 2ac:	0b39053b 	bleq	e417a0 <startup-0x1f1be860>
 2b0:	0b381349 	bleq	e04fdc <startup-0x1f1fb024>
 2b4:	0d0c0000 	stceq	0, cr0, [ip, #-0]
 2b8:	3a080300 	bcc	200ec0 <startup-0x1fdff140>
 2bc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 2c0:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 2c4:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
 2c8:	13490101 	movtne	r0, #37121	; 0x9101
 2cc:	00001301 	andeq	r1, r0, r1, lsl #6
 2d0:	4900210e 	stmdbmi	r0, {r1, r2, r3, r8, sp}
 2d4:	000b2f13 	andeq	r2, fp, r3, lsl pc
 2d8:	00160f00 	andseq	r0, r6, r0, lsl #30
 2dc:	0b3a0e03 	bleq	e83af0 <startup-0x1f17c510>
 2e0:	0b39053b 	bleq	e417d4 <startup-0x1f1be82c>
 2e4:	00001349 	andeq	r1, r0, r9, asr #6
 2e8:	3e010410 	cfmvdlrcc	mvd1, r0
 2ec:	490b0b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp}
 2f0:	3b0b3a13 	blcc	2ceb44 <startup-0x1fd314bc>
 2f4:	010b390b 	tsteq	fp, fp, lsl #18
 2f8:	11000013 	tstne	r0, r3, lsl r0
 2fc:	0b0b0113 	bleq	2c0750 <startup-0x1fd3f8b0>
 300:	0b3b0b3a 	bleq	ec2ff0 <startup-0x1f13d010>
 304:	13010b39 	movwne	r0, #6969	; 0x1b39
 308:	0d120000 	ldceq	0, cr0, [r2, #-0]
 30c:	3a0e0300 	bcc	380f14 <startup-0x1fc7f0ec>
 310:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 314:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 318:	1300000b 	movwne	r0, #11
 31c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 320:	0b3a0e03 	bleq	e83b34 <startup-0x1f17c4cc>
 324:	0b390b3b 	bleq	e43018 <startup-0x1f1bcfe8>
 328:	01111927 	tsteq	r1, r7, lsr #18
 32c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 330:	01194296 			; <UNDEFINED> instruction: 0x01194296
 334:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
 338:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 33c:	0b3b0b3a 	bleq	ec302c <startup-0x1f13cfd4>
 340:	13490b39 	movtne	r0, #39737	; 0x9b39
 344:	00001802 	andeq	r1, r0, r2, lsl #16
 348:	03003415 	movweq	r3, #1045	; 0x415
 34c:	3b0b3a08 	blcc	2ceb74 <startup-0x1fd3148c>
 350:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 354:	00180213 	andseq	r0, r8, r3, lsl r2
 358:	010b1600 	tsteq	fp, r0, lsl #12
 35c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 360:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
 364:	03193f01 	tsteq	r9, #1, 30
 368:	3b0b3a0e 	blcc	2ceba8 <startup-0x1fd31458>
 36c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 370:	00193c13 	andseq	r3, r9, r3, lsl ip
 374:	00181800 	andseq	r1, r8, r0, lsl #16
 378:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
 37c:	03193f00 	tsteq	r9, #0, 30
 380:	3b0b3a0e 	blcc	2cebc0 <startup-0x1fd31440>
 384:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 388:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 38c:	97184006 	ldrls	r4, [r8, -r6]
 390:	00001942 	andeq	r1, r0, r2, asr #18
 394:	01110100 	tsteq	r1, r0, lsl #2
 398:	0b130e25 	bleq	4c3c34 <startup-0x1fb3c3cc>
 39c:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 3a0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 3a4:	00001710 	andeq	r1, r0, r0, lsl r7
 3a8:	0b002402 	bleq	93b8 <startup-0x1fff6c48>
 3ac:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 3b0:	0300000e 	movweq	r0, #14
 3b4:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 3b8:	0b3b0b3a 	bleq	ec30a8 <startup-0x1f13cf58>
 3bc:	13490b39 	movtne	r0, #39737	; 0x9b39
 3c0:	24040000 	strcs	r0, [r4], #-0
 3c4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 3c8:	0008030b 	andeq	r0, r8, fp, lsl #6
 3cc:	00350500 	eorseq	r0, r5, r0, lsl #10
 3d0:	00001349 	andeq	r1, r0, r9, asr #6
 3d4:	03003406 	movweq	r3, #1030	; 0x406
 3d8:	3b0b3a0e 	blcc	2cec18 <startup-0x1fd313e8>
 3dc:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 3e0:	3c193f13 	ldccc	15, cr3, [r9], {19}
 3e4:	07000019 	smladeq	r0, r9, r0, r0
 3e8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 3ec:	0b3b0b3a 	bleq	ec30dc <startup-0x1f13cf24>
 3f0:	13490b39 	movtne	r0, #39737	; 0x9b39
 3f4:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 3f8:	04080000 	streq	r0, [r8], #-0
 3fc:	0b0b3e01 	bleq	2cfc08 <startup-0x1fd303f8>
 400:	3a13490b 	bcc	4d2834 <startup-0x1fb2d7cc>
 404:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 408:	0013010b 	andseq	r0, r3, fp, lsl #2
 40c:	00280900 	eoreq	r0, r8, r0, lsl #18
 410:	0b1c0e03 	bleq	703c24 <startup-0x1f8fc3dc>
 414:	130a0000 	movwne	r0, #40960	; 0xa000
 418:	3a0b0b01 	bcc	2c3024 <startup-0x1fd3cfdc>
 41c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 420:	0013010b 	andseq	r0, r3, fp, lsl #2
 424:	000d0b00 	andeq	r0, sp, r0, lsl #22
 428:	0b3a0e03 	bleq	e83c3c <startup-0x1f17c3c4>
 42c:	0b39053b 	bleq	e41920 <startup-0x1f1be6e0>
 430:	0b381349 	bleq	e0515c <startup-0x1f1faea4>
 434:	0d0c0000 	stceq	0, cr0, [ip, #-0]
 438:	3a080300 	bcc	201040 <startup-0x1fdfefc0>
 43c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 440:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 444:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
 448:	13490101 	movtne	r0, #37121	; 0x9101
 44c:	00001301 	andeq	r1, r0, r1, lsl #6
 450:	4900210e 	stmdbmi	r0, {r1, r2, r3, r8, sp}
 454:	000b2f13 	andeq	r2, fp, r3, lsl pc
 458:	00160f00 	andseq	r0, r6, r0, lsl #30
 45c:	0b3a0e03 	bleq	e83c70 <startup-0x1f17c390>
 460:	0b39053b 	bleq	e41954 <startup-0x1f1be6ac>
 464:	00001349 	andeq	r1, r0, r9, asr #6
 468:	3e010410 	cfmvdlrcc	mvd1, r0
 46c:	490b0b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp}
 470:	3b0b3a13 	blcc	2cecc4 <startup-0x1fd3133c>
 474:	010b390b 	tsteq	fp, fp, lsl #18
 478:	11000013 	tstne	r0, r3, lsl r0
 47c:	0b0b0113 	bleq	2c08d0 <startup-0x1fd3f730>
 480:	0b3b0b3a 	bleq	ec3170 <startup-0x1f13ce90>
 484:	13010b39 	movwne	r0, #6969	; 0x1b39
 488:	0d120000 	ldceq	0, cr0, [r2, #-0]
 48c:	3a0e0300 	bcc	381094 <startup-0x1fc7ef6c>
 490:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 494:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 498:	1300000b 	movwne	r0, #11
 49c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 4a0:	0b3a0e03 	bleq	e83cb4 <startup-0x1f17c34c>
 4a4:	0b39053b 	bleq	e41998 <startup-0x1f1be668>
 4a8:	01111927 	tsteq	r1, r7, lsr #18
 4ac:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 4b0:	01194297 			; <UNDEFINED> instruction: 0x01194297
 4b4:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
 4b8:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 4bc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 4c0:	13490b39 	movtne	r0, #39737	; 0x9b39
 4c4:	00001802 	andeq	r1, r0, r2, lsl #16
 4c8:	03003415 	movweq	r3, #1045	; 0x415
 4cc:	3b0b3a0e 	blcc	2ced0c <startup-0x1fd312f4>
 4d0:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 4d4:	00180213 	andseq	r0, r8, r3, lsl r2
 4d8:	000f1600 	andeq	r1, pc, r0, lsl #12
 4dc:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 4e0:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
 4e4:	03193f01 	tsteq	r9, #1, 30
 4e8:	3b0b3a0e 	blcc	2ced28 <startup-0x1fd312d8>
 4ec:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
 4f0:	11134919 	tstne	r3, r9, lsl r9
 4f4:	40061201 	andmi	r1, r6, r1, lsl #4
 4f8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 4fc:	00001301 	andeq	r1, r0, r1, lsl #6
 500:	03003418 	movweq	r3, #1048	; 0x418
 504:	3b0b3a08 	blcc	2ced2c <startup-0x1fd312d4>
 508:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 50c:	00180213 	andseq	r0, r8, r3, lsl r2
 510:	012e1900 			; <UNDEFINED> instruction: 0x012e1900
 514:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 518:	0b3b0b3a 	bleq	ec3208 <startup-0x1f13cdf8>
 51c:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 520:	06120111 			; <UNDEFINED> instruction: 0x06120111
 524:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 528:	00130119 	andseq	r0, r3, r9, lsl r1
 52c:	00051a00 	andeq	r1, r5, r0, lsl #20
 530:	0b3a0e03 	bleq	e83d44 <startup-0x1f17c2bc>
 534:	0b390b3b 	bleq	e43228 <startup-0x1f1bcdd8>
 538:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 53c:	341b0000 	ldrcc	r0, [fp], #-0
 540:	3a0e0300 	bcc	381148 <startup-0x1fc7eeb8>
 544:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 548:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 54c:	1c000018 	stcne	0, cr0, [r0], {24}
 550:	08030034 	stmdaeq	r3, {r2, r4, r5}
 554:	0b3b0b3a 	bleq	ec3244 <startup-0x1f13cdbc>
 558:	13490b39 	movtne	r0, #39737	; 0x9b39
 55c:	00001802 	andeq	r1, r0, r2, lsl #16
 560:	3f012e1d 	svccc	0x00012e1d
 564:	3a0e0319 	bcc	3811d0 <startup-0x1fc7ee30>
 568:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 56c:	1119270b 	tstne	r9, fp, lsl #14
 570:	40061201 	andmi	r1, r6, r1, lsl #4
 574:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 578:	01000000 	mrseq	r0, (UNDEF: 0)
 57c:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 580:	0e030b13 	vmoveq.32	d3[0], r0
 584:	01110e1b 	tsteq	r1, fp, lsl lr
 588:	17100612 			; <UNDEFINED> instruction: 0x17100612
 58c:	13020000 	movwne	r0, #8192	; 0x2000
 590:	0b0e0301 	bleq	38119c <startup-0x1fc7ee64>
 594:	3b0b3a0b 	blcc	2cedc8 <startup-0x1fd31238>
 598:	010b390b 	tsteq	fp, fp, lsl #18
 59c:	03000013 	movweq	r0, #19
 5a0:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 5a4:	0b3b0b3a 	bleq	ec3294 <startup-0x1f13cd6c>
 5a8:	13490b39 	movtne	r0, #39737	; 0x9b39
 5ac:	00000b38 	andeq	r0, r0, r8, lsr fp
 5b0:	03000d04 	movweq	r0, #3332	; 0xd04
 5b4:	3b0b3a0e 	blcc	2cedf4 <startup-0x1fd3120c>
 5b8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 5bc:	000b3813 	andeq	r3, fp, r3, lsl r8
 5c0:	00240500 	eoreq	r0, r4, r0, lsl #10
 5c4:	0b3e0b0b 	bleq	f831f8 <startup-0x1f07ce08>
 5c8:	00000e03 	andeq	r0, r0, r3, lsl #28
 5cc:	49003506 	stmdbmi	r0, {r1, r2, r8, sl, ip, sp}
 5d0:	07000013 	smladeq	r0, r3, r0, r0
 5d4:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 5d8:	0b3b0b3a 	bleq	ec32c8 <startup-0x1f13cd38>
 5dc:	13490b39 	movtne	r0, #39737	; 0x9b39
 5e0:	2e080000 	cdpcs	0, 0, cr0, cr8, cr0, {0}
 5e4:	03193f01 	tsteq	r9, #1, 30
 5e8:	3b0b3a0e 	blcc	2cee28 <startup-0x1fd311d8>
 5ec:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 5f0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 5f4:	96184006 	ldrls	r4, [r8], -r6
 5f8:	13011942 	movwne	r1, #6466	; 0x1942
 5fc:	05090000 	streq	r0, [r9, #-0]
 600:	3a080300 	bcc	201208 <startup-0x1fdfedf8>
 604:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 608:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 60c:	0a000018 	beq	674 <startup-0x1ffff98c>
 610:	0b0b000f 	bleq	2c0654 <startup-0x1fd3f9ac>
 614:	00001349 	andeq	r1, r0, r9, asr #6
 618:	3f002e0b 	svccc	0x00002e0b
 61c:	3a0e0319 	bcc	381288 <startup-0x1fc7ed78>
 620:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 624:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 628:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 62c:	97184006 	ldrls	r4, [r8, -r6]
 630:	00001942 	andeq	r1, r0, r2, asr #18
 634:	3f012e0c 	svccc	0x00012e0c
 638:	3a0e0319 	bcc	3812a4 <startup-0x1fc7ed5c>
 63c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 640:	1119270b 	tstne	r9, fp, lsl #14
 644:	40061201 	andmi	r1, r6, r1, lsl #4
 648:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 64c:	01000000 	mrseq	r0, (UNDEF: 0)
 650:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 654:	0e030b13 	vmoveq.32	d3[0], r0
 658:	01110e1b 	tsteq	r1, fp, lsl lr
 65c:	17100612 			; <UNDEFINED> instruction: 0x17100612
 660:	24020000 	strcs	r0, [r2], #-0
 664:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 668:	000e030b 	andeq	r0, lr, fp, lsl #6
 66c:	00160300 	andseq	r0, r6, r0, lsl #6
 670:	0b3a0e03 	bleq	e83e84 <startup-0x1f17c17c>
 674:	0b390b3b 	bleq	e43368 <startup-0x1f1bcc98>
 678:	00001349 	andeq	r1, r0, r9, asr #6
 67c:	0b002404 	bleq	9694 <startup-0x1fff696c>
 680:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 684:	05000008 	streq	r0, [r0, #-8]
 688:	13490035 	movtne	r0, #36917	; 0x9035
 68c:	34060000 	strcc	r0, [r6], #-0
 690:	3a0e0300 	bcc	381298 <startup-0x1fc7ed68>
 694:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 698:	3f13490b 	svccc	0x0013490b
 69c:	00193c19 	andseq	r3, r9, r9, lsl ip
 6a0:	00340700 	eorseq	r0, r4, r0, lsl #14
 6a4:	0b3a0e03 	bleq	e83eb8 <startup-0x1f17c148>
 6a8:	0b390b3b 	bleq	e4339c <startup-0x1f1bcc64>
 6ac:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 6b0:	0000193c 	andeq	r1, r0, ip, lsr r9
 6b4:	3e010408 	cdpcc	4, 0, cr0, cr1, cr8, {0}
 6b8:	490b0b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp}
 6bc:	3b0b3a13 	blcc	2cef10 <startup-0x1fd310f0>
 6c0:	010b3905 	tsteq	fp, r5, lsl #18
 6c4:	09000013 	stmdbeq	r0, {r0, r1, r4}
 6c8:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
 6cc:	00000b1c 	andeq	r0, r0, ip, lsl fp
 6d0:	0300280a 	movweq	r2, #2058	; 0x80a
 6d4:	000b1c08 	andeq	r1, fp, r8, lsl #24
 6d8:	00160b00 	andseq	r0, r6, r0, lsl #22
 6dc:	0b3a0e03 	bleq	e83ef0 <startup-0x1f17c110>
 6e0:	0b39053b 	bleq	e41bd4 <startup-0x1f1be42c>
 6e4:	00001349 	andeq	r1, r0, r9, asr #6
 6e8:	0b01130c 	bleq	45320 <startup-0x1ffbace0>
 6ec:	3b0b3a0b 	blcc	2cef20 <startup-0x1fd310e0>
 6f0:	010b3905 	tsteq	fp, r5, lsl #18
 6f4:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
 6f8:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 6fc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 700:	13490b39 	movtne	r0, #39737	; 0x9b39
 704:	00000b38 	andeq	r0, r0, r8, lsr fp
 708:	03000d0e 	movweq	r0, #3342	; 0xd0e
 70c:	3b0b3a0e 	blcc	2cef4c <startup-0x1fd310b4>
 710:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 714:	000b3813 	andeq	r3, fp, r3, lsl r8
 718:	01130f00 	tsteq	r3, r0, lsl #30
 71c:	0b3a0b0b 	bleq	e83350 <startup-0x1f17ccb0>
 720:	0b390b3b 	bleq	e43414 <startup-0x1f1bcbec>
 724:	00001301 	andeq	r1, r0, r1, lsl #6
 728:	03000d10 	movweq	r0, #3344	; 0xd10
 72c:	3b0b3a0e 	blcc	2cef6c <startup-0x1fd31094>
 730:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 734:	000b3813 	andeq	r3, fp, r3, lsl r8
 738:	012e1100 			; <UNDEFINED> instruction: 0x012e1100
 73c:	0b3a0e03 	bleq	e83f50 <startup-0x1f17c0b0>
 740:	0b39053b 	bleq	e41c34 <startup-0x1f1be3cc>
 744:	01111927 	tsteq	r1, r7, lsr #18
 748:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 74c:	01194297 			; <UNDEFINED> instruction: 0x01194297
 750:	12000013 	andne	r0, r0, #19
 754:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 758:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 75c:	13490b39 	movtne	r0, #39737	; 0x9b39
 760:	00001802 	andeq	r1, r0, r2, lsl #16
 764:	03003413 	movweq	r3, #1043	; 0x413
 768:	3b0b3a0e 	blcc	2cefa8 <startup-0x1fd31058>
 76c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 770:	00180213 	andseq	r0, r8, r3, lsl r2
 774:	00341400 	eorseq	r1, r4, r0, lsl #8
 778:	0b3a0803 	bleq	e8278c <startup-0x1f17d874>
 77c:	0b39053b 	bleq	e41c70 <startup-0x1f1be390>
 780:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 784:	0f150000 	svceq	0x00150000
 788:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 78c:	16000013 			; <UNDEFINED> instruction: 0x16000013
 790:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 794:	0b3a0e03 	bleq	e83fa8 <startup-0x1f17c058>
 798:	0b39053b 	bleq	e41c8c <startup-0x1f1be374>
 79c:	01111927 	tsteq	r1, r7, lsr #18
 7a0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 7a4:	01194297 			; <UNDEFINED> instruction: 0x01194297
 7a8:	17000013 	smladne	r0, r3, r0, r0
 7ac:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 7b0:	0b3a0e03 	bleq	e83fc4 <startup-0x1f17c03c>
 7b4:	0b39053b 	bleq	e41ca8 <startup-0x1f1be358>
 7b8:	01111927 	tsteq	r1, r7, lsr #18
 7bc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 7c0:	01194296 			; <UNDEFINED> instruction: 0x01194296
 7c4:	18000013 	stmdane	r0, {r0, r1, r4}
 7c8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 7cc:	0b3a0e03 	bleq	e83fe0 <startup-0x1f17c020>
 7d0:	0b39053b 	bleq	e41cc4 <startup-0x1f1be33c>
 7d4:	13491927 	movtne	r1, #39207	; 0x9927
 7d8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 7dc:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 7e0:	00130119 	andseq	r0, r3, r9, lsl r1
 7e4:	012e1900 			; <UNDEFINED> instruction: 0x012e1900
 7e8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 7ec:	0b3b0b3a 	bleq	ec34dc <startup-0x1f13cb24>
 7f0:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 7f4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 7f8:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 7fc:	1a000019 	bne	868 <startup-0x1ffff798>
 800:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 804:	0b3b0b3a 	bleq	ec34f4 <startup-0x1f13cb0c>
 808:	13490b39 	movtne	r0, #39737	; 0x9b39
 80c:	00001802 	andeq	r1, r0, r2, lsl #16
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	00000cfc 	strdeq	r0, [r0], -ip
	...
  20:	00000024 	andeq	r0, r0, r4, lsr #32
  24:	0f380002 	svceq	0x00380002
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	20000d0c 	andcs	r0, r0, ip, lsl #26
  34:	000001ec 	andeq	r0, r0, ip, ror #3
  38:	20000000 	andcs	r0, r0, r0
  3c:	0000000c 	andeq	r0, r0, ip
	...
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	15730002 	ldrbne	r0, [r3, #-2]!
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	20000ef8 	strdcs	r0, [r0], -r8
  5c:	0000050a 	andeq	r0, r0, sl, lsl #10
	...
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	1bf20002 	blne	ffc8007c <APBAHBPrescTable+0xdfc7c80c>
  70:	00040000 	andeq	r0, r4, r0
  74:	00000000 	andeq	r0, r0, r0
  78:	20001404 	andcs	r1, r0, r4, lsl #8
  7c:	000000ba 	strheq	r0, [r0], -sl
	...
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	1d620002 	stclne	0, cr0, [r2, #-8]!
  90:	00040000 	andeq	r0, r4, r0
  94:	00000000 	andeq	r0, r0, r0
  98:	200014c0 	andcs	r1, r0, r0, asr #9
  9c:	000021d8 	ldrdeq	r2, [r0], -r8
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	000007d5 	ldrdeq	r0, [r0], -r5
       4:	02040003 	andeq	r0, r4, #3
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
      18:	43010000 	movwmi	r0, #4096	; 0x1000
      1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
      20:	2f737265 	svccs	0x00737265
      24:	6e696d61 	cdpvs	13, 6, cr6, cr9, cr1, {3}
      28:	65442f72 	strbvs	r2, [r4, #-3954]	; 0xfffff08e
      2c:	6f746b73 	svcvs	0x00746b73
      30:	61642f70 	smcvs	17136	; 0x42f0
      34:	72706174 	rsbsvc	r6, r0, #116, 2
      38:	6b656a6f 	blvs	195a9fc <startup-0x1e6a5604>
      3c:	54532f74 	ldrbpl	r2, [r3], #-3956	; 0xfffff08c
      40:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
      44:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
      48:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
      4c:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
      50:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
      54:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
      58:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
      5c:	5f787834 	svcpl	0x00787834
      60:	50647453 	rsbpl	r7, r4, r3, asr r4
      64:	70697265 	rsbvc	r7, r9, r5, ror #4
      68:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
      6c:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
      70:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
      74:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
      78:	61657363 	cmnvs	r5, r3, ror #6
      7c:	635c7070 	cmpvs	ip, #112	; 0x70
      80:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
      84:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
      88:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; fffffec0 <APBAHBPrescTable+0xdfffc650>
      8c:	63675c73 	cmnvs	r7, #29440	; 0x7300
      90:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
      94:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
      98:	6f6e2d6d 	svcvs	0x006e2d6d
      9c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
      a0:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
      a4:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
      a8:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
      ac:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
      b0:	00656e69 	rsbeq	r6, r5, r9, ror #28
      b4:	635c3a63 	cmpvs	ip, #405504	; 0x63000
      b8:	70616573 	rsbvc	r6, r1, r3, ror r5
      bc:	6f635c70 	svcvs	0x00635c70
      c0:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
      c4:	745c6574 	ldrbvc	r6, [ip], #-1396	; 0xfffffa8c
      c8:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
      cc:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
      d0:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
      d4:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
      d8:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
      dc:	61652d65 	cmnvs	r5, r5, ror #26
      e0:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
      e4:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
      e8:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
      ec:	43007379 	movwmi	r7, #889	; 0x379
      f0:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
      f4:	2f737265 	svccs	0x00737265
      f8:	6e696d61 	cdpvs	13, 6, cr6, cr9, cr1, {3}
      fc:	65442f72 	strbvs	r2, [r4, #-3954]	; 0xfffff08e
     100:	6f746b73 	svcvs	0x00746b73
     104:	61642f70 	smcvs	17136	; 0x42f0
     108:	72706174 	rsbsvc	r6, r0, #116, 2
     10c:	6b656a6f 	blvs	195aad0 <startup-0x1e6a5530>
     110:	54532f74 	ldrbpl	r2, [r3], #-3956	; 0xfffff08c
     114:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     118:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
     11c:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
     120:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     124:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
     128:	4d432f62 	stclmi	15, cr2, [r3, #-392]	; 0xfffffe78
     12c:	2f534953 	svccs	0x00534953
     130:	6c636e49 	stclvs	14, cr6, [r3], #-292	; 0xfffffedc
     134:	00656475 	rsbeq	r6, r5, r5, ror r4
     138:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff6fd <APBAHBPrescTable+0xdfffbe8d>
     13c:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
     140:	696d612f 	stmdbvs	sp!, {r0, r1, r2, r3, r5, r8, sp, lr}^
     144:	442f726e 	strtmi	r7, [pc], #-622	; 14c <startup-0x1ffffeb4>
     148:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
     14c:	642f706f 	strtvs	r7, [pc], #-111	; 154 <startup-0x1ffffeac>
     150:	70617461 	rsbvc	r7, r1, r1, ror #8
     154:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xfffff08e
     158:	532f746b 			; <UNDEFINED> instruction: 0x532f746b
     15c:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     160:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
     164:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
     168:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     16c:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
     170:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
     174:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     178:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
     17c:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0xfffffca1
     180:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     184:	445f6870 	ldrbmi	r6, [pc], #-2160	; 18c <startup-0x1ffffe74>
     188:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
     18c:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
     190:	73000063 	movwvc	r0, #99	; 0x63
     194:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     198:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
     19c:	6363725f 	cmnvs	r3, #-268435451	; 0xf0000005
     1a0:	0100632e 	tsteq	r0, lr, lsr #6
     1a4:	645f0000 	ldrbvs	r0, [pc], #-0	; 1ac <startup-0x1ffffe54>
     1a8:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
     1ac:	745f746c 	ldrbvc	r7, [pc], #-1132	; 1b4 <startup-0x1ffffe4c>
     1b0:	73657079 	cmnvc	r5, #121	; 0x79
     1b4:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     1b8:	735f0000 	cmpvc	pc, #0
     1bc:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
     1c0:	00682e74 	rsbeq	r2, r8, r4, ror lr
     1c4:	63000003 	movwvs	r0, #3
     1c8:	5f65726f 	svcpl	0x0065726f
     1cc:	2e346d63 	cdpcs	13, 3, cr6, cr4, cr3, {3}
     1d0:	00040068 	andeq	r0, r4, r8, rrx
     1d4:	73797300 	cmnvc	r9, #0, 6
     1d8:	5f6d6574 	svcpl	0x006d6574
     1dc:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     1e0:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     1e4:	00682e78 	rsbeq	r2, r8, r8, ror lr
     1e8:	73000005 	movwvc	r0, #5
     1ec:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     1f0:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
     1f4:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
     1f8:	74730000 	ldrbtvc	r0, [r3], #-0
     1fc:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     200:	5f787834 	svcpl	0x00787834
     204:	2e636372 	mcrcs	3, 3, r6, cr3, cr2, {3}
     208:	00050068 	andeq	r0, r5, r8, rrx
     20c:	01050000 	mrseq	r0, (UNDEF: 5)
     210:	10020500 	andne	r0, r2, r0, lsl #10
     214:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
     218:	050101e1 	streq	r0, [r1, #-481]	; 0xfffffe1f
     21c:	0605300b 	streq	r3, [r5], -fp
     220:	200d0569 	andcs	r0, sp, r9, ror #10
     224:	05310b05 	ldreq	r0, [r1, #-2821]!	; 0xfffff4fb
     228:	10056906 	andne	r6, r5, r6, lsl #18
     22c:	32060520 	andcc	r0, r6, #32, 10	; 0x8000000
     230:	05201305 	streq	r1, [r0, #-773]!	; 0xfffffcfb
     234:	13054106 	movwne	r4, #20742	; 0x5106
     238:	400b0520 	andmi	r0, fp, r0, lsr #10
     23c:	05690605 	strbeq	r0, [r9, #-1541]!	; 0xfffff9fb
     240:	0605200c 	streq	r2, [r5], -ip
     244:	20100531 	andscs	r0, r0, r1, lsr r5
     248:	03420105 	movteq	r0, #8453	; 0x2105
     24c:	0305e417 	movweq	lr, #21527	; 0x5417
     250:	2026056b 	eorcs	r0, r6, fp, ror #10
     254:	05310305 	ldreq	r0, [r1, #-773]!	; 0xfffffcfb
     258:	01052026 	tsteq	r5, r6, lsr #32
     25c:	740f033d 	strvc	r0, [pc], #-829	; 264 <startup-0x1ffffd9c>
     260:	053d1105 	ldreq	r1, [sp, #-261]!	; 0xfffffefb
     264:	0e052f0f 	cdpeq	15, 0, cr2, cr5, cr15, {0}
     268:	0011053d 	andseq	r0, r1, sp, lsr r5
     26c:	40020402 	andmi	r0, r2, r2, lsl #8
     270:	02001305 	andeq	r1, r0, #335544320	; 0x14000000
     274:	05670204 	strbeq	r0, [r7, #-516]!	; 0xfffffdfc
     278:	0402001b 	streq	r0, [r2], #-27	; 0xffffffe5
     27c:	03053d02 	movweq	r3, #23810	; 0x5d02
     280:	02040200 	andeq	r0, r4, #0, 4
     284:	00330520 	eorseq	r0, r3, r0, lsr #10
     288:	4a010402 	bmi	41298 <startup-0x1ffbed68>
     28c:	054c0705 	strbeq	r0, [ip, #-1797]	; 0xfffff8fb
     290:	0c054a06 			; <UNDEFINED> instruction: 0x0c054a06
     294:	0a054e22 	beq	153b24 <startup-0x1feac4dc>
     298:	2f01053e 	svccs	0x0001053e
     29c:	054a0b03 	strbeq	r0, [sl, #-2819]	; 0xfffff4fd
     2a0:	0f05670c 	svceq	0x0005670c
     2a4:	200a0532 	andcs	r0, sl, r2, lsr r5
     2a8:	4d0d0531 	cfstr32mi	mvfx0, [sp, #-196]	; 0xffffff3c
     2ac:	052e2b05 	streq	r2, [lr, #-2821]!	; 0xfffff4fb
     2b0:	0605200a 	streq	r2, [r5], -sl
     2b4:	200b053f 	andcs	r0, fp, pc, lsr r5
     2b8:	032f0105 			; <UNDEFINED> instruction: 0x032f0105
     2bc:	03057415 	movweq	r7, #21525	; 0x5415
     2c0:	2024056a 	eorcs	r0, r4, sl, ror #10
     2c4:	052e2205 	streq	r2, [lr, #-517]!	; 0xfffffdfb
     2c8:	14032101 	strne	r2, [r3], #-257	; 0xfffffeff
     2cc:	6c030566 	cfstr32vs	mvfx0, [r3], {102}	; 0x66
     2d0:	05202205 	streq	r2, [r0, #-517]!	; 0xfffffdfb
     2d4:	22053103 	andcs	r3, r5, #-1073741824	; 0xc0000000
     2d8:	31030520 	tstcc	r3, r0, lsr #10
     2dc:	0b030705 	bleq	c1ef8 <startup-0x1ff3e108>
     2e0:	20790366 	rsbscs	r0, r9, r6, ror #6
     2e4:	05202605 	streq	r2, [r0, #-1541]!	; 0xfffff9fb
     2e8:	05232f07 	streq	r2, [r3, #-3847]!	; 0xfffff0f9
     2ec:	07052026 	streq	r2, [r5, -r6, lsr #32]
     2f0:	2401052f 	strcs	r0, [r1], #-1327	; 0xfffffad1
     2f4:	05740f03 	ldrbeq	r0, [r4, #-3843]!	; 0xfffff0fd
     2f8:	25056a03 	strcs	r6, [r5, #-2563]	; 0xfffff5fd
     2fc:	2e230520 	cfsh64cs	mvdx0, mvdx3, #16
     300:	03210105 			; <UNDEFINED> instruction: 0x03210105
     304:	056600de 	strbeq	r0, [r6, #-222]!	; 0xffffff22
     308:	17057c1f 	smladne	r5, pc, ip, r7	; <UNPREDICTABLE>
     30c:	2e2f052e 	cfsh64cs	mvdx0, mvdx15, #30
     310:	052e3505 	streq	r3, [lr, #-1285]!	; 0xfffffafb
     314:	25052039 	strcs	r2, [r5, #-57]	; 0xffffffc7
     318:	20400520 	subcs	r0, r0, r0, lsr #10
     31c:	053d1805 	ldreq	r1, [sp, #-2053]!	; 0xfffff7fb
     320:	52052d06 	andpl	r2, r5, #384	; 0x180
     324:	20100520 	andscs	r0, r0, r0, lsr #10
     328:	03220105 			; <UNDEFINED> instruction: 0x03220105
     32c:	0305660e 	movweq	r6, #22030	; 0x560e
     330:	20240569 	eorcs	r0, r4, r9, ror #10
     334:	052e2205 	streq	r2, [lr, #-517]!	; 0xfffffdfb
     338:	1a032101 	bne	c8744 <startup-0x1ff378bc>
     33c:	5d1e0566 	cfldr32pl	mvfx0, [lr, #-408]	; 0xfffffe68
     340:	052e2f05 	streq	r2, [lr, #-3845]!	; 0xfffff0fb
     344:	24052e06 	strcs	r2, [r5], #-3590	; 0xfffff1fa
     348:	20130520 	andscs	r0, r3, r0, lsr #10
     34c:	032f0105 			; <UNDEFINED> instruction: 0x032f0105
     350:	05740185 	ldrbeq	r0, [r4, #-389]!	; 0xfffffe7b
     354:	27056903 	strcs	r6, [r5, -r3, lsl #18]
     358:	2e250520 	cfsh64cs	mvdx0, mvdx5, #16
     35c:	03210105 			; <UNDEFINED> instruction: 0x03210105
     360:	056600e9 	strbeq	r0, [r6, #-233]!	; 0xffffff17
     364:	2f056c1e 	svccs	0x00056c1e
     368:	2e24052e 	cfsh64cs	mvdx0, mvdx4, #30
     36c:	05204105 	streq	r4, [r0, #-261]!	; 0xfffffefb
     370:	36052e06 	strcc	r2, [r5], -r6, lsl #28
     374:	20130520 	andscs	r0, r3, r0, lsr #10
     378:	032f0105 			; <UNDEFINED> instruction: 0x032f0105
     37c:	0305740d 	movweq	r7, #21517	; 0x540d
     380:	20270569 	eorcs	r0, r7, r9, ror #10
     384:	052e2505 	streq	r2, [lr, #-1285]!	; 0xfffffafb
     388:	0e032101 	adfeqs	f2, f3, f1
     38c:	69030566 	stmdbvs	r3, {r1, r2, r5, r6, r8, sl}
     390:	05202405 	streq	r2, [r0, #-1029]!	; 0xfffffbfb
     394:	01052e22 	tsteq	r5, r2, lsr #28
     398:	66150321 	ldrvs	r0, [r5], -r1, lsr #6
     39c:	05590c05 	ldrbeq	r0, [r9, #-3077]	; 0xfffff3fb
     3a0:	0a05340f 	beq	14d3e4 <startup-0x1feb2c1c>
     3a4:	1c053120 	stfnes	f3, [r5], {32}
     3a8:	3c0a054d 	cfstr32cc	mvfx0, [sl], {77}	; 0x4d
     3ac:	053f0605 	ldreq	r0, [pc, #-1541]!	; fffffdaf <APBAHBPrescTable+0xdfffc53f>
     3b0:	0105200d 	tsteq	r5, sp
     3b4:	90180333 	andsls	r0, r8, r3, lsr r3
     3b8:	05590c05 	ldrbeq	r0, [r9, #-3077]	; 0xfffff3fb
     3bc:	0a05340f 	beq	14d400 <startup-0x1feb2c00>
     3c0:	1c053120 	stfnes	f3, [r5], {32}
     3c4:	3c0a054d 	cfstr32cc	mvfx0, [sl], {77}	; 0x4d
     3c8:	053f0605 	ldreq	r0, [pc, #-1541]!	; fffffdcb <APBAHBPrescTable+0xdfffc55b>
     3cc:	0105200d 	tsteq	r5, sp
     3d0:	01b30333 			; <UNDEFINED> instruction: 0x01b30333
     3d4:	4b0c0574 	blmi	3019ac <startup-0x1fcfe654>
     3d8:	05330f05 	ldreq	r0, [r3, #-3845]!	; 0xfffff0fb
     3dc:	4d31200a 	ldcmi	0, cr2, [r1, #-40]!	; 0xffffffd8
     3e0:	054d0605 	strbeq	r0, [sp, #-1541]	; 0xfffff9fb
     3e4:	0105200d 	tsteq	r5, sp
     3e8:	660d032f 	strvs	r0, [sp], -pc, lsr #6
     3ec:	052f1805 	streq	r1, [pc, #-2053]!	; fffffbef <APBAHBPrescTable+0xdfffc37f>
     3f0:	01052e0b 	tsteq	r5, fp, lsl #28
     3f4:	6617034b 	ldrvs	r0, [r7], -fp, asr #6
     3f8:	054b0c05 	strbeq	r0, [fp, #-3077]	; 0xfffff3fb
     3fc:	0a05330f 	beq	14d040 <startup-0x1feb2fc0>
     400:	054d3120 	strbeq	r3, [sp, #-288]	; 0xfffffee0
     404:	0d054d06 	stceq	13, cr4, [r5, #-24]	; 0xffffffe8
     408:	2f010520 	svccs	0x00010520
     40c:	05660f03 	strbeq	r0, [r6, #-3843]!	; 0xfffff0fd
     410:	0f054b0c 	svceq	0x00054b0c
     414:	200a0533 	andcs	r0, sl, r3, lsr r5
     418:	06054d31 			; <UNDEFINED> instruction: 0x06054d31
     41c:	200d054d 	andcs	r0, sp, sp, asr #10
     420:	032f0105 			; <UNDEFINED> instruction: 0x032f0105
     424:	0c05820f 	sfmeq	f0, 1, [r5], {15}
     428:	330f054b 	movwcc	r0, #62795	; 0xf54b
     42c:	31200a05 			; <UNDEFINED> instruction: 0x31200a05
     430:	054d1605 	strbeq	r1, [sp, #-1541]	; 0xfffff9fb
     434:	06052e0a 	streq	r2, [r5], -sl, lsl #28
     438:	200d053f 	andcs	r0, sp, pc, lsr r5
     43c:	032f0105 			; <UNDEFINED> instruction: 0x032f0105
     440:	0c059024 	stceq	0, cr9, [r5], {36}	; 0x24
     444:	2e15054b 	cfmac32cs	mvfx0, mvfx5, mvfx11
     448:	052e2005 	streq	r2, [lr, #-5]!
     44c:	36052e2c 	strcc	r2, [r5], -ip, lsr #28
     450:	2e45052e 	cdpcs	5, 4, cr0, cr5, cr14, {1}
     454:	05340c05 	ldreq	r0, [r4, #-3077]!	; 0xfffff3fb
     458:	03052e07 	movweq	r2, #24071	; 0x5e07
     45c:	cb22053e 	blgt	88195c <startup-0x1f77e6a4>
     460:	053d0505 	ldreq	r0, [sp, #-1285]!	; 0xfffffafb
     464:	05052222 	streq	r2, [r5, #-546]	; 0xfffffdde
     468:	2615053d 			; <UNDEFINED> instruction: 0x2615053d
     46c:	052e3505 	streq	r3, [lr, #-1285]!	; 0xfffffafb
     470:	053d200f 	ldreq	r2, [sp, #-15]!
     474:	08052e0a 	stmdaeq	r5, {r1, r3, r9, sl, fp, sp}
     478:	3f1b053e 	svccc	0x001b053e
     47c:	05662a05 	strbeq	r2, [r6, #-2565]!	; 0xfffff5fb
     480:	0e052e48 	cdpeq	14, 0, cr2, cr5, cr8, {2}
     484:	411b053c 	tstmi	fp, ip, lsr r5
     488:	05662a05 	strbeq	r2, [r6, #-2565]!	; 0xfffff5fb
     48c:	0e052e48 	cdpeq	14, 0, cr2, cr5, cr8, {2}
     490:	3112053c 	tstcc	r2, ip, lsr r5
     494:	052e3005 	streq	r3, [lr, #-5]!
     498:	0a053c36 	beq	14f578 <startup-0x1feb0a88>
     49c:	2f2a0520 	svccs	0x002a0520
     4a0:	05662205 	strbeq	r2, [r6, #-517]!	; 0xfffffdfb
     4a4:	22052f05 	andcs	r2, r5, #5, 30
     4a8:	05201b03 	streq	r1, [r0, #-2819]!	; 0xfffff4fd
     4ac:	0c053d05 	stceq	13, cr3, [r5], {5}
     4b0:	2e070525 	cfsh32cs	mvfx0, mvfx7, #21
     4b4:	3d1b053d 	cfldr32cc	mvfx0, [fp, #-244]	; 0xffffff0c
     4b8:	05580905 	ldrbeq	r0, [r8, #-2309]	; 0xfffff6fb
     4bc:	3d05222a 	sfmcc	f2, 4, [r5, #-168]	; 0xffffff58
     4c0:	2e1e052e 	cfmul64cs	mvdx0, mvdx14, mvdx14
     4c4:	05310c05 	ldreq	r0, [r1, #-3077]!	; 0xfffff3fb
     4c8:	054b2e07 	strbeq	r2, [fp, #-3591]	; 0xfffff1f9
     4cc:	09053d1b 	stmdbeq	r5, {r0, r1, r3, r4, r8, sl, fp, ip, sp}
     4d0:	222b0558 	eorcs	r0, fp, #88, 10	; 0x16000000
     4d4:	052e3c05 	streq	r3, [lr, #-3077]!	; 0xfffff3fb
     4d8:	0c052e1f 	stceq	14, cr2, [r5], {31}
     4dc:	2e070531 	mcrcs	5, 0, r0, cr7, cr1, {1}
     4e0:	3d1b054b 	cfldr32cc	mvfx0, [fp, #-300]	; 0xfffffed4
     4e4:	05580905 	ldrbeq	r0, [r8, #-2309]	; 0xfffff6fb
     4e8:	3c05222b 	sfmcc	f2, 4, [r5], {43}	; 0x2b
     4ec:	2e1f052e 	cfmul64cs	mvdx0, mvdx15, mvdx14
     4f0:	032f0105 			; <UNDEFINED> instruction: 0x032f0105
     4f4:	0c05ba3f 			; <UNDEFINED> instruction: 0x0c05ba3f
     4f8:	3319054b 	tstcc	r9, #314572800	; 0x12c00000
     4fc:	054a0605 	strbeq	r0, [sl, #-1541]	; 0xfffff9fb
     500:	0c054c11 	stceq	12, cr4, [r5], {17}
     504:	21053120 	tstcs	r5, r0, lsr #2
     508:	3c0c054d 	cfstr32cc	mvfx0, [ip], {77}	; 0x4d
     50c:	053f0805 	ldreq	r0, [pc, #-2053]!	; fffffd0f <APBAHBPrescTable+0xdfffc49f>
     510:	0d05200f 	stceq	0, cr2, [r5, #-60]	; 0xffffffc4
     514:	2e220532 	mcrcs	5, 1, r0, cr2, cr2, {1}
     518:	053c0d05 	ldreq	r0, [ip, #-3333]!	; 0xfffff2fb
     51c:	0a033d01 	beq	cf928 <startup-0x1ff306d8>
     520:	6a03059e 	bvs	c1ba0 <startup-0x1ff3e460>
     524:	05202605 	streq	r2, [r0, #-1541]!	; 0xfffff9fb
     528:	01052e24 	tsteq	r5, r4, lsr #28
     52c:	660c0321 	strvs	r0, [ip], -r1, lsr #6
     530:	05690305 	strbeq	r0, [r9, #-773]!	; 0xfffffcfb
     534:	24052026 	strcs	r2, [r5], #-38	; 0xffffffda
     538:	2101052e 	tstcs	r1, lr, lsr #10
     53c:	6601b803 	strvs	fp, [r1], -r3, lsl #16
     540:	054e0305 	strbeq	r0, [lr, #-773]	; 0xfffffcfb
     544:	01052025 	tsteq	r5, r5, lsr #32
     548:	7416032f 	ldrvc	r0, [r6], #-815	; 0xfffffcd1
     54c:	054b0c05 	strbeq	r0, [fp, #-3077]	; 0xfffff3fb
     550:	0a05330f 	beq	14d194 <startup-0x1feb2e6c>
     554:	054d3f20 	strbeq	r3, [sp, #-3872]	; 0xfffff0e0
     558:	10054d06 	andne	r4, r5, r6, lsl #26
     55c:	3d010520 	cfstr32cc	mvfx0, [r1, #-128]	; 0xffffff80
     560:	05821403 	streq	r1, [r2, #1027]	; 0x403
     564:	0f054b0c 	svceq	0x00054b0c
     568:	200a0533 	andcs	r0, sl, r3, lsr r5
     56c:	06054d3f 			; <UNDEFINED> instruction: 0x06054d3f
     570:	2010054d 	andscs	r0, r0, sp, asr #10
     574:	033d0105 	teqeq	sp, #1073741825	; 0x40000001
     578:	0c058211 	sfmeq	f0, 1, [r5], {17}
     57c:	330f054b 	movwcc	r0, #62795	; 0xf54b
     580:	3f200a05 	svccc	0x00200a05
     584:	054d1d05 	strbeq	r1, [sp, #-3333]	; 0xfffff2fb
     588:	06052e0a 	streq	r2, [r5], -sl, lsl #28
     58c:	2010053f 	andscs	r0, r0, pc, lsr r5
     590:	033d0105 	teqeq	sp, #1073741825	; 0x40000001
     594:	0c057410 	cfstrseq	mvf7, [r5], {16}
     598:	330f054b 	movwcc	r0, #62795	; 0xf54b
     59c:	3f200a05 	svccc	0x00200a05
     5a0:	054d1e05 	strbeq	r1, [sp, #-3589]	; 0xfffff1fb
     5a4:	0a052e23 	beq	14be38 <startup-0x1feb41c8>
     5a8:	3f060520 	svccc	0x00060520
     5ac:	05201005 	streq	r1, [r0, #-5]!
     5b0:	d3033d01 	movwle	r3, #15617	; 0x3d01
     5b4:	0c058200 	sfmeq	f0, 1, [r5], {-0}
     5b8:	330f054b 	movwcc	r0, #62795	; 0xf54b
     5bc:	3f200a05 	svccc	0x00200a05
     5c0:	4d06054d 	cfstr32mi	mvfx0, [r6, #-308]	; 0xfffffecc
     5c4:	05201005 	streq	r1, [r0, #-5]!
     5c8:	f0033d01 			; <UNDEFINED> instruction: 0xf0033d01
     5cc:	03058200 	movweq	r8, #20992	; 0x5200
     5d0:	2028054e 	eorcs	r0, r8, lr, asr #10
     5d4:	032f0105 			; <UNDEFINED> instruction: 0x032f0105
     5d8:	06057425 	streq	r7, [r5], -r5, lsr #8
     5dc:	4c120579 	cfldr32mi	mvfx0, [r2], {121}	; 0x79
     5e0:	056c0105 	strbeq	r0, [ip, #-261]!	; 0xfffffefb
     5e4:	15051e12 	strne	r1, [r5, #-3602]	; 0xfffff1ee
     5e8:	2e12052e 	cfmul64cs	mvdx0, mvdx2, mvdx14
     5ec:	033e0105 	teqeq	lr, #1073741825	; 0x40000001
     5f0:	06057413 			; <UNDEFINED> instruction: 0x06057413
     5f4:	4c120579 	cfldr32mi	mvfx0, [r2], {121}	; 0x79
     5f8:	056c0105 	strbeq	r0, [ip, #-261]!	; 0xfffffefb
     5fc:	15051e12 	strne	r1, [r5, #-3602]	; 0xfffff1ee
     600:	2e12052e 	cfmul64cs	mvdx0, mvdx2, mvdx14
     604:	033e0105 	teqeq	lr, #1073741825	; 0x40000001
     608:	06057411 			; <UNDEFINED> instruction: 0x06057411
     60c:	4c120579 	cfldr32mi	mvfx0, [r2], {121}	; 0x79
     610:	056c0105 	strbeq	r0, [ip, #-261]!	; 0xfffffefb
     614:	15051e12 	strne	r1, [r5, #-3602]	; 0xfffff1ee
     618:	2e12052e 	cfmul64cs	mvdx0, mvdx2, mvdx14
     61c:	033e0105 	teqeq	lr, #1073741825	; 0x40000001
     620:	0605742c 	streq	r7, [r5], -ip, lsr #8
     624:	4c120579 	cfldr32mi	mvfx0, [r2], {121}	; 0x79
     628:	056c0105 	strbeq	r0, [ip, #-261]!	; 0xfffffefb
     62c:	15051e12 	strne	r1, [r5, #-3602]	; 0xfffff1ee
     630:	2e12052e 	cfmul64cs	mvdx0, mvdx2, mvdx14
     634:	033e0105 	teqeq	lr, #1073741825	; 0x40000001
     638:	06057427 	streq	r7, [r5], -r7, lsr #8
     63c:	4c120579 	cfldr32mi	mvfx0, [r2], {121}	; 0x79
     640:	056c0105 	strbeq	r0, [ip, #-261]!	; 0xfffffefb
     644:	15051e12 	strne	r1, [r5, #-3602]	; 0xfffff1ee
     648:	2e12052e 	cfmul64cs	mvdx0, mvdx2, mvdx14
     64c:	033e0105 	teqeq	lr, #1073741825	; 0x40000001
     650:	0605741d 			; <UNDEFINED> instruction: 0x0605741d
     654:	4c130579 	cfldr32mi	mvfx0, [r3], {121}	; 0x79
     658:	056c0105 	strbeq	r0, [ip, #-261]!	; 0xfffffefb
     65c:	16051e13 			; <UNDEFINED> instruction: 0x16051e13
     660:	2e13052e 	cfmul64cs	mvdx0, mvdx3, mvdx14
     664:	033e0105 	teqeq	lr, #1073741825	; 0x40000001
     668:	06057410 			; <UNDEFINED> instruction: 0x06057410
     66c:	4c130579 	cfldr32mi	mvfx0, [r3], {121}	; 0x79
     670:	056c0105 	strbeq	r0, [ip, #-261]!	; 0xfffffefb
     674:	16051e13 			; <UNDEFINED> instruction: 0x16051e13
     678:	2e13052e 	cfmul64cs	mvdx0, mvdx3, mvdx14
     67c:	033e0105 	teqeq	lr, #1073741825	; 0x40000001
     680:	0605740e 	streq	r7, [r5], -lr, lsl #8
     684:	4c130579 	cfldr32mi	mvfx0, [r3], {121}	; 0x79
     688:	056c0105 	strbeq	r0, [ip, #-261]!	; 0xfffffefb
     68c:	16051e13 			; <UNDEFINED> instruction: 0x16051e13
     690:	2e13052e 	cfmul64cs	mvdx0, mvdx3, mvdx14
     694:	033e0105 	teqeq	lr, #1073741825	; 0x40000001
     698:	06057429 	streq	r7, [r5], -r9, lsr #8
     69c:	4c130578 	cfldr32mi	mvfx0, [r3], {120}	; 0x78
     6a0:	056c0105 	strbeq	r0, [ip, #-261]!	; 0xfffffefb
     6a4:	16051e13 			; <UNDEFINED> instruction: 0x16051e13
     6a8:	2e13052e 	cfmul64cs	mvdx0, mvdx3, mvdx14
     6ac:	033e0105 	teqeq	lr, #1073741825	; 0x40000001
     6b0:	06057423 	streq	r7, [r5], -r3, lsr #8
     6b4:	4c130578 	cfldr32mi	mvfx0, [r3], {120}	; 0x78
     6b8:	056c0105 	strbeq	r0, [ip, #-261]!	; 0xfffffefb
     6bc:	16051e13 			; <UNDEFINED> instruction: 0x16051e13
     6c0:	2e13052e 	cfmul64cs	mvdx0, mvdx3, mvdx14
     6c4:	033e0105 	teqeq	lr, #1073741825	; 0x40000001
     6c8:	06057425 	streq	r7, [r5], -r5, lsr #8
     6cc:	4c140578 	cfldr32mi	mvfx0, [r4], {120}	; 0x78
     6d0:	056c0105 	strbeq	r0, [ip, #-261]!	; 0xfffffefb
     6d4:	17051e14 	smladne	r5, r4, lr, r1
     6d8:	2e14052e 	cfmul64cs	mvdx0, mvdx4, mvdx14
     6dc:	033e0105 	teqeq	lr, #1073741825	; 0x40000001
     6e0:	06057414 			; <UNDEFINED> instruction: 0x06057414
     6e4:	4c140578 	cfldr32mi	mvfx0, [r4], {120}	; 0x78
     6e8:	056c0105 	strbeq	r0, [ip, #-261]!	; 0xfffffefb
     6ec:	17051e14 	smladne	r5, r4, lr, r1
     6f0:	2e14052e 	cfmul64cs	mvdx0, mvdx4, mvdx14
     6f4:	033e0105 	teqeq	lr, #1073741825	; 0x40000001
     6f8:	06057412 			; <UNDEFINED> instruction: 0x06057412
     6fc:	4c140578 	cfldr32mi	mvfx0, [r4], {120}	; 0x78
     700:	056c0105 	strbeq	r0, [ip, #-261]!	; 0xfffffefb
     704:	17051e14 	smladne	r5, r4, lr, r1
     708:	2e14052e 	cfmul64cs	mvdx0, mvdx4, mvdx14
     70c:	033e0105 	teqeq	lr, #1073741825	; 0x40000001
     710:	0605742d 	streq	r7, [r5], -sp, lsr #8
     714:	4c140578 	cfldr32mi	mvfx0, [r4], {120}	; 0x78
     718:	056c0105 	strbeq	r0, [ip, #-261]!	; 0xfffffefb
     71c:	17051e14 	smladne	r5, r4, lr, r1
     720:	2e14052e 	cfmul64cs	mvdx0, mvdx4, mvdx14
     724:	033e0105 	teqeq	lr, #1073741825	; 0x40000001
     728:	06057428 	streq	r7, [r5], -r8, lsr #8
     72c:	4c140578 	cfldr32mi	mvfx0, [r4], {120}	; 0x78
     730:	056c0105 	strbeq	r0, [ip, #-261]!	; 0xfffffefb
     734:	17051e14 	smladne	r5, r4, lr, r1
     738:	2e14052e 	cfmul64cs	mvdx0, mvdx4, mvdx14
     73c:	033e0105 	teqeq	lr, #1073741825	; 0x40000001
     740:	0505740c 	streq	r7, [r5, #-1036]	; 0xfffffbf4
     744:	01054c6a 	tsteq	r5, sl, ror #24
     748:	1e05056c 	cfsh32ne	mvfx0, mvfx5, #60
     74c:	03680105 	cmneq	r8, #1073741825	; 0x40000001
     750:	057402ac 	ldrbeq	r0, [r4, #-684]!	; 0xfffffd54
     754:	29059406 	stmdbcs	r5, {r1, r2, sl, ip, pc}
     758:	9701054d 	strls	r0, [r1, -sp, asr #10]
     75c:	051e2905 	ldreq	r2, [lr, #-2309]	; 0xfffff6fb
     760:	29053c2c 	stmdbcs	r5, {r2, r3, r5, sl, fp, ip, sp}
     764:	4c01054a 	cfstr32mi	mvfx0, [r1], {74}	; 0x4a
     768:	05661703 	strbeq	r1, [r6, #-1795]!	; 0xfffff8fd
     76c:	052f670c 	streq	r6, [pc, #-1804]!	; 68 <startup-0x1fffff98>
     770:	12052f0e 	andne	r2, r5, #14, 30	; 0x38
     774:	4a070550 	bmi	1c1cbc <startup-0x1fe3e344>
     778:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
     77c:	0f053e14 	svceq	0x00053e14
     780:	3e0b0520 	cfsh32cc	mvfx0, mvfx11, #16
     784:	053e1405 	ldreq	r1, [lr, #-1029]!	; 0xfffffbfb
     788:	1405200f 	strne	r2, [r5], #-15
     78c:	200f0540 	andcs	r0, pc, r0, asr #10
     790:	05321205 	ldreq	r1, [r2, #-517]!	; 0xfffffdfb
     794:	2a052e07 	bcs	14bfb8 <startup-0x1feb4048>
     798:	6606053d 			; <UNDEFINED> instruction: 0x6606053d
     79c:	5c220f05 	stcpl	15, cr0, [r2], #-20	; 0xffffffec
     7a0:	054d0a05 	strbeq	r0, [sp, #-2565]	; 0xfffff5fb
     7a4:	0a033d01 	beq	cfbb0 <startup-0x1ff30450>
     7a8:	300c0566 	andcc	r0, ip, r6, ror #10
     7ac:	03750105 	cmneq	r5, #1073741825	; 0x40000001
     7b0:	0c055811 	stceq	8, cr5, [r5], {17}
     7b4:	500b0567 	andpl	r0, fp, r7, ror #10
     7b8:	052e1105 	streq	r1, [lr, #-261]!	; 0xfffffefb
     7bc:	0f053c06 	svceq	0x00053c06
     7c0:	0b054e22 	bleq	154050 <startup-0x1feabfb0>
     7c4:	3d01054d 	cfstr32cc	mvfx0, [r1, #-308]	; 0xfffffecc
     7c8:	05741103 	ldrbeq	r1, [r4, #-259]!	; 0xfffffefd
     7cc:	27056c03 	strcs	r6, [r5, -r3, lsl #24]
     7d0:	3d010520 	cfstr32cc	mvfx0, [r1, #-128]	; 0xffffff80
     7d4:	01000602 	tsteq	r0, r2, lsl #12
     7d8:	0002bd01 	andeq	fp, r2, r1, lsl #26
     7dc:	eb000300 	bl	13e4 <startup-0x1fffec1c>
     7e0:	02000001 	andeq	r0, r0, #1
     7e4:	0d0efb01 	vstreq	d15, [lr, #-4]
     7e8:	01010100 	mrseq	r0, (UNDEF: 17)
     7ec:	00000001 	andeq	r0, r0, r1
     7f0:	01000001 	tsteq	r0, r1
     7f4:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffffdb9 <APBAHBPrescTable+0xdfffc549>
     7f8:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
     7fc:	696d612f 	stmdbvs	sp!, {r0, r1, r2, r3, r5, r8, sp, lr}^
     800:	442f726e 	strtmi	r7, [pc], #-622	; 808 <startup-0x1ffff7f8>
     804:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
     808:	642f706f 	strtvs	r7, [pc], #-111	; 810 <startup-0x1ffff7f0>
     80c:	70617461 	rsbvc	r7, r1, r1, ror #8
     810:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xfffff08e
     814:	552f746b 	strpl	r7, [pc, #-1131]!	; 3b1 <startup-0x1ffffc4f>
     818:	6172746c 	cmnvs	r2, ip, ror #8
     81c:	696e6f73 	stmdbvs	lr!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
     820:	6e615263 	cdpvs	2, 6, cr5, cr1, cr3, {3}
     824:	63006567 	movwvs	r6, #1383	; 0x567
     828:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
     82c:	70706165 	rsbsvc	r6, r0, r5, ror #2
     830:	646f635c 	strbtvs	r6, [pc], #-860	; 838 <startup-0x1ffff7c8>
     834:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
     838:	6f745c65 	svcvs	0x00745c65
     83c:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
     840:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
     844:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
     848:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     84c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
     850:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
     854:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
     858:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     85c:	616d5c65 	cmnvs	sp, r5, ror #24
     860:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
     864:	3a630065 	bcc	18c0a00 <startup-0x1e73f600>
     868:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
     86c:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
     870:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
     874:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
     878:	6f6f745c 	svcvs	0x006f745c
     87c:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
     880:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
     884:	615c6d72 	cmpvs	ip, r2, ror sp
     888:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
     88c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
     890:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     894:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
     898:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
     89c:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
     8a0:	2f3a4300 	svccs	0x003a4300
     8a4:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
     8a8:	6d612f73 	stclvs	15, cr2, [r1, #-460]!	; 0xfffffe34
     8ac:	2f726e69 	svccs	0x00726e69
     8b0:	6b736544 	blvs	1cd9dc8 <startup-0x1e326238>
     8b4:	2f706f74 	svccs	0x00706f74
     8b8:	61746164 	cmnvs	r4, r4, ror #2
     8bc:	6a6f7270 	bvs	1bdd284 <startup-0x1e422d7c>
     8c0:	2f746b65 	svccs	0x00746b65
     8c4:	334d5453 	movtcc	r5, #54355	; 0xd453
     8c8:	5f344632 	svcpl	0x00344632
     8cc:	2f62696c 	svccs	0x0062696c
     8d0:	334d5453 	movtcc	r5, #54355	; 0xd453
     8d4:	5f344632 	svcpl	0x00344632
     8d8:	2f62696c 	svccs	0x0062696c
     8dc:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
     8e0:	6e492f53 	mcrvs	15, 2, r2, cr9, cr3, {2}
     8e4:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     8e8:	3a430065 	bcc	10c0a84 <startup-0x1ef3f57c>
     8ec:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
     8f0:	612f7372 			; <UNDEFINED> instruction: 0x612f7372
     8f4:	726e696d 	rsbvc	r6, lr, #1785856	; 0x1b4000
     8f8:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
     8fc:	706f746b 	rsbvc	r7, pc, fp, ror #8
     900:	7461642f 	strbtvc	r6, [r1], #-1071	; 0xfffffbd1
     904:	6f727061 	svcvs	0x00727061
     908:	746b656a 	strbtvc	r6, [fp], #-1386	; 0xfffffa96
     90c:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     910:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
     914:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     918:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     91c:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
     920:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     924:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     928:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
     92c:	535f7878 	cmppl	pc, #120, 16	; 0x780000
     930:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0xfffffb8c
     934:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     938:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
     93c:	2f726576 	svccs	0x00726576
     940:	00636e69 	rsbeq	r6, r3, r9, ror #28
     944:	61747300 	cmnvs	r4, r0, lsl #6
     948:	70757472 	rsbsvc	r7, r5, r2, ror r4
     94c:	0100632e 	tsteq	r0, lr, lsr #6
     950:	645f0000 	ldrbvs	r0, [pc], #-0	; 958 <startup-0x1ffff6a8>
     954:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
     958:	745f746c 	ldrbvc	r7, [pc], #-1132	; 960 <startup-0x1ffff6a0>
     95c:	73657079 	cmnvc	r5, #121	; 0x79
     960:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     964:	735f0000 	cmpvc	pc, #0
     968:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
     96c:	00682e74 	rsbeq	r2, r8, r4, ror lr
     970:	63000003 	movwvs	r0, #3
     974:	5f65726f 	svcpl	0x0065726f
     978:	2e346d63 	cdpcs	13, 3, cr6, cr4, cr3, {3}
     97c:	00040068 	andeq	r0, r4, r8, rrx
     980:	73797300 	cmnvc	r9, #0, 6
     984:	5f6d6574 	svcpl	0x006d6574
     988:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     98c:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     990:	00682e78 	rsbeq	r2, r8, r8, ror lr
     994:	73000005 	movwvc	r0, #5
     998:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     99c:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
     9a0:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
     9a4:	74730000 	ldrbtvc	r0, [r3], #-0
     9a8:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     9ac:	5f787834 	svcpl	0x00787834
     9b0:	6f697067 	svcvs	0x00697067
     9b4:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
     9b8:	74730000 	ldrbtvc	r0, [r3], #-0
     9bc:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     9c0:	5f787834 	svcpl	0x00787834
     9c4:	2e6d6974 			; <UNDEFINED> instruction: 0x2e6d6974
     9c8:	00050068 	andeq	r0, r5, r8, rrx
     9cc:	01050000 	mrseq	r0, (UNDEF: 5)
     9d0:	00020500 	andeq	r0, r2, r0, lsl #10
     9d4:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
     9d8:	2113010e 	tstcs	r3, lr, lsl #2
     9dc:	02212f21 	eoreq	r2, r1, #33, 30	; 0x84
     9e0:	01010003 	tsteq	r1, r3
     9e4:	05001405 	streq	r1, [r0, #-1029]	; 0xfffffbfb
     9e8:	000d0c02 	andeq	r0, sp, r2, lsl #24
     9ec:	01150320 	tsteq	r5, r0, lsr #6
     9f0:	59410305 	stmdbpl	r1, {r0, r2, r8, r9}^
     9f4:	054c1105 	strbeq	r1, [ip, #-261]	; 0xfffffefb
     9f8:	13053d12 	movwne	r3, #23826	; 0x5d12
     9fc:	3d12053d 	cfldr32cc	mvfx0, [r2, #-244]	; 0xffffff0c
     a00:	053f1105 	ldreq	r1, [pc, #-261]!	; 903 <startup-0x1ffff6fd>
     a04:	13053d12 	movwne	r3, #23826	; 0x5d12
     a08:	3d12053d 	cfldr32cc	mvfx0, [r2, #-244]	; 0xffffff0c
     a0c:	673e0205 	ldrvs	r0, [lr, -r5, lsl #4]!
     a10:	05670105 	strbeq	r0, [r7, #-261]!	; 0xfffffefb
     a14:	0205681d 	andeq	r6, r5, #1900544	; 0x1d0000
     a18:	4c1a053e 	cfldr32mi	mvfx0, [sl], {62}	; 0x3e
     a1c:	053d1705 	ldreq	r1, [sp, #-1797]!	; 0xfffff8fb
     a20:	1c054b1e 			; <UNDEFINED> instruction: 0x1c054b1e
     a24:	3d02053d 	cfstr32cc	mvfx0, [r2, #-244]	; 0xffffff0c
     a28:	01056775 	tsteq	r5, r5, ror r7
     a2c:	40020550 	andmi	r0, r2, r0, asr r5
     a30:	4e592f2f 	cdpmi	15, 5, cr2, cr9, cr15, {1}
     a34:	05670705 	strbeq	r0, [r7, #-1797]!	; 0xfffff8fb
     a38:	04020008 	streq	r0, [r2], #-8
     a3c:	07052001 	streq	r2, [r5, -r1]
     a40:	01040200 	mrseq	r0, R12_usr
     a44:	3e020566 	cfsh32cc	mvfx0, mvfx2, #54
     a48:	6707055a 	smlsdvs	r7, sl, r5, r0
     a4c:	02000805 	andeq	r0, r0, #327680	; 0x50000
     a50:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
     a54:	04020007 	streq	r0, [r2], #-7
     a58:	02056601 	andeq	r6, r5, #1048576	; 0x100000
     a5c:	5c07054c 	cfstr32pl	mvfx0, [r7], {76}	; 0x4c
     a60:	05211005 	streq	r1, [r1, #-5]!
     a64:	0705730a 	streq	r7, [r5, -sl, lsl #6]
     a68:	0e052466 	cdpeq	4, 0, cr2, cr5, cr6, {3}
     a6c:	73080521 	movwvc	r0, #34081	; 0x8521
     a70:	05660705 	strbeq	r0, [r6, #-1797]!	; 0xfffff8fb
     a74:	18052604 	stmdane	r5, {r2, r9, sl, sp}
     a78:	3c0d054b 	cfstr32cc	mvfx0, [sp], {75}	; 0x4b
     a7c:	4c11053e 	cfldr32mi	mvfx0, [r1], {62}	; 0x3e
     a80:	05820b05 	streq	r0, [r2, #2821]	; 0xb05
     a84:	08056704 	stmdaeq	r5, {r2, r8, r9, sl, sp, lr}
     a88:	7402055a 	strvc	r0, [r2], #-1370	; 0xfffffaa6
     a8c:	054b0805 	strbeq	r0, [fp, #-2053]	; 0xfffff7fb
     a90:	5e034d02 	cdppl	13, 0, cr4, cr3, cr2, {0}
     a94:	000e024a 	andeq	r0, lr, sl, asr #4
     a98:	04640101 	strbteq	r0, [r4], #-257	; 0xfffffeff
     a9c:	00030000 	andeq	r0, r3, r0
     aa0:	00000206 	andeq	r0, r0, r6, lsl #4
     aa4:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     aa8:	0101000d 	tsteq	r1, sp
     aac:	00000101 	andeq	r0, r0, r1, lsl #2
     ab0:	00000100 	andeq	r0, r0, r0, lsl #2
     ab4:	2f3a4301 	svccs	0x003a4301
     ab8:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
     abc:	6d612f73 	stclvs	15, cr2, [r1, #-460]!	; 0xfffffe34
     ac0:	2f726e69 	svccs	0x00726e69
     ac4:	6b736544 	blvs	1cd9fdc <startup-0x1e326024>
     ac8:	2f706f74 	svccs	0x00706f74
     acc:	61746164 	cmnvs	r4, r4, ror #2
     ad0:	6a6f7270 	bvs	1bdd498 <startup-0x1e422b68>
     ad4:	2f746b65 	svccs	0x00746b65
     ad8:	334d5453 	movtcc	r5, #54355	; 0xd453
     adc:	5f344632 	svcpl	0x00344632
     ae0:	2f62696c 	svccs	0x0062696c
     ae4:	334d5453 	movtcc	r5, #54355	; 0xd453
     ae8:	5f344632 	svcpl	0x00344632
     aec:	2f62696c 	svccs	0x0062696c
     af0:	334d5453 	movtcc	r5, #54355	; 0xd453
     af4:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
     af8:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xfffff088
     afc:	72655064 	rsbvc	r5, r5, #100	; 0x64
     b00:	5f687069 	svcpl	0x00687069
     b04:	76697244 	strbtvc	r7, [r9], -r4, asr #4
     b08:	732f7265 			; <UNDEFINED> instruction: 0x732f7265
     b0c:	63006372 	movwvs	r6, #882	; 0x372
     b10:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
     b14:	70706165 	rsbsvc	r6, r0, r5, ror #2
     b18:	646f635c 	strbtvs	r6, [pc], #-860	; b20 <startup-0x1ffff4e0>
     b1c:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
     b20:	6f745c65 	svcvs	0x00745c65
     b24:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
     b28:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
     b2c:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
     b30:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     b34:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
     b38:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
     b3c:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
     b40:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     b44:	616d5c65 	cmnvs	sp, r5, ror #24
     b48:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
     b4c:	3a630065 	bcc	18c0ce8 <startup-0x1e73f318>
     b50:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
     b54:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
     b58:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
     b5c:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
     b60:	6f6f745c 	svcvs	0x006f745c
     b64:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
     b68:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
     b6c:	615c6d72 	cmpvs	ip, r2, ror sp
     b70:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
     b74:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
     b78:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     b7c:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
     b80:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
     b84:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
     b88:	2f3a4300 	svccs	0x003a4300
     b8c:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
     b90:	6d612f73 	stclvs	15, cr2, [r1, #-460]!	; 0xfffffe34
     b94:	2f726e69 	svccs	0x00726e69
     b98:	6b736544 	blvs	1cda0b0 <startup-0x1e325f50>
     b9c:	2f706f74 	svccs	0x00706f74
     ba0:	61746164 	cmnvs	r4, r4, ror #2
     ba4:	6a6f7270 	bvs	1bdd56c <startup-0x1e422a94>
     ba8:	2f746b65 	svccs	0x00746b65
     bac:	334d5453 	movtcc	r5, #54355	; 0xd453
     bb0:	5f344632 	svcpl	0x00344632
     bb4:	2f62696c 	svccs	0x0062696c
     bb8:	334d5453 	movtcc	r5, #54355	; 0xd453
     bbc:	5f344632 	svcpl	0x00344632
     bc0:	2f62696c 	svccs	0x0062696c
     bc4:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
     bc8:	6e492f53 	mcrvs	15, 2, r2, cr9, cr3, {2}
     bcc:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     bd0:	3a430065 	bcc	10c0d6c <startup-0x1ef3f294>
     bd4:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
     bd8:	612f7372 			; <UNDEFINED> instruction: 0x612f7372
     bdc:	726e696d 	rsbvc	r6, lr, #1785856	; 0x1b4000
     be0:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
     be4:	706f746b 	rsbvc	r7, pc, fp, ror #8
     be8:	7461642f 	strbtvc	r6, [r1], #-1071	; 0xfffffbd1
     bec:	6f727061 	svcvs	0x00727061
     bf0:	746b656a 	strbtvc	r6, [fp], #-1386	; 0xfffffa96
     bf4:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     bf8:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
     bfc:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     c00:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     c04:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
     c08:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     c0c:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     c10:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
     c14:	535f7878 	cmppl	pc, #120, 16	; 0x780000
     c18:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0xfffffb8c
     c1c:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     c20:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
     c24:	2f726576 	svccs	0x00726576
     c28:	00636e69 	rsbeq	r6, r3, r9, ror #28
     c2c:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     c30:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
     c34:	675f7878 			; <UNDEFINED> instruction: 0x675f7878
     c38:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
     c3c:	00010063 	andeq	r0, r1, r3, rrx
     c40:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
     c44:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
     c48:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     c4c:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
     c50:	00020068 	andeq	r0, r2, r8, rrx
     c54:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
     c58:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
     c5c:	0300682e 	movweq	r6, #2094	; 0x82e
     c60:	6f630000 	svcvs	0x00630000
     c64:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
     c68:	682e346d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, ip, sp}
     c6c:	00000400 	andeq	r0, r0, r0, lsl #8
     c70:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
     c74:	735f6d65 	cmpvc	pc, #6464	; 0x1940
     c78:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     c7c:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
     c80:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
     c84:	74730000 	ldrbtvc	r0, [r3], #-0
     c88:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     c8c:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
     c90:	00050068 	andeq	r0, r5, r8, rrx
     c94:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     c98:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
     c9c:	675f7878 			; <UNDEFINED> instruction: 0x675f7878
     ca0:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
     ca4:	00050068 	andeq	r0, r5, r8, rrx
     ca8:	01050000 	mrseq	r0, (UNDEF: 5)
     cac:	f8020500 			; <UNDEFINED> instruction: 0xf8020500
     cb0:	0320000e 			; <UNDEFINED> instruction: 0x0320000e
     cb4:	050100ff 	streq	r0, [r1, #-255]	; 0xffffff01
     cb8:	05054e06 	streq	r4, [r5, #-3590]	; 0xfffff1fa
     cbc:	01054b4c 	tsteq	r5, ip, asr #22
     cc0:	054a3803 	strbeq	r3, [sl, #-2051]	; 0xfffff7fd
     cc4:	204a030b 	subcs	r0, sl, fp, lsl #6
     cc8:	4b4c0505 	blmi	13020e4 <startup-0x1ecfdf1c>
     ccc:	33030105 	movwcc	r0, #12549	; 0x3105
     cd0:	030b054a 	movweq	r0, #46410	; 0xb54a
     cd4:	0505204f 	streq	r2, [r5, #-79]	; 0xffffffb1
     cd8:	01054b4c 	tsteq	r5, ip, asr #22
     cdc:	054a2e03 	strbeq	r2, [sl, #-3587]	; 0xfffff1fd
     ce0:	2054030b 	subscs	r0, r4, fp, lsl #6
     ce4:	4b4c0505 	blmi	1302100 <startup-0x1ecfdf00>
     ce8:	29030105 	stmdbcs	r3, {r0, r2, r8}
     cec:	030b054a 	movweq	r0, #46410	; 0xb54a
     cf0:	05052059 	streq	r2, [r5, #-89]	; 0xffffffa7
     cf4:	01054b4c 	tsteq	r5, ip, asr #22
     cf8:	054a2403 	strbeq	r2, [sl, #-1027]	; 0xfffffbfd
     cfc:	205e030b 	subscs	r0, lr, fp, lsl #6
     d00:	4b4c0505 	blmi	130211c <startup-0x1ecfdee4>
     d04:	1f030105 	svcne	0x00030105
     d08:	030b054a 	movweq	r0, #46410	; 0xb54a
     d0c:	05052063 	streq	r2, [r5, #-99]	; 0xffffff9d
     d10:	01054b4c 	tsteq	r5, ip, asr #22
     d14:	054a1a03 	strbeq	r1, [sl, #-2563]	; 0xfffff5fd
     d18:	2068030b 	rsbcs	r0, r8, fp, lsl #6
     d1c:	4b4c0505 	blmi	1302138 <startup-0x1ecfdec8>
     d20:	15030105 	strne	r0, [r3, #-261]	; 0xfffffefb
     d24:	030b054a 	movweq	r0, #46410	; 0xb54a
     d28:	0505206e 	streq	r2, [r5, #-110]	; 0xffffff92
     d2c:	0105674c 	tsteq	r5, ip, asr #14
     d30:	05660f03 	strbeq	r0, [r6, #-3843]!	; 0xfffff0fd
     d34:	2073030b 	rsbscs	r0, r3, fp, lsl #6
     d38:	674c0505 	strbvs	r0, [ip, -r5, lsl #10]
     d3c:	0a030105 	beq	c1158 <startup-0x1ff3eea8>
     d40:	03080566 	movweq	r0, #34150	; 0x8566
     d44:	0705207a 	smlsdxeq	r5, sl, r0, r2
     d48:	0105674c 	tsteq	r5, ip, asr #14
     d4c:	080c0369 	stmdaeq	ip, {r0, r3, r5, r6, r8, r9}
     d50:	590c0590 	stmdbpl	ip, {r4, r7, r8, sl}
     d54:	052e1b05 	streq	r1, [lr, #-2821]!	; 0xfffff4fb
     d58:	0f052e28 	svceq	0x00052e28
     d5c:	052e0a03 	streq	r0, [lr, #-2563]!	; 0xfffff5fd
     d60:	09052e03 	stmdbeq	r5, {r0, r1, r9, sl, fp, sp}
     d64:	5a220522 	bpl	8821f4 <startup-0x1f77de0c>
     d68:	052e1005 	streq	r1, [lr, #-5]!
     d6c:	15053e08 	strne	r3, [r5, #-3592]	; 0xfffff1f8
     d70:	2e37054c 	cdpcs	5, 3, cr0, cr7, cr12, {2}
     d74:	052e2c05 	streq	r2, [lr, #-3077]!	; 0xfffff3fb
     d78:	15053c18 	strne	r3, [r5, #-3096]	; 0xfffff3e8
     d7c:	3d140520 	cfldr32cc	mvfx0, [r4, #-128]	; 0xffffff80
     d80:	052e3205 	streq	r3, [lr, #-517]!	; 0xfffffdfb
     d84:	4a052e19 	bmi	14c5f0 <startup-0x1feb3a10>
     d88:	2e3f0520 	cfabs64cs	mvdx0, mvdx15
     d8c:	052e1405 	streq	r1, [lr, #-1029]!	; 0xfffffbfb
     d90:	0a053e1b 	beq	150604 <startup-0x1feaf9fc>
     d94:	004c052e 	subeq	r0, ip, lr, lsr #10
     d98:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
     d9c:	02003905 	andeq	r3, r0, #81920	; 0x14000
     da0:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
     da4:	3f053418 	svccc	0x00053418
     da8:	2e34052e 	cdpcs	5, 3, cr0, cr4, cr14, {1}
     dac:	053c1b05 	ldreq	r1, [ip, #-2821]!	; 0xfffff4fb
     db0:	053d2018 	ldreq	r2, [sp, #-24]!	; 0xffffffe8
     db4:	1c052e36 	stcne	14, cr2, [r5], {54}	; 0x36
     db8:	204f052e 	subcs	r0, pc, lr, lsr #10
     dbc:	052e4405 	streq	r4, [lr, #-1029]!	; 0xfffffbfb
     dc0:	05422e18 	strbeq	r2, [r2, #-3608]	; 0xfffff1e8
     dc4:	30052e34 	andcc	r2, r5, r4, lsr lr
     dc8:	2e1b053c 	mrccs	5, 0, r0, cr11, cr12, {1}
     dcc:	05201805 	streq	r1, [r0, #-2053]!	; 0xfffff7fb
     dd0:	3f053d17 	svccc	0x00053d17
     dd4:	2e26052e 	cfsh64cs	mvdx0, mvdx6, #30
     dd8:	05205105 	streq	r5, [r0, #-261]!	; 0xfffffefb
     ddc:	1a052e4d 	bne	14c718 <startup-0x1feb38e8>
     de0:	2017052e 	andscs	r0, r7, lr, lsr #10
     de4:	05401405 	strbeq	r1, [r0, #-1029]	; 0xfffffbfb
     de8:	40052e2f 	andmi	r2, r5, pc, lsr #28
     dec:	202b052e 	eorcs	r0, fp, lr, lsr #10
     df0:	053c1705 	ldreq	r1, [ip, #-1797]!	; 0xfffff8fb
     df4:	053d2014 	ldreq	r2, [sp, #-20]!	; 0xffffffec
     df8:	19052e32 	stmdbne	r5, {r1, r4, r5, r9, sl, fp, sp}
     dfc:	204a052e 	subcs	r0, sl, lr, lsr #10
     e00:	052e3f05 	streq	r3, [lr, #-3845]!	; 0xfffff0fb
     e04:	2c052e14 	stccs	14, cr2, [r5], {20}
     e08:	02040200 	andeq	r0, r4, #0, 4
     e0c:	053c6203 	ldreq	r6, [ip, #-515]!	; 0xfffffdfd
     e10:	04020003 	streq	r0, [r2], #-3
     e14:	01053c01 	tsteq	r5, r1, lsl #24
     e18:	603c2103 	eorsvs	r2, ip, r3, lsl #2
     e1c:	3d4c1e05 	stclcc	14, cr1, [ip, #-20]	; 0xffffffec
     e20:	3d3d1f05 	ldccc	15, cr1, [sp, #-20]!	; 0xffffffec
     e24:	053d1e05 	ldreq	r1, [sp, #-3589]!	; 0xfffff1fb
     e28:	10033d01 	andne	r3, r3, r1, lsl #26
     e2c:	75110566 	ldrvc	r0, [r1, #-1382]	; 0xfffffa9a
     e30:	05420705 	strbeq	r0, [r2, #-1797]	; 0xfffff8fb
     e34:	4c3e5a0f 			; <UNDEFINED> instruction: 0x4c3e5a0f
     e38:	053e0e05 	ldreq	r0, [lr, #-3589]!	; 0xfffff1fb
     e3c:	0e052e07 	cdpeq	14, 0, cr2, cr5, cr7, {0}
     e40:	2e070522 	cfsh32cs	mvfx0, mvfx7, #18
     e44:	03210105 			; <UNDEFINED> instruction: 0x03210105
     e48:	0b054a1c 	bleq	1536c0 <startup-0x1feac940>
     e4c:	500d0575 	andpl	r0, sp, r5, ror r5
     e50:	052e1305 	streq	r1, [lr, #-773]!	; 0xfffffcfb
     e54:	0f053c06 	svceq	0x00053c06
     e58:	0a054e22 	beq	1546e8 <startup-0x1feab918>
     e5c:	3d01054c 	cfstr32cc	mvfx0, [r1, #-304]	; 0xfffffed0
     e60:	054a0a03 	strbeq	r0, [sl, #-2563]	; 0xfffff5fd
     e64:	0b054e1a 	bleq	1546d4 <startup-0x1feab92c>
     e68:	2101052e 	tstcs	r1, lr, lsr #10
     e6c:	054a0c03 	strbeq	r0, [sl, #-3075]	; 0xfffff3fd
     e70:	0e05750b 	cfsh32eq	mvfx7, mvfx5, #11
     e74:	2e150550 	mrccs	5, 0, r0, cr5, cr0, {2}
     e78:	053c0605 	ldreq	r0, [ip, #-1541]!	; 0xfffff9fb
     e7c:	054e220f 	strbeq	r2, [lr, #-527]	; 0xfffffdf1
     e80:	01054c0a 	tsteq	r5, sl, lsl #24
     e84:	4a0a033d 	bmi	281b80 <startup-0x1fd7e480>
     e88:	054e1a05 	strbeq	r1, [lr, #-2565]	; 0xfffff5fb
     e8c:	01052e0b 	tsteq	r5, fp, lsl #28
     e90:	4a0f0321 	bmi	3c1b1c <startup-0x1fc3e4e4>
     e94:	05791005 	ldrbeq	r1, [r9, #-5]!
     e98:	0f034b01 	svceq	0x00034b01
     e9c:	7910054a 	ldmdbvc	r0, {r1, r3, r6, r8, sl}
     ea0:	034b0105 	movteq	r0, #45317	; 0xb105
     ea4:	06054a10 			; <UNDEFINED> instruction: 0x06054a10
     ea8:	4c1205c0 	cfldr32mi	mvfx0, [r2], {192}	; 0xc0
     eac:	05500105 	ldrbeq	r0, [r0, #-261]	; 0xfffffefb
     eb0:	01051e12 	tsteq	r5, r2, lsl lr
     eb4:	4a0b034c 	bmi	2c1bec <startup-0x1fd3e414>
     eb8:	05780e05 	ldrbeq	r0, [r8, #-3589]!	; 0xfffff1fb
     ebc:	0b034b01 	bleq	d3ac8 <startup-0x1ff2c538>
     ec0:	780e054a 	stmdavc	lr, {r1, r3, r6, r8, sl}
     ec4:	03750105 	cmneq	r5, #1073741825	; 0x40000001
     ec8:	054a00ce 	strbeq	r0, [sl, #-206]	; 0xffffff32
     ecc:	052fbb0c 	streq	fp, [pc, #-2828]!	; 3c8 <startup-0x1ffffc38>
     ed0:	2305350b 	movwcs	r3, #21771	; 0x550b
     ed4:	4a59052e 	bmi	1642394 <startup-0x1e9bdc6c>
     ed8:	05200805 	streq	r0, [r0, #-2053]!	; 0xfffff7fb
     edc:	3d053d26 	stccc	13, cr3, [r5, #-152]	; 0xffffff68
     ee0:	4a730590 	bmi	1cc2528 <startup-0x1e33dad8>
     ee4:	05203905 	streq	r3, [r0, #-2309]!	; 0xfffff6fb
     ee8:	26053c29 	strcs	r3, [r5], -r9, lsr #24
     eec:	1605bb20 	strne	fp, [r5], -r0, lsr #22
     ef0:	4a0a0558 	bmi	282458 <startup-0x1fd7dba8>
     ef4:	053d1d05 	ldreq	r1, [sp, #-3333]!	; 0xfffff2fb
     ef8:	01055826 	tsteq	r5, r6, lsr #16
     efc:	00040259 	andeq	r0, r4, r9, asr r2
     f00:	00da0101 	sbcseq	r0, sl, r1, lsl #2
     f04:	00030000 	andeq	r0, r3, r0
     f08:	0000004a 	andeq	r0, r0, sl, asr #32
     f0c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     f10:	0101000d 	tsteq	r1, sp
     f14:	00000101 	andeq	r0, r0, r1, lsl #2
     f18:	00000100 	andeq	r0, r0, r0, lsl #2
     f1c:	2f3a4301 	svccs	0x003a4301
     f20:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
     f24:	6d612f73 	stclvs	15, cr2, [r1, #-460]!	; 0xfffffe34
     f28:	2f726e69 	svccs	0x00726e69
     f2c:	6b736544 	blvs	1cda444 <startup-0x1e325bbc>
     f30:	2f706f74 	svccs	0x00706f74
     f34:	61746164 	cmnvs	r4, r4, ror #2
     f38:	6a6f7270 	bvs	1bdd900 <startup-0x1e422700>
     f3c:	2f746b65 	svccs	0x00746b65
     f40:	74616863 	strbtvc	r6, [r1], #-2147	; 0xfffff79d
     f44:	7070615f 	rsbsvc	r6, r0, pc, asr r1
     f48:	73750000 	cmnvc	r5, #0
     f4c:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
     f50:	00010063 	andeq	r0, r1, r3, rrx
     f54:	19050000 	stmdbne	r5, {}	; <UNPREDICTABLE>
     f58:	04020500 	streq	r0, [r2], #-1280	; 0xfffffb00
     f5c:	03200014 			; <UNDEFINED> instruction: 0x03200014
     f60:	0b050114 	bleq	1413b8 <startup-0x1febec48>
     f64:	00140568 	andseq	r0, r4, r8, ror #10
     f68:	20010402 	andcs	r0, r1, r2, lsl #8
     f6c:	02001905 	andeq	r1, r0, #81920	; 0x14000
     f70:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
     f74:	0402000b 	streq	r0, [r2], #-11
     f78:	05223c01 	streq	r3, [r2, #-3073]!	; 0xfffff3ff
     f7c:	10052012 	andne	r2, r5, r2, lsl r0
     f80:	2107053c 	tstcs	r7, ip, lsr r5
     f84:	054b0905 	strbeq	r0, [fp, #-2309]	; 0xfffff6fb
     f88:	16053d01 	strne	r3, [r5], -r1, lsl #26
     f8c:	30100568 	andscc	r0, r0, r8, ror #10
     f90:	053c1505 	ldreq	r1, [ip, #-1285]!	; 0xfffffafb
     f94:	10053c07 	andne	r3, r5, r7, lsl #24
     f98:	2f190521 	svccs	0x00190521
     f9c:	053c0c05 	ldreq	r0, [ip, #-3077]!	; 0xfffff3fb
     fa0:	15052101 	strne	r2, [r5, #-257]	; 0xfffffeff
     fa4:	300a055a 	andcc	r0, sl, sl, asr r5
     fa8:	02001305 	andeq	r1, r0, #335544320	; 0x14000000
     fac:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
     fb0:	04020018 	streq	r0, [r2], #-24	; 0xffffffe8
     fb4:	0a053c01 	beq	14ffc0 <startup-0x1feb0040>
     fb8:	01040200 	mrseq	r0, R12_usr
     fbc:	2119053c 	tstcs	r9, ip, lsr r5
     fc0:	053c0c05 	ldreq	r0, [ip, #-3077]!	; 0xfffff3fb
     fc4:	14052101 	strne	r2, [r5], #-257	; 0xfffffeff
     fc8:	4b0b0568 	blmi	2c2570 <startup-0x1fd3da90>
     fcc:	05211505 	streq	r1, [r1, #-1285]!	; 0xfffffafb
     fd0:	0c053c09 	stceq	12, cr3, [r5], {9}
     fd4:	2e0b0549 	cfsh32cs	mvfx0, mvfx11, #41
     fd8:	02300105 	eorseq	r0, r0, #1073741825	; 0x40000001
     fdc:	01010005 	tsteq	r1, r5
     fe0:	00000be5 	andeq	r0, r0, r5, ror #23
     fe4:	02040003 	andeq	r0, r4, #3
     fe8:	01020000 	mrseq	r0, (UNDEF: 2)
     fec:	000d0efb 	strdeq	r0, [sp], -fp
     ff0:	01010101 	tsteq	r1, r1, lsl #2
     ff4:	01000000 	mrseq	r0, (UNDEF: 0)
     ff8:	43010000 	movwmi	r0, #4096	; 0x1000
     ffc:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
    1000:	2f737265 	svccs	0x00737265
    1004:	6e696d61 	cdpvs	13, 6, cr6, cr9, cr1, {3}
    1008:	65442f72 	strbvs	r2, [r4, #-3954]	; 0xfffff08e
    100c:	6f746b73 	svcvs	0x00746b73
    1010:	61642f70 	smcvs	17136	; 0x42f0
    1014:	72706174 	rsbsvc	r6, r0, #116, 2
    1018:	6b656a6f 	blvs	195b9dc <startup-0x1e6a4624>
    101c:	54532f74 	ldrbpl	r2, [r3], #-3956	; 0xfffff08c
    1020:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    1024:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
    1028:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
    102c:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    1030:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
    1034:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
    1038:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    103c:	5f787834 	svcpl	0x00787834
    1040:	50647453 	rsbpl	r7, r4, r3, asr r4
    1044:	70697265 	rsbvc	r7, r9, r5, ror #4
    1048:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
    104c:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    1050:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    1054:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    1058:	61657363 	cmnvs	r5, r3, ror #6
    105c:	635c7070 	cmpvs	ip, #112	; 0x70
    1060:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
    1064:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
    1068:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; ea0 <startup-0x1ffff160>
    106c:	63675c73 	cmnvs	r7, #29440	; 0x7300
    1070:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    1074:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
    1078:	6f6e2d6d 	svcvs	0x006e2d6d
    107c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    1080:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    1084:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    1088:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    108c:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    1090:	00656e69 	rsbeq	r6, r5, r9, ror #28
    1094:	635c3a63 	cmpvs	ip, #405504	; 0x63000
    1098:	70616573 	rsbvc	r6, r1, r3, ror r5
    109c:	6f635c70 	svcvs	0x00635c70
    10a0:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
    10a4:	745c6574 	ldrbvc	r6, [ip], #-1396	; 0xfffffa8c
    10a8:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    10ac:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    10b0:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    10b4:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    10b8:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    10bc:	61652d65 	cmnvs	r5, r5, ror #26
    10c0:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    10c4:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    10c8:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
    10cc:	43007379 	movwmi	r7, #889	; 0x379
    10d0:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
    10d4:	2f737265 	svccs	0x00737265
    10d8:	6e696d61 	cdpvs	13, 6, cr6, cr9, cr1, {3}
    10dc:	65442f72 	strbvs	r2, [r4, #-3954]	; 0xfffff08e
    10e0:	6f746b73 	svcvs	0x00746b73
    10e4:	61642f70 	smcvs	17136	; 0x42f0
    10e8:	72706174 	rsbsvc	r6, r0, #116, 2
    10ec:	6b656a6f 	blvs	195bab0 <startup-0x1e6a4550>
    10f0:	54532f74 	ldrbpl	r2, [r3], #-3956	; 0xfffff08c
    10f4:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    10f8:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
    10fc:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
    1100:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    1104:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
    1108:	4d432f62 	stclmi	15, cr2, [r3, #-392]	; 0xfffffe78
    110c:	2f534953 	svccs	0x00534953
    1110:	6c636e49 	stclvs	14, cr6, [r3], #-292	; 0xfffffedc
    1114:	00656475 	rsbeq	r6, r5, r5, ror r4
    1118:	552f3a43 	strpl	r3, [pc, #-2627]!	; 6dd <startup-0x1ffff923>
    111c:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
    1120:	696d612f 	stmdbvs	sp!, {r0, r1, r2, r3, r5, r8, sp, lr}^
    1124:	442f726e 	strtmi	r7, [pc], #-622	; 112c <startup-0x1fffeed4>
    1128:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    112c:	642f706f 	strtvs	r7, [pc], #-111	; 1134 <startup-0x1fffeecc>
    1130:	70617461 	rsbvc	r7, r1, r1, ror #8
    1134:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xfffff08e
    1138:	532f746b 			; <UNDEFINED> instruction: 0x532f746b
    113c:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    1140:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
    1144:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
    1148:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    114c:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
    1150:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
    1154:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    1158:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    115c:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0xfffffca1
    1160:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    1164:	445f6870 	ldrbmi	r6, [pc], #-2160	; 116c <startup-0x1fffee94>
    1168:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    116c:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    1170:	73000063 	movwvc	r0, #99	; 0x63
    1174:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    1178:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    117c:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
    1180:	0100632e 	tsteq	r0, lr, lsr #6
    1184:	645f0000 	ldrbvs	r0, [pc], #-0	; 118c <startup-0x1fffee74>
    1188:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
    118c:	745f746c 	ldrbvc	r7, [pc], #-1132	; 1194 <startup-0x1fffee6c>
    1190:	73657079 	cmnvc	r5, #121	; 0x79
    1194:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    1198:	735f0000 	cmpvc	pc, #0
    119c:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    11a0:	00682e74 	rsbeq	r2, r8, r4, ror lr
    11a4:	63000003 	movwvs	r0, #3
    11a8:	5f65726f 	svcpl	0x0065726f
    11ac:	2e346d63 	cdpcs	13, 3, cr6, cr4, cr3, {3}
    11b0:	00040068 	andeq	r0, r4, r8, rrx
    11b4:	73797300 	cmnvc	r9, #0, 6
    11b8:	5f6d6574 	svcpl	0x006d6574
    11bc:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    11c0:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    11c4:	00682e78 	rsbeq	r2, r8, r8, ror lr
    11c8:	73000005 	movwvc	r0, #5
    11cc:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    11d0:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    11d4:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    11d8:	74730000 	ldrbtvc	r0, [r3], #-0
    11dc:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    11e0:	5f787834 	svcpl	0x00787834
    11e4:	2e6d6974 			; <UNDEFINED> instruction: 0x2e6d6974
    11e8:	00050068 	andeq	r0, r5, r8, rrx
    11ec:	01050000 	mrseq	r0, (UNDEF: 5)
    11f0:	c0020500 	andgt	r0, r2, r0, lsl #10
    11f4:	03200014 			; <UNDEFINED> instruction: 0x03200014
    11f8:	050101c8 	streq	r0, [r1, #-456]	; 0xfffffe38
    11fc:	05054e06 	streq	r4, [r5, #-3590]	; 0xfffff1fa
    1200:	01054b4c 	tsteq	r5, ip, asr #22
    1204:	4a00c603 	bmi	32a18 <startup-0x1ffcd5e8>
    1208:	bc030b05 			; <UNDEFINED> instruction: 0xbc030b05
    120c:	0505207f 	streq	r2, [r5, #-127]	; 0xffffff81
    1210:	01054b5a 	tsteq	r5, sl, asr fp
    1214:	4a00c103 	bmi	31628 <startup-0x1ffce9d8>
    1218:	41030b05 	tstmi	r3, r5, lsl #22
    121c:	4c050520 	cfstr32mi	mvfx0, [r5], {32}
    1220:	0301054b 	movweq	r0, #5451	; 0x154b
    1224:	0b054a3c 	bleq	153b1c <startup-0x1feac4e4>
    1228:	05204603 	streq	r4, [r0, #-1539]!	; 0xfffff9fd
    122c:	054b4c05 	strbeq	r4, [fp, #-3077]	; 0xfffff3fb
    1230:	4a370301 	bmi	dc1e3c <startup-0x1f23e1c4>
    1234:	4b030b05 	blmi	c3e50 <startup-0x1ff3c1b0>
    1238:	4c050520 	cfstr32mi	mvfx0, [r5], {32}
    123c:	0301054b 	movweq	r0, #5451	; 0x154b
    1240:	0b054a32 	bleq	153b10 <startup-0x1feac4f0>
    1244:	05205003 	streq	r5, [r0, #-3]!
    1248:	054b4c05 	strbeq	r4, [fp, #-3077]	; 0xfffff3fb
    124c:	4a2d0301 	bmi	b41e58 <startup-0x1f4be1a8>
    1250:	55030b05 	strpl	r0, [r3, #-2821]	; 0xfffff4fb
    1254:	4c050520 	cfstr32mi	mvfx0, [r5], {32}
    1258:	0301054b 	movweq	r0, #5451	; 0x154b
    125c:	0b054a28 	bleq	153b04 <startup-0x1feac4fc>
    1260:	05205a03 	streq	r5, [r0, #-2563]!	; 0xfffff5fd
    1264:	054b4c05 	strbeq	r4, [fp, #-3077]	; 0xfffff3fb
    1268:	4a230301 	bmi	8c1e74 <startup-0x1f73e18c>
    126c:	5f030b05 	svcpl	0x00030b05
    1270:	4c050520 	cfstr32mi	mvfx0, [r5], {32}
    1274:	03010567 	movweq	r0, #5479	; 0x1567
    1278:	0b05661e 	bleq	15aaf8 <startup-0x1fea5508>
    127c:	05206403 	streq	r6, [r0, #-1027]!	; 0xfffffbfd
    1280:	05674c05 	strbeq	r4, [r7, #-3077]!	; 0xfffff3fb
    1284:	66190301 	ldrvs	r0, [r9], -r1, lsl #6
    1288:	69030b05 	stmdbvs	r3, {r0, r2, r8, r9, fp}
    128c:	4c050520 	cfstr32mi	mvfx0, [r5], {32}
    1290:	03010567 	movweq	r0, #5479	; 0x1567
    1294:	0b056614 	bleq	15aaec <startup-0x1fea5514>
    1298:	05206e03 	streq	r6, [r0, #-3587]!	; 0xfffff1fd
    129c:	054b4c05 	strbeq	r4, [fp, #-3077]	; 0xfffff3fb
    12a0:	4a0f0301 	bmi	3c1eac <startup-0x1fc3e154>
    12a4:	73030b05 	movwvc	r0, #15109	; 0x3b05
    12a8:	4c050520 	cfstr32mi	mvfx0, [r5], {32}
    12ac:	0301054b 	movweq	r0, #5451	; 0x154b
    12b0:	08054a0a 	stmdaeq	r5, {r1, r3, r9, fp, lr}
    12b4:	05207a03 	streq	r7, [r0, #-2563]!	; 0xfffff5fd
    12b8:	05674c07 	strbeq	r4, [r7, #-3079]!	; 0xfffff3f9
    12bc:	0b036901 	bleq	db6c8 <startup-0x1ff24938>
    12c0:	0c05c808 	stceq	8, cr12, [r5], {8}
    12c4:	510a0559 	tstpl	sl, r9, asr r5
    12c8:	054c0505 	strbeq	r0, [ip, #-1285]	; 0xfffffafb
    12cc:	04020015 	streq	r0, [r2], #-21	; 0xffffffeb
    12d0:	26054a01 	strcs	r4, [r5], -r1, lsl #20
    12d4:	02040200 	andeq	r0, r4, #0, 4
    12d8:	5915054a 	ldmdbpl	r5, {r1, r3, r6, r8, sl}
    12dc:	02002605 	andeq	r2, r0, #5242880	; 0x500000
    12e0:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
    12e4:	0c054b15 			; <UNDEFINED> instruction: 0x0c054b15
    12e8:	752f054d 	strvc	r0, [pc, #-1357]!	; da3 <startup-0x1ffff25d>
    12ec:	052e0c05 	streq	r0, [lr, #-3077]!	; 0xfffff3fb
    12f0:	15055b05 	strne	r5, [r5, #-2821]	; 0xfffff4fb
    12f4:	01040200 	mrseq	r0, R12_usr
    12f8:	4d0c054a 	cfstr32mi	mvfx0, [ip, #-296]	; 0xfffffed8
    12fc:	05752f05 	ldrbeq	r2, [r5, #-3845]!	; 0xfffff0fb
    1300:	0d052e0c 	stceq	14, cr2, [r5, #-48]	; 0xffffffd0
    1304:	5b25055b 	blpl	942878 <startup-0x1f6bd788>
    1308:	052e0d05 	streq	r0, [lr, #-3333]!	; 0xfffff2fb
    130c:	0d053125 	stfeqs	f3, [r5, #-148]	; 0xffffff6c
    1310:	3006052e 	andcc	r0, r6, lr, lsr #10
    1314:	02001605 	andeq	r1, r0, #5242880	; 0x500000
    1318:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
    131c:	0f054d27 	svceq	0x00054d27
    1320:	330d053c 	movwcc	r0, #54588	; 0xd53c
    1324:	033d0105 	teqeq	sp, #1073741825	; 0x40000001
    1328:	054a0809 	strbeq	r0, [sl, #-2057]	; 0xfffff7f7
    132c:	29054c26 	stmdbcs	r5, {r1, r2, r5, sl, fp, lr}
    1330:	3d2d054b 	cfstr32cc	mvfx0, [sp, #-300]!	; 0xfffffed4
    1334:	053d2b05 	ldreq	r2, [sp, #-2821]!	; 0xfffff4fb
    1338:	01053d31 	tsteq	r5, r1, lsr sp
    133c:	4a0d033d 	bmi	342038 <startup-0x1fcbdfc8>
    1340:	4cbf0d05 	ldcmi	13, cr0, [pc], #20	; 135c <startup-0x1fffeca4>
    1344:	034b0105 	movteq	r0, #45317	; 0xb105
    1348:	0c054a0f 			; <UNDEFINED> instruction: 0x0c054a0f
    134c:	500a0575 	andpl	r0, sl, r5, ror r5
    1350:	0d05694d 	vstreq.16	s12, [r5, #-154]	; 0xffffff66	; <UNPREDICTABLE>
    1354:	4b010577 	blmi	42938 <startup-0x1ffbd6c8>
    1358:	054a0903 	strbeq	r0, [sl, #-2307]	; 0xfffff6fd
    135c:	01055d0d 	tsteq	r5, sp, lsl #26
    1360:	4a09033d 	bmi	24205c <startup-0x1fdbdfa4>
    1364:	055d0d05 	ldrbeq	r0, [sp, #-3333]	; 0xfffff2fb
    1368:	05523d01 	ldrbeq	r3, [r2, #-3329]	; 0xfffff2ff
    136c:	01054f0e 	tsteq	r5, lr, lsl #30
    1370:	0e05522f 	cdpeq	2, 0, cr5, cr5, cr15, {1}
    1374:	3d01054f 	cfstr32cc	mvfx0, [r1, #-316]	; 0xfffffec4
    1378:	054a0a03 	strbeq	r0, [sl, #-2563]	; 0xfffff5fd
    137c:	0f057906 	svceq	0x00057906
    1380:	8901054d 	stmdbhi	r1, {r0, r2, r3, r6, r8, sl}
    1384:	051e0f05 	ldreq	r0, [lr, #-3845]	; 0xfffff0fb
    1388:	0e038401 	cdpeq	4, 0, cr8, cr3, cr1, {0}
    138c:	7906054a 	stmdbvc	r6, {r1, r3, r6, r8, sl}
    1390:	054d0f05 	strbeq	r0, [sp, #-3845]	; 0xfffff0fb
    1394:	0f058901 	svceq	0x00058901
    1398:	8401051e 	strhi	r0, [r1], #-1310	; 0xfffffae2
    139c:	054a0a03 	strbeq	r0, [sl, #-2563]	; 0xfffff5fd
    13a0:	0f057906 	svceq	0x00057906
    13a4:	8901054d 	stmdbhi	r1, {r0, r2, r3, r6, r8, sl}
    13a8:	051e0f05 	ldreq	r0, [lr, #-3845]	; 0xfffff0fb
    13ac:	0c038401 	cfstrseq	mvf8, [r3], {1}
    13b0:	7a0d054a 	bvc	3428e0 <startup-0x1fcbd720>
    13b4:	91010585 	smlabbls	r1, r5, r5, r0
    13b8:	054a0d03 	strbeq	r0, [sl, #-3331]	; 0xfffff2fd
    13bc:	05857a0d 	streq	r7, [r5, #2573]	; 0xa0d
    13c0:	0a039101 	beq	e57cc <startup-0x1ff1a834>
    13c4:	79060574 	stmdbvc	r6, {r2, r4, r5, r6, r8, sl}
    13c8:	054d0f05 	strbeq	r0, [sp, #-3845]	; 0xfffff0fb
    13cc:	0f058901 	svceq	0x00058901
    13d0:	8401051e 	strhi	r0, [r1], #-1310	; 0xfffffae2
    13d4:	4a00c203 	bmi	31be8 <startup-0x1ffce418>
    13d8:	05590c05 	ldrbeq	r0, [r9, #-3077]	; 0xfffff3fb
    13dc:	27054a1a 	smladcs	r5, sl, sl, r4
    13e0:	030e054a 	movweq	r0, #58698	; 0xe54a
    13e4:	0b054a09 	bleq	153c10 <startup-0x1feac3f0>
    13e8:	4c0a0585 	cfstr32mi	mvfx0, [sl], {133}	; 0x85
    13ec:	4d4d0c05 	stclmi	12, cr0, [sp, #-20]	; 0xffffffec
    13f0:	681f0575 	ldmdavs	pc, {r0, r2, r4, r5, r6, r8, sl}	; <UNPREDICTABLE>
    13f4:	052e0c05 	streq	r0, [lr, #-3077]!	; 0xfffff3fb
    13f8:	1e055b0b 	vmlane.f64	d5, d5, d11
    13fc:	2e0b0576 	cfrshl64cs	mvdx11, mvdx6, r0
    1400:	055b1e05 	ldrbeq	r1, [fp, #-3589]	; 0xfffff1fb
    1404:	05052e0b 	streq	r2, [r5, #-3595]	; 0xfffff1f5
    1408:	0015055a 	andseq	r0, r5, sl, asr r5
    140c:	4a010402 	bmi	4241c <startup-0x1ffbdbe4>
    1410:	05520d05 	ldrbeq	r0, [r2, #-3333]	; 0xfffff2fb
    1414:	0d057620 	stceq	6, cr7, [r5, #-128]	; 0xffffff80
    1418:	20055a2e 	andcs	r5, r5, lr, lsr #20
    141c:	2e0d0569 	cfsh32cs	mvfx0, mvfx13, #57
    1420:	755a0c05 	ldrbvc	r0, [sl, #-3077]	; 0xfffff3fb
    1424:	05681f05 	strbeq	r1, [r8, #-3845]!	; 0xfffff0fb
    1428:	1f052e0c 	svcne	0x00052e0c
    142c:	2e0c055a 	cfrshl32cs	mvfx12, mvfx10, r0
    1430:	055b0d05 	ldrbeq	r0, [fp, #-3333]	; 0xfffff2fb
    1434:	20055b0f 	andcs	r5, r5, pc, lsl #22
    1438:	2e0e055b 	cfrshl32cs	mvfx14, mvfx11, r0
    143c:	59010531 	stmdbpl	r1, {r0, r4, r5, r8, sl}
    1440:	05c80c03 	strbeq	r0, [r8, #3075]	; 0xc03
    1444:	1a05590c 	bne	15787c <startup-0x1fea8784>
    1448:	4a27054a 	bmi	9c2978 <startup-0x1f63d688>
    144c:	09030e05 	stmdbeq	r3, {r0, r2, r9, sl, fp}
    1450:	850b054a 	strhi	r0, [fp, #-1354]	; 0xfffffab6
    1454:	054c0a05 	strbeq	r0, [ip, #-2565]	; 0xfffff5fb
    1458:	754d4d0c 	strbvc	r4, [sp, #-3340]	; 0xfffff2f4
    145c:	05692a05 	strbeq	r2, [r9, #-2565]!	; 0xfffff5fb
    1460:	0c052e0f 	stceq	14, cr2, [r5], {15}
    1464:	5b0b052e 	blpl	2c2924 <startup-0x1fd3d6dc>
    1468:	05762905 	ldrbeq	r2, [r6, #-2309]!	; 0xfffff6fb
    146c:	0b052e0e 	bleq	14ccac <startup-0x1feb3354>
    1470:	5b29052e 	blpl	a42930 <startup-0x1f5bd6d0>
    1474:	052e0e05 	streq	r0, [lr, #-3589]!	; 0xfffff1fb
    1478:	05052e0b 	streq	r2, [r5, #-3595]	; 0xfffff1f5
    147c:	0015055a 	andseq	r0, r5, sl, asr r5
    1480:	4a010402 	bmi	42490 <startup-0x1ffbdb70>
    1484:	05520d05 	ldrbeq	r0, [r2, #-3333]	; 0xfffff2fb
    1488:	1005762b 	andne	r7, r5, fp, lsr #12
    148c:	2e0d052e 	cfsh32cs	mvfx0, mvfx13, #30
    1490:	692b055a 	stmdbvs	fp!, {r1, r3, r4, r6, r8, sl}
    1494:	052e1005 	streq	r1, [lr, #-5]!
    1498:	0c052e0d 	stceq	14, cr2, [r5], {13}
    149c:	2a05755a 	bcs	15ea0c <startup-0x1fea15f4>
    14a0:	2e0f0568 	cfsh32cs	mvfx0, mvfx15, #56
    14a4:	052e0c05 	streq	r0, [lr, #-3077]!	; 0xfffff3fb
    14a8:	0f055a2a 	svceq	0x00055a2a
    14ac:	2e0c052e 	cfsh32cs	mvfx0, mvfx12, #30
    14b0:	055b0d05 	ldrbeq	r0, [fp, #-3333]	; 0xfffff2fb
    14b4:	20055b0f 	andcs	r5, r5, pc, lsl #22
    14b8:	2e0e055b 	cfrshl32cs	mvfx14, mvfx11, r0
    14bc:	59010531 	stmdbpl	r1, {r0, r4, r5, r8, sl}
    14c0:	12080b03 	andne	r0, r8, #3072	; 0xc00
    14c4:	05590c05 	ldrbeq	r0, [r9, #-3077]	; 0xfffff3fb
    14c8:	27054a1a 	smladcs	r5, sl, sl, r4
    14cc:	030e054a 	movweq	r0, #58698	; 0xe54a
    14d0:	0b054a09 	bleq	153cfc <startup-0x1feac304>
    14d4:	4c0a0585 	cfstr32mi	mvfx0, [sl], {133}	; 0x85
    14d8:	4d4d0c05 	stclmi	12, cr0, [sp, #-20]	; 0xffffffec
    14dc:	681f0575 	ldmdavs	pc, {r0, r2, r4, r5, r6, r8, sl}	; <UNPREDICTABLE>
    14e0:	052e0c05 	streq	r0, [lr, #-3077]!	; 0xfffff3fb
    14e4:	29055b0b 	stmdbcs	r5, {r0, r1, r3, r8, r9, fp, ip, lr}
    14e8:	2e0e0576 	cfrshl64cs	mvdx14, mvdx6, r0
    14ec:	052e0b05 	streq	r0, [lr, #-2821]!	; 0xfffff4fb
    14f0:	0e055b29 	vmlaeq.f64	d5, d5, d25
    14f4:	2e0b052e 	cfsh32cs	mvfx0, mvfx11, #30
    14f8:	055a0505 	ldrbeq	r0, [sl, #-1285]	; 0xfffffafb
    14fc:	04020015 	streq	r0, [r2], #-21	; 0xffffffeb
    1500:	0d054a01 	vstreq	s8, [r5, #-4]
    1504:	762b0552 			; <UNDEFINED> instruction: 0x762b0552
    1508:	052e1005 	streq	r1, [lr, #-5]!
    150c:	055a2e0d 	ldrbeq	r2, [sl, #-3597]	; 0xfffff1f3
    1510:	1005692b 	andne	r6, r5, fp, lsr #18
    1514:	2e0d052e 	cfsh32cs	mvfx0, mvfx13, #30
    1518:	755a0c05 	ldrbvc	r0, [sl, #-3077]	; 0xfffff3fb
    151c:	05682a05 	strbeq	r2, [r8, #-2565]!	; 0xfffff5fb
    1520:	0c052e0f 	stceq	14, cr2, [r5], {15}
    1524:	5a2a052e 	bpl	a829e4 <startup-0x1f57d61c>
    1528:	052e0f05 	streq	r0, [lr, #-3845]!	; 0xfffff0fb
    152c:	0d052e0c 	stceq	14, cr2, [r5, #-48]	; 0xffffffd0
    1530:	5b0f055b 	blpl	3c2aa4 <startup-0x1fc3d55c>
    1534:	055b2005 	ldrbeq	r2, [fp, #-5]
    1538:	05312e0e 	ldreq	r2, [r1, #-3598]!	; 0xfffff1f2
    153c:	0b035901 	bleq	d7948 <startup-0x1ff286b8>
    1540:	0c054a08 			; <UNDEFINED> instruction: 0x0c054a08
    1544:	4a1a0559 	bmi	682ab0 <startup-0x1f97d550>
    1548:	054a2705 	strbeq	r2, [sl, #-1797]	; 0xfffff8fb
    154c:	4a09030e 	bmi	24218c <startup-0x1fdbde74>
    1550:	05850b05 	streq	r0, [r5, #2821]	; 0xb05
    1554:	0c054c0a 	stceq	12, cr4, [r5], {10}
    1558:	05754d4d 	ldrbeq	r4, [r5, #-3405]!	; 0xfffff2b3
    155c:	0f05692a 	svceq	0x0005692a
    1560:	2e0c052e 	cfsh32cs	mvfx0, mvfx12, #30
    1564:	055b0b05 	ldrbeq	r0, [fp, #-2821]	; 0xfffff4fb
    1568:	0e057629 	cfmadd32eq	mvax1, mvfx7, mvfx5, mvfx9
    156c:	2e0b052e 	cfsh32cs	mvfx0, mvfx11, #30
    1570:	055b2905 	ldrbeq	r2, [fp, #-2309]	; 0xfffff6fb
    1574:	0b052e0e 	bleq	14cdb4 <startup-0x1feb324c>
    1578:	5a05052e 	bpl	142a38 <startup-0x1febd5c8>
    157c:	02001505 	andeq	r1, r0, #20971520	; 0x1400000
    1580:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
    1584:	2a054e0c 	bcs	154dbc <startup-0x1feab244>
    1588:	2e0f0576 	cfrshl64cs	mvdx15, mvdx6, r0
    158c:	052e0c05 	streq	r0, [lr, #-3077]!	; 0xfffff3fb
    1590:	0f055b0d 	svceq	0x00055b0d
    1594:	5b20055b 	blpl	802b08 <startup-0x1f7fd4f8>
    1598:	312e0e05 			; <UNDEFINED> instruction: 0x312e0e05
    159c:	03590105 	cmpeq	r9, #1073741825	; 0x40000001
    15a0:	052e0809 	streq	r0, [lr, #-2057]!	; 0xfffff7f7
    15a4:	25054c20 	strcs	r4, [r5, #-3104]	; 0xfffff3e0
    15a8:	3d26053d 	cfstr32cc	mvfx0, [r6, #-244]!	; 0xffffff0c
    15ac:	053d1f05 	ldreq	r1, [sp, #-3845]!	; 0xfffff0fb
    15b0:	25053d24 	strcs	r3, [r5, #-3364]	; 0xfffff2dc
    15b4:	26053d3d 			; <UNDEFINED> instruction: 0x26053d3d
    15b8:	3d01053d 	cfstr32cc	mvfx0, [r1, #-244]	; 0xffffff0c
    15bc:	054a1a03 	strbeq	r1, [sl, #-2563]	; 0xfffff5fd
    15c0:	052fbb0c 	streq	fp, [pc, #-2828]!	; abc <startup-0x1ffff544>
    15c4:	052f5107 	streq	r5, [pc, #-263]!	; 14c5 <startup-0x1fffeb3b>
    15c8:	17053e1a 	smladne	r5, sl, lr, r3
    15cc:	2e08052e 	cfsh32cs	mvfx0, mvfx8, #30
    15d0:	05310e05 	ldreq	r0, [r1, #-3589]!	; 0xfffff1fb
    15d4:	0e053c11 	mcreq	12, 0, r3, cr5, cr1, {0}
    15d8:	4c05054a 	cfstr32mi	mvfx0, [r5], {74}	; 0x4a
    15dc:	02002505 	andeq	r2, r0, #20971520	; 0x1400000
    15e0:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
    15e4:	09054c18 	stmdbeq	r5, {r3, r4, sl, fp, lr}
    15e8:	3f1c0558 	svccc	0x001c0558
    15ec:	860c0569 	strhi	r0, [ip], -r9, ror #10
    15f0:	054a3105 	strbeq	r3, [sl, #-261]	; 0xfffffefb
    15f4:	1c053c09 	stcne	12, cr3, [r5], {9}
    15f8:	1f05693f 	svcne	0x0005693f
    15fc:	581c052e 	ldmdapl	ip, {r1, r2, r3, r5, r8, sl}
    1600:	033e0105 	teqeq	lr, #1073741825	; 0x40000001
    1604:	0e059e09 	cdpeq	14, 0, cr9, cr5, cr9, {0}
    1608:	3d01055d 	cfstr32cc	mvfx0, [r1, #-372]	; 0xfffffe8c
    160c:	054a0a03 	strbeq	r0, [sl, #-2563]	; 0xfffff5fd
    1610:	01055d0e 	tsteq	r5, lr, lsl #26
    1614:	4a09033d 	bmi	242310 <startup-0x1fdbdcf0>
    1618:	055d0e05 	ldrbeq	r0, [sp, #-3589]	; 0xfffff1fb
    161c:	09033d01 	stmdbeq	r3, {r0, r8, sl, fp, ip, sp}
    1620:	5d0e054a 	cfstr32pl	mvfx0, [lr, #-296]	; 0xfffffed8
    1624:	033d0105 	teqeq	sp, #1073741825	; 0x40000001
    1628:	0c054a0c 			; <UNDEFINED> instruction: 0x0c054a0c
    162c:	694d4f75 	stmdbvs	sp, {r0, r2, r4, r5, r6, r8, r9, sl, fp, lr}^
    1630:	05770f05 	ldrbeq	r0, [r7, #-3845]!	; 0xfffff0fb
    1634:	0d034b01 	vstreq	d4, [r3, #-4]
    1638:	750c054a 	strvc	r0, [ip, #-1354]	; 0xfffffab6
    163c:	0f054d4f 	svceq	0x00054d4f
    1640:	4a0c0569 	bmi	302bec <startup-0x1fcfd414>
    1644:	055b0f05 	ldrbeq	r0, [fp, #-3845]	; 0xfffff0fb
    1648:	0c034b01 			; <UNDEFINED> instruction: 0x0c034b01
    164c:	750c0566 	strvc	r0, [ip, #-1382]	; 0xfffffa9a
    1650:	05694d50 	strbeq	r4, [r9, #-3408]!	; 0xfffff2b0
    1654:	0105770f 	tsteq	r5, pc, lsl #14
    1658:	4a0c034b 	bmi	30238c <startup-0x1fcfdc74>
    165c:	4f750c05 	svcmi	0x00750c05
    1660:	690f054d 	stmdbvs	pc, {r0, r2, r3, r6, r8, sl}	; <UNPREDICTABLE>
    1664:	054a0c05 	strbeq	r0, [sl, #-3077]	; 0xfffff3fb
    1668:	01055b0f 	tsteq	r5, pc, lsl #22
    166c:	660c034b 	strvs	r0, [ip], -fp, asr #6
    1670:	50750c05 	rsbspl	r0, r5, r5, lsl #24
    1674:	0f05694d 	svceq	0x0005694d
    1678:	4b010577 	blmi	42c5c <startup-0x1ffbd3a4>
    167c:	054a0d03 	strbeq	r0, [sl, #-3331]	; 0xfffff2fd
    1680:	4d50750c 	cfldr64mi	mvdx7, [r0, #-48]	; 0xffffffd0
    1684:	05690f05 	strbeq	r0, [r9, #-3845]!	; 0xfffff0fb
    1688:	0f054a0c 	svceq	0x00054a0c
    168c:	4b01055b 	blmi	42c00 <startup-0x1ffbd400>
    1690:	05660c03 	strbeq	r0, [r6, #-3075]!	; 0xfffff3fd
    1694:	4d50750c 	cfldr64mi	mvdx7, [r0, #-48]	; 0xffffffd0
    1698:	770f0569 	strvc	r0, [pc, -r9, ror #10]
    169c:	034b0105 	movteq	r0, #45317	; 0xb105
    16a0:	0c054a0c 			; <UNDEFINED> instruction: 0x0c054a0c
    16a4:	054d5075 	strbeq	r5, [sp, #-117]	; 0xffffff8b
    16a8:	0c05690f 			; <UNDEFINED> instruction: 0x0c05690f
    16ac:	5b0f054a 	blpl	3c2bdc <startup-0x1fc3d424>
    16b0:	034b0105 	movteq	r0, #45317	; 0xb105
    16b4:	0c05660c 	stceq	6, cr6, [r5], {12}
    16b8:	694d5175 	stmdbvs	sp, {r0, r2, r4, r5, r6, r8, ip, lr}^
    16bc:	05770f05 	ldrbeq	r0, [r7, #-3845]!	; 0xfffff0fb
    16c0:	0d034b01 	vstreq	d4, [r3, #-4]
    16c4:	750c054a 	strvc	r0, [ip, #-1354]	; 0xfffffab6
    16c8:	0f054d51 	svceq	0x00054d51
    16cc:	4a0c0569 	bmi	302c78 <startup-0x1fcfd388>
    16d0:	055b0f05 	ldrbeq	r0, [fp, #-3845]	; 0xfffff0fb
    16d4:	0c034b01 			; <UNDEFINED> instruction: 0x0c034b01
    16d8:	750c0566 	strvc	r0, [ip, #-1382]	; 0xfffffa9a
    16dc:	05694d51 	strbeq	r4, [r9, #-3409]!	; 0xfffff2af
    16e0:	0105770f 	tsteq	r5, pc, lsl #14
    16e4:	4a0c034b 	bmi	302418 <startup-0x1fcfdbe8>
    16e8:	51750c05 	cmnpl	r5, r5, lsl #24
    16ec:	690f054d 	stmdbvs	pc, {r0, r2, r3, r6, r8, sl}	; <UNPREDICTABLE>
    16f0:	054a0c05 	strbeq	r0, [sl, #-3077]	; 0xfffff3fb
    16f4:	01055b0f 	tsteq	r5, pc, lsl #22
    16f8:	660c034b 	strvs	r0, [ip], -fp, asr #6
    16fc:	50750c05 	rsbspl	r0, r5, r5, lsl #24
    1700:	0f05694d 	svceq	0x0005694d
    1704:	4b010577 	blmi	42ce8 <startup-0x1ffbd318>
    1708:	054a0d03 	strbeq	r0, [sl, #-3331]	; 0xfffff2fd
    170c:	4d50750c 	cfldr64mi	mvdx7, [r0, #-48]	; 0xffffffd0
    1710:	05690f05 	strbeq	r0, [r9, #-3845]!	; 0xfffff0fb
    1714:	0f054a0c 	svceq	0x00054a0c
    1718:	4b01055b 	blmi	42c8c <startup-0x1ffbd374>
    171c:	054a0c03 	strbeq	r0, [sl, #-3075]	; 0xfffff3fd
    1720:	4d50750c 	cfldr64mi	mvdx7, [r0, #-48]	; 0xffffffd0
    1724:	770f0569 	strvc	r0, [pc, -r9, ror #10]
    1728:	034b0105 	movteq	r0, #45317	; 0xb105
    172c:	0c054a0c 			; <UNDEFINED> instruction: 0x0c054a0c
    1730:	054d5075 	strbeq	r5, [sp, #-117]	; 0xffffff8b
    1734:	0c05690f 			; <UNDEFINED> instruction: 0x0c05690f
    1738:	5b0f054a 	blpl	3c2c68 <startup-0x1fc3d398>
    173c:	034b0105 	movteq	r0, #45317	; 0xb105
    1740:	0c054a0c 			; <UNDEFINED> instruction: 0x0c054a0c
    1744:	500b0575 	andpl	r0, fp, r5, ror r5
    1748:	0e05674d 	cdpeq	7, 0, cr6, cr5, cr13, {2}
    174c:	4b010577 	blmi	42d30 <startup-0x1ffbd2d0>
    1750:	054a0c03 	strbeq	r0, [sl, #-3075]	; 0xfffff3fd
    1754:	0b05750c 	bleq	15eb8c <startup-0x1fea1474>
    1758:	05674d4f 	strbeq	r4, [r7, #-3407]!	; 0xfffff2b1
    175c:	0105770e 	tsteq	r5, lr, lsl #14
    1760:	4a0d034b 	bmi	342494 <startup-0x1fcbdb6c>
    1764:	05750c05 	ldrbeq	r0, [r5, #-3077]!	; 0xfffff3fb
    1768:	054d500b 	strbeq	r5, [sp, #-11]
    176c:	0b05670e 	bleq	15b3ac <startup-0x1fea4c54>
    1770:	5b0e054a 	blpl	382ca0 <startup-0x1fc7d360>
    1774:	034b0105 	movteq	r0, #45317	; 0xb105
    1778:	0c054a0c 			; <UNDEFINED> instruction: 0x0c054a0c
    177c:	500b0575 	andpl	r0, fp, r5, ror r5
    1780:	670e054d 	strvs	r0, [lr, -sp, asr #10]
    1784:	054a0b05 	strbeq	r0, [sl, #-2821]	; 0xfffff4fb
    1788:	01055b0e 	tsteq	r5, lr, lsl #22
    178c:	4a0c034b 	bmi	3024c0 <startup-0x1fcfdb40>
    1790:	05750c05 	ldrbeq	r0, [r5, #-3077]!	; 0xfffff3fb
    1794:	054d500b 	strbeq	r5, [sp, #-11]
    1798:	0b05670e 	bleq	15b3d8 <startup-0x1fea4c28>
    179c:	5b0e054a 	blpl	382ccc <startup-0x1fc7d334>
    17a0:	034b0105 	movteq	r0, #45317	; 0xb105
    17a4:	0c05660c 	stceq	6, cr6, [r5], {12}
    17a8:	500b0575 	andpl	r0, fp, r5, ror r5
    17ac:	670e054d 	strvs	r0, [lr, -sp, asr #10]
    17b0:	054a0b05 	strbeq	r0, [sl, #-2821]	; 0xfffff4fb
    17b4:	01055b0e 	tsteq	r5, lr, lsl #22
    17b8:	660c034b 	strvs	r0, [ip], -fp, asr #6
    17bc:	05750c05 	ldrbeq	r0, [r5, #-3077]!	; 0xfffff3fb
    17c0:	054d500b 	strbeq	r5, [sp, #-11]
    17c4:	0b05670e 	bleq	15b404 <startup-0x1fea4bfc>
    17c8:	5b0e054a 	blpl	382cf8 <startup-0x1fc7d308>
    17cc:	034b0105 	movteq	r0, #45317	; 0xb105
    17d0:	0c056610 	stceq	6, cr6, [r5], {16}
    17d4:	511605bb 			; <UNDEFINED> instruction: 0x511605bb
    17d8:	054a0705 	strbeq	r0, [sl, #-1797]	; 0xfffff8fb
    17dc:	1105310e 	tstne	r5, lr, lsl #2
    17e0:	4a0e053c 	bmi	382cd8 <startup-0x1fc7d328>
    17e4:	3c25054d 	cfstr32cc	mvfx0, [r5], #-308	; 0xfffffecc
    17e8:	05661205 	strbeq	r1, [r6, #-517]!	; 0xfffffdfb
    17ec:	0105200e 	tsteq	r5, lr
    17f0:	4a0f034b 	bmi	3c2524 <startup-0x1fc3dadc>
    17f4:	05bb0c05 	ldreq	r0, [fp, #3077]!	; 0xc05
    17f8:	07055117 	smladeq	r5, r7, r1, r5
    17fc:	310e054a 	tstcc	lr, sl, asr #10
    1800:	053c1105 	ldreq	r1, [ip, #-261]!	; 0xfffffefb
    1804:	054d4a0e 	strbeq	r4, [sp, #-2574]	; 0xfffff5f2
    1808:	12053c26 	andne	r3, r5, #9728	; 0x2600
    180c:	200e0566 	andcs	r0, lr, r6, ror #10
    1810:	034b0105 	movteq	r0, #45317	; 0xb105
    1814:	054a00c5 	strbeq	r0, [sl, #-197]	; 0xffffff3b
    1818:	06056017 			; <UNDEFINED> instruction: 0x06056017
    181c:	3105052e 	tstcc	r5, lr, lsr #10
    1820:	03010594 	movweq	r0, #5524	; 0x1594
    1824:	1c057420 	cfstrsne	mvf7, [r5], {32}
    1828:	05206203 	streq	r6, [r0, #-515]!	; 0xfffffdfd
    182c:	05052e0b 	streq	r2, [r5, #-3595]	; 0xfffff1f5
    1830:	01059432 	tsteq	r5, r2, lsr r4
    1834:	05741603 	ldrbeq	r1, [r4, #-1539]!	; 0xfffff9fd
    1838:	206c031c 	rsbcs	r0, ip, ip, lsl r3
    183c:	052e0b05 	streq	r0, [lr, #-2821]!	; 0xfffff4fb
    1840:	05943205 	ldreq	r3, [r4, #517]	; 0x205
    1844:	740c0301 	strvc	r0, [ip], #-769	; 0xfffffcff
    1848:	7a030505 	bvc	c2c64 <startup-0x1ff3d39c>
    184c:	01059420 	tsteq	r5, r0, lsr #8
    1850:	4a090376 	bmi	242630 <startup-0x1fdbd9d0>
    1854:	054c2105 	strbeq	r2, [ip, #-261]	; 0xfffffefb
    1858:	25053d24 	strcs	r3, [r5, #-3364]	; 0xfffff2dc
    185c:	22053d3d 	andcs	r3, r5, #3904	; 0xf40
    1860:	3d01053d 	cfstr32cc	mvfx0, [r1, #-244]	; 0xffffff0c
    1864:	054a0c03 	strbeq	r0, [sl, #-3075]	; 0xfffff3fd
    1868:	054b590c 	strbeq	r5, [fp, #-2316]	; 0xfffff6f4
    186c:	06055017 			; <UNDEFINED> instruction: 0x06055017
    1870:	3018052e 	andscc	r0, r8, lr, lsr #10
    1874:	4d17054e 	cfldr32mi	mvfx0, [r7, #-312]	; 0xfffffec8
    1878:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
    187c:	055c3019 	ldrbeq	r3, [ip, #-25]	; 0xffffffe7
    1880:	06054c17 			; <UNDEFINED> instruction: 0x06054c17
    1884:	3105052e 	tstcc	r5, lr, lsr #10
    1888:	05bc7693 	ldreq	r7, [ip, #1683]!	; 0x693
    188c:	740e0301 	strvc	r0, [lr], #-769	; 0xfffffcff
    1890:	77030505 	strvc	r0, [r3, -r5, lsl #10]
    1894:	bc769320 	ldcllt	3, cr9, [r6], #-128	; 0xffffff80
    1898:	52760105 	rsbspl	r0, r6, #1073741825	; 0x40000001
    189c:	054f0e05 	strbeq	r0, [pc, #-3589]	; a9f <startup-0x1ffff561>
    18a0:	09032f01 	stmdbeq	r3, {r0, r8, r9, sl, fp, sp}
    18a4:	4f0e054a 	svcmi	0x000e054a
    18a8:	522f0105 	eorpl	r0, pc, #1073741825	; 0x40000001
    18ac:	054f0e05 	strbeq	r0, [pc, #-3589]	; aaf <startup-0x1ffff551>
    18b0:	05522f01 	ldrbeq	r2, [r2, #-3841]	; 0xfffff0ff
    18b4:	01054f0e 	tsteq	r5, lr, lsl #30
    18b8:	4a0e032f 	bmi	38257c <startup-0x1fc7da84>
    18bc:	857a0f05 	ldrbhi	r0, [sl, #-3845]!	; 0xfffff0fb
    18c0:	03910105 	orrseq	r0, r1, #1073741825	; 0x40000001
    18c4:	0f054a0f 	svceq	0x00054a0f
    18c8:	1205857a 	andne	r8, r5, #511705088	; 0x1e800000
    18cc:	4a0f053c 	bmi	3c2dc4 <startup-0x1fc3d23c>
    18d0:	034b0105 	movteq	r0, #45317	; 0xb105
    18d4:	0f05660e 	svceq	0x0005660e
    18d8:	0105857a 	tsteq	r5, sl, ror r5
    18dc:	4a0e0391 	bmi	382728 <startup-0x1fc7d8d8>
    18e0:	857a0f05 	ldrbhi	r0, [sl, #-3845]!	; 0xfffff0fb
    18e4:	053c1205 	ldreq	r1, [ip, #-517]!	; 0xfffffdfb
    18e8:	01054a0f 	tsteq	r5, pc, lsl #20
    18ec:	662b034b 	strtvs	r0, [fp], -fp, asr #6
    18f0:	0c032c05 	stceq	12, cr2, [r3], {5}
    18f4:	2e500558 	mrccs	5, 2, r0, cr0, cr8, {2}
    18f8:	052e0e05 	streq	r0, [lr, #-3589]!	; 0xfffff1fb
    18fc:	0e052f20 	cdpeq	15, 0, cr2, cr5, cr0, {1}
    1900:	2f44052d 	svccs	0x0044052d
    1904:	052d0e05 	streq	r0, [sp, #-3589]!	; 0xfffff1fb
    1908:	0e053020 	cdpeq	0, 0, cr3, cr5, cr0, {1}
    190c:	3040052c 	subcc	r0, r0, ip, lsr #10
    1910:	052c0e05 	streq	r0, [ip, #-3589]!	; 0xfffff1fb
    1914:	0e053120 	adfeqsp	f3, f5, f0
    1918:	5c01052b 	cfstr32pl	mvfx0, [r1], {43}	; 0x2b
    191c:	054a0903 	strbeq	r0, [sl, #-2307]	; 0xfffff6fd
    1920:	3d3d4c25 	ldccc	12, cr4, [sp, #-148]!	; 0xffffff6c
    1924:	053d2405 	ldreq	r2, [sp, #-1029]!	; 0xfffffbfb
    1928:	29053d21 	stmdbcs	r5, {r0, r5, r8, sl, fp, ip, sp}
    192c:	3d2b053d 	cfstr32cc	mvfx0, [fp, #-244]!	; 0xffffff0c
    1930:	033d0105 	teqeq	sp, #1073741825	; 0x40000001
    1934:	06054a0a 	streq	r4, [r5], -sl, lsl #20
    1938:	4d100579 	cfldr32mi	mvfx0, [r0, #-484]	; 0xfffffe1c
    193c:	05a50105 	streq	r0, [r5, #261]!	; 0x105
    1940:	01051e10 	tsteq	r5, r0, lsl lr
    1944:	740a03a0 	strvc	r0, [sl], #-928	; 0xfffffc60
    1948:	05790605 	ldrbeq	r0, [r9, #-1541]!	; 0xfffff9fb
    194c:	01054d0f 	tsteq	r5, pc, lsl #26
    1950:	1e0f0589 	cfsh32ne	mvfx0, mvfx15, #-55
    1954:	03840105 	orreq	r0, r4, #1073741825	; 0x40000001
    1958:	06054a0a 	streq	r4, [r5], -sl, lsl #20
    195c:	4d0f0578 	cfstr32mi	mvfx0, [pc, #-480]	; 1784 <startup-0x1fffe87c>
    1960:	05890105 	streq	r0, [r9, #261]	; 0x105
    1964:	01051e0f 	tsteq	r5, pc, lsl #28
    1968:	4a2b0384 	bmi	ac2780 <startup-0x1f53d880>
    196c:	05c00605 	strbeq	r0, [r0, #1541]	; 0x605
    1970:	01054d10 	tsteq	r5, r0, lsl sp
    1974:	1e100597 	cfcmp32ne	r0, mvfx0, mvfx7
    1978:	053c1305 	ldreq	r1, [ip, #-773]!	; 0xfffffcfb
    197c:	01054a10 	tsteq	r5, r0, lsl sl
    1980:	4a16034c 	bmi	5826b8 <startup-0x1fa7d948>
    1984:	057a0d05 	ldrbeq	r0, [sl, #-3333]!	; 0xfffff2fb
    1988:	1a034b01 	bne	d4594 <startup-0x1ff2ba6c>
    198c:	750c054a 	strvc	r0, [ip, #-1354]	; 0xfffffab6
    1990:	3c1d0550 	cfldr32cc	mvfx0, [sp], {80}	; 0x50
    1994:	054a0605 	strbeq	r0, [sl, #-1541]	; 0xfffff9fb
    1998:	054e300f 	strbeq	r3, [lr, #-15]
    199c:	01054c0a 	tsteq	r5, sl, lsl #24
    19a0:	4a1a033d 	bmi	68269c <startup-0x1f97d964>
    19a4:	05790e05 	ldrbeq	r0, [r9, #-3589]!	; 0xfffff1fb
    19a8:	01054a0c 	tsteq	r5, ip, lsl #20
    19ac:	4a16032f 	bmi	582670 <startup-0x1fa7d990>
    19b0:	4b750c05 	blmi	1d449cc <startup-0x1e2bb634>
    19b4:	054a1c05 	strbeq	r1, [sl, #-3077]	; 0xfffff3fb
    19b8:	0c054f12 	stceq	15, cr4, [r5], {18}
    19bc:	5a12053c 	bpl	482eb4 <startup-0x1fb7d14c>
    19c0:	053c0c05 	ldreq	r0, [ip, #-3077]!	; 0xfffff3fb
    19c4:	25055906 	strcs	r5, [r5, #-2310]	; 0xfffff6fa
    19c8:	01040200 	mrseq	r0, R12_usr
    19cc:	4c0f054a 	cfstr32mi	mvfx0, [pc], {74}	; 0x4a
    19d0:	4c0a054e 	cfstr32mi	mvfx0, [sl], {78}	; 0x4e
    19d4:	033d0105 	teqeq	sp, #1073741825	; 0x40000001
    19d8:	0e054a16 			; <UNDEFINED> instruction: 0x0e054a16
    19dc:	4a0c0579 	bmi	302fc8 <startup-0x1fcfd038>
    19e0:	032f0105 			; <UNDEFINED> instruction: 0x032f0105
    19e4:	0d054a1f 	vstreq	s8, [r5, #-124]	; 0xffffff84
    19e8:	910105c1 	smlabtls	r1, r1, r5, r0
    19ec:	054a1303 	strbeq	r1, [sl, #-771]	; 0xfffffcfd
    19f0:	1005c006 	andne	ip, r5, r6
    19f4:	9701054d 	strls	r0, [r1, -sp, asr #10]
    19f8:	051e1005 	ldreq	r1, [lr, #-5]
    19fc:	10053c13 	andne	r3, r5, r3, lsl ip
    1a00:	4c01054a 	cfstr32mi	mvfx0, [r1], {74}	; 0x4a
    1a04:	054a0a03 	strbeq	r0, [sl, #-2563]	; 0xfffff5fd
    1a08:	0f057906 	svceq	0x00057906
    1a0c:	8901054d 	stmdbhi	r1, {r0, r2, r3, r6, r8, sl}
    1a10:	051e0f05 	ldreq	r0, [lr, #-3845]	; 0xfffff0fb
    1a14:	18038401 	stmdane	r3, {r0, sl, pc}
    1a18:	4f0e054a 	svcmi	0x000e054a
    1a1c:	03830105 	orreq	r0, r3, #1073741825	; 0x40000001
    1a20:	03054a0f 	movweq	r4, #23055	; 0x5a0f
    1a24:	770e057a 	smlsdxvc	lr, sl, r5, r0
    1a28:	03830105 	orreq	r0, r3, #1073741825	; 0x40000001
    1a2c:	06054a15 			; <UNDEFINED> instruction: 0x06054a15
    1a30:	05052708 	streq	r2, [r5, #-1800]	; 0xfffff8f8
    1a34:	0305a24c 	movweq	sl, #21068	; 0x524c
    1a38:	840e05a1 	strhi	r0, [lr], #-1441	; 0xfffffa5f
    1a3c:	03830105 	orreq	r0, r3, #1073741825	; 0x40000001
    1a40:	0c054a15 			; <UNDEFINED> instruction: 0x0c054a15
    1a44:	03052108 	movweq	r2, #20744	; 0x5108
    1a48:	af0b0552 	svcge	0x000b0552
    1a4c:	6769774d 	strbvs	r7, [r9, -sp, asr #14]!
    1a50:	05690e05 	strbeq	r0, [r9, #-3589]!	; 0xfffff1fb
    1a54:	15034b01 	strne	r4, [r3, #-2817]	; 0xfffff4ff
    1a58:	0803054a 	stmdaeq	r3, {r1, r3, r6, r8, sl}
    1a5c:	a10e0528 	tstge	lr, r8, lsr #10
    1a60:	03910105 	orrseq	r0, r1, #1073741825	; 0x40000001
    1a64:	0c054a3a 			; <UNDEFINED> instruction: 0x0c054a3a
    1a68:	510b0575 	tstpl	fp, r5, ror r5
    1a6c:	0e05694d 	vmlseq.f16	s12, s10, s26	; <UNPREDICTABLE>
    1a70:	4b010577 	blmi	43054 <startup-0x1ffbcfac>
    1a74:	054a1903 	strbeq	r1, [sl, #-2307]	; 0xfffff6fd
    1a78:	05847a0d 	streq	r7, [r4, #2573]	; 0xa0d
    1a7c:	0f039101 	svceq	0x00039101
    1a80:	7a0e054a 	bvc	382fb0 <startup-0x1fc7d050>
    1a84:	91010585 	smlabbls	r1, r5, r5, r0
    1a88:	054a0d03 	strbeq	r0, [sl, #-3331]	; 0xfffff2fd
    1a8c:	05857a0e 	streq	r7, [r5, #2574]	; 0xa0e
    1a90:	15039101 	strne	r9, [r3, #-257]	; 0xfffffeff
    1a94:	080c054a 	stmdaeq	ip, {r1, r3, r6, r8, sl}
    1a98:	520b0521 	andpl	r0, fp, #138412032	; 0x8400000
    1a9c:	694f054d 	stmdbvs	pc, {r0, r2, r3, r6, r8, sl}^	; <UNPREDICTABLE>
    1aa0:	054a2f05 	strbeq	r2, [sl, #-3845]	; 0xfffff0fb
    1aa4:	0b054a0e 	bleq	1542e4 <startup-0x1feabd1c>
    1aa8:	5b0e054a 	blpl	382fd8 <startup-0x1fc7d028>
    1aac:	034b0105 	movteq	r0, #45317	; 0xb105
    1ab0:	0c054a27 			; <UNDEFINED> instruction: 0x0c054a27
    1ab4:	4b4b2108 	blmi	12c9edc <startup-0x1ed36124>
    1ab8:	09030b05 	stmdbeq	r3, {r0, r2, r8, r9, fp}
    1abc:	4d0c054a 	cfstr32mi	mvfx0, [ip, #-296]	; 0xfffffed8
    1ac0:	4d4d0b05 	vstrmi	d16, [sp, #-20]	; 0xffffffec
    1ac4:	770c0575 	smlsdxvc	ip, r5, r5, r0
    1ac8:	770b0567 	strvc	r0, [fp, -r7, ror #10]
    1acc:	05672b05 	strbeq	r2, [r7, #-2821]!	; 0xfffff4fb
    1ad0:	0b054a0e 	bleq	154310 <startup-0x1feabcf0>
    1ad4:	5b0e0558 	blpl	38303c <startup-0x1fc7cfc4>
    1ad8:	054d0f05 	strbeq	r0, [sp, #-3845]	; 0xfffff0fb
    1adc:	01054d0e 	tsteq	r5, lr, lsl #26
    1ae0:	660b034b 	strvs	r0, [fp], -fp, asr #6
    1ae4:	05790605 	ldrbeq	r0, [r9, #-1541]!	; 0xfffff9fb
    1ae8:	01054d0f 	tsteq	r5, pc, lsl #26
    1aec:	1e0f0589 	cfsh32ne	mvfx0, mvfx15, #-55
    1af0:	03840105 	orreq	r0, r4, #1073741825	; 0x40000001
    1af4:	0c054a24 			; <UNDEFINED> instruction: 0x0c054a24
    1af8:	5901057a 	stmdbpl	r1, {r1, r3, r4, r5, r6, r8, sl}
    1afc:	054a1903 	strbeq	r1, [sl, #-2307]	; 0xfffff6fd
    1b00:	0521080c 	streq	r0, [r1, #-2060]!	; 0xfffff7f4
    1b04:	0e054a1a 			; <UNDEFINED> instruction: 0x0e054a1a
    1b08:	830c054d 	movwhi	r0, #50509	; 0xc54d
    1b0c:	054b0b05 	strbeq	r0, [fp, #-2821]	; 0xfffff4fb
    1b10:	2c054d0c 	stccs	13, cr4, [r5], {12}
    1b14:	4a0f0567 	bmi	3c30b8 <startup-0x1fc3cf48>
    1b18:	054a0c05 	strbeq	r0, [sl, #-3077]	; 0xfffff3fb
    1b1c:	05675b0b 	strbeq	r5, [r7, #-2827]!	; 0xfffff4f5
    1b20:	0e05a10f 	mvfeqs	f2, #10.0
    1b24:	4b01054b 	blmi	43058 <startup-0x1ffbcfa8>
    1b28:	054a1603 	strbeq	r1, [sl, #-1539]	; 0xfffff9fd
    1b2c:	0521080c 	streq	r0, [r1, #-2060]!	; 0xfffff7f4
    1b30:	27054a1a 	smladcs	r5, sl, sl, r4
    1b34:	4d0e054a 	cfstr32mi	mvfx0, [lr, #-296]	; 0xfffffed8
    1b38:	05830c05 	streq	r0, [r3, #3077]	; 0xc05
    1b3c:	07054b0b 	streq	r4, [r5, -fp, lsl #22]
    1b40:	5b0c054b 	blpl	303074 <startup-0x1fcfcf8c>
    1b44:	05750f05 	ldrbeq	r0, [r5, #-3845]!	; 0xfffff0fb
    1b48:	0f054a0c 	svceq	0x00054a0c
    1b4c:	580c0559 	stmdapl	ip, {r0, r3, r4, r6, r8, sl}
    1b50:	675b0b05 	ldrbvs	r0, [fp, -r5, lsl #22]
    1b54:	05a10f05 	streq	r0, [r1, #3845]!	; 0xf05
    1b58:	01054b0e 	tsteq	r5, lr, lsl #22
    1b5c:	6615034b 	ldrvs	r0, [r5], -fp, asr #6
    1b60:	21080c05 	tstcs	r8, r5, lsl #24
    1b64:	054a1a05 	strbeq	r1, [sl, #-2565]	; 0xfffff5fb
    1b68:	0e054a27 	vmlaeq.f32	s8, s10, s15
    1b6c:	830c054d 	movwhi	r0, #50509	; 0xc54d
    1b70:	054b0b05 	strbeq	r0, [fp, #-2821]	; 0xfffff4fb
    1b74:	0c054b07 			; <UNDEFINED> instruction: 0x0c054b07
    1b78:	752c055b 	strvc	r0, [ip, #-1371]!	; 0xfffffaa5
    1b7c:	054a0f05 	strbeq	r0, [sl, #-3845]	; 0xfffff0fb
    1b80:	0b05580c 	bleq	157bb8 <startup-0x1fea8448>
    1b84:	0f05675b 	svceq	0x0005675b
    1b88:	4b0e05af 	blmi	38324c <startup-0x1fc7cdb4>
    1b8c:	034b0105 	movteq	r0, #45317	; 0xb105
    1b90:	0c059015 	stceq	0, cr9, [r5], {21}
    1b94:	1a052108 	bne	149fbc <startup-0x1feb6044>
    1b98:	4a27054a 	bmi	9c30c8 <startup-0x1f63cf38>
    1b9c:	054d0e05 	strbeq	r0, [sp, #-3589]	; 0xfffff1fb
    1ba0:	0b05830c 	bleq	1627d8 <startup-0x1fe9d828>
    1ba4:	4b07054b 	blmi	1c30d8 <startup-0x1fe3cf28>
    1ba8:	055b0c05 	ldrbeq	r0, [fp, #-3077]	; 0xfffff3fb
    1bac:	0c05750f 	cfstr32eq	mvfx7, [r5], {15}
    1bb0:	590f0558 	stmdbpl	pc, {r3, r4, r6, r8, sl}	; <UNPREDICTABLE>
    1bb4:	054a0c05 	strbeq	r0, [sl, #-3077]	; 0xfffff3fb
    1bb8:	05675b0b 	strbeq	r5, [r7, #-2827]!	; 0xfffff4f5
    1bbc:	0e05af0f 	cdpeq	15, 0, cr10, cr5, cr15, {0}
    1bc0:	4b01054b 	blmi	430f4 <startup-0x1ffbcf0c>
    1bc4:	01000a02 	tsteq	r0, r2, lsl #20
    1bc8:	Address 0x00001bc8 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	5f434352 	svcpl	0x00434352
       4:	4b4c4348 	blmi	1310d2c <startup-0x1ecef2d4>
       8:	43435200 	movtmi	r5, #12800	; 0x3200
       c:	45534c5f 	ldrbmi	r4, [r3, #-3167]	; 0xfffff3a1
      10:	42504100 	subsmi	r4, r0, #0, 2
      14:	45504c31 	ldrbmi	r4, [r0, #-3121]	; 0xfffff3cf
      18:	5200524e 	andpl	r5, r0, #-536870908	; 0xe0000004
      1c:	505f4343 	subspl	r4, pc, r3, asr #6
      20:	41534c4c 	cmpmi	r3, ip, asr #24
      24:	646d4349 	strbtvs	r4, [sp], #-841	; 0xfffffcb7
      28:	43435200 	movtmi	r5, #12800	; 0x3200
      2c:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
      30:	44494153 	strbmi	r4, [r9], #-339	; 0xfffffead
      34:	00517669 	subseq	r7, r1, r9, ror #12
      38:	5f434352 	svcpl	0x00434352
      3c:	534c4c50 	movtpl	r4, #52304	; 0xcc50
      40:	69444941 	stmdbvs	r4, {r0, r6, r8, fp, lr}^
      44:	73005276 	movwvc	r5, #630	; 0x276
      48:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
      4c:	67657273 			; <UNDEFINED> instruction: 0x67657273
      50:	53595300 	cmppl	r9, #0, 6
      54:	5f4b4c43 	svcpl	0x004b4c43
      58:	71657246 	cmnvc	r5, r6, asr #4
      5c:	636e6575 	cmnvs	lr, #490733568	; 0x1d400000
      60:	6c700079 	ldclvs	0, cr0, [r0], #-484	; 0xfffffe1c
      64:	70006d6c 	andvc	r6, r0, ip, ror #26
      68:	00706c6c 	rsbseq	r6, r0, ip, ror #24
      6c:	69755f5f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
      70:	5f38746e 	svcpl	0x0038746e
      74:	43520074 	cmpmi	r2, #116	; 0x74
      78:	434d5f43 	movtmi	r5, #57155	; 0xdf43
      7c:	6f53314f 	svcvs	0x0053314f
      80:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
      84:	43435200 	movtmi	r5, #12800	; 0x3200
      88:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
      8c:	72655031 	rsbvc	r5, r5, #49	; 0x31
      90:	52687069 	rsbpl	r7, r8, #105	; 0x69
      94:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
      98:	00646d43 	rsbeq	r6, r4, r3, asr #26
      9c:	4e4c4c50 	mcrmi	12, 2, r4, cr12, cr0, {2}
      a0:	43435200 	movtmi	r5, #12800	; 0x3200
      a4:	4941535f 	stmdbmi	r1, {r0, r1, r2, r3, r4, r6, r8, r9, ip, lr}^
      a8:	534c4c50 	movtpl	r4, #52304	; 0xcc50
      ac:	6c434941 	mcrrvs	9, 4, r4, r3, cr1	; <UNPREDICTABLE>
      b0:	7669446b 	strbtvc	r4, [r9], -fp, ror #8
      b4:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
      b8:	50006769 	andpl	r6, r0, r9, ror #14
      bc:	00504c4c 	subseq	r4, r0, ip, asr #24
      c0:	514c4c50 	cmppl	ip, r0, asr ip
      c4:	43435200 	movtmi	r5, #12800	; 0x3200
      c8:	656c435f 	strbvs	r4, [ip, #-863]!	; 0xfffffca1
      cc:	54497261 	strbpl	r7, [r9], #-609	; 0xfffffd9f
      d0:	646e6550 	strbtvs	r6, [lr], #-1360	; 0xfffffab0
      d4:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
      d8:	6c007469 	cfstrsvs	mvf7, [r0], {105}	; 0x69
      dc:	20676e6f 	rsbcs	r6, r7, pc, ror #28
      e0:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
      e4:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
      e8:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
      ec:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
      f0:	43520074 	cmpmi	r2, #116	; 0x74
      f4:	54495f43 	strbpl	r5, [r9], #-3907	; 0xfffff0bd
      f8:	4c4c5000 	marmi	acc0, r5, ip
      fc:	4352004d 	cmpmi	r2, #77	; 0x4d
     100:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
     104:	65503142 	ldrbvs	r3, [r0, #-322]	; 0xfffffebe
     108:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     10c:	42484100 	submi	r4, r8, #0, 2
     110:	45504c31 	ldrbmi	r4, [r0, #-3121]	; 0xfffff3cf
     114:	5200524e 	andpl	r5, r0, #-536870908	; 0xe0000004
     118:	435f4343 	cmpmi	pc, #201326593	; 0xc000001
     11c:	6b636f6c 	blvs	18dbed4 <startup-0x1e72412c>
     120:	43520073 	cmpmi	r2, #115	; 0x73
     124:	50415f43 	subpl	r5, r1, r3, asr #30
     128:	65503242 	ldrbvs	r3, [r0, #-578]	; 0xfffffdbe
     12c:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     130:	636f6c43 	cmnvs	pc, #17152	; 0x4300
     134:	4d504c6b 	ldclmi	12, cr4, [r0, #-428]	; 0xfffffe54
     138:	4365646f 	cmnmi	r5, #1862270976	; 0x6f000000
     13c:	4400646d 	strmi	r6, [r0], #-1133	; 0xfffffb93
     140:	46434b43 	strbmi	r4, [r3], -r3, asr #22
     144:	52005247 	andpl	r5, r0, #1879048196	; 0x70000004
     148:	435f4343 	cmpmi	pc, #201326593	; 0xc000001
     14c:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
     150:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
     154:	42484100 	submi	r4, r8, #0, 2
     158:	54535231 	ldrbpl	r5, [r3], #-561	; 0xfffffdcf
     15c:	43440052 	movtmi	r0, #16466	; 0x4052
     160:	4746434b 	strbmi	r4, [r6, -fp, asr #6]
     164:	74003252 	strvc	r3, [r0], #-594	; 0xfffffdae
     168:	6572706d 	ldrbvs	r7, [r2, #-109]!	; 0xffffff93
     16c:	43500067 	cmpmi	r0, #103	; 0x67
     170:	5f324b4c 	svcpl	0x00324b4c
     174:	71657246 	cmnvc	r5, r6, asr #4
     178:	636e6575 	cmnvs	lr, #490733568	; 0x1d400000
     17c:	43520079 	cmpmi	r2, #121	; 0x79
     180:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
     184:	65503242 	ldrbvs	r3, [r0, #-578]	; 0xfffffdbe
     188:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     18c:	636f6c43 	cmnvs	pc, #17152	; 0x4300
     190:	646d436b 	strbtvs	r4, [sp], #-875	; 0xfffffc95
     194:	414e4500 	cmpmi	lr, r0, lsl #10
     198:	00454c42 	subeq	r4, r5, r2, asr #24
     19c:	32425041 	subcc	r5, r2, #65	; 0x41
     1a0:	52545352 	subspl	r5, r4, #1207959553	; 0x48000001
     1a4:	43435200 	movtmi	r5, #12800	; 0x3200
     1a8:	4c43505f 	mcrrmi	0, 5, r5, r3, cr15
     1ac:	6f43314b 	svcvs	0x0043314b
     1b0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     1b4:	43435200 	movtmi	r5, #12800	; 0x3200
     1b8:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
     1bc:	72655033 	rsbvc	r5, r5, #51	; 0x33
     1c0:	52687069 	rsbpl	r7, r8, #105	; 0x69
     1c4:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
     1c8:	00646d43 	rsbeq	r6, r4, r3, asr #26
     1cc:	5f434352 	svcpl	0x00434352
     1d0:	42494153 	submi	r4, r9, #-1073741804	; 0xc0000014
     1d4:	6b636f6c 	blvs	18dbf8c <startup-0x1e724074>
     1d8:	4b4c4341 	blmi	1310ee4 <startup-0x1ecef11c>
     1dc:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     1e0:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
     1e4:	415f4343 	cmpmi	pc, r3, asr #6
     1e8:	50314248 	eorspl	r4, r1, r8, asr #4
     1ec:	70697265 	rsbvc	r7, r9, r5, ror #4
     1f0:	73655268 	cmnvc	r5, #104, 4	; 0x80000006
     1f4:	6d437465 	cfstrdvs	mvd7, [r3, #-404]	; 0xfffffe6c
     1f8:	43520064 	cmpmi	r2, #100	; 0x64
     1fc:	43485f43 	movtmi	r5, #36675	; 0x8f43
     200:	6f434b4c 	svcvs	0x00434b4c
     204:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     208:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
     20c:	6f6c2067 	svcvs	0x006c2067
     210:	6920676e 	stmdbvs	r0!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
     214:	5200746e 	andpl	r7, r0, #1845493760	; 0x6e000000
     218:	535f4343 	cmppl	pc, #201326593	; 0xc000001
     21c:	4c435359 	mcrrmi	3, 5, r5, r3, cr9
     220:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
     224:	00676966 	rsbeq	r6, r7, r6, ror #18
     228:	5f434352 	svcpl	0x00434352
     22c:	4345534c 	movtmi	r5, #21324	; 0x534c
     230:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     234:	43520067 	cmpmi	r2, #103	; 0x67
     238:	4c465f43 	mcrrmi	15, 4, r5, r6, cr3
     23c:	4e004741 	cdpmi	7, 0, cr4, cr0, cr1, {2}
     240:	74537765 	ldrbvc	r7, [r3], #-1893	; 0xfffff89b
     244:	00657461 	rsbeq	r7, r5, r1, ror #8
     248:	434c4c50 	movtmi	r4, #52304	; 0xcc50
     24c:	00524746 	subseq	r4, r2, r6, asr #14
     250:	5f434352 	svcpl	0x00434352
     254:	6b636142 	blvs	18d8764 <startup-0x1e72789c>
     258:	65527075 	ldrbvs	r7, [r2, #-117]	; 0xffffff8b
     25c:	43746573 	cmnmi	r4, #482344960	; 0x1cc00000
     260:	5f00646d 	svcpl	0x0000646d
     264:	6e69755f 	mcrvs	5, 3, r7, cr9, cr15, {2}
     268:	5f323374 	svcpl	0x00323374
     26c:	72450074 	subvc	r0, r5, #116	; 0x74
     270:	53726f72 	cmnpl	r2, #456	; 0x1c8
     274:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
     278:	43520073 	cmpmi	r2, #115	; 0x73
     27c:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
     280:	756f534c 	strbvc	r5, [pc, #-844]!	; ffffff3c <APBAHBPrescTable+0xdfffc6cc>
     284:	00656372 	rsbeq	r6, r5, r2, ror r3
     288:	5f434352 	svcpl	0x00434352
     28c:	53746547 	cmnpl	r4, #297795584	; 0x11c00000
     290:	4c435359 	mcrrmi	3, 5, r5, r3, cr9
     294:	756f534b 	strbvc	r5, [pc, #-843]!	; ffffff51 <APBAHBPrescTable+0xdfffc6e1>
     298:	00656372 	rsbeq	r6, r5, r2, ror r3
     29c:	20554e47 	subscs	r4, r5, r7, asr #28
     2a0:	20393943 	eorscs	r3, r9, r3, asr #18
     2a4:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
     2a8:	30322031 	eorscc	r2, r2, r1, lsr r0
     2ac:	30313931 	eorscc	r3, r1, r1, lsr r9
     2b0:	28203532 	stmdacs	r0!, {r1, r4, r5, r8, sl, ip, sp}
     2b4:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
     2b8:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
     2bc:	52415b20 	subpl	r5, r1, #32, 22	; 0x8000
     2c0:	72612f4d 	rsbvc	r2, r1, #308	; 0x134
     2c4:	2d392d6d 	ldccs	13, cr2, [r9, #-436]!	; 0xfffffe4c
     2c8:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
     2cc:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
     2d0:	73697665 	cmnvc	r9, #105906176	; 0x6500000
     2d4:	206e6f69 	rsbcs	r6, lr, r9, ror #30
     2d8:	35373732 	ldrcc	r3, [r7, #-1842]!	; 0xfffff8ce
     2dc:	205d3939 	subscs	r3, sp, r9, lsr r9
     2e0:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
     2e4:	20626d75 	rsbcs	r6, r2, r5, ror sp
     2e8:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
     2ec:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
     2f0:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
     2f4:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
     2f8:	616d2d20 	cmnvs	sp, r0, lsr #26
     2fc:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
     300:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
     304:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
     308:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
     30c:	2d20304f 	stccs	0, cr3, [r0, #-316]!	; 0xfffffec4
     310:	3d647473 	cfstrdcc	mvd7, [r4, #-460]!	; 0xfffffe34
     314:	00393963 	eorseq	r3, r9, r3, ror #18
     318:	5f434352 	svcpl	0x00434352
     31c:	74696157 	strbtvc	r6, [r9], #-343	; 0xfffffea9
     320:	48726f46 	ldmdami	r2!, {r1, r2, r6, r8, r9, sl, fp, sp, lr}^
     324:	74534553 	ldrbvc	r4, [r3], #-1363	; 0xfffffaad
     328:	55747261 	ldrbpl	r7, [r4, #-609]!	; 0xfffffd9f
     32c:	69620070 	stmdbvs	r2!, {r4, r5, r6}^
     330:	61747374 	cmnvs	r4, r4, ror r3
     334:	00737574 	rsbseq	r7, r3, r4, ror r5
     338:	4b4c4348 	blmi	1311060 <startup-0x1eceefa0>
     33c:	6572465f 	ldrbvs	r4, [r2, #-1631]!	; 0xfffff9a1
     340:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
     344:	52007963 	andpl	r7, r0, #1622016	; 0x18c000
     348:	415f4343 	cmpmi	pc, r3, asr #6
     34c:	50314250 	eorspl	r4, r1, r0, asr r2
     350:	70697265 	rsbvc	r7, r9, r5, ror #4
     354:	6c700068 	ldclvs	0, cr0, [r0], #-416	; 0xfffffe60
     358:	6f63766c 	svcvs	0x0063766c
     35c:	53494400 	movtpl	r4, #37888	; 0x9400
     360:	454c4241 	strbmi	r4, [ip, #-577]	; 0xfffffdbf
     364:	73795300 	cmnvc	r9, #0, 6
     368:	436d6574 	cmnmi	sp, #116, 10	; 0x1d000000
     36c:	4365726f 	cmnmi	r5, #-268435450	; 0xf0000006
     370:	6b636f6c 	blvs	18dc128 <startup-0x1e723ed8>
     374:	43435200 	movtmi	r5, #12800	; 0x3200
     378:	4f434d5f 	svcmi	0x00434d5f
     37c:	6e6f4331 	mcrvs	3, 3, r4, cr15, cr1, {1}
     380:	00676966 	rsbeq	r6, r7, r6, ror #18
     384:	5f434352 	svcpl	0x00434352
     388:	43535953 	cmpmi	r3, #1359872	; 0x14c000
     38c:	52004b4c 	andpl	r4, r0, #76, 22	; 0x13000
     390:	505f4343 	subspl	r4, pc, r3, asr #6
     394:	32494c4c 	subcc	r4, r9, #76, 24	; 0x4c00
     398:	646d4353 	strbtvs	r4, [sp], #-851	; 0xfffffcad
     39c:	43435200 	movtmi	r5, #12800	; 0x3200
     3a0:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     3a4:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     3a8:	65727000 	ldrbvs	r7, [r2, #-0]!
     3ac:	52006373 	andpl	r6, r0, #-872415231	; 0xcc000001
     3b0:	525f4343 	subspl	r4, pc, #201326593	; 0xc000001
     3b4:	4c434354 	mcrrmi	3, 5, r4, r3, cr4
     3b8:	756f534b 	strbvc	r5, [pc, #-843]!	; 75 <startup-0x1fffff8b>
     3bc:	00656372 	rsbeq	r6, r5, r2, ror r3
     3c0:	5f434352 	svcpl	0x00434352
     3c4:	42494153 	submi	r4, r9, #-1073741804	; 0xc0000014
     3c8:	6b636f6c 	blvs	18dc180 <startup-0x1e723e80>
     3cc:	4b4c4341 	blmi	13110d8 <startup-0x1eceef28>
     3d0:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     3d4:	52006563 	andpl	r6, r0, #415236096	; 0x18c00000
     3d8:	535f4343 	cmppl	pc, #201326593	; 0xc000001
     3dc:	6c424941 	mcrrvs	9, 4, r4, r2, cr1	; <UNPREDICTABLE>
     3e0:	426b636f 	rsbmi	r6, fp, #-1140850687	; 0xbc000001
     3e4:	534b4c43 	movtpl	r4, #48195	; 0xbc43
     3e8:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     3ec:	43520065 	cmpmi	r2, #101	; 0x65
     3f0:	544c5f43 	strbpl	r5, [ip], #-3907	; 0xfffff0bd
     3f4:	4c434344 	mcrrmi	3, 4, r4, r3, cr4
     3f8:	7669444b 	strbtvc	r4, [r9], -fp, asr #8
     3fc:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     400:	73006769 	movwvc	r6, #1897	; 0x769
     404:	74726f68 	ldrbtvc	r6, [r2], #-3944	; 0xfffff098
     408:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
     40c:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
     410:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
     414:	4c500074 	mrrcmi	0, 7, r0, r0, cr4	; <UNPREDICTABLE>
     418:	5332494c 	teqpl	r2, #76, 18	; 0x130000
     41c:	52474643 	subpl	r4, r7, #70254592	; 0x4300000
     420:	43435200 	movtmi	r5, #12800	; 0x3200
     424:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
     428:	72655032 	rsbvc	r5, r5, #50	; 0x32
     42c:	43687069 	cmnmi	r8, #105	; 0x69
     430:	6b636f6c 	blvs	18dc1e8 <startup-0x1e723e18>
     434:	6f4d504c 	svcvs	0x004d504c
     438:	6d436564 	cfstr64vs	mvdx6, [r3, #-400]	; 0xfffffe70
     43c:	43520064 	cmpmi	r2, #100	; 0x64
     440:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
     444:	5332494c 	teqpl	r2, #76, 18	; 0x130000
     448:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     44c:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
     450:	485f4343 	ldmdami	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     454:	6d434953 	vstrvs.16	s9, [r3, #-166]	; 0xffffff5a	; <UNPREDICTABLE>
     458:	43520064 	cmpmi	r2, #100	; 0x64
     45c:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
     460:	65503242 	ldrbvs	r3, [r0, #-578]	; 0xfffffdbe
     464:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     468:	42504100 	subsmi	r4, r0, #0, 2
     46c:	45504c32 	ldrbmi	r4, [r0, #-3122]	; 0xfffff3ce
     470:	5200524e 	andpl	r5, r0, #-536870908	; 0xe0000004
     474:	415f4343 	cmpmi	pc, r3, asr #6
     478:	50334248 	eorspl	r4, r3, r8, asr #4
     47c:	70697265 	rsbvc	r7, r9, r5, ror #4
     480:	43520068 	cmpmi	r2, #104	; 0x68
     484:	434d5f43 	movtmi	r5, #57155	; 0xdf43
     488:	6944324f 	stmdbvs	r4, {r0, r1, r2, r3, r6, r9, ip, sp}^
     48c:	43520076 	cmpmi	r2, #118	; 0x76
     490:	41535f43 	cmpmi	r3, r3, asr #30
     494:	4c4c5049 	mcrrmi	0, 4, r5, ip, cr9
     498:	43533249 	cmpmi	r3, #-1879048188	; 0x90000004
     49c:	69446b6c 	stmdbvs	r4, {r2, r3, r5, r6, r8, r9, fp, sp, lr}^
     4a0:	6e6f4376 	mcrvs	3, 3, r4, cr15, cr6, {3}
     4a4:	00676966 	rsbeq	r6, r7, r6, ror #18
     4a8:	5f434352 	svcpl	0x00434352
     4ac:	43435452 	movtmi	r5, #13394	; 0x3452
     4b0:	6d434b4c 	vstrvs	d20, [r3, #-304]	; 0xfffffed0
     4b4:	52450064 	subpl	r0, r5, #100	; 0x64
     4b8:	00524f52 	subseq	r4, r2, r2, asr pc
     4bc:	5f434352 	svcpl	0x00434352
     4c0:	636f6c43 	cmnvs	pc, #17152	; 0x4300
     4c4:	6365536b 	cmnvs	r5, #-1409286143	; 0xac000001
     4c8:	74697275 	strbtvc	r7, [r9], #-629	; 0xfffffd8b
     4cc:	73795379 	cmnvc	r9, #-469762047	; 0xe4000001
     4d0:	436d6574 	cmnmi	sp, #116, 10	; 0x1d000000
     4d4:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
     4d8:	505f4343 	subspl	r4, pc, r3, asr #6
     4dc:	32494c4c 	subcc	r4, r9, #76, 24	; 0x4c00
     4e0:	76694453 			; <UNDEFINED> instruction: 0x76694453
     4e4:	43520051 	cmpmi	r2, #81	; 0x51
     4e8:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
     4ec:	4941534c 	stmdbmi	r1, {r2, r3, r6, r8, r9, ip, lr}^
     4f0:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     4f4:	41006769 	tstmi	r0, r9, ror #14
     4f8:	45334248 	ldrmi	r4, [r3, #-584]!	; 0xfffffdb8
     4fc:	5200524e 	andpl	r5, r0, #-536870908	; 0xe0000004
     500:	4c5f4343 	mrrcmi	3, 4, r4, pc, cr3	; <UNPREDICTABLE>
     504:	6f4d4553 	svcvs	0x004d4553
     508:	6f436564 	svcvs	0x00436564
     50c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     510:	42484100 	submi	r4, r8, #0, 2
     514:	45504c32 	ldrbmi	r4, [r0, #-3122]	; 0xfffff3ce
     518:	4600524e 	strmi	r5, [r0], -lr, asr #4
     51c:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xfffff18b
     520:	616e6f69 	cmnvs	lr, r9, ror #30
     524:	6174536c 	cmnvs	r4, ip, ror #6
     528:	52006574 	andpl	r6, r0, #116, 10	; 0x1d000000
     52c:	4d5f4343 	ldclmi	3, cr4, [pc, #-268]	; 428 <startup-0x1ffffbd8>
     530:	44314f43 	ldrtmi	r4, [r1], #-3907	; 0xfffff0bd
     534:	52007669 	andpl	r7, r0, #110100480	; 0x6900000
     538:	415f4343 	cmpmi	pc, r3, asr #6
     53c:	50324250 	eorspl	r4, r2, r0, asr r2
     540:	70697265 	rsbvc	r7, r9, r5, ror #4
     544:	73655268 	cmnvc	r5, #104, 4	; 0x80000006
     548:	6d437465 	cfstrdvs	mvd7, [r3, #-404]	; 0xfffffe6c
     54c:	43520064 	cmpmi	r2, #100	; 0x64
     550:	434d5f43 	movtmi	r5, #57155	; 0xdf43
     554:	6f53324f 	svcvs	0x0053324f
     558:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
     55c:	43435200 	movtmi	r5, #12800	; 0x3200
     560:	5332495f 	teqpl	r2, #1556480	; 0x17c000
     564:	534b4c43 	movtpl	r4, #48195	; 0xbc43
     568:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     56c:	4c500065 	mrrcmi	0, 6, r0, r0, cr5	; <UNPREDICTABLE>
     570:	4941534c 	stmdbmi	r1, {r2, r3, r6, r8, r9, ip, lr}^
     574:	52474643 	subpl	r4, r7, #70254592	; 0x4300000
     578:	53455200 	movtpl	r5, #20992	; 0x5200
     57c:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
     580:	52003044 	andpl	r3, r0, #68	; 0x44
     584:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     588:	31444556 	cmpcc	r4, r6, asr r5
     58c:	53455200 	movtpl	r5, #20992	; 0x5200
     590:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
     594:	52003244 	andpl	r3, r0, #68, 4	; 0x40000004
     598:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     59c:	33444556 	movtcc	r4, #17750	; 0x4556
     5a0:	53455200 	movtpl	r5, #20992	; 0x5200
     5a4:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
     5a8:	52003444 	andpl	r3, r0, #68, 8	; 0x44000000
     5ac:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     5b0:	35444556 	strbcc	r4, [r4, #-1366]	; 0xfffffaaa
     5b4:	53455200 	movtpl	r5, #20992	; 0x5200
     5b8:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
     5bc:	52003644 	andpl	r3, r0, #68, 12	; 0x4400000
     5c0:	475f4343 	ldrbmi	r4, [pc, -r3, asr #6]
     5c4:	6c467465 	cfstrdvs	mvd7, [r6], {101}	; 0x65
     5c8:	74536761 	ldrbvc	r6, [r3], #-1889	; 0xfffff89f
     5cc:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
     5d0:	43435200 	movtmi	r5, #12800	; 0x3200
     5d4:	4553485f 	ldrbmi	r4, [r3, #-2143]	; 0xfffff7a1
     5d8:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     5dc:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
     5e0:	535f4343 	cmppl	pc, #201326593	; 0xc000001
     5e4:	6c424941 	mcrrvs	9, 4, r4, r2, cr1	; <UNPREDICTABLE>
     5e8:	426b636f 	rsbmi	r6, fp, #-1140850687	; 0xbc000001
     5ec:	434b4c43 	movtmi	r4, #48195	; 0xbc43
     5f0:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     5f4:	4c500067 	mrrcmi	0, 6, r0, r0, cr7	; <UNPREDICTABLE>
     5f8:	4941534c 	stmdbmi	r1, {r2, r3, r6, r8, r9, ip, lr}^
     5fc:	5449004e 	strbpl	r0, [r9], #-78	; 0xffffffb2
     600:	78525f4d 	ldmdavc	r2, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     604:	66667542 	strbtvs	r7, [r6], -r2, asr #10
     608:	50007265 	andpl	r7, r0, r5, ror #4
     60c:	41534c4c 	cmpmi	r3, ip, asr #24
     610:	50005149 	andpl	r5, r0, r9, asr #2
     614:	41534c4c 	cmpmi	r3, ip, asr #24
     618:	73005249 	movwvc	r5, #585	; 0x249
     61c:	74726f68 	ldrbtvc	r6, [r2], #-3944	; 0xfffff098
     620:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
     624:	43435200 	movtmi	r5, #12800	; 0x3200
     628:	4d49545f 	cfstrdmi	mvd5, [r9, #-380]	; 0xfffffe84
     62c:	504b4c43 	subpl	r4, fp, r3, asr #24
     630:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
     634:	72656c61 	rsbvc	r6, r5, #24832	; 0x6100
     638:	43435200 	movtmi	r5, #12800	; 0x3200
     63c:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
     640:	00646d43 	rsbeq	r6, r4, r3, asr #26
     644:	5f434352 	svcpl	0x00434352
     648:	31424841 	cmpcc	r2, r1, asr #16
     64c:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     650:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
     654:	436b636f 	cmnmi	fp, #-1140850687	; 0xbc000001
     658:	4100646d 	tstmi	r0, sp, ror #8
     65c:	45324250 	ldrmi	r4, [r2, #-592]!	; 0xfffffdb0
     660:	4100524e 	tstmi	r0, lr, asr #4
     664:	52334248 	eorspl	r4, r3, #72, 4	; 0x80000004
     668:	00525453 	subseq	r5, r2, r3, asr r4
     66c:	5f434352 	svcpl	0x00434352
     670:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
     674:	43435200 	movtmi	r5, #12800	; 0x3200
     678:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
     67c:	72655032 	rsbvc	r5, r5, #50	; 0x32
     680:	52687069 	rsbpl	r7, r8, #105	; 0x69
     684:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
     688:	00646d43 	rsbeq	r6, r4, r3, asr #26
     68c:	5f434352 	svcpl	0x00434352
     690:	31425041 	cmpcc	r2, r1, asr #32
     694:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     698:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
     69c:	4c6b636f 	stclmi	3, cr6, [fp], #-444	; 0xfffffe44
     6a0:	646f4d50 	strbtvs	r4, [pc], #-3408	; 6a8 <startup-0x1ffff958>
     6a4:	646d4365 	strbtvs	r4, [sp], #-869	; 0xfffffc9b
     6a8:	43435200 	movtmi	r5, #12800	; 0x3200
     6ac:	4c43505f 	mcrrmi	0, 5, r5, r3, cr15
     6b0:	6f43324b 	svcvs	0x0043324b
     6b4:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     6b8:	43435200 	movtmi	r5, #12800	; 0x3200
     6bc:	5359535f 	cmppl	r9, #2080374785	; 0x7c000001
     6c0:	534b4c43 	movtpl	r4, #48195	; 0xbc43
     6c4:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     6c8:	43520065 	cmpmi	r2, #101	; 0x65
     6cc:	53485f43 	movtpl	r5, #36675	; 0x8f43
     6d0:	43500045 	cmpmi	r0, #69	; 0x45
     6d4:	5f314b4c 	svcpl	0x00314b4c
     6d8:	71657246 	cmnvc	r5, r6, asr #4
     6dc:	636e6575 	cmnvs	lr, #490733568	; 0x1d400000
     6e0:	50410079 	subpl	r0, r1, r9, ror r0
     6e4:	42484142 	submi	r4, r8, #-2147483632	; 0x80000010
     6e8:	73657250 	cmnvc	r5, #80, 4
     6ec:	62615463 	rsbvs	r5, r1, #1660944384	; 0x63000000
     6f0:	5200656c 	andpl	r6, r0, #108, 10	; 0x1b000000
     6f4:	415f4343 	cmpmi	pc, r3, asr #6
     6f8:	73756a64 	cmnvc	r5, #100, 20	; 0x64000
     6fc:	49534874 	ldmdbmi	r3, {r2, r4, r5, r6, fp, lr}^
     700:	696c6143 	stmdbvs	ip!, {r0, r1, r6, r8, sp, lr}^
     704:	74617262 	strbtvc	r7, [r1], #-610	; 0xfffffd9e
     708:	566e6f69 	strbtpl	r6, [lr], -r9, ror #30
     70c:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
     710:	65736800 	ldrbvs	r6, [r3, #-2048]!	; 0xfffff800
     714:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
     718:	50007375 	andpl	r7, r0, r5, ror r3
     71c:	32494c4c 	subcc	r4, r9, #76, 24	; 0x4c00
     720:	52004e53 	andpl	r4, r0, #1328	; 0x530
     724:	475f4343 	ldrbmi	r4, [pc, -r3, asr #6]
     728:	6c437465 	cfstrdvs	mvd7, [r3], {101}	; 0x65
     72c:	736b636f 	cmnvc	fp, #-1140850687	; 0xbc000001
     730:	71657246 	cmnvc	r5, r6, asr #4
     734:	43435200 	movtmi	r5, #12800	; 0x3200
     738:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
     73c:	72655032 	rsbvc	r5, r5, #50	; 0x32
     740:	43687069 	cmnmi	r8, #105	; 0x69
     744:	6b636f6c 	blvs	18dc4fc <startup-0x1e723b04>
     748:	00646d43 	rsbeq	r6, r4, r3, asr #26
     74c:	69755f5f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     750:	3631746e 	ldrtcc	r7, [r1], -lr, ror #8
     754:	4100745f 	tstmi	r0, pc, asr r4
     758:	52324248 	eorspl	r4, r2, #72, 4	; 0x80000004
     75c:	00525453 	subseq	r5, r2, r3, asr r4
     760:	5f434352 	svcpl	0x00434352
     764:	6e496544 	cdpvs	5, 4, cr6, cr9, cr4, {2}
     768:	50007469 	andpl	r7, r0, r9, ror #8
     76c:	32494c4c 	subcc	r4, r9, #76, 24	; 0x4c00
     770:	5f005253 	svcpl	0x00005253
     774:	746e695f 	strbtvc	r6, [lr], #-2399	; 0xfffff6a1
     778:	745f3233 	ldrbvc	r3, [pc], #-563	; 780 <startup-0x1ffff880>
     77c:	43435200 	movtmi	r5, #12800	; 0x3200
     780:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
     784:	74535449 	ldrbvc	r5, [r3], #-1097	; 0xfffffbb7
     788:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
     78c:	42504100 	subsmi	r4, r0, #0, 2
     790:	524e4531 	subpl	r4, lr, #205520896	; 0xc400000
     794:	42484100 	submi	r4, r8, #0, 2
     798:	524e4532 	subpl	r4, lr, #209715200	; 0xc800000
     79c:	43435200 	movtmi	r5, #12800	; 0x3200
     7a0:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
     7a4:	72655033 	rsbvc	r5, r5, #51	; 0x33
     7a8:	43687069 	cmnmi	r8, #105	; 0x69
     7ac:	6b636f6c 	blvs	18dc564 <startup-0x1e723a9c>
     7b0:	6f4d504c 	svcvs	0x004d504c
     7b4:	6d436564 	cfstr64vs	mvdx6, [r3, #-400]	; 0xfffffe70
     7b8:	6e750064 	cdpvs	0, 7, cr0, cr5, cr4, {3}
     7bc:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
     7c0:	63206465 			; <UNDEFINED> instruction: 0x63206465
     7c4:	00726168 	rsbseq	r6, r2, r8, ror #2
     7c8:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
     7cc:	63707574 	cmnvs	r0, #116, 10	; 0x1d000000
     7d0:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
     7d4:	52007265 	andpl	r7, r0, #1342177286	; 0x50000006
     7d8:	415f4343 	cmpmi	pc, r3, asr #6
     7dc:	50324250 	eorspl	r4, r2, r0, asr r2
     7e0:	70697265 	rsbvc	r7, r9, r5, ror #4
     7e4:	43520068 	cmpmi	r2, #104	; 0x68
     7e8:	49545f43 	ldmdbmi	r4, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
     7ec:	4b4c434d 	blmi	1311528 <startup-0x1eceead8>
     7f0:	73657250 	cmnvc	r5, #80, 4
     7f4:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     7f8:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
     7fc:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     800:	4c435332 	mcrrmi	3, 3, r5, r3, cr2
     804:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
     808:	00676966 	rsbeq	r6, r7, r6, ror #18
     80c:	5f434352 	svcpl	0x00434352
     810:	324f434d 	subcc	r4, pc, #872415233	; 0x34000001
     814:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     818:	53006769 	movwpl	r6, #1897	; 0x769
     81c:	52474353 	subpl	r4, r7, #1275068417	; 0x4c000001
     820:	42484100 	submi	r4, r8, #0, 2
     824:	45504c33 	ldrbmi	r4, [r0, #-3123]	; 0xfffff3cd
     828:	4300524e 	movwmi	r5, #590	; 0x24e
     82c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
     830:	2f737265 	svccs	0x00737265
     834:	6e696d61 	cdpvs	13, 6, cr6, cr9, cr1, {3}
     838:	65442f72 	strbvs	r2, [r4, #-3954]	; 0xfffff08e
     83c:	6f746b73 	svcvs	0x00746b73
     840:	61642f70 	smcvs	17136	; 0x42f0
     844:	72706174 	rsbsvc	r6, r0, #116, 2
     848:	6b656a6f 	blvs	195b20c <startup-0x1e6a4df4>
     84c:	54532f74 	ldrbpl	r2, [r3], #-3956	; 0xfffff08c
     850:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     854:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
     858:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
     85c:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     860:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
     864:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
     868:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     86c:	5f787834 	svcpl	0x00787834
     870:	50647453 	rsbpl	r7, r4, r3, asr r4
     874:	70697265 	rsbvc	r7, r9, r5, ror #4
     878:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
     87c:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
     880:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
     884:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!	; 0xffffff44
     888:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
     88c:	725f7878 	subsvc	r7, pc, #120, 16	; 0x780000
     890:	632e6363 			; <UNDEFINED> instruction: 0x632e6363
     894:	42504100 	subsmi	r4, r0, #0, 2
     898:	54535231 	ldrbpl	r5, [r3], #-561	; 0xfffffdcf
     89c:	43520052 	cmpmi	r2, #82	; 0x52
     8a0:	534c5f43 	movtpl	r5, #53059	; 0xcf43
     8a4:	646d4349 	strbtvs	r4, [sp], #-841	; 0xfffffcb7
     8a8:	474b4300 	strbmi	r4, [fp, -r0, lsl #6]
     8ac:	4e455441 	cdpmi	4, 4, cr5, cr5, cr1, {2}
     8b0:	44420052 	strbmi	r0, [r2], #-82	; 0xffffffae
     8b4:	52005243 	andpl	r5, r0, #805306372	; 0x30000004
     8b8:	415f4343 	cmpmi	pc, r3, asr #6
     8bc:	50314250 	eorspl	r4, r1, r0, asr r2
     8c0:	70697265 	rsbvc	r7, r9, r5, ror #4
     8c4:	6f6c4368 	svcvs	0x006c4368
     8c8:	6d436b63 	vstrvs	d22, [r3, #-396]	; 0xfffffe74
     8cc:	43520064 	cmpmi	r2, #100	; 0x64
     8d0:	54495f43 	strbpl	r5, [r9], #-3907	; 0xfffff0bd
     8d4:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     8d8:	53006769 	movwpl	r6, #1897	; 0x769
     8dc:	45434355 	strbmi	r4, [r3, #-853]	; 0xfffffcab
     8e0:	52005353 	andpl	r5, r0, #1275068417	; 0x4c000001
     8e4:	505f4343 	subspl	r4, pc, r3, asr #6
     8e8:	6f434c4c 	svcvs	0x00434c4c
     8ec:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     8f0:	43435200 	movtmi	r5, #12800	; 0x3200
     8f4:	6f6c435f 	svcvs	0x006c435f
     8f8:	54736b63 	ldrbtpl	r6, [r3], #-2915	; 0xfffff49d
     8fc:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
     900:	41006665 	tstmi	r0, r5, ror #12
     904:	45314248 	ldrmi	r4, [r1, #-584]!	; 0xfffffdb8
     908:	4300524e 	movwmi	r5, #590	; 0x24e
     90c:	73555c3a 	cmpvc	r5, #14848	; 0x3a00
     910:	5c737265 	lfmpl	f7, 2, [r3], #-404	; 0xfffffe6c
     914:	6e696d61 	cdpvs	13, 6, cr6, cr9, cr1, {3}
     918:	65445c72 	strbvs	r5, [r4, #-3186]	; 0xfffff38e
     91c:	6f746b73 	svcvs	0x00746b73
     920:	61645c70 	smcvs	17856	; 0x45c0
     924:	72706174 	rsbsvc	r6, r0, #116, 2
     928:	6b656a6f 	blvs	195b2ec <startup-0x1e6a4d14>
     92c:	6c555c74 	mrrcvs	12, 7, r5, r5, cr4	; <UNPREDICTABLE>
     930:	73617274 	cmnvc	r1, #116, 4	; 0x40000007
     934:	63696e6f 	cmnvs	r9, #1776	; 0x6f0
     938:	676e6152 			; <UNDEFINED> instruction: 0x676e6152
     93c:	43520065 	cmpmi	r2, #101	; 0x65
     940:	54525f43 	ldrbpl	r5, [r2], #-3907	; 0xfffff0bd
     944:	4b4c4343 	blmi	1311658 <startup-0x1ecee9a8>
     948:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     94c:	70006769 	andvc	r6, r0, r9, ror #14
     950:	6f736c6c 	svcvs	0x00736c6c
     954:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
     958:	43435200 	movtmi	r5, #12800	; 0x3200
     95c:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
     960:	72655031 	rsbvc	r5, r5, #49	; 0x31
     964:	43687069 	cmnmi	r8, #105	; 0x69
     968:	6b636f6c 	blvs	18dc720 <startup-0x1e7238e0>
     96c:	6f4d504c 	svcvs	0x004d504c
     970:	6d436564 	cfstr64vs	mvdx6, [r3, #-400]	; 0xfffffe70
     974:	43520064 	cmpmi	r2, #100	; 0x64
     978:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
     97c:	65503342 	ldrbvs	r3, [r0, #-834]	; 0xfffffcbe
     980:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     984:	636f6c43 	cmnvs	pc, #17152	; 0x4300
     988:	646d436b 	strbtvs	r4, [sp], #-875	; 0xfffffc95
     98c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     990:	79545f4f 	ldmdbvc	r4, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     994:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
     998:	49540066 	ldmdbmi	r4, {r1, r2, r5, r6}^
     99c:	6f435f4d 	svcvs	0x00435f4d
     9a0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     9a4:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     9a8:	43006e6f 	movwmi	r6, #3695	; 0xe6f
     9ac:	00524543 	subseq	r4, r2, r3, asr #10
     9b0:	4550534f 	ldrbmi	r5, [r0, #-847]	; 0xfffffcb1
     9b4:	00524445 	subseq	r4, r2, r5, asr #8
     9b8:	4f495047 	svcmi	0x00495047
     9bc:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
     9c0:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     9c4:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     9c8:	414d4400 	cmpmi	sp, r0, lsl #8
     9cc:	43430052 	movtmi	r0, #12370	; 0x3052
     9d0:	0031524d 	eorseq	r5, r1, sp, asr #4
     9d4:	524d4343 	subpl	r4, sp, #201326593	; 0xc000001
     9d8:	49540032 	ldmdbmi	r4, {r1, r4, r5}^
     9dc:	72505f4d 	subsvc	r5, r0, #308	; 0x134
     9e0:	61637365 	cmnvs	r3, r5, ror #6
     9e4:	0072656c 	rsbseq	r6, r2, ip, ror #10
     9e8:	4f495047 	svcmi	0x00495047
     9ec:	79544f5f 	ldmdbvc	r4, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, lr}^
     9f0:	4f5f6570 	svcmi	0x005f6570
     9f4:	616d0044 	cmnvs	sp, r4, asr #32
     9f8:	47006e69 	strmi	r6, [r0, -r9, ror #28]
     9fc:	4f4f4950 	svcmi	0x004f4950
     a00:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     a04:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     a08:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     a0c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     a10:	544f5f4f 	strbpl	r5, [pc], #-3919	; a18 <startup-0x1ffff5e8>
     a14:	00657079 	rsbeq	r7, r5, r9, ror r0
     a18:	4f495047 	svcmi	0x00495047
     a1c:	646f4d5f 	strbtvs	r4, [pc], #-3423	; a24 <startup-0x1ffff5dc>
     a20:	46415f65 	strbmi	r5, [r1], -r5, ror #30
     a24:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     a28:	6f6c435f 	svcvs	0x006c435f
     a2c:	69446b63 	stmdbvs	r4, {r0, r1, r5, r6, r8, r9, fp, sp, lr}^
     a30:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
     a34:	47006e6f 	strmi	r6, [r0, -pc, ror #28]
     a38:	5f4f4950 	svcpl	0x004f4950
     a3c:	65657053 	strbvs	r7, [r5, #-83]!	; 0xffffffad
     a40:	63650064 	cmnvs	r5, #100	; 0x64
     a44:	735f6f68 	cmpvc	pc, #104, 30	; 0x1a0
     a48:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
     a4c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     a50:	6f4d5f4f 	svcvs	0x004d5f4f
     a54:	415f6564 	cmpmi	pc, r4, ror #10
     a58:	4552004e 	ldrbmi	r0, [r2, #-78]	; 0xffffffb2
     a5c:	56524553 			; <UNDEFINED> instruction: 0x56524553
     a60:	34314445 	ldrtcc	r4, [r1], #-1093	; 0xfffffbbb
     a64:	59544f00 	ldmdbpl	r4, {r8, r9, sl, fp, lr}^
     a68:	00524550 	subseq	r4, r2, r0, asr r5
     a6c:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
     a70:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
     a74:	47003131 	smladxmi	r0, r1, r1, r3
     a78:	5f4f4950 	svcpl	0x004f4950
     a7c:	006e6950 	rsbeq	r6, lr, r0, asr r9
     a80:	4f495047 	svcmi	0x00495047
     a84:	7361465f 	cmnvc	r1, #99614720	; 0x5f00000
     a88:	70535f74 	subsvc	r5, r3, r4, ror pc
     a8c:	00646565 	rsbeq	r6, r4, r5, ror #10
     a90:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
     a94:	74656d5f 	strbtvc	r6, [r5], #-3423	; 0xfffff2a1
     a98:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     a9c:	6f4d5f4f 	svcvs	0x004d5f4f
     aa0:	4f5f6564 	svcmi	0x005f6564
     aa4:	73005455 	movwvc	r5, #1109	; 0x455
     aa8:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
     aac:	43007075 	movwmi	r7, #117	; 0x75
     ab0:	00315243 	eorseq	r5, r1, r3, asr #4
     ab4:	32524343 	subscc	r4, r2, #201326593	; 0xc000001
     ab8:	52434300 	subpl	r4, r3, #0, 6
     abc:	43430033 	movtmi	r0, #12339	; 0x3033
     ac0:	42003452 	andmi	r3, r0, #1375731712	; 0x52000000
     ac4:	48525253 	ldmdami	r2, {r0, r1, r4, r6, r9, ip, lr}^
     ac8:	444f4d00 	strbmi	r4, [pc], #-3328	; ad0 <startup-0x1ffff530>
     acc:	47005245 	strmi	r5, [r0, -r5, asr #4]
     ad0:	5f4f4950 	svcpl	0x004f4950
     ad4:	68676948 	stmdavs	r7!, {r3, r6, r8, fp, sp, lr}^
     ad8:	6570535f 	ldrbvs	r5, [r0, #-863]!	; 0xfffffca1
     adc:	47006465 	strmi	r6, [r0, -r5, ror #8]
     ae0:	5f4f4950 	svcpl	0x004f4950
     ae4:	7079544f 	rsbsvc	r5, r9, pc, asr #8
     ae8:	50505f65 	subspl	r5, r0, r5, ror #30
     aec:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     af0:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     af4:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     af8:	6f746900 	svcvs	0x00746900
     afc:	4d530061 	ldclmi	0, cr0, [r3, #-388]	; 0xfffffe7c
     b00:	52005243 	andpl	r5, r0, #805306372	; 0x30000004
     b04:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     b08:	31444556 	cmpcc	r4, r6, asr r5
     b0c:	45520030 	ldrbmi	r0, [r2, #-48]	; 0xffffffd0
     b10:	56524553 			; <UNDEFINED> instruction: 0x56524553
     b14:	32314445 	eorscc	r4, r1, #1157627904	; 0x45000000
     b18:	53455200 	movtpl	r5, #20992	; 0x5200
     b1c:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
     b20:	00333144 	eorseq	r3, r3, r4, asr #2
     b24:	4f495047 	svcmi	0x00495047
     b28:	64654d5f 	strbtvs	r4, [r5], #-3423	; 0xfffff2a1
     b2c:	5f6d7569 	svcpl	0x006d7569
     b30:	65657053 	strbvs	r7, [r5, #-83]!	; 0xffffffad
     b34:	50470064 	subpl	r0, r7, r4, rrx
     b38:	495f4f49 	ldmdbmi	pc, {r0, r3, r6, r8, r9, sl, fp, lr}^	; <UNPREDICTABLE>
     b3c:	5474696e 	ldrbtpl	r6, [r4], #-2414	; 0xfffff692
     b40:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
     b44:	54006665 	strpl	r6, [r0], #-1637	; 0xfffff99b
     b48:	505f4d49 	subspl	r4, pc, r9, asr #26
     b4c:	6f697265 	svcvs	0x00697265
     b50:	49540064 	ldmdbmi	r4, {r2, r5, r6}^
     b54:	69545f4d 	ldmdbvs	r4, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     b58:	6142656d 	cmpvs	r2, sp, ror #10
     b5c:	6e496573 	mcrvs	5, 2, r6, cr9, cr3, {3}
     b60:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
     b64:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
     b68:	44420066 	strbmi	r0, [r2], #-102	; 0xffffff9a
     b6c:	44005254 	strmi	r5, [r0], #-596	; 0xfffffdac
     b70:	00524549 	subseq	r4, r2, r9, asr #10
     b74:	44505550 	ldrbmi	r5, [r0], #-1360	; 0xfffffab0
     b78:	69640052 	stmdbvs	r4!, {r1, r4, r6}^
     b7c:	6e617473 	mcrvs	4, 3, r7, cr1, cr3, {3}
     b80:	65006563 	strvs	r6, [r0, #-1379]	; 0xfffffa9d
     b84:	5f6f6863 	svcpl	0x006f6863
     b88:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
     b8c:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     b90:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
     b94:	47007265 	strmi	r7, [r0, -r5, ror #4]
     b98:	5f4f4950 	svcpl	0x004f4950
     b9c:	5f776f4c 	svcpl	0x00776f4c
     ba0:	65657053 	strbvs	r7, [r5, #-83]!	; 0xffffffad
     ba4:	45520064 	ldrbmi	r0, [r2, #-100]	; 0xffffff9c
     ba8:	56524553 			; <UNDEFINED> instruction: 0x56524553
     bac:	00374445 	eorseq	r4, r7, r5, asr #8
     bb0:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
     bb4:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
     bb8:	45520038 	ldrbmi	r0, [r2, #-56]	; 0xffffffc8
     bbc:	56524553 			; <UNDEFINED> instruction: 0x56524553
     bc0:	00394445 	eorseq	r4, r9, r5, asr #8
     bc4:	4f495047 	svcmi	0x00495047
     bc8:	65657053 	strbvs	r7, [r5, #-83]!	; 0xffffffad
     bcc:	79545f64 	ldmdbvc	r4, {r2, r5, r6, r8, r9, sl, fp, ip, lr}^
     bd0:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
     bd4:	50470066 	subpl	r0, r7, r6, rrx
     bd8:	505f4f49 	subspl	r4, pc, r9, asr #30
     bdc:	5f645075 	svcpl	0x00645075
     be0:	4e574f44 	cdpmi	15, 5, cr4, cr7, cr4, {2}
     be4:	2f3a4300 	svccs	0x003a4300
     be8:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
     bec:	6d612f73 	stclvs	15, cr2, [r1, #-460]!	; 0xfffffe34
     bf0:	2f726e69 	svccs	0x00726e69
     bf4:	6b736544 	blvs	1cda10c <startup-0x1e325ef4>
     bf8:	2f706f74 	svccs	0x00706f74
     bfc:	61746164 	cmnvs	r4, r4, ror #2
     c00:	6a6f7270 	bvs	1bdd5c8 <startup-0x1e422a38>
     c04:	2f746b65 	svccs	0x00746b65
     c08:	72746c55 	rsbsvc	r6, r4, #21760	; 0x5500
     c0c:	6e6f7361 	cdpvs	3, 6, cr7, cr15, cr1, {3}
     c10:	61526369 	cmpvs	r2, r9, ror #6
     c14:	2f65676e 	svccs	0x0065676e
     c18:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
     c1c:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
     c20:	49540063 	ldmdbmi	r4, {r0, r1, r5, r6}^
     c24:	65525f4d 	ldrbvs	r5, [r2, #-3917]	; 0xfffff0b3
     c28:	69746570 	ldmdbvs	r4!, {r4, r5, r6, r8, sl, sp, lr}^
     c2c:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     c30:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
     c34:	00726574 	rsbseq	r6, r2, r4, ror r5
     c38:	4f495047 	svcmi	0x00495047
     c3c:	5075505f 	rsbspl	r5, r5, pc, asr r0
     c40:	4f4e5f64 	svcmi	0x004e5f64
     c44:	4c4c5550 	cfstr64mi	mvdx5, [ip], {80}	; 0x50
     c48:	68636500 	stmdavs	r3!, {r8, sl, sp, lr}^
     c4c:	6365006f 	cmnvs	r5, #111	; 0x6f
     c50:	655f6f68 	ldrbvs	r6, [pc, #-3944]	; fffffcf0 <APBAHBPrescTable+0xdfffc480>
     c54:	4700646e 	strmi	r6, [r0, -lr, ror #8]
     c58:	5f4f4950 	svcpl	0x004f4950
     c5c:	64507550 	ldrbvs	r7, [r0], #-1360	; 0xfffffab0
     c60:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     c64:	5075504f 	rsbspl	r5, r5, pc, asr #32
     c68:	79545f64 	ldmdbvc	r4, {r2, r5, r6, r8, r9, sl, fp, ip, lr}^
     c6c:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
     c70:	50470066 	subpl	r0, r7, r6, rrx
     c74:	505f4f49 	subspl	r4, pc, r9, asr #30
     c78:	5f645075 	svcpl	0x00645075
     c7c:	54005055 	strpl	r5, [r0], #-85	; 0xffffffab
     c80:	435f4d49 	cmpmi	pc, #4672	; 0x1240
     c84:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
     c88:	6f4d7265 	svcvs	0x004d7265
     c8c:	47006564 	strmi	r6, [r0, -r4, ror #10]
     c90:	5f4f4950 	svcpl	0x004f4950
     c94:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
     c98:	004e495f 	subeq	r4, lr, pc, asr r9
     c9c:	52525342 	subspl	r5, r2, #134217729	; 0x8000001
     ca0:	434c004c 	movtmi	r0, #49228	; 0xc04c
     ca4:	7400524b 	strvc	r5, [r0], #-587	; 0xfffffdb5
     ca8:	00676972 	rsbeq	r6, r7, r2, ror r9
     cac:	4f495047 	svcmi	0x00495047
     cb0:	646f4d5f 	strbtvs	r4, [pc], #-3423	; cb8 <startup-0x1ffff348>
     cb4:	69700065 	ldmdbvs	r0!, {r0, r2, r5, r6}^
     cb8:	736f706e 	cmnvc	pc, #110	; 0x6e
     cbc:	74694200 	strbtvc	r4, [r9], #-512	; 0xfffffe00
     cc0:	5445535f 	strbpl	r5, [r5], #-863	; 0xfffffca1
     cc4:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     cc8:	65525f4f 	ldrbvs	r5, [r2, #-3919]	; 0xfffff0b1
     ccc:	754f6461 	strbvc	r6, [pc, #-1121]	; 873 <startup-0x1ffff78d>
     cd0:	74757074 	ldrbtvc	r7, [r5], #-116	; 0xffffff8c
     cd4:	61746144 	cmnvs	r4, r4, asr #2
     cd8:	2f3a4300 	svccs	0x003a4300
     cdc:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
     ce0:	6d612f73 	stclvs	15, cr2, [r1, #-460]!	; 0xfffffe34
     ce4:	2f726e69 	svccs	0x00726e69
     ce8:	6b736544 	blvs	1cda200 <startup-0x1e325e00>
     cec:	2f706f74 	svccs	0x00706f74
     cf0:	61746164 	cmnvs	r4, r4, ror #2
     cf4:	6a6f7270 	bvs	1bdd6bc <startup-0x1e422944>
     cf8:	2f746b65 	svccs	0x00746b65
     cfc:	334d5453 	movtcc	r5, #54355	; 0xd453
     d00:	5f344632 	svcpl	0x00344632
     d04:	2f62696c 	svccs	0x0062696c
     d08:	334d5453 	movtcc	r5, #54355	; 0xd453
     d0c:	5f344632 	svcpl	0x00344632
     d10:	2f62696c 	svccs	0x0062696c
     d14:	334d5453 	movtcc	r5, #54355	; 0xd453
     d18:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
     d1c:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xfffff088
     d20:	72655064 	rsbvc	r5, r5, #100	; 0x64
     d24:	5f687069 	svcpl	0x00687069
     d28:	76697244 	strbtvc	r7, [r9], -r4, asr #4
     d2c:	732f7265 			; <UNDEFINED> instruction: 0x732f7265
     d30:	732f6372 			; <UNDEFINED> instruction: 0x732f6372
     d34:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     d38:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
     d3c:	6970675f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, sp, lr}^
     d40:	00632e6f 	rsbeq	r2, r3, pc, ror #28
     d44:	4f495047 	svcmi	0x00495047
     d48:	0046415f 	subeq	r4, r6, pc, asr r1
     d4c:	706d6574 	rsbvc	r6, sp, r4, ror r5
     d50:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     d54:	74535f4f 	ldrbvc	r5, [r3], #-3919	; 0xfffff0b1
     d58:	74637572 	strbtvc	r7, [r3], #-1394	; 0xfffffa8e
     d5c:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
     d60:	74694200 	strbtvc	r4, [r9], #-512	; 0xfffffe00
     d64:	006c6156 	rsbeq	r6, ip, r6, asr r1
     d68:	5f746942 	svcpl	0x00746942
     d6c:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
     d70:	50470054 	subpl	r0, r7, r4, asr r0
     d74:	575f4f49 	ldrbpl	r4, [pc, -r9, asr #30]
     d78:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
     d7c:	00746942 	rsbseq	r6, r4, r2, asr #18
     d80:	4f495047 	svcmi	0x00495047
     d84:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
     d88:	73746942 	cmnvc	r4, #1081344	; 0x108000
     d8c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     d90:	6e495f4f 	cdpvs	15, 4, cr5, cr9, cr15, {2}
     d94:	47007469 	strmi	r7, [r0, -r9, ror #8]
     d98:	5f4f4950 	svcpl	0x004f4950
     d9c:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
     da0:	74694274 	strbtvc	r4, [r9], #-628	; 0xfffffd8c
     da4:	50470073 	subpl	r0, r7, r3, ror r0
     da8:	445f4f49 	ldrbmi	r4, [pc], #-3913	; db0 <startup-0x1ffff250>
     dac:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
     db0:	50470074 	subpl	r0, r7, r4, ror r0
     db4:	525f4f49 	subspl	r4, pc, #292	; 0x124
     db8:	49646165 	stmdbmi	r4!, {r0, r2, r5, r6, r8, sp, lr}^
     dbc:	7475706e 	ldrbtvc	r7, [r5], #-110	; 0xffffff92
     dc0:	61746144 	cmnvs	r4, r4, asr #2
     dc4:	00746942 	rsbseq	r6, r4, r2, asr #18
     dc8:	4f495047 	svcmi	0x00495047
     dcc:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
     dd0:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
     dd4:	00746375 	rsbseq	r6, r4, r5, ror r3
     dd8:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xfffff0b0
     ddc:	006c6156 	rsbeq	r6, ip, r6, asr r1
     de0:	4f495047 	svcmi	0x00495047
     de4:	6e69505f 	mcrvs	0, 3, r5, cr9, cr15, {2}
     de8:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     dec:	47006563 	strmi	r6, [r0, -r3, ror #10]
     df0:	5f4f4950 	svcpl	0x004f4950
     df4:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
     df8:	75706e49 	ldrbvc	r6, [r0, #-3657]!	; 0xfffff1b7
     dfc:	74614474 	strbtvc	r4, [r1], #-1140	; 0xfffffb8c
     e00:	50470061 	subpl	r0, r7, r1, rrx
     e04:	505f4f49 	subspl	r4, pc, r9, asr #30
     e08:	6f4c6e69 	svcvs	0x004c6e69
     e0c:	6f436b63 	svcvs	0x00436b63
     e10:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     e14:	74694200 	strbtvc	r4, [r9], #-512	; 0xfffffe00
     e18:	69746341 	ldmdbvs	r4!, {r0, r6, r8, r9, sp, lr}^
     e1c:	63006e6f 	movwvs	r6, #3695	; 0xe6f
     e20:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
     e24:	6970746e 	ldmdbvs	r0!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
     e28:	5047006e 	subpl	r0, r7, lr, rrx
     e2c:	575f4f49 	ldrbpl	r4, [pc, -r9, asr #30]
     e30:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
     e34:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     e38:	4700784f 	strmi	r7, [r0, -pc, asr #16]
     e3c:	5f4f4950 	svcpl	0x004f4950
     e40:	67676f54 			; <UNDEFINED> instruction: 0x67676f54
     e44:	6942656c 	stmdbvs	r2, {r2, r3, r5, r6, r8, sl, sp, lr}^
     e48:	74007374 	strvc	r7, [r0], #-884	; 0xfffffc8c
     e4c:	5f706d65 	svcpl	0x00706d65
     e50:	50470032 	subpl	r0, r7, r2, lsr r0
     e54:	505f4f49 	subspl	r4, pc, r9, asr #30
     e58:	46416e69 	strbmi	r6, [r1], -r9, ror #28
     e5c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     e60:	47006769 	strmi	r6, [r0, -r9, ror #14]
     e64:	5f4f4950 	svcpl	0x004f4950
     e68:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
     e6c:	7074754f 	rsbsvc	r7, r4, pc, asr #10
     e70:	61447475 	hvcvs	18245	; 0x4745
     e74:	69426174 	stmdbvs	r2, {r2, r4, r5, r6, r8, sp, lr}^
     e78:	756f0074 	strbvc	r0, [pc, #-116]!	; e0c <startup-0x1ffff1f4>
     e7c:	68635f74 	stmdavs	r3!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     e80:	70007261 	andvc	r7, r0, r1, ror #4
     e84:	746e6972 	strbtvc	r6, [lr], #-2418	; 0xfffff68e
     e88:	756e5500 	strbvc	r5, [lr, #-1280]!	; 0xfffffb00
     e8c:	35646573 	strbcc	r6, [r4, #-1395]!	; 0xfffffa8d
     e90:	65675f00 	strbvs	r5, [r7, #-3840]!	; 0xfffff100
     e94:	61686374 	smcvs	34356	; 0x8634
     e98:	65740072 	ldrbvs	r0, [r4, #-114]!	; 0xffffff8e
     e9c:	635f7473 	cmpvs	pc, #1929379840	; 0x73000000
     ea0:	00726168 	rsbseq	r6, r2, r8, ror #2
     ea4:	72707467 	rsbsvc	r7, r0, #1728053248	; 0x67000000
     ea8:	756e5500 	strbvc	r5, [lr, #-1280]!	; 0xfffffb00
     eac:	30646573 	rsbcc	r6, r4, r3, ror r5
     eb0:	756e5500 	strbvc	r5, [lr, #-1280]!	; 0xfffffb00
     eb4:	31646573 	smccc	18003	; 0x4653
     eb8:	756e5500 	strbvc	r5, [lr, #-1280]!	; 0xfffffb00
     ebc:	32646573 	rsbcc	r6, r4, #482344960	; 0x1cc00000
     ec0:	756e5500 	strbvc	r5, [lr, #-1280]!	; 0xfffffb00
     ec4:	33646573 	cmncc	r4, #482344960	; 0x1cc00000
     ec8:	756e5500 	strbvc	r5, [lr, #-1280]!	; 0xfffffb00
     ecc:	34646573 	strbtcc	r6, [r4], #-1395	; 0xfffffa8d
     ed0:	2f3a4300 	svccs	0x003a4300
     ed4:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
     ed8:	6d612f73 	stclvs	15, cr2, [r1, #-460]!	; 0xfffffe34
     edc:	2f726e69 	svccs	0x00726e69
     ee0:	6b736544 	blvs	1cda3f8 <startup-0x1e325c08>
     ee4:	2f706f74 	svccs	0x00706f74
     ee8:	61746164 	cmnvs	r4, r4, ror #2
     eec:	6a6f7270 	bvs	1bdd8b4 <startup-0x1e42274c>
     ef0:	2f746b65 	svccs	0x00746b65
     ef4:	74616863 	strbtvc	r6, [r1], #-2147	; 0xfffff79d
     ef8:	7070615f 	rsbsvc	r6, r0, pc, asr r1
     efc:	6173752f 	cmnvs	r3, pc, lsr #10
     f00:	632e7472 			; <UNDEFINED> instruction: 0x632e7472
     f04:	41535500 	cmpmi	r3, r0, lsl #10
     f08:	54005452 	strpl	r5, [r0], #-1106	; 0xfffffbae
     f0c:	4f5f4d49 	svcmi	0x005f4d49
     f10:	646f4d50 	strbtvs	r4, [pc], #-3408	; f18 <startup-0x1ffff0e8>
     f14:	49540065 	ldmdbmi	r4, {r0, r2, r5, r6}^
     f18:	6f465f4d 	svcvs	0x00465f4d
     f1c:	64656372 	strbtvs	r6, [r5], #-882	; 0xfffffc8e
     f20:	4332434f 	teqmi	r2, #1006632961	; 0x3c000001
     f24:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     f28:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
     f2c:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
     f30:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
     f34:	50656e4f 	rsbpl	r6, r5, pc, asr #28
     f38:	65736c75 	ldrbvs	r6, [r3, #-3189]!	; 0xfffff38b
     f3c:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
     f40:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     f44:	414d445f 	cmpmi	sp, pc, asr r4
     f48:	00646d43 	rsbeq	r6, r4, r3, asr #26
     f4c:	5f4d4954 	svcpl	0x004d4954
     f50:	75706e49 	ldrbvc	r6, [r0, #-3657]!	; 0xfffff1b7
     f54:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
     f58:	72656767 	rsbvc	r6, r5, #27000832	; 0x19c0000
     f5c:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     f60:	54006563 	strpl	r6, [r0], #-1379	; 0xfffffa9d
     f64:	545f4d49 	ldrbpl	r4, [pc], #-3401	; f6c <startup-0x1ffff094>
     f68:	534f4752 	movtpl	r4, #63314	; 0xf752
     f6c:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     f70:	49540065 	ldmdbmi	r4, {r0, r2, r5, r6}^
     f74:	6f465f4d 	svcvs	0x00465f4d
     f78:	64656372 	strbtvs	r6, [r5], #-882	; 0xfffffc8e
     f7c:	4334434f 	teqmi	r4, #1006632961	; 0x3c000001
     f80:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     f84:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
     f88:	6c435f4d 	mcrrvs	15, 4, r5, r3, cr13
     f8c:	4f726165 	svcmi	0x00726165
     f90:	65523143 	ldrbvs	r3, [r2, #-323]	; 0xfffffebd
     f94:	49540066 	ldmdbmi	r4, {r1, r2, r5, r6}^
     f98:	4c465f4d 	mcrrmi	15, 4, r5, r6, cr13
     f9c:	54004741 	strpl	r4, [r0], #-1857	; 0xfffff8bf
     fa0:	535f4d49 	cmppl	pc, #4672	; 0x1240
     fa4:	6f437465 	svcvs	0x00437465
     fa8:	7261706d 	rsbvc	r7, r1, #109	; 0x6d
     fac:	54003165 	strpl	r3, [r0], #-357	; 0xfffffe9b
     fb0:	495f4d49 	ldmdbmi	pc, {r0, r3, r6, r8, sl, fp, lr}^	; <UNPREDICTABLE>
     fb4:	6f503243 	svcvs	0x00503243
     fb8:	6972616c 	ldmdbvs	r2!, {r2, r3, r5, r6, r8, sp, lr}^
     fbc:	54007974 	strpl	r7, [r0], #-2420	; 0xfffff68c
     fc0:	555f4d49 	ldrbpl	r4, [pc, #-3401]	; 27f <startup-0x1ffffd81>
     fc4:	74616470 	strbtvc	r6, [r1], #-1136	; 0xfffffb90
     fc8:	73694465 	cmnvc	r9, #1694498816	; 0x65000000
     fcc:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
     fd0:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     fd4:	54006769 	strpl	r6, [r0], #-1897	; 0xfffff897
     fd8:	505f4d49 	subspl	r4, pc, r9, asr #26
     fdc:	65736c75 	ldrbvs	r6, [r3, #-3189]!	; 0xfffff38b
     fe0:	706d7400 	rsbvc	r7, sp, r0, lsl #8
     fe4:	726d6363 	rsbvc	r6, sp, #-1946157055	; 0x8c000001
     fe8:	6d740031 	ldclvs	0, cr0, [r4, #-196]!	; 0xffffff3c
     fec:	6d636370 	stclvs	3, cr6, [r3, #-448]!	; 0xfffffe40
     ff0:	74003272 	strvc	r3, [r0], #-626	; 0xfffffd8e
     ff4:	7263706d 	rsbvc	r7, r3, #109	; 0x6d
     ff8:	49540031 	ldmdbmi	r4, {r0, r4, r5}^
     ffc:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    1000:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
    1004:	75706e49 	ldrbvc	r6, [r0, #-3657]!	; 0xfffff1b7
    1008:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    100c:	72656767 	rsbvc	r6, r5, #27000832	; 0x19c0000
    1010:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    1014:	4643495f 			; <UNDEFINED> instruction: 0x4643495f
    1018:	65746c69 	ldrbvs	r6, [r4, #-3177]!	; 0xfffff397
    101c:	49540072 	ldmdbmi	r4, {r1, r4, r5, r6}^
    1020:	6e495f4d 	cdpvs	15, 4, cr5, cr9, cr13, {2}
    1024:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
    1028:	6c436c61 	mcrrvs	12, 6, r6, r3, cr1
    102c:	436b636f 	cmnmi	fp, #-1140850687	; 0xbc000001
    1030:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1034:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    1038:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
    103c:	6c6f5032 	stclvs	0, cr5, [pc], #-200	; f7c <startup-0x1ffff084>
    1040:	74697261 	strbtvc	r7, [r9], #-609	; 0xfffffd9f
    1044:	6e6f4379 	mcrvs	3, 3, r4, cr15, cr9, {3}
    1048:	00676966 	rsbeq	r6, r7, r6, ror #18
    104c:	5f4d4954 	svcpl	0x004d4954
    1050:	50525241 	subspl	r5, r2, r1, asr #4
    1054:	6f6c6572 	svcvs	0x006c6572
    1058:	6f436461 	svcvs	0x00436461
    105c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1060:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    1064:	5343495f 	movtpl	r4, #14687	; 0x395f
    1068:	63656c65 	cmnvs	r5, #25856	; 0x6500
    106c:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    1070:	706d7400 	rsbvc	r7, sp, r0, lsl #8
    1074:	49540031 	ldmdbmi	r4, {r0, r4, r5}^
    1078:	6e455f4d 	cdpvs	15, 4, cr5, cr5, cr13, {2}
    107c:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
    1080:	746e4972 	strbtvc	r4, [lr], #-2418	; 0xfffff68e
    1084:	61667265 	cmnvs	r6, r5, ror #4
    1088:	6f436563 	svcvs	0x00436563
    108c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1090:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    1094:	32434f5f 	subcc	r4, r3, #380	; 0x17c
    1098:	6c657250 	sfmvs	f7, 2, [r5], #-320	; 0xfffffec0
    109c:	4364616f 	cmnmi	r4, #-1073741797	; 0xc000001b
    10a0:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    10a4:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    10a8:	65475f4d 	strbvs	r5, [r7, #-3917]	; 0xfffff0b3
    10ac:	6172656e 	cmnvs	r2, lr, ror #10
    10b0:	76456574 			; <UNDEFINED> instruction: 0x76456574
    10b4:	00746e65 	rsbseq	r6, r4, r5, ror #28
    10b8:	5f4d4954 	svcpl	0x004d4954
    10bc:	50314349 	eorspl	r4, r1, r9, asr #6
    10c0:	72616c6f 	rsbvc	r6, r1, #28416	; 0x6f00
    10c4:	00797469 	rsbseq	r7, r9, r9, ror #8
    10c8:	5f4d4954 	svcpl	0x004d4954
    10cc:	6146434f 	cmpvs	r6, pc, asr #6
    10d0:	54007473 	strpl	r7, [r0], #-1139	; 0xfffffb8d
    10d4:	435f4d49 	cmpmi	pc, #4672	; 0x1240
    10d8:	6e6e6168 	powvsez	f6, f6, #0.0
    10dc:	54006c65 	strpl	r6, [r0], #-3173	; 0xfffff39b
    10e0:	435f4d49 	cmpmi	pc, #4672	; 0x1240
    10e4:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
    10e8:	6f4d7265 	svcvs	0x004d7265
    10ec:	6f436564 	svcvs	0x00436564
    10f0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    10f4:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    10f8:	726f465f 	rsbvc	r4, pc, #99614720	; 0x5f00000
    10fc:	41646563 	cmnmi	r4, r3, ror #10
    1100:	6f697463 	svcvs	0x00697463
    1104:	4954006e 	ldmdbmi	r4, {r1, r2, r3, r5, r6}^
    1108:	43435f4d 	movtmi	r5, #16205	; 0x3f4d
    110c:	646d4378 	strbtvs	r4, [sp], #-888	; 0xfffffc88
    1110:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    1114:	50434f5f 	subpl	r4, r3, pc, asr pc
    1118:	6f6c6572 	svcvs	0x006c6572
    111c:	54006461 	strpl	r6, [r0], #-1121	; 0xfffffb9f
    1120:	495f4d49 	ldmdbmi	pc, {r0, r3, r6, r8, sl, fp, lr}^	; <UNPREDICTABLE>
    1124:	49540054 	ldmdbmi	r4, {r2, r4, r6}^
    1128:	54455f4d 	strbpl	r5, [r5], #-3917	; 0xfffff0b3
    112c:	6f6c4352 	svcvs	0x006c4352
    1130:	6f4d6b63 	svcvs	0x004d6b63
    1134:	43316564 	teqmi	r1, #100, 10	; 0x19000000
    1138:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    113c:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    1140:	754f5f4d 	strbvc	r5, [pc, #-3917]	; 1fb <startup-0x1ffffe05>
    1144:	74757074 	ldrbtvc	r7, [r5], #-116	; 0xffffff8c
    1148:	6174534e 	cmnvs	r4, lr, asr #6
    114c:	74006574 	strvc	r6, [r0], #-1396	; 0xfffffa8c
    1150:	6363706d 	cmnvs	r3, #109	; 0x6d
    1154:	0078726d 	rsbseq	r7, r8, sp, ror #4
    1158:	5f4d4954 	svcpl	0x004d4954
    115c:	00444b43 	subeq	r4, r4, r3, asr #22
    1160:	5f4d4954 	svcpl	0x004d4954
    1164:	41746553 	cmnmi	r4, r3, asr r5
    1168:	726f7475 	rsbvc	r7, pc, #1962934272	; 0x75000000
    116c:	616f6c65 	cmnvs	pc, r5, ror #24
    1170:	49540064 	ldmdbmi	r4, {r2, r5, r6}^
    1174:	43495f4d 	movtmi	r5, #40781	; 0x9f4d
    1178:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0xfffffbad
    117c:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
    1180:	54007469 	strpl	r7, [r0], #-1129	; 0xfffffb97
    1184:	475f4d49 	ldrbmi	r4, [pc, -r9, asr #26]
    1188:	61437465 	cmpvs	r3, r5, ror #8
    118c:	72757470 	rsbsvc	r7, r5, #112, 8	; 0x70000000
    1190:	54003265 	strpl	r3, [r0], #-613	; 0xfffffd9b
    1194:	475f4d49 	ldrbmi	r4, [pc, -r9, asr #26]
    1198:	61437465 	cmpvs	r3, r5, ror #8
    119c:	72757470 	rsbsvc	r7, r5, #112, 8	; 0x70000000
    11a0:	54003365 	strpl	r3, [r0], #-869	; 0xfffffc9b
    11a4:	475f4d49 	ldrbmi	r4, [pc, -r9, asr #26]
    11a8:	61437465 	cmpvs	r3, r5, ror #8
    11ac:	72757470 	rsbsvc	r7, r5, #112, 8	; 0x70000000
    11b0:	54003465 	strpl	r3, [r0], #-1125	; 0xfffffb9b
    11b4:	4f5f4d49 	svcmi	0x005f4d49
    11b8:	6e493343 	cdpvs	3, 4, cr3, cr9, cr3, {2}
    11bc:	69007469 	stmdbvs	r0, {r0, r3, r5, r6, sl, ip, sp, lr}
    11c0:	70706f63 	rsbsvc	r6, r0, r3, ror #30
    11c4:	7469736f 	strbtvc	r7, [r9], #-879	; 0xfffffc91
    11c8:	6c6f7065 	stclvs	0, cr7, [pc], #-404	; 103c <startup-0x1fffefc4>
    11cc:	74697261 	strbtvc	r7, [r9], #-609	; 0xfffffd9f
    11d0:	49540079 	ldmdbmi	r4, {r0, r3, r4, r5, r6}^
    11d4:	70555f4d 	subsvc	r5, r5, sp, asr #30
    11d8:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
    11dc:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    11e0:	54006563 	strpl	r6, [r0], #-1379	; 0xfffffa9d
    11e4:	435f4d49 	cmpmi	pc, #4672	; 0x1240
    11e8:	004e7843 	subeq	r7, lr, r3, asr #16
    11ec:	5f4d4954 	svcpl	0x004d4954
    11f0:	656c6553 	strbvs	r6, [ip, #-1363]!	; 0xfffffaad
    11f4:	43437463 	movtmi	r7, #13411	; 0x3463
    11f8:	00414d44 	subeq	r4, r1, r4, asr #26
    11fc:	5f4d4954 	svcpl	0x004d4954
    1200:	5031434f 	eorspl	r4, r1, pc, asr #6
    1204:	6f6c6572 	svcvs	0x006c6572
    1208:	6f436461 	svcvs	0x00436461
    120c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1210:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    1214:	414d445f 	cmpmi	sp, pc, asr r4
    1218:	73727542 	cmnvc	r2, #276824064	; 0x10800000
    121c:	6e654c74 	mcrvs	12, 3, r4, cr5, cr4, {3}
    1220:	00687467 	rsbeq	r7, r8, r7, ror #8
    1224:	5f4d4954 	svcpl	0x004d4954
    1228:	61656c43 	cmnvs	r5, r3, asr #24
    122c:	616c4672 	smcvs	50274	; 0xc462
    1230:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    1234:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    1238:	6d6f4374 	stclvs	3, cr4, [pc, #-464]!	; 1070 <startup-0x1fffef90>
    123c:	65726170 	ldrbvs	r6, [r2, #-368]!	; 0xfffffe90
    1240:	49540032 	ldmdbmi	r4, {r1, r4, r5}^
    1244:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    1248:	6d6f4374 	stclvs	3, cr4, [pc, #-464]!	; 1080 <startup-0x1fffef80>
    124c:	65726170 	ldrbvs	r6, [r2, #-368]!	; 0xfffffe90
    1250:	49540033 	ldmdbmi	r4, {r0, r1, r4, r5}^
    1254:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    1258:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
    125c:	004d4f43 	subeq	r4, sp, r3, asr #30
    1260:	63706d74 	cmnvs	r0, #116, 26	; 0x1d00
    1264:	00726563 	rsbseq	r6, r2, r3, ror #10
    1268:	5f4d4954 	svcpl	0x004d4954
    126c:	4e32434f 	cdpmi	3, 3, cr4, cr2, cr15, {2}
    1270:	616c6f50 	cmnvs	ip, r0, asr pc
    1274:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1278:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    127c:	54006769 	strpl	r6, [r0], #-1897	; 0xfffff897
    1280:	435f3449 	cmpmi	pc, #1224736768	; 0x49000000
    1284:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1288:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    128c:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
    1290:	616c6f50 	cmnvs	ip, r0, asr pc
    1294:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1298:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    129c:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    12a0:	73657250 	cmnvc	r5, #80, 4
    12a4:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
    12a8:	49540072 	ldmdbmi	r4, {r1, r4, r5, r6}^
    12ac:	65475f4d 	strbvs	r5, [r7, #-3917]	; 0xfffff0b3
    12b0:	756f4374 	strbvc	r4, [pc, #-884]!	; f44 <startup-0x1ffff0bc>
    12b4:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    12b8:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    12bc:	6d69545f 	cfstrdvs	mvd5, [r9, #-380]!	; 0xfffffe84
    12c0:	73614265 	cmnvc	r1, #1342177286	; 0x50000006
    12c4:	72745365 	rsbsvc	r5, r4, #-1811939327	; 0x94000001
    12c8:	49746375 	ldmdbmi	r4!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}^
    12cc:	0074696e 	rsbseq	r6, r4, lr, ror #18
    12d0:	5f4d4954 	svcpl	0x004d4954
    12d4:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    12d8:	75747061 	ldrbvc	r7, [r4, #-97]!	; 0xffffff9f
    12dc:	00316572 	eorseq	r6, r1, r2, ror r5
    12e0:	5f4d4954 	svcpl	0x004d4954
    12e4:	7473614d 	ldrbtvc	r6, [r3], #-333	; 0xfffffeb3
    12e8:	6c537265 	lfmvs	f7, 2, [r3], {101}	; 0x65
    12ec:	4d657661 	stclmi	6, cr7, [r5, #-388]!	; 0xfffffe7c
    12f0:	0065646f 	rsbeq	r6, r5, pc, ror #8
    12f4:	5f4d4954 	svcpl	0x004d4954
    12f8:	656c6553 	strbvs	r6, [ip, #-1363]!	; 0xfffffaad
    12fc:	6c537463 	cfldrdvs	mvd7, [r3], {99}	; 0x63
    1300:	4d657661 	stclmi	6, cr7, [r5, #-388]!	; 0xfffffe7c
    1304:	0065646f 	rsbeq	r6, r5, pc, ror #8
    1308:	5f4d4954 	svcpl	0x004d4954
    130c:	656c6553 	strbvs	r6, [ip, #-1363]!	; 0xfffffaad
    1310:	614d7463 	cmpvs	sp, r3, ror #8
    1314:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
    1318:	76616c53 			; <UNDEFINED> instruction: 0x76616c53
    131c:	646f4d65 	strbtvs	r4, [pc], #-3429	; 1324 <startup-0x1fffecdc>
    1320:	49540065 	ldmdbmi	r4, {r0, r2, r5, r6}^
    1324:	65475f4d 	strbvs	r5, [r7, #-3917]	; 0xfffff0b3
    1328:	616c4674 	smcvs	50276	; 0xc464
    132c:	61745367 	cmnvs	r4, r7, ror #6
    1330:	00737574 	rsbseq	r7, r3, r4, ror r5
    1334:	5f4d4954 	svcpl	0x004d4954
    1338:	52544442 	subspl	r4, r4, #1107296256	; 0x42000000
    133c:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    1340:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    1344:	00666544 	rsbeq	r6, r6, r4, asr #10
    1348:	5f4d4954 	svcpl	0x004d4954
    134c:	6e49434f 	cdpvs	3, 4, cr4, cr9, cr15, {2}
    1350:	74537469 	ldrbvc	r7, [r3], #-1129	; 0xfffffb97
    1354:	74637572 	strbtvc	r7, [r3], #-1394	; 0xfffffa8e
    1358:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    135c:	53534f5f 	cmppl	r3, #380	; 0x17c
    1360:	61745352 	cmnvs	r4, r2, asr r3
    1364:	54006574 	strpl	r6, [r0], #-1396	; 0xfffffa8c
    1368:	00784d49 	rsbseq	r4, r8, r9, asr #26
    136c:	5f4d4954 	svcpl	0x004d4954
    1370:	6f636e45 	svcvs	0x00636e45
    1374:	4d726564 	cfldr64mi	mvdx6, [r2, #-400]!	; 0xfffffe70
    1378:	0065646f 	rsbeq	r6, r5, pc, ror #8
    137c:	5f4d4954 	svcpl	0x004d4954
    1380:	5034434f 	eorspl	r4, r4, pc, asr #6
    1384:	72616c6f 	rsbvc	r6, r1, #28416	; 0x6f00
    1388:	43797469 	cmnmi	r9, #1761607680	; 0x69000000
    138c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1390:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    1394:	75415f4d 	strbvc	r5, [r1, #-3917]	; 0xfffff0b3
    1398:	616d6f74 	smcvs	55028	; 0xd6f4
    139c:	4f636974 	svcmi	0x00636974
    13a0:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0xfffffb8b
    13a4:	49540074 	ldmdbmi	r4, {r2, r4, r5, r6}^
    13a8:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    13ac:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
    13b0:	7074754f 	rsbsvc	r7, r4, pc, asr #10
    13b4:	72547475 	subsvc	r7, r4, #1962934272	; 0x75000000
    13b8:	65676769 	strbvs	r6, [r7, #-1897]!	; 0xfffff897
    13bc:	49540072 	ldmdbmi	r4, {r1, r4, r5, r6}^
    13c0:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    13c4:	31434974 	hvccc	13460	; 0x3494
    13c8:	73657250 	cmnvc	r5, #80, 4
    13cc:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
    13d0:	49540072 	ldmdbmi	r4, {r1, r4, r5, r6}^
    13d4:	57505f4d 	ldrbpl	r5, [r0, -sp, asr #30]
    13d8:	6f43494d 	svcvs	0x0043494d
    13dc:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    13e0:	33495400 	movtcc	r5, #37888	; 0x9400
    13e4:	6e6f435f 	mcrvs	3, 3, r4, cr15, cr15, {2}
    13e8:	00676966 	rsbeq	r6, r7, r6, ror #18
    13ec:	5f4d4954 	svcpl	0x004d4954
    13f0:	53414d44 	movtpl	r4, #7492	; 0x1d44
    13f4:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    13f8:	49540065 	ldmdbmi	r4, {r0, r2, r5, r6}^
    13fc:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
    1400:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0xfffffbad
    1404:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
    1408:	54007469 	strpl	r7, [r0], #-1129	; 0xfffffb97
    140c:	505f4d49 	subspl	r4, pc, r9, asr #26
    1410:	65524353 	ldrbvs	r4, [r2, #-851]	; 0xfffffcad
    1414:	64616f6c 	strbtvs	r6, [r1], #-3948	; 0xfffff094
    1418:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    141c:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    1420:	43434f5f 	movtmi	r4, #16223	; 0x3f5f
    1424:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    1428:	706d7400 	rsbvc	r7, sp, r0, lsl #8
    142c:	72636d73 	rsbvc	r6, r3, #7360	; 0x1cc0
    1430:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    1434:	7478455f 	ldrbtvc	r4, [r8], #-1375	; 0xfffffaa1
    1438:	50475254 	subpl	r5, r7, r4, asr r2
    143c:	72616c6f 	rsbvc	r6, r1, #28416	; 0x6f00
    1440:	00797469 	rsbseq	r7, r9, r9, ror #8
    1444:	5f4d4954 	svcpl	0x004d4954
    1448:	52544442 	subspl	r4, r4, #1107296256	; 0x42000000
    144c:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0xfffffbad
    1450:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
    1454:	54007469 	strpl	r7, [r0], #-1129	; 0xfffffb97
    1458:	495f4d49 	ldmdbmi	pc, {r0, r3, r6, r8, sl, fp, lr}^	; <UNPREDICTABLE>
    145c:	696e4943 	stmdbvs	lr!, {r0, r1, r6, r8, fp, lr}^
    1460:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
    1464:	00746375 	rsbseq	r6, r4, r5, ror r3
    1468:	63706d74 	cmnvs	r0, #116, 26	; 0x1d00
    146c:	54003272 	strpl	r3, [r0], #-626	; 0xfffffd8e
    1470:	455f4d49 	ldrbmi	r4, [pc, #-3401]	; 72f <startup-0x1ffff8d1>
    1474:	52547478 	subspl	r7, r4, #120, 8	; 0x78000000
    1478:	65725047 	ldrbvs	r5, [r2, #-71]!	; 0xffffffb9
    147c:	6c616373 	stclvs	3, cr6, [r1], #-460	; 0xfffffe34
    1480:	54007265 	strpl	r7, [r0], #-613	; 0xfffffd9b
    1484:	425f4d49 	subsmi	r4, pc, #4672	; 0x1240
    1488:	6b616572 	blvs	185aa58 <startup-0x1e7a55a8>
    148c:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    1490:	6165445f 	cmnvs	r5, pc, asr r4
    1494:	6d695464 	cfstrdvs	mvd5, [r9, #-400]!	; 0xfffffe70
    1498:	49540065 	ldmdbmi	r4, {r0, r2, r5, r6}^
    149c:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
    14a0:	6c6f5031 	stclvs	0, cr5, [pc], #-196	; 13e4 <startup-0x1fffec1c>
    14a4:	74697261 	strbtvc	r7, [r9], #-609	; 0xfffffd9f
    14a8:	6e6f4379 	mcrvs	3, 3, r4, cr15, cr9, {3}
    14ac:	00676966 	rsbeq	r6, r7, r6, ror #18
    14b0:	5f4d4954 	svcpl	0x004d4954
    14b4:	63726f46 	cmnvs	r2, #280	; 0x118
    14b8:	434f6465 	movtmi	r6, #62565	; 0xf465
    14bc:	6e6f4331 	mcrvs	3, 3, r4, cr15, cr1, {1}
    14c0:	00676966 	rsbeq	r6, r7, r6, ror #18
    14c4:	5f4d4954 	svcpl	0x004d4954
    14c8:	63726f46 	cmnvs	r2, #280	; 0x118
    14cc:	434f6465 	movtmi	r6, #62565	; 0xf465
    14d0:	6e6f4333 	mcrvs	3, 3, r4, cr15, cr3, {1}
    14d4:	00676966 	rsbeq	r6, r7, r6, ror #18
    14d8:	5f4d4954 	svcpl	0x004d4954
    14dc:	72504349 	subsvc	r4, r0, #603979777	; 0x24000001
    14e0:	61637365 	cmnvs	r3, r5, ror #6
    14e4:	0072656c 	rsbseq	r6, r2, ip, ror #10
    14e8:	5f4d4954 	svcpl	0x004d4954
    14ec:	4e784343 	cdpmi	3, 7, cr4, cr8, cr3, {2}
    14f0:	00646d43 	rsbeq	r6, r4, r3, asr #26
    14f4:	5f4d4954 	svcpl	0x004d4954
    14f8:	494e434f 	stmdbmi	lr, {r0, r1, r2, r3, r6, r8, r9, lr}^
    14fc:	53656c64 	cmnpl	r5, #100, 24	; 0x6400
    1500:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
    1504:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    1508:	414d445f 	cmpmi	sp, pc, asr r4
    150c:	65736142 	ldrbvs	r6, [r3, #-322]!	; 0xfffffebe
    1510:	6f636900 	svcvs	0x00636900
    1514:	736f7070 	cmnvc	pc, #112	; 0x70
    1518:	73657469 	cmnvc	r5, #1761607680	; 0x69000000
    151c:	63656c65 	cmnvs	r5, #25856	; 0x6500
    1520:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    1524:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    1528:	6d65525f 	sfmvs	f5, 2, [r5, #-380]!	; 0xfffffe84
    152c:	54007061 	strpl	r7, [r0], #-97	; 0xffffff9f
    1530:	475f4d49 	ldrbmi	r4, [pc, -r9, asr #26]
    1534:	54497465 	strbpl	r7, [r9], #-1125	; 0xfffffb9b
    1538:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
    153c:	54007375 	strpl	r7, [r0], #-885	; 0xfffffc8b
    1540:	545f4d49 	ldrbpl	r4, [pc], #-3401	; 1548 <startup-0x1fffeab8>
    1544:	42656d69 	rsbmi	r6, r5, #6720	; 0x1a40
    1548:	49657361 	stmdbmi	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    154c:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    1550:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    1554:	49540074 	ldmdbmi	r4, {r2, r4, r5, r6}^
    1558:	4d445f4d 	stclmi	15, cr5, [r4, #-308]	; 0xfffffecc
    155c:	6e6f4341 	cdpvs	3, 6, cr4, cr15, cr1, {2}
    1560:	00676966 	rsbeq	r6, r7, r6, ror #18
    1564:	5f4d4954 	svcpl	0x004d4954
    1568:	43746553 	cmnmi	r4, #348127232	; 0x14c00000
    156c:	6b636f6c 	blvs	18dd324 <startup-0x1e722cdc>
    1570:	69766944 	ldmdbvs	r6!, {r2, r6, r8, fp, sp, lr}^
    1574:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
    1578:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    157c:	7843435f 	stmdavc	r3, {r0, r1, r2, r3, r4, r6, r8, r9, lr}^
    1580:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    1584:	74754f5f 	ldrbtvc	r4, [r5], #-3935	; 0xfffff0a1
    1588:	53747570 	cmnpl	r4, #112, 10	; 0x1c000000
    158c:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
    1590:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    1594:	6576455f 	ldrbvs	r4, [r6, #-1375]!	; 0xfffffaa1
    1598:	6f53746e 	svcvs	0x0053746e
    159c:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    15a0:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    15a4:	5043495f 	subpl	r4, r3, pc, asr r9
    15a8:	72616c6f 	rsbvc	r6, r1, #28416	; 0x6f00
    15ac:	00797469 	rsbseq	r7, r9, r9, ror #8
    15b0:	5f4d4954 	svcpl	0x004d4954
    15b4:	45784954 	ldrbmi	r4, [r8, #-2388]!	; 0xfffff6ac
    15b8:	72657478 	rsbvc	r7, r5, #120, 8	; 0x78000000
    15bc:	436c616e 	cmnmi	ip, #-2147483621	; 0x8000001b
    15c0:	6b636f6c 	blvs	18dd378 <startup-0x1e722c88>
    15c4:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    15c8:	54006769 	strpl	r6, [r0], #-1897	; 0xfffff897
    15cc:	4c5f4d49 	mrrcmi	13, 4, r4, pc, cr9	; <UNPREDICTABLE>
    15d0:	4c4b434f 	mcrrmi	3, 4, r4, fp, cr15
    15d4:	6c657665 	stclvs	6, cr7, [r5], #-404	; 0xfffffe6c
    15d8:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    15dc:	4354495f 	cmpmi	r4, #1556480	; 0x17c000
    15e0:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    15e4:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    15e8:	44425f4d 	strbmi	r5, [r2], #-3917	; 0xfffff0b3
    15ec:	6f435254 	svcvs	0x00435254
    15f0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    15f4:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    15f8:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    15fc:	50324349 	eorspl	r4, r2, r9, asr #6
    1600:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
    1604:	72656c61 	rsbvc	r6, r5, #24832	; 0x6100
    1608:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    160c:	6572505f 	ldrbvs	r5, [r2, #-95]!	; 0xffffffa1
    1610:	6c616373 	stclvs	3, cr6, [r1], #-460	; 0xfffffe34
    1614:	6f437265 	svcvs	0x00437265
    1618:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    161c:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    1620:	5254495f 	subspl	r4, r4, #1556480	; 0x17c000
    1624:	74784578 	ldrbtvc	r4, [r8], #-1400	; 0xfffffa88
    1628:	616e7265 	cmnvs	lr, r5, ror #4
    162c:	6f6c436c 	svcvs	0x006c436c
    1630:	6f436b63 	svcvs	0x00436b63
    1634:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1638:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    163c:	33434f5f 	movtcc	r4, #16223	; 0x3f5f
    1640:	6c6f504e 	stclvs	0, cr5, [pc], #-312	; 1510 <startup-0x1fffeaf0>
    1644:	74697261 	strbtvc	r7, [r9], #-609	; 0xfffffd9f
    1648:	6e6f4379 	mcrvs	3, 3, r4, cr15, cr9, {3}
    164c:	00676966 	rsbeq	r6, r7, r6, ror #18
    1650:	5f4d4954 	svcpl	0x004d4954
    1654:	4953534f 	ldmdbmi	r3, {r0, r1, r2, r3, r6, r8, r9, ip, lr}^
    1658:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
    165c:	49540065 	ldmdbmi	r4, {r0, r2, r5, r6}^
    1660:	69545f4d 	ldmdbvs	r4, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    1664:	6142656d 	cmpvs	r2, sp, ror #10
    1668:	6e496573 	mcrvs	5, 2, r6, cr9, cr3, {3}
    166c:	54007469 	strpl	r7, [r0], #-1129	; 0xfffffb97
    1670:	545f4d49 	ldrbpl	r4, [pc], #-3401	; 1678 <startup-0x1fffe988>
    1674:	78457849 	stmdavc	r5, {r0, r3, r6, fp, ip, sp, lr}^
    1678:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
    167c:	4c436c61 	mcrrmi	12, 6, r6, r3, cr1
    1680:	756f534b 	strbvc	r5, [pc, #-843]!	; 133d <startup-0x1fffecc3>
    1684:	00656372 	rsbeq	r6, r5, r2, ror r3
    1688:	5f4d4954 	svcpl	0x004d4954
    168c:	52544442 	subspl	r4, r4, #1107296256	; 0x42000000
    1690:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    1694:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0xfffffbad
    1698:	54007463 	strpl	r7, [r0], #-1123	; 0xfffffb9d
    169c:	435f3249 	cmpmi	pc, #-1879048188	; 0x90000004
    16a0:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    16a4:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    16a8:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
    16ac:	73614632 	cmnvc	r1, #52428800	; 0x3200000
    16b0:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
    16b4:	00676966 	rsbeq	r6, r7, r6, ror #18
    16b8:	5f4d4954 	svcpl	0x004d4954
    16bc:	4634434f 	ldrtmi	r4, [r4], -pc, asr #6
    16c0:	43747361 	cmnmi	r4, #-2080374783	; 0x84000001
    16c4:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    16c8:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    16cc:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
    16d0:	6c6f504e 	stclvs	0, cr5, [pc], #-312	; 15a0 <startup-0x1fffea60>
    16d4:	74697261 	strbtvc	r7, [r9], #-609	; 0xfffffd9f
    16d8:	49540079 	ldmdbmi	r4, {r0, r3, r4, r5, r6}^
    16dc:	54455f4d 	strbpl	r5, [r5], #-3917	; 0xfffff0b3
    16e0:	6f6c4352 	svcvs	0x006c4352
    16e4:	6f4d6b63 	svcvs	0x004d6b63
    16e8:	43326564 	teqmi	r2, #100, 10	; 0x19000000
    16ec:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    16f0:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    16f4:	6f435f31 	svcvs	0x00435f31
    16f8:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    16fc:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    1700:	646d435f 	strbtvs	r4, [sp], #-863	; 0xfffffca1
    1704:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    1708:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    170c:	50334349 	eorspl	r4, r3, r9, asr #6
    1710:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
    1714:	72656c61 	rsbvc	r6, r5, #24832	; 0x6100
    1718:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    171c:	32434f5f 	subcc	r4, r3, #380	; 0x17c
    1720:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    1724:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    1728:	656c435f 	strbvs	r4, [ip, #-863]!	; 0xfffffca1
    172c:	54497261 	strbpl	r7, [r9], #-609	; 0xfffffd9f
    1730:	646e6550 	strbtvs	r6, [lr], #-1360	; 0xfffffab0
    1734:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
    1738:	54007469 	strpl	r7, [r0], #-1129	; 0xfffffb97
    173c:	495f4d49 	ldmdbmi	pc, {r0, r3, r6, r8, sl, fp, lr}^	; <UNPREDICTABLE>
    1740:	696e4943 	stmdbvs	lr!, {r0, r1, r6, r8, fp, lr}^
    1744:	70795474 	rsbsvc	r5, r9, r4, ror r4
    1748:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    174c:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    1750:	34434f5f 	strbcc	r4, [r3], #-3935	; 0xfffff0a1
    1754:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    1758:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    175c:	4943495f 	stmdbmi	r3, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    1760:	0074696e 	rsbseq	r6, r4, lr, ror #18
    1764:	5f4d4954 	svcpl	0x004d4954
    1768:	43746553 	cmnmi	r4, #348127232	; 0x14c00000
    176c:	61706d6f 	cmnvs	r0, pc, ror #26
    1770:	00346572 	eorseq	r6, r4, r2, ror r5
    1774:	5f4d4954 	svcpl	0x004d4954
    1778:	656c6553 	strbvs	r6, [ip, #-1363]!	; 0xfffffaad
    177c:	434f7463 	movtmi	r7, #62563	; 0xf463
    1780:	54004d78 	strpl	r4, [r0], #-3448	; 0xfffff288
    1784:	555f4d49 	ldrbpl	r4, [pc, #-3401]	; a43 <startup-0x1ffff5bd>
    1788:	74616470 	strbtvc	r6, [r1], #-1136	; 0xfffffb90
    178c:	71655265 	cmnvc	r5, r5, ror #4
    1790:	74736575 	ldrbtvc	r6, [r3], #-1397	; 0xfffffa8b
    1794:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1798:	54006769 	strpl	r6, [r0], #-1897	; 0xfffff897
    179c:	4f5f4d49 	svcmi	0x005f4d49
    17a0:	72503443 	subsvc	r3, r0, #1124073472	; 0x43000000
    17a4:	616f6c65 	cmnvs	pc, r5, ror #24
    17a8:	6e6f4364 	cdpvs	3, 6, cr4, cr15, cr4, {3}
    17ac:	00676966 	rsbeq	r6, r7, r6, ror #18
    17b0:	5f4d4954 	svcpl	0x004d4954
    17b4:	61656c43 	cmnvs	r5, r3, asr #24
    17b8:	33434f72 	movtcc	r4, #16242	; 0x3f72
    17bc:	00666552 	rsbeq	r6, r6, r2, asr r5
    17c0:	5f4d4954 	svcpl	0x004d4954
    17c4:	76616c53 			; <UNDEFINED> instruction: 0x76616c53
    17c8:	646f4d65 	strbtvs	r4, [pc], #-3429	; 17d0 <startup-0x1fffe830>
    17cc:	49540065 	ldmdbmi	r4, {r0, r2, r5, r6}^
    17d0:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
    17d4:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    17d8:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    17dc:	656c435f 	strbvs	r4, [ip, #-863]!	; 0xfffffca1
    17e0:	434f7261 	movtmi	r7, #62049	; 0xf261
    17e4:	66655234 			; <UNDEFINED> instruction: 0x66655234
    17e8:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    17ec:	6572425f 	ldrbvs	r4, [r2, #-607]!	; 0xfffffda1
    17f0:	6f506b61 	svcvs	0x00506b61
    17f4:	6972616c 	ldmdbvs	r2!, {r2, r3, r5, r6, r8, sp, lr}^
    17f8:	54007974 	strpl	r7, [r0], #-2420	; 0xfffff68c
    17fc:	4f5f4d49 	svcmi	0x005f4d49
    1800:	504e3143 	subpl	r3, lr, r3, asr #2
    1804:	72616c6f 	rsbvc	r6, r1, #28416	; 0x6f00
    1808:	43797469 	cmnmi	r9, #1761607680	; 0x69000000
    180c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1810:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    1814:	43435f4d 	movtmi	r5, #16205	; 0x3f4d
    1818:	6c657250 	sfmvs	f7, 2, [r5], #-320	; 0xfffffec0
    181c:	4364616f 	cmnmi	r4, #-1073741797	; 0xc000001b
    1820:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
    1824:	54006c6f 	strpl	r6, [r0], #-3183	; 0xfffff391
    1828:	4f5f4d49 	svcmi	0x005f4d49
    182c:	696e4943 	stmdbvs	lr!, {r0, r1, r6, r8, fp, lr}^
    1830:	70795474 	rsbsvc	r5, r9, r4, ror r4
    1834:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    1838:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    183c:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    1840:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
    1844:	00726574 	rsbseq	r6, r2, r4, ror r5
    1848:	6e657469 	cdpvs	4, 6, cr7, cr5, cr9, {3}
    184c:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    1850:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    1854:	33434f5f 	movtcc	r4, #16223	; 0x3f5f
    1858:	616c6f50 	cmnvs	ip, r0, asr pc
    185c:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1860:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1864:	54006769 	strpl	r6, [r0], #-1897	; 0xfffff897
    1868:	525f4d49 	subspl	r4, pc, #4672	; 0x1240
    186c:	70616d65 	rsbvc	r6, r1, r5, ror #26
    1870:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1874:	54006769 	strpl	r6, [r0], #-1897	; 0xfffff897
    1878:	4f5f4d49 	svcmi	0x005f4d49
    187c:	6e493143 	dvfvsem	f3, f1, f3
    1880:	54007469 	strpl	r7, [r0], #-1129	; 0xfffffb97
    1884:	535f4d49 	cmppl	pc, #4672	; 0x1240
    1888:	63656c65 	cmnvs	r5, #25856	; 0x6500
    188c:	6c614874 	stclvs	8, cr4, [r1], #-464	; 0xfffffe30
    1890:	6e65536c 	cdpvs	3, 6, cr5, cr5, cr12, {3}
    1894:	00726f73 	rsbseq	r6, r2, r3, ror pc
    1898:	5f4d4954 	svcpl	0x004d4954
    189c:	61656c43 	cmnvs	r5, r3, asr #24
    18a0:	32434f72 	subcc	r4, r3, #456	; 0x1c8
    18a4:	00666552 	rsbeq	r6, r6, r2, asr r5
    18a8:	54747845 	ldrbtpl	r7, [r4], #-2117	; 0xfffff7bb
    18ac:	69464752 	stmdbvs	r6, {r1, r4, r6, r8, r9, sl, lr}^
    18b0:	7265746c 	rsbvc	r7, r5, #108, 8	; 0x6c000000
    18b4:	2f3a4300 	svccs	0x003a4300
    18b8:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    18bc:	6d612f73 	stclvs	15, cr2, [r1, #-460]!	; 0xfffffe34
    18c0:	2f726e69 	svccs	0x00726e69
    18c4:	6b736544 	blvs	1cdaddc <startup-0x1e325224>
    18c8:	2f706f74 	svccs	0x00706f74
    18cc:	61746164 	cmnvs	r4, r4, ror #2
    18d0:	6a6f7270 	bvs	1bde298 <startup-0x1e421d68>
    18d4:	2f746b65 	svccs	0x00746b65
    18d8:	334d5453 	movtcc	r5, #54355	; 0xd453
    18dc:	5f344632 	svcpl	0x00344632
    18e0:	2f62696c 	svccs	0x0062696c
    18e4:	334d5453 	movtcc	r5, #54355	; 0xd453
    18e8:	5f344632 	svcpl	0x00344632
    18ec:	2f62696c 	svccs	0x0062696c
    18f0:	334d5453 	movtcc	r5, #54355	; 0xd453
    18f4:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
    18f8:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xfffff088
    18fc:	72655064 	rsbvc	r5, r5, #100	; 0x64
    1900:	5f687069 	svcpl	0x00687069
    1904:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    1908:	732f7265 			; <UNDEFINED> instruction: 0x732f7265
    190c:	732f6372 			; <UNDEFINED> instruction: 0x732f6372
    1910:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    1914:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    1918:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
    191c:	5400632e 	strpl	r6, [r0], #-814	; 0xfffffcd2
    1920:	435f4d49 	cmpmi	pc, #4672	; 0x1240
    1924:	506c7274 	rsbpl	r7, ip, r4, ror r2
    1928:	754f4d57 	strbvc	r4, [pc, #-3415]	; bd9 <startup-0x1ffff427>
    192c:	74757074 	ldrbtvc	r7, [r5], #-116	; 0xffffff8c
    1930:	49540073 	ldmdbmi	r4, {r0, r1, r4, r5, r6}^
    1934:	43495f4d 	movtmi	r5, #40781	; 0x9f4d
    1938:	00435350 	subeq	r5, r3, r0, asr r3
    193c:	5f4d4954 	svcpl	0x004d4954
    1940:	6449434f 	strbvs	r4, [r9], #-847	; 0xfffffcb1
    1944:	7453656c 	ldrbvc	r6, [r3], #-1388	; 0xfffffa94
    1948:	00657461 	rsbeq	r7, r5, r1, ror #8
    194c:	5f4d4954 	svcpl	0x004d4954
    1950:	43525445 	cmpmi	r2, #1157627904	; 0x45000000
    1954:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1958:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    195c:	65445f4d 	strbvs	r5, [r4, #-3917]	; 0xfffff0b3
    1960:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    1964:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    1968:	33434f5f 	movtcc	r4, #16223	; 0x3f5f
    196c:	74736146 	ldrbtvc	r6, [r3], #-326	; 0xfffffeba
    1970:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1974:	54006769 	strpl	r6, [r0], #-1897	; 0xfffff897
    1978:	4f5f4d49 	svcmi	0x005f4d49
    197c:	72503343 	subsvc	r3, r0, #201326593	; 0xc000001
    1980:	616f6c65 	cmnvs	pc, r5, ror #24
    1984:	6e6f4364 	cdpvs	3, 6, cr4, cr15, cr4, {3}
    1988:	00676966 	rsbeq	r6, r7, r6, ror #18
    198c:	5f4d4954 	svcpl	0x004d4954
    1990:	49746553 	ldmdbmi	r4!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    1994:	72503443 	subsvc	r3, r0, #1124073472	; 0x43000000
    1998:	61637365 	cmnvs	r3, r5, ror #6
    199c:	0072656c 	rsbseq	r6, r2, ip, ror #10
    19a0:	5f4d4954 	svcpl	0x004d4954
    19a4:	4631434f 	ldrtmi	r4, [r1], -pc, asr #6
    19a8:	43747361 	cmnmi	r4, #-2080374783	; 0x84000001
    19ac:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    19b0:	Address 0x000019b0 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d39 	eorscc	r2, r2, r9, lsr sp
  30:	712d3931 			; <UNDEFINED> instruction: 0x712d3931
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	31393130 	teqcc	r9, r0, lsr r1
  48:	20353230 	eorscs	r3, r5, r0, lsr r2
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
  5c:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
  60:	6172622d 	cmnvs	r2, sp, lsr #4
  64:	2068636e 	rsbcs	r6, r8, lr, ror #6
  68:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  6c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  70:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  74:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
       0:	0000000c 	andeq	r0, r0, ip
       4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
       8:	7c020001 	stcvc	0, cr0, [r2], {1}
       c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
      10:	00000018 	andeq	r0, r0, r8, lsl r0
      14:	00000000 	andeq	r0, r0, r0
      18:	20000010 	andcs	r0, r0, r0, lsl r0
      1c:	00000070 	andeq	r0, r0, r0, ror r0
      20:	87080e41 	strhi	r0, [r8, -r1, asr #28]
      24:	41018e02 	tstmi	r1, r2, lsl #28
      28:	0000070d 	andeq	r0, r0, sp, lsl #14
      2c:	0000001c 	andeq	r0, r0, ip, lsl r0
      30:	00000000 	andeq	r0, r0, r0
      34:	20000080 	andcs	r0, r0, r0, lsl #1
      38:	00000028 	andeq	r0, r0, r8, lsr #32
      3c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
      40:	41018e02 	tstmi	r1, r2, lsl #28
      44:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
      48:	00000007 	andeq	r0, r0, r7
      4c:	0000001c 	andeq	r0, r0, ip, lsl r0
      50:	00000000 	andeq	r0, r0, r0
      54:	200000a8 	andcs	r0, r0, r8, lsr #1
      58:	0000005e 	andeq	r0, r0, lr, asr r0
      5c:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
      60:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
      64:	180e4101 	stmdane	lr, {r0, r8, lr}
      68:	00070d41 	andeq	r0, r7, r1, asr #26
      6c:	0000001c 	andeq	r0, r0, ip, lsl r0
      70:	00000000 	andeq	r0, r0, r0
      74:	20000106 	andcs	r0, r0, r6, lsl #2
      78:	0000003e 	andeq	r0, r0, lr, lsr r0
      7c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
      80:	41018e02 	tstmi	r1, r2, lsl #28
      84:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
      88:	00000007 	andeq	r0, r0, r7
      8c:	0000001c 	andeq	r0, r0, ip, lsl r0
      90:	00000000 	andeq	r0, r0, r0
      94:	20000144 	andcs	r0, r0, r4, asr #2
      98:	00000020 	andeq	r0, r0, r0, lsr #32
      9c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
      a0:	41018e02 	tstmi	r1, r2, lsl #28
      a4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
      a8:	00000007 	andeq	r0, r0, r7
      ac:	0000001c 	andeq	r0, r0, ip, lsl r0
      b0:	00000000 	andeq	r0, r0, r0
      b4:	20000164 	andcs	r0, r0, r4, ror #2
      b8:	00000044 	andeq	r0, r0, r4, asr #32
      bc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
      c0:	41018e02 	tstmi	r1, r2, lsl #28
      c4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
      c8:	00000007 	andeq	r0, r0, r7
      cc:	0000001c 	andeq	r0, r0, ip, lsl r0
      d0:	00000000 	andeq	r0, r0, r0
      d4:	200001a8 	andcs	r0, r0, r8, lsr #3
      d8:	00000020 	andeq	r0, r0, r0, lsr #32
      dc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
      e0:	41018e02 	tstmi	r1, r2, lsl #28
      e4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
      e8:	00000007 	andeq	r0, r0, r7
      ec:	0000001c 	andeq	r0, r0, ip, lsl r0
      f0:	00000000 	andeq	r0, r0, r0
      f4:	200001c8 	andcs	r0, r0, r8, asr #3
      f8:	0000003c 	andeq	r0, r0, ip, lsr r0
      fc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     100:	41018e02 	tstmi	r1, r2, lsl #28
     104:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     108:	00000007 	andeq	r0, r0, r7
     10c:	0000001c 	andeq	r0, r0, ip, lsl r0
     110:	00000000 	andeq	r0, r0, r0
     114:	20000204 	andcs	r0, r0, r4, lsl #4
     118:	00000020 	andeq	r0, r0, r0, lsr #32
     11c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     120:	41018e02 	tstmi	r1, r2, lsl #28
     124:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     128:	00000007 	andeq	r0, r0, r7
     12c:	0000001c 	andeq	r0, r0, ip, lsl r0
     130:	00000000 	andeq	r0, r0, r0
     134:	20000224 	andcs	r0, r0, r4, lsr #4
     138:	00000028 	andeq	r0, r0, r8, lsr #32
     13c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     140:	41018e02 	tstmi	r1, r2, lsl #28
     144:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     148:	00000007 	andeq	r0, r0, r7
     14c:	0000001c 	andeq	r0, r0, ip, lsl r0
     150:	00000000 	andeq	r0, r0, r0
     154:	2000024c 	andcs	r0, r0, ip, asr #4
     158:	00000020 	andeq	r0, r0, r0, lsr #32
     15c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     160:	41018e02 	tstmi	r1, r2, lsl #28
     164:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     168:	00000007 	andeq	r0, r0, r7
     16c:	0000001c 	andeq	r0, r0, ip, lsl r0
     170:	00000000 	andeq	r0, r0, r0
     174:	2000026c 	andcs	r0, r0, ip, ror #4
     178:	00000030 	andeq	r0, r0, r0, lsr r0
     17c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     180:	41018e02 	tstmi	r1, r2, lsl #28
     184:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     188:	00000007 	andeq	r0, r0, r7
     18c:	0000001c 	andeq	r0, r0, ip, lsl r0
     190:	00000000 	andeq	r0, r0, r0
     194:	2000029c 	mulcs	r0, ip, r2
     198:	00000020 	andeq	r0, r0, r0, lsr #32
     19c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     1a0:	41018e02 	tstmi	r1, r2, lsl #28
     1a4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     1a8:	00000007 	andeq	r0, r0, r7
     1ac:	0000001c 	andeq	r0, r0, ip, lsl r0
     1b0:	00000000 	andeq	r0, r0, r0
     1b4:	200002bc 			; <UNDEFINED> instruction: 0x200002bc
     1b8:	00000020 	andeq	r0, r0, r0, lsr #32
     1bc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     1c0:	41018e02 	tstmi	r1, r2, lsl #28
     1c4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     1c8:	00000007 	andeq	r0, r0, r7
     1cc:	0000001c 	andeq	r0, r0, ip, lsl r0
     1d0:	00000000 	andeq	r0, r0, r0
     1d4:	200002dc 	ldrdcs	r0, [r0], -ip
     1d8:	00000040 	andeq	r0, r0, r0, asr #32
     1dc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     1e0:	41018e02 	tstmi	r1, r2, lsl #28
     1e4:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     1e8:	00000007 	andeq	r0, r0, r7
     1ec:	0000001c 	andeq	r0, r0, ip, lsl r0
     1f0:	00000000 	andeq	r0, r0, r0
     1f4:	2000031c 	andcs	r0, r0, ip, lsl r3
     1f8:	0000003c 	andeq	r0, r0, ip, lsr r0
     1fc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     200:	41018e02 	tstmi	r1, r2, lsl #28
     204:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     208:	00000007 	andeq	r0, r0, r7
     20c:	0000001c 	andeq	r0, r0, ip, lsl r0
     210:	00000000 	andeq	r0, r0, r0
     214:	20000358 	andcs	r0, r0, r8, asr r3
     218:	00000034 	andeq	r0, r0, r4, lsr r0
     21c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     220:	41018e02 	tstmi	r1, r2, lsl #28
     224:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     228:	00000007 	andeq	r0, r0, r7
     22c:	00000018 	andeq	r0, r0, r8, lsl r0
     230:	00000000 	andeq	r0, r0, r0
     234:	2000038c 	andcs	r0, r0, ip, lsl #7
     238:	0000001c 	andeq	r0, r0, ip, lsl r0
     23c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     240:	41018e02 	tstmi	r1, r2, lsl #28
     244:	0000070d 	andeq	r0, r0, sp, lsl #14
     248:	0000001c 	andeq	r0, r0, ip, lsl r0
     24c:	00000000 	andeq	r0, r0, r0
     250:	200003a8 	andcs	r0, r0, r8, lsr #7
     254:	00000034 	andeq	r0, r0, r4, lsr r0
     258:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     25c:	41018e02 	tstmi	r1, r2, lsl #28
     260:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     264:	00000007 	andeq	r0, r0, r7
     268:	0000001c 	andeq	r0, r0, ip, lsl r0
     26c:	00000000 	andeq	r0, r0, r0
     270:	200003dc 	ldrdcs	r0, [r0], -ip
     274:	00000038 	andeq	r0, r0, r8, lsr r0
     278:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     27c:	41018e02 	tstmi	r1, r2, lsl #28
     280:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     284:	00000007 	andeq	r0, r0, r7
     288:	0000001c 	andeq	r0, r0, ip, lsl r0
     28c:	00000000 	andeq	r0, r0, r0
     290:	20000414 	andcs	r0, r0, r4, lsl r4
     294:	0000003c 	andeq	r0, r0, ip, lsr r0
     298:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     29c:	41018e02 	tstmi	r1, r2, lsl #28
     2a0:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     2a4:	00000007 	andeq	r0, r0, r7
     2a8:	0000001c 	andeq	r0, r0, ip, lsl r0
     2ac:	00000000 	andeq	r0, r0, r0
     2b0:	20000450 	andcs	r0, r0, r0, asr r4
     2b4:	00000164 	andeq	r0, r0, r4, ror #2
     2b8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     2bc:	41018e02 	tstmi	r1, r2, lsl #28
     2c0:	0d41280e 	stcleq	8, cr2, [r1, #-56]	; 0xffffffc8
     2c4:	00000007 	andeq	r0, r0, r7
     2c8:	0000001c 	andeq	r0, r0, ip, lsl r0
     2cc:	00000000 	andeq	r0, r0, r0
     2d0:	200005b4 			; <UNDEFINED> instruction: 0x200005b4
     2d4:	00000060 	andeq	r0, r0, r0, rrx
     2d8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     2dc:	41018e02 	tstmi	r1, r2, lsl #28
     2e0:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     2e4:	00000007 	andeq	r0, r0, r7
     2e8:	0000001c 	andeq	r0, r0, ip, lsl r0
     2ec:	00000000 	andeq	r0, r0, r0
     2f0:	20000614 	andcs	r0, r0, r4, lsl r6
     2f4:	00000020 	andeq	r0, r0, r0, lsr #32
     2f8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     2fc:	41018e02 	tstmi	r1, r2, lsl #28
     300:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     304:	00000007 	andeq	r0, r0, r7
     308:	0000001c 	andeq	r0, r0, ip, lsl r0
     30c:	00000000 	andeq	r0, r0, r0
     310:	20000634 	andcs	r0, r0, r4, lsr r6
     314:	00000020 	andeq	r0, r0, r0, lsr #32
     318:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     31c:	41018e02 	tstmi	r1, r2, lsl #28
     320:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     324:	00000007 	andeq	r0, r0, r7
     328:	0000001c 	andeq	r0, r0, ip, lsl r0
     32c:	00000000 	andeq	r0, r0, r0
     330:	20000654 	andcs	r0, r0, r4, asr r6
     334:	0000001c 	andeq	r0, r0, ip, lsl r0
     338:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     33c:	41018e02 	tstmi	r1, r2, lsl #28
     340:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     344:	00000007 	andeq	r0, r0, r7
     348:	0000001c 	andeq	r0, r0, ip, lsl r0
     34c:	00000000 	andeq	r0, r0, r0
     350:	20000670 	andcs	r0, r0, r0, ror r6
     354:	0000003c 	andeq	r0, r0, ip, lsr r0
     358:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     35c:	41018e02 	tstmi	r1, r2, lsl #28
     360:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     364:	00000007 	andeq	r0, r0, r7
     368:	0000001c 	andeq	r0, r0, ip, lsl r0
     36c:	00000000 	andeq	r0, r0, r0
     370:	200006ac 	andcs	r0, r0, ip, lsr #13
     374:	0000003c 	andeq	r0, r0, ip, lsr r0
     378:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     37c:	41018e02 	tstmi	r1, r2, lsl #28
     380:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     384:	00000007 	andeq	r0, r0, r7
     388:	0000001c 	andeq	r0, r0, ip, lsl r0
     38c:	00000000 	andeq	r0, r0, r0
     390:	200006e8 	andcs	r0, r0, r8, ror #13
     394:	0000003c 	andeq	r0, r0, ip, lsr r0
     398:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     39c:	41018e02 	tstmi	r1, r2, lsl #28
     3a0:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     3a4:	00000007 	andeq	r0, r0, r7
     3a8:	0000001c 	andeq	r0, r0, ip, lsl r0
     3ac:	00000000 	andeq	r0, r0, r0
     3b0:	20000724 	andcs	r0, r0, r4, lsr #14
     3b4:	00000040 	andeq	r0, r0, r0, asr #32
     3b8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     3bc:	41018e02 	tstmi	r1, r2, lsl #28
     3c0:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     3c4:	00000007 	andeq	r0, r0, r7
     3c8:	0000001c 	andeq	r0, r0, ip, lsl r0
     3cc:	00000000 	andeq	r0, r0, r0
     3d0:	20000764 	andcs	r0, r0, r4, ror #14
     3d4:	0000003c 	andeq	r0, r0, ip, lsr r0
     3d8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     3dc:	41018e02 	tstmi	r1, r2, lsl #28
     3e0:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     3e4:	00000007 	andeq	r0, r0, r7
     3e8:	0000001c 	andeq	r0, r0, ip, lsl r0
     3ec:	00000000 	andeq	r0, r0, r0
     3f0:	200007a0 	andcs	r0, r0, r0, lsr #15
     3f4:	0000001c 	andeq	r0, r0, ip, lsl r0
     3f8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     3fc:	41018e02 	tstmi	r1, r2, lsl #28
     400:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     404:	00000007 	andeq	r0, r0, r7
     408:	0000001c 	andeq	r0, r0, ip, lsl r0
     40c:	00000000 	andeq	r0, r0, r0
     410:	200007bc 			; <UNDEFINED> instruction: 0x200007bc
     414:	00000040 	andeq	r0, r0, r0, asr #32
     418:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     41c:	41018e02 	tstmi	r1, r2, lsl #28
     420:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     424:	00000007 	andeq	r0, r0, r7
     428:	0000001c 	andeq	r0, r0, ip, lsl r0
     42c:	00000000 	andeq	r0, r0, r0
     430:	200007fc 	strdcs	r0, [r0], -ip
     434:	00000040 	andeq	r0, r0, r0, asr #32
     438:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     43c:	41018e02 	tstmi	r1, r2, lsl #28
     440:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     444:	00000007 	andeq	r0, r0, r7
     448:	0000001c 	andeq	r0, r0, ip, lsl r0
     44c:	00000000 	andeq	r0, r0, r0
     450:	2000083c 	andcs	r0, r0, ip, lsr r8
     454:	00000040 	andeq	r0, r0, r0, asr #32
     458:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     45c:	41018e02 	tstmi	r1, r2, lsl #28
     460:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     464:	00000007 	andeq	r0, r0, r7
     468:	0000001c 	andeq	r0, r0, ip, lsl r0
     46c:	00000000 	andeq	r0, r0, r0
     470:	2000087c 	andcs	r0, r0, ip, ror r8
     474:	00000040 	andeq	r0, r0, r0, asr #32
     478:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     47c:	41018e02 	tstmi	r1, r2, lsl #28
     480:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     484:	00000007 	andeq	r0, r0, r7
     488:	0000001c 	andeq	r0, r0, ip, lsl r0
     48c:	00000000 	andeq	r0, r0, r0
     490:	200008bc 			; <UNDEFINED> instruction: 0x200008bc
     494:	00000040 	andeq	r0, r0, r0, asr #32
     498:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     49c:	41018e02 	tstmi	r1, r2, lsl #28
     4a0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     4a4:	00000007 	andeq	r0, r0, r7
     4a8:	0000001c 	andeq	r0, r0, ip, lsl r0
     4ac:	00000000 	andeq	r0, r0, r0
     4b0:	200008fc 	strdcs	r0, [r0], -ip
     4b4:	00000040 	andeq	r0, r0, r0, asr #32
     4b8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     4bc:	41018e02 	tstmi	r1, r2, lsl #28
     4c0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     4c4:	00000007 	andeq	r0, r0, r7
     4c8:	0000001c 	andeq	r0, r0, ip, lsl r0
     4cc:	00000000 	andeq	r0, r0, r0
     4d0:	2000093c 	andcs	r0, r0, ip, lsr r9
     4d4:	00000040 	andeq	r0, r0, r0, asr #32
     4d8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     4dc:	41018e02 	tstmi	r1, r2, lsl #28
     4e0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     4e4:	00000007 	andeq	r0, r0, r7
     4e8:	0000001c 	andeq	r0, r0, ip, lsl r0
     4ec:	00000000 	andeq	r0, r0, r0
     4f0:	2000097c 	andcs	r0, r0, ip, ror r9
     4f4:	00000040 	andeq	r0, r0, r0, asr #32
     4f8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     4fc:	41018e02 	tstmi	r1, r2, lsl #28
     500:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     504:	00000007 	andeq	r0, r0, r7
     508:	0000001c 	andeq	r0, r0, ip, lsl r0
     50c:	00000000 	andeq	r0, r0, r0
     510:	200009bc 			; <UNDEFINED> instruction: 0x200009bc
     514:	00000040 	andeq	r0, r0, r0, asr #32
     518:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     51c:	41018e02 	tstmi	r1, r2, lsl #28
     520:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     524:	00000007 	andeq	r0, r0, r7
     528:	0000001c 	andeq	r0, r0, ip, lsl r0
     52c:	00000000 	andeq	r0, r0, r0
     530:	200009fc 	strdcs	r0, [r0], -ip
     534:	00000040 	andeq	r0, r0, r0, asr #32
     538:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     53c:	41018e02 	tstmi	r1, r2, lsl #28
     540:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     544:	00000007 	andeq	r0, r0, r7
     548:	0000001c 	andeq	r0, r0, ip, lsl r0
     54c:	00000000 	andeq	r0, r0, r0
     550:	20000a3c 	andcs	r0, r0, ip, lsr sl
     554:	00000040 	andeq	r0, r0, r0, asr #32
     558:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     55c:	41018e02 	tstmi	r1, r2, lsl #28
     560:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     564:	00000007 	andeq	r0, r0, r7
     568:	0000001c 	andeq	r0, r0, ip, lsl r0
     56c:	00000000 	andeq	r0, r0, r0
     570:	20000a7c 	andcs	r0, r0, ip, ror sl
     574:	00000040 	andeq	r0, r0, r0, asr #32
     578:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     57c:	41018e02 	tstmi	r1, r2, lsl #28
     580:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     584:	00000007 	andeq	r0, r0, r7
     588:	0000001c 	andeq	r0, r0, ip, lsl r0
     58c:	00000000 	andeq	r0, r0, r0
     590:	20000abc 			; <UNDEFINED> instruction: 0x20000abc
     594:	00000040 	andeq	r0, r0, r0, asr #32
     598:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     59c:	41018e02 	tstmi	r1, r2, lsl #28
     5a0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     5a4:	00000007 	andeq	r0, r0, r7
     5a8:	0000001c 	andeq	r0, r0, ip, lsl r0
     5ac:	00000000 	andeq	r0, r0, r0
     5b0:	20000afc 	strdcs	r0, [r0], -ip
     5b4:	00000040 	andeq	r0, r0, r0, asr #32
     5b8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     5bc:	41018e02 	tstmi	r1, r2, lsl #28
     5c0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     5c4:	00000007 	andeq	r0, r0, r7
     5c8:	0000001c 	andeq	r0, r0, ip, lsl r0
     5cc:	00000000 	andeq	r0, r0, r0
     5d0:	20000b3c 	andcs	r0, r0, ip, lsr fp
     5d4:	00000040 	andeq	r0, r0, r0, asr #32
     5d8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     5dc:	41018e02 	tstmi	r1, r2, lsl #28
     5e0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     5e4:	00000007 	andeq	r0, r0, r7
     5e8:	0000001c 	andeq	r0, r0, ip, lsl r0
     5ec:	00000000 	andeq	r0, r0, r0
     5f0:	20000b7c 	andcs	r0, r0, ip, ror fp
     5f4:	0000003c 	andeq	r0, r0, ip, lsr r0
     5f8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     5fc:	41018e02 	tstmi	r1, r2, lsl #28
     600:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     604:	00000007 	andeq	r0, r0, r7
     608:	0000001c 	andeq	r0, r0, ip, lsl r0
     60c:	00000000 	andeq	r0, r0, r0
     610:	20000bb8 			; <UNDEFINED> instruction: 0x20000bb8
     614:	00000050 	andeq	r0, r0, r0, asr r0
     618:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     61c:	41018e02 	tstmi	r1, r2, lsl #28
     620:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     624:	00000007 	andeq	r0, r0, r7
     628:	0000001c 	andeq	r0, r0, ip, lsl r0
     62c:	00000000 	andeq	r0, r0, r0
     630:	20000c08 	andcs	r0, r0, r8, lsl #24
     634:	00000084 	andeq	r0, r0, r4, lsl #1
     638:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     63c:	41018e02 	tstmi	r1, r2, lsl #28
     640:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
     644:	00000007 	andeq	r0, r0, r7
     648:	00000018 	andeq	r0, r0, r8, lsl r0
     64c:	00000000 	andeq	r0, r0, r0
     650:	20000c8c 	andcs	r0, r0, ip, lsl #25
     654:	0000001c 	andeq	r0, r0, ip, lsl r0
     658:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     65c:	41018e02 	tstmi	r1, r2, lsl #28
     660:	0000070d 	andeq	r0, r0, sp, lsl #14
     664:	0000001c 	andeq	r0, r0, ip, lsl r0
     668:	00000000 	andeq	r0, r0, r0
     66c:	20000ca8 	andcs	r0, r0, r8, lsr #25
     670:	00000044 	andeq	r0, r0, r4, asr #32
     674:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     678:	41018e02 	tstmi	r1, r2, lsl #28
     67c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     680:	00000007 	andeq	r0, r0, r7
     684:	0000001c 	andeq	r0, r0, ip, lsl r0
     688:	00000000 	andeq	r0, r0, r0
     68c:	20000cec 	andcs	r0, r0, ip, ror #25
     690:	00000020 	andeq	r0, r0, r0, lsr #32
     694:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     698:	41018e02 	tstmi	r1, r2, lsl #28
     69c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     6a0:	00000007 	andeq	r0, r0, r7
     6a4:	0000000c 	andeq	r0, r0, ip
     6a8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     6ac:	7c020001 	stcvc	0, cr0, [r2], {1}
     6b0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     6b4:	0000000c 	andeq	r0, r0, ip
     6b8:	000006a4 	andeq	r0, r0, r4, lsr #13
     6bc:	20000000 	andcs	r0, r0, r0
     6c0:	0000000c 	andeq	r0, r0, ip
     6c4:	0000001c 	andeq	r0, r0, ip, lsl r0
     6c8:	000006a4 	andeq	r0, r0, r4, lsr #13
     6cc:	20000d0c 	andcs	r0, r0, ip, lsl #26
     6d0:	0000006c 	andeq	r0, r0, ip, rrx
     6d4:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
     6d8:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     6dc:	200e4101 	andcs	r4, lr, r1, lsl #2
     6e0:	00070d41 	andeq	r0, r7, r1, asr #26
     6e4:	0000001c 	andeq	r0, r0, ip, lsl r0
     6e8:	000006a4 	andeq	r0, r0, r4, lsr #13
     6ec:	20000d78 	andcs	r0, r0, r8, ror sp
     6f0:	0000004a 	andeq	r0, r0, sl, asr #32
     6f4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     6f8:	41018e02 	tstmi	r1, r2, lsl #28
     6fc:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     700:	00000007 	andeq	r0, r0, r7
     704:	0000001c 	andeq	r0, r0, ip, lsl r0
     708:	000006a4 	andeq	r0, r0, r4, lsr #13
     70c:	20000dc2 	andcs	r0, r0, r2, asr #27
     710:	00000136 	andeq	r0, r0, r6, lsr r1
     714:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     718:	41018e02 	tstmi	r1, r2, lsl #28
     71c:	0d41380e 	stcleq	8, cr3, [r1, #-56]	; 0xffffffc8
     720:	00000007 	andeq	r0, r0, r7
     724:	0000000c 	andeq	r0, r0, ip
     728:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     72c:	7c020001 	stcvc	0, cr0, [r2], {1}
     730:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     734:	0000001c 	andeq	r0, r0, ip, lsl r0
     738:	00000724 	andeq	r0, r0, r4, lsr #14
     73c:	20000ef8 	strdcs	r0, [r0], -r8
     740:	00000170 	andeq	r0, r0, r0, ror r1
     744:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     748:	41018e02 	tstmi	r1, r2, lsl #28
     74c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     750:	00000007 	andeq	r0, r0, r7
     754:	0000001c 	andeq	r0, r0, ip, lsl r0
     758:	00000724 	andeq	r0, r0, r4, lsr #14
     75c:	20001068 	andcs	r1, r0, r8, rrx
     760:	0000011a 	andeq	r0, r0, sl, lsl r1
     764:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     768:	41018e02 	tstmi	r1, r2, lsl #28
     76c:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
     770:	00000007 	andeq	r0, r0, r7
     774:	0000001c 	andeq	r0, r0, ip, lsl r0
     778:	00000724 	andeq	r0, r0, r4, lsr #14
     77c:	20001182 	andcs	r1, r0, r2, lsl #3
     780:	00000032 	andeq	r0, r0, r2, lsr r0
     784:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     788:	41018e02 	tstmi	r1, r2, lsl #28
     78c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     790:	00000007 	andeq	r0, r0, r7
     794:	0000001c 	andeq	r0, r0, ip, lsl r0
     798:	00000724 	andeq	r0, r0, r4, lsr #14
     79c:	200011b4 			; <UNDEFINED> instruction: 0x200011b4
     7a0:	00000046 	andeq	r0, r0, r6, asr #32
     7a4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     7a8:	41018e02 	tstmi	r1, r2, lsl #28
     7ac:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     7b0:	00000007 	andeq	r0, r0, r7
     7b4:	0000001c 	andeq	r0, r0, ip, lsl r0
     7b8:	00000724 	andeq	r0, r0, r4, lsr #14
     7bc:	200011fa 	strdcs	r1, [r0], -sl
     7c0:	00000040 	andeq	r0, r0, r0, asr #32
     7c4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     7c8:	41018e02 	tstmi	r1, r2, lsl #28
     7cc:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     7d0:	00000007 	andeq	r0, r0, r7
     7d4:	0000001c 	andeq	r0, r0, ip, lsl r0
     7d8:	00000724 	andeq	r0, r0, r4, lsr #14
     7dc:	2000123a 	andcs	r1, r0, sl, lsr r2
     7e0:	00000016 	andeq	r0, r0, r6, lsl r0
     7e4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     7e8:	41018e02 	tstmi	r1, r2, lsl #28
     7ec:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     7f0:	00000007 	andeq	r0, r0, r7
     7f4:	0000001c 	andeq	r0, r0, ip, lsl r0
     7f8:	00000724 	andeq	r0, r0, r4, lsr #14
     7fc:	20001250 	andcs	r1, r0, r0, asr r2
     800:	00000040 	andeq	r0, r0, r0, asr #32
     804:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     808:	41018e02 	tstmi	r1, r2, lsl #28
     80c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     810:	00000007 	andeq	r0, r0, r7
     814:	0000001c 	andeq	r0, r0, ip, lsl r0
     818:	00000724 	andeq	r0, r0, r4, lsr #14
     81c:	20001290 	mulcs	r0, r0, r2
     820:	00000016 	andeq	r0, r0, r6, lsl r0
     824:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     828:	41018e02 	tstmi	r1, r2, lsl #28
     82c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     830:	00000007 	andeq	r0, r0, r7
     834:	0000001c 	andeq	r0, r0, ip, lsl r0
     838:	00000724 	andeq	r0, r0, r4, lsr #14
     83c:	200012a6 	andcs	r1, r0, r6, lsr #5
     840:	0000001e 	andeq	r0, r0, lr, lsl r0
     844:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     848:	41018e02 	tstmi	r1, r2, lsl #28
     84c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     850:	00000007 	andeq	r0, r0, r7
     854:	0000001c 	andeq	r0, r0, ip, lsl r0
     858:	00000724 	andeq	r0, r0, r4, lsr #14
     85c:	200012c4 	andcs	r1, r0, r4, asr #5
     860:	0000001e 	andeq	r0, r0, lr, lsl r0
     864:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     868:	41018e02 	tstmi	r1, r2, lsl #28
     86c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     870:	00000007 	andeq	r0, r0, r7
     874:	0000001c 	andeq	r0, r0, ip, lsl r0
     878:	00000724 	andeq	r0, r0, r4, lsr #14
     87c:	200012e2 	andcs	r1, r0, r2, ror #5
     880:	0000003a 	andeq	r0, r0, sl, lsr r0
     884:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     888:	41018e02 	tstmi	r1, r2, lsl #28
     88c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     890:	00000007 	andeq	r0, r0, r7
     894:	0000001c 	andeq	r0, r0, ip, lsl r0
     898:	00000724 	andeq	r0, r0, r4, lsr #14
     89c:	2000131c 	andcs	r1, r0, ip, lsl r3
     8a0:	0000001e 	andeq	r0, r0, lr, lsl r0
     8a4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     8a8:	41018e02 	tstmi	r1, r2, lsl #28
     8ac:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     8b0:	00000007 	andeq	r0, r0, r7
     8b4:	0000001c 	andeq	r0, r0, ip, lsl r0
     8b8:	00000724 	andeq	r0, r0, r4, lsr #14
     8bc:	2000133a 	andcs	r1, r0, sl, lsr r3
     8c0:	00000024 	andeq	r0, r0, r4, lsr #32
     8c4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     8c8:	41018e02 	tstmi	r1, r2, lsl #28
     8cc:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     8d0:	00000007 	andeq	r0, r0, r7
     8d4:	0000001c 	andeq	r0, r0, ip, lsl r0
     8d8:	00000724 	andeq	r0, r0, r4, lsr #14
     8dc:	2000135e 	andcs	r1, r0, lr, asr r3
     8e0:	000000a4 	andeq	r0, r0, r4, lsr #1
     8e4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     8e8:	41018e02 	tstmi	r1, r2, lsl #28
     8ec:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     8f0:	00000007 	andeq	r0, r0, r7
     8f4:	0000000c 	andeq	r0, r0, ip
     8f8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     8fc:	7c020001 	stcvc	0, cr0, [r2], {1}
     900:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     904:	0000001c 	andeq	r0, r0, ip, lsl r0
     908:	000008f4 	strdeq	r0, [r0], -r4
     90c:	20001404 	andcs	r1, r0, r4, lsl #8
     910:	00000040 	andeq	r0, r0, r0, asr #32
     914:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     918:	41018e02 	tstmi	r1, r2, lsl #28
     91c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     920:	00000007 	andeq	r0, r0, r7
     924:	00000018 	andeq	r0, r0, r8, lsl r0
     928:	000008f4 	strdeq	r0, [r0], -r4
     92c:	20001444 	andcs	r1, r0, r4, asr #8
     930:	00000028 	andeq	r0, r0, r8, lsr #32
     934:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     938:	41018e02 	tstmi	r1, r2, lsl #28
     93c:	0000070d 	andeq	r0, r0, sp, lsl #14
     940:	00000018 	andeq	r0, r0, r8, lsl r0
     944:	000008f4 	strdeq	r0, [r0], -r4
     948:	2000146c 	andcs	r1, r0, ip, ror #8
     94c:	00000028 	andeq	r0, r0, r8, lsr #32
     950:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     954:	41018e02 	tstmi	r1, r2, lsl #28
     958:	0000070d 	andeq	r0, r0, sp, lsl #14
     95c:	0000001c 	andeq	r0, r0, ip, lsl r0
     960:	000008f4 	strdeq	r0, [r0], -r4
     964:	20001494 	mulcs	r0, r4, r4
     968:	0000002a 	andeq	r0, r0, sl, lsr #32
     96c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     970:	41018e02 	tstmi	r1, r2, lsl #28
     974:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     978:	00000007 	andeq	r0, r0, r7
     97c:	0000000c 	andeq	r0, r0, ip
     980:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     984:	7c020001 	stcvc	0, cr0, [r2], {1}
     988:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     98c:	0000001c 	andeq	r0, r0, ip, lsl r0
     990:	0000097c 	andeq	r0, r0, ip, ror r9
     994:	200014c0 	andcs	r1, r0, r0, asr #9
     998:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     99c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     9a0:	41018e02 	tstmi	r1, r2, lsl #28
     9a4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     9a8:	00000007 	andeq	r0, r0, r7
     9ac:	0000001c 	andeq	r0, r0, ip, lsl r0
     9b0:	0000097c 	andeq	r0, r0, ip, ror r9
     9b4:	20001690 	mulcs	r0, r0, r6
     9b8:	000000f8 	strdeq	r0, [r0], -r8
     9bc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     9c0:	41018e02 	tstmi	r1, r2, lsl #28
     9c4:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     9c8:	00000007 	andeq	r0, r0, r7
     9cc:	0000001c 	andeq	r0, r0, ip, lsl r0
     9d0:	0000097c 	andeq	r0, r0, ip, ror r9
     9d4:	20001788 	andcs	r1, r0, r8, lsl #15
     9d8:	00000030 	andeq	r0, r0, r0, lsr r0
     9dc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     9e0:	41018e02 	tstmi	r1, r2, lsl #28
     9e4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     9e8:	00000007 	andeq	r0, r0, r7
     9ec:	0000001c 	andeq	r0, r0, ip, lsl r0
     9f0:	0000097c 	andeq	r0, r0, ip, ror r9
     9f4:	200017b8 			; <UNDEFINED> instruction: 0x200017b8
     9f8:	00000030 	andeq	r0, r0, r0, lsr r0
     9fc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     a00:	41018e02 	tstmi	r1, r2, lsl #28
     a04:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     a08:	00000007 	andeq	r0, r0, r7
     a0c:	0000001c 	andeq	r0, r0, ip, lsl r0
     a10:	0000097c 	andeq	r0, r0, ip, ror r9
     a14:	200017e8 	andcs	r1, r0, r8, ror #15
     a18:	00000048 	andeq	r0, r0, r8, asr #32
     a1c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     a20:	41018e02 	tstmi	r1, r2, lsl #28
     a24:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     a28:	00000007 	andeq	r0, r0, r7
     a2c:	0000001c 	andeq	r0, r0, ip, lsl r0
     a30:	0000097c 	andeq	r0, r0, ip, ror r9
     a34:	20001830 	andcs	r1, r0, r0, lsr r8
     a38:	00000018 	andeq	r0, r0, r8, lsl r0
     a3c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     a40:	41018e02 	tstmi	r1, r2, lsl #28
     a44:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     a48:	00000007 	andeq	r0, r0, r7
     a4c:	0000001c 	andeq	r0, r0, ip, lsl r0
     a50:	0000097c 	andeq	r0, r0, ip, ror r9
     a54:	20001848 	andcs	r1, r0, r8, asr #16
     a58:	00000018 	andeq	r0, r0, r8, lsl r0
     a5c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     a60:	41018e02 	tstmi	r1, r2, lsl #28
     a64:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     a68:	00000007 	andeq	r0, r0, r7
     a6c:	0000001c 	andeq	r0, r0, ip, lsl r0
     a70:	0000097c 	andeq	r0, r0, ip, ror r9
     a74:	20001860 	andcs	r1, r0, r0, ror #16
     a78:	00000014 	andeq	r0, r0, r4, lsl r0
     a7c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     a80:	41018e02 	tstmi	r1, r2, lsl #28
     a84:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     a88:	00000007 	andeq	r0, r0, r7
     a8c:	0000001c 	andeq	r0, r0, ip, lsl r0
     a90:	0000097c 	andeq	r0, r0, ip, ror r9
     a94:	20001874 	andcs	r1, r0, r4, ror r8
     a98:	00000016 	andeq	r0, r0, r6, lsl r0
     a9c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     aa0:	41018e02 	tstmi	r1, r2, lsl #28
     aa4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     aa8:	00000007 	andeq	r0, r0, r7
     aac:	0000001c 	andeq	r0, r0, ip, lsl r0
     ab0:	0000097c 	andeq	r0, r0, ip, ror r9
     ab4:	2000188a 	andcs	r1, r0, sl, lsl #17
     ab8:	00000040 	andeq	r0, r0, r0, asr #32
     abc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     ac0:	41018e02 	tstmi	r1, r2, lsl #28
     ac4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     ac8:	00000007 	andeq	r0, r0, r7
     acc:	0000001c 	andeq	r0, r0, ip, lsl r0
     ad0:	0000097c 	andeq	r0, r0, ip, ror r9
     ad4:	200018ca 	andcs	r1, r0, sl, asr #17
     ad8:	00000040 	andeq	r0, r0, r0, asr #32
     adc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     ae0:	41018e02 	tstmi	r1, r2, lsl #28
     ae4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     ae8:	00000007 	andeq	r0, r0, r7
     aec:	0000001c 	andeq	r0, r0, ip, lsl r0
     af0:	0000097c 	andeq	r0, r0, ip, ror r9
     af4:	2000190a 	andcs	r1, r0, sl, lsl #18
     af8:	00000040 	andeq	r0, r0, r0, asr #32
     afc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     b00:	41018e02 	tstmi	r1, r2, lsl #28
     b04:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     b08:	00000007 	andeq	r0, r0, r7
     b0c:	0000001c 	andeq	r0, r0, ip, lsl r0
     b10:	0000097c 	andeq	r0, r0, ip, ror r9
     b14:	2000194a 	andcs	r1, r0, sl, asr #18
     b18:	00000038 	andeq	r0, r0, r8, lsr r0
     b1c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     b20:	41018e02 	tstmi	r1, r2, lsl #28
     b24:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     b28:	00000007 	andeq	r0, r0, r7
     b2c:	0000001c 	andeq	r0, r0, ip, lsl r0
     b30:	0000097c 	andeq	r0, r0, ip, ror r9
     b34:	20001982 	andcs	r1, r0, r2, lsl #19
     b38:	0000003e 	andeq	r0, r0, lr, lsr r0
     b3c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     b40:	41018e02 	tstmi	r1, r2, lsl #28
     b44:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     b48:	00000007 	andeq	r0, r0, r7
     b4c:	0000001c 	andeq	r0, r0, ip, lsl r0
     b50:	0000097c 	andeq	r0, r0, ip, ror r9
     b54:	200019c0 	andcs	r1, r0, r0, asr #19
     b58:	00000040 	andeq	r0, r0, r0, asr #32
     b5c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     b60:	41018e02 	tstmi	r1, r2, lsl #28
     b64:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     b68:	00000007 	andeq	r0, r0, r7
     b6c:	0000001c 	andeq	r0, r0, ip, lsl r0
     b70:	0000097c 	andeq	r0, r0, ip, ror r9
     b74:	20001a00 	andcs	r1, r0, r0, lsl #20
     b78:	00000158 	andeq	r0, r0, r8, asr r1
     b7c:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
     b80:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     b84:	200e4101 	andcs	r4, lr, r1, lsl #2
     b88:	00070d41 	andeq	r0, r7, r1, asr #26
     b8c:	0000001c 	andeq	r0, r0, ip, lsl r0
     b90:	0000097c 	andeq	r0, r0, ip, ror r9
     b94:	20001b58 	andcs	r1, r0, r8, asr fp
     b98:	0000017c 	andeq	r0, r0, ip, ror r1
     b9c:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
     ba0:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     ba4:	200e4101 	andcs	r4, lr, r1, lsl #2
     ba8:	00070d41 	andeq	r0, r7, r1, asr #26
     bac:	0000001c 	andeq	r0, r0, ip, lsl r0
     bb0:	0000097c 	andeq	r0, r0, ip, ror r9
     bb4:	20001cd4 	ldrdcs	r1, [r0], -r4
     bb8:	00000180 	andeq	r0, r0, r0, lsl #3
     bbc:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
     bc0:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     bc4:	200e4101 	andcs	r4, lr, r1, lsl #2
     bc8:	00070d41 	andeq	r0, r7, r1, asr #26
     bcc:	0000001c 	andeq	r0, r0, ip, lsl r0
     bd0:	0000097c 	andeq	r0, r0, ip, ror r9
     bd4:	20001e54 	andcs	r1, r0, r4, asr lr
     bd8:	00000124 	andeq	r0, r0, r4, lsr #2
     bdc:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
     be0:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     be4:	200e4101 	andcs	r4, lr, r1, lsl #2
     be8:	00070d41 	andeq	r0, r7, r1, asr #26
     bec:	0000001c 	andeq	r0, r0, ip, lsl r0
     bf0:	0000097c 	andeq	r0, r0, ip, ror r9
     bf4:	20001f78 	andcs	r1, r0, r8, ror pc
     bf8:	00000040 	andeq	r0, r0, r0, asr #32
     bfc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     c00:	41018e02 	tstmi	r1, r2, lsl #28
     c04:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     c08:	00000007 	andeq	r0, r0, r7
     c0c:	0000001c 	andeq	r0, r0, ip, lsl r0
     c10:	0000097c 	andeq	r0, r0, ip, ror r9
     c14:	20001fb8 			; <UNDEFINED> instruction: 0x20001fb8
     c18:	000000d4 	ldrdeq	r0, [r0], -r4
     c1c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     c20:	41018e02 	tstmi	r1, r2, lsl #28
     c24:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     c28:	00000007 	andeq	r0, r0, r7
     c2c:	0000001c 	andeq	r0, r0, ip, lsl r0
     c30:	0000097c 	andeq	r0, r0, ip, ror r9
     c34:	2000208c 	andcs	r2, r0, ip, lsl #1
     c38:	00000018 	andeq	r0, r0, r8, lsl r0
     c3c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     c40:	41018e02 	tstmi	r1, r2, lsl #28
     c44:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     c48:	00000007 	andeq	r0, r0, r7
     c4c:	0000001c 	andeq	r0, r0, ip, lsl r0
     c50:	0000097c 	andeq	r0, r0, ip, ror r9
     c54:	200020a4 	andcs	r2, r0, r4, lsr #1
     c58:	00000018 	andeq	r0, r0, r8, lsl r0
     c5c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     c60:	41018e02 	tstmi	r1, r2, lsl #28
     c64:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     c68:	00000007 	andeq	r0, r0, r7
     c6c:	0000001c 	andeq	r0, r0, ip, lsl r0
     c70:	0000097c 	andeq	r0, r0, ip, ror r9
     c74:	200020bc 	strhcs	r2, [r0], -ip
     c78:	00000018 	andeq	r0, r0, r8, lsl r0
     c7c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     c80:	41018e02 	tstmi	r1, r2, lsl #28
     c84:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     c88:	00000007 	andeq	r0, r0, r7
     c8c:	0000001c 	andeq	r0, r0, ip, lsl r0
     c90:	0000097c 	andeq	r0, r0, ip, ror r9
     c94:	200020d4 	ldrdcs	r2, [r0], -r4
     c98:	00000018 	andeq	r0, r0, r8, lsl r0
     c9c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     ca0:	41018e02 	tstmi	r1, r2, lsl #28
     ca4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     ca8:	00000007 	andeq	r0, r0, r7
     cac:	0000001c 	andeq	r0, r0, ip, lsl r0
     cb0:	0000097c 	andeq	r0, r0, ip, ror r9
     cb4:	200020ec 	andcs	r2, r0, ip, ror #1
     cb8:	00000048 	andeq	r0, r0, r8, asr #32
     cbc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     cc0:	41018e02 	tstmi	r1, r2, lsl #28
     cc4:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     cc8:	00000007 	andeq	r0, r0, r7
     ccc:	0000001c 	andeq	r0, r0, ip, lsl r0
     cd0:	0000097c 	andeq	r0, r0, ip, ror r9
     cd4:	20002134 	andcs	r2, r0, r4, lsr r1
     cd8:	00000050 	andeq	r0, r0, r0, asr r0
     cdc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     ce0:	41018e02 	tstmi	r1, r2, lsl #28
     ce4:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     ce8:	00000007 	andeq	r0, r0, r7
     cec:	0000001c 	andeq	r0, r0, ip, lsl r0
     cf0:	0000097c 	andeq	r0, r0, ip, ror r9
     cf4:	20002184 	andcs	r2, r0, r4, lsl #3
     cf8:	00000048 	andeq	r0, r0, r8, asr #32
     cfc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     d00:	41018e02 	tstmi	r1, r2, lsl #28
     d04:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     d08:	00000007 	andeq	r0, r0, r7
     d0c:	0000001c 	andeq	r0, r0, ip, lsl r0
     d10:	0000097c 	andeq	r0, r0, ip, ror r9
     d14:	200021cc 	andcs	r2, r0, ip, asr #3
     d18:	00000050 	andeq	r0, r0, r0, asr r0
     d1c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     d20:	41018e02 	tstmi	r1, r2, lsl #28
     d24:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     d28:	00000007 	andeq	r0, r0, r7
     d2c:	0000001c 	andeq	r0, r0, ip, lsl r0
     d30:	0000097c 	andeq	r0, r0, ip, ror r9
     d34:	2000221c 	andcs	r2, r0, ip, lsl r2
     d38:	00000048 	andeq	r0, r0, r8, asr #32
     d3c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     d40:	41018e02 	tstmi	r1, r2, lsl #28
     d44:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     d48:	00000007 	andeq	r0, r0, r7
     d4c:	0000001c 	andeq	r0, r0, ip, lsl r0
     d50:	0000097c 	andeq	r0, r0, ip, ror r9
     d54:	20002264 	andcs	r2, r0, r4, ror #4
     d58:	00000050 	andeq	r0, r0, r0, asr r0
     d5c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     d60:	41018e02 	tstmi	r1, r2, lsl #28
     d64:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     d68:	00000007 	andeq	r0, r0, r7
     d6c:	0000001c 	andeq	r0, r0, ip, lsl r0
     d70:	0000097c 	andeq	r0, r0, ip, ror r9
     d74:	200022b4 			; <UNDEFINED> instruction: 0x200022b4
     d78:	00000048 	andeq	r0, r0, r8, asr #32
     d7c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     d80:	41018e02 	tstmi	r1, r2, lsl #28
     d84:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     d88:	00000007 	andeq	r0, r0, r7
     d8c:	0000001c 	andeq	r0, r0, ip, lsl r0
     d90:	0000097c 	andeq	r0, r0, ip, ror r9
     d94:	200022fc 	strdcs	r2, [r0], -ip
     d98:	00000050 	andeq	r0, r0, r0, asr r0
     d9c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     da0:	41018e02 	tstmi	r1, r2, lsl #28
     da4:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     da8:	00000007 	andeq	r0, r0, r7
     dac:	0000001c 	andeq	r0, r0, ip, lsl r0
     db0:	0000097c 	andeq	r0, r0, ip, ror r9
     db4:	2000234c 	andcs	r2, r0, ip, asr #6
     db8:	00000048 	andeq	r0, r0, r8, asr #32
     dbc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     dc0:	41018e02 	tstmi	r1, r2, lsl #28
     dc4:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     dc8:	00000007 	andeq	r0, r0, r7
     dcc:	0000001c 	andeq	r0, r0, ip, lsl r0
     dd0:	0000097c 	andeq	r0, r0, ip, ror r9
     dd4:	20002394 	mulcs	r0, r4, r3
     dd8:	00000050 	andeq	r0, r0, r0, asr r0
     ddc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     de0:	41018e02 	tstmi	r1, r2, lsl #28
     de4:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     de8:	00000007 	andeq	r0, r0, r7
     dec:	0000001c 	andeq	r0, r0, ip, lsl r0
     df0:	0000097c 	andeq	r0, r0, ip, ror r9
     df4:	200023e4 	andcs	r2, r0, r4, ror #7
     df8:	00000048 	andeq	r0, r0, r8, asr #32
     dfc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     e00:	41018e02 	tstmi	r1, r2, lsl #28
     e04:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     e08:	00000007 	andeq	r0, r0, r7
     e0c:	0000001c 	andeq	r0, r0, ip, lsl r0
     e10:	0000097c 	andeq	r0, r0, ip, ror r9
     e14:	2000242c 	andcs	r2, r0, ip, lsr #8
     e18:	00000050 	andeq	r0, r0, r0, asr r0
     e1c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     e20:	41018e02 	tstmi	r1, r2, lsl #28
     e24:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     e28:	00000007 	andeq	r0, r0, r7
     e2c:	0000001c 	andeq	r0, r0, ip, lsl r0
     e30:	0000097c 	andeq	r0, r0, ip, ror r9
     e34:	2000247c 	andcs	r2, r0, ip, ror r4
     e38:	00000048 	andeq	r0, r0, r8, asr #32
     e3c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     e40:	41018e02 	tstmi	r1, r2, lsl #28
     e44:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     e48:	00000007 	andeq	r0, r0, r7
     e4c:	0000001c 	andeq	r0, r0, ip, lsl r0
     e50:	0000097c 	andeq	r0, r0, ip, ror r9
     e54:	200024c4 	andcs	r2, r0, r4, asr #9
     e58:	0000004c 	andeq	r0, r0, ip, asr #32
     e5c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     e60:	41018e02 	tstmi	r1, r2, lsl #28
     e64:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     e68:	00000007 	andeq	r0, r0, r7
     e6c:	0000001c 	andeq	r0, r0, ip, lsl r0
     e70:	0000097c 	andeq	r0, r0, ip, ror r9
     e74:	20002510 	andcs	r2, r0, r0, lsl r5
     e78:	00000048 	andeq	r0, r0, r8, asr #32
     e7c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     e80:	41018e02 	tstmi	r1, r2, lsl #28
     e84:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     e88:	00000007 	andeq	r0, r0, r7
     e8c:	0000001c 	andeq	r0, r0, ip, lsl r0
     e90:	0000097c 	andeq	r0, r0, ip, ror r9
     e94:	20002558 	andcs	r2, r0, r8, asr r5
     e98:	0000004c 	andeq	r0, r0, ip, asr #32
     e9c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     ea0:	41018e02 	tstmi	r1, r2, lsl #28
     ea4:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     ea8:	00000007 	andeq	r0, r0, r7
     eac:	0000001c 	andeq	r0, r0, ip, lsl r0
     eb0:	0000097c 	andeq	r0, r0, ip, ror r9
     eb4:	200025a4 	andcs	r2, r0, r4, lsr #11
     eb8:	00000048 	andeq	r0, r0, r8, asr #32
     ebc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     ec0:	41018e02 	tstmi	r1, r2, lsl #28
     ec4:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     ec8:	00000007 	andeq	r0, r0, r7
     ecc:	0000001c 	andeq	r0, r0, ip, lsl r0
     ed0:	0000097c 	andeq	r0, r0, ip, ror r9
     ed4:	200025ec 	andcs	r2, r0, ip, ror #11
     ed8:	00000048 	andeq	r0, r0, r8, asr #32
     edc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     ee0:	41018e02 	tstmi	r1, r2, lsl #28
     ee4:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     ee8:	00000007 	andeq	r0, r0, r7
     eec:	0000001c 	andeq	r0, r0, ip, lsl r0
     ef0:	0000097c 	andeq	r0, r0, ip, ror r9
     ef4:	20002634 	andcs	r2, r0, r4, lsr r6
     ef8:	0000004c 	andeq	r0, r0, ip, asr #32
     efc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     f00:	41018e02 	tstmi	r1, r2, lsl #28
     f04:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     f08:	00000007 	andeq	r0, r0, r7
     f0c:	0000001c 	andeq	r0, r0, ip, lsl r0
     f10:	0000097c 	andeq	r0, r0, ip, ror r9
     f14:	20002680 	andcs	r2, r0, r0, lsl #13
     f18:	0000004c 	andeq	r0, r0, ip, asr #32
     f1c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     f20:	41018e02 	tstmi	r1, r2, lsl #28
     f24:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     f28:	00000007 	andeq	r0, r0, r7
     f2c:	0000001c 	andeq	r0, r0, ip, lsl r0
     f30:	0000097c 	andeq	r0, r0, ip, ror r9
     f34:	200026cc 	andcs	r2, r0, ip, asr #13
     f38:	00000050 	andeq	r0, r0, r0, asr r0
     f3c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     f40:	41018e02 	tstmi	r1, r2, lsl #28
     f44:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     f48:	00000007 	andeq	r0, r0, r7
     f4c:	0000001c 	andeq	r0, r0, ip, lsl r0
     f50:	0000097c 	andeq	r0, r0, ip, ror r9
     f54:	2000271c 	andcs	r2, r0, ip, lsl r7
     f58:	00000050 	andeq	r0, r0, r0, asr r0
     f5c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     f60:	41018e02 	tstmi	r1, r2, lsl #28
     f64:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     f68:	00000007 	andeq	r0, r0, r7
     f6c:	0000001c 	andeq	r0, r0, ip, lsl r0
     f70:	0000097c 	andeq	r0, r0, ip, ror r9
     f74:	2000276c 	andcs	r2, r0, ip, ror #14
     f78:	00000050 	andeq	r0, r0, r0, asr r0
     f7c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     f80:	41018e02 	tstmi	r1, r2, lsl #28
     f84:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     f88:	00000007 	andeq	r0, r0, r7
     f8c:	0000001c 	andeq	r0, r0, ip, lsl r0
     f90:	0000097c 	andeq	r0, r0, ip, ror r9
     f94:	200027bc 			; <UNDEFINED> instruction: 0x200027bc
     f98:	00000066 	andeq	r0, r0, r6, rrx
     f9c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     fa0:	41018e02 	tstmi	r1, r2, lsl #28
     fa4:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     fa8:	00000007 	andeq	r0, r0, r7
     fac:	0000001c 	andeq	r0, r0, ip, lsl r0
     fb0:	0000097c 	andeq	r0, r0, ip, ror r9
     fb4:	20002822 	andcs	r2, r0, r2, lsr #16
     fb8:	00000066 	andeq	r0, r0, r6, rrx
     fbc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     fc0:	41018e02 	tstmi	r1, r2, lsl #28
     fc4:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     fc8:	00000007 	andeq	r0, r0, r7
     fcc:	0000001c 	andeq	r0, r0, ip, lsl r0
     fd0:	0000097c 	andeq	r0, r0, ip, ror r9
     fd4:	20002888 	andcs	r2, r0, r8, lsl #17
     fd8:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
     fdc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     fe0:	41018e02 	tstmi	r1, r2, lsl #28
     fe4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     fe8:	00000007 	andeq	r0, r0, r7
     fec:	0000001c 	andeq	r0, r0, ip, lsl r0
     ff0:	0000097c 	andeq	r0, r0, ip, ror r9
     ff4:	20002938 	andcs	r2, r0, r8, lsr r9
     ff8:	0000002e 	andeq	r0, r0, lr, lsr #32
     ffc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1000:	41018e02 	tstmi	r1, r2, lsl #28
    1004:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    1008:	00000007 	andeq	r0, r0, r7
    100c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1010:	0000097c 	andeq	r0, r0, ip, ror r9
    1014:	20002966 	andcs	r2, r0, r6, ror #18
    1018:	000000ea 	andeq	r0, r0, sl, ror #1
    101c:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
    1020:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    1024:	200e4101 	andcs	r4, lr, r1, lsl #2
    1028:	00070d41 	andeq	r0, r7, r1, asr #26
    102c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1030:	0000097c 	andeq	r0, r0, ip, ror r9
    1034:	20002a50 	andcs	r2, r0, r0, asr sl
    1038:	00000014 	andeq	r0, r0, r4, lsl r0
    103c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1040:	41018e02 	tstmi	r1, r2, lsl #28
    1044:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    1048:	00000007 	andeq	r0, r0, r7
    104c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1050:	0000097c 	andeq	r0, r0, ip, ror r9
    1054:	20002a64 	andcs	r2, r0, r4, ror #20
    1058:	00000014 	andeq	r0, r0, r4, lsl r0
    105c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1060:	41018e02 	tstmi	r1, r2, lsl #28
    1064:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    1068:	00000007 	andeq	r0, r0, r7
    106c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1070:	0000097c 	andeq	r0, r0, ip, ror r9
    1074:	20002a78 	andcs	r2, r0, r8, ror sl
    1078:	00000014 	andeq	r0, r0, r4, lsl r0
    107c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1080:	41018e02 	tstmi	r1, r2, lsl #28
    1084:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    1088:	00000007 	andeq	r0, r0, r7
    108c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1090:	0000097c 	andeq	r0, r0, ip, ror r9
    1094:	20002a8c 	andcs	r2, r0, ip, lsl #21
    1098:	00000014 	andeq	r0, r0, r4, lsl r0
    109c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    10a0:	41018e02 	tstmi	r1, r2, lsl #28
    10a4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    10a8:	00000007 	andeq	r0, r0, r7
    10ac:	0000001c 	andeq	r0, r0, ip, lsl r0
    10b0:	0000097c 	andeq	r0, r0, ip, ror r9
    10b4:	20002aa0 	andcs	r2, r0, r0, lsr #21
    10b8:	00000038 	andeq	r0, r0, r8, lsr r0
    10bc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    10c0:	41018e02 	tstmi	r1, r2, lsl #28
    10c4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    10c8:	00000007 	andeq	r0, r0, r7
    10cc:	0000001c 	andeq	r0, r0, ip, lsl r0
    10d0:	0000097c 	andeq	r0, r0, ip, ror r9
    10d4:	20002ad8 	ldrdcs	r2, [r0], -r8
    10d8:	00000040 	andeq	r0, r0, r0, asr #32
    10dc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    10e0:	41018e02 	tstmi	r1, r2, lsl #28
    10e4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    10e8:	00000007 	andeq	r0, r0, r7
    10ec:	0000001c 	andeq	r0, r0, ip, lsl r0
    10f0:	0000097c 	andeq	r0, r0, ip, ror r9
    10f4:	20002b18 	andcs	r2, r0, r8, lsl fp
    10f8:	00000038 	andeq	r0, r0, r8, lsr r0
    10fc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1100:	41018e02 	tstmi	r1, r2, lsl #28
    1104:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    1108:	00000007 	andeq	r0, r0, r7
    110c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1110:	0000097c 	andeq	r0, r0, ip, ror r9
    1114:	20002b50 	andcs	r2, r0, r0, asr fp
    1118:	00000040 	andeq	r0, r0, r0, asr #32
    111c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1120:	41018e02 	tstmi	r1, r2, lsl #28
    1124:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    1128:	00000007 	andeq	r0, r0, r7
    112c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1130:	0000097c 	andeq	r0, r0, ip, ror r9
    1134:	20002b90 	mulcs	r0, r0, fp
    1138:	0000004c 	andeq	r0, r0, ip, asr #32
    113c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1140:	41018e02 	tstmi	r1, r2, lsl #28
    1144:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    1148:	00000007 	andeq	r0, r0, r7
    114c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1150:	0000097c 	andeq	r0, r0, ip, ror r9
    1154:	20002bdc 	ldrdcs	r2, [r0], -ip
    1158:	0000003a 	andeq	r0, r0, sl, lsr r0
    115c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1160:	41018e02 	tstmi	r1, r2, lsl #28
    1164:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    1168:	00000007 	andeq	r0, r0, r7
    116c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1170:	0000097c 	andeq	r0, r0, ip, ror r9
    1174:	20002c16 	andcs	r2, r0, r6, lsl ip
    1178:	0000004e 	andeq	r0, r0, lr, asr #32
    117c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1180:	41018e02 	tstmi	r1, r2, lsl #28
    1184:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    1188:	00000007 	andeq	r0, r0, r7
    118c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1190:	0000097c 	andeq	r0, r0, ip, ror r9
    1194:	20002c64 	andcs	r2, r0, r4, ror #24
    1198:	00000040 	andeq	r0, r0, r0, asr #32
    119c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    11a0:	41018e02 	tstmi	r1, r2, lsl #28
    11a4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    11a8:	00000007 	andeq	r0, r0, r7
    11ac:	0000001c 	andeq	r0, r0, ip, lsl r0
    11b0:	0000097c 	andeq	r0, r0, ip, ror r9
    11b4:	20002ca4 	andcs	r2, r0, r4, lsr #25
    11b8:	00000040 	andeq	r0, r0, r0, asr #32
    11bc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    11c0:	41018e02 	tstmi	r1, r2, lsl #28
    11c4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    11c8:	00000007 	andeq	r0, r0, r7
    11cc:	0000001c 	andeq	r0, r0, ip, lsl r0
    11d0:	0000097c 	andeq	r0, r0, ip, ror r9
    11d4:	20002ce4 	andcs	r2, r0, r4, ror #25
    11d8:	00000052 	andeq	r0, r0, r2, asr r0
    11dc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    11e0:	41018e02 	tstmi	r1, r2, lsl #28
    11e4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    11e8:	00000007 	andeq	r0, r0, r7
    11ec:	0000001c 	andeq	r0, r0, ip, lsl r0
    11f0:	0000097c 	andeq	r0, r0, ip, ror r9
    11f4:	20002d36 	andcs	r2, r0, r6, lsr sp
    11f8:	0000001e 	andeq	r0, r0, lr, lsl r0
    11fc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1200:	41018e02 	tstmi	r1, r2, lsl #28
    1204:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    1208:	00000007 	andeq	r0, r0, r7
    120c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1210:	0000097c 	andeq	r0, r0, ip, ror r9
    1214:	20002d54 	andcs	r2, r0, r4, asr sp
    1218:	00000046 	andeq	r0, r0, r6, asr #32
    121c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1220:	41018e02 	tstmi	r1, r2, lsl #28
    1224:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    1228:	00000007 	andeq	r0, r0, r7
    122c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1230:	0000097c 	andeq	r0, r0, ip, ror r9
    1234:	20002d9a 	mulcs	r0, sl, sp
    1238:	00000022 	andeq	r0, r0, r2, lsr #32
    123c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1240:	41018e02 	tstmi	r1, r2, lsl #28
    1244:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    1248:	00000007 	andeq	r0, r0, r7
    124c:	00000020 	andeq	r0, r0, r0, lsr #32
    1250:	0000097c 	andeq	r0, r0, ip, ror r9
    1254:	20002dbc 			; <UNDEFINED> instruction: 0x20002dbc
    1258:	00000074 	andeq	r0, r0, r4, ror r0
    125c:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    1260:	87038504 	strhi	r8, [r3, -r4, lsl #10]
    1264:	41018e02 	tstmi	r1, r2, lsl #28
    1268:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
    126c:	00000007 	andeq	r0, r0, r7
    1270:	0000001c 	andeq	r0, r0, ip, lsl r0
    1274:	0000097c 	andeq	r0, r0, ip, ror r9
    1278:	20002e30 	andcs	r2, r0, r0, lsr lr
    127c:	00000022 	andeq	r0, r0, r2, lsr #32
    1280:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1284:	41018e02 	tstmi	r1, r2, lsl #28
    1288:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    128c:	00000007 	andeq	r0, r0, r7
    1290:	0000001c 	andeq	r0, r0, ip, lsl r0
    1294:	0000097c 	andeq	r0, r0, ip, ror r9
    1298:	20002e52 	andcs	r2, r0, r2, asr lr
    129c:	00000032 	andeq	r0, r0, r2, lsr r0
    12a0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    12a4:	41018e02 	tstmi	r1, r2, lsl #28
    12a8:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    12ac:	00000007 	andeq	r0, r0, r7
    12b0:	0000001c 	andeq	r0, r0, ip, lsl r0
    12b4:	0000097c 	andeq	r0, r0, ip, ror r9
    12b8:	20002e84 	andcs	r2, r0, r4, lsl #29
    12bc:	00000052 	andeq	r0, r0, r2, asr r0
    12c0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    12c4:	41018e02 	tstmi	r1, r2, lsl #28
    12c8:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    12cc:	00000007 	andeq	r0, r0, r7
    12d0:	0000001c 	andeq	r0, r0, ip, lsl r0
    12d4:	0000097c 	andeq	r0, r0, ip, ror r9
    12d8:	20002ed6 	ldrdcs	r2, [r0], -r6
    12dc:	00000040 	andeq	r0, r0, r0, asr #32
    12e0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    12e4:	41018e02 	tstmi	r1, r2, lsl #28
    12e8:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    12ec:	00000007 	andeq	r0, r0, r7
    12f0:	0000001c 	andeq	r0, r0, ip, lsl r0
    12f4:	0000097c 	andeq	r0, r0, ip, ror r9
    12f8:	20002f16 	andcs	r2, r0, r6, lsl pc
    12fc:	00000020 	andeq	r0, r0, r0, lsr #32
    1300:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1304:	41018e02 	tstmi	r1, r2, lsl #28
    1308:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    130c:	00000007 	andeq	r0, r0, r7
    1310:	0000001c 	andeq	r0, r0, ip, lsl r0
    1314:	0000097c 	andeq	r0, r0, ip, ror r9
    1318:	20002f36 	andcs	r2, r0, r6, lsr pc
    131c:	00000034 	andeq	r0, r0, r4, lsr r0
    1320:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1324:	41018e02 	tstmi	r1, r2, lsl #28
    1328:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    132c:	00000007 	andeq	r0, r0, r7
    1330:	00000020 	andeq	r0, r0, r0, lsr #32
    1334:	0000097c 	andeq	r0, r0, ip, ror r9
    1338:	20002f6a 	andcs	r2, r0, sl, ror #30
    133c:	0000007c 	andeq	r0, r0, ip, ror r0
    1340:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    1344:	87038504 	strhi	r8, [r3, -r4, lsl #10]
    1348:	41018e02 	tstmi	r1, r2, lsl #28
    134c:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
    1350:	00000007 	andeq	r0, r0, r7
    1354:	00000020 	andeq	r0, r0, r0, lsr #32
    1358:	0000097c 	andeq	r0, r0, ip, ror r9
    135c:	20002fe6 	andcs	r2, r0, r6, ror #31
    1360:	0000008c 	andeq	r0, r0, ip, lsl #1
    1364:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
    1368:	86048505 	strhi	r8, [r4], -r5, lsl #10
    136c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    1370:	300e4101 	andcc	r4, lr, r1, lsl #2
    1374:	00070d41 	andeq	r0, r7, r1, asr #26
    1378:	00000020 	andeq	r0, r0, r0, lsr #32
    137c:	0000097c 	andeq	r0, r0, ip, ror r9
    1380:	20003072 	andcs	r3, r0, r2, ror r0
    1384:	00000052 	andeq	r0, r0, r2, asr r0
    1388:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
    138c:	86048505 	strhi	r8, [r4], -r5, lsl #10
    1390:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    1394:	280e4101 	stmdacs	lr, {r0, r8, lr}
    1398:	00070d41 	andeq	r0, r7, r1, asr #26
    139c:	0000001c 	andeq	r0, r0, ip, lsl r0
    13a0:	0000097c 	andeq	r0, r0, ip, ror r9
    13a4:	200030c4 	andcs	r3, r0, r4, asr #1
    13a8:	00000048 	andeq	r0, r0, r8, asr #32
    13ac:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    13b0:	41018e02 	tstmi	r1, r2, lsl #28
    13b4:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    13b8:	00000007 	andeq	r0, r0, r7
    13bc:	0000001c 	andeq	r0, r0, ip, lsl r0
    13c0:	0000097c 	andeq	r0, r0, ip, ror r9
    13c4:	2000310c 	andcs	r3, r0, ip, lsl #2
    13c8:	00000038 	andeq	r0, r0, r8, lsr r0
    13cc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    13d0:	41018e02 	tstmi	r1, r2, lsl #28
    13d4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    13d8:	00000007 	andeq	r0, r0, r7
    13dc:	0000001c 	andeq	r0, r0, ip, lsl r0
    13e0:	0000097c 	andeq	r0, r0, ip, ror r9
    13e4:	20003144 	andcs	r3, r0, r4, asr #2
    13e8:	00000038 	andeq	r0, r0, r8, lsr r0
    13ec:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    13f0:	41018e02 	tstmi	r1, r2, lsl #28
    13f4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    13f8:	00000007 	andeq	r0, r0, r7
    13fc:	0000001c 	andeq	r0, r0, ip, lsl r0
    1400:	0000097c 	andeq	r0, r0, ip, ror r9
    1404:	2000317c 	andcs	r3, r0, ip, ror r1
    1408:	00000038 	andeq	r0, r0, r8, lsr r0
    140c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1410:	41018e02 	tstmi	r1, r2, lsl #28
    1414:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    1418:	00000007 	andeq	r0, r0, r7
    141c:	00000020 	andeq	r0, r0, r0, lsr #32
    1420:	0000097c 	andeq	r0, r0, ip, ror r9
    1424:	200031b4 			; <UNDEFINED> instruction: 0x200031b4
    1428:	00000072 	andeq	r0, r0, r2, ror r0
    142c:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    1430:	87038504 	strhi	r8, [r3, -r4, lsl #10]
    1434:	41018e02 	tstmi	r1, r2, lsl #28
    1438:	0d41280e 	stcleq	8, cr2, [r1, #-56]	; 0xffffffc8
    143c:	00000007 	andeq	r0, r0, r7
    1440:	00000020 	andeq	r0, r0, r0, lsr #32
    1444:	0000097c 	andeq	r0, r0, ip, ror r9
    1448:	20003226 	andcs	r3, r0, r6, lsr #4
    144c:	000000d6 	ldrdeq	r0, [r0], -r6
    1450:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
    1454:	86048505 	strhi	r8, [r4], -r5, lsl #10
    1458:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    145c:	300e4101 	andcc	r4, lr, r1, lsl #2
    1460:	00070d41 	andeq	r0, r7, r1, asr #26
    1464:	0000001c 	andeq	r0, r0, ip, lsl r0
    1468:	0000097c 	andeq	r0, r0, ip, ror r9
    146c:	200032fc 	strdcs	r3, [r0], -ip
    1470:	00000040 	andeq	r0, r0, r0, asr #32
    1474:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1478:	41018e02 	tstmi	r1, r2, lsl #28
    147c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    1480:	00000007 	andeq	r0, r0, r7
    1484:	0000001c 	andeq	r0, r0, ip, lsl r0
    1488:	0000097c 	andeq	r0, r0, ip, ror r9
    148c:	2000333c 	andcs	r3, r0, ip, lsr r3
    1490:	00000020 	andeq	r0, r0, r0, lsr #32
    1494:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1498:	41018e02 	tstmi	r1, r2, lsl #28
    149c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    14a0:	00000007 	andeq	r0, r0, r7
    14a4:	00000020 	andeq	r0, r0, r0, lsr #32
    14a8:	0000097c 	andeq	r0, r0, ip, ror r9
    14ac:	2000335c 	andcs	r3, r0, ip, asr r3
    14b0:	000000b2 	strheq	r0, [r0], -r2
    14b4:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
    14b8:	86048505 	strhi	r8, [r4], -r5, lsl #10
    14bc:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    14c0:	300e4101 	andcc	r4, lr, r1, lsl #2
    14c4:	00070d41 	andeq	r0, r7, r1, asr #26
    14c8:	00000020 	andeq	r0, r0, r0, lsr #32
    14cc:	0000097c 	andeq	r0, r0, ip, ror r9
    14d0:	2000340e 	andcs	r3, r0, lr, lsl #8
    14d4:	000000d6 	ldrdeq	r0, [r0], -r6
    14d8:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
    14dc:	86048505 	strhi	r8, [r4], -r5, lsl #10
    14e0:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    14e4:	300e4101 	andcc	r4, lr, r1, lsl #2
    14e8:	00070d41 	andeq	r0, r7, r1, asr #26
    14ec:	00000020 	andeq	r0, r0, r0, lsr #32
    14f0:	0000097c 	andeq	r0, r0, ip, ror r9
    14f4:	200034e4 	andcs	r3, r0, r4, ror #9
    14f8:	000000d4 	ldrdeq	r0, [r0], -r4
    14fc:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
    1500:	86048505 	strhi	r8, [r4], -r5, lsl #10
    1504:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    1508:	300e4101 	andcc	r4, lr, r1, lsl #2
    150c:	00070d41 	andeq	r0, r7, r1, asr #26
    1510:	00000020 	andeq	r0, r0, r0, lsr #32
    1514:	0000097c 	andeq	r0, r0, ip, ror r9
    1518:	200035b8 			; <UNDEFINED> instruction: 0x200035b8
    151c:	000000e0 	andeq	r0, r0, r0, ror #1
    1520:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
    1524:	86048505 	strhi	r8, [r4], -r5, lsl #10
    1528:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    152c:	300e4101 	andcc	r4, lr, r1, lsl #2
    1530:	00070d41 	andeq	r0, r7, r1, asr #26
    1534:	0000000c 	andeq	r0, r0, ip
    1538:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    153c:	7c010001 	stcvc	0, cr0, [r1], {1}
    1540:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1544:	0000000c 	andeq	r0, r0, ip
    1548:	00001534 	andeq	r1, r0, r4, lsr r5
    154c:	20003699 	mulcs	r0, r9, r6
    1550:	0000010a 	andeq	r0, r0, sl, lsl #2
    1554:	0000000c 	andeq	r0, r0, ip
    1558:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    155c:	7c020001 	stcvc	0, cr0, [r2], {1}
    1560:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1564:	00000014 	andeq	r0, r0, r4, lsl r0
    1568:	00001554 	andeq	r1, r0, r4, asr r5
    156c:	200037b0 			; <UNDEFINED> instruction: 0x200037b0
    1570:	00000030 	andeq	r0, r0, r0, lsr r0
    1574:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
    1578:	00018e02 	andeq	r8, r1, r2, lsl #28
    157c:	00000014 	andeq	r0, r0, r4, lsl r0
    1580:	00001554 	andeq	r1, r0, r4, asr r5
    1584:	200037e0 	andcs	r3, r0, r0, ror #15
    1588:	00000008 	andeq	r0, r0, r8
    158c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    1590:	00018e02 	andeq	r8, r1, r2, lsl #28
    1594:	0000000c 	andeq	r0, r0, ip
    1598:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    159c:	7c020001 	stcvc	0, cr0, [r2], {1}
    15a0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    15a4:	0000001c 	andeq	r0, r0, ip, lsl r0
    15a8:	00001594 	muleq	r0, r4, r5
    15ac:	200037e8 	andcs	r3, r0, r8, ror #15
    15b0:	0000006c 	andeq	r0, r0, ip, rrx
    15b4:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
    15b8:	86048505 	strhi	r8, [r4], -r5, lsl #10
    15bc:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    15c0:	480e4201 	stmdami	lr, {r0, r9, lr}
    15c4:	00000014 	andeq	r0, r0, r4, lsl r0
    15c8:	00001594 	muleq	r0, r4, r5
    15cc:	20003854 	andcs	r3, r0, r4, asr r8
    15d0:	00000008 	andeq	r0, r0, r8
    15d4:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    15d8:	00018e02 	andeq	r8, r1, r2, lsl #28
    15dc:	0000000c 	andeq	r0, r0, ip
    15e0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    15e4:	7c020001 	stcvc	0, cr0, [r2], {1}
    15e8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    15ec:	00000014 	andeq	r0, r0, r4, lsl r0
    15f0:	000015dc 	ldrdeq	r1, [r0], -ip
    15f4:	2000385c 	andcs	r3, r0, ip, asr r8
    15f8:	00000012 	andeq	r0, r0, r2, lsl r0
    15fc:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
    1600:	00018e02 	andeq	r8, r1, r2, lsl #28

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000d0c 	andcs	r0, r0, ip, lsl #26
   4:	20000ef8 	strdcs	r0, [r0], -r8
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...
