
Debug/door:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:


__attribute__((naked)) __attribute__((section (".start_section")) )
void startup ( void )
{
__asm__ volatile(" LDR R0,=0x2001C000\n");		/* set stack */
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <startup+0xc>)
__asm__ volatile(" MOV SP,R0\n");
20000002:	4685      	mov	sp, r0
__asm__ volatile(" BL main\n");					/* call main */
20000004:	f000 f9de 	bl	200003c4 <main>
__asm__ volatile(".L1: B .L1\n");				/* never return */
20000008:	e7fe      	b.n	20000008 <startup+0x8>
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <GPIOInit>:


#define NumberDoors 2
Door doors[NumberDoors];

void GPIOInit(void){
20000010:	b580      	push	{r7, lr}
20000012:	b082      	sub	sp, #8
20000014:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIOConfig;
	GPIO_StructInit(&GPIOConfig);
20000016:	003b      	movs	r3, r7
20000018:	0018      	movs	r0, r3
2000001a:	f000 fb2a 	bl	20000672 <GPIO_StructInit>
	
	GPIOConfig.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_4;
2000001e:	003b      	movs	r3, r7
20000020:	2211      	movs	r2, #17
20000022:	601a      	str	r2, [r3, #0]
	GPIOConfig.GPIO_Mode = GPIO_Mode_IN;
20000024:	003b      	movs	r3, r7
20000026:	2200      	movs	r2, #0
20000028:	711a      	strb	r2, [r3, #4]
	GPIOConfig.GPIO_PuPd = GPIO_PuPd_DOWN;
2000002a:	003b      	movs	r3, r7
2000002c:	2202      	movs	r2, #2
2000002e:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOD,&GPIOConfig);
20000030:	003b      	movs	r3, r7
20000032:	4a0c      	ldr	r2, [pc, #48]	; (20000064 <GPIOInit+0x54>)
20000034:	0019      	movs	r1, r3
20000036:	0010      	movs	r0, r2
20000038:	f000 fa8e 	bl	20000558 <GPIO_Init>
	
	GPIOConfig.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_5 | GPIO_Pin_6 | GPIO_Pin_7;
2000003c:	003b      	movs	r3, r7
2000003e:	22ee      	movs	r2, #238	; 0xee
20000040:	601a      	str	r2, [r3, #0]
	GPIOConfig.GPIO_Mode = GPIO_Mode_OUT;
20000042:	003b      	movs	r3, r7
20000044:	2201      	movs	r2, #1
20000046:	711a      	strb	r2, [r3, #4]
	GPIOConfig.GPIO_PuPd = GPIO_PuPd_NOPULL;
20000048:	003b      	movs	r3, r7
2000004a:	2200      	movs	r2, #0
2000004c:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOD,&GPIOConfig);	
2000004e:	003b      	movs	r3, r7
20000050:	4a04      	ldr	r2, [pc, #16]	; (20000064 <GPIOInit+0x54>)
20000052:	0019      	movs	r1, r3
20000054:	0010      	movs	r0, r2
20000056:	f000 fa7f 	bl	20000558 <GPIO_Init>
}
2000005a:	46c0      	nop			; (mov r8, r8)
2000005c:	46bd      	mov	sp, r7
2000005e:	b002      	add	sp, #8
20000060:	bd80      	pop	{r7, pc}
20000062:	46c0      	nop			; (mov r8, r8)
20000064:	40020c00 	andmi	r0, r2, r0, lsl #24

20000068 <CreateDoors>:
 
void CreateDoors (void){
20000068:	b590      	push	{r4, r7, lr}
2000006a:	b089      	sub	sp, #36	; 0x24
2000006c:	af00      	add	r7, sp, #0
	for (int i = 0; i < NumberDoors; i++){
2000006e:	2300      	movs	r3, #0
20000070:	61fb      	str	r3, [r7, #28]
20000072:	e041      	b.n	200000f8 <CreateDoors+0x90>
		Door door = {
			i+1,
20000074:	69fb      	ldr	r3, [r7, #28]
20000076:	1c5a      	adds	r2, r3, #1
		Door door = {
20000078:	1d3b      	adds	r3, r7, #4
2000007a:	601a      	str	r2, [r3, #0]
			1 << (4 * i),
2000007c:	69fb      	ldr	r3, [r7, #28]
2000007e:	009b      	lsls	r3, r3, #2
20000080:	2201      	movs	r2, #1
20000082:	409a      	lsls	r2, r3
20000084:	0013      	movs	r3, r2
		Door door = {
20000086:	b29a      	uxth	r2, r3
20000088:	1d3b      	adds	r3, r7, #4
2000008a:	809a      	strh	r2, [r3, #4]
			1 << ((4 * i) + 1),
2000008c:	69fb      	ldr	r3, [r7, #28]
2000008e:	009b      	lsls	r3, r3, #2
20000090:	3301      	adds	r3, #1
20000092:	2201      	movs	r2, #1
20000094:	409a      	lsls	r2, r3
20000096:	0013      	movs	r3, r2
		Door door = {
20000098:	b29a      	uxth	r2, r3
2000009a:	1d3b      	adds	r3, r7, #4
2000009c:	80da      	strh	r2, [r3, #6]
			1 << ((4 * i) + 2),
2000009e:	69fb      	ldr	r3, [r7, #28]
200000a0:	009b      	lsls	r3, r3, #2
200000a2:	3302      	adds	r3, #2
200000a4:	2201      	movs	r2, #1
200000a6:	409a      	lsls	r2, r3
200000a8:	0013      	movs	r3, r2
		Door door = {
200000aa:	b29a      	uxth	r2, r3
200000ac:	1d3b      	adds	r3, r7, #4
200000ae:	811a      	strh	r2, [r3, #8]
			1 << ((4 * i )+ 3),
200000b0:	69fb      	ldr	r3, [r7, #28]
200000b2:	009b      	lsls	r3, r3, #2
200000b4:	3303      	adds	r3, #3
200000b6:	2201      	movs	r2, #1
200000b8:	409a      	lsls	r2, r3
200000ba:	0013      	movs	r3, r2
		Door door = {
200000bc:	b29a      	uxth	r2, r3
200000be:	1d3b      	adds	r3, r7, #4
200000c0:	815a      	strh	r2, [r3, #10]
200000c2:	1d3b      	adds	r3, r7, #4
200000c4:	2200      	movs	r2, #0
200000c6:	731a      	strb	r2, [r3, #12]
200000c8:	1d3b      	adds	r3, r7, #4
200000ca:	2200      	movs	r2, #0
200000cc:	735a      	strb	r2, [r3, #13]
200000ce:	1d3b      	adds	r3, r7, #4
200000d0:	2204      	movs	r2, #4
200000d2:	611a      	str	r2, [r3, #16]
200000d4:	1d3b      	adds	r3, r7, #4
200000d6:	2200      	movs	r2, #0
200000d8:	615a      	str	r2, [r3, #20]
			0,
			0,
			4,
			0
		};
		doors[i] = door;
200000da:	490b      	ldr	r1, [pc, #44]	; (20000108 <CreateDoors+0xa0>)
200000dc:	69fa      	ldr	r2, [r7, #28]
200000de:	0013      	movs	r3, r2
200000e0:	005b      	lsls	r3, r3, #1
200000e2:	189b      	adds	r3, r3, r2
200000e4:	00db      	lsls	r3, r3, #3
200000e6:	1d3a      	adds	r2, r7, #4
200000e8:	18cb      	adds	r3, r1, r3
200000ea:	ca13      	ldmia	r2!, {r0, r1, r4}
200000ec:	c313      	stmia	r3!, {r0, r1, r4}
200000ee:	ca13      	ldmia	r2!, {r0, r1, r4}
200000f0:	c313      	stmia	r3!, {r0, r1, r4}
	for (int i = 0; i < NumberDoors; i++){
200000f2:	69fb      	ldr	r3, [r7, #28]
200000f4:	3301      	adds	r3, #1
200000f6:	61fb      	str	r3, [r7, #28]
200000f8:	69fb      	ldr	r3, [r7, #28]
200000fa:	2b01      	cmp	r3, #1
200000fc:	ddba      	ble.n	20000074 <CreateDoors+0xc>
	} 
}
200000fe:	46c0      	nop			; (mov r8, r8)
20000100:	46c0      	nop			; (mov r8, r8)
20000102:	46bd      	mov	sp, r7
20000104:	b009      	add	sp, #36	; 0x24
20000106:	bd90      	pop	{r4, r7, pc}
20000108:	20003f08 	andcs	r3, r0, r8, lsl #30

2000010c <check_switch>:

void check_switch(void){
2000010c:	b580      	push	{r7, lr}
2000010e:	b082      	sub	sp, #8
20000110:	af00      	add	r7, sp, #0
	for (int i = 0; i < NumberDoors ; i++){
20000112:	2300      	movs	r3, #0
20000114:	607b      	str	r3, [r7, #4]
20000116:	e065      	b.n	200001e4 <check_switch+0xd8>
		if (!(GPIO_ReadInputDataBit(GPIOD, doors[i].Switch))){
20000118:	4936      	ldr	r1, [pc, #216]	; (200001f4 <check_switch+0xe8>)
2000011a:	687a      	ldr	r2, [r7, #4]
2000011c:	0013      	movs	r3, r2
2000011e:	005b      	lsls	r3, r3, #1
20000120:	189b      	adds	r3, r3, r2
20000122:	00db      	lsls	r3, r3, #3
20000124:	18cb      	adds	r3, r1, r3
20000126:	3304      	adds	r3, #4
20000128:	881b      	ldrh	r3, [r3, #0]
2000012a:	4a33      	ldr	r2, [pc, #204]	; (200001f8 <check_switch+0xec>)
2000012c:	0019      	movs	r1, r3
2000012e:	0010      	movs	r0, r2
20000130:	f000 fadb 	bl	200006ea <GPIO_ReadInputDataBit>
20000134:	1e03      	subs	r3, r0, #0
20000136:	d118      	bne.n	2000016a <check_switch+0x5e>
			doors[i].Status_Lokal_alarm = 1;
20000138:	492e      	ldr	r1, [pc, #184]	; (200001f4 <check_switch+0xe8>)
2000013a:	687a      	ldr	r2, [r7, #4]
2000013c:	0013      	movs	r3, r2
2000013e:	005b      	lsls	r3, r3, #1
20000140:	189b      	adds	r3, r3, r2
20000142:	00db      	lsls	r3, r3, #3
20000144:	18cb      	adds	r3, r1, r3
20000146:	330d      	adds	r3, #13
20000148:	2201      	movs	r2, #1
2000014a:	701a      	strb	r2, [r3, #0]
			GPIO_ResetBits(GPIOD, doors[i].Closed);
2000014c:	4929      	ldr	r1, [pc, #164]	; (200001f4 <check_switch+0xe8>)
2000014e:	687a      	ldr	r2, [r7, #4]
20000150:	0013      	movs	r3, r2
20000152:	005b      	lsls	r3, r3, #1
20000154:	189b      	adds	r3, r3, r2
20000156:	00db      	lsls	r3, r3, #3
20000158:	18cb      	adds	r3, r1, r3
2000015a:	3306      	adds	r3, #6
2000015c:	881b      	ldrh	r3, [r3, #0]
2000015e:	4a26      	ldr	r2, [pc, #152]	; (200001f8 <check_switch+0xec>)
20000160:	0019      	movs	r1, r3
20000162:	0010      	movs	r0, r2
20000164:	f000 fb26 	bl	200007b4 <GPIO_ResetBits>
20000168:	e039      	b.n	200001de <check_switch+0xd2>
		}else{
			doors[i].Status_Lokal_alarm = 0;
2000016a:	4922      	ldr	r1, [pc, #136]	; (200001f4 <check_switch+0xe8>)
2000016c:	687a      	ldr	r2, [r7, #4]
2000016e:	0013      	movs	r3, r2
20000170:	005b      	lsls	r3, r3, #1
20000172:	189b      	adds	r3, r3, r2
20000174:	00db      	lsls	r3, r3, #3
20000176:	18cb      	adds	r3, r1, r3
20000178:	330d      	adds	r3, #13
2000017a:	2200      	movs	r2, #0
2000017c:	701a      	strb	r2, [r3, #0]
			doors[i].Status_Central_alarm = 0;
2000017e:	491d      	ldr	r1, [pc, #116]	; (200001f4 <check_switch+0xe8>)
20000180:	687a      	ldr	r2, [r7, #4]
20000182:	0013      	movs	r3, r2
20000184:	005b      	lsls	r3, r3, #1
20000186:	189b      	adds	r3, r3, r2
20000188:	00db      	lsls	r3, r3, #3
2000018a:	18cb      	adds	r3, r1, r3
2000018c:	330c      	adds	r3, #12
2000018e:	2200      	movs	r2, #0
20000190:	701a      	strb	r2, [r3, #0]
			doors[i].Timer = 0;
20000192:	4918      	ldr	r1, [pc, #96]	; (200001f4 <check_switch+0xe8>)
20000194:	687a      	ldr	r2, [r7, #4]
20000196:	0013      	movs	r3, r2
20000198:	005b      	lsls	r3, r3, #1
2000019a:	189b      	adds	r3, r3, r2
2000019c:	00db      	lsls	r3, r3, #3
2000019e:	18cb      	adds	r3, r1, r3
200001a0:	3314      	adds	r3, #20
200001a2:	2200      	movs	r2, #0
200001a4:	601a      	str	r2, [r3, #0]
			GPIO_SetBits(GPIOD, doors[i].Closed);
200001a6:	4913      	ldr	r1, [pc, #76]	; (200001f4 <check_switch+0xe8>)
200001a8:	687a      	ldr	r2, [r7, #4]
200001aa:	0013      	movs	r3, r2
200001ac:	005b      	lsls	r3, r3, #1
200001ae:	189b      	adds	r3, r3, r2
200001b0:	00db      	lsls	r3, r3, #3
200001b2:	18cb      	adds	r3, r1, r3
200001b4:	3306      	adds	r3, #6
200001b6:	881b      	ldrh	r3, [r3, #0]
200001b8:	4a0f      	ldr	r2, [pc, #60]	; (200001f8 <check_switch+0xec>)
200001ba:	0019      	movs	r1, r3
200001bc:	0010      	movs	r0, r2
200001be:	f000 faea 	bl	20000796 <GPIO_SetBits>
			GPIO_ResetBits(GPIOD, doors[i].Local_alarm);
200001c2:	490c      	ldr	r1, [pc, #48]	; (200001f4 <check_switch+0xe8>)
200001c4:	687a      	ldr	r2, [r7, #4]
200001c6:	0013      	movs	r3, r2
200001c8:	005b      	lsls	r3, r3, #1
200001ca:	189b      	adds	r3, r3, r2
200001cc:	00db      	lsls	r3, r3, #3
200001ce:	18cb      	adds	r3, r1, r3
200001d0:	3308      	adds	r3, #8
200001d2:	881b      	ldrh	r3, [r3, #0]
200001d4:	4a08      	ldr	r2, [pc, #32]	; (200001f8 <check_switch+0xec>)
200001d6:	0019      	movs	r1, r3
200001d8:	0010      	movs	r0, r2
200001da:	f000 faeb 	bl	200007b4 <GPIO_ResetBits>
	for (int i = 0; i < NumberDoors ; i++){
200001de:	687b      	ldr	r3, [r7, #4]
200001e0:	3301      	adds	r3, #1
200001e2:	607b      	str	r3, [r7, #4]
200001e4:	687b      	ldr	r3, [r7, #4]
200001e6:	2b01      	cmp	r3, #1
200001e8:	dd96      	ble.n	20000118 <check_switch+0xc>
		}
		
	}
}
200001ea:	46c0      	nop			; (mov r8, r8)
200001ec:	46c0      	nop			; (mov r8, r8)
200001ee:	46bd      	mov	sp, r7
200001f0:	b002      	add	sp, #8
200001f2:	bd80      	pop	{r7, pc}
200001f4:	20003f08 	andcs	r3, r0, r8, lsl #30
200001f8:	40020c00 	andmi	r0, r2, r0, lsl #24

200001fc <TIM2_irq_handler>:
	}
	
}
 */

void TIM2_irq_handler(void){
200001fc:	b580      	push	{r7, lr}
200001fe:	b082      	sub	sp, #8
20000200:	af00      	add	r7, sp, #0
	print("\nirq");
20000202:	4b45      	ldr	r3, [pc, #276]	; (20000318 <TIM2_irq_handler+0x11c>)
20000204:	0018      	movs	r0, r3
20000206:	f002 ff41 	bl	2000308c <print>
	for (int i = 0 ; i< NumberDoors ; i++){
2000020a:	2300      	movs	r3, #0
2000020c:	607b      	str	r3, [r7, #4]
2000020e:	e075      	b.n	200002fc <TIM2_irq_handler+0x100>
		if ( doors[i].Status_Lokal_alarm | doors[i].Status_Central_alarm){
20000210:	4942      	ldr	r1, [pc, #264]	; (2000031c <TIM2_irq_handler+0x120>)
20000212:	687a      	ldr	r2, [r7, #4]
20000214:	0013      	movs	r3, r2
20000216:	005b      	lsls	r3, r3, #1
20000218:	189b      	adds	r3, r3, r2
2000021a:	00db      	lsls	r3, r3, #3
2000021c:	18cb      	adds	r3, r1, r3
2000021e:	330d      	adds	r3, #13
20000220:	7819      	ldrb	r1, [r3, #0]
20000222:	483e      	ldr	r0, [pc, #248]	; (2000031c <TIM2_irq_handler+0x120>)
20000224:	687a      	ldr	r2, [r7, #4]
20000226:	0013      	movs	r3, r2
20000228:	005b      	lsls	r3, r3, #1
2000022a:	189b      	adds	r3, r3, r2
2000022c:	00db      	lsls	r3, r3, #3
2000022e:	18c3      	adds	r3, r0, r3
20000230:	330c      	adds	r3, #12
20000232:	781b      	ldrb	r3, [r3, #0]
20000234:	430b      	orrs	r3, r1
20000236:	b2db      	uxtb	r3, r3
20000238:	2b00      	cmp	r3, #0
2000023a:	d05c      	beq.n	200002f6 <TIM2_irq_handler+0xfa>
			doors[i].Timer++;
2000023c:	4937      	ldr	r1, [pc, #220]	; (2000031c <TIM2_irq_handler+0x120>)
2000023e:	687a      	ldr	r2, [r7, #4]
20000240:	0013      	movs	r3, r2
20000242:	005b      	lsls	r3, r3, #1
20000244:	189b      	adds	r3, r3, r2
20000246:	00db      	lsls	r3, r3, #3
20000248:	18cb      	adds	r3, r1, r3
2000024a:	3314      	adds	r3, #20
2000024c:	681b      	ldr	r3, [r3, #0]
2000024e:	1c59      	adds	r1, r3, #1
20000250:	4832      	ldr	r0, [pc, #200]	; (2000031c <TIM2_irq_handler+0x120>)
20000252:	687a      	ldr	r2, [r7, #4]
20000254:	0013      	movs	r3, r2
20000256:	005b      	lsls	r3, r3, #1
20000258:	189b      	adds	r3, r3, r2
2000025a:	00db      	lsls	r3, r3, #3
2000025c:	18c3      	adds	r3, r0, r3
2000025e:	3314      	adds	r3, #20
20000260:	6019      	str	r1, [r3, #0]
			print("\nIncremnt");
20000262:	4b2f      	ldr	r3, [pc, #188]	; (20000320 <TIM2_irq_handler+0x124>)
20000264:	0018      	movs	r0, r3
20000266:	f002 ff11 	bl	2000308c <print>
			if (doors[i].Timer >= 2 * doors[i].Time_threshold){
2000026a:	492c      	ldr	r1, [pc, #176]	; (2000031c <TIM2_irq_handler+0x120>)
2000026c:	687a      	ldr	r2, [r7, #4]
2000026e:	0013      	movs	r3, r2
20000270:	005b      	lsls	r3, r3, #1
20000272:	189b      	adds	r3, r3, r2
20000274:	00db      	lsls	r3, r3, #3
20000276:	18cb      	adds	r3, r1, r3
20000278:	3314      	adds	r3, #20
2000027a:	6819      	ldr	r1, [r3, #0]
2000027c:	4827      	ldr	r0, [pc, #156]	; (2000031c <TIM2_irq_handler+0x120>)
2000027e:	687a      	ldr	r2, [r7, #4]
20000280:	0013      	movs	r3, r2
20000282:	005b      	lsls	r3, r3, #1
20000284:	189b      	adds	r3, r3, r2
20000286:	00db      	lsls	r3, r3, #3
20000288:	18c3      	adds	r3, r0, r3
2000028a:	3310      	adds	r3, #16
2000028c:	681b      	ldr	r3, [r3, #0]
2000028e:	005b      	lsls	r3, r3, #1
20000290:	4299      	cmp	r1, r3
20000292:	db04      	blt.n	2000029e <TIM2_irq_handler+0xa2>
			print("\nCentral Alarm");
20000294:	4b23      	ldr	r3, [pc, #140]	; (20000324 <TIM2_irq_handler+0x128>)
20000296:	0018      	movs	r0, r3
20000298:	f002 fef8 	bl	2000308c <print>
2000029c:	e02b      	b.n	200002f6 <TIM2_irq_handler+0xfa>
			}else if (doors[i].Timer >= doors[i].Time_threshold){
2000029e:	491f      	ldr	r1, [pc, #124]	; (2000031c <TIM2_irq_handler+0x120>)
200002a0:	687a      	ldr	r2, [r7, #4]
200002a2:	0013      	movs	r3, r2
200002a4:	005b      	lsls	r3, r3, #1
200002a6:	189b      	adds	r3, r3, r2
200002a8:	00db      	lsls	r3, r3, #3
200002aa:	18cb      	adds	r3, r1, r3
200002ac:	3314      	adds	r3, #20
200002ae:	6819      	ldr	r1, [r3, #0]
200002b0:	481a      	ldr	r0, [pc, #104]	; (2000031c <TIM2_irq_handler+0x120>)
200002b2:	687a      	ldr	r2, [r7, #4]
200002b4:	0013      	movs	r3, r2
200002b6:	005b      	lsls	r3, r3, #1
200002b8:	189b      	adds	r3, r3, r2
200002ba:	00db      	lsls	r3, r3, #3
200002bc:	18c3      	adds	r3, r0, r3
200002be:	3310      	adds	r3, #16
200002c0:	681b      	ldr	r3, [r3, #0]
200002c2:	4299      	cmp	r1, r3
200002c4:	db17      	blt.n	200002f6 <TIM2_irq_handler+0xfa>
			GPIO_SetBits(GPIOD, doors[i].Local_alarm);
200002c6:	4915      	ldr	r1, [pc, #84]	; (2000031c <TIM2_irq_handler+0x120>)
200002c8:	687a      	ldr	r2, [r7, #4]
200002ca:	0013      	movs	r3, r2
200002cc:	005b      	lsls	r3, r3, #1
200002ce:	189b      	adds	r3, r3, r2
200002d0:	00db      	lsls	r3, r3, #3
200002d2:	18cb      	adds	r3, r1, r3
200002d4:	3308      	adds	r3, #8
200002d6:	881b      	ldrh	r3, [r3, #0]
200002d8:	4a13      	ldr	r2, [pc, #76]	; (20000328 <TIM2_irq_handler+0x12c>)
200002da:	0019      	movs	r1, r3
200002dc:	0010      	movs	r0, r2
200002de:	f000 fa5a 	bl	20000796 <GPIO_SetBits>
			doors[i].Status_Central_alarm = 1;
200002e2:	490e      	ldr	r1, [pc, #56]	; (2000031c <TIM2_irq_handler+0x120>)
200002e4:	687a      	ldr	r2, [r7, #4]
200002e6:	0013      	movs	r3, r2
200002e8:	005b      	lsls	r3, r3, #1
200002ea:	189b      	adds	r3, r3, r2
200002ec:	00db      	lsls	r3, r3, #3
200002ee:	18cb      	adds	r3, r1, r3
200002f0:	330c      	adds	r3, #12
200002f2:	2201      	movs	r2, #1
200002f4:	701a      	strb	r2, [r3, #0]
	for (int i = 0 ; i< NumberDoors ; i++){
200002f6:	687b      	ldr	r3, [r7, #4]
200002f8:	3301      	adds	r3, #1
200002fa:	607b      	str	r3, [r7, #4]
200002fc:	687b      	ldr	r3, [r7, #4]
200002fe:	2b01      	cmp	r3, #1
20000300:	dd86      	ble.n	20000210 <TIM2_irq_handler+0x14>
			
		}
		}
	}
	
	TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
20000302:	2380      	movs	r3, #128	; 0x80
20000304:	05db      	lsls	r3, r3, #23
20000306:	2101      	movs	r1, #1
20000308:	0018      	movs	r0, r3
2000030a:	f002 f85f 	bl	200023cc <TIM_ClearITPendingBit>
}
2000030e:	46c0      	nop			; (mov r8, r8)
20000310:	46bd      	mov	sp, r7
20000312:	b002      	add	sp, #8
20000314:	bd80      	pop	{r7, pc}
20000316:	46c0      	nop			; (mov r8, r8)
20000318:	20003edc 	ldrdcs	r3, [r0], -ip
2000031c:	20003f08 	andcs	r3, r0, r8, lsl #30
20000320:	20003ee4 	andcs	r3, r0, r4, ror #29
20000324:	20003ef0 	strdcs	r3, [r0], -r0
20000328:	40020c00 	andmi	r0, r2, r0, lsl #24

2000032c <Tim_Init>:

void Tim_Init (void){
2000032c:	b580      	push	{r7, lr}
2000032e:	b084      	sub	sp, #16
20000330:	af00      	add	r7, sp, #0
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
20000332:	2101      	movs	r1, #1
20000334:	2001      	movs	r0, #1
20000336:	f003 faf5 	bl	20003924 <RCC_APB1PeriphClockCmd>
	*((int *) 0x2001C0B0) =TIM2_irq_handler;
2000033a:	4b1e      	ldr	r3, [pc, #120]	; (200003b4 <Tim_Init+0x88>)
2000033c:	4a1e      	ldr	r2, [pc, #120]	; (200003b8 <Tim_Init+0x8c>)
2000033e:	601a      	str	r2, [r3, #0]
	TIM_TimeBaseInitTypeDef TIM_timer;
	TIM_timer.TIM_Prescaler = (42000 - 1);
20000340:	1d3b      	adds	r3, r7, #4
20000342:	4a1e      	ldr	r2, [pc, #120]	; (200003bc <Tim_Init+0x90>)
20000344:	801a      	strh	r2, [r3, #0]
	TIM_timer.TIM_Period = (2000-1);
20000346:	1d3b      	adds	r3, r7, #4
20000348:	4a1d      	ldr	r2, [pc, #116]	; (200003c0 <Tim_Init+0x94>)
2000034a:	605a      	str	r2, [r3, #4]
	TIM_timer.TIM_ClockDivision = TIM_CKD_DIV1;
2000034c:	1d3b      	adds	r3, r7, #4
2000034e:	2200      	movs	r2, #0
20000350:	811a      	strh	r2, [r3, #8]
	TIM_timer.TIM_CounterMode = TIM_CounterMode_Up;
20000352:	1d3b      	adds	r3, r7, #4
20000354:	2200      	movs	r2, #0
20000356:	805a      	strh	r2, [r3, #2]
	TIM_TimeBaseInit(TIM2, &TIM_timer);
20000358:	1d3a      	adds	r2, r7, #4
2000035a:	2380      	movs	r3, #128	; 0x80
2000035c:	05db      	lsls	r3, r3, #23
2000035e:	0011      	movs	r1, r2
20000360:	0018      	movs	r0, r3
20000362:	f000 fc63 	bl	20000c2c <TIM_TimeBaseInit>
	TIM_Cmd(TIM2, ENABLE);
20000366:	2380      	movs	r3, #128	; 0x80
20000368:	05db      	lsls	r3, r3, #23
2000036a:	2101      	movs	r1, #1
2000036c:	0018      	movs	r0, r3
2000036e:	f000 fdf5 	bl	20000f5c <TIM_Cmd>
	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);
20000372:	2380      	movs	r3, #128	; 0x80
20000374:	05db      	lsls	r3, r3, #23
20000376:	2201      	movs	r2, #1
20000378:	2101      	movs	r1, #1
2000037a:	0018      	movs	r0, r3
2000037c:	f001 ff80 	bl	20002280 <TIM_ITConfig>
	
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
20000380:	23a0      	movs	r3, #160	; 0xa0
20000382:	00db      	lsls	r3, r3, #3
20000384:	0018      	movs	r0, r3
20000386:	f002 fd59 	bl	20002e3c <NVIC_PriorityGroupConfig>
	NVIC_InitTypeDef nvic_init;
	nvic_init.NVIC_IRQChannel = TIM2_IRQn;
2000038a:	003b      	movs	r3, r7
2000038c:	221c      	movs	r2, #28
2000038e:	701a      	strb	r2, [r3, #0]
	nvic_init.NVIC_IRQChannelPreemptionPriority = 0;
20000390:	003b      	movs	r3, r7
20000392:	2200      	movs	r2, #0
20000394:	705a      	strb	r2, [r3, #1]
	nvic_init.NVIC_IRQChannelSubPriority = 0;
20000396:	003b      	movs	r3, r7
20000398:	2200      	movs	r2, #0
2000039a:	709a      	strb	r2, [r3, #2]
	nvic_init.NVIC_IRQChannelCmd = ENABLE;
2000039c:	003b      	movs	r3, r7
2000039e:	2201      	movs	r2, #1
200003a0:	70da      	strb	r2, [r3, #3]
	NVIC_Init(&nvic_init);
200003a2:	003b      	movs	r3, r7
200003a4:	0018      	movs	r0, r3
200003a6:	f002 fd5b 	bl	20002e60 <NVIC_Init>
	
	//*((void (**) (void)) 0x2001C0B0) =TIM2_irq_handler;
}
200003aa:	46c0      	nop			; (mov r8, r8)
200003ac:	46bd      	mov	sp, r7
200003ae:	b004      	add	sp, #16
200003b0:	bd80      	pop	{r7, pc}
200003b2:	46c0      	nop			; (mov r8, r8)
200003b4:	2001c0b0 	strhcs	ip, [r1], -r0
200003b8:	200001fd 	strdcs	r0, [r0], -sp
200003bc:	ffffa40f 			; <UNDEFINED> instruction: 0xffffa40f
200003c0:	000007cf 	andeq	r0, r0, pc, asr #15

200003c4 <main>:
void main(void)
{
200003c4:	b580      	push	{r7, lr}
200003c6:	af00      	add	r7, sp, #0
	GPIOInit();
200003c8:	f7ff fe22 	bl	20000010 <GPIOInit>
	CreateDoors();
200003cc:	f7ff fe4c 	bl	20000068 <CreateDoors>
	Tim_Init();
200003d0:	f7ff ffac 	bl	2000032c <Tim_Init>
	print("wlecome");
200003d4:	4b03      	ldr	r3, [pc, #12]	; (200003e4 <main+0x20>)
200003d6:	0018      	movs	r0, r3
200003d8:	f002 fe58 	bl	2000308c <print>
	//
	while (1) {
		check_switch();
200003dc:	f7ff fe96 	bl	2000010c <check_switch>
200003e0:	e7fc      	b.n	200003dc <main+0x18>
200003e2:	46c0      	nop			; (mov r8, r8)
200003e4:	20003f00 	andcs	r3, r0, r0, lsl #30

200003e8 <GPIO_DeInit>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices.  
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
200003e8:	b580      	push	{r7, lr}
200003ea:	b082      	sub	sp, #8
200003ec:	af00      	add	r7, sp, #0
200003ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
200003f0:	687b      	ldr	r3, [r7, #4]
200003f2:	4a4e      	ldr	r2, [pc, #312]	; (2000052c <GPIO_DeInit+0x144>)
200003f4:	4293      	cmp	r3, r2
200003f6:	d108      	bne.n	2000040a <GPIO_DeInit+0x22>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
200003f8:	2101      	movs	r1, #1
200003fa:	2001      	movs	r0, #1
200003fc:	f003 fad2 	bl	200039a4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
20000400:	2100      	movs	r1, #0
20000402:	2001      	movs	r0, #1
20000404:	f003 face 	bl	200039a4 <RCC_AHB1PeriphResetCmd>
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
20000408:	e08c      	b.n	20000524 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOB)
2000040a:	687b      	ldr	r3, [r7, #4]
2000040c:	4a48      	ldr	r2, [pc, #288]	; (20000530 <GPIO_DeInit+0x148>)
2000040e:	4293      	cmp	r3, r2
20000410:	d108      	bne.n	20000424 <GPIO_DeInit+0x3c>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
20000412:	2101      	movs	r1, #1
20000414:	2002      	movs	r0, #2
20000416:	f003 fac5 	bl	200039a4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
2000041a:	2100      	movs	r1, #0
2000041c:	2002      	movs	r0, #2
2000041e:	f003 fac1 	bl	200039a4 <RCC_AHB1PeriphResetCmd>
}
20000422:	e07f      	b.n	20000524 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOC)
20000424:	687b      	ldr	r3, [r7, #4]
20000426:	4a43      	ldr	r2, [pc, #268]	; (20000534 <GPIO_DeInit+0x14c>)
20000428:	4293      	cmp	r3, r2
2000042a:	d108      	bne.n	2000043e <GPIO_DeInit+0x56>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
2000042c:	2101      	movs	r1, #1
2000042e:	2004      	movs	r0, #4
20000430:	f003 fab8 	bl	200039a4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
20000434:	2100      	movs	r1, #0
20000436:	2004      	movs	r0, #4
20000438:	f003 fab4 	bl	200039a4 <RCC_AHB1PeriphResetCmd>
}
2000043c:	e072      	b.n	20000524 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOD)
2000043e:	687b      	ldr	r3, [r7, #4]
20000440:	4a3d      	ldr	r2, [pc, #244]	; (20000538 <GPIO_DeInit+0x150>)
20000442:	4293      	cmp	r3, r2
20000444:	d108      	bne.n	20000458 <GPIO_DeInit+0x70>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
20000446:	2101      	movs	r1, #1
20000448:	2008      	movs	r0, #8
2000044a:	f003 faab 	bl	200039a4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
2000044e:	2100      	movs	r1, #0
20000450:	2008      	movs	r0, #8
20000452:	f003 faa7 	bl	200039a4 <RCC_AHB1PeriphResetCmd>
}
20000456:	e065      	b.n	20000524 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOE)
20000458:	687b      	ldr	r3, [r7, #4]
2000045a:	4a38      	ldr	r2, [pc, #224]	; (2000053c <GPIO_DeInit+0x154>)
2000045c:	4293      	cmp	r3, r2
2000045e:	d108      	bne.n	20000472 <GPIO_DeInit+0x8a>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
20000460:	2101      	movs	r1, #1
20000462:	2010      	movs	r0, #16
20000464:	f003 fa9e 	bl	200039a4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
20000468:	2100      	movs	r1, #0
2000046a:	2010      	movs	r0, #16
2000046c:	f003 fa9a 	bl	200039a4 <RCC_AHB1PeriphResetCmd>
}
20000470:	e058      	b.n	20000524 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOF)
20000472:	687b      	ldr	r3, [r7, #4]
20000474:	4a32      	ldr	r2, [pc, #200]	; (20000540 <GPIO_DeInit+0x158>)
20000476:	4293      	cmp	r3, r2
20000478:	d108      	bne.n	2000048c <GPIO_DeInit+0xa4>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
2000047a:	2101      	movs	r1, #1
2000047c:	2020      	movs	r0, #32
2000047e:	f003 fa91 	bl	200039a4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
20000482:	2100      	movs	r1, #0
20000484:	2020      	movs	r0, #32
20000486:	f003 fa8d 	bl	200039a4 <RCC_AHB1PeriphResetCmd>
}
2000048a:	e04b      	b.n	20000524 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOG)
2000048c:	687b      	ldr	r3, [r7, #4]
2000048e:	4a2d      	ldr	r2, [pc, #180]	; (20000544 <GPIO_DeInit+0x15c>)
20000490:	4293      	cmp	r3, r2
20000492:	d108      	bne.n	200004a6 <GPIO_DeInit+0xbe>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
20000494:	2101      	movs	r1, #1
20000496:	2040      	movs	r0, #64	; 0x40
20000498:	f003 fa84 	bl	200039a4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
2000049c:	2100      	movs	r1, #0
2000049e:	2040      	movs	r0, #64	; 0x40
200004a0:	f003 fa80 	bl	200039a4 <RCC_AHB1PeriphResetCmd>
}
200004a4:	e03e      	b.n	20000524 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOH)
200004a6:	687b      	ldr	r3, [r7, #4]
200004a8:	4a27      	ldr	r2, [pc, #156]	; (20000548 <GPIO_DeInit+0x160>)
200004aa:	4293      	cmp	r3, r2
200004ac:	d108      	bne.n	200004c0 <GPIO_DeInit+0xd8>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
200004ae:	2101      	movs	r1, #1
200004b0:	2080      	movs	r0, #128	; 0x80
200004b2:	f003 fa77 	bl	200039a4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
200004b6:	2100      	movs	r1, #0
200004b8:	2080      	movs	r0, #128	; 0x80
200004ba:	f003 fa73 	bl	200039a4 <RCC_AHB1PeriphResetCmd>
}
200004be:	e031      	b.n	20000524 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOI)
200004c0:	687b      	ldr	r3, [r7, #4]
200004c2:	4a22      	ldr	r2, [pc, #136]	; (2000054c <GPIO_DeInit+0x164>)
200004c4:	4293      	cmp	r3, r2
200004c6:	d10c      	bne.n	200004e2 <GPIO_DeInit+0xfa>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
200004c8:	2380      	movs	r3, #128	; 0x80
200004ca:	005b      	lsls	r3, r3, #1
200004cc:	2101      	movs	r1, #1
200004ce:	0018      	movs	r0, r3
200004d0:	f003 fa68 	bl	200039a4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
200004d4:	2380      	movs	r3, #128	; 0x80
200004d6:	005b      	lsls	r3, r3, #1
200004d8:	2100      	movs	r1, #0
200004da:	0018      	movs	r0, r3
200004dc:	f003 fa62 	bl	200039a4 <RCC_AHB1PeriphResetCmd>
}
200004e0:	e020      	b.n	20000524 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOJ)
200004e2:	687b      	ldr	r3, [r7, #4]
200004e4:	4a1a      	ldr	r2, [pc, #104]	; (20000550 <GPIO_DeInit+0x168>)
200004e6:	4293      	cmp	r3, r2
200004e8:	d10c      	bne.n	20000504 <GPIO_DeInit+0x11c>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, ENABLE);
200004ea:	2380      	movs	r3, #128	; 0x80
200004ec:	009b      	lsls	r3, r3, #2
200004ee:	2101      	movs	r1, #1
200004f0:	0018      	movs	r0, r3
200004f2:	f003 fa57 	bl	200039a4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, DISABLE);
200004f6:	2380      	movs	r3, #128	; 0x80
200004f8:	009b      	lsls	r3, r3, #2
200004fa:	2100      	movs	r1, #0
200004fc:	0018      	movs	r0, r3
200004fe:	f003 fa51 	bl	200039a4 <RCC_AHB1PeriphResetCmd>
}
20000502:	e00f      	b.n	20000524 <GPIO_DeInit+0x13c>
    if (GPIOx == GPIOK)
20000504:	687b      	ldr	r3, [r7, #4]
20000506:	4a13      	ldr	r2, [pc, #76]	; (20000554 <GPIO_DeInit+0x16c>)
20000508:	4293      	cmp	r3, r2
2000050a:	d10b      	bne.n	20000524 <GPIO_DeInit+0x13c>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
2000050c:	2380      	movs	r3, #128	; 0x80
2000050e:	00db      	lsls	r3, r3, #3
20000510:	2101      	movs	r1, #1
20000512:	0018      	movs	r0, r3
20000514:	f003 fa46 	bl	200039a4 <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
20000518:	2380      	movs	r3, #128	; 0x80
2000051a:	00db      	lsls	r3, r3, #3
2000051c:	2100      	movs	r1, #0
2000051e:	0018      	movs	r0, r3
20000520:	f003 fa40 	bl	200039a4 <RCC_AHB1PeriphResetCmd>
}
20000524:	46c0      	nop			; (mov r8, r8)
20000526:	46bd      	mov	sp, r7
20000528:	b002      	add	sp, #8
2000052a:	bd80      	pop	{r7, pc}
2000052c:	40020000 	andmi	r0, r2, r0
20000530:	40020400 	andmi	r0, r2, r0, lsl #8
20000534:	40020800 	andmi	r0, r2, r0, lsl #16
20000538:	40020c00 	andmi	r0, r2, r0, lsl #24
2000053c:	40021000 	andmi	r1, r2, r0
20000540:	40021400 	andmi	r1, r2, r0, lsl #8
20000544:	40021800 	andmi	r1, r2, r0, lsl #16
20000548:	40021c00 	andmi	r1, r2, r0, lsl #24
2000054c:	40022000 	andmi	r2, r2, r0
20000550:	40022400 	andmi	r2, r2, r0, lsl #8
20000554:	40022800 	andmi	r2, r2, r0, lsl #16

20000558 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
20000558:	b580      	push	{r7, lr}
2000055a:	b086      	sub	sp, #24
2000055c:	af00      	add	r7, sp, #0
2000055e:	6078      	str	r0, [r7, #4]
20000560:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
20000562:	2300      	movs	r3, #0
20000564:	617b      	str	r3, [r7, #20]
20000566:	2300      	movs	r3, #0
20000568:	613b      	str	r3, [r7, #16]
2000056a:	2300      	movs	r3, #0
2000056c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
2000056e:	2300      	movs	r3, #0
20000570:	617b      	str	r3, [r7, #20]
20000572:	e076      	b.n	20000662 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
20000574:	2201      	movs	r2, #1
20000576:	697b      	ldr	r3, [r7, #20]
20000578:	409a      	lsls	r2, r3
2000057a:	0013      	movs	r3, r2
2000057c:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
2000057e:	683b      	ldr	r3, [r7, #0]
20000580:	681a      	ldr	r2, [r3, #0]
20000582:	693b      	ldr	r3, [r7, #16]
20000584:	4013      	ands	r3, r2
20000586:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
20000588:	68fa      	ldr	r2, [r7, #12]
2000058a:	693b      	ldr	r3, [r7, #16]
2000058c:	429a      	cmp	r2, r3
2000058e:	d165      	bne.n	2000065c <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
20000590:	687b      	ldr	r3, [r7, #4]
20000592:	681b      	ldr	r3, [r3, #0]
20000594:	697a      	ldr	r2, [r7, #20]
20000596:	0052      	lsls	r2, r2, #1
20000598:	2103      	movs	r1, #3
2000059a:	4091      	lsls	r1, r2
2000059c:	000a      	movs	r2, r1
2000059e:	43d2      	mvns	r2, r2
200005a0:	401a      	ands	r2, r3
200005a2:	687b      	ldr	r3, [r7, #4]
200005a4:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
200005a6:	687b      	ldr	r3, [r7, #4]
200005a8:	681a      	ldr	r2, [r3, #0]
200005aa:	683b      	ldr	r3, [r7, #0]
200005ac:	791b      	ldrb	r3, [r3, #4]
200005ae:	0019      	movs	r1, r3
200005b0:	697b      	ldr	r3, [r7, #20]
200005b2:	005b      	lsls	r3, r3, #1
200005b4:	4099      	lsls	r1, r3
200005b6:	000b      	movs	r3, r1
200005b8:	431a      	orrs	r2, r3
200005ba:	687b      	ldr	r3, [r7, #4]
200005bc:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
200005be:	683b      	ldr	r3, [r7, #0]
200005c0:	791b      	ldrb	r3, [r3, #4]
200005c2:	2b01      	cmp	r3, #1
200005c4:	d003      	beq.n	200005ce <GPIO_Init+0x76>
200005c6:	683b      	ldr	r3, [r7, #0]
200005c8:	791b      	ldrb	r3, [r3, #4]
200005ca:	2b02      	cmp	r3, #2
200005cc:	d12e      	bne.n	2000062c <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
200005ce:	687b      	ldr	r3, [r7, #4]
200005d0:	689b      	ldr	r3, [r3, #8]
200005d2:	697a      	ldr	r2, [r7, #20]
200005d4:	0052      	lsls	r2, r2, #1
200005d6:	2103      	movs	r1, #3
200005d8:	4091      	lsls	r1, r2
200005da:	000a      	movs	r2, r1
200005dc:	43d2      	mvns	r2, r2
200005de:	401a      	ands	r2, r3
200005e0:	687b      	ldr	r3, [r7, #4]
200005e2:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
200005e4:	687b      	ldr	r3, [r7, #4]
200005e6:	689a      	ldr	r2, [r3, #8]
200005e8:	683b      	ldr	r3, [r7, #0]
200005ea:	795b      	ldrb	r3, [r3, #5]
200005ec:	0019      	movs	r1, r3
200005ee:	697b      	ldr	r3, [r7, #20]
200005f0:	005b      	lsls	r3, r3, #1
200005f2:	4099      	lsls	r1, r3
200005f4:	000b      	movs	r3, r1
200005f6:	431a      	orrs	r2, r3
200005f8:	687b      	ldr	r3, [r7, #4]
200005fa:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
200005fc:	687b      	ldr	r3, [r7, #4]
200005fe:	685b      	ldr	r3, [r3, #4]
20000600:	697a      	ldr	r2, [r7, #20]
20000602:	b292      	uxth	r2, r2
20000604:	0011      	movs	r1, r2
20000606:	2201      	movs	r2, #1
20000608:	408a      	lsls	r2, r1
2000060a:	43d2      	mvns	r2, r2
2000060c:	401a      	ands	r2, r3
2000060e:	687b      	ldr	r3, [r7, #4]
20000610:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
20000612:	687b      	ldr	r3, [r7, #4]
20000614:	685b      	ldr	r3, [r3, #4]
20000616:	683a      	ldr	r2, [r7, #0]
20000618:	7992      	ldrb	r2, [r2, #6]
2000061a:	0011      	movs	r1, r2
2000061c:	697a      	ldr	r2, [r7, #20]
2000061e:	b292      	uxth	r2, r2
20000620:	4091      	lsls	r1, r2
20000622:	000a      	movs	r2, r1
20000624:	b292      	uxth	r2, r2
20000626:	431a      	orrs	r2, r3
20000628:	687b      	ldr	r3, [r7, #4]
2000062a:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
2000062c:	687b      	ldr	r3, [r7, #4]
2000062e:	68db      	ldr	r3, [r3, #12]
20000630:	697a      	ldr	r2, [r7, #20]
20000632:	b292      	uxth	r2, r2
20000634:	0052      	lsls	r2, r2, #1
20000636:	2103      	movs	r1, #3
20000638:	4091      	lsls	r1, r2
2000063a:	000a      	movs	r2, r1
2000063c:	43d2      	mvns	r2, r2
2000063e:	401a      	ands	r2, r3
20000640:	687b      	ldr	r3, [r7, #4]
20000642:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
20000644:	687b      	ldr	r3, [r7, #4]
20000646:	68da      	ldr	r2, [r3, #12]
20000648:	683b      	ldr	r3, [r7, #0]
2000064a:	79db      	ldrb	r3, [r3, #7]
2000064c:	0019      	movs	r1, r3
2000064e:	697b      	ldr	r3, [r7, #20]
20000650:	005b      	lsls	r3, r3, #1
20000652:	4099      	lsls	r1, r3
20000654:	000b      	movs	r3, r1
20000656:	431a      	orrs	r2, r3
20000658:	687b      	ldr	r3, [r7, #4]
2000065a:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
2000065c:	697b      	ldr	r3, [r7, #20]
2000065e:	3301      	adds	r3, #1
20000660:	617b      	str	r3, [r7, #20]
20000662:	697b      	ldr	r3, [r7, #20]
20000664:	2b0f      	cmp	r3, #15
20000666:	d985      	bls.n	20000574 <GPIO_Init+0x1c>
    }
  }
}
20000668:	46c0      	nop			; (mov r8, r8)
2000066a:	46c0      	nop			; (mov r8, r8)
2000066c:	46bd      	mov	sp, r7
2000066e:	b006      	add	sp, #24
20000670:	bd80      	pop	{r7, pc}

20000672 <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
20000672:	b580      	push	{r7, lr}
20000674:	b082      	sub	sp, #8
20000676:	af00      	add	r7, sp, #0
20000678:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
2000067a:	687b      	ldr	r3, [r7, #4]
2000067c:	4a08      	ldr	r2, [pc, #32]	; (200006a0 <GPIO_StructInit+0x2e>)
2000067e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
20000680:	687b      	ldr	r3, [r7, #4]
20000682:	2200      	movs	r2, #0
20000684:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
20000686:	687b      	ldr	r3, [r7, #4]
20000688:	2200      	movs	r2, #0
2000068a:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
2000068c:	687b      	ldr	r3, [r7, #4]
2000068e:	2200      	movs	r2, #0
20000690:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
20000692:	687b      	ldr	r3, [r7, #4]
20000694:	2200      	movs	r2, #0
20000696:	71da      	strb	r2, [r3, #7]
}
20000698:	46c0      	nop			; (mov r8, r8)
2000069a:	46bd      	mov	sp, r7
2000069c:	b002      	add	sp, #8
2000069e:	bd80      	pop	{r7, pc}
200006a0:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>

200006a4 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
200006a4:	b580      	push	{r7, lr}
200006a6:	b084      	sub	sp, #16
200006a8:	af00      	add	r7, sp, #0
200006aa:	6078      	str	r0, [r7, #4]
200006ac:	000a      	movs	r2, r1
200006ae:	1cbb      	adds	r3, r7, #2
200006b0:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmp = 0x00010000;
200006b2:	2380      	movs	r3, #128	; 0x80
200006b4:	025b      	lsls	r3, r3, #9
200006b6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
200006b8:	1cbb      	adds	r3, r7, #2
200006ba:	881a      	ldrh	r2, [r3, #0]
200006bc:	68fb      	ldr	r3, [r7, #12]
200006be:	4313      	orrs	r3, r2
200006c0:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
200006c2:	68fa      	ldr	r2, [r7, #12]
200006c4:	687b      	ldr	r3, [r7, #4]
200006c6:	61da      	str	r2, [r3, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
200006c8:	1cbb      	adds	r3, r7, #2
200006ca:	881a      	ldrh	r2, [r3, #0]
200006cc:	687b      	ldr	r3, [r7, #4]
200006ce:	61da      	str	r2, [r3, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
200006d0:	68fa      	ldr	r2, [r7, #12]
200006d2:	687b      	ldr	r3, [r7, #4]
200006d4:	61da      	str	r2, [r3, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
200006d6:	687b      	ldr	r3, [r7, #4]
200006d8:	69db      	ldr	r3, [r3, #28]
200006da:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
200006dc:	687b      	ldr	r3, [r7, #4]
200006de:	69db      	ldr	r3, [r3, #28]
200006e0:	60fb      	str	r3, [r7, #12]
}
200006e2:	46c0      	nop			; (mov r8, r8)
200006e4:	46bd      	mov	sp, r7
200006e6:	b004      	add	sp, #16
200006e8:	bd80      	pop	{r7, pc}

200006ea <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
200006ea:	b580      	push	{r7, lr}
200006ec:	b084      	sub	sp, #16
200006ee:	af00      	add	r7, sp, #0
200006f0:	6078      	str	r0, [r7, #4]
200006f2:	000a      	movs	r2, r1
200006f4:	1cbb      	adds	r3, r7, #2
200006f6:	801a      	strh	r2, [r3, #0]
  uint8_t bitstatus = 0x00;
200006f8:	210f      	movs	r1, #15
200006fa:	187b      	adds	r3, r7, r1
200006fc:	2200      	movs	r2, #0
200006fe:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
20000700:	687b      	ldr	r3, [r7, #4]
20000702:	691b      	ldr	r3, [r3, #16]
20000704:	1cba      	adds	r2, r7, #2
20000706:	8812      	ldrh	r2, [r2, #0]
20000708:	4013      	ands	r3, r2
2000070a:	d003      	beq.n	20000714 <GPIO_ReadInputDataBit+0x2a>
  {
    bitstatus = (uint8_t)Bit_SET;
2000070c:	187b      	adds	r3, r7, r1
2000070e:	2201      	movs	r2, #1
20000710:	701a      	strb	r2, [r3, #0]
20000712:	e003      	b.n	2000071c <GPIO_ReadInputDataBit+0x32>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
20000714:	230f      	movs	r3, #15
20000716:	18fb      	adds	r3, r7, r3
20000718:	2200      	movs	r2, #0
2000071a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
2000071c:	230f      	movs	r3, #15
2000071e:	18fb      	adds	r3, r7, r3
20000720:	781b      	ldrb	r3, [r3, #0]
}
20000722:	0018      	movs	r0, r3
20000724:	46bd      	mov	sp, r7
20000726:	b004      	add	sp, #16
20000728:	bd80      	pop	{r7, pc}

2000072a <GPIO_ReadInputData>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
2000072a:	b580      	push	{r7, lr}
2000072c:	b082      	sub	sp, #8
2000072e:	af00      	add	r7, sp, #0
20000730:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
20000732:	687b      	ldr	r3, [r7, #4]
20000734:	691b      	ldr	r3, [r3, #16]
20000736:	b29b      	uxth	r3, r3
}
20000738:	0018      	movs	r0, r3
2000073a:	46bd      	mov	sp, r7
2000073c:	b002      	add	sp, #8
2000073e:	bd80      	pop	{r7, pc}

20000740 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *          This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20000740:	b580      	push	{r7, lr}
20000742:	b084      	sub	sp, #16
20000744:	af00      	add	r7, sp, #0
20000746:	6078      	str	r0, [r7, #4]
20000748:	000a      	movs	r2, r1
2000074a:	1cbb      	adds	r3, r7, #2
2000074c:	801a      	strh	r2, [r3, #0]
  uint8_t bitstatus = 0x00;
2000074e:	210f      	movs	r1, #15
20000750:	187b      	adds	r3, r7, r1
20000752:	2200      	movs	r2, #0
20000754:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if (((GPIOx->ODR) & GPIO_Pin) != (uint32_t)Bit_RESET)
20000756:	687b      	ldr	r3, [r7, #4]
20000758:	695b      	ldr	r3, [r3, #20]
2000075a:	1cba      	adds	r2, r7, #2
2000075c:	8812      	ldrh	r2, [r2, #0]
2000075e:	4013      	ands	r3, r2
20000760:	d003      	beq.n	2000076a <GPIO_ReadOutputDataBit+0x2a>
  {
    bitstatus = (uint8_t)Bit_SET;
20000762:	187b      	adds	r3, r7, r1
20000764:	2201      	movs	r2, #1
20000766:	701a      	strb	r2, [r3, #0]
20000768:	e003      	b.n	20000772 <GPIO_ReadOutputDataBit+0x32>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
2000076a:	230f      	movs	r3, #15
2000076c:	18fb      	adds	r3, r7, r3
2000076e:	2200      	movs	r2, #0
20000770:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
20000772:	230f      	movs	r3, #15
20000774:	18fb      	adds	r3, r7, r3
20000776:	781b      	ldrb	r3, [r3, #0]
}
20000778:	0018      	movs	r0, r3
2000077a:	46bd      	mov	sp, r7
2000077c:	b004      	add	sp, #16
2000077e:	bd80      	pop	{r7, pc}

20000780 <GPIO_ReadOutputData>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
20000780:	b580      	push	{r7, lr}
20000782:	b082      	sub	sp, #8
20000784:	af00      	add	r7, sp, #0
20000786:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
20000788:	687b      	ldr	r3, [r7, #4]
2000078a:	695b      	ldr	r3, [r3, #20]
2000078c:	b29b      	uxth	r3, r3
}
2000078e:	0018      	movs	r0, r3
20000790:	46bd      	mov	sp, r7
20000792:	b002      	add	sp, #8
20000794:	bd80      	pop	{r7, pc}

20000796 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20000796:	b580      	push	{r7, lr}
20000798:	b082      	sub	sp, #8
2000079a:	af00      	add	r7, sp, #0
2000079c:	6078      	str	r0, [r7, #4]
2000079e:	000a      	movs	r2, r1
200007a0:	1cbb      	adds	r3, r7, #2
200007a2:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
200007a4:	687b      	ldr	r3, [r7, #4]
200007a6:	1cba      	adds	r2, r7, #2
200007a8:	8812      	ldrh	r2, [r2, #0]
200007aa:	831a      	strh	r2, [r3, #24]
}
200007ac:	46c0      	nop			; (mov r8, r8)
200007ae:	46bd      	mov	sp, r7
200007b0:	b002      	add	sp, #8
200007b2:	bd80      	pop	{r7, pc}

200007b4 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
200007b4:	b580      	push	{r7, lr}
200007b6:	b082      	sub	sp, #8
200007b8:	af00      	add	r7, sp, #0
200007ba:	6078      	str	r0, [r7, #4]
200007bc:	000a      	movs	r2, r1
200007be:	1cbb      	adds	r3, r7, #2
200007c0:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
200007c2:	687b      	ldr	r3, [r7, #4]
200007c4:	1cba      	adds	r2, r7, #2
200007c6:	8812      	ldrh	r2, [r2, #0]
200007c8:	835a      	strh	r2, [r3, #26]
}
200007ca:	46c0      	nop			; (mov r8, r8)
200007cc:	46bd      	mov	sp, r7
200007ce:	b002      	add	sp, #8
200007d0:	bd80      	pop	{r7, pc}

200007d2 <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
200007d2:	b580      	push	{r7, lr}
200007d4:	b082      	sub	sp, #8
200007d6:	af00      	add	r7, sp, #0
200007d8:	6078      	str	r0, [r7, #4]
200007da:	0008      	movs	r0, r1
200007dc:	0011      	movs	r1, r2
200007de:	1cbb      	adds	r3, r7, #2
200007e0:	1c02      	adds	r2, r0, #0
200007e2:	801a      	strh	r2, [r3, #0]
200007e4:	1c7b      	adds	r3, r7, #1
200007e6:	1c0a      	adds	r2, r1, #0
200007e8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
200007ea:	1c7b      	adds	r3, r7, #1
200007ec:	781b      	ldrb	r3, [r3, #0]
200007ee:	2b00      	cmp	r3, #0
200007f0:	d004      	beq.n	200007fc <GPIO_WriteBit+0x2a>
  {
    GPIOx->BSRRL = GPIO_Pin;
200007f2:	687b      	ldr	r3, [r7, #4]
200007f4:	1cba      	adds	r2, r7, #2
200007f6:	8812      	ldrh	r2, [r2, #0]
200007f8:	831a      	strh	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
  }
}
200007fa:	e003      	b.n	20000804 <GPIO_WriteBit+0x32>
    GPIOx->BSRRH = GPIO_Pin ;
200007fc:	687b      	ldr	r3, [r7, #4]
200007fe:	1cba      	adds	r2, r7, #2
20000800:	8812      	ldrh	r2, [r2, #0]
20000802:	835a      	strh	r2, [r3, #26]
}
20000804:	46c0      	nop			; (mov r8, r8)
20000806:	46bd      	mov	sp, r7
20000808:	b002      	add	sp, #8
2000080a:	bd80      	pop	{r7, pc}

2000080c <GPIO_Write>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
2000080c:	b580      	push	{r7, lr}
2000080e:	b082      	sub	sp, #8
20000810:	af00      	add	r7, sp, #0
20000812:	6078      	str	r0, [r7, #4]
20000814:	000a      	movs	r2, r1
20000816:	1cbb      	adds	r3, r7, #2
20000818:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
2000081a:	1cbb      	adds	r3, r7, #2
2000081c:	881a      	ldrh	r2, [r3, #0]
2000081e:	687b      	ldr	r3, [r7, #4]
20000820:	615a      	str	r2, [r3, #20]
}
20000822:	46c0      	nop			; (mov r8, r8)
20000824:	46bd      	mov	sp, r7
20000826:	b002      	add	sp, #8
20000828:	bd80      	pop	{r7, pc}

2000082a <GPIO_ToggleBits>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
2000082a:	b580      	push	{r7, lr}
2000082c:	b082      	sub	sp, #8
2000082e:	af00      	add	r7, sp, #0
20000830:	6078      	str	r0, [r7, #4]
20000832:	000a      	movs	r2, r1
20000834:	1cbb      	adds	r3, r7, #2
20000836:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
20000838:	687b      	ldr	r3, [r7, #4]
2000083a:	695a      	ldr	r2, [r3, #20]
2000083c:	1cbb      	adds	r3, r7, #2
2000083e:	881b      	ldrh	r3, [r3, #0]
20000840:	405a      	eors	r2, r3
20000842:	687b      	ldr	r3, [r7, #4]
20000844:	615a      	str	r2, [r3, #20]
}
20000846:	46c0      	nop			; (mov r8, r8)
20000848:	46bd      	mov	sp, r7
2000084a:	b002      	add	sp, #8
2000084c:	bd80      	pop	{r7, pc}

2000084e <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
2000084e:	b580      	push	{r7, lr}
20000850:	b084      	sub	sp, #16
20000852:	af00      	add	r7, sp, #0
20000854:	6078      	str	r0, [r7, #4]
20000856:	0008      	movs	r0, r1
20000858:	0011      	movs	r1, r2
2000085a:	1cbb      	adds	r3, r7, #2
2000085c:	1c02      	adds	r2, r0, #0
2000085e:	801a      	strh	r2, [r3, #0]
20000860:	1c7b      	adds	r3, r7, #1
20000862:	1c0a      	adds	r2, r1, #0
20000864:	701a      	strb	r2, [r3, #0]
  uint32_t temp = 0x00;
20000866:	2300      	movs	r3, #0
20000868:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
2000086a:	2300      	movs	r3, #0
2000086c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
2000086e:	1c7b      	adds	r3, r7, #1
20000870:	781a      	ldrb	r2, [r3, #0]
20000872:	1cbb      	adds	r3, r7, #2
20000874:	881b      	ldrh	r3, [r3, #0]
20000876:	2107      	movs	r1, #7
20000878:	400b      	ands	r3, r1
2000087a:	009b      	lsls	r3, r3, #2
2000087c:	409a      	lsls	r2, r3
2000087e:	0013      	movs	r3, r2
20000880:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
20000882:	1cbb      	adds	r3, r7, #2
20000884:	881b      	ldrh	r3, [r3, #0]
20000886:	08db      	lsrs	r3, r3, #3
20000888:	b29b      	uxth	r3, r3
2000088a:	001a      	movs	r2, r3
2000088c:	687b      	ldr	r3, [r7, #4]
2000088e:	3208      	adds	r2, #8
20000890:	0092      	lsls	r2, r2, #2
20000892:	58d3      	ldr	r3, [r2, r3]
20000894:	1cba      	adds	r2, r7, #2
20000896:	8812      	ldrh	r2, [r2, #0]
20000898:	2107      	movs	r1, #7
2000089a:	400a      	ands	r2, r1
2000089c:	0092      	lsls	r2, r2, #2
2000089e:	210f      	movs	r1, #15
200008a0:	4091      	lsls	r1, r2
200008a2:	000a      	movs	r2, r1
200008a4:	43d2      	mvns	r2, r2
200008a6:	1cb9      	adds	r1, r7, #2
200008a8:	8809      	ldrh	r1, [r1, #0]
200008aa:	08c9      	lsrs	r1, r1, #3
200008ac:	b289      	uxth	r1, r1
200008ae:	0008      	movs	r0, r1
200008b0:	401a      	ands	r2, r3
200008b2:	0011      	movs	r1, r2
200008b4:	687b      	ldr	r3, [r7, #4]
200008b6:	0002      	movs	r2, r0
200008b8:	3208      	adds	r2, #8
200008ba:	0092      	lsls	r2, r2, #2
200008bc:	50d1      	str	r1, [r2, r3]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
200008be:	1cbb      	adds	r3, r7, #2
200008c0:	881b      	ldrh	r3, [r3, #0]
200008c2:	08db      	lsrs	r3, r3, #3
200008c4:	b29b      	uxth	r3, r3
200008c6:	001a      	movs	r2, r3
200008c8:	687b      	ldr	r3, [r7, #4]
200008ca:	3208      	adds	r2, #8
200008cc:	0092      	lsls	r2, r2, #2
200008ce:	58d3      	ldr	r3, [r2, r3]
200008d0:	68fa      	ldr	r2, [r7, #12]
200008d2:	4313      	orrs	r3, r2
200008d4:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
200008d6:	1cbb      	adds	r3, r7, #2
200008d8:	881b      	ldrh	r3, [r3, #0]
200008da:	08db      	lsrs	r3, r3, #3
200008dc:	b29b      	uxth	r3, r3
200008de:	001a      	movs	r2, r3
200008e0:	687b      	ldr	r3, [r7, #4]
200008e2:	3208      	adds	r2, #8
200008e4:	0092      	lsls	r2, r2, #2
200008e6:	68b9      	ldr	r1, [r7, #8]
200008e8:	50d1      	str	r1, [r2, r3]
}
200008ea:	46c0      	nop			; (mov r8, r8)
200008ec:	46bd      	mov	sp, r7
200008ee:	b004      	add	sp, #16
200008f0:	bd80      	pop	{r7, pc}
200008f2:	46c0      	nop			; (mov r8, r8)

200008f4 <SYSCFG_DeInit>:
  *   registers to their default reset values.
  * @param  None
  * @retval None
  */
void SYSCFG_DeInit(void)
{
200008f4:	b580      	push	{r7, lr}
200008f6:	af00      	add	r7, sp, #0
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, ENABLE);
200008f8:	2380      	movs	r3, #128	; 0x80
200008fa:	01db      	lsls	r3, r3, #7
200008fc:	2101      	movs	r1, #1
200008fe:	0018      	movs	r0, r3
20000900:	f003 f8d0 	bl	20003aa4 <RCC_APB2PeriphResetCmd>
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, DISABLE);
20000904:	2380      	movs	r3, #128	; 0x80
20000906:	01db      	lsls	r3, r3, #7
20000908:	2100      	movs	r1, #0
2000090a:	0018      	movs	r0, r3
2000090c:	f003 f8ca 	bl	20003aa4 <RCC_APB2PeriphResetCmd>
}
20000910:	46c0      	nop			; (mov r8, r8)
20000912:	46bd      	mov	sp, r7
20000914:	bd80      	pop	{r7, pc}

20000916 <SYSCFG_MemoryRemapConfig>:
  *            @arg SYSCFG_MemoryRemap_SRAM:        Embedded SRAM (112kB) mapped at 0x00000000
  *            @arg SYSCFG_MemoryRemap_SDRAM:       FMC (External SDRAM)  mapped at 0x00000000 for STM32F42xxx/43xxx devices.            
  * @retval None
  */
void SYSCFG_MemoryRemapConfig(uint8_t SYSCFG_MemoryRemap)
{
20000916:	b580      	push	{r7, lr}
20000918:	b082      	sub	sp, #8
2000091a:	af00      	add	r7, sp, #0
2000091c:	0002      	movs	r2, r0
2000091e:	1dfb      	adds	r3, r7, #7
20000920:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_SYSCFG_MEMORY_REMAP_CONFING(SYSCFG_MemoryRemap));

  SYSCFG->MEMRMP = SYSCFG_MemoryRemap;
20000922:	4b04      	ldr	r3, [pc, #16]	; (20000934 <SYSCFG_MemoryRemapConfig+0x1e>)
20000924:	1dfa      	adds	r2, r7, #7
20000926:	7812      	ldrb	r2, [r2, #0]
20000928:	601a      	str	r2, [r3, #0]
}
2000092a:	46c0      	nop			; (mov r8, r8)
2000092c:	46bd      	mov	sp, r7
2000092e:	b002      	add	sp, #8
20000930:	bd80      	pop	{r7, pc}
20000932:	46c0      	nop			; (mov r8, r8)
20000934:	40013800 	andmi	r3, r1, r0, lsl #16

20000938 <SYSCFG_MemorySwappingBank>:
  *            @arg DISABLE:(the default state) Flash Bank1 mapped at 0x08000000 (and aliased @0x0000 0000) 
                            and Flash Bank2 mapped at 0x08100000 (and aliased at 0x00100000)  
  * @retval None
  */
void SYSCFG_MemorySwappingBank(FunctionalState NewState)
{
20000938:	b580      	push	{r7, lr}
2000093a:	b082      	sub	sp, #8
2000093c:	af00      	add	r7, sp, #0
2000093e:	0002      	movs	r2, r0
20000940:	1dfb      	adds	r3, r7, #7
20000942:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) UFB_MODE_BB = (uint32_t)NewState;
20000944:	4b03      	ldr	r3, [pc, #12]	; (20000954 <SYSCFG_MemorySwappingBank+0x1c>)
20000946:	1dfa      	adds	r2, r7, #7
20000948:	7812      	ldrb	r2, [r2, #0]
2000094a:	601a      	str	r2, [r3, #0]
}
2000094c:	46c0      	nop			; (mov r8, r8)
2000094e:	46bd      	mov	sp, r7
20000950:	b002      	add	sp, #8
20000952:	bd80      	pop	{r7, pc}
20000954:	42270020 	eormi	r0, r7, #32

20000958 <SYSCFG_EXTILineConfig>:
  *           be (0..7) for STM32F42xxx/43xxx devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
20000958:	b580      	push	{r7, lr}
2000095a:	b084      	sub	sp, #16
2000095c:	af00      	add	r7, sp, #0
2000095e:	0002      	movs	r2, r0
20000960:	1dfb      	adds	r3, r7, #7
20000962:	701a      	strb	r2, [r3, #0]
20000964:	1dbb      	adds	r3, r7, #6
20000966:	1c0a      	adds	r2, r1, #0
20000968:	701a      	strb	r2, [r3, #0]
  uint32_t tmp = 0x00;
2000096a:	2300      	movs	r3, #0
2000096c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
2000096e:	1dbb      	adds	r3, r7, #6
20000970:	781b      	ldrb	r3, [r3, #0]
20000972:	2203      	movs	r2, #3
20000974:	4013      	ands	r3, r2
20000976:	009b      	lsls	r3, r3, #2
20000978:	220f      	movs	r2, #15
2000097a:	409a      	lsls	r2, r3
2000097c:	0013      	movs	r3, r2
2000097e:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
20000980:	4a18      	ldr	r2, [pc, #96]	; (200009e4 <SYSCFG_EXTILineConfig+0x8c>)
20000982:	1dbb      	adds	r3, r7, #6
20000984:	781b      	ldrb	r3, [r3, #0]
20000986:	089b      	lsrs	r3, r3, #2
20000988:	b2db      	uxtb	r3, r3
2000098a:	3302      	adds	r3, #2
2000098c:	009b      	lsls	r3, r3, #2
2000098e:	589b      	ldr	r3, [r3, r2]
20000990:	68fa      	ldr	r2, [r7, #12]
20000992:	43d2      	mvns	r2, r2
20000994:	4813      	ldr	r0, [pc, #76]	; (200009e4 <SYSCFG_EXTILineConfig+0x8c>)
20000996:	1db9      	adds	r1, r7, #6
20000998:	7809      	ldrb	r1, [r1, #0]
2000099a:	0889      	lsrs	r1, r1, #2
2000099c:	b2c9      	uxtb	r1, r1
2000099e:	401a      	ands	r2, r3
200009a0:	1c8b      	adds	r3, r1, #2
200009a2:	009b      	lsls	r3, r3, #2
200009a4:	501a      	str	r2, [r3, r0]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
200009a6:	4a0f      	ldr	r2, [pc, #60]	; (200009e4 <SYSCFG_EXTILineConfig+0x8c>)
200009a8:	1dbb      	adds	r3, r7, #6
200009aa:	781b      	ldrb	r3, [r3, #0]
200009ac:	089b      	lsrs	r3, r3, #2
200009ae:	b2db      	uxtb	r3, r3
200009b0:	3302      	adds	r3, #2
200009b2:	009b      	lsls	r3, r3, #2
200009b4:	589a      	ldr	r2, [r3, r2]
200009b6:	1dfb      	adds	r3, r7, #7
200009b8:	7819      	ldrb	r1, [r3, #0]
200009ba:	1dbb      	adds	r3, r7, #6
200009bc:	781b      	ldrb	r3, [r3, #0]
200009be:	2003      	movs	r0, #3
200009c0:	4003      	ands	r3, r0
200009c2:	009b      	lsls	r3, r3, #2
200009c4:	4099      	lsls	r1, r3
200009c6:	000b      	movs	r3, r1
200009c8:	4806      	ldr	r0, [pc, #24]	; (200009e4 <SYSCFG_EXTILineConfig+0x8c>)
200009ca:	1db9      	adds	r1, r7, #6
200009cc:	7809      	ldrb	r1, [r1, #0]
200009ce:	0889      	lsrs	r1, r1, #2
200009d0:	b2c9      	uxtb	r1, r1
200009d2:	431a      	orrs	r2, r3
200009d4:	1c8b      	adds	r3, r1, #2
200009d6:	009b      	lsls	r3, r3, #2
200009d8:	501a      	str	r2, [r3, r0]
}
200009da:	46c0      	nop			; (mov r8, r8)
200009dc:	46bd      	mov	sp, r7
200009de:	b004      	add	sp, #16
200009e0:	bd80      	pop	{r7, pc}
200009e2:	46c0      	nop			; (mov r8, r8)
200009e4:	40013800 	andmi	r3, r1, r0, lsl #16

200009e8 <SYSCFG_ETH_MediaInterfaceConfig>:
  *            @arg SYSCFG_ETH_MediaInterface_MII: MII mode selected
  *            @arg SYSCFG_ETH_MediaInterface_RMII: RMII mode selected 
  * @retval None 
  */
void SYSCFG_ETH_MediaInterfaceConfig(uint32_t SYSCFG_ETH_MediaInterface) 
{ 
200009e8:	b580      	push	{r7, lr}
200009ea:	b082      	sub	sp, #8
200009ec:	af00      	add	r7, sp, #0
200009ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_ETH_MEDIA_INTERFACE(SYSCFG_ETH_MediaInterface)); 
  /* Configure MII_RMII selection bit */ 
  *(__IO uint32_t *) PMC_MII_RMII_SEL_BB = SYSCFG_ETH_MediaInterface; 
200009f0:	4b03      	ldr	r3, [pc, #12]	; (20000a00 <SYSCFG_ETH_MediaInterfaceConfig+0x18>)
200009f2:	687a      	ldr	r2, [r7, #4]
200009f4:	601a      	str	r2, [r3, #0]
}
200009f6:	46c0      	nop			; (mov r8, r8)
200009f8:	46bd      	mov	sp, r7
200009fa:	b002      	add	sp, #8
200009fc:	bd80      	pop	{r7, pc}
200009fe:	46c0      	nop			; (mov r8, r8)
20000a00:	422700dc 	eormi	r0, r7, #220	; 0xdc

20000a04 <SYSCFG_CompensationCellCmd>:
  *            @arg ENABLE: I/O compensation cell enabled  
  *            @arg DISABLE: I/O compensation cell power-down mode  
  * @retval None
  */
void SYSCFG_CompensationCellCmd(FunctionalState NewState)
{
20000a04:	b580      	push	{r7, lr}
20000a06:	b082      	sub	sp, #8
20000a08:	af00      	add	r7, sp, #0
20000a0a:	0002      	movs	r2, r0
20000a0c:	1dfb      	adds	r3, r7, #7
20000a0e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CMPCR_CMP_PD_BB = (uint32_t)NewState;
20000a10:	4b03      	ldr	r3, [pc, #12]	; (20000a20 <SYSCFG_CompensationCellCmd+0x1c>)
20000a12:	1dfa      	adds	r2, r7, #7
20000a14:	7812      	ldrb	r2, [r2, #0]
20000a16:	601a      	str	r2, [r3, #0]
}
20000a18:	46c0      	nop			; (mov r8, r8)
20000a1a:	46bd      	mov	sp, r7
20000a1c:	b002      	add	sp, #8
20000a1e:	bd80      	pop	{r7, pc}
20000a20:	42270400 	eormi	r0, r7, #0, 8

20000a24 <SYSCFG_GetCompensationCellStatus>:
  * @brief  Checks whether the I/O Compensation Cell ready flag is set or not.
  * @param  None
  * @retval The new state of the I/O Compensation Cell ready flag (SET or RESET)
  */
FlagStatus SYSCFG_GetCompensationCellStatus(void)
{
20000a24:	b580      	push	{r7, lr}
20000a26:	b082      	sub	sp, #8
20000a28:	af00      	add	r7, sp, #0
  FlagStatus bitstatus = RESET;
20000a2a:	1dfb      	adds	r3, r7, #7
20000a2c:	2200      	movs	r2, #0
20000a2e:	701a      	strb	r2, [r3, #0]
    
  if ((SYSCFG->CMPCR & SYSCFG_CMPCR_READY ) != (uint32_t)RESET)
20000a30:	4b09      	ldr	r3, [pc, #36]	; (20000a58 <SYSCFG_GetCompensationCellStatus+0x34>)
20000a32:	6a1a      	ldr	r2, [r3, #32]
20000a34:	2380      	movs	r3, #128	; 0x80
20000a36:	005b      	lsls	r3, r3, #1
20000a38:	4013      	ands	r3, r2
20000a3a:	d003      	beq.n	20000a44 <SYSCFG_GetCompensationCellStatus+0x20>
  {
    bitstatus = SET;
20000a3c:	1dfb      	adds	r3, r7, #7
20000a3e:	2201      	movs	r2, #1
20000a40:	701a      	strb	r2, [r3, #0]
20000a42:	e002      	b.n	20000a4a <SYSCFG_GetCompensationCellStatus+0x26>
  }
  else
  {
    bitstatus = RESET;
20000a44:	1dfb      	adds	r3, r7, #7
20000a46:	2200      	movs	r2, #0
20000a48:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
20000a4a:	1dfb      	adds	r3, r7, #7
20000a4c:	781b      	ldrb	r3, [r3, #0]
}
20000a4e:	0018      	movs	r0, r3
20000a50:	46bd      	mov	sp, r7
20000a52:	b002      	add	sp, #8
20000a54:	bd80      	pop	{r7, pc}
20000a56:	46c0      	nop			; (mov r8, r8)
20000a58:	40013800 	andmi	r3, r1, r0, lsl #16

20000a5c <TIM_DeInit>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval None

  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
20000a5c:	b580      	push	{r7, lr}
20000a5e:	b082      	sub	sp, #8
20000a60:	af00      	add	r7, sp, #0
20000a62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
20000a64:	687b      	ldr	r3, [r7, #4]
20000a66:	4a64      	ldr	r2, [pc, #400]	; (20000bf8 <TIM_DeInit+0x19c>)
20000a68:	4293      	cmp	r3, r2
20000a6a:	d108      	bne.n	20000a7e <TIM_DeInit+0x22>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
20000a6c:	2101      	movs	r1, #1
20000a6e:	2001      	movs	r0, #1
20000a70:	f003 f818 	bl	20003aa4 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
20000a74:	2100      	movs	r1, #0
20000a76:	2001      	movs	r0, #1
20000a78:	f003 f814 	bl	20003aa4 <RCC_APB2PeriphResetCmd>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
20000a7c:	e0b8      	b.n	20000bf0 <TIM_DeInit+0x194>
  else if (TIMx == TIM2) 
20000a7e:	687a      	ldr	r2, [r7, #4]
20000a80:	2380      	movs	r3, #128	; 0x80
20000a82:	05db      	lsls	r3, r3, #23
20000a84:	429a      	cmp	r2, r3
20000a86:	d108      	bne.n	20000a9a <TIM_DeInit+0x3e>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
20000a88:	2101      	movs	r1, #1
20000a8a:	2001      	movs	r0, #1
20000a8c:	f002 ffea 	bl	20003a64 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
20000a90:	2100      	movs	r1, #0
20000a92:	2001      	movs	r0, #1
20000a94:	f002 ffe6 	bl	20003a64 <RCC_APB1PeriphResetCmd>
}
20000a98:	e0aa      	b.n	20000bf0 <TIM_DeInit+0x194>
  else if (TIMx == TIM3)
20000a9a:	687b      	ldr	r3, [r7, #4]
20000a9c:	4a57      	ldr	r2, [pc, #348]	; (20000bfc <TIM_DeInit+0x1a0>)
20000a9e:	4293      	cmp	r3, r2
20000aa0:	d108      	bne.n	20000ab4 <TIM_DeInit+0x58>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
20000aa2:	2101      	movs	r1, #1
20000aa4:	2002      	movs	r0, #2
20000aa6:	f002 ffdd 	bl	20003a64 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
20000aaa:	2100      	movs	r1, #0
20000aac:	2002      	movs	r0, #2
20000aae:	f002 ffd9 	bl	20003a64 <RCC_APB1PeriphResetCmd>
}
20000ab2:	e09d      	b.n	20000bf0 <TIM_DeInit+0x194>
  else if (TIMx == TIM4)
20000ab4:	687b      	ldr	r3, [r7, #4]
20000ab6:	4a52      	ldr	r2, [pc, #328]	; (20000c00 <TIM_DeInit+0x1a4>)
20000ab8:	4293      	cmp	r3, r2
20000aba:	d108      	bne.n	20000ace <TIM_DeInit+0x72>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
20000abc:	2101      	movs	r1, #1
20000abe:	2004      	movs	r0, #4
20000ac0:	f002 ffd0 	bl	20003a64 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
20000ac4:	2100      	movs	r1, #0
20000ac6:	2004      	movs	r0, #4
20000ac8:	f002 ffcc 	bl	20003a64 <RCC_APB1PeriphResetCmd>
}
20000acc:	e090      	b.n	20000bf0 <TIM_DeInit+0x194>
  else if (TIMx == TIM5)
20000ace:	687b      	ldr	r3, [r7, #4]
20000ad0:	4a4c      	ldr	r2, [pc, #304]	; (20000c04 <TIM_DeInit+0x1a8>)
20000ad2:	4293      	cmp	r3, r2
20000ad4:	d108      	bne.n	20000ae8 <TIM_DeInit+0x8c>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
20000ad6:	2101      	movs	r1, #1
20000ad8:	2008      	movs	r0, #8
20000ada:	f002 ffc3 	bl	20003a64 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
20000ade:	2100      	movs	r1, #0
20000ae0:	2008      	movs	r0, #8
20000ae2:	f002 ffbf 	bl	20003a64 <RCC_APB1PeriphResetCmd>
}
20000ae6:	e083      	b.n	20000bf0 <TIM_DeInit+0x194>
  else if (TIMx == TIM6)  
20000ae8:	687b      	ldr	r3, [r7, #4]
20000aea:	4a47      	ldr	r2, [pc, #284]	; (20000c08 <TIM_DeInit+0x1ac>)
20000aec:	4293      	cmp	r3, r2
20000aee:	d108      	bne.n	20000b02 <TIM_DeInit+0xa6>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
20000af0:	2101      	movs	r1, #1
20000af2:	2010      	movs	r0, #16
20000af4:	f002 ffb6 	bl	20003a64 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
20000af8:	2100      	movs	r1, #0
20000afa:	2010      	movs	r0, #16
20000afc:	f002 ffb2 	bl	20003a64 <RCC_APB1PeriphResetCmd>
}
20000b00:	e076      	b.n	20000bf0 <TIM_DeInit+0x194>
  else if (TIMx == TIM7)
20000b02:	687b      	ldr	r3, [r7, #4]
20000b04:	4a41      	ldr	r2, [pc, #260]	; (20000c0c <TIM_DeInit+0x1b0>)
20000b06:	4293      	cmp	r3, r2
20000b08:	d108      	bne.n	20000b1c <TIM_DeInit+0xc0>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
20000b0a:	2101      	movs	r1, #1
20000b0c:	2020      	movs	r0, #32
20000b0e:	f002 ffa9 	bl	20003a64 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
20000b12:	2100      	movs	r1, #0
20000b14:	2020      	movs	r0, #32
20000b16:	f002 ffa5 	bl	20003a64 <RCC_APB1PeriphResetCmd>
}
20000b1a:	e069      	b.n	20000bf0 <TIM_DeInit+0x194>
  else if (TIMx == TIM8)
20000b1c:	687b      	ldr	r3, [r7, #4]
20000b1e:	4a3c      	ldr	r2, [pc, #240]	; (20000c10 <TIM_DeInit+0x1b4>)
20000b20:	4293      	cmp	r3, r2
20000b22:	d108      	bne.n	20000b36 <TIM_DeInit+0xda>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
20000b24:	2101      	movs	r1, #1
20000b26:	2002      	movs	r0, #2
20000b28:	f002 ffbc 	bl	20003aa4 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
20000b2c:	2100      	movs	r1, #0
20000b2e:	2002      	movs	r0, #2
20000b30:	f002 ffb8 	bl	20003aa4 <RCC_APB2PeriphResetCmd>
}
20000b34:	e05c      	b.n	20000bf0 <TIM_DeInit+0x194>
  else if (TIMx == TIM9)
20000b36:	687b      	ldr	r3, [r7, #4]
20000b38:	4a36      	ldr	r2, [pc, #216]	; (20000c14 <TIM_DeInit+0x1b8>)
20000b3a:	4293      	cmp	r3, r2
20000b3c:	d10c      	bne.n	20000b58 <TIM_DeInit+0xfc>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
20000b3e:	2380      	movs	r3, #128	; 0x80
20000b40:	025b      	lsls	r3, r3, #9
20000b42:	2101      	movs	r1, #1
20000b44:	0018      	movs	r0, r3
20000b46:	f002 ffad 	bl	20003aa4 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
20000b4a:	2380      	movs	r3, #128	; 0x80
20000b4c:	025b      	lsls	r3, r3, #9
20000b4e:	2100      	movs	r1, #0
20000b50:	0018      	movs	r0, r3
20000b52:	f002 ffa7 	bl	20003aa4 <RCC_APB2PeriphResetCmd>
}
20000b56:	e04b      	b.n	20000bf0 <TIM_DeInit+0x194>
  else if (TIMx == TIM10)
20000b58:	687b      	ldr	r3, [r7, #4]
20000b5a:	4a2f      	ldr	r2, [pc, #188]	; (20000c18 <TIM_DeInit+0x1bc>)
20000b5c:	4293      	cmp	r3, r2
20000b5e:	d10c      	bne.n	20000b7a <TIM_DeInit+0x11e>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
20000b60:	2380      	movs	r3, #128	; 0x80
20000b62:	029b      	lsls	r3, r3, #10
20000b64:	2101      	movs	r1, #1
20000b66:	0018      	movs	r0, r3
20000b68:	f002 ff9c 	bl	20003aa4 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
20000b6c:	2380      	movs	r3, #128	; 0x80
20000b6e:	029b      	lsls	r3, r3, #10
20000b70:	2100      	movs	r1, #0
20000b72:	0018      	movs	r0, r3
20000b74:	f002 ff96 	bl	20003aa4 <RCC_APB2PeriphResetCmd>
}
20000b78:	e03a      	b.n	20000bf0 <TIM_DeInit+0x194>
  else if (TIMx == TIM11) 
20000b7a:	687b      	ldr	r3, [r7, #4]
20000b7c:	4a27      	ldr	r2, [pc, #156]	; (20000c1c <TIM_DeInit+0x1c0>)
20000b7e:	4293      	cmp	r3, r2
20000b80:	d10c      	bne.n	20000b9c <TIM_DeInit+0x140>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
20000b82:	2380      	movs	r3, #128	; 0x80
20000b84:	02db      	lsls	r3, r3, #11
20000b86:	2101      	movs	r1, #1
20000b88:	0018      	movs	r0, r3
20000b8a:	f002 ff8b 	bl	20003aa4 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
20000b8e:	2380      	movs	r3, #128	; 0x80
20000b90:	02db      	lsls	r3, r3, #11
20000b92:	2100      	movs	r1, #0
20000b94:	0018      	movs	r0, r3
20000b96:	f002 ff85 	bl	20003aa4 <RCC_APB2PeriphResetCmd>
}
20000b9a:	e029      	b.n	20000bf0 <TIM_DeInit+0x194>
  else if (TIMx == TIM12)
20000b9c:	687b      	ldr	r3, [r7, #4]
20000b9e:	4a20      	ldr	r2, [pc, #128]	; (20000c20 <TIM_DeInit+0x1c4>)
20000ba0:	4293      	cmp	r3, r2
20000ba2:	d108      	bne.n	20000bb6 <TIM_DeInit+0x15a>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
20000ba4:	2101      	movs	r1, #1
20000ba6:	2040      	movs	r0, #64	; 0x40
20000ba8:	f002 ff5c 	bl	20003a64 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
20000bac:	2100      	movs	r1, #0
20000bae:	2040      	movs	r0, #64	; 0x40
20000bb0:	f002 ff58 	bl	20003a64 <RCC_APB1PeriphResetCmd>
}
20000bb4:	e01c      	b.n	20000bf0 <TIM_DeInit+0x194>
  else if (TIMx == TIM13) 
20000bb6:	687b      	ldr	r3, [r7, #4]
20000bb8:	4a1a      	ldr	r2, [pc, #104]	; (20000c24 <TIM_DeInit+0x1c8>)
20000bba:	4293      	cmp	r3, r2
20000bbc:	d108      	bne.n	20000bd0 <TIM_DeInit+0x174>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
20000bbe:	2101      	movs	r1, #1
20000bc0:	2080      	movs	r0, #128	; 0x80
20000bc2:	f002 ff4f 	bl	20003a64 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
20000bc6:	2100      	movs	r1, #0
20000bc8:	2080      	movs	r0, #128	; 0x80
20000bca:	f002 ff4b 	bl	20003a64 <RCC_APB1PeriphResetCmd>
}
20000bce:	e00f      	b.n	20000bf0 <TIM_DeInit+0x194>
    if (TIMx == TIM14) 
20000bd0:	687b      	ldr	r3, [r7, #4]
20000bd2:	4a15      	ldr	r2, [pc, #84]	; (20000c28 <TIM_DeInit+0x1cc>)
20000bd4:	4293      	cmp	r3, r2
20000bd6:	d10b      	bne.n	20000bf0 <TIM_DeInit+0x194>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
20000bd8:	2380      	movs	r3, #128	; 0x80
20000bda:	005b      	lsls	r3, r3, #1
20000bdc:	2101      	movs	r1, #1
20000bde:	0018      	movs	r0, r3
20000be0:	f002 ff40 	bl	20003a64 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
20000be4:	2380      	movs	r3, #128	; 0x80
20000be6:	005b      	lsls	r3, r3, #1
20000be8:	2100      	movs	r1, #0
20000bea:	0018      	movs	r0, r3
20000bec:	f002 ff3a 	bl	20003a64 <RCC_APB1PeriphResetCmd>
}
20000bf0:	46c0      	nop			; (mov r8, r8)
20000bf2:	46bd      	mov	sp, r7
20000bf4:	b002      	add	sp, #8
20000bf6:	bd80      	pop	{r7, pc}
20000bf8:	40010000 	andmi	r0, r1, r0
20000bfc:	40000400 	andmi	r0, r0, r0, lsl #8
20000c00:	40000800 	andmi	r0, r0, r0, lsl #16
20000c04:	40000c00 	andmi	r0, r0, r0, lsl #24
20000c08:	40001000 	andmi	r1, r0, r0
20000c0c:	40001400 	andmi	r1, r0, r0, lsl #8
20000c10:	40010400 	andmi	r0, r1, r0, lsl #8
20000c14:	40014000 	andmi	r4, r1, r0
20000c18:	40014400 	andmi	r4, r1, r0, lsl #8
20000c1c:	40014800 	andmi	r4, r1, r0, lsl #16
20000c20:	40001800 	andmi	r1, r0, r0, lsl #16
20000c24:	40001c00 	andmi	r1, r0, r0, lsl #24
20000c28:	40002000 	andmi	r2, r0, r0

20000c2c <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
20000c2c:	b580      	push	{r7, lr}
20000c2e:	b084      	sub	sp, #16
20000c30:	af00      	add	r7, sp, #0
20000c32:	6078      	str	r0, [r7, #4]
20000c34:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
20000c36:	210e      	movs	r1, #14
20000c38:	187b      	adds	r3, r7, r1
20000c3a:	2200      	movs	r2, #0
20000c3c:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
20000c3e:	187b      	adds	r3, r7, r1
20000c40:	687a      	ldr	r2, [r7, #4]
20000c42:	8812      	ldrh	r2, [r2, #0]
20000c44:	801a      	strh	r2, [r3, #0]

  if((TIMx == TIM1) || (TIMx == TIM8)||
20000c46:	687b      	ldr	r3, [r7, #4]
20000c48:	4a2e      	ldr	r2, [pc, #184]	; (20000d04 <TIM_TimeBaseInit+0xd8>)
20000c4a:	4293      	cmp	r3, r2
20000c4c:	d014      	beq.n	20000c78 <TIM_TimeBaseInit+0x4c>
20000c4e:	687b      	ldr	r3, [r7, #4]
20000c50:	4a2d      	ldr	r2, [pc, #180]	; (20000d08 <TIM_TimeBaseInit+0xdc>)
20000c52:	4293      	cmp	r3, r2
20000c54:	d010      	beq.n	20000c78 <TIM_TimeBaseInit+0x4c>
20000c56:	687a      	ldr	r2, [r7, #4]
20000c58:	2380      	movs	r3, #128	; 0x80
20000c5a:	05db      	lsls	r3, r3, #23
20000c5c:	429a      	cmp	r2, r3
20000c5e:	d00b      	beq.n	20000c78 <TIM_TimeBaseInit+0x4c>
     (TIMx == TIM2) || (TIMx == TIM3)||
20000c60:	687b      	ldr	r3, [r7, #4]
20000c62:	4a2a      	ldr	r2, [pc, #168]	; (20000d0c <TIM_TimeBaseInit+0xe0>)
20000c64:	4293      	cmp	r3, r2
20000c66:	d007      	beq.n	20000c78 <TIM_TimeBaseInit+0x4c>
20000c68:	687b      	ldr	r3, [r7, #4]
20000c6a:	4a29      	ldr	r2, [pc, #164]	; (20000d10 <TIM_TimeBaseInit+0xe4>)
20000c6c:	4293      	cmp	r3, r2
20000c6e:	d003      	beq.n	20000c78 <TIM_TimeBaseInit+0x4c>
     (TIMx == TIM4) || (TIMx == TIM5)) 
20000c70:	687b      	ldr	r3, [r7, #4]
20000c72:	4a28      	ldr	r2, [pc, #160]	; (20000d14 <TIM_TimeBaseInit+0xe8>)
20000c74:	4293      	cmp	r3, r2
20000c76:	d10d      	bne.n	20000c94 <TIM_TimeBaseInit+0x68>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
20000c78:	200e      	movs	r0, #14
20000c7a:	183b      	adds	r3, r7, r0
20000c7c:	183a      	adds	r2, r7, r0
20000c7e:	8812      	ldrh	r2, [r2, #0]
20000c80:	2170      	movs	r1, #112	; 0x70
20000c82:	438a      	bics	r2, r1
20000c84:	801a      	strh	r2, [r3, #0]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
20000c86:	683b      	ldr	r3, [r7, #0]
20000c88:	8859      	ldrh	r1, [r3, #2]
20000c8a:	183b      	adds	r3, r7, r0
20000c8c:	183a      	adds	r2, r7, r0
20000c8e:	8812      	ldrh	r2, [r2, #0]
20000c90:	430a      	orrs	r2, r1
20000c92:	801a      	strh	r2, [r3, #0]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
20000c94:	687b      	ldr	r3, [r7, #4]
20000c96:	4a20      	ldr	r2, [pc, #128]	; (20000d18 <TIM_TimeBaseInit+0xec>)
20000c98:	4293      	cmp	r3, r2
20000c9a:	d011      	beq.n	20000cc0 <TIM_TimeBaseInit+0x94>
20000c9c:	687b      	ldr	r3, [r7, #4]
20000c9e:	4a1f      	ldr	r2, [pc, #124]	; (20000d1c <TIM_TimeBaseInit+0xf0>)
20000ca0:	4293      	cmp	r3, r2
20000ca2:	d00d      	beq.n	20000cc0 <TIM_TimeBaseInit+0x94>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
20000ca4:	200e      	movs	r0, #14
20000ca6:	183b      	adds	r3, r7, r0
20000ca8:	183a      	adds	r2, r7, r0
20000caa:	8812      	ldrh	r2, [r2, #0]
20000cac:	491c      	ldr	r1, [pc, #112]	; (20000d20 <TIM_TimeBaseInit+0xf4>)
20000cae:	400a      	ands	r2, r1
20000cb0:	801a      	strh	r2, [r3, #0]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
20000cb2:	683b      	ldr	r3, [r7, #0]
20000cb4:	8919      	ldrh	r1, [r3, #8]
20000cb6:	183b      	adds	r3, r7, r0
20000cb8:	183a      	adds	r2, r7, r0
20000cba:	8812      	ldrh	r2, [r2, #0]
20000cbc:	430a      	orrs	r2, r1
20000cbe:	801a      	strh	r2, [r3, #0]
  }

  TIMx->CR1 = tmpcr1;
20000cc0:	687b      	ldr	r3, [r7, #4]
20000cc2:	220e      	movs	r2, #14
20000cc4:	18ba      	adds	r2, r7, r2
20000cc6:	8812      	ldrh	r2, [r2, #0]
20000cc8:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
20000cca:	683b      	ldr	r3, [r7, #0]
20000ccc:	685a      	ldr	r2, [r3, #4]
20000cce:	687b      	ldr	r3, [r7, #4]
20000cd0:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
20000cd2:	683b      	ldr	r3, [r7, #0]
20000cd4:	881a      	ldrh	r2, [r3, #0]
20000cd6:	687b      	ldr	r3, [r7, #4]
20000cd8:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
20000cda:	687b      	ldr	r3, [r7, #4]
20000cdc:	4a09      	ldr	r2, [pc, #36]	; (20000d04 <TIM_TimeBaseInit+0xd8>)
20000cde:	4293      	cmp	r3, r2
20000ce0:	d003      	beq.n	20000cea <TIM_TimeBaseInit+0xbe>
20000ce2:	687b      	ldr	r3, [r7, #4]
20000ce4:	4a08      	ldr	r2, [pc, #32]	; (20000d08 <TIM_TimeBaseInit+0xdc>)
20000ce6:	4293      	cmp	r3, r2
20000ce8:	d104      	bne.n	20000cf4 <TIM_TimeBaseInit+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
20000cea:	683b      	ldr	r3, [r7, #0]
20000cec:	7a9b      	ldrb	r3, [r3, #10]
20000cee:	b29a      	uxth	r2, r3
20000cf0:	687b      	ldr	r3, [r7, #4]
20000cf2:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
20000cf4:	687b      	ldr	r3, [r7, #4]
20000cf6:	2201      	movs	r2, #1
20000cf8:	829a      	strh	r2, [r3, #20]
}
20000cfa:	46c0      	nop			; (mov r8, r8)
20000cfc:	46bd      	mov	sp, r7
20000cfe:	b004      	add	sp, #16
20000d00:	bd80      	pop	{r7, pc}
20000d02:	46c0      	nop			; (mov r8, r8)
20000d04:	40010000 	andmi	r0, r1, r0
20000d08:	40010400 	andmi	r0, r1, r0, lsl #8
20000d0c:	40000400 	andmi	r0, r0, r0, lsl #8
20000d10:	40000800 	andmi	r0, r0, r0, lsl #16
20000d14:	40000c00 	andmi	r0, r0, r0, lsl #24
20000d18:	40001000 	andmi	r1, r0, r0
20000d1c:	40001400 	andmi	r1, r0, r0, lsl #8
20000d20:	fffffcff 			; <UNDEFINED> instruction: 0xfffffcff

20000d24 <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
20000d24:	b580      	push	{r7, lr}
20000d26:	b082      	sub	sp, #8
20000d28:	af00      	add	r7, sp, #0
20000d2a:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
20000d2c:	687b      	ldr	r3, [r7, #4]
20000d2e:	2201      	movs	r2, #1
20000d30:	4252      	negs	r2, r2
20000d32:	605a      	str	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
20000d34:	687b      	ldr	r3, [r7, #4]
20000d36:	2200      	movs	r2, #0
20000d38:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
20000d3a:	687b      	ldr	r3, [r7, #4]
20000d3c:	2200      	movs	r2, #0
20000d3e:	811a      	strh	r2, [r3, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
20000d40:	687b      	ldr	r3, [r7, #4]
20000d42:	2200      	movs	r2, #0
20000d44:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
20000d46:	687b      	ldr	r3, [r7, #4]
20000d48:	2200      	movs	r2, #0
20000d4a:	729a      	strb	r2, [r3, #10]
}
20000d4c:	46c0      	nop			; (mov r8, r8)
20000d4e:	46bd      	mov	sp, r7
20000d50:	b002      	add	sp, #8
20000d52:	bd80      	pop	{r7, pc}

20000d54 <TIM_PrescalerConfig>:
  *            @arg TIM_PSCReloadMode_Update: The Prescaler is loaded at the update event.
  *            @arg TIM_PSCReloadMode_Immediate: The Prescaler is loaded immediately.
  * @retval None
  */
void TIM_PrescalerConfig(TIM_TypeDef* TIMx, uint16_t Prescaler, uint16_t TIM_PSCReloadMode)
{
20000d54:	b580      	push	{r7, lr}
20000d56:	b082      	sub	sp, #8
20000d58:	af00      	add	r7, sp, #0
20000d5a:	6078      	str	r0, [r7, #4]
20000d5c:	0008      	movs	r0, r1
20000d5e:	0011      	movs	r1, r2
20000d60:	1cbb      	adds	r3, r7, #2
20000d62:	1c02      	adds	r2, r0, #0
20000d64:	801a      	strh	r2, [r3, #0]
20000d66:	003b      	movs	r3, r7
20000d68:	1c0a      	adds	r2, r1, #0
20000d6a:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
20000d6c:	687b      	ldr	r3, [r7, #4]
20000d6e:	1cba      	adds	r2, r7, #2
20000d70:	8812      	ldrh	r2, [r2, #0]
20000d72:	851a      	strh	r2, [r3, #40]	; 0x28
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
20000d74:	687b      	ldr	r3, [r7, #4]
20000d76:	003a      	movs	r2, r7
20000d78:	8812      	ldrh	r2, [r2, #0]
20000d7a:	829a      	strh	r2, [r3, #20]
}
20000d7c:	46c0      	nop			; (mov r8, r8)
20000d7e:	46bd      	mov	sp, r7
20000d80:	b002      	add	sp, #8
20000d82:	bd80      	pop	{r7, pc}

20000d84 <TIM_CounterModeConfig>:
  *            @arg TIM_CounterMode_CenterAligned2: TIM Center Aligned Mode2
  *            @arg TIM_CounterMode_CenterAligned3: TIM Center Aligned Mode3
  * @retval None
  */
void TIM_CounterModeConfig(TIM_TypeDef* TIMx, uint16_t TIM_CounterMode)
{
20000d84:	b580      	push	{r7, lr}
20000d86:	b084      	sub	sp, #16
20000d88:	af00      	add	r7, sp, #0
20000d8a:	6078      	str	r0, [r7, #4]
20000d8c:	000a      	movs	r2, r1
20000d8e:	1cbb      	adds	r3, r7, #2
20000d90:	801a      	strh	r2, [r3, #0]
  uint16_t tmpcr1 = 0;
20000d92:	200e      	movs	r0, #14
20000d94:	183b      	adds	r3, r7, r0
20000d96:	2200      	movs	r2, #0
20000d98:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));

  tmpcr1 = TIMx->CR1;
20000d9a:	183b      	adds	r3, r7, r0
20000d9c:	687a      	ldr	r2, [r7, #4]
20000d9e:	8812      	ldrh	r2, [r2, #0]
20000da0:	801a      	strh	r2, [r3, #0]

  /* Reset the CMS and DIR Bits */
  tmpcr1 &= (uint16_t)~(TIM_CR1_DIR | TIM_CR1_CMS);
20000da2:	183b      	adds	r3, r7, r0
20000da4:	183a      	adds	r2, r7, r0
20000da6:	8812      	ldrh	r2, [r2, #0]
20000da8:	2170      	movs	r1, #112	; 0x70
20000daa:	438a      	bics	r2, r1
20000dac:	801a      	strh	r2, [r3, #0]

  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
20000dae:	183b      	adds	r3, r7, r0
20000db0:	1839      	adds	r1, r7, r0
20000db2:	1cba      	adds	r2, r7, #2
20000db4:	8809      	ldrh	r1, [r1, #0]
20000db6:	8812      	ldrh	r2, [r2, #0]
20000db8:	430a      	orrs	r2, r1
20000dba:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
20000dbc:	687b      	ldr	r3, [r7, #4]
20000dbe:	183a      	adds	r2, r7, r0
20000dc0:	8812      	ldrh	r2, [r2, #0]
20000dc2:	801a      	strh	r2, [r3, #0]
}
20000dc4:	46c0      	nop			; (mov r8, r8)
20000dc6:	46bd      	mov	sp, r7
20000dc8:	b004      	add	sp, #16
20000dca:	bd80      	pop	{r7, pc}

20000dcc <TIM_SetCounter>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @param  Counter: specifies the Counter register new value.
  * @retval None
  */
void TIM_SetCounter(TIM_TypeDef* TIMx, uint32_t Counter)
{
20000dcc:	b580      	push	{r7, lr}
20000dce:	b082      	sub	sp, #8
20000dd0:	af00      	add	r7, sp, #0
20000dd2:	6078      	str	r0, [r7, #4]
20000dd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Counter Register value */
  TIMx->CNT = Counter;
20000dd6:	687b      	ldr	r3, [r7, #4]
20000dd8:	683a      	ldr	r2, [r7, #0]
20000dda:	625a      	str	r2, [r3, #36]	; 0x24
}
20000ddc:	46c0      	nop			; (mov r8, r8)
20000dde:	46bd      	mov	sp, r7
20000de0:	b002      	add	sp, #8
20000de2:	bd80      	pop	{r7, pc}

20000de4 <TIM_SetAutoreload>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @param  Autoreload: specifies the Autoreload register new value.
  * @retval None
  */
void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint32_t Autoreload)
{
20000de4:	b580      	push	{r7, lr}
20000de6:	b082      	sub	sp, #8
20000de8:	af00      	add	r7, sp, #0
20000dea:	6078      	str	r0, [r7, #4]
20000dec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
20000dee:	687b      	ldr	r3, [r7, #4]
20000df0:	683a      	ldr	r2, [r7, #0]
20000df2:	62da      	str	r2, [r3, #44]	; 0x2c
}
20000df4:	46c0      	nop			; (mov r8, r8)
20000df6:	46bd      	mov	sp, r7
20000df8:	b002      	add	sp, #8
20000dfa:	bd80      	pop	{r7, pc}

20000dfc <TIM_GetCounter>:
  * @brief  Gets the TIMx Counter value.
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval Counter Register value
  */
uint32_t TIM_GetCounter(TIM_TypeDef* TIMx)
{
20000dfc:	b580      	push	{r7, lr}
20000dfe:	b082      	sub	sp, #8
20000e00:	af00      	add	r7, sp, #0
20000e02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Counter Register value */
  return TIMx->CNT;
20000e04:	687b      	ldr	r3, [r7, #4]
20000e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
20000e08:	0018      	movs	r0, r3
20000e0a:	46bd      	mov	sp, r7
20000e0c:	b002      	add	sp, #8
20000e0e:	bd80      	pop	{r7, pc}

20000e10 <TIM_GetPrescaler>:
  * @brief  Gets the TIMx Prescaler value.
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval Prescaler Register value.
  */
uint16_t TIM_GetPrescaler(TIM_TypeDef* TIMx)
{
20000e10:	b580      	push	{r7, lr}
20000e12:	b082      	sub	sp, #8
20000e14:	af00      	add	r7, sp, #0
20000e16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Prescaler Register value */
  return TIMx->PSC;
20000e18:	687b      	ldr	r3, [r7, #4]
20000e1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
20000e1c:	b29b      	uxth	r3, r3
}
20000e1e:	0018      	movs	r0, r3
20000e20:	46bd      	mov	sp, r7
20000e22:	b002      	add	sp, #8
20000e24:	bd80      	pop	{r7, pc}

20000e26 <TIM_UpdateDisableConfig>:
  * @param  NewState: new state of the TIMx UDIS bit
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_UpdateDisableConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
20000e26:	b580      	push	{r7, lr}
20000e28:	b082      	sub	sp, #8
20000e2a:	af00      	add	r7, sp, #0
20000e2c:	6078      	str	r0, [r7, #4]
20000e2e:	000a      	movs	r2, r1
20000e30:	1cfb      	adds	r3, r7, #3
20000e32:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20000e34:	1cfb      	adds	r3, r7, #3
20000e36:	781b      	ldrb	r3, [r3, #0]
20000e38:	2b00      	cmp	r3, #0
20000e3a:	d008      	beq.n	20000e4e <TIM_UpdateDisableConfig+0x28>
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
20000e3c:	687b      	ldr	r3, [r7, #4]
20000e3e:	881b      	ldrh	r3, [r3, #0]
20000e40:	b29b      	uxth	r3, r3
20000e42:	2202      	movs	r2, #2
20000e44:	4313      	orrs	r3, r2
20000e46:	b29a      	uxth	r2, r3
20000e48:	687b      	ldr	r3, [r7, #4]
20000e4a:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_UDIS;
  }
}
20000e4c:	e007      	b.n	20000e5e <TIM_UpdateDisableConfig+0x38>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_UDIS;
20000e4e:	687b      	ldr	r3, [r7, #4]
20000e50:	881b      	ldrh	r3, [r3, #0]
20000e52:	b29b      	uxth	r3, r3
20000e54:	2202      	movs	r2, #2
20000e56:	4393      	bics	r3, r2
20000e58:	b29a      	uxth	r2, r3
20000e5a:	687b      	ldr	r3, [r7, #4]
20000e5c:	801a      	strh	r2, [r3, #0]
}
20000e5e:	46c0      	nop			; (mov r8, r8)
20000e60:	46bd      	mov	sp, r7
20000e62:	b002      	add	sp, #8
20000e64:	bd80      	pop	{r7, pc}

20000e66 <TIM_UpdateRequestConfig>:
  *                 generation through the slave mode controller.
  *            @arg TIM_UpdateSource_Regular: Source of update is counter overflow/underflow.
  * @retval None
  */
void TIM_UpdateRequestConfig(TIM_TypeDef* TIMx, uint16_t TIM_UpdateSource)
{
20000e66:	b580      	push	{r7, lr}
20000e68:	b082      	sub	sp, #8
20000e6a:	af00      	add	r7, sp, #0
20000e6c:	6078      	str	r0, [r7, #4]
20000e6e:	000a      	movs	r2, r1
20000e70:	1cbb      	adds	r3, r7, #2
20000e72:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
20000e74:	1cbb      	adds	r3, r7, #2
20000e76:	881b      	ldrh	r3, [r3, #0]
20000e78:	2b00      	cmp	r3, #0
20000e7a:	d008      	beq.n	20000e8e <TIM_UpdateRequestConfig+0x28>
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
20000e7c:	687b      	ldr	r3, [r7, #4]
20000e7e:	881b      	ldrh	r3, [r3, #0]
20000e80:	b29b      	uxth	r3, r3
20000e82:	2204      	movs	r2, #4
20000e84:	4313      	orrs	r3, r2
20000e86:	b29a      	uxth	r2, r3
20000e88:	687b      	ldr	r3, [r7, #4]
20000e8a:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_URS;
  }
}
20000e8c:	e007      	b.n	20000e9e <TIM_UpdateRequestConfig+0x38>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_URS;
20000e8e:	687b      	ldr	r3, [r7, #4]
20000e90:	881b      	ldrh	r3, [r3, #0]
20000e92:	b29b      	uxth	r3, r3
20000e94:	2204      	movs	r2, #4
20000e96:	4393      	bics	r3, r2
20000e98:	b29a      	uxth	r2, r3
20000e9a:	687b      	ldr	r3, [r7, #4]
20000e9c:	801a      	strh	r2, [r3, #0]
}
20000e9e:	46c0      	nop			; (mov r8, r8)
20000ea0:	46bd      	mov	sp, r7
20000ea2:	b002      	add	sp, #8
20000ea4:	bd80      	pop	{r7, pc}

20000ea6 <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
20000ea6:	b580      	push	{r7, lr}
20000ea8:	b082      	sub	sp, #8
20000eaa:	af00      	add	r7, sp, #0
20000eac:	6078      	str	r0, [r7, #4]
20000eae:	000a      	movs	r2, r1
20000eb0:	1cfb      	adds	r3, r7, #3
20000eb2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20000eb4:	1cfb      	adds	r3, r7, #3
20000eb6:	781b      	ldrb	r3, [r3, #0]
20000eb8:	2b00      	cmp	r3, #0
20000eba:	d008      	beq.n	20000ece <TIM_ARRPreloadConfig+0x28>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
20000ebc:	687b      	ldr	r3, [r7, #4]
20000ebe:	881b      	ldrh	r3, [r3, #0]
20000ec0:	b29b      	uxth	r3, r3
20000ec2:	2280      	movs	r2, #128	; 0x80
20000ec4:	4313      	orrs	r3, r2
20000ec6:	b29a      	uxth	r2, r3
20000ec8:	687b      	ldr	r3, [r7, #4]
20000eca:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
  }
}
20000ecc:	e007      	b.n	20000ede <TIM_ARRPreloadConfig+0x38>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
20000ece:	687b      	ldr	r3, [r7, #4]
20000ed0:	881b      	ldrh	r3, [r3, #0]
20000ed2:	b29b      	uxth	r3, r3
20000ed4:	2280      	movs	r2, #128	; 0x80
20000ed6:	4393      	bics	r3, r2
20000ed8:	b29a      	uxth	r2, r3
20000eda:	687b      	ldr	r3, [r7, #4]
20000edc:	801a      	strh	r2, [r3, #0]
}
20000ede:	46c0      	nop			; (mov r8, r8)
20000ee0:	46bd      	mov	sp, r7
20000ee2:	b002      	add	sp, #8
20000ee4:	bd80      	pop	{r7, pc}

20000ee6 <TIM_SelectOnePulseMode>:
  *            @arg TIM_OPMode_Single
  *            @arg TIM_OPMode_Repetitive
  * @retval None
  */
void TIM_SelectOnePulseMode(TIM_TypeDef* TIMx, uint16_t TIM_OPMode)
{
20000ee6:	b580      	push	{r7, lr}
20000ee8:	b082      	sub	sp, #8
20000eea:	af00      	add	r7, sp, #0
20000eec:	6078      	str	r0, [r7, #4]
20000eee:	000a      	movs	r2, r1
20000ef0:	1cbb      	adds	r3, r7, #2
20000ef2:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));

  /* Reset the OPM Bit */
  TIMx->CR1 &= (uint16_t)~TIM_CR1_OPM;
20000ef4:	687b      	ldr	r3, [r7, #4]
20000ef6:	881b      	ldrh	r3, [r3, #0]
20000ef8:	b29b      	uxth	r3, r3
20000efa:	2208      	movs	r2, #8
20000efc:	4393      	bics	r3, r2
20000efe:	b29a      	uxth	r2, r3
20000f00:	687b      	ldr	r3, [r7, #4]
20000f02:	801a      	strh	r2, [r3, #0]

  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
20000f04:	687b      	ldr	r3, [r7, #4]
20000f06:	881b      	ldrh	r3, [r3, #0]
20000f08:	b29a      	uxth	r2, r3
20000f0a:	1cbb      	adds	r3, r7, #2
20000f0c:	881b      	ldrh	r3, [r3, #0]
20000f0e:	4313      	orrs	r3, r2
20000f10:	b29a      	uxth	r2, r3
20000f12:	687b      	ldr	r3, [r7, #4]
20000f14:	801a      	strh	r2, [r3, #0]
}
20000f16:	46c0      	nop			; (mov r8, r8)
20000f18:	46bd      	mov	sp, r7
20000f1a:	b002      	add	sp, #8
20000f1c:	bd80      	pop	{r7, pc}

20000f1e <TIM_SetClockDivision>:
  *            @arg TIM_CKD_DIV2: TDTS = 2*Tck_tim
  *            @arg TIM_CKD_DIV4: TDTS = 4*Tck_tim
  * @retval None
  */
void TIM_SetClockDivision(TIM_TypeDef* TIMx, uint16_t TIM_CKD)
{
20000f1e:	b580      	push	{r7, lr}
20000f20:	b082      	sub	sp, #8
20000f22:	af00      	add	r7, sp, #0
20000f24:	6078      	str	r0, [r7, #4]
20000f26:	000a      	movs	r2, r1
20000f28:	1cbb      	adds	r3, r7, #2
20000f2a:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));

  /* Reset the CKD Bits */
  TIMx->CR1 &= (uint16_t)(~TIM_CR1_CKD);
20000f2c:	687b      	ldr	r3, [r7, #4]
20000f2e:	881b      	ldrh	r3, [r3, #0]
20000f30:	b29b      	uxth	r3, r3
20000f32:	4a09      	ldr	r2, [pc, #36]	; (20000f58 <TIM_SetClockDivision+0x3a>)
20000f34:	4013      	ands	r3, r2
20000f36:	b29a      	uxth	r2, r3
20000f38:	687b      	ldr	r3, [r7, #4]
20000f3a:	801a      	strh	r2, [r3, #0]

  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
20000f3c:	687b      	ldr	r3, [r7, #4]
20000f3e:	881b      	ldrh	r3, [r3, #0]
20000f40:	b29a      	uxth	r2, r3
20000f42:	1cbb      	adds	r3, r7, #2
20000f44:	881b      	ldrh	r3, [r3, #0]
20000f46:	4313      	orrs	r3, r2
20000f48:	b29a      	uxth	r2, r3
20000f4a:	687b      	ldr	r3, [r7, #4]
20000f4c:	801a      	strh	r2, [r3, #0]
}
20000f4e:	46c0      	nop			; (mov r8, r8)
20000f50:	46bd      	mov	sp, r7
20000f52:	b002      	add	sp, #8
20000f54:	bd80      	pop	{r7, pc}
20000f56:	46c0      	nop			; (mov r8, r8)
20000f58:	fffffcff 			; <UNDEFINED> instruction: 0xfffffcff

20000f5c <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
20000f5c:	b580      	push	{r7, lr}
20000f5e:	b082      	sub	sp, #8
20000f60:	af00      	add	r7, sp, #0
20000f62:	6078      	str	r0, [r7, #4]
20000f64:	000a      	movs	r2, r1
20000f66:	1cfb      	adds	r3, r7, #3
20000f68:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
20000f6a:	1cfb      	adds	r3, r7, #3
20000f6c:	781b      	ldrb	r3, [r3, #0]
20000f6e:	2b00      	cmp	r3, #0
20000f70:	d008      	beq.n	20000f84 <TIM_Cmd+0x28>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
20000f72:	687b      	ldr	r3, [r7, #4]
20000f74:	881b      	ldrh	r3, [r3, #0]
20000f76:	b29b      	uxth	r3, r3
20000f78:	2201      	movs	r2, #1
20000f7a:	4313      	orrs	r3, r2
20000f7c:	b29a      	uxth	r2, r3
20000f7e:	687b      	ldr	r3, [r7, #4]
20000f80:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
20000f82:	e007      	b.n	20000f94 <TIM_Cmd+0x38>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
20000f84:	687b      	ldr	r3, [r7, #4]
20000f86:	881b      	ldrh	r3, [r3, #0]
20000f88:	b29b      	uxth	r3, r3
20000f8a:	2201      	movs	r2, #1
20000f8c:	4393      	bics	r3, r2
20000f8e:	b29a      	uxth	r2, r3
20000f90:	687b      	ldr	r3, [r7, #4]
20000f92:	801a      	strh	r2, [r3, #0]
}
20000f94:	46c0      	nop			; (mov r8, r8)
20000f96:	46bd      	mov	sp, r7
20000f98:	b002      	add	sp, #8
20000f9a:	bd80      	pop	{r7, pc}

20000f9c <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
20000f9c:	b590      	push	{r4, r7, lr}
20000f9e:	b085      	sub	sp, #20
20000fa0:	af00      	add	r7, sp, #0
20000fa2:	6078      	str	r0, [r7, #4]
20000fa4:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
20000fa6:	210a      	movs	r1, #10
20000fa8:	187b      	adds	r3, r7, r1
20000faa:	2200      	movs	r2, #0
20000fac:	801a      	strh	r2, [r3, #0]
20000fae:	240e      	movs	r4, #14
20000fb0:	193b      	adds	r3, r7, r4
20000fb2:	2200      	movs	r2, #0
20000fb4:	801a      	strh	r2, [r3, #0]
20000fb6:	200c      	movs	r0, #12
20000fb8:	183b      	adds	r3, r7, r0
20000fba:	2200      	movs	r2, #0
20000fbc:	801a      	strh	r2, [r3, #0]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
20000fbe:	687b      	ldr	r3, [r7, #4]
20000fc0:	8c1b      	ldrh	r3, [r3, #32]
20000fc2:	b29b      	uxth	r3, r3
20000fc4:	2201      	movs	r2, #1
20000fc6:	4393      	bics	r3, r2
20000fc8:	b29a      	uxth	r2, r3
20000fca:	687b      	ldr	r3, [r7, #4]
20000fcc:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
20000fce:	193b      	adds	r3, r7, r4
20000fd0:	687a      	ldr	r2, [r7, #4]
20000fd2:	8c12      	ldrh	r2, [r2, #32]
20000fd4:	801a      	strh	r2, [r3, #0]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
20000fd6:	183b      	adds	r3, r7, r0
20000fd8:	687a      	ldr	r2, [r7, #4]
20000fda:	8892      	ldrh	r2, [r2, #4]
20000fdc:	801a      	strh	r2, [r3, #0]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
20000fde:	187b      	adds	r3, r7, r1
20000fe0:	687a      	ldr	r2, [r7, #4]
20000fe2:	8b12      	ldrh	r2, [r2, #24]
20000fe4:	801a      	strh	r2, [r3, #0]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
20000fe6:	187b      	adds	r3, r7, r1
20000fe8:	0008      	movs	r0, r1
20000fea:	187a      	adds	r2, r7, r1
20000fec:	8812      	ldrh	r2, [r2, #0]
20000fee:	2170      	movs	r1, #112	; 0x70
20000ff0:	438a      	bics	r2, r1
20000ff2:	801a      	strh	r2, [r3, #0]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
20000ff4:	183b      	adds	r3, r7, r0
20000ff6:	183a      	adds	r2, r7, r0
20000ff8:	8812      	ldrh	r2, [r2, #0]
20000ffa:	2103      	movs	r1, #3
20000ffc:	438a      	bics	r2, r1
20000ffe:	801a      	strh	r2, [r3, #0]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
20001000:	683b      	ldr	r3, [r7, #0]
20001002:	8819      	ldrh	r1, [r3, #0]
20001004:	183b      	adds	r3, r7, r0
20001006:	183a      	adds	r2, r7, r0
20001008:	8812      	ldrh	r2, [r2, #0]
2000100a:	430a      	orrs	r2, r1
2000100c:	801a      	strh	r2, [r3, #0]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
2000100e:	0020      	movs	r0, r4
20001010:	183b      	adds	r3, r7, r0
20001012:	183a      	adds	r2, r7, r0
20001014:	8812      	ldrh	r2, [r2, #0]
20001016:	2102      	movs	r1, #2
20001018:	438a      	bics	r2, r1
2000101a:	801a      	strh	r2, [r3, #0]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
2000101c:	683b      	ldr	r3, [r7, #0]
2000101e:	8999      	ldrh	r1, [r3, #12]
20001020:	183b      	adds	r3, r7, r0
20001022:	183a      	adds	r2, r7, r0
20001024:	8812      	ldrh	r2, [r2, #0]
20001026:	430a      	orrs	r2, r1
20001028:	801a      	strh	r2, [r3, #0]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
2000102a:	683b      	ldr	r3, [r7, #0]
2000102c:	8859      	ldrh	r1, [r3, #2]
2000102e:	183b      	adds	r3, r7, r0
20001030:	183a      	adds	r2, r7, r0
20001032:	8812      	ldrh	r2, [r2, #0]
20001034:	430a      	orrs	r2, r1
20001036:	801a      	strh	r2, [r3, #0]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
20001038:	687b      	ldr	r3, [r7, #4]
2000103a:	4a2a      	ldr	r2, [pc, #168]	; (200010e4 <TIM_OC1Init+0x148>)
2000103c:	4293      	cmp	r3, r2
2000103e:	d003      	beq.n	20001048 <TIM_OC1Init+0xac>
20001040:	687b      	ldr	r3, [r7, #4]
20001042:	4a29      	ldr	r2, [pc, #164]	; (200010e8 <TIM_OC1Init+0x14c>)
20001044:	4293      	cmp	r3, r2
20001046:	d135      	bne.n	200010b4 <TIM_OC1Init+0x118>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
20001048:	200e      	movs	r0, #14
2000104a:	183b      	adds	r3, r7, r0
2000104c:	183a      	adds	r2, r7, r0
2000104e:	8812      	ldrh	r2, [r2, #0]
20001050:	2108      	movs	r1, #8
20001052:	438a      	bics	r2, r1
20001054:	801a      	strh	r2, [r3, #0]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
20001056:	683b      	ldr	r3, [r7, #0]
20001058:	89d9      	ldrh	r1, [r3, #14]
2000105a:	183b      	adds	r3, r7, r0
2000105c:	183a      	adds	r2, r7, r0
2000105e:	8812      	ldrh	r2, [r2, #0]
20001060:	430a      	orrs	r2, r1
20001062:	801a      	strh	r2, [r3, #0]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
20001064:	183b      	adds	r3, r7, r0
20001066:	183a      	adds	r2, r7, r0
20001068:	8812      	ldrh	r2, [r2, #0]
2000106a:	2104      	movs	r1, #4
2000106c:	438a      	bics	r2, r1
2000106e:	801a      	strh	r2, [r3, #0]
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
20001070:	683b      	ldr	r3, [r7, #0]
20001072:	8899      	ldrh	r1, [r3, #4]
20001074:	183b      	adds	r3, r7, r0
20001076:	183a      	adds	r2, r7, r0
20001078:	8812      	ldrh	r2, [r2, #0]
2000107a:	430a      	orrs	r2, r1
2000107c:	801a      	strh	r2, [r3, #0]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
2000107e:	200c      	movs	r0, #12
20001080:	183b      	adds	r3, r7, r0
20001082:	183a      	adds	r2, r7, r0
20001084:	8812      	ldrh	r2, [r2, #0]
20001086:	4919      	ldr	r1, [pc, #100]	; (200010ec <TIM_OC1Init+0x150>)
20001088:	400a      	ands	r2, r1
2000108a:	801a      	strh	r2, [r3, #0]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
2000108c:	183b      	adds	r3, r7, r0
2000108e:	183a      	adds	r2, r7, r0
20001090:	8812      	ldrh	r2, [r2, #0]
20001092:	4917      	ldr	r1, [pc, #92]	; (200010f0 <TIM_OC1Init+0x154>)
20001094:	400a      	ands	r2, r1
20001096:	801a      	strh	r2, [r3, #0]
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
20001098:	683b      	ldr	r3, [r7, #0]
2000109a:	8a19      	ldrh	r1, [r3, #16]
2000109c:	183b      	adds	r3, r7, r0
2000109e:	183a      	adds	r2, r7, r0
200010a0:	8812      	ldrh	r2, [r2, #0]
200010a2:	430a      	orrs	r2, r1
200010a4:	801a      	strh	r2, [r3, #0]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
200010a6:	683b      	ldr	r3, [r7, #0]
200010a8:	8a59      	ldrh	r1, [r3, #18]
200010aa:	183b      	adds	r3, r7, r0
200010ac:	183a      	adds	r2, r7, r0
200010ae:	8812      	ldrh	r2, [r2, #0]
200010b0:	430a      	orrs	r2, r1
200010b2:	801a      	strh	r2, [r3, #0]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
200010b4:	687b      	ldr	r3, [r7, #4]
200010b6:	220c      	movs	r2, #12
200010b8:	18ba      	adds	r2, r7, r2
200010ba:	8812      	ldrh	r2, [r2, #0]
200010bc:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
200010be:	687b      	ldr	r3, [r7, #4]
200010c0:	220a      	movs	r2, #10
200010c2:	18ba      	adds	r2, r7, r2
200010c4:	8812      	ldrh	r2, [r2, #0]
200010c6:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
200010c8:	683b      	ldr	r3, [r7, #0]
200010ca:	689a      	ldr	r2, [r3, #8]
200010cc:	687b      	ldr	r3, [r7, #4]
200010ce:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
200010d0:	687b      	ldr	r3, [r7, #4]
200010d2:	220e      	movs	r2, #14
200010d4:	18ba      	adds	r2, r7, r2
200010d6:	8812      	ldrh	r2, [r2, #0]
200010d8:	841a      	strh	r2, [r3, #32]
}
200010da:	46c0      	nop			; (mov r8, r8)
200010dc:	46bd      	mov	sp, r7
200010de:	b005      	add	sp, #20
200010e0:	bd90      	pop	{r4, r7, pc}
200010e2:	46c0      	nop			; (mov r8, r8)
200010e4:	40010000 	andmi	r0, r1, r0
200010e8:	40010400 	andmi	r0, r1, r0, lsl #8
200010ec:	fffffeff 			; <UNDEFINED> instruction: 0xfffffeff
200010f0:	fffffdff 			; <UNDEFINED> instruction: 0xfffffdff

200010f4 <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
200010f4:	b590      	push	{r4, r7, lr}
200010f6:	b085      	sub	sp, #20
200010f8:	af00      	add	r7, sp, #0
200010fa:	6078      	str	r0, [r7, #4]
200010fc:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
200010fe:	210a      	movs	r1, #10
20001100:	187b      	adds	r3, r7, r1
20001102:	2200      	movs	r2, #0
20001104:	801a      	strh	r2, [r3, #0]
20001106:	240e      	movs	r4, #14
20001108:	193b      	adds	r3, r7, r4
2000110a:	2200      	movs	r2, #0
2000110c:	801a      	strh	r2, [r3, #0]
2000110e:	200c      	movs	r0, #12
20001110:	183b      	adds	r3, r7, r0
20001112:	2200      	movs	r2, #0
20001114:	801a      	strh	r2, [r3, #0]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
20001116:	687b      	ldr	r3, [r7, #4]
20001118:	8c1b      	ldrh	r3, [r3, #32]
2000111a:	b29b      	uxth	r3, r3
2000111c:	2210      	movs	r2, #16
2000111e:	4393      	bics	r3, r2
20001120:	b29a      	uxth	r2, r3
20001122:	687b      	ldr	r3, [r7, #4]
20001124:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
20001126:	193b      	adds	r3, r7, r4
20001128:	687a      	ldr	r2, [r7, #4]
2000112a:	8c12      	ldrh	r2, [r2, #32]
2000112c:	801a      	strh	r2, [r3, #0]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
2000112e:	183b      	adds	r3, r7, r0
20001130:	687a      	ldr	r2, [r7, #4]
20001132:	8892      	ldrh	r2, [r2, #4]
20001134:	801a      	strh	r2, [r3, #0]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
20001136:	187b      	adds	r3, r7, r1
20001138:	687a      	ldr	r2, [r7, #4]
2000113a:	8b12      	ldrh	r2, [r2, #24]
2000113c:	801a      	strh	r2, [r3, #0]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
2000113e:	187b      	adds	r3, r7, r1
20001140:	0008      	movs	r0, r1
20001142:	187a      	adds	r2, r7, r1
20001144:	8812      	ldrh	r2, [r2, #0]
20001146:	4944      	ldr	r1, [pc, #272]	; (20001258 <TIM_OC2Init+0x164>)
20001148:	400a      	ands	r2, r1
2000114a:	801a      	strh	r2, [r3, #0]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
2000114c:	183b      	adds	r3, r7, r0
2000114e:	183a      	adds	r2, r7, r0
20001150:	8812      	ldrh	r2, [r2, #0]
20001152:	4942      	ldr	r1, [pc, #264]	; (2000125c <TIM_OC2Init+0x168>)
20001154:	400a      	ands	r2, r1
20001156:	801a      	strh	r2, [r3, #0]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
20001158:	683b      	ldr	r3, [r7, #0]
2000115a:	881b      	ldrh	r3, [r3, #0]
2000115c:	021b      	lsls	r3, r3, #8
2000115e:	b299      	uxth	r1, r3
20001160:	183b      	adds	r3, r7, r0
20001162:	183a      	adds	r2, r7, r0
20001164:	8812      	ldrh	r2, [r2, #0]
20001166:	430a      	orrs	r2, r1
20001168:	801a      	strh	r2, [r3, #0]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
2000116a:	0020      	movs	r0, r4
2000116c:	183b      	adds	r3, r7, r0
2000116e:	183a      	adds	r2, r7, r0
20001170:	8812      	ldrh	r2, [r2, #0]
20001172:	2120      	movs	r1, #32
20001174:	438a      	bics	r2, r1
20001176:	801a      	strh	r2, [r3, #0]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
20001178:	683b      	ldr	r3, [r7, #0]
2000117a:	899b      	ldrh	r3, [r3, #12]
2000117c:	011b      	lsls	r3, r3, #4
2000117e:	b299      	uxth	r1, r3
20001180:	183b      	adds	r3, r7, r0
20001182:	183a      	adds	r2, r7, r0
20001184:	8812      	ldrh	r2, [r2, #0]
20001186:	430a      	orrs	r2, r1
20001188:	801a      	strh	r2, [r3, #0]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
2000118a:	683b      	ldr	r3, [r7, #0]
2000118c:	885b      	ldrh	r3, [r3, #2]
2000118e:	011b      	lsls	r3, r3, #4
20001190:	b299      	uxth	r1, r3
20001192:	183b      	adds	r3, r7, r0
20001194:	183a      	adds	r2, r7, r0
20001196:	8812      	ldrh	r2, [r2, #0]
20001198:	430a      	orrs	r2, r1
2000119a:	801a      	strh	r2, [r3, #0]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
2000119c:	687b      	ldr	r3, [r7, #4]
2000119e:	4a30      	ldr	r2, [pc, #192]	; (20001260 <TIM_OC2Init+0x16c>)
200011a0:	4293      	cmp	r3, r2
200011a2:	d003      	beq.n	200011ac <TIM_OC2Init+0xb8>
200011a4:	687b      	ldr	r3, [r7, #4]
200011a6:	4a2f      	ldr	r2, [pc, #188]	; (20001264 <TIM_OC2Init+0x170>)
200011a8:	4293      	cmp	r3, r2
200011aa:	d13d      	bne.n	20001228 <TIM_OC2Init+0x134>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
200011ac:	200e      	movs	r0, #14
200011ae:	183b      	adds	r3, r7, r0
200011b0:	183a      	adds	r2, r7, r0
200011b2:	8812      	ldrh	r2, [r2, #0]
200011b4:	2180      	movs	r1, #128	; 0x80
200011b6:	438a      	bics	r2, r1
200011b8:	801a      	strh	r2, [r3, #0]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
200011ba:	683b      	ldr	r3, [r7, #0]
200011bc:	89db      	ldrh	r3, [r3, #14]
200011be:	011b      	lsls	r3, r3, #4
200011c0:	b299      	uxth	r1, r3
200011c2:	183b      	adds	r3, r7, r0
200011c4:	183a      	adds	r2, r7, r0
200011c6:	8812      	ldrh	r2, [r2, #0]
200011c8:	430a      	orrs	r2, r1
200011ca:	801a      	strh	r2, [r3, #0]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
200011cc:	183b      	adds	r3, r7, r0
200011ce:	183a      	adds	r2, r7, r0
200011d0:	8812      	ldrh	r2, [r2, #0]
200011d2:	2140      	movs	r1, #64	; 0x40
200011d4:	438a      	bics	r2, r1
200011d6:	801a      	strh	r2, [r3, #0]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
200011d8:	683b      	ldr	r3, [r7, #0]
200011da:	889b      	ldrh	r3, [r3, #4]
200011dc:	011b      	lsls	r3, r3, #4
200011de:	b299      	uxth	r1, r3
200011e0:	183b      	adds	r3, r7, r0
200011e2:	183a      	adds	r2, r7, r0
200011e4:	8812      	ldrh	r2, [r2, #0]
200011e6:	430a      	orrs	r2, r1
200011e8:	801a      	strh	r2, [r3, #0]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
200011ea:	200c      	movs	r0, #12
200011ec:	183b      	adds	r3, r7, r0
200011ee:	183a      	adds	r2, r7, r0
200011f0:	8812      	ldrh	r2, [r2, #0]
200011f2:	491d      	ldr	r1, [pc, #116]	; (20001268 <TIM_OC2Init+0x174>)
200011f4:	400a      	ands	r2, r1
200011f6:	801a      	strh	r2, [r3, #0]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
200011f8:	183b      	adds	r3, r7, r0
200011fa:	183a      	adds	r2, r7, r0
200011fc:	8812      	ldrh	r2, [r2, #0]
200011fe:	491b      	ldr	r1, [pc, #108]	; (2000126c <TIM_OC2Init+0x178>)
20001200:	400a      	ands	r2, r1
20001202:	801a      	strh	r2, [r3, #0]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
20001204:	683b      	ldr	r3, [r7, #0]
20001206:	8a1b      	ldrh	r3, [r3, #16]
20001208:	009b      	lsls	r3, r3, #2
2000120a:	b299      	uxth	r1, r3
2000120c:	183b      	adds	r3, r7, r0
2000120e:	183a      	adds	r2, r7, r0
20001210:	8812      	ldrh	r2, [r2, #0]
20001212:	430a      	orrs	r2, r1
20001214:	801a      	strh	r2, [r3, #0]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
20001216:	683b      	ldr	r3, [r7, #0]
20001218:	8a5b      	ldrh	r3, [r3, #18]
2000121a:	009b      	lsls	r3, r3, #2
2000121c:	b299      	uxth	r1, r3
2000121e:	183b      	adds	r3, r7, r0
20001220:	183a      	adds	r2, r7, r0
20001222:	8812      	ldrh	r2, [r2, #0]
20001224:	430a      	orrs	r2, r1
20001226:	801a      	strh	r2, [r3, #0]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
20001228:	687b      	ldr	r3, [r7, #4]
2000122a:	220c      	movs	r2, #12
2000122c:	18ba      	adds	r2, r7, r2
2000122e:	8812      	ldrh	r2, [r2, #0]
20001230:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
20001232:	687b      	ldr	r3, [r7, #4]
20001234:	220a      	movs	r2, #10
20001236:	18ba      	adds	r2, r7, r2
20001238:	8812      	ldrh	r2, [r2, #0]
2000123a:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
2000123c:	683b      	ldr	r3, [r7, #0]
2000123e:	689a      	ldr	r2, [r3, #8]
20001240:	687b      	ldr	r3, [r7, #4]
20001242:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
20001244:	687b      	ldr	r3, [r7, #4]
20001246:	220e      	movs	r2, #14
20001248:	18ba      	adds	r2, r7, r2
2000124a:	8812      	ldrh	r2, [r2, #0]
2000124c:	841a      	strh	r2, [r3, #32]
}
2000124e:	46c0      	nop			; (mov r8, r8)
20001250:	46bd      	mov	sp, r7
20001252:	b005      	add	sp, #20
20001254:	bd90      	pop	{r4, r7, pc}
20001256:	46c0      	nop			; (mov r8, r8)
20001258:	ffff8fff 			; <UNDEFINED> instruction: 0xffff8fff
2000125c:	fffffcff 			; <UNDEFINED> instruction: 0xfffffcff
20001260:	40010000 	andmi	r0, r1, r0
20001264:	40010400 	andmi	r0, r1, r0, lsl #8
20001268:	fffffbff 			; <UNDEFINED> instruction: 0xfffffbff
2000126c:	fffff7ff 			; <UNDEFINED> instruction: 0xfffff7ff

20001270 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
20001270:	b590      	push	{r4, r7, lr}
20001272:	b085      	sub	sp, #20
20001274:	af00      	add	r7, sp, #0
20001276:	6078      	str	r0, [r7, #4]
20001278:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
2000127a:	210a      	movs	r1, #10
2000127c:	187b      	adds	r3, r7, r1
2000127e:	2200      	movs	r2, #0
20001280:	801a      	strh	r2, [r3, #0]
20001282:	240e      	movs	r4, #14
20001284:	193b      	adds	r3, r7, r4
20001286:	2200      	movs	r2, #0
20001288:	801a      	strh	r2, [r3, #0]
2000128a:	200c      	movs	r0, #12
2000128c:	183b      	adds	r3, r7, r0
2000128e:	2200      	movs	r2, #0
20001290:	801a      	strh	r2, [r3, #0]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
20001292:	687b      	ldr	r3, [r7, #4]
20001294:	8c1b      	ldrh	r3, [r3, #32]
20001296:	b29b      	uxth	r3, r3
20001298:	4a4d      	ldr	r2, [pc, #308]	; (200013d0 <TIM_OC3Init+0x160>)
2000129a:	4013      	ands	r3, r2
2000129c:	b29a      	uxth	r2, r3
2000129e:	687b      	ldr	r3, [r7, #4]
200012a0:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
200012a2:	193b      	adds	r3, r7, r4
200012a4:	687a      	ldr	r2, [r7, #4]
200012a6:	8c12      	ldrh	r2, [r2, #32]
200012a8:	801a      	strh	r2, [r3, #0]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
200012aa:	183b      	adds	r3, r7, r0
200012ac:	687a      	ldr	r2, [r7, #4]
200012ae:	8892      	ldrh	r2, [r2, #4]
200012b0:	801a      	strh	r2, [r3, #0]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
200012b2:	187b      	adds	r3, r7, r1
200012b4:	687a      	ldr	r2, [r7, #4]
200012b6:	8b92      	ldrh	r2, [r2, #28]
200012b8:	801a      	strh	r2, [r3, #0]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
200012ba:	187b      	adds	r3, r7, r1
200012bc:	0008      	movs	r0, r1
200012be:	187a      	adds	r2, r7, r1
200012c0:	8812      	ldrh	r2, [r2, #0]
200012c2:	2170      	movs	r1, #112	; 0x70
200012c4:	438a      	bics	r2, r1
200012c6:	801a      	strh	r2, [r3, #0]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
200012c8:	183b      	adds	r3, r7, r0
200012ca:	183a      	adds	r2, r7, r0
200012cc:	8812      	ldrh	r2, [r2, #0]
200012ce:	2103      	movs	r1, #3
200012d0:	438a      	bics	r2, r1
200012d2:	801a      	strh	r2, [r3, #0]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
200012d4:	683b      	ldr	r3, [r7, #0]
200012d6:	8819      	ldrh	r1, [r3, #0]
200012d8:	183b      	adds	r3, r7, r0
200012da:	183a      	adds	r2, r7, r0
200012dc:	8812      	ldrh	r2, [r2, #0]
200012de:	430a      	orrs	r2, r1
200012e0:	801a      	strh	r2, [r3, #0]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
200012e2:	0020      	movs	r0, r4
200012e4:	183b      	adds	r3, r7, r0
200012e6:	183a      	adds	r2, r7, r0
200012e8:	8812      	ldrh	r2, [r2, #0]
200012ea:	493a      	ldr	r1, [pc, #232]	; (200013d4 <TIM_OC3Init+0x164>)
200012ec:	400a      	ands	r2, r1
200012ee:	801a      	strh	r2, [r3, #0]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
200012f0:	683b      	ldr	r3, [r7, #0]
200012f2:	899b      	ldrh	r3, [r3, #12]
200012f4:	021b      	lsls	r3, r3, #8
200012f6:	b299      	uxth	r1, r3
200012f8:	183b      	adds	r3, r7, r0
200012fa:	183a      	adds	r2, r7, r0
200012fc:	8812      	ldrh	r2, [r2, #0]
200012fe:	430a      	orrs	r2, r1
20001300:	801a      	strh	r2, [r3, #0]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
20001302:	683b      	ldr	r3, [r7, #0]
20001304:	885b      	ldrh	r3, [r3, #2]
20001306:	021b      	lsls	r3, r3, #8
20001308:	b299      	uxth	r1, r3
2000130a:	183b      	adds	r3, r7, r0
2000130c:	183a      	adds	r2, r7, r0
2000130e:	8812      	ldrh	r2, [r2, #0]
20001310:	430a      	orrs	r2, r1
20001312:	801a      	strh	r2, [r3, #0]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
20001314:	687b      	ldr	r3, [r7, #4]
20001316:	4a30      	ldr	r2, [pc, #192]	; (200013d8 <TIM_OC3Init+0x168>)
20001318:	4293      	cmp	r3, r2
2000131a:	d003      	beq.n	20001324 <TIM_OC3Init+0xb4>
2000131c:	687b      	ldr	r3, [r7, #4]
2000131e:	4a2f      	ldr	r2, [pc, #188]	; (200013dc <TIM_OC3Init+0x16c>)
20001320:	4293      	cmp	r3, r2
20001322:	d13d      	bne.n	200013a0 <TIM_OC3Init+0x130>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
20001324:	200e      	movs	r0, #14
20001326:	183b      	adds	r3, r7, r0
20001328:	183a      	adds	r2, r7, r0
2000132a:	8812      	ldrh	r2, [r2, #0]
2000132c:	492c      	ldr	r1, [pc, #176]	; (200013e0 <TIM_OC3Init+0x170>)
2000132e:	400a      	ands	r2, r1
20001330:	801a      	strh	r2, [r3, #0]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
20001332:	683b      	ldr	r3, [r7, #0]
20001334:	89db      	ldrh	r3, [r3, #14]
20001336:	021b      	lsls	r3, r3, #8
20001338:	b299      	uxth	r1, r3
2000133a:	183b      	adds	r3, r7, r0
2000133c:	183a      	adds	r2, r7, r0
2000133e:	8812      	ldrh	r2, [r2, #0]
20001340:	430a      	orrs	r2, r1
20001342:	801a      	strh	r2, [r3, #0]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
20001344:	183b      	adds	r3, r7, r0
20001346:	183a      	adds	r2, r7, r0
20001348:	8812      	ldrh	r2, [r2, #0]
2000134a:	4926      	ldr	r1, [pc, #152]	; (200013e4 <TIM_OC3Init+0x174>)
2000134c:	400a      	ands	r2, r1
2000134e:	801a      	strh	r2, [r3, #0]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
20001350:	683b      	ldr	r3, [r7, #0]
20001352:	889b      	ldrh	r3, [r3, #4]
20001354:	021b      	lsls	r3, r3, #8
20001356:	b299      	uxth	r1, r3
20001358:	183b      	adds	r3, r7, r0
2000135a:	183a      	adds	r2, r7, r0
2000135c:	8812      	ldrh	r2, [r2, #0]
2000135e:	430a      	orrs	r2, r1
20001360:	801a      	strh	r2, [r3, #0]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
20001362:	200c      	movs	r0, #12
20001364:	183b      	adds	r3, r7, r0
20001366:	183a      	adds	r2, r7, r0
20001368:	8812      	ldrh	r2, [r2, #0]
2000136a:	491f      	ldr	r1, [pc, #124]	; (200013e8 <TIM_OC3Init+0x178>)
2000136c:	400a      	ands	r2, r1
2000136e:	801a      	strh	r2, [r3, #0]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
20001370:	183b      	adds	r3, r7, r0
20001372:	183a      	adds	r2, r7, r0
20001374:	8812      	ldrh	r2, [r2, #0]
20001376:	491d      	ldr	r1, [pc, #116]	; (200013ec <TIM_OC3Init+0x17c>)
20001378:	400a      	ands	r2, r1
2000137a:	801a      	strh	r2, [r3, #0]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
2000137c:	683b      	ldr	r3, [r7, #0]
2000137e:	8a1b      	ldrh	r3, [r3, #16]
20001380:	011b      	lsls	r3, r3, #4
20001382:	b299      	uxth	r1, r3
20001384:	183b      	adds	r3, r7, r0
20001386:	183a      	adds	r2, r7, r0
20001388:	8812      	ldrh	r2, [r2, #0]
2000138a:	430a      	orrs	r2, r1
2000138c:	801a      	strh	r2, [r3, #0]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
2000138e:	683b      	ldr	r3, [r7, #0]
20001390:	8a5b      	ldrh	r3, [r3, #18]
20001392:	011b      	lsls	r3, r3, #4
20001394:	b299      	uxth	r1, r3
20001396:	183b      	adds	r3, r7, r0
20001398:	183a      	adds	r2, r7, r0
2000139a:	8812      	ldrh	r2, [r2, #0]
2000139c:	430a      	orrs	r2, r1
2000139e:	801a      	strh	r2, [r3, #0]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
200013a0:	687b      	ldr	r3, [r7, #4]
200013a2:	220c      	movs	r2, #12
200013a4:	18ba      	adds	r2, r7, r2
200013a6:	8812      	ldrh	r2, [r2, #0]
200013a8:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
200013aa:	687b      	ldr	r3, [r7, #4]
200013ac:	220a      	movs	r2, #10
200013ae:	18ba      	adds	r2, r7, r2
200013b0:	8812      	ldrh	r2, [r2, #0]
200013b2:	839a      	strh	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
200013b4:	683b      	ldr	r3, [r7, #0]
200013b6:	689a      	ldr	r2, [r3, #8]
200013b8:	687b      	ldr	r3, [r7, #4]
200013ba:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
200013bc:	687b      	ldr	r3, [r7, #4]
200013be:	220e      	movs	r2, #14
200013c0:	18ba      	adds	r2, r7, r2
200013c2:	8812      	ldrh	r2, [r2, #0]
200013c4:	841a      	strh	r2, [r3, #32]
}
200013c6:	46c0      	nop			; (mov r8, r8)
200013c8:	46bd      	mov	sp, r7
200013ca:	b005      	add	sp, #20
200013cc:	bd90      	pop	{r4, r7, pc}
200013ce:	46c0      	nop			; (mov r8, r8)
200013d0:	fffffeff 			; <UNDEFINED> instruction: 0xfffffeff
200013d4:	fffffdff 			; <UNDEFINED> instruction: 0xfffffdff
200013d8:	40010000 	andmi	r0, r1, r0
200013dc:	40010400 	andmi	r0, r1, r0, lsl #8
200013e0:	fffff7ff 			; <UNDEFINED> instruction: 0xfffff7ff
200013e4:	fffffbff 			; <UNDEFINED> instruction: 0xfffffbff
200013e8:	ffffefff 			; <UNDEFINED> instruction: 0xffffefff
200013ec:	ffffdfff 			; <UNDEFINED> instruction: 0xffffdfff

200013f0 <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
200013f0:	b590      	push	{r4, r7, lr}
200013f2:	b085      	sub	sp, #20
200013f4:	af00      	add	r7, sp, #0
200013f6:	6078      	str	r0, [r7, #4]
200013f8:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
200013fa:	210c      	movs	r1, #12
200013fc:	187b      	adds	r3, r7, r1
200013fe:	2200      	movs	r2, #0
20001400:	801a      	strh	r2, [r3, #0]
20001402:	240a      	movs	r4, #10
20001404:	193b      	adds	r3, r7, r4
20001406:	2200      	movs	r2, #0
20001408:	801a      	strh	r2, [r3, #0]
2000140a:	200e      	movs	r0, #14
2000140c:	183b      	adds	r3, r7, r0
2000140e:	2200      	movs	r2, #0
20001410:	801a      	strh	r2, [r3, #0]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
20001412:	687b      	ldr	r3, [r7, #4]
20001414:	8c1b      	ldrh	r3, [r3, #32]
20001416:	b29b      	uxth	r3, r3
20001418:	4a37      	ldr	r2, [pc, #220]	; (200014f8 <TIM_OC4Init+0x108>)
2000141a:	4013      	ands	r3, r2
2000141c:	b29a      	uxth	r2, r3
2000141e:	687b      	ldr	r3, [r7, #4]
20001420:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
20001422:	193b      	adds	r3, r7, r4
20001424:	687a      	ldr	r2, [r7, #4]
20001426:	8c12      	ldrh	r2, [r2, #32]
20001428:	801a      	strh	r2, [r3, #0]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
2000142a:	183b      	adds	r3, r7, r0
2000142c:	687a      	ldr	r2, [r7, #4]
2000142e:	8892      	ldrh	r2, [r2, #4]
20001430:	801a      	strh	r2, [r3, #0]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
20001432:	187b      	adds	r3, r7, r1
20001434:	687a      	ldr	r2, [r7, #4]
20001436:	8b92      	ldrh	r2, [r2, #28]
20001438:	801a      	strh	r2, [r3, #0]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
2000143a:	187b      	adds	r3, r7, r1
2000143c:	0008      	movs	r0, r1
2000143e:	187a      	adds	r2, r7, r1
20001440:	8812      	ldrh	r2, [r2, #0]
20001442:	492e      	ldr	r1, [pc, #184]	; (200014fc <TIM_OC4Init+0x10c>)
20001444:	400a      	ands	r2, r1
20001446:	801a      	strh	r2, [r3, #0]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
20001448:	183b      	adds	r3, r7, r0
2000144a:	183a      	adds	r2, r7, r0
2000144c:	8812      	ldrh	r2, [r2, #0]
2000144e:	492c      	ldr	r1, [pc, #176]	; (20001500 <TIM_OC4Init+0x110>)
20001450:	400a      	ands	r2, r1
20001452:	801a      	strh	r2, [r3, #0]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
20001454:	683b      	ldr	r3, [r7, #0]
20001456:	881b      	ldrh	r3, [r3, #0]
20001458:	021b      	lsls	r3, r3, #8
2000145a:	b299      	uxth	r1, r3
2000145c:	183b      	adds	r3, r7, r0
2000145e:	183a      	adds	r2, r7, r0
20001460:	8812      	ldrh	r2, [r2, #0]
20001462:	430a      	orrs	r2, r1
20001464:	801a      	strh	r2, [r3, #0]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
20001466:	0020      	movs	r0, r4
20001468:	183b      	adds	r3, r7, r0
2000146a:	183a      	adds	r2, r7, r0
2000146c:	8812      	ldrh	r2, [r2, #0]
2000146e:	4925      	ldr	r1, [pc, #148]	; (20001504 <TIM_OC4Init+0x114>)
20001470:	400a      	ands	r2, r1
20001472:	801a      	strh	r2, [r3, #0]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
20001474:	683b      	ldr	r3, [r7, #0]
20001476:	899b      	ldrh	r3, [r3, #12]
20001478:	031b      	lsls	r3, r3, #12
2000147a:	b299      	uxth	r1, r3
2000147c:	183b      	adds	r3, r7, r0
2000147e:	183a      	adds	r2, r7, r0
20001480:	8812      	ldrh	r2, [r2, #0]
20001482:	430a      	orrs	r2, r1
20001484:	801a      	strh	r2, [r3, #0]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
20001486:	683b      	ldr	r3, [r7, #0]
20001488:	885b      	ldrh	r3, [r3, #2]
2000148a:	031b      	lsls	r3, r3, #12
2000148c:	b299      	uxth	r1, r3
2000148e:	183b      	adds	r3, r7, r0
20001490:	183a      	adds	r2, r7, r0
20001492:	8812      	ldrh	r2, [r2, #0]
20001494:	430a      	orrs	r2, r1
20001496:	801a      	strh	r2, [r3, #0]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
20001498:	687b      	ldr	r3, [r7, #4]
2000149a:	4a1b      	ldr	r2, [pc, #108]	; (20001508 <TIM_OC4Init+0x118>)
2000149c:	4293      	cmp	r3, r2
2000149e:	d003      	beq.n	200014a8 <TIM_OC4Init+0xb8>
200014a0:	687b      	ldr	r3, [r7, #4]
200014a2:	4a1a      	ldr	r2, [pc, #104]	; (2000150c <TIM_OC4Init+0x11c>)
200014a4:	4293      	cmp	r3, r2
200014a6:	d10f      	bne.n	200014c8 <TIM_OC4Init+0xd8>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
200014a8:	200e      	movs	r0, #14
200014aa:	183b      	adds	r3, r7, r0
200014ac:	183a      	adds	r2, r7, r0
200014ae:	8812      	ldrh	r2, [r2, #0]
200014b0:	4917      	ldr	r1, [pc, #92]	; (20001510 <TIM_OC4Init+0x120>)
200014b2:	400a      	ands	r2, r1
200014b4:	801a      	strh	r2, [r3, #0]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
200014b6:	683b      	ldr	r3, [r7, #0]
200014b8:	8a1b      	ldrh	r3, [r3, #16]
200014ba:	019b      	lsls	r3, r3, #6
200014bc:	b299      	uxth	r1, r3
200014be:	183b      	adds	r3, r7, r0
200014c0:	183a      	adds	r2, r7, r0
200014c2:	8812      	ldrh	r2, [r2, #0]
200014c4:	430a      	orrs	r2, r1
200014c6:	801a      	strh	r2, [r3, #0]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
200014c8:	687b      	ldr	r3, [r7, #4]
200014ca:	220e      	movs	r2, #14
200014cc:	18ba      	adds	r2, r7, r2
200014ce:	8812      	ldrh	r2, [r2, #0]
200014d0:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
200014d2:	687b      	ldr	r3, [r7, #4]
200014d4:	220c      	movs	r2, #12
200014d6:	18ba      	adds	r2, r7, r2
200014d8:	8812      	ldrh	r2, [r2, #0]
200014da:	839a      	strh	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
200014dc:	683b      	ldr	r3, [r7, #0]
200014de:	689a      	ldr	r2, [r3, #8]
200014e0:	687b      	ldr	r3, [r7, #4]
200014e2:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
200014e4:	687b      	ldr	r3, [r7, #4]
200014e6:	220a      	movs	r2, #10
200014e8:	18ba      	adds	r2, r7, r2
200014ea:	8812      	ldrh	r2, [r2, #0]
200014ec:	841a      	strh	r2, [r3, #32]
}
200014ee:	46c0      	nop			; (mov r8, r8)
200014f0:	46bd      	mov	sp, r7
200014f2:	b005      	add	sp, #20
200014f4:	bd90      	pop	{r4, r7, pc}
200014f6:	46c0      	nop			; (mov r8, r8)
200014f8:	ffffefff 			; <UNDEFINED> instruction: 0xffffefff
200014fc:	ffff8fff 			; <UNDEFINED> instruction: 0xffff8fff
20001500:	fffffcff 			; <UNDEFINED> instruction: 0xfffffcff
20001504:	ffffdfff 			; <UNDEFINED> instruction: 0xffffdfff
20001508:	40010000 	andmi	r0, r1, r0
2000150c:	40010400 	andmi	r0, r1, r0, lsl #8
20001510:	ffffbfff 			; <UNDEFINED> instruction: 0xffffbfff

20001514 <TIM_OCStructInit>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
20001514:	b580      	push	{r7, lr}
20001516:	b082      	sub	sp, #8
20001518:	af00      	add	r7, sp, #0
2000151a:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
2000151c:	687b      	ldr	r3, [r7, #4]
2000151e:	2200      	movs	r2, #0
20001520:	801a      	strh	r2, [r3, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
20001522:	687b      	ldr	r3, [r7, #4]
20001524:	2200      	movs	r2, #0
20001526:	805a      	strh	r2, [r3, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
20001528:	687b      	ldr	r3, [r7, #4]
2000152a:	2200      	movs	r2, #0
2000152c:	809a      	strh	r2, [r3, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x00000000;
2000152e:	687b      	ldr	r3, [r7, #4]
20001530:	2200      	movs	r2, #0
20001532:	609a      	str	r2, [r3, #8]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
20001534:	687b      	ldr	r3, [r7, #4]
20001536:	2200      	movs	r2, #0
20001538:	819a      	strh	r2, [r3, #12]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
2000153a:	687b      	ldr	r3, [r7, #4]
2000153c:	2200      	movs	r2, #0
2000153e:	81da      	strh	r2, [r3, #14]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
20001540:	687b      	ldr	r3, [r7, #4]
20001542:	2200      	movs	r2, #0
20001544:	821a      	strh	r2, [r3, #16]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
20001546:	687b      	ldr	r3, [r7, #4]
20001548:	2200      	movs	r2, #0
2000154a:	825a      	strh	r2, [r3, #18]
}
2000154c:	46c0      	nop			; (mov r8, r8)
2000154e:	46bd      	mov	sp, r7
20001550:	b002      	add	sp, #8
20001552:	bd80      	pop	{r7, pc}

20001554 <TIM_SelectOCxM>:
  *            @arg TIM_ForcedAction_Active
  *            @arg TIM_ForcedAction_InActive
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
{
20001554:	b580      	push	{r7, lr}
20001556:	b084      	sub	sp, #16
20001558:	af00      	add	r7, sp, #0
2000155a:	6078      	str	r0, [r7, #4]
2000155c:	0008      	movs	r0, r1
2000155e:	0011      	movs	r1, r2
20001560:	1cbb      	adds	r3, r7, #2
20001562:	1c02      	adds	r2, r0, #0
20001564:	801a      	strh	r2, [r3, #0]
20001566:	003b      	movs	r3, r7
20001568:	1c0a      	adds	r2, r1, #0
2000156a:	801a      	strh	r2, [r3, #0]
  uint32_t tmp = 0;
2000156c:	2300      	movs	r3, #0
2000156e:	60fb      	str	r3, [r7, #12]
  uint16_t tmp1 = 0;
20001570:	210a      	movs	r1, #10
20001572:	187b      	adds	r3, r7, r1
20001574:	2200      	movs	r2, #0
20001576:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
20001578:	687b      	ldr	r3, [r7, #4]
2000157a:	60fb      	str	r3, [r7, #12]
  tmp += CCMR_OFFSET;
2000157c:	68fb      	ldr	r3, [r7, #12]
2000157e:	3318      	adds	r3, #24
20001580:	60fb      	str	r3, [r7, #12]

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
20001582:	1cbb      	adds	r3, r7, #2
20001584:	881b      	ldrh	r3, [r3, #0]
20001586:	2201      	movs	r2, #1
20001588:	409a      	lsls	r2, r3
2000158a:	187b      	adds	r3, r7, r1
2000158c:	801a      	strh	r2, [r3, #0]

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
2000158e:	687b      	ldr	r3, [r7, #4]
20001590:	8c1b      	ldrh	r3, [r3, #32]
20001592:	b29b      	uxth	r3, r3
20001594:	187a      	adds	r2, r7, r1
20001596:	8812      	ldrh	r2, [r2, #0]
20001598:	43d2      	mvns	r2, r2
2000159a:	b292      	uxth	r2, r2
2000159c:	4013      	ands	r3, r2
2000159e:	b29a      	uxth	r2, r3
200015a0:	687b      	ldr	r3, [r7, #4]
200015a2:	841a      	strh	r2, [r3, #32]

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
200015a4:	1cbb      	adds	r3, r7, #2
200015a6:	881b      	ldrh	r3, [r3, #0]
200015a8:	2b00      	cmp	r3, #0
200015aa:	d003      	beq.n	200015b4 <TIM_SelectOCxM+0x60>
200015ac:	1cbb      	adds	r3, r7, #2
200015ae:	881b      	ldrh	r3, [r3, #0]
200015b0:	2b08      	cmp	r3, #8
200015b2:	d115      	bne.n	200015e0 <TIM_SelectOCxM+0x8c>
  {
    tmp += (TIM_Channel>>1);
200015b4:	1cbb      	adds	r3, r7, #2
200015b6:	881b      	ldrh	r3, [r3, #0]
200015b8:	085b      	lsrs	r3, r3, #1
200015ba:	b29b      	uxth	r3, r3
200015bc:	001a      	movs	r2, r3
200015be:	68fb      	ldr	r3, [r7, #12]
200015c0:	189b      	adds	r3, r3, r2
200015c2:	60fb      	str	r3, [r7, #12]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC13M_MASK;
200015c4:	68fb      	ldr	r3, [r7, #12]
200015c6:	681a      	ldr	r2, [r3, #0]
200015c8:	68fb      	ldr	r3, [r7, #12]
200015ca:	4915      	ldr	r1, [pc, #84]	; (20001620 <TIM_SelectOCxM+0xcc>)
200015cc:	400a      	ands	r2, r1
200015ce:	601a      	str	r2, [r3, #0]
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
200015d0:	68fb      	ldr	r3, [r7, #12]
200015d2:	6819      	ldr	r1, [r3, #0]
200015d4:	003b      	movs	r3, r7
200015d6:	881a      	ldrh	r2, [r3, #0]
200015d8:	68fb      	ldr	r3, [r7, #12]
200015da:	430a      	orrs	r2, r1
200015dc:	601a      	str	r2, [r3, #0]
200015de:	e01a      	b.n	20001616 <TIM_SelectOCxM+0xc2>
  }
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
200015e0:	1cbb      	adds	r3, r7, #2
200015e2:	881b      	ldrh	r3, [r3, #0]
200015e4:	3b04      	subs	r3, #4
200015e6:	b29b      	uxth	r3, r3
200015e8:	085b      	lsrs	r3, r3, #1
200015ea:	b29b      	uxth	r3, r3
200015ec:	001a      	movs	r2, r3
200015ee:	68fb      	ldr	r3, [r7, #12]
200015f0:	189b      	adds	r3, r3, r2
200015f2:	60fb      	str	r3, [r7, #12]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC24M_MASK;
200015f4:	68fb      	ldr	r3, [r7, #12]
200015f6:	681a      	ldr	r2, [r3, #0]
200015f8:	68fb      	ldr	r3, [r7, #12]
200015fa:	490a      	ldr	r1, [pc, #40]	; (20001624 <TIM_SelectOCxM+0xd0>)
200015fc:	400a      	ands	r2, r1
200015fe:	601a      	str	r2, [r3, #0]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
20001600:	68fb      	ldr	r3, [r7, #12]
20001602:	681a      	ldr	r2, [r3, #0]
20001604:	003b      	movs	r3, r7
20001606:	881b      	ldrh	r3, [r3, #0]
20001608:	021b      	lsls	r3, r3, #8
2000160a:	b29b      	uxth	r3, r3
2000160c:	0019      	movs	r1, r3
2000160e:	68fb      	ldr	r3, [r7, #12]
20001610:	430a      	orrs	r2, r1
20001612:	601a      	str	r2, [r3, #0]
  }
}
20001614:	46c0      	nop			; (mov r8, r8)
20001616:	46c0      	nop			; (mov r8, r8)
20001618:	46bd      	mov	sp, r7
2000161a:	b004      	add	sp, #16
2000161c:	bd80      	pop	{r7, pc}
2000161e:	46c0      	nop			; (mov r8, r8)
20001620:	0000ff8f 	andeq	pc, r0, pc, lsl #31
20001624:	00008fff 	strdeq	r8, [r0], -pc	; <UNPREDICTABLE>

20001628 <TIM_SetCompare1>:
  * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint32_t Compare1)
{
20001628:	b580      	push	{r7, lr}
2000162a:	b082      	sub	sp, #8
2000162c:	af00      	add	r7, sp, #0
2000162e:	6078      	str	r0, [r7, #4]
20001630:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
20001632:	687b      	ldr	r3, [r7, #4]
20001634:	683a      	ldr	r2, [r7, #0]
20001636:	635a      	str	r2, [r3, #52]	; 0x34
}
20001638:	46c0      	nop			; (mov r8, r8)
2000163a:	46bd      	mov	sp, r7
2000163c:	b002      	add	sp, #8
2000163e:	bd80      	pop	{r7, pc}

20001640 <TIM_SetCompare2>:
  *         peripheral.
  * @param  Compare2: specifies the Capture Compare2 register new value.
  * @retval None
  */
void TIM_SetCompare2(TIM_TypeDef* TIMx, uint32_t Compare2)
{
20001640:	b580      	push	{r7, lr}
20001642:	b082      	sub	sp, #8
20001644:	af00      	add	r7, sp, #0
20001646:	6078      	str	r0, [r7, #4]
20001648:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
2000164a:	687b      	ldr	r3, [r7, #4]
2000164c:	683a      	ldr	r2, [r7, #0]
2000164e:	639a      	str	r2, [r3, #56]	; 0x38
}
20001650:	46c0      	nop			; (mov r8, r8)
20001652:	46bd      	mov	sp, r7
20001654:	b002      	add	sp, #8
20001656:	bd80      	pop	{r7, pc}

20001658 <TIM_SetCompare3>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare3: specifies the Capture Compare3 register new value.
  * @retval None
  */
void TIM_SetCompare3(TIM_TypeDef* TIMx, uint32_t Compare3)
{
20001658:	b580      	push	{r7, lr}
2000165a:	b082      	sub	sp, #8
2000165c:	af00      	add	r7, sp, #0
2000165e:	6078      	str	r0, [r7, #4]
20001660:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
20001662:	687b      	ldr	r3, [r7, #4]
20001664:	683a      	ldr	r2, [r7, #0]
20001666:	63da      	str	r2, [r3, #60]	; 0x3c
}
20001668:	46c0      	nop			; (mov r8, r8)
2000166a:	46bd      	mov	sp, r7
2000166c:	b002      	add	sp, #8
2000166e:	bd80      	pop	{r7, pc}

20001670 <TIM_SetCompare4>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare4: specifies the Capture Compare4 register new value.
  * @retval None
  */
void TIM_SetCompare4(TIM_TypeDef* TIMx, uint32_t Compare4)
{
20001670:	b580      	push	{r7, lr}
20001672:	b082      	sub	sp, #8
20001674:	af00      	add	r7, sp, #0
20001676:	6078      	str	r0, [r7, #4]
20001678:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
2000167a:	687b      	ldr	r3, [r7, #4]
2000167c:	683a      	ldr	r2, [r7, #0]
2000167e:	641a      	str	r2, [r3, #64]	; 0x40
}
20001680:	46c0      	nop			; (mov r8, r8)
20001682:	46bd      	mov	sp, r7
20001684:	b002      	add	sp, #8
20001686:	bd80      	pop	{r7, pc}

20001688 <TIM_ForcedOC1Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC1REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC1REF.
  * @retval None
  */
void TIM_ForcedOC1Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
20001688:	b580      	push	{r7, lr}
2000168a:	b084      	sub	sp, #16
2000168c:	af00      	add	r7, sp, #0
2000168e:	6078      	str	r0, [r7, #4]
20001690:	000a      	movs	r2, r1
20001692:	1cbb      	adds	r3, r7, #2
20001694:	801a      	strh	r2, [r3, #0]
  uint16_t tmpccmr1 = 0;
20001696:	200e      	movs	r0, #14
20001698:	183b      	adds	r3, r7, r0
2000169a:	2200      	movs	r2, #0
2000169c:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
2000169e:	183b      	adds	r3, r7, r0
200016a0:	687a      	ldr	r2, [r7, #4]
200016a2:	8b12      	ldrh	r2, [r2, #24]
200016a4:	801a      	strh	r2, [r3, #0]

  /* Reset the OC1M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1M;
200016a6:	183b      	adds	r3, r7, r0
200016a8:	183a      	adds	r2, r7, r0
200016aa:	8812      	ldrh	r2, [r2, #0]
200016ac:	2170      	movs	r1, #112	; 0x70
200016ae:	438a      	bics	r2, r1
200016b0:	801a      	strh	r2, [r3, #0]

  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
200016b2:	183b      	adds	r3, r7, r0
200016b4:	1839      	adds	r1, r7, r0
200016b6:	1cba      	adds	r2, r7, #2
200016b8:	8809      	ldrh	r1, [r1, #0]
200016ba:	8812      	ldrh	r2, [r2, #0]
200016bc:	430a      	orrs	r2, r1
200016be:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
200016c0:	687b      	ldr	r3, [r7, #4]
200016c2:	183a      	adds	r2, r7, r0
200016c4:	8812      	ldrh	r2, [r2, #0]
200016c6:	831a      	strh	r2, [r3, #24]
}
200016c8:	46c0      	nop			; (mov r8, r8)
200016ca:	46bd      	mov	sp, r7
200016cc:	b004      	add	sp, #16
200016ce:	bd80      	pop	{r7, pc}

200016d0 <TIM_ForcedOC2Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC2REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC2REF.
  * @retval None
  */
void TIM_ForcedOC2Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
200016d0:	b580      	push	{r7, lr}
200016d2:	b084      	sub	sp, #16
200016d4:	af00      	add	r7, sp, #0
200016d6:	6078      	str	r0, [r7, #4]
200016d8:	000a      	movs	r2, r1
200016da:	1cbb      	adds	r3, r7, #2
200016dc:	801a      	strh	r2, [r3, #0]
  uint16_t tmpccmr1 = 0;
200016de:	200e      	movs	r0, #14
200016e0:	183b      	adds	r3, r7, r0
200016e2:	2200      	movs	r2, #0
200016e4:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
200016e6:	183b      	adds	r3, r7, r0
200016e8:	687a      	ldr	r2, [r7, #4]
200016ea:	8b12      	ldrh	r2, [r2, #24]
200016ec:	801a      	strh	r2, [r3, #0]

  /* Reset the OC2M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2M;
200016ee:	183b      	adds	r3, r7, r0
200016f0:	183a      	adds	r2, r7, r0
200016f2:	8812      	ldrh	r2, [r2, #0]
200016f4:	4909      	ldr	r1, [pc, #36]	; (2000171c <TIM_ForcedOC2Config+0x4c>)
200016f6:	400a      	ands	r2, r1
200016f8:	801a      	strh	r2, [r3, #0]

  /* Configure The Forced output Mode */
  tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
200016fa:	1cbb      	adds	r3, r7, #2
200016fc:	881b      	ldrh	r3, [r3, #0]
200016fe:	021b      	lsls	r3, r3, #8
20001700:	b299      	uxth	r1, r3
20001702:	183b      	adds	r3, r7, r0
20001704:	183a      	adds	r2, r7, r0
20001706:	8812      	ldrh	r2, [r2, #0]
20001708:	430a      	orrs	r2, r1
2000170a:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
2000170c:	687b      	ldr	r3, [r7, #4]
2000170e:	183a      	adds	r2, r7, r0
20001710:	8812      	ldrh	r2, [r2, #0]
20001712:	831a      	strh	r2, [r3, #24]
}
20001714:	46c0      	nop			; (mov r8, r8)
20001716:	46bd      	mov	sp, r7
20001718:	b004      	add	sp, #16
2000171a:	bd80      	pop	{r7, pc}
2000171c:	ffff8fff 			; <UNDEFINED> instruction: 0xffff8fff

20001720 <TIM_ForcedOC3Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC3REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC3REF.
  * @retval None
  */
void TIM_ForcedOC3Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
20001720:	b580      	push	{r7, lr}
20001722:	b084      	sub	sp, #16
20001724:	af00      	add	r7, sp, #0
20001726:	6078      	str	r0, [r7, #4]
20001728:	000a      	movs	r2, r1
2000172a:	1cbb      	adds	r3, r7, #2
2000172c:	801a      	strh	r2, [r3, #0]
  uint16_t tmpccmr2 = 0;
2000172e:	200e      	movs	r0, #14
20001730:	183b      	adds	r3, r7, r0
20001732:	2200      	movs	r2, #0
20001734:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));

  tmpccmr2 = TIMx->CCMR2;
20001736:	183b      	adds	r3, r7, r0
20001738:	687a      	ldr	r2, [r7, #4]
2000173a:	8b92      	ldrh	r2, [r2, #28]
2000173c:	801a      	strh	r2, [r3, #0]

  /* Reset the OC1M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3M;
2000173e:	183b      	adds	r3, r7, r0
20001740:	183a      	adds	r2, r7, r0
20001742:	8812      	ldrh	r2, [r2, #0]
20001744:	2170      	movs	r1, #112	; 0x70
20001746:	438a      	bics	r2, r1
20001748:	801a      	strh	r2, [r3, #0]

  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
2000174a:	183b      	adds	r3, r7, r0
2000174c:	1839      	adds	r1, r7, r0
2000174e:	1cba      	adds	r2, r7, #2
20001750:	8809      	ldrh	r1, [r1, #0]
20001752:	8812      	ldrh	r2, [r2, #0]
20001754:	430a      	orrs	r2, r1
20001756:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
20001758:	687b      	ldr	r3, [r7, #4]
2000175a:	183a      	adds	r2, r7, r0
2000175c:	8812      	ldrh	r2, [r2, #0]
2000175e:	839a      	strh	r2, [r3, #28]
}
20001760:	46c0      	nop			; (mov r8, r8)
20001762:	46bd      	mov	sp, r7
20001764:	b004      	add	sp, #16
20001766:	bd80      	pop	{r7, pc}

20001768 <TIM_ForcedOC4Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC4REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC4REF.
  * @retval None
  */
void TIM_ForcedOC4Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
20001768:	b580      	push	{r7, lr}
2000176a:	b084      	sub	sp, #16
2000176c:	af00      	add	r7, sp, #0
2000176e:	6078      	str	r0, [r7, #4]
20001770:	000a      	movs	r2, r1
20001772:	1cbb      	adds	r3, r7, #2
20001774:	801a      	strh	r2, [r3, #0]
  uint16_t tmpccmr2 = 0;
20001776:	200e      	movs	r0, #14
20001778:	183b      	adds	r3, r7, r0
2000177a:	2200      	movs	r2, #0
2000177c:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
2000177e:	183b      	adds	r3, r7, r0
20001780:	687a      	ldr	r2, [r7, #4]
20001782:	8b92      	ldrh	r2, [r2, #28]
20001784:	801a      	strh	r2, [r3, #0]

  /* Reset the OC2M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4M;
20001786:	183b      	adds	r3, r7, r0
20001788:	183a      	adds	r2, r7, r0
2000178a:	8812      	ldrh	r2, [r2, #0]
2000178c:	4909      	ldr	r1, [pc, #36]	; (200017b4 <TIM_ForcedOC4Config+0x4c>)
2000178e:	400a      	ands	r2, r1
20001790:	801a      	strh	r2, [r3, #0]

  /* Configure The Forced output Mode */
  tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
20001792:	1cbb      	adds	r3, r7, #2
20001794:	881b      	ldrh	r3, [r3, #0]
20001796:	021b      	lsls	r3, r3, #8
20001798:	b299      	uxth	r1, r3
2000179a:	183b      	adds	r3, r7, r0
2000179c:	183a      	adds	r2, r7, r0
2000179e:	8812      	ldrh	r2, [r2, #0]
200017a0:	430a      	orrs	r2, r1
200017a2:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
200017a4:	687b      	ldr	r3, [r7, #4]
200017a6:	183a      	adds	r2, r7, r0
200017a8:	8812      	ldrh	r2, [r2, #0]
200017aa:	839a      	strh	r2, [r3, #28]
}
200017ac:	46c0      	nop			; (mov r8, r8)
200017ae:	46bd      	mov	sp, r7
200017b0:	b004      	add	sp, #16
200017b2:	bd80      	pop	{r7, pc}
200017b4:	ffff8fff 			; <UNDEFINED> instruction: 0xffff8fff

200017b8 <TIM_OC1PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
200017b8:	b580      	push	{r7, lr}
200017ba:	b084      	sub	sp, #16
200017bc:	af00      	add	r7, sp, #0
200017be:	6078      	str	r0, [r7, #4]
200017c0:	000a      	movs	r2, r1
200017c2:	1cbb      	adds	r3, r7, #2
200017c4:	801a      	strh	r2, [r3, #0]
  uint16_t tmpccmr1 = 0;
200017c6:	200e      	movs	r0, #14
200017c8:	183b      	adds	r3, r7, r0
200017ca:	2200      	movs	r2, #0
200017cc:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
200017ce:	183b      	adds	r3, r7, r0
200017d0:	687a      	ldr	r2, [r7, #4]
200017d2:	8b12      	ldrh	r2, [r2, #24]
200017d4:	801a      	strh	r2, [r3, #0]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC1PE);
200017d6:	183b      	adds	r3, r7, r0
200017d8:	183a      	adds	r2, r7, r0
200017da:	8812      	ldrh	r2, [r2, #0]
200017dc:	2108      	movs	r1, #8
200017de:	438a      	bics	r2, r1
200017e0:	801a      	strh	r2, [r3, #0]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
200017e2:	183b      	adds	r3, r7, r0
200017e4:	1839      	adds	r1, r7, r0
200017e6:	1cba      	adds	r2, r7, #2
200017e8:	8809      	ldrh	r1, [r1, #0]
200017ea:	8812      	ldrh	r2, [r2, #0]
200017ec:	430a      	orrs	r2, r1
200017ee:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
200017f0:	687b      	ldr	r3, [r7, #4]
200017f2:	183a      	adds	r2, r7, r0
200017f4:	8812      	ldrh	r2, [r2, #0]
200017f6:	831a      	strh	r2, [r3, #24]
}
200017f8:	46c0      	nop			; (mov r8, r8)
200017fa:	46bd      	mov	sp, r7
200017fc:	b004      	add	sp, #16
200017fe:	bd80      	pop	{r7, pc}

20001800 <TIM_OC2PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
20001800:	b580      	push	{r7, lr}
20001802:	b084      	sub	sp, #16
20001804:	af00      	add	r7, sp, #0
20001806:	6078      	str	r0, [r7, #4]
20001808:	000a      	movs	r2, r1
2000180a:	1cbb      	adds	r3, r7, #2
2000180c:	801a      	strh	r2, [r3, #0]
  uint16_t tmpccmr1 = 0;
2000180e:	200e      	movs	r0, #14
20001810:	183b      	adds	r3, r7, r0
20001812:	2200      	movs	r2, #0
20001814:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
20001816:	183b      	adds	r3, r7, r0
20001818:	687a      	ldr	r2, [r7, #4]
2000181a:	8b12      	ldrh	r2, [r2, #24]
2000181c:	801a      	strh	r2, [r3, #0]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2PE);
2000181e:	183b      	adds	r3, r7, r0
20001820:	183a      	adds	r2, r7, r0
20001822:	8812      	ldrh	r2, [r2, #0]
20001824:	4909      	ldr	r1, [pc, #36]	; (2000184c <TIM_OC2PreloadConfig+0x4c>)
20001826:	400a      	ands	r2, r1
20001828:	801a      	strh	r2, [r3, #0]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
2000182a:	1cbb      	adds	r3, r7, #2
2000182c:	881b      	ldrh	r3, [r3, #0]
2000182e:	021b      	lsls	r3, r3, #8
20001830:	b299      	uxth	r1, r3
20001832:	183b      	adds	r3, r7, r0
20001834:	183a      	adds	r2, r7, r0
20001836:	8812      	ldrh	r2, [r2, #0]
20001838:	430a      	orrs	r2, r1
2000183a:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
2000183c:	687b      	ldr	r3, [r7, #4]
2000183e:	183a      	adds	r2, r7, r0
20001840:	8812      	ldrh	r2, [r2, #0]
20001842:	831a      	strh	r2, [r3, #24]
}
20001844:	46c0      	nop			; (mov r8, r8)
20001846:	46bd      	mov	sp, r7
20001848:	b004      	add	sp, #16
2000184a:	bd80      	pop	{r7, pc}
2000184c:	fffff7ff 			; <UNDEFINED> instruction: 0xfffff7ff

20001850 <TIM_OC3PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
20001850:	b580      	push	{r7, lr}
20001852:	b084      	sub	sp, #16
20001854:	af00      	add	r7, sp, #0
20001856:	6078      	str	r0, [r7, #4]
20001858:	000a      	movs	r2, r1
2000185a:	1cbb      	adds	r3, r7, #2
2000185c:	801a      	strh	r2, [r3, #0]
  uint16_t tmpccmr2 = 0;
2000185e:	200e      	movs	r0, #14
20001860:	183b      	adds	r3, r7, r0
20001862:	2200      	movs	r2, #0
20001864:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
20001866:	183b      	adds	r3, r7, r0
20001868:	687a      	ldr	r2, [r7, #4]
2000186a:	8b92      	ldrh	r2, [r2, #28]
2000186c:	801a      	strh	r2, [r3, #0]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
2000186e:	183b      	adds	r3, r7, r0
20001870:	183a      	adds	r2, r7, r0
20001872:	8812      	ldrh	r2, [r2, #0]
20001874:	2108      	movs	r1, #8
20001876:	438a      	bics	r2, r1
20001878:	801a      	strh	r2, [r3, #0]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
2000187a:	183b      	adds	r3, r7, r0
2000187c:	1839      	adds	r1, r7, r0
2000187e:	1cba      	adds	r2, r7, #2
20001880:	8809      	ldrh	r1, [r1, #0]
20001882:	8812      	ldrh	r2, [r2, #0]
20001884:	430a      	orrs	r2, r1
20001886:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
20001888:	687b      	ldr	r3, [r7, #4]
2000188a:	183a      	adds	r2, r7, r0
2000188c:	8812      	ldrh	r2, [r2, #0]
2000188e:	839a      	strh	r2, [r3, #28]
}
20001890:	46c0      	nop			; (mov r8, r8)
20001892:	46bd      	mov	sp, r7
20001894:	b004      	add	sp, #16
20001896:	bd80      	pop	{r7, pc}

20001898 <TIM_OC4PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
20001898:	b580      	push	{r7, lr}
2000189a:	b084      	sub	sp, #16
2000189c:	af00      	add	r7, sp, #0
2000189e:	6078      	str	r0, [r7, #4]
200018a0:	000a      	movs	r2, r1
200018a2:	1cbb      	adds	r3, r7, #2
200018a4:	801a      	strh	r2, [r3, #0]
  uint16_t tmpccmr2 = 0;
200018a6:	200e      	movs	r0, #14
200018a8:	183b      	adds	r3, r7, r0
200018aa:	2200      	movs	r2, #0
200018ac:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
200018ae:	183b      	adds	r3, r7, r0
200018b0:	687a      	ldr	r2, [r7, #4]
200018b2:	8b92      	ldrh	r2, [r2, #28]
200018b4:	801a      	strh	r2, [r3, #0]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
200018b6:	183b      	adds	r3, r7, r0
200018b8:	183a      	adds	r2, r7, r0
200018ba:	8812      	ldrh	r2, [r2, #0]
200018bc:	4909      	ldr	r1, [pc, #36]	; (200018e4 <TIM_OC4PreloadConfig+0x4c>)
200018be:	400a      	ands	r2, r1
200018c0:	801a      	strh	r2, [r3, #0]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
200018c2:	1cbb      	adds	r3, r7, #2
200018c4:	881b      	ldrh	r3, [r3, #0]
200018c6:	021b      	lsls	r3, r3, #8
200018c8:	b299      	uxth	r1, r3
200018ca:	183b      	adds	r3, r7, r0
200018cc:	183a      	adds	r2, r7, r0
200018ce:	8812      	ldrh	r2, [r2, #0]
200018d0:	430a      	orrs	r2, r1
200018d2:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
200018d4:	687b      	ldr	r3, [r7, #4]
200018d6:	183a      	adds	r2, r7, r0
200018d8:	8812      	ldrh	r2, [r2, #0]
200018da:	839a      	strh	r2, [r3, #28]
}
200018dc:	46c0      	nop			; (mov r8, r8)
200018de:	46bd      	mov	sp, r7
200018e0:	b004      	add	sp, #16
200018e2:	bd80      	pop	{r7, pc}
200018e4:	fffff7ff 			; <UNDEFINED> instruction: 0xfffff7ff

200018e8 <TIM_OC1FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC1FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
200018e8:	b580      	push	{r7, lr}
200018ea:	b084      	sub	sp, #16
200018ec:	af00      	add	r7, sp, #0
200018ee:	6078      	str	r0, [r7, #4]
200018f0:	000a      	movs	r2, r1
200018f2:	1cbb      	adds	r3, r7, #2
200018f4:	801a      	strh	r2, [r3, #0]
  uint16_t tmpccmr1 = 0;
200018f6:	200e      	movs	r0, #14
200018f8:	183b      	adds	r3, r7, r0
200018fa:	2200      	movs	r2, #0
200018fc:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
200018fe:	183b      	adds	r3, r7, r0
20001900:	687a      	ldr	r2, [r7, #4]
20001902:	8b12      	ldrh	r2, [r2, #24]
20001904:	801a      	strh	r2, [r3, #0]

  /* Reset the OC1FE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1FE;
20001906:	183b      	adds	r3, r7, r0
20001908:	183a      	adds	r2, r7, r0
2000190a:	8812      	ldrh	r2, [r2, #0]
2000190c:	2104      	movs	r1, #4
2000190e:	438a      	bics	r2, r1
20001910:	801a      	strh	r2, [r3, #0]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
20001912:	183b      	adds	r3, r7, r0
20001914:	1839      	adds	r1, r7, r0
20001916:	1cba      	adds	r2, r7, #2
20001918:	8809      	ldrh	r1, [r1, #0]
2000191a:	8812      	ldrh	r2, [r2, #0]
2000191c:	430a      	orrs	r2, r1
2000191e:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
20001920:	687b      	ldr	r3, [r7, #4]
20001922:	183a      	adds	r2, r7, r0
20001924:	8812      	ldrh	r2, [r2, #0]
20001926:	831a      	strh	r2, [r3, #24]
}
20001928:	46c0      	nop			; (mov r8, r8)
2000192a:	46bd      	mov	sp, r7
2000192c:	b004      	add	sp, #16
2000192e:	bd80      	pop	{r7, pc}

20001930 <TIM_OC2FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC2FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
20001930:	b580      	push	{r7, lr}
20001932:	b084      	sub	sp, #16
20001934:	af00      	add	r7, sp, #0
20001936:	6078      	str	r0, [r7, #4]
20001938:	000a      	movs	r2, r1
2000193a:	1cbb      	adds	r3, r7, #2
2000193c:	801a      	strh	r2, [r3, #0]
  uint16_t tmpccmr1 = 0;
2000193e:	200e      	movs	r0, #14
20001940:	183b      	adds	r3, r7, r0
20001942:	2200      	movs	r2, #0
20001944:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
20001946:	183b      	adds	r3, r7, r0
20001948:	687a      	ldr	r2, [r7, #4]
2000194a:	8b12      	ldrh	r2, [r2, #24]
2000194c:	801a      	strh	r2, [r3, #0]

  /* Reset the OC2FE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2FE);
2000194e:	183b      	adds	r3, r7, r0
20001950:	183a      	adds	r2, r7, r0
20001952:	8812      	ldrh	r2, [r2, #0]
20001954:	4909      	ldr	r1, [pc, #36]	; (2000197c <TIM_OC2FastConfig+0x4c>)
20001956:	400a      	ands	r2, r1
20001958:	801a      	strh	r2, [r3, #0]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
2000195a:	1cbb      	adds	r3, r7, #2
2000195c:	881b      	ldrh	r3, [r3, #0]
2000195e:	021b      	lsls	r3, r3, #8
20001960:	b299      	uxth	r1, r3
20001962:	183b      	adds	r3, r7, r0
20001964:	183a      	adds	r2, r7, r0
20001966:	8812      	ldrh	r2, [r2, #0]
20001968:	430a      	orrs	r2, r1
2000196a:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
2000196c:	687b      	ldr	r3, [r7, #4]
2000196e:	183a      	adds	r2, r7, r0
20001970:	8812      	ldrh	r2, [r2, #0]
20001972:	831a      	strh	r2, [r3, #24]
}
20001974:	46c0      	nop			; (mov r8, r8)
20001976:	46bd      	mov	sp, r7
20001978:	b004      	add	sp, #16
2000197a:	bd80      	pop	{r7, pc}
2000197c:	fffffbff 			; <UNDEFINED> instruction: 0xfffffbff

20001980 <TIM_OC3FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC3FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
20001980:	b580      	push	{r7, lr}
20001982:	b084      	sub	sp, #16
20001984:	af00      	add	r7, sp, #0
20001986:	6078      	str	r0, [r7, #4]
20001988:	000a      	movs	r2, r1
2000198a:	1cbb      	adds	r3, r7, #2
2000198c:	801a      	strh	r2, [r3, #0]
  uint16_t tmpccmr2 = 0;
2000198e:	200e      	movs	r0, #14
20001990:	183b      	adds	r3, r7, r0
20001992:	2200      	movs	r2, #0
20001994:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
20001996:	183b      	adds	r3, r7, r0
20001998:	687a      	ldr	r2, [r7, #4]
2000199a:	8b92      	ldrh	r2, [r2, #28]
2000199c:	801a      	strh	r2, [r3, #0]

  /* Reset the OC3FE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3FE;
2000199e:	183b      	adds	r3, r7, r0
200019a0:	183a      	adds	r2, r7, r0
200019a2:	8812      	ldrh	r2, [r2, #0]
200019a4:	2104      	movs	r1, #4
200019a6:	438a      	bics	r2, r1
200019a8:	801a      	strh	r2, [r3, #0]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
200019aa:	183b      	adds	r3, r7, r0
200019ac:	1839      	adds	r1, r7, r0
200019ae:	1cba      	adds	r2, r7, #2
200019b0:	8809      	ldrh	r1, [r1, #0]
200019b2:	8812      	ldrh	r2, [r2, #0]
200019b4:	430a      	orrs	r2, r1
200019b6:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
200019b8:	687b      	ldr	r3, [r7, #4]
200019ba:	183a      	adds	r2, r7, r0
200019bc:	8812      	ldrh	r2, [r2, #0]
200019be:	839a      	strh	r2, [r3, #28]
}
200019c0:	46c0      	nop			; (mov r8, r8)
200019c2:	46bd      	mov	sp, r7
200019c4:	b004      	add	sp, #16
200019c6:	bd80      	pop	{r7, pc}

200019c8 <TIM_OC4FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC4FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
200019c8:	b580      	push	{r7, lr}
200019ca:	b084      	sub	sp, #16
200019cc:	af00      	add	r7, sp, #0
200019ce:	6078      	str	r0, [r7, #4]
200019d0:	000a      	movs	r2, r1
200019d2:	1cbb      	adds	r3, r7, #2
200019d4:	801a      	strh	r2, [r3, #0]
  uint16_t tmpccmr2 = 0;
200019d6:	200e      	movs	r0, #14
200019d8:	183b      	adds	r3, r7, r0
200019da:	2200      	movs	r2, #0
200019dc:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
200019de:	183b      	adds	r3, r7, r0
200019e0:	687a      	ldr	r2, [r7, #4]
200019e2:	8b92      	ldrh	r2, [r2, #28]
200019e4:	801a      	strh	r2, [r3, #0]

  /* Reset the OC4FE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4FE);
200019e6:	183b      	adds	r3, r7, r0
200019e8:	183a      	adds	r2, r7, r0
200019ea:	8812      	ldrh	r2, [r2, #0]
200019ec:	4909      	ldr	r1, [pc, #36]	; (20001a14 <TIM_OC4FastConfig+0x4c>)
200019ee:	400a      	ands	r2, r1
200019f0:	801a      	strh	r2, [r3, #0]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
200019f2:	1cbb      	adds	r3, r7, #2
200019f4:	881b      	ldrh	r3, [r3, #0]
200019f6:	021b      	lsls	r3, r3, #8
200019f8:	b299      	uxth	r1, r3
200019fa:	183b      	adds	r3, r7, r0
200019fc:	183a      	adds	r2, r7, r0
200019fe:	8812      	ldrh	r2, [r2, #0]
20001a00:	430a      	orrs	r2, r1
20001a02:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
20001a04:	687b      	ldr	r3, [r7, #4]
20001a06:	183a      	adds	r2, r7, r0
20001a08:	8812      	ldrh	r2, [r2, #0]
20001a0a:	839a      	strh	r2, [r3, #28]
}
20001a0c:	46c0      	nop			; (mov r8, r8)
20001a0e:	46bd      	mov	sp, r7
20001a10:	b004      	add	sp, #16
20001a12:	bd80      	pop	{r7, pc}
20001a14:	fffffbff 			; <UNDEFINED> instruction: 0xfffffbff

20001a18 <TIM_ClearOC1Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC1Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
20001a18:	b580      	push	{r7, lr}
20001a1a:	b084      	sub	sp, #16
20001a1c:	af00      	add	r7, sp, #0
20001a1e:	6078      	str	r0, [r7, #4]
20001a20:	000a      	movs	r2, r1
20001a22:	1cbb      	adds	r3, r7, #2
20001a24:	801a      	strh	r2, [r3, #0]
  uint16_t tmpccmr1 = 0;
20001a26:	200e      	movs	r0, #14
20001a28:	183b      	adds	r3, r7, r0
20001a2a:	2200      	movs	r2, #0
20001a2c:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
20001a2e:	183b      	adds	r3, r7, r0
20001a30:	687a      	ldr	r2, [r7, #4]
20001a32:	8b12      	ldrh	r2, [r2, #24]
20001a34:	801a      	strh	r2, [r3, #0]

  /* Reset the OC1CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1CE;
20001a36:	183b      	adds	r3, r7, r0
20001a38:	183a      	adds	r2, r7, r0
20001a3a:	8812      	ldrh	r2, [r2, #0]
20001a3c:	2180      	movs	r1, #128	; 0x80
20001a3e:	438a      	bics	r2, r1
20001a40:	801a      	strh	r2, [r3, #0]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
20001a42:	183b      	adds	r3, r7, r0
20001a44:	1839      	adds	r1, r7, r0
20001a46:	1cba      	adds	r2, r7, #2
20001a48:	8809      	ldrh	r1, [r1, #0]
20001a4a:	8812      	ldrh	r2, [r2, #0]
20001a4c:	430a      	orrs	r2, r1
20001a4e:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
20001a50:	687b      	ldr	r3, [r7, #4]
20001a52:	183a      	adds	r2, r7, r0
20001a54:	8812      	ldrh	r2, [r2, #0]
20001a56:	831a      	strh	r2, [r3, #24]
}
20001a58:	46c0      	nop			; (mov r8, r8)
20001a5a:	46bd      	mov	sp, r7
20001a5c:	b004      	add	sp, #16
20001a5e:	bd80      	pop	{r7, pc}

20001a60 <TIM_ClearOC2Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC2Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
20001a60:	b580      	push	{r7, lr}
20001a62:	b084      	sub	sp, #16
20001a64:	af00      	add	r7, sp, #0
20001a66:	6078      	str	r0, [r7, #4]
20001a68:	000a      	movs	r2, r1
20001a6a:	1cbb      	adds	r3, r7, #2
20001a6c:	801a      	strh	r2, [r3, #0]
  uint16_t tmpccmr1 = 0;
20001a6e:	200e      	movs	r0, #14
20001a70:	183b      	adds	r3, r7, r0
20001a72:	2200      	movs	r2, #0
20001a74:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
20001a76:	183b      	adds	r3, r7, r0
20001a78:	687a      	ldr	r2, [r7, #4]
20001a7a:	8b12      	ldrh	r2, [r2, #24]
20001a7c:	801a      	strh	r2, [r3, #0]

  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2CE;
20001a7e:	183b      	adds	r3, r7, r0
20001a80:	183a      	adds	r2, r7, r0
20001a82:	8812      	ldrh	r2, [r2, #0]
20001a84:	0452      	lsls	r2, r2, #17
20001a86:	0c52      	lsrs	r2, r2, #17
20001a88:	801a      	strh	r2, [r3, #0]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
20001a8a:	1cbb      	adds	r3, r7, #2
20001a8c:	881b      	ldrh	r3, [r3, #0]
20001a8e:	021b      	lsls	r3, r3, #8
20001a90:	b299      	uxth	r1, r3
20001a92:	183b      	adds	r3, r7, r0
20001a94:	183a      	adds	r2, r7, r0
20001a96:	8812      	ldrh	r2, [r2, #0]
20001a98:	430a      	orrs	r2, r1
20001a9a:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
20001a9c:	687b      	ldr	r3, [r7, #4]
20001a9e:	183a      	adds	r2, r7, r0
20001aa0:	8812      	ldrh	r2, [r2, #0]
20001aa2:	831a      	strh	r2, [r3, #24]
}
20001aa4:	46c0      	nop			; (mov r8, r8)
20001aa6:	46bd      	mov	sp, r7
20001aa8:	b004      	add	sp, #16
20001aaa:	bd80      	pop	{r7, pc}

20001aac <TIM_ClearOC3Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC3Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
20001aac:	b580      	push	{r7, lr}
20001aae:	b084      	sub	sp, #16
20001ab0:	af00      	add	r7, sp, #0
20001ab2:	6078      	str	r0, [r7, #4]
20001ab4:	000a      	movs	r2, r1
20001ab6:	1cbb      	adds	r3, r7, #2
20001ab8:	801a      	strh	r2, [r3, #0]
  uint16_t tmpccmr2 = 0;
20001aba:	200e      	movs	r0, #14
20001abc:	183b      	adds	r3, r7, r0
20001abe:	2200      	movs	r2, #0
20001ac0:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
20001ac2:	183b      	adds	r3, r7, r0
20001ac4:	687a      	ldr	r2, [r7, #4]
20001ac6:	8b92      	ldrh	r2, [r2, #28]
20001ac8:	801a      	strh	r2, [r3, #0]

  /* Reset the OC3CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3CE;
20001aca:	183b      	adds	r3, r7, r0
20001acc:	183a      	adds	r2, r7, r0
20001ace:	8812      	ldrh	r2, [r2, #0]
20001ad0:	2180      	movs	r1, #128	; 0x80
20001ad2:	438a      	bics	r2, r1
20001ad4:	801a      	strh	r2, [r3, #0]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
20001ad6:	183b      	adds	r3, r7, r0
20001ad8:	1839      	adds	r1, r7, r0
20001ada:	1cba      	adds	r2, r7, #2
20001adc:	8809      	ldrh	r1, [r1, #0]
20001ade:	8812      	ldrh	r2, [r2, #0]
20001ae0:	430a      	orrs	r2, r1
20001ae2:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
20001ae4:	687b      	ldr	r3, [r7, #4]
20001ae6:	183a      	adds	r2, r7, r0
20001ae8:	8812      	ldrh	r2, [r2, #0]
20001aea:	839a      	strh	r2, [r3, #28]
}
20001aec:	46c0      	nop			; (mov r8, r8)
20001aee:	46bd      	mov	sp, r7
20001af0:	b004      	add	sp, #16
20001af2:	bd80      	pop	{r7, pc}

20001af4 <TIM_ClearOC4Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC4Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
20001af4:	b580      	push	{r7, lr}
20001af6:	b084      	sub	sp, #16
20001af8:	af00      	add	r7, sp, #0
20001afa:	6078      	str	r0, [r7, #4]
20001afc:	000a      	movs	r2, r1
20001afe:	1cbb      	adds	r3, r7, #2
20001b00:	801a      	strh	r2, [r3, #0]
  uint16_t tmpccmr2 = 0;
20001b02:	200e      	movs	r0, #14
20001b04:	183b      	adds	r3, r7, r0
20001b06:	2200      	movs	r2, #0
20001b08:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
20001b0a:	183b      	adds	r3, r7, r0
20001b0c:	687a      	ldr	r2, [r7, #4]
20001b0e:	8b92      	ldrh	r2, [r2, #28]
20001b10:	801a      	strh	r2, [r3, #0]

  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4CE;
20001b12:	183b      	adds	r3, r7, r0
20001b14:	183a      	adds	r2, r7, r0
20001b16:	8812      	ldrh	r2, [r2, #0]
20001b18:	0452      	lsls	r2, r2, #17
20001b1a:	0c52      	lsrs	r2, r2, #17
20001b1c:	801a      	strh	r2, [r3, #0]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
20001b1e:	1cbb      	adds	r3, r7, #2
20001b20:	881b      	ldrh	r3, [r3, #0]
20001b22:	021b      	lsls	r3, r3, #8
20001b24:	b299      	uxth	r1, r3
20001b26:	183b      	adds	r3, r7, r0
20001b28:	183a      	adds	r2, r7, r0
20001b2a:	8812      	ldrh	r2, [r2, #0]
20001b2c:	430a      	orrs	r2, r1
20001b2e:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
20001b30:	687b      	ldr	r3, [r7, #4]
20001b32:	183a      	adds	r2, r7, r0
20001b34:	8812      	ldrh	r2, [r2, #0]
20001b36:	839a      	strh	r2, [r3, #28]
}
20001b38:	46c0      	nop			; (mov r8, r8)
20001b3a:	46bd      	mov	sp, r7
20001b3c:	b004      	add	sp, #16
20001b3e:	bd80      	pop	{r7, pc}

20001b40 <TIM_OC1PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
20001b40:	b580      	push	{r7, lr}
20001b42:	b084      	sub	sp, #16
20001b44:	af00      	add	r7, sp, #0
20001b46:	6078      	str	r0, [r7, #4]
20001b48:	000a      	movs	r2, r1
20001b4a:	1cbb      	adds	r3, r7, #2
20001b4c:	801a      	strh	r2, [r3, #0]
  uint16_t tmpccer = 0;
20001b4e:	200e      	movs	r0, #14
20001b50:	183b      	adds	r3, r7, r0
20001b52:	2200      	movs	r2, #0
20001b54:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
20001b56:	183b      	adds	r3, r7, r0
20001b58:	687a      	ldr	r2, [r7, #4]
20001b5a:	8c12      	ldrh	r2, [r2, #32]
20001b5c:	801a      	strh	r2, [r3, #0]

  /* Set or Reset the CC1P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC1P);
20001b5e:	183b      	adds	r3, r7, r0
20001b60:	183a      	adds	r2, r7, r0
20001b62:	8812      	ldrh	r2, [r2, #0]
20001b64:	2102      	movs	r1, #2
20001b66:	438a      	bics	r2, r1
20001b68:	801a      	strh	r2, [r3, #0]
  tmpccer |= TIM_OCPolarity;
20001b6a:	183b      	adds	r3, r7, r0
20001b6c:	1839      	adds	r1, r7, r0
20001b6e:	1cba      	adds	r2, r7, #2
20001b70:	8809      	ldrh	r1, [r1, #0]
20001b72:	8812      	ldrh	r2, [r2, #0]
20001b74:	430a      	orrs	r2, r1
20001b76:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
20001b78:	687b      	ldr	r3, [r7, #4]
20001b7a:	183a      	adds	r2, r7, r0
20001b7c:	8812      	ldrh	r2, [r2, #0]
20001b7e:	841a      	strh	r2, [r3, #32]
}
20001b80:	46c0      	nop			; (mov r8, r8)
20001b82:	46bd      	mov	sp, r7
20001b84:	b004      	add	sp, #16
20001b86:	bd80      	pop	{r7, pc}

20001b88 <TIM_OC1NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
20001b88:	b580      	push	{r7, lr}
20001b8a:	b084      	sub	sp, #16
20001b8c:	af00      	add	r7, sp, #0
20001b8e:	6078      	str	r0, [r7, #4]
20001b90:	000a      	movs	r2, r1
20001b92:	1cbb      	adds	r3, r7, #2
20001b94:	801a      	strh	r2, [r3, #0]
  uint16_t tmpccer = 0;
20001b96:	200e      	movs	r0, #14
20001b98:	183b      	adds	r3, r7, r0
20001b9a:	2200      	movs	r2, #0
20001b9c:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
20001b9e:	183b      	adds	r3, r7, r0
20001ba0:	687a      	ldr	r2, [r7, #4]
20001ba2:	8c12      	ldrh	r2, [r2, #32]
20001ba4:	801a      	strh	r2, [r3, #0]

  /* Set or Reset the CC1NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
20001ba6:	183b      	adds	r3, r7, r0
20001ba8:	183a      	adds	r2, r7, r0
20001baa:	8812      	ldrh	r2, [r2, #0]
20001bac:	2108      	movs	r1, #8
20001bae:	438a      	bics	r2, r1
20001bb0:	801a      	strh	r2, [r3, #0]
  tmpccer |= TIM_OCNPolarity;
20001bb2:	183b      	adds	r3, r7, r0
20001bb4:	1839      	adds	r1, r7, r0
20001bb6:	1cba      	adds	r2, r7, #2
20001bb8:	8809      	ldrh	r1, [r1, #0]
20001bba:	8812      	ldrh	r2, [r2, #0]
20001bbc:	430a      	orrs	r2, r1
20001bbe:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
20001bc0:	687b      	ldr	r3, [r7, #4]
20001bc2:	183a      	adds	r2, r7, r0
20001bc4:	8812      	ldrh	r2, [r2, #0]
20001bc6:	841a      	strh	r2, [r3, #32]
}
20001bc8:	46c0      	nop			; (mov r8, r8)
20001bca:	46bd      	mov	sp, r7
20001bcc:	b004      	add	sp, #16
20001bce:	bd80      	pop	{r7, pc}

20001bd0 <TIM_OC2PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
20001bd0:	b580      	push	{r7, lr}
20001bd2:	b084      	sub	sp, #16
20001bd4:	af00      	add	r7, sp, #0
20001bd6:	6078      	str	r0, [r7, #4]
20001bd8:	000a      	movs	r2, r1
20001bda:	1cbb      	adds	r3, r7, #2
20001bdc:	801a      	strh	r2, [r3, #0]
  uint16_t tmpccer = 0;
20001bde:	200e      	movs	r0, #14
20001be0:	183b      	adds	r3, r7, r0
20001be2:	2200      	movs	r2, #0
20001be4:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
20001be6:	183b      	adds	r3, r7, r0
20001be8:	687a      	ldr	r2, [r7, #4]
20001bea:	8c12      	ldrh	r2, [r2, #32]
20001bec:	801a      	strh	r2, [r3, #0]

  /* Set or Reset the CC2P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC2P);
20001bee:	183b      	adds	r3, r7, r0
20001bf0:	183a      	adds	r2, r7, r0
20001bf2:	8812      	ldrh	r2, [r2, #0]
20001bf4:	2120      	movs	r1, #32
20001bf6:	438a      	bics	r2, r1
20001bf8:	801a      	strh	r2, [r3, #0]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
20001bfa:	1cbb      	adds	r3, r7, #2
20001bfc:	881b      	ldrh	r3, [r3, #0]
20001bfe:	011b      	lsls	r3, r3, #4
20001c00:	b299      	uxth	r1, r3
20001c02:	183b      	adds	r3, r7, r0
20001c04:	183a      	adds	r2, r7, r0
20001c06:	8812      	ldrh	r2, [r2, #0]
20001c08:	430a      	orrs	r2, r1
20001c0a:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
20001c0c:	687b      	ldr	r3, [r7, #4]
20001c0e:	183a      	adds	r2, r7, r0
20001c10:	8812      	ldrh	r2, [r2, #0]
20001c12:	841a      	strh	r2, [r3, #32]
}
20001c14:	46c0      	nop			; (mov r8, r8)
20001c16:	46bd      	mov	sp, r7
20001c18:	b004      	add	sp, #16
20001c1a:	bd80      	pop	{r7, pc}

20001c1c <TIM_OC2NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
20001c1c:	b580      	push	{r7, lr}
20001c1e:	b084      	sub	sp, #16
20001c20:	af00      	add	r7, sp, #0
20001c22:	6078      	str	r0, [r7, #4]
20001c24:	000a      	movs	r2, r1
20001c26:	1cbb      	adds	r3, r7, #2
20001c28:	801a      	strh	r2, [r3, #0]
  uint16_t tmpccer = 0;
20001c2a:	200e      	movs	r0, #14
20001c2c:	183b      	adds	r3, r7, r0
20001c2e:	2200      	movs	r2, #0
20001c30:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
20001c32:	183b      	adds	r3, r7, r0
20001c34:	687a      	ldr	r2, [r7, #4]
20001c36:	8c12      	ldrh	r2, [r2, #32]
20001c38:	801a      	strh	r2, [r3, #0]

  /* Set or Reset the CC2NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
20001c3a:	183b      	adds	r3, r7, r0
20001c3c:	183a      	adds	r2, r7, r0
20001c3e:	8812      	ldrh	r2, [r2, #0]
20001c40:	2180      	movs	r1, #128	; 0x80
20001c42:	438a      	bics	r2, r1
20001c44:	801a      	strh	r2, [r3, #0]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
20001c46:	1cbb      	adds	r3, r7, #2
20001c48:	881b      	ldrh	r3, [r3, #0]
20001c4a:	011b      	lsls	r3, r3, #4
20001c4c:	b299      	uxth	r1, r3
20001c4e:	183b      	adds	r3, r7, r0
20001c50:	183a      	adds	r2, r7, r0
20001c52:	8812      	ldrh	r2, [r2, #0]
20001c54:	430a      	orrs	r2, r1
20001c56:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
20001c58:	687b      	ldr	r3, [r7, #4]
20001c5a:	183a      	adds	r2, r7, r0
20001c5c:	8812      	ldrh	r2, [r2, #0]
20001c5e:	841a      	strh	r2, [r3, #32]
}
20001c60:	46c0      	nop			; (mov r8, r8)
20001c62:	46bd      	mov	sp, r7
20001c64:	b004      	add	sp, #16
20001c66:	bd80      	pop	{r7, pc}

20001c68 <TIM_OC3PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
20001c68:	b580      	push	{r7, lr}
20001c6a:	b084      	sub	sp, #16
20001c6c:	af00      	add	r7, sp, #0
20001c6e:	6078      	str	r0, [r7, #4]
20001c70:	000a      	movs	r2, r1
20001c72:	1cbb      	adds	r3, r7, #2
20001c74:	801a      	strh	r2, [r3, #0]
  uint16_t tmpccer = 0;
20001c76:	200e      	movs	r0, #14
20001c78:	183b      	adds	r3, r7, r0
20001c7a:	2200      	movs	r2, #0
20001c7c:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
20001c7e:	183b      	adds	r3, r7, r0
20001c80:	687a      	ldr	r2, [r7, #4]
20001c82:	8c12      	ldrh	r2, [r2, #32]
20001c84:	801a      	strh	r2, [r3, #0]

  /* Set or Reset the CC3P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
20001c86:	183b      	adds	r3, r7, r0
20001c88:	183a      	adds	r2, r7, r0
20001c8a:	8812      	ldrh	r2, [r2, #0]
20001c8c:	4909      	ldr	r1, [pc, #36]	; (20001cb4 <TIM_OC3PolarityConfig+0x4c>)
20001c8e:	400a      	ands	r2, r1
20001c90:	801a      	strh	r2, [r3, #0]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
20001c92:	1cbb      	adds	r3, r7, #2
20001c94:	881b      	ldrh	r3, [r3, #0]
20001c96:	021b      	lsls	r3, r3, #8
20001c98:	b299      	uxth	r1, r3
20001c9a:	183b      	adds	r3, r7, r0
20001c9c:	183a      	adds	r2, r7, r0
20001c9e:	8812      	ldrh	r2, [r2, #0]
20001ca0:	430a      	orrs	r2, r1
20001ca2:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
20001ca4:	687b      	ldr	r3, [r7, #4]
20001ca6:	183a      	adds	r2, r7, r0
20001ca8:	8812      	ldrh	r2, [r2, #0]
20001caa:	841a      	strh	r2, [r3, #32]
}
20001cac:	46c0      	nop			; (mov r8, r8)
20001cae:	46bd      	mov	sp, r7
20001cb0:	b004      	add	sp, #16
20001cb2:	bd80      	pop	{r7, pc}
20001cb4:	fffffdff 			; <UNDEFINED> instruction: 0xfffffdff

20001cb8 <TIM_OC3NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
20001cb8:	b580      	push	{r7, lr}
20001cba:	b084      	sub	sp, #16
20001cbc:	af00      	add	r7, sp, #0
20001cbe:	6078      	str	r0, [r7, #4]
20001cc0:	000a      	movs	r2, r1
20001cc2:	1cbb      	adds	r3, r7, #2
20001cc4:	801a      	strh	r2, [r3, #0]
  uint16_t tmpccer = 0;
20001cc6:	200e      	movs	r0, #14
20001cc8:	183b      	adds	r3, r7, r0
20001cca:	2200      	movs	r2, #0
20001ccc:	801a      	strh	r2, [r3, #0]
 
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
20001cce:	183b      	adds	r3, r7, r0
20001cd0:	687a      	ldr	r2, [r7, #4]
20001cd2:	8c12      	ldrh	r2, [r2, #32]
20001cd4:	801a      	strh	r2, [r3, #0]

  /* Set or Reset the CC3NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
20001cd6:	183b      	adds	r3, r7, r0
20001cd8:	183a      	adds	r2, r7, r0
20001cda:	8812      	ldrh	r2, [r2, #0]
20001cdc:	4909      	ldr	r1, [pc, #36]	; (20001d04 <TIM_OC3NPolarityConfig+0x4c>)
20001cde:	400a      	ands	r2, r1
20001ce0:	801a      	strh	r2, [r3, #0]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
20001ce2:	1cbb      	adds	r3, r7, #2
20001ce4:	881b      	ldrh	r3, [r3, #0]
20001ce6:	021b      	lsls	r3, r3, #8
20001ce8:	b299      	uxth	r1, r3
20001cea:	183b      	adds	r3, r7, r0
20001cec:	183a      	adds	r2, r7, r0
20001cee:	8812      	ldrh	r2, [r2, #0]
20001cf0:	430a      	orrs	r2, r1
20001cf2:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
20001cf4:	687b      	ldr	r3, [r7, #4]
20001cf6:	183a      	adds	r2, r7, r0
20001cf8:	8812      	ldrh	r2, [r2, #0]
20001cfa:	841a      	strh	r2, [r3, #32]
}
20001cfc:	46c0      	nop			; (mov r8, r8)
20001cfe:	46bd      	mov	sp, r7
20001d00:	b004      	add	sp, #16
20001d02:	bd80      	pop	{r7, pc}
20001d04:	fffff7ff 			; <UNDEFINED> instruction: 0xfffff7ff

20001d08 <TIM_OC4PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC4PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
20001d08:	b580      	push	{r7, lr}
20001d0a:	b084      	sub	sp, #16
20001d0c:	af00      	add	r7, sp, #0
20001d0e:	6078      	str	r0, [r7, #4]
20001d10:	000a      	movs	r2, r1
20001d12:	1cbb      	adds	r3, r7, #2
20001d14:	801a      	strh	r2, [r3, #0]
  uint16_t tmpccer = 0;
20001d16:	200e      	movs	r0, #14
20001d18:	183b      	adds	r3, r7, r0
20001d1a:	2200      	movs	r2, #0
20001d1c:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
20001d1e:	183b      	adds	r3, r7, r0
20001d20:	687a      	ldr	r2, [r7, #4]
20001d22:	8c12      	ldrh	r2, [r2, #32]
20001d24:	801a      	strh	r2, [r3, #0]

  /* Set or Reset the CC4P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
20001d26:	183b      	adds	r3, r7, r0
20001d28:	183a      	adds	r2, r7, r0
20001d2a:	8812      	ldrh	r2, [r2, #0]
20001d2c:	4909      	ldr	r1, [pc, #36]	; (20001d54 <TIM_OC4PolarityConfig+0x4c>)
20001d2e:	400a      	ands	r2, r1
20001d30:	801a      	strh	r2, [r3, #0]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
20001d32:	1cbb      	adds	r3, r7, #2
20001d34:	881b      	ldrh	r3, [r3, #0]
20001d36:	031b      	lsls	r3, r3, #12
20001d38:	b299      	uxth	r1, r3
20001d3a:	183b      	adds	r3, r7, r0
20001d3c:	183a      	adds	r2, r7, r0
20001d3e:	8812      	ldrh	r2, [r2, #0]
20001d40:	430a      	orrs	r2, r1
20001d42:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
20001d44:	687b      	ldr	r3, [r7, #4]
20001d46:	183a      	adds	r2, r7, r0
20001d48:	8812      	ldrh	r2, [r2, #0]
20001d4a:	841a      	strh	r2, [r3, #32]
}
20001d4c:	46c0      	nop			; (mov r8, r8)
20001d4e:	46bd      	mov	sp, r7
20001d50:	b004      	add	sp, #16
20001d52:	bd80      	pop	{r7, pc}
20001d54:	ffffdfff 			; <UNDEFINED> instruction: 0xffffdfff

20001d58 <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
20001d58:	b580      	push	{r7, lr}
20001d5a:	b084      	sub	sp, #16
20001d5c:	af00      	add	r7, sp, #0
20001d5e:	6078      	str	r0, [r7, #4]
20001d60:	0008      	movs	r0, r1
20001d62:	0011      	movs	r1, r2
20001d64:	1cbb      	adds	r3, r7, #2
20001d66:	1c02      	adds	r2, r0, #0
20001d68:	801a      	strh	r2, [r3, #0]
20001d6a:	003b      	movs	r3, r7
20001d6c:	1c0a      	adds	r2, r1, #0
20001d6e:	801a      	strh	r2, [r3, #0]
  uint16_t tmp = 0;
20001d70:	210e      	movs	r1, #14
20001d72:	187b      	adds	r3, r7, r1
20001d74:	2200      	movs	r2, #0
20001d76:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;
20001d78:	1cbb      	adds	r3, r7, #2
20001d7a:	881b      	ldrh	r3, [r3, #0]
20001d7c:	2201      	movs	r2, #1
20001d7e:	409a      	lsls	r2, r3
20001d80:	187b      	adds	r3, r7, r1
20001d82:	801a      	strh	r2, [r3, #0]

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
20001d84:	687b      	ldr	r3, [r7, #4]
20001d86:	8c1b      	ldrh	r3, [r3, #32]
20001d88:	b29b      	uxth	r3, r3
20001d8a:	187a      	adds	r2, r7, r1
20001d8c:	8812      	ldrh	r2, [r2, #0]
20001d8e:	43d2      	mvns	r2, r2
20001d90:	b292      	uxth	r2, r2
20001d92:	4013      	ands	r3, r2
20001d94:	b29a      	uxth	r2, r3
20001d96:	687b      	ldr	r3, [r7, #4]
20001d98:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
20001d9a:	687b      	ldr	r3, [r7, #4]
20001d9c:	8c1b      	ldrh	r3, [r3, #32]
20001d9e:	b29a      	uxth	r2, r3
20001da0:	003b      	movs	r3, r7
20001da2:	8819      	ldrh	r1, [r3, #0]
20001da4:	1cbb      	adds	r3, r7, #2
20001da6:	881b      	ldrh	r3, [r3, #0]
20001da8:	4099      	lsls	r1, r3
20001daa:	000b      	movs	r3, r1
20001dac:	b29b      	uxth	r3, r3
20001dae:	4313      	orrs	r3, r2
20001db0:	b29a      	uxth	r2, r3
20001db2:	687b      	ldr	r3, [r7, #4]
20001db4:	841a      	strh	r2, [r3, #32]
}
20001db6:	46c0      	nop			; (mov r8, r8)
20001db8:	46bd      	mov	sp, r7
20001dba:	b004      	add	sp, #16
20001dbc:	bd80      	pop	{r7, pc}

20001dbe <TIM_CCxNCmd>:
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
20001dbe:	b580      	push	{r7, lr}
20001dc0:	b084      	sub	sp, #16
20001dc2:	af00      	add	r7, sp, #0
20001dc4:	6078      	str	r0, [r7, #4]
20001dc6:	0008      	movs	r0, r1
20001dc8:	0011      	movs	r1, r2
20001dca:	1cbb      	adds	r3, r7, #2
20001dcc:	1c02      	adds	r2, r0, #0
20001dce:	801a      	strh	r2, [r3, #0]
20001dd0:	003b      	movs	r3, r7
20001dd2:	1c0a      	adds	r2, r1, #0
20001dd4:	801a      	strh	r2, [r3, #0]
  uint16_t tmp = 0;
20001dd6:	210e      	movs	r1, #14
20001dd8:	187b      	adds	r3, r7, r1
20001dda:	2200      	movs	r2, #0
20001ddc:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_SET << TIM_Channel;
20001dde:	1cbb      	adds	r3, r7, #2
20001de0:	881b      	ldrh	r3, [r3, #0]
20001de2:	2204      	movs	r2, #4
20001de4:	409a      	lsls	r2, r3
20001de6:	187b      	adds	r3, r7, r1
20001de8:	801a      	strh	r2, [r3, #0]

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
20001dea:	687b      	ldr	r3, [r7, #4]
20001dec:	8c1b      	ldrh	r3, [r3, #32]
20001dee:	b29b      	uxth	r3, r3
20001df0:	187a      	adds	r2, r7, r1
20001df2:	8812      	ldrh	r2, [r2, #0]
20001df4:	43d2      	mvns	r2, r2
20001df6:	b292      	uxth	r2, r2
20001df8:	4013      	ands	r3, r2
20001dfa:	b29a      	uxth	r2, r3
20001dfc:	687b      	ldr	r3, [r7, #4]
20001dfe:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
20001e00:	687b      	ldr	r3, [r7, #4]
20001e02:	8c1b      	ldrh	r3, [r3, #32]
20001e04:	b29a      	uxth	r2, r3
20001e06:	003b      	movs	r3, r7
20001e08:	8819      	ldrh	r1, [r3, #0]
20001e0a:	1cbb      	adds	r3, r7, #2
20001e0c:	881b      	ldrh	r3, [r3, #0]
20001e0e:	4099      	lsls	r1, r3
20001e10:	000b      	movs	r3, r1
20001e12:	b29b      	uxth	r3, r3
20001e14:	4313      	orrs	r3, r2
20001e16:	b29a      	uxth	r2, r3
20001e18:	687b      	ldr	r3, [r7, #4]
20001e1a:	841a      	strh	r2, [r3, #32]
}
20001e1c:	46c0      	nop			; (mov r8, r8)
20001e1e:	46bd      	mov	sp, r7
20001e20:	b004      	add	sp, #16
20001e22:	bd80      	pop	{r7, pc}

20001e24 <TIM_ICInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
20001e24:	b580      	push	{r7, lr}
20001e26:	b082      	sub	sp, #8
20001e28:	af00      	add	r7, sp, #0
20001e2a:	6078      	str	r0, [r7, #4]
20001e2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
20001e2e:	683b      	ldr	r3, [r7, #0]
20001e30:	881b      	ldrh	r3, [r3, #0]
20001e32:	2b00      	cmp	r3, #0
20001e34:	d110      	bne.n	20001e58 <TIM_ICInit+0x34>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
20001e36:	683b      	ldr	r3, [r7, #0]
20001e38:	8859      	ldrh	r1, [r3, #2]
20001e3a:	683b      	ldr	r3, [r7, #0]
20001e3c:	889a      	ldrh	r2, [r3, #4]
20001e3e:	683b      	ldr	r3, [r7, #0]
20001e40:	891b      	ldrh	r3, [r3, #8]
20001e42:	6878      	ldr	r0, [r7, #4]
20001e44:	f000 fd58 	bl	200028f8 <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
20001e48:	683b      	ldr	r3, [r7, #0]
20001e4a:	88da      	ldrh	r2, [r3, #6]
20001e4c:	687b      	ldr	r3, [r7, #4]
20001e4e:	0011      	movs	r1, r2
20001e50:	0018      	movs	r0, r3
20001e52:	f000 f8f3 	bl	2000203c <TIM_SetIC1Prescaler>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
20001e56:	e039      	b.n	20001ecc <TIM_ICInit+0xa8>
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
20001e58:	683b      	ldr	r3, [r7, #0]
20001e5a:	881b      	ldrh	r3, [r3, #0]
20001e5c:	2b04      	cmp	r3, #4
20001e5e:	d110      	bne.n	20001e82 <TIM_ICInit+0x5e>
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
20001e60:	683b      	ldr	r3, [r7, #0]
20001e62:	8859      	ldrh	r1, [r3, #2]
20001e64:	683b      	ldr	r3, [r7, #0]
20001e66:	889a      	ldrh	r2, [r3, #4]
20001e68:	683b      	ldr	r3, [r7, #0]
20001e6a:	891b      	ldrh	r3, [r3, #8]
20001e6c:	6878      	ldr	r0, [r7, #4]
20001e6e:	f000 fd9c 	bl	200029aa <TI2_Config>
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
20001e72:	683b      	ldr	r3, [r7, #0]
20001e74:	88da      	ldrh	r2, [r3, #6]
20001e76:	687b      	ldr	r3, [r7, #4]
20001e78:	0011      	movs	r1, r2
20001e7a:	0018      	movs	r0, r3
20001e7c:	f000 f8fa 	bl	20002074 <TIM_SetIC2Prescaler>
}
20001e80:	e024      	b.n	20001ecc <TIM_ICInit+0xa8>
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
20001e82:	683b      	ldr	r3, [r7, #0]
20001e84:	881b      	ldrh	r3, [r3, #0]
20001e86:	2b08      	cmp	r3, #8
20001e88:	d110      	bne.n	20001eac <TIM_ICInit+0x88>
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
20001e8a:	683b      	ldr	r3, [r7, #0]
20001e8c:	8859      	ldrh	r1, [r3, #2]
20001e8e:	683b      	ldr	r3, [r7, #0]
20001e90:	889a      	ldrh	r2, [r3, #4]
20001e92:	683b      	ldr	r3, [r7, #0]
20001e94:	891b      	ldrh	r3, [r3, #8]
20001e96:	6878      	ldr	r0, [r7, #4]
20001e98:	f000 fdf2 	bl	20002a80 <TI3_Config>
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
20001e9c:	683b      	ldr	r3, [r7, #0]
20001e9e:	88da      	ldrh	r2, [r3, #6]
20001ea0:	687b      	ldr	r3, [r7, #4]
20001ea2:	0011      	movs	r1, r2
20001ea4:	0018      	movs	r0, r3
20001ea6:	f000 f905 	bl	200020b4 <TIM_SetIC3Prescaler>
}
20001eaa:	e00f      	b.n	20001ecc <TIM_ICInit+0xa8>
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
20001eac:	683b      	ldr	r3, [r7, #0]
20001eae:	8859      	ldrh	r1, [r3, #2]
20001eb0:	683b      	ldr	r3, [r7, #0]
20001eb2:	889a      	ldrh	r2, [r3, #4]
20001eb4:	683b      	ldr	r3, [r7, #0]
20001eb6:	891b      	ldrh	r3, [r3, #8]
20001eb8:	6878      	ldr	r0, [r7, #4]
20001eba:	f000 fe4b 	bl	20002b54 <TI4_Config>
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
20001ebe:	683b      	ldr	r3, [r7, #0]
20001ec0:	88da      	ldrh	r2, [r3, #6]
20001ec2:	687b      	ldr	r3, [r7, #4]
20001ec4:	0011      	movs	r1, r2
20001ec6:	0018      	movs	r0, r3
20001ec8:	f000 f910 	bl	200020ec <TIM_SetIC4Prescaler>
}
20001ecc:	46c0      	nop			; (mov r8, r8)
20001ece:	46bd      	mov	sp, r7
20001ed0:	b002      	add	sp, #8
20001ed2:	bd80      	pop	{r7, pc}

20001ed4 <TIM_ICStructInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
20001ed4:	b580      	push	{r7, lr}
20001ed6:	b082      	sub	sp, #8
20001ed8:	af00      	add	r7, sp, #0
20001eda:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
20001edc:	687b      	ldr	r3, [r7, #4]
20001ede:	2200      	movs	r2, #0
20001ee0:	801a      	strh	r2, [r3, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
20001ee2:	687b      	ldr	r3, [r7, #4]
20001ee4:	2200      	movs	r2, #0
20001ee6:	805a      	strh	r2, [r3, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
20001ee8:	687b      	ldr	r3, [r7, #4]
20001eea:	2201      	movs	r2, #1
20001eec:	809a      	strh	r2, [r3, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
20001eee:	687b      	ldr	r3, [r7, #4]
20001ef0:	2200      	movs	r2, #0
20001ef2:	80da      	strh	r2, [r3, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
20001ef4:	687b      	ldr	r3, [r7, #4]
20001ef6:	2200      	movs	r2, #0
20001ef8:	811a      	strh	r2, [r3, #8]
}
20001efa:	46c0      	nop			; (mov r8, r8)
20001efc:	46bd      	mov	sp, r7
20001efe:	b002      	add	sp, #8
20001f00:	bd80      	pop	{r7, pc}

20001f02 <TIM_PWMIConfig>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
20001f02:	b590      	push	{r4, r7, lr}
20001f04:	b085      	sub	sp, #20
20001f06:	af00      	add	r7, sp, #0
20001f08:	6078      	str	r0, [r7, #4]
20001f0a:	6039      	str	r1, [r7, #0]
  uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
20001f0c:	210e      	movs	r1, #14
20001f0e:	187b      	adds	r3, r7, r1
20001f10:	2200      	movs	r2, #0
20001f12:	801a      	strh	r2, [r3, #0]
  uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
20001f14:	230c      	movs	r3, #12
20001f16:	18fb      	adds	r3, r7, r3
20001f18:	2201      	movs	r2, #1
20001f1a:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
20001f1c:	683b      	ldr	r3, [r7, #0]
20001f1e:	885b      	ldrh	r3, [r3, #2]
20001f20:	2b00      	cmp	r3, #0
20001f22:	d103      	bne.n	20001f2c <TIM_PWMIConfig+0x2a>
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
20001f24:	187b      	adds	r3, r7, r1
20001f26:	2202      	movs	r2, #2
20001f28:	801a      	strh	r2, [r3, #0]
20001f2a:	e003      	b.n	20001f34 <TIM_PWMIConfig+0x32>
  }
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
20001f2c:	230e      	movs	r3, #14
20001f2e:	18fb      	adds	r3, r7, r3
20001f30:	2200      	movs	r2, #0
20001f32:	801a      	strh	r2, [r3, #0]
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
20001f34:	683b      	ldr	r3, [r7, #0]
20001f36:	889b      	ldrh	r3, [r3, #4]
20001f38:	2b01      	cmp	r3, #1
20001f3a:	d104      	bne.n	20001f46 <TIM_PWMIConfig+0x44>
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
20001f3c:	230c      	movs	r3, #12
20001f3e:	18fb      	adds	r3, r7, r3
20001f40:	2202      	movs	r2, #2
20001f42:	801a      	strh	r2, [r3, #0]
20001f44:	e003      	b.n	20001f4e <TIM_PWMIConfig+0x4c>
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
20001f46:	230c      	movs	r3, #12
20001f48:	18fb      	adds	r3, r7, r3
20001f4a:	2201      	movs	r2, #1
20001f4c:	801a      	strh	r2, [r3, #0]
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
20001f4e:	683b      	ldr	r3, [r7, #0]
20001f50:	881b      	ldrh	r3, [r3, #0]
20001f52:	2b00      	cmp	r3, #0
20001f54:	d123      	bne.n	20001f9e <TIM_PWMIConfig+0x9c>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
20001f56:	683b      	ldr	r3, [r7, #0]
20001f58:	8859      	ldrh	r1, [r3, #2]
20001f5a:	683b      	ldr	r3, [r7, #0]
20001f5c:	889a      	ldrh	r2, [r3, #4]
20001f5e:	683b      	ldr	r3, [r7, #0]
20001f60:	891b      	ldrh	r3, [r3, #8]
20001f62:	6878      	ldr	r0, [r7, #4]
20001f64:	f000 fcc8 	bl	200028f8 <TI1_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
20001f68:	683b      	ldr	r3, [r7, #0]
20001f6a:	88da      	ldrh	r2, [r3, #6]
20001f6c:	687b      	ldr	r3, [r7, #4]
20001f6e:	0011      	movs	r1, r2
20001f70:	0018      	movs	r0, r3
20001f72:	f000 f863 	bl	2000203c <TIM_SetIC1Prescaler>
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
20001f76:	683b      	ldr	r3, [r7, #0]
20001f78:	891c      	ldrh	r4, [r3, #8]
20001f7a:	230c      	movs	r3, #12
20001f7c:	18fb      	adds	r3, r7, r3
20001f7e:	881a      	ldrh	r2, [r3, #0]
20001f80:	230e      	movs	r3, #14
20001f82:	18fb      	adds	r3, r7, r3
20001f84:	8819      	ldrh	r1, [r3, #0]
20001f86:	6878      	ldr	r0, [r7, #4]
20001f88:	0023      	movs	r3, r4
20001f8a:	f000 fd0e 	bl	200029aa <TI2_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
20001f8e:	683b      	ldr	r3, [r7, #0]
20001f90:	88da      	ldrh	r2, [r3, #6]
20001f92:	687b      	ldr	r3, [r7, #4]
20001f94:	0011      	movs	r1, r2
20001f96:	0018      	movs	r0, r3
20001f98:	f000 f86c 	bl	20002074 <TIM_SetIC2Prescaler>
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
20001f9c:	e022      	b.n	20001fe4 <TIM_PWMIConfig+0xe2>
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
20001f9e:	683b      	ldr	r3, [r7, #0]
20001fa0:	8859      	ldrh	r1, [r3, #2]
20001fa2:	683b      	ldr	r3, [r7, #0]
20001fa4:	889a      	ldrh	r2, [r3, #4]
20001fa6:	683b      	ldr	r3, [r7, #0]
20001fa8:	891b      	ldrh	r3, [r3, #8]
20001faa:	6878      	ldr	r0, [r7, #4]
20001fac:	f000 fcfd 	bl	200029aa <TI2_Config>
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
20001fb0:	683b      	ldr	r3, [r7, #0]
20001fb2:	88da      	ldrh	r2, [r3, #6]
20001fb4:	687b      	ldr	r3, [r7, #4]
20001fb6:	0011      	movs	r1, r2
20001fb8:	0018      	movs	r0, r3
20001fba:	f000 f85b 	bl	20002074 <TIM_SetIC2Prescaler>
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
20001fbe:	683b      	ldr	r3, [r7, #0]
20001fc0:	891c      	ldrh	r4, [r3, #8]
20001fc2:	230c      	movs	r3, #12
20001fc4:	18fb      	adds	r3, r7, r3
20001fc6:	881a      	ldrh	r2, [r3, #0]
20001fc8:	230e      	movs	r3, #14
20001fca:	18fb      	adds	r3, r7, r3
20001fcc:	8819      	ldrh	r1, [r3, #0]
20001fce:	6878      	ldr	r0, [r7, #4]
20001fd0:	0023      	movs	r3, r4
20001fd2:	f000 fc91 	bl	200028f8 <TI1_Config>
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
20001fd6:	683b      	ldr	r3, [r7, #0]
20001fd8:	88da      	ldrh	r2, [r3, #6]
20001fda:	687b      	ldr	r3, [r7, #4]
20001fdc:	0011      	movs	r1, r2
20001fde:	0018      	movs	r0, r3
20001fe0:	f000 f82c 	bl	2000203c <TIM_SetIC1Prescaler>
}
20001fe4:	46c0      	nop			; (mov r8, r8)
20001fe6:	46bd      	mov	sp, r7
20001fe8:	b005      	add	sp, #20
20001fea:	bd90      	pop	{r4, r7, pc}

20001fec <TIM_GetCapture1>:
  * @brief  Gets the TIMx Input Capture 1 value.
  * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
  * @retval Capture Compare 1 Register value.
  */
uint32_t TIM_GetCapture1(TIM_TypeDef* TIMx)
{
20001fec:	b580      	push	{r7, lr}
20001fee:	b082      	sub	sp, #8
20001ff0:	af00      	add	r7, sp, #0
20001ff2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
20001ff4:	687b      	ldr	r3, [r7, #4]
20001ff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
20001ff8:	0018      	movs	r0, r3
20001ffa:	46bd      	mov	sp, r7
20001ffc:	b002      	add	sp, #8
20001ffe:	bd80      	pop	{r7, pc}

20002000 <TIM_GetCapture2>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
  *         peripheral.
  * @retval Capture Compare 2 Register value.
  */
uint32_t TIM_GetCapture2(TIM_TypeDef* TIMx)
{
20002000:	b580      	push	{r7, lr}
20002002:	b082      	sub	sp, #8
20002004:	af00      	add	r7, sp, #0
20002006:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
20002008:	687b      	ldr	r3, [r7, #4]
2000200a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
2000200c:	0018      	movs	r0, r3
2000200e:	46bd      	mov	sp, r7
20002010:	b002      	add	sp, #8
20002012:	bd80      	pop	{r7, pc}

20002014 <TIM_GetCapture3>:
  * @brief  Gets the TIMx Input Capture 3 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 3 Register value.
  */
uint32_t TIM_GetCapture3(TIM_TypeDef* TIMx)
{
20002014:	b580      	push	{r7, lr}
20002016:	b082      	sub	sp, #8
20002018:	af00      	add	r7, sp, #0
2000201a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 

  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
2000201c:	687b      	ldr	r3, [r7, #4]
2000201e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
20002020:	0018      	movs	r0, r3
20002022:	46bd      	mov	sp, r7
20002024:	b002      	add	sp, #8
20002026:	bd80      	pop	{r7, pc}

20002028 <TIM_GetCapture4>:
  * @brief  Gets the TIMx Input Capture 4 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 4 Register value.
  */
uint32_t TIM_GetCapture4(TIM_TypeDef* TIMx)
{
20002028:	b580      	push	{r7, lr}
2000202a:	b082      	sub	sp, #8
2000202c:	af00      	add	r7, sp, #0
2000202e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
20002030:	687b      	ldr	r3, [r7, #4]
20002032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
20002034:	0018      	movs	r0, r3
20002036:	46bd      	mov	sp, r7
20002038:	b002      	add	sp, #8
2000203a:	bd80      	pop	{r7, pc}

2000203c <TIM_SetIC1Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
2000203c:	b580      	push	{r7, lr}
2000203e:	b082      	sub	sp, #8
20002040:	af00      	add	r7, sp, #0
20002042:	6078      	str	r0, [r7, #4]
20002044:	000a      	movs	r2, r1
20002046:	1cbb      	adds	r3, r7, #2
20002048:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
2000204a:	687b      	ldr	r3, [r7, #4]
2000204c:	8b1b      	ldrh	r3, [r3, #24]
2000204e:	b29b      	uxth	r3, r3
20002050:	220c      	movs	r2, #12
20002052:	4393      	bics	r3, r2
20002054:	b29a      	uxth	r2, r3
20002056:	687b      	ldr	r3, [r7, #4]
20002058:	831a      	strh	r2, [r3, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
2000205a:	687b      	ldr	r3, [r7, #4]
2000205c:	8b1b      	ldrh	r3, [r3, #24]
2000205e:	b29a      	uxth	r2, r3
20002060:	1cbb      	adds	r3, r7, #2
20002062:	881b      	ldrh	r3, [r3, #0]
20002064:	4313      	orrs	r3, r2
20002066:	b29a      	uxth	r2, r3
20002068:	687b      	ldr	r3, [r7, #4]
2000206a:	831a      	strh	r2, [r3, #24]
}
2000206c:	46c0      	nop			; (mov r8, r8)
2000206e:	46bd      	mov	sp, r7
20002070:	b002      	add	sp, #8
20002072:	bd80      	pop	{r7, pc}

20002074 <TIM_SetIC2Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
20002074:	b580      	push	{r7, lr}
20002076:	b082      	sub	sp, #8
20002078:	af00      	add	r7, sp, #0
2000207a:	6078      	str	r0, [r7, #4]
2000207c:	000a      	movs	r2, r1
2000207e:	1cbb      	adds	r3, r7, #2
20002080:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
20002082:	687b      	ldr	r3, [r7, #4]
20002084:	8b1b      	ldrh	r3, [r3, #24]
20002086:	b29b      	uxth	r3, r3
20002088:	4a09      	ldr	r2, [pc, #36]	; (200020b0 <TIM_SetIC2Prescaler+0x3c>)
2000208a:	4013      	ands	r3, r2
2000208c:	b29a      	uxth	r2, r3
2000208e:	687b      	ldr	r3, [r7, #4]
20002090:	831a      	strh	r2, [r3, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
20002092:	687b      	ldr	r3, [r7, #4]
20002094:	8b1b      	ldrh	r3, [r3, #24]
20002096:	b29a      	uxth	r2, r3
20002098:	1cbb      	adds	r3, r7, #2
2000209a:	881b      	ldrh	r3, [r3, #0]
2000209c:	021b      	lsls	r3, r3, #8
2000209e:	b29b      	uxth	r3, r3
200020a0:	4313      	orrs	r3, r2
200020a2:	b29a      	uxth	r2, r3
200020a4:	687b      	ldr	r3, [r7, #4]
200020a6:	831a      	strh	r2, [r3, #24]
}
200020a8:	46c0      	nop			; (mov r8, r8)
200020aa:	46bd      	mov	sp, r7
200020ac:	b002      	add	sp, #8
200020ae:	bd80      	pop	{r7, pc}
200020b0:	fffff3ff 			; <UNDEFINED> instruction: 0xfffff3ff

200020b4 <TIM_SetIC3Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
200020b4:	b580      	push	{r7, lr}
200020b6:	b082      	sub	sp, #8
200020b8:	af00      	add	r7, sp, #0
200020ba:	6078      	str	r0, [r7, #4]
200020bc:	000a      	movs	r2, r1
200020be:	1cbb      	adds	r3, r7, #2
200020c0:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC3PSC;
200020c2:	687b      	ldr	r3, [r7, #4]
200020c4:	8b9b      	ldrh	r3, [r3, #28]
200020c6:	b29b      	uxth	r3, r3
200020c8:	220c      	movs	r2, #12
200020ca:	4393      	bics	r3, r2
200020cc:	b29a      	uxth	r2, r3
200020ce:	687b      	ldr	r3, [r7, #4]
200020d0:	839a      	strh	r2, [r3, #28]

  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
200020d2:	687b      	ldr	r3, [r7, #4]
200020d4:	8b9b      	ldrh	r3, [r3, #28]
200020d6:	b29a      	uxth	r2, r3
200020d8:	1cbb      	adds	r3, r7, #2
200020da:	881b      	ldrh	r3, [r3, #0]
200020dc:	4313      	orrs	r3, r2
200020de:	b29a      	uxth	r2, r3
200020e0:	687b      	ldr	r3, [r7, #4]
200020e2:	839a      	strh	r2, [r3, #28]
}
200020e4:	46c0      	nop			; (mov r8, r8)
200020e6:	46bd      	mov	sp, r7
200020e8:	b002      	add	sp, #8
200020ea:	bd80      	pop	{r7, pc}

200020ec <TIM_SetIC4Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{  
200020ec:	b580      	push	{r7, lr}
200020ee:	b082      	sub	sp, #8
200020f0:	af00      	add	r7, sp, #0
200020f2:	6078      	str	r0, [r7, #4]
200020f4:	000a      	movs	r2, r1
200020f6:	1cbb      	adds	r3, r7, #2
200020f8:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC4PSC;
200020fa:	687b      	ldr	r3, [r7, #4]
200020fc:	8b9b      	ldrh	r3, [r3, #28]
200020fe:	b29b      	uxth	r3, r3
20002100:	4a09      	ldr	r2, [pc, #36]	; (20002128 <TIM_SetIC4Prescaler+0x3c>)
20002102:	4013      	ands	r3, r2
20002104:	b29a      	uxth	r2, r3
20002106:	687b      	ldr	r3, [r7, #4]
20002108:	839a      	strh	r2, [r3, #28]

  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
2000210a:	687b      	ldr	r3, [r7, #4]
2000210c:	8b9b      	ldrh	r3, [r3, #28]
2000210e:	b29a      	uxth	r2, r3
20002110:	1cbb      	adds	r3, r7, #2
20002112:	881b      	ldrh	r3, [r3, #0]
20002114:	021b      	lsls	r3, r3, #8
20002116:	b29b      	uxth	r3, r3
20002118:	4313      	orrs	r3, r2
2000211a:	b29a      	uxth	r2, r3
2000211c:	687b      	ldr	r3, [r7, #4]
2000211e:	839a      	strh	r2, [r3, #28]
}
20002120:	46c0      	nop			; (mov r8, r8)
20002122:	46bd      	mov	sp, r7
20002124:	b002      	add	sp, #8
20002126:	bd80      	pop	{r7, pc}
20002128:	fffff3ff 			; <UNDEFINED> instruction: 0xfffff3ff

2000212c <TIM_BDTRConfig>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure that
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval None
  */
void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
{
2000212c:	b580      	push	{r7, lr}
2000212e:	b082      	sub	sp, #8
20002130:	af00      	add	r7, sp, #0
20002132:	6078      	str	r0, [r7, #4]
20002134:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
20002136:	683b      	ldr	r3, [r7, #0]
20002138:	881a      	ldrh	r2, [r3, #0]
2000213a:	683b      	ldr	r3, [r7, #0]
2000213c:	885b      	ldrh	r3, [r3, #2]
2000213e:	4313      	orrs	r3, r2
20002140:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
20002142:	683b      	ldr	r3, [r7, #0]
20002144:	889b      	ldrh	r3, [r3, #4]
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
20002146:	4313      	orrs	r3, r2
20002148:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
2000214a:	683b      	ldr	r3, [r7, #0]
2000214c:	88db      	ldrh	r3, [r3, #6]
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
2000214e:	4313      	orrs	r3, r2
20002150:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
20002152:	683b      	ldr	r3, [r7, #0]
20002154:	891b      	ldrh	r3, [r3, #8]
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
20002156:	4313      	orrs	r3, r2
20002158:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
2000215a:	683b      	ldr	r3, [r7, #0]
2000215c:	895b      	ldrh	r3, [r3, #10]
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
2000215e:	4313      	orrs	r3, r2
20002160:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
20002162:	683b      	ldr	r3, [r7, #0]
20002164:	899b      	ldrh	r3, [r3, #12]
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
20002166:	4313      	orrs	r3, r2
20002168:	b299      	uxth	r1, r3
2000216a:	687b      	ldr	r3, [r7, #4]
2000216c:	2244      	movs	r2, #68	; 0x44
2000216e:	5299      	strh	r1, [r3, r2]
}
20002170:	46c0      	nop			; (mov r8, r8)
20002172:	46bd      	mov	sp, r7
20002174:	b002      	add	sp, #8
20002176:	bd80      	pop	{r7, pc}

20002178 <TIM_BDTRStructInit>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
20002178:	b580      	push	{r7, lr}
2000217a:	b082      	sub	sp, #8
2000217c:	af00      	add	r7, sp, #0
2000217e:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
20002180:	687b      	ldr	r3, [r7, #4]
20002182:	2200      	movs	r2, #0
20002184:	801a      	strh	r2, [r3, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
20002186:	687b      	ldr	r3, [r7, #4]
20002188:	2200      	movs	r2, #0
2000218a:	805a      	strh	r2, [r3, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
2000218c:	687b      	ldr	r3, [r7, #4]
2000218e:	2200      	movs	r2, #0
20002190:	809a      	strh	r2, [r3, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
20002192:	687b      	ldr	r3, [r7, #4]
20002194:	2200      	movs	r2, #0
20002196:	80da      	strh	r2, [r3, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
20002198:	687b      	ldr	r3, [r7, #4]
2000219a:	2200      	movs	r2, #0
2000219c:	811a      	strh	r2, [r3, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
2000219e:	687b      	ldr	r3, [r7, #4]
200021a0:	2200      	movs	r2, #0
200021a2:	815a      	strh	r2, [r3, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
200021a4:	687b      	ldr	r3, [r7, #4]
200021a6:	2200      	movs	r2, #0
200021a8:	819a      	strh	r2, [r3, #12]
}
200021aa:	46c0      	nop			; (mov r8, r8)
200021ac:	46bd      	mov	sp, r7
200021ae:	b002      	add	sp, #8
200021b0:	bd80      	pop	{r7, pc}

200021b2 <TIM_CtrlPWMOutputs>:
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
200021b2:	b580      	push	{r7, lr}
200021b4:	b082      	sub	sp, #8
200021b6:	af00      	add	r7, sp, #0
200021b8:	6078      	str	r0, [r7, #4]
200021ba:	000a      	movs	r2, r1
200021bc:	1cfb      	adds	r3, r7, #3
200021be:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
200021c0:	1cfb      	adds	r3, r7, #3
200021c2:	781b      	ldrb	r3, [r3, #0]
200021c4:	2b00      	cmp	r3, #0
200021c6:	d00a      	beq.n	200021de <TIM_CtrlPWMOutputs+0x2c>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
200021c8:	687b      	ldr	r3, [r7, #4]
200021ca:	2244      	movs	r2, #68	; 0x44
200021cc:	5a9b      	ldrh	r3, [r3, r2]
200021ce:	b29b      	uxth	r3, r3
200021d0:	4a0a      	ldr	r2, [pc, #40]	; (200021fc <TIM_CtrlPWMOutputs+0x4a>)
200021d2:	4313      	orrs	r3, r2
200021d4:	b299      	uxth	r1, r3
200021d6:	687b      	ldr	r3, [r7, #4]
200021d8:	2244      	movs	r2, #68	; 0x44
200021da:	5299      	strh	r1, [r3, r2]
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
  }  
}
200021dc:	e009      	b.n	200021f2 <TIM_CtrlPWMOutputs+0x40>
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
200021de:	687b      	ldr	r3, [r7, #4]
200021e0:	2244      	movs	r2, #68	; 0x44
200021e2:	5a9b      	ldrh	r3, [r3, r2]
200021e4:	b29b      	uxth	r3, r3
200021e6:	045b      	lsls	r3, r3, #17
200021e8:	0c5b      	lsrs	r3, r3, #17
200021ea:	b299      	uxth	r1, r3
200021ec:	687b      	ldr	r3, [r7, #4]
200021ee:	2244      	movs	r2, #68	; 0x44
200021f0:	5299      	strh	r1, [r3, r2]
}
200021f2:	46c0      	nop			; (mov r8, r8)
200021f4:	46bd      	mov	sp, r7
200021f6:	b002      	add	sp, #8
200021f8:	bd80      	pop	{r7, pc}
200021fa:	46c0      	nop			; (mov r8, r8)
200021fc:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000

20002200 <TIM_SelectCOM>:
  * @param  NewState: new state of the Commutation event.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCOM(TIM_TypeDef* TIMx, FunctionalState NewState)
{
20002200:	b580      	push	{r7, lr}
20002202:	b082      	sub	sp, #8
20002204:	af00      	add	r7, sp, #0
20002206:	6078      	str	r0, [r7, #4]
20002208:	000a      	movs	r2, r1
2000220a:	1cfb      	adds	r3, r7, #3
2000220c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
2000220e:	1cfb      	adds	r3, r7, #3
20002210:	781b      	ldrb	r3, [r3, #0]
20002212:	2b00      	cmp	r3, #0
20002214:	d008      	beq.n	20002228 <TIM_SelectCOM+0x28>
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
20002216:	687b      	ldr	r3, [r7, #4]
20002218:	889b      	ldrh	r3, [r3, #4]
2000221a:	b29b      	uxth	r3, r3
2000221c:	2204      	movs	r2, #4
2000221e:	4313      	orrs	r3, r2
20002220:	b29a      	uxth	r2, r3
20002222:	687b      	ldr	r3, [r7, #4]
20002224:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCUS;
  }
}
20002226:	e007      	b.n	20002238 <TIM_SelectCOM+0x38>
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCUS;
20002228:	687b      	ldr	r3, [r7, #4]
2000222a:	889b      	ldrh	r3, [r3, #4]
2000222c:	b29b      	uxth	r3, r3
2000222e:	2204      	movs	r2, #4
20002230:	4393      	bics	r3, r2
20002232:	b29a      	uxth	r2, r3
20002234:	687b      	ldr	r3, [r7, #4]
20002236:	809a      	strh	r2, [r3, #4]
}
20002238:	46c0      	nop			; (mov r8, r8)
2000223a:	46bd      	mov	sp, r7
2000223c:	b002      	add	sp, #8
2000223e:	bd80      	pop	{r7, pc}

20002240 <TIM_CCPreloadControl>:
  * @param  NewState: new state of the Capture Compare Preload Control bit
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
20002240:	b580      	push	{r7, lr}
20002242:	b082      	sub	sp, #8
20002244:	af00      	add	r7, sp, #0
20002246:	6078      	str	r0, [r7, #4]
20002248:	000a      	movs	r2, r1
2000224a:	1cfb      	adds	r3, r7, #3
2000224c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
2000224e:	1cfb      	adds	r3, r7, #3
20002250:	781b      	ldrb	r3, [r3, #0]
20002252:	2b00      	cmp	r3, #0
20002254:	d008      	beq.n	20002268 <TIM_CCPreloadControl+0x28>
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
20002256:	687b      	ldr	r3, [r7, #4]
20002258:	889b      	ldrh	r3, [r3, #4]
2000225a:	b29b      	uxth	r3, r3
2000225c:	2201      	movs	r2, #1
2000225e:	4313      	orrs	r3, r2
20002260:	b29a      	uxth	r2, r3
20002262:	687b      	ldr	r3, [r7, #4]
20002264:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCPC;
  }
}
20002266:	e007      	b.n	20002278 <TIM_CCPreloadControl+0x38>
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCPC;
20002268:	687b      	ldr	r3, [r7, #4]
2000226a:	889b      	ldrh	r3, [r3, #4]
2000226c:	b29b      	uxth	r3, r3
2000226e:	2201      	movs	r2, #1
20002270:	4393      	bics	r3, r2
20002272:	b29a      	uxth	r2, r3
20002274:	687b      	ldr	r3, [r7, #4]
20002276:	809a      	strh	r2, [r3, #4]
}
20002278:	46c0      	nop			; (mov r8, r8)
2000227a:	46bd      	mov	sp, r7
2000227c:	b002      	add	sp, #8
2000227e:	bd80      	pop	{r7, pc}

20002280 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
20002280:	b580      	push	{r7, lr}
20002282:	b082      	sub	sp, #8
20002284:	af00      	add	r7, sp, #0
20002286:	6078      	str	r0, [r7, #4]
20002288:	0008      	movs	r0, r1
2000228a:	0011      	movs	r1, r2
2000228c:	1cbb      	adds	r3, r7, #2
2000228e:	1c02      	adds	r2, r0, #0
20002290:	801a      	strh	r2, [r3, #0]
20002292:	1c7b      	adds	r3, r7, #1
20002294:	1c0a      	adds	r2, r1, #0
20002296:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
20002298:	1c7b      	adds	r3, r7, #1
2000229a:	781b      	ldrb	r3, [r3, #0]
2000229c:	2b00      	cmp	r3, #0
2000229e:	d009      	beq.n	200022b4 <TIM_ITConfig+0x34>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
200022a0:	687b      	ldr	r3, [r7, #4]
200022a2:	899b      	ldrh	r3, [r3, #12]
200022a4:	b29a      	uxth	r2, r3
200022a6:	1cbb      	adds	r3, r7, #2
200022a8:	881b      	ldrh	r3, [r3, #0]
200022aa:	4313      	orrs	r3, r2
200022ac:	b29a      	uxth	r2, r3
200022ae:	687b      	ldr	r3, [r7, #4]
200022b0:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
200022b2:	e00a      	b.n	200022ca <TIM_ITConfig+0x4a>
    TIMx->DIER &= (uint16_t)~TIM_IT;
200022b4:	687b      	ldr	r3, [r7, #4]
200022b6:	899b      	ldrh	r3, [r3, #12]
200022b8:	b29b      	uxth	r3, r3
200022ba:	1cba      	adds	r2, r7, #2
200022bc:	8812      	ldrh	r2, [r2, #0]
200022be:	43d2      	mvns	r2, r2
200022c0:	b292      	uxth	r2, r2
200022c2:	4013      	ands	r3, r2
200022c4:	b29a      	uxth	r2, r3
200022c6:	687b      	ldr	r3, [r7, #4]
200022c8:	819a      	strh	r2, [r3, #12]
}
200022ca:	46c0      	nop			; (mov r8, r8)
200022cc:	46bd      	mov	sp, r7
200022ce:	b002      	add	sp, #8
200022d0:	bd80      	pop	{r7, pc}

200022d2 <TIM_GenerateEvent>:
  * @note   TIM_EventSource_COM and TIM_EventSource_Break are used only with TIM1 and TIM8.
  *        
  * @retval None
  */
void TIM_GenerateEvent(TIM_TypeDef* TIMx, uint16_t TIM_EventSource)
{ 
200022d2:	b580      	push	{r7, lr}
200022d4:	b082      	sub	sp, #8
200022d6:	af00      	add	r7, sp, #0
200022d8:	6078      	str	r0, [r7, #4]
200022da:	000a      	movs	r2, r1
200022dc:	1cbb      	adds	r3, r7, #2
200022de:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
 
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
200022e0:	687b      	ldr	r3, [r7, #4]
200022e2:	1cba      	adds	r2, r7, #2
200022e4:	8812      	ldrh	r2, [r2, #0]
200022e6:	829a      	strh	r2, [r3, #20]
}
200022e8:	46c0      	nop			; (mov r8, r8)
200022ea:	46bd      	mov	sp, r7
200022ec:	b002      	add	sp, #8
200022ee:	bd80      	pop	{r7, pc}

200022f0 <TIM_GetFlagStatus>:
  * @note   TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.    
  *
  * @retval The new state of TIM_FLAG (SET or RESET).
  */
FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{ 
200022f0:	b580      	push	{r7, lr}
200022f2:	b084      	sub	sp, #16
200022f4:	af00      	add	r7, sp, #0
200022f6:	6078      	str	r0, [r7, #4]
200022f8:	000a      	movs	r2, r1
200022fa:	1cbb      	adds	r3, r7, #2
200022fc:	801a      	strh	r2, [r3, #0]
  ITStatus bitstatus = RESET;  
200022fe:	210f      	movs	r1, #15
20002300:	187b      	adds	r3, r7, r1
20002302:	2200      	movs	r2, #0
20002304:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));

  
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
20002306:	687b      	ldr	r3, [r7, #4]
20002308:	8a1b      	ldrh	r3, [r3, #16]
2000230a:	b29b      	uxth	r3, r3
2000230c:	1cba      	adds	r2, r7, #2
2000230e:	8812      	ldrh	r2, [r2, #0]
20002310:	4013      	ands	r3, r2
20002312:	b29b      	uxth	r3, r3
20002314:	2b00      	cmp	r3, #0
20002316:	d003      	beq.n	20002320 <TIM_GetFlagStatus+0x30>
  {
    bitstatus = SET;
20002318:	187b      	adds	r3, r7, r1
2000231a:	2201      	movs	r2, #1
2000231c:	701a      	strb	r2, [r3, #0]
2000231e:	e003      	b.n	20002328 <TIM_GetFlagStatus+0x38>
  }
  else
  {
    bitstatus = RESET;
20002320:	230f      	movs	r3, #15
20002322:	18fb      	adds	r3, r7, r3
20002324:	2200      	movs	r2, #0
20002326:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
20002328:	230f      	movs	r3, #15
2000232a:	18fb      	adds	r3, r7, r3
2000232c:	781b      	ldrb	r3, [r3, #0]
}
2000232e:	0018      	movs	r0, r3
20002330:	46bd      	mov	sp, r7
20002332:	b004      	add	sp, #16
20002334:	bd80      	pop	{r7, pc}

20002336 <TIM_ClearFlag>:
  * @note   TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.
  *    
  * @retval None
  */
void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{  
20002336:	b580      	push	{r7, lr}
20002338:	b082      	sub	sp, #8
2000233a:	af00      	add	r7, sp, #0
2000233c:	6078      	str	r0, [r7, #4]
2000233e:	000a      	movs	r2, r1
20002340:	1cbb      	adds	r3, r7, #2
20002342:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
20002344:	1cbb      	adds	r3, r7, #2
20002346:	881b      	ldrh	r3, [r3, #0]
20002348:	43db      	mvns	r3, r3
2000234a:	b29a      	uxth	r2, r3
2000234c:	687b      	ldr	r3, [r7, #4]
2000234e:	821a      	strh	r2, [r3, #16]
}
20002350:	46c0      	nop			; (mov r8, r8)
20002352:	46bd      	mov	sp, r7
20002354:	b002      	add	sp, #8
20002356:	bd80      	pop	{r7, pc}

20002358 <TIM_GetITStatus>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *     
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
20002358:	b5b0      	push	{r4, r5, r7, lr}
2000235a:	b084      	sub	sp, #16
2000235c:	af00      	add	r7, sp, #0
2000235e:	6078      	str	r0, [r7, #4]
20002360:	000a      	movs	r2, r1
20002362:	1cbb      	adds	r3, r7, #2
20002364:	801a      	strh	r2, [r3, #0]
  ITStatus bitstatus = RESET;  
20002366:	250f      	movs	r5, #15
20002368:	197b      	adds	r3, r7, r5
2000236a:	2200      	movs	r2, #0
2000236c:	701a      	strb	r2, [r3, #0]
  uint16_t itstatus = 0x0, itenable = 0x0;
2000236e:	200c      	movs	r0, #12
20002370:	183b      	adds	r3, r7, r0
20002372:	2200      	movs	r2, #0
20002374:	801a      	strh	r2, [r3, #0]
20002376:	240a      	movs	r4, #10
20002378:	193b      	adds	r3, r7, r4
2000237a:	2200      	movs	r2, #0
2000237c:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
2000237e:	687b      	ldr	r3, [r7, #4]
20002380:	8a1b      	ldrh	r3, [r3, #16]
20002382:	b29a      	uxth	r2, r3
20002384:	183b      	adds	r3, r7, r0
20002386:	1cb9      	adds	r1, r7, #2
20002388:	8809      	ldrh	r1, [r1, #0]
2000238a:	400a      	ands	r2, r1
2000238c:	801a      	strh	r2, [r3, #0]
  
  itenable = TIMx->DIER & TIM_IT;
2000238e:	687b      	ldr	r3, [r7, #4]
20002390:	899b      	ldrh	r3, [r3, #12]
20002392:	b29a      	uxth	r2, r3
20002394:	193b      	adds	r3, r7, r4
20002396:	1cb9      	adds	r1, r7, #2
20002398:	8809      	ldrh	r1, [r1, #0]
2000239a:	400a      	ands	r2, r1
2000239c:	801a      	strh	r2, [r3, #0]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
2000239e:	183b      	adds	r3, r7, r0
200023a0:	881b      	ldrh	r3, [r3, #0]
200023a2:	2b00      	cmp	r3, #0
200023a4:	d007      	beq.n	200023b6 <TIM_GetITStatus+0x5e>
200023a6:	193b      	adds	r3, r7, r4
200023a8:	881b      	ldrh	r3, [r3, #0]
200023aa:	2b00      	cmp	r3, #0
200023ac:	d003      	beq.n	200023b6 <TIM_GetITStatus+0x5e>
  {
    bitstatus = SET;
200023ae:	197b      	adds	r3, r7, r5
200023b0:	2201      	movs	r2, #1
200023b2:	701a      	strb	r2, [r3, #0]
200023b4:	e003      	b.n	200023be <TIM_GetITStatus+0x66>
  }
  else
  {
    bitstatus = RESET;
200023b6:	230f      	movs	r3, #15
200023b8:	18fb      	adds	r3, r7, r3
200023ba:	2200      	movs	r2, #0
200023bc:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
200023be:	230f      	movs	r3, #15
200023c0:	18fb      	adds	r3, r7, r3
200023c2:	781b      	ldrb	r3, [r3, #0]
}
200023c4:	0018      	movs	r0, r3
200023c6:	46bd      	mov	sp, r7
200023c8:	b004      	add	sp, #16
200023ca:	bdb0      	pop	{r4, r5, r7, pc}

200023cc <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
200023cc:	b580      	push	{r7, lr}
200023ce:	b082      	sub	sp, #8
200023d0:	af00      	add	r7, sp, #0
200023d2:	6078      	str	r0, [r7, #4]
200023d4:	000a      	movs	r2, r1
200023d6:	1cbb      	adds	r3, r7, #2
200023d8:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
200023da:	1cbb      	adds	r3, r7, #2
200023dc:	881b      	ldrh	r3, [r3, #0]
200023de:	43db      	mvns	r3, r3
200023e0:	b29a      	uxth	r2, r3
200023e2:	687b      	ldr	r3, [r7, #4]
200023e4:	821a      	strh	r2, [r3, #16]
}
200023e6:	46c0      	nop			; (mov r8, r8)
200023e8:	46bd      	mov	sp, r7
200023ea:	b002      	add	sp, #8
200023ec:	bd80      	pop	{r7, pc}

200023ee <TIM_DMAConfig>:
  * @param  TIM_DMABurstLength: DMA Burst length. This parameter can be one value
  *         between: TIM_DMABurstLength_1Transfer and TIM_DMABurstLength_18Transfers.
  * @retval None
  */
void TIM_DMAConfig(TIM_TypeDef* TIMx, uint16_t TIM_DMABase, uint16_t TIM_DMABurstLength)
{
200023ee:	b580      	push	{r7, lr}
200023f0:	b082      	sub	sp, #8
200023f2:	af00      	add	r7, sp, #0
200023f4:	6078      	str	r0, [r7, #4]
200023f6:	0008      	movs	r0, r1
200023f8:	0011      	movs	r1, r2
200023fa:	1cbb      	adds	r3, r7, #2
200023fc:	1c02      	adds	r2, r0, #0
200023fe:	801a      	strh	r2, [r3, #0]
20002400:	003b      	movs	r3, r7
20002402:	1c0a      	adds	r2, r1, #0
20002404:	801a      	strh	r2, [r3, #0]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase)); 
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));

  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
20002406:	1cba      	adds	r2, r7, #2
20002408:	003b      	movs	r3, r7
2000240a:	8812      	ldrh	r2, [r2, #0]
2000240c:	881b      	ldrh	r3, [r3, #0]
2000240e:	4313      	orrs	r3, r2
20002410:	b299      	uxth	r1, r3
20002412:	687b      	ldr	r3, [r7, #4]
20002414:	2248      	movs	r2, #72	; 0x48
20002416:	5299      	strh	r1, [r3, r2]
}
20002418:	46c0      	nop			; (mov r8, r8)
2000241a:	46bd      	mov	sp, r7
2000241c:	b002      	add	sp, #8
2000241e:	bd80      	pop	{r7, pc}

20002420 <TIM_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
{ 
20002420:	b580      	push	{r7, lr}
20002422:	b082      	sub	sp, #8
20002424:	af00      	add	r7, sp, #0
20002426:	6078      	str	r0, [r7, #4]
20002428:	0008      	movs	r0, r1
2000242a:	0011      	movs	r1, r2
2000242c:	1cbb      	adds	r3, r7, #2
2000242e:	1c02      	adds	r2, r0, #0
20002430:	801a      	strh	r2, [r3, #0]
20002432:	1c7b      	adds	r3, r7, #1
20002434:	1c0a      	adds	r2, r1, #0
20002436:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx)); 
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
20002438:	1c7b      	adds	r3, r7, #1
2000243a:	781b      	ldrb	r3, [r3, #0]
2000243c:	2b00      	cmp	r3, #0
2000243e:	d009      	beq.n	20002454 <TIM_DMACmd+0x34>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
20002440:	687b      	ldr	r3, [r7, #4]
20002442:	899b      	ldrh	r3, [r3, #12]
20002444:	b29a      	uxth	r2, r3
20002446:	1cbb      	adds	r3, r7, #2
20002448:	881b      	ldrh	r3, [r3, #0]
2000244a:	4313      	orrs	r3, r2
2000244c:	b29a      	uxth	r2, r3
2000244e:	687b      	ldr	r3, [r7, #4]
20002450:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
  }
}
20002452:	e00a      	b.n	2000246a <TIM_DMACmd+0x4a>
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
20002454:	687b      	ldr	r3, [r7, #4]
20002456:	899b      	ldrh	r3, [r3, #12]
20002458:	b29b      	uxth	r3, r3
2000245a:	1cba      	adds	r2, r7, #2
2000245c:	8812      	ldrh	r2, [r2, #0]
2000245e:	43d2      	mvns	r2, r2
20002460:	b292      	uxth	r2, r2
20002462:	4013      	ands	r3, r2
20002464:	b29a      	uxth	r2, r3
20002466:	687b      	ldr	r3, [r7, #4]
20002468:	819a      	strh	r2, [r3, #12]
}
2000246a:	46c0      	nop			; (mov r8, r8)
2000246c:	46bd      	mov	sp, r7
2000246e:	b002      	add	sp, #8
20002470:	bd80      	pop	{r7, pc}

20002472 <TIM_SelectCCDMA>:
  * @param  NewState: new state of the Capture Compare DMA source
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCCDMA(TIM_TypeDef* TIMx, FunctionalState NewState)
{
20002472:	b580      	push	{r7, lr}
20002474:	b082      	sub	sp, #8
20002476:	af00      	add	r7, sp, #0
20002478:	6078      	str	r0, [r7, #4]
2000247a:	000a      	movs	r2, r1
2000247c:	1cfb      	adds	r3, r7, #3
2000247e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20002480:	1cfb      	adds	r3, r7, #3
20002482:	781b      	ldrb	r3, [r3, #0]
20002484:	2b00      	cmp	r3, #0
20002486:	d008      	beq.n	2000249a <TIM_SelectCCDMA+0x28>
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
20002488:	687b      	ldr	r3, [r7, #4]
2000248a:	889b      	ldrh	r3, [r3, #4]
2000248c:	b29b      	uxth	r3, r3
2000248e:	2208      	movs	r2, #8
20002490:	4313      	orrs	r3, r2
20002492:	b29a      	uxth	r2, r3
20002494:	687b      	ldr	r3, [r7, #4]
20002496:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCDS;
  }
}
20002498:	e007      	b.n	200024aa <TIM_SelectCCDMA+0x38>
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCDS;
2000249a:	687b      	ldr	r3, [r7, #4]
2000249c:	889b      	ldrh	r3, [r3, #4]
2000249e:	b29b      	uxth	r3, r3
200024a0:	2208      	movs	r2, #8
200024a2:	4393      	bics	r3, r2
200024a4:	b29a      	uxth	r2, r3
200024a6:	687b      	ldr	r3, [r7, #4]
200024a8:	809a      	strh	r2, [r3, #4]
}
200024aa:	46c0      	nop			; (mov r8, r8)
200024ac:	46bd      	mov	sp, r7
200024ae:	b002      	add	sp, #8
200024b0:	bd80      	pop	{r7, pc}

200024b2 <TIM_InternalClockConfig>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
  *         peripheral.
  * @retval None
  */
void TIM_InternalClockConfig(TIM_TypeDef* TIMx)
{
200024b2:	b580      	push	{r7, lr}
200024b4:	b082      	sub	sp, #8
200024b6:	af00      	add	r7, sp, #0
200024b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  (uint16_t)~TIM_SMCR_SMS;
200024ba:	687b      	ldr	r3, [r7, #4]
200024bc:	891b      	ldrh	r3, [r3, #8]
200024be:	b29b      	uxth	r3, r3
200024c0:	2207      	movs	r2, #7
200024c2:	4393      	bics	r3, r2
200024c4:	b29a      	uxth	r2, r3
200024c6:	687b      	ldr	r3, [r7, #4]
200024c8:	811a      	strh	r2, [r3, #8]
}
200024ca:	46c0      	nop			; (mov r8, r8)
200024cc:	46bd      	mov	sp, r7
200024ce:	b002      	add	sp, #8
200024d0:	bd80      	pop	{r7, pc}

200024d2 <TIM_ITRxExternalClockConfig>:
  *            @arg TIM_TS_ITR2: Internal Trigger 2
  *            @arg TIM_TS_ITR3: Internal Trigger 3
  * @retval None
  */
void TIM_ITRxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
200024d2:	b580      	push	{r7, lr}
200024d4:	b082      	sub	sp, #8
200024d6:	af00      	add	r7, sp, #0
200024d8:	6078      	str	r0, [r7, #4]
200024da:	000a      	movs	r2, r1
200024dc:	1cbb      	adds	r3, r7, #2
200024de:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_INTERNAL_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);
200024e0:	1cbb      	adds	r3, r7, #2
200024e2:	881a      	ldrh	r2, [r3, #0]
200024e4:	687b      	ldr	r3, [r7, #4]
200024e6:	0011      	movs	r1, r2
200024e8:	0018      	movs	r0, r3
200024ea:	f000 f8b9 	bl	20002660 <TIM_SelectInputTrigger>

  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
200024ee:	687b      	ldr	r3, [r7, #4]
200024f0:	891b      	ldrh	r3, [r3, #8]
200024f2:	b29b      	uxth	r3, r3
200024f4:	2207      	movs	r2, #7
200024f6:	4313      	orrs	r3, r2
200024f8:	b29a      	uxth	r2, r3
200024fa:	687b      	ldr	r3, [r7, #4]
200024fc:	811a      	strh	r2, [r3, #8]
}
200024fe:	46c0      	nop			; (mov r8, r8)
20002500:	46bd      	mov	sp, r7
20002502:	b002      	add	sp, #8
20002504:	bd80      	pop	{r7, pc}

20002506 <TIM_TIxExternalClockConfig>:
  *          This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
20002506:	b5b0      	push	{r4, r5, r7, lr}
20002508:	b084      	sub	sp, #16
2000250a:	af00      	add	r7, sp, #0
2000250c:	60f8      	str	r0, [r7, #12]
2000250e:	000c      	movs	r4, r1
20002510:	0010      	movs	r0, r2
20002512:	0019      	movs	r1, r3
20002514:	250a      	movs	r5, #10
20002516:	197b      	adds	r3, r7, r5
20002518:	1c22      	adds	r2, r4, #0
2000251a:	801a      	strh	r2, [r3, #0]
2000251c:	2408      	movs	r4, #8
2000251e:	193b      	adds	r3, r7, r4
20002520:	1c02      	adds	r2, r0, #0
20002522:	801a      	strh	r2, [r3, #0]
20002524:	1dbb      	adds	r3, r7, #6
20002526:	1c0a      	adds	r2, r1, #0
20002528:	801a      	strh	r2, [r3, #0]
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
2000252a:	197b      	adds	r3, r7, r5
2000252c:	881b      	ldrh	r3, [r3, #0]
2000252e:	2b60      	cmp	r3, #96	; 0x60
20002530:	d109      	bne.n	20002546 <TIM_TIxExternalClockConfig+0x40>
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
20002532:	1dbb      	adds	r3, r7, #6
20002534:	881a      	ldrh	r2, [r3, #0]
20002536:	193b      	adds	r3, r7, r4
20002538:	8819      	ldrh	r1, [r3, #0]
2000253a:	68f8      	ldr	r0, [r7, #12]
2000253c:	0013      	movs	r3, r2
2000253e:	2201      	movs	r2, #1
20002540:	f000 fa33 	bl	200029aa <TI2_Config>
20002544:	e009      	b.n	2000255a <TIM_TIxExternalClockConfig+0x54>
  }
  else
  {
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
20002546:	1dbb      	adds	r3, r7, #6
20002548:	881a      	ldrh	r2, [r3, #0]
2000254a:	2308      	movs	r3, #8
2000254c:	18fb      	adds	r3, r7, r3
2000254e:	8819      	ldrh	r1, [r3, #0]
20002550:	68f8      	ldr	r0, [r7, #12]
20002552:	0013      	movs	r3, r2
20002554:	2201      	movs	r2, #1
20002556:	f000 f9cf 	bl	200028f8 <TI1_Config>
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
2000255a:	230a      	movs	r3, #10
2000255c:	18fb      	adds	r3, r7, r3
2000255e:	881a      	ldrh	r2, [r3, #0]
20002560:	68fb      	ldr	r3, [r7, #12]
20002562:	0011      	movs	r1, r2
20002564:	0018      	movs	r0, r3
20002566:	f000 f87b 	bl	20002660 <TIM_SelectInputTrigger>
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
2000256a:	68fb      	ldr	r3, [r7, #12]
2000256c:	891b      	ldrh	r3, [r3, #8]
2000256e:	b29b      	uxth	r3, r3
20002570:	2207      	movs	r2, #7
20002572:	4313      	orrs	r3, r2
20002574:	b29a      	uxth	r2, r3
20002576:	68fb      	ldr	r3, [r7, #12]
20002578:	811a      	strh	r2, [r3, #8]
}
2000257a:	46c0      	nop			; (mov r8, r8)
2000257c:	46bd      	mov	sp, r7
2000257e:	b004      	add	sp, #16
20002580:	bdb0      	pop	{r4, r5, r7, pc}

20002582 <TIM_ETRClockMode1Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                            uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
20002582:	b5f0      	push	{r4, r5, r6, r7, lr}
20002584:	b087      	sub	sp, #28
20002586:	af00      	add	r7, sp, #0
20002588:	60f8      	str	r0, [r7, #12]
2000258a:	000c      	movs	r4, r1
2000258c:	0010      	movs	r0, r2
2000258e:	0019      	movs	r1, r3
20002590:	260a      	movs	r6, #10
20002592:	19bb      	adds	r3, r7, r6
20002594:	1c22      	adds	r2, r4, #0
20002596:	801a      	strh	r2, [r3, #0]
20002598:	2308      	movs	r3, #8
2000259a:	18fb      	adds	r3, r7, r3
2000259c:	1c02      	adds	r2, r0, #0
2000259e:	801a      	strh	r2, [r3, #0]
200025a0:	1dbb      	adds	r3, r7, #6
200025a2:	1c0a      	adds	r2, r1, #0
200025a4:	801a      	strh	r2, [r3, #0]
  uint16_t tmpsmcr = 0;
200025a6:	2516      	movs	r5, #22
200025a8:	197b      	adds	r3, r7, r5
200025aa:	2200      	movs	r2, #0
200025ac:	801a      	strh	r2, [r3, #0]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
200025ae:	1dbb      	adds	r3, r7, #6
200025b0:	881c      	ldrh	r4, [r3, #0]
200025b2:	2308      	movs	r3, #8
200025b4:	18fb      	adds	r3, r7, r3
200025b6:	881a      	ldrh	r2, [r3, #0]
200025b8:	19bb      	adds	r3, r7, r6
200025ba:	8819      	ldrh	r1, [r3, #0]
200025bc:	68f8      	ldr	r0, [r7, #12]
200025be:	0023      	movs	r3, r4
200025c0:	f000 f8c6 	bl	20002750 <TIM_ETRConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
200025c4:	197b      	adds	r3, r7, r5
200025c6:	68fa      	ldr	r2, [r7, #12]
200025c8:	8912      	ldrh	r2, [r2, #8]
200025ca:	801a      	strh	r2, [r3, #0]

  /* Reset the SMS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
200025cc:	197b      	adds	r3, r7, r5
200025ce:	0028      	movs	r0, r5
200025d0:	197a      	adds	r2, r7, r5
200025d2:	8812      	ldrh	r2, [r2, #0]
200025d4:	2107      	movs	r1, #7
200025d6:	438a      	bics	r2, r1
200025d8:	801a      	strh	r2, [r3, #0]

  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;
200025da:	183b      	adds	r3, r7, r0
200025dc:	183a      	adds	r2, r7, r0
200025de:	8812      	ldrh	r2, [r2, #0]
200025e0:	2107      	movs	r1, #7
200025e2:	430a      	orrs	r2, r1
200025e4:	801a      	strh	r2, [r3, #0]

  /* Select the Trigger selection : ETRF */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
200025e6:	183b      	adds	r3, r7, r0
200025e8:	183a      	adds	r2, r7, r0
200025ea:	8812      	ldrh	r2, [r2, #0]
200025ec:	2170      	movs	r1, #112	; 0x70
200025ee:	438a      	bics	r2, r1
200025f0:	801a      	strh	r2, [r3, #0]
  tmpsmcr |= TIM_TS_ETRF;
200025f2:	183b      	adds	r3, r7, r0
200025f4:	183a      	adds	r2, r7, r0
200025f6:	8812      	ldrh	r2, [r2, #0]
200025f8:	2170      	movs	r1, #112	; 0x70
200025fa:	430a      	orrs	r2, r1
200025fc:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
200025fe:	68fb      	ldr	r3, [r7, #12]
20002600:	183a      	adds	r2, r7, r0
20002602:	8812      	ldrh	r2, [r2, #0]
20002604:	811a      	strh	r2, [r3, #8]
}
20002606:	46c0      	nop			; (mov r8, r8)
20002608:	46bd      	mov	sp, r7
2000260a:	b007      	add	sp, #28
2000260c:	bdf0      	pop	{r4, r5, r6, r7, pc}

2000260e <TIM_ETRClockMode2Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
2000260e:	b5f0      	push	{r4, r5, r6, r7, lr}
20002610:	b085      	sub	sp, #20
20002612:	af00      	add	r7, sp, #0
20002614:	60f8      	str	r0, [r7, #12]
20002616:	000c      	movs	r4, r1
20002618:	0010      	movs	r0, r2
2000261a:	0019      	movs	r1, r3
2000261c:	250a      	movs	r5, #10
2000261e:	197b      	adds	r3, r7, r5
20002620:	1c22      	adds	r2, r4, #0
20002622:	801a      	strh	r2, [r3, #0]
20002624:	2608      	movs	r6, #8
20002626:	19bb      	adds	r3, r7, r6
20002628:	1c02      	adds	r2, r0, #0
2000262a:	801a      	strh	r2, [r3, #0]
2000262c:	1dbb      	adds	r3, r7, #6
2000262e:	1c0a      	adds	r2, r1, #0
20002630:	801a      	strh	r2, [r3, #0]
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
20002632:	1dbb      	adds	r3, r7, #6
20002634:	881c      	ldrh	r4, [r3, #0]
20002636:	19bb      	adds	r3, r7, r6
20002638:	881a      	ldrh	r2, [r3, #0]
2000263a:	197b      	adds	r3, r7, r5
2000263c:	8819      	ldrh	r1, [r3, #0]
2000263e:	68f8      	ldr	r0, [r7, #12]
20002640:	0023      	movs	r3, r4
20002642:	f000 f885 	bl	20002750 <TIM_ETRConfig>

  /* Enable the External clock mode2 */
  TIMx->SMCR |= TIM_SMCR_ECE;
20002646:	68fb      	ldr	r3, [r7, #12]
20002648:	891b      	ldrh	r3, [r3, #8]
2000264a:	b29b      	uxth	r3, r3
2000264c:	2280      	movs	r2, #128	; 0x80
2000264e:	01d2      	lsls	r2, r2, #7
20002650:	4313      	orrs	r3, r2
20002652:	b29a      	uxth	r2, r3
20002654:	68fb      	ldr	r3, [r7, #12]
20002656:	811a      	strh	r2, [r3, #8]
}
20002658:	46c0      	nop			; (mov r8, r8)
2000265a:	46bd      	mov	sp, r7
2000265c:	b005      	add	sp, #20
2000265e:	bdf0      	pop	{r4, r5, r6, r7, pc}

20002660 <TIM_SelectInputTrigger>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
20002660:	b580      	push	{r7, lr}
20002662:	b084      	sub	sp, #16
20002664:	af00      	add	r7, sp, #0
20002666:	6078      	str	r0, [r7, #4]
20002668:	000a      	movs	r2, r1
2000266a:	1cbb      	adds	r3, r7, #2
2000266c:	801a      	strh	r2, [r3, #0]
  uint16_t tmpsmcr = 0;
2000266e:	200e      	movs	r0, #14
20002670:	183b      	adds	r3, r7, r0
20002672:	2200      	movs	r2, #0
20002674:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
20002676:	183b      	adds	r3, r7, r0
20002678:	687a      	ldr	r2, [r7, #4]
2000267a:	8912      	ldrh	r2, [r2, #8]
2000267c:	801a      	strh	r2, [r3, #0]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
2000267e:	183b      	adds	r3, r7, r0
20002680:	183a      	adds	r2, r7, r0
20002682:	8812      	ldrh	r2, [r2, #0]
20002684:	2170      	movs	r1, #112	; 0x70
20002686:	438a      	bics	r2, r1
20002688:	801a      	strh	r2, [r3, #0]

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
2000268a:	183b      	adds	r3, r7, r0
2000268c:	1839      	adds	r1, r7, r0
2000268e:	1cba      	adds	r2, r7, #2
20002690:	8809      	ldrh	r1, [r1, #0]
20002692:	8812      	ldrh	r2, [r2, #0]
20002694:	430a      	orrs	r2, r1
20002696:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
20002698:	687b      	ldr	r3, [r7, #4]
2000269a:	183a      	adds	r2, r7, r0
2000269c:	8812      	ldrh	r2, [r2, #0]
2000269e:	811a      	strh	r2, [r3, #8]
}
200026a0:	46c0      	nop			; (mov r8, r8)
200026a2:	46bd      	mov	sp, r7
200026a4:	b004      	add	sp, #16
200026a6:	bd80      	pop	{r7, pc}

200026a8 <TIM_SelectOutputTrigger>:
  *            @arg TIM_TRGOSource_OC4Ref: OC4REF signal is used as the trigger output(TRGO)
  *
  * @retval None
  */
void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
{
200026a8:	b580      	push	{r7, lr}
200026aa:	b082      	sub	sp, #8
200026ac:	af00      	add	r7, sp, #0
200026ae:	6078      	str	r0, [r7, #4]
200026b0:	000a      	movs	r2, r1
200026b2:	1cbb      	adds	r3, r7, #2
200026b4:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
200026b6:	687b      	ldr	r3, [r7, #4]
200026b8:	889b      	ldrh	r3, [r3, #4]
200026ba:	b29b      	uxth	r3, r3
200026bc:	2270      	movs	r2, #112	; 0x70
200026be:	4393      	bics	r3, r2
200026c0:	b29a      	uxth	r2, r3
200026c2:	687b      	ldr	r3, [r7, #4]
200026c4:	809a      	strh	r2, [r3, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
200026c6:	687b      	ldr	r3, [r7, #4]
200026c8:	889b      	ldrh	r3, [r3, #4]
200026ca:	b29a      	uxth	r2, r3
200026cc:	1cbb      	adds	r3, r7, #2
200026ce:	881b      	ldrh	r3, [r3, #0]
200026d0:	4313      	orrs	r3, r2
200026d2:	b29a      	uxth	r2, r3
200026d4:	687b      	ldr	r3, [r7, #4]
200026d6:	809a      	strh	r2, [r3, #4]
}
200026d8:	46c0      	nop			; (mov r8, r8)
200026da:	46bd      	mov	sp, r7
200026dc:	b002      	add	sp, #8
200026de:	bd80      	pop	{r7, pc}

200026e0 <TIM_SelectSlaveMode>:
  *            @arg TIM_SlaveMode_Trigger:   The counter starts at a rising edge of the trigger TRGI
  *            @arg TIM_SlaveMode_External1: Rising edges of the selected trigger (TRGI) clock the counter
  * @retval None
  */
void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_SlaveMode)
{
200026e0:	b580      	push	{r7, lr}
200026e2:	b082      	sub	sp, #8
200026e4:	af00      	add	r7, sp, #0
200026e6:	6078      	str	r0, [r7, #4]
200026e8:	000a      	movs	r2, r1
200026ea:	1cbb      	adds	r3, r7, #2
200026ec:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));

  /* Reset the SMS Bits */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_SMS;
200026ee:	687b      	ldr	r3, [r7, #4]
200026f0:	891b      	ldrh	r3, [r3, #8]
200026f2:	b29b      	uxth	r3, r3
200026f4:	2207      	movs	r2, #7
200026f6:	4393      	bics	r3, r2
200026f8:	b29a      	uxth	r2, r3
200026fa:	687b      	ldr	r3, [r7, #4]
200026fc:	811a      	strh	r2, [r3, #8]

  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
200026fe:	687b      	ldr	r3, [r7, #4]
20002700:	891b      	ldrh	r3, [r3, #8]
20002702:	b29a      	uxth	r2, r3
20002704:	1cbb      	adds	r3, r7, #2
20002706:	881b      	ldrh	r3, [r3, #0]
20002708:	4313      	orrs	r3, r2
2000270a:	b29a      	uxth	r2, r3
2000270c:	687b      	ldr	r3, [r7, #4]
2000270e:	811a      	strh	r2, [r3, #8]
}
20002710:	46c0      	nop			; (mov r8, r8)
20002712:	46bd      	mov	sp, r7
20002714:	b002      	add	sp, #8
20002716:	bd80      	pop	{r7, pc}

20002718 <TIM_SelectMasterSlaveMode>:
  *                                             and its slaves (through TRGO)
  *            @arg TIM_MasterSlaveMode_Disable: No action
  * @retval None
  */
void TIM_SelectMasterSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_MasterSlaveMode)
{
20002718:	b580      	push	{r7, lr}
2000271a:	b082      	sub	sp, #8
2000271c:	af00      	add	r7, sp, #0
2000271e:	6078      	str	r0, [r7, #4]
20002720:	000a      	movs	r2, r1
20002722:	1cbb      	adds	r3, r7, #2
20002724:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));

  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_MSM;
20002726:	687b      	ldr	r3, [r7, #4]
20002728:	891b      	ldrh	r3, [r3, #8]
2000272a:	b29b      	uxth	r3, r3
2000272c:	2280      	movs	r2, #128	; 0x80
2000272e:	4393      	bics	r3, r2
20002730:	b29a      	uxth	r2, r3
20002732:	687b      	ldr	r3, [r7, #4]
20002734:	811a      	strh	r2, [r3, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
20002736:	687b      	ldr	r3, [r7, #4]
20002738:	891b      	ldrh	r3, [r3, #8]
2000273a:	b29a      	uxth	r2, r3
2000273c:	1cbb      	adds	r3, r7, #2
2000273e:	881b      	ldrh	r3, [r3, #0]
20002740:	4313      	orrs	r3, r2
20002742:	b29a      	uxth	r2, r3
20002744:	687b      	ldr	r3, [r7, #4]
20002746:	811a      	strh	r2, [r3, #8]
}
20002748:	46c0      	nop			; (mov r8, r8)
2000274a:	46bd      	mov	sp, r7
2000274c:	b002      	add	sp, #8
2000274e:	bd80      	pop	{r7, pc}

20002750 <TIM_ETRConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                   uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
20002750:	b5b0      	push	{r4, r5, r7, lr}
20002752:	b086      	sub	sp, #24
20002754:	af00      	add	r7, sp, #0
20002756:	60f8      	str	r0, [r7, #12]
20002758:	000c      	movs	r4, r1
2000275a:	0010      	movs	r0, r2
2000275c:	0019      	movs	r1, r3
2000275e:	250a      	movs	r5, #10
20002760:	197b      	adds	r3, r7, r5
20002762:	1c22      	adds	r2, r4, #0
20002764:	801a      	strh	r2, [r3, #0]
20002766:	2408      	movs	r4, #8
20002768:	193b      	adds	r3, r7, r4
2000276a:	1c02      	adds	r2, r0, #0
2000276c:	801a      	strh	r2, [r3, #0]
2000276e:	1dbb      	adds	r3, r7, #6
20002770:	1c0a      	adds	r2, r1, #0
20002772:	801a      	strh	r2, [r3, #0]
  uint16_t tmpsmcr = 0;
20002774:	2016      	movs	r0, #22
20002776:	183b      	adds	r3, r7, r0
20002778:	2200      	movs	r2, #0
2000277a:	801a      	strh	r2, [r3, #0]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
2000277c:	183b      	adds	r3, r7, r0
2000277e:	68fa      	ldr	r2, [r7, #12]
20002780:	8912      	ldrh	r2, [r2, #8]
20002782:	801a      	strh	r2, [r3, #0]

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
20002784:	183b      	adds	r3, r7, r0
20002786:	183a      	adds	r2, r7, r0
20002788:	8812      	ldrh	r2, [r2, #0]
2000278a:	21ff      	movs	r1, #255	; 0xff
2000278c:	400a      	ands	r2, r1
2000278e:	801a      	strh	r2, [r3, #0]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
20002790:	1dbb      	adds	r3, r7, #6
20002792:	881b      	ldrh	r3, [r3, #0]
20002794:	021b      	lsls	r3, r3, #8
20002796:	b29a      	uxth	r2, r3
20002798:	193b      	adds	r3, r7, r4
2000279a:	881b      	ldrh	r3, [r3, #0]
2000279c:	4313      	orrs	r3, r2
2000279e:	b29a      	uxth	r2, r3
200027a0:	197b      	adds	r3, r7, r5
200027a2:	881b      	ldrh	r3, [r3, #0]
200027a4:	4313      	orrs	r3, r2
200027a6:	b299      	uxth	r1, r3
200027a8:	183b      	adds	r3, r7, r0
200027aa:	183a      	adds	r2, r7, r0
200027ac:	8812      	ldrh	r2, [r2, #0]
200027ae:	430a      	orrs	r2, r1
200027b0:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
200027b2:	68fb      	ldr	r3, [r7, #12]
200027b4:	183a      	adds	r2, r7, r0
200027b6:	8812      	ldrh	r2, [r2, #0]
200027b8:	811a      	strh	r2, [r3, #8]
}
200027ba:	46c0      	nop			; (mov r8, r8)
200027bc:	46bd      	mov	sp, r7
200027be:	b006      	add	sp, #24
200027c0:	bdb0      	pop	{r4, r5, r7, pc}

200027c2 <TIM_EncoderInterfaceConfig>:
  *            @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
200027c2:	b5f0      	push	{r4, r5, r6, r7, lr}
200027c4:	b087      	sub	sp, #28
200027c6:	af00      	add	r7, sp, #0
200027c8:	60f8      	str	r0, [r7, #12]
200027ca:	000c      	movs	r4, r1
200027cc:	0010      	movs	r0, r2
200027ce:	0019      	movs	r1, r3
200027d0:	260a      	movs	r6, #10
200027d2:	19bb      	adds	r3, r7, r6
200027d4:	1c22      	adds	r2, r4, #0
200027d6:	801a      	strh	r2, [r3, #0]
200027d8:	2308      	movs	r3, #8
200027da:	18fb      	adds	r3, r7, r3
200027dc:	1c02      	adds	r2, r0, #0
200027de:	801a      	strh	r2, [r3, #0]
200027e0:	1dbb      	adds	r3, r7, #6
200027e2:	1c0a      	adds	r2, r1, #0
200027e4:	801a      	strh	r2, [r3, #0]
  uint16_t tmpsmcr = 0;
200027e6:	2116      	movs	r1, #22
200027e8:	187b      	adds	r3, r7, r1
200027ea:	2200      	movs	r2, #0
200027ec:	801a      	strh	r2, [r3, #0]
  uint16_t tmpccmr1 = 0;
200027ee:	2414      	movs	r4, #20
200027f0:	193b      	adds	r3, r7, r4
200027f2:	2200      	movs	r2, #0
200027f4:	801a      	strh	r2, [r3, #0]
  uint16_t tmpccer = 0;
200027f6:	2512      	movs	r5, #18
200027f8:	197b      	adds	r3, r7, r5
200027fa:	2200      	movs	r2, #0
200027fc:	801a      	strh	r2, [r3, #0]
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
200027fe:	187b      	adds	r3, r7, r1
20002800:	68fa      	ldr	r2, [r7, #12]
20002802:	8912      	ldrh	r2, [r2, #8]
20002804:	801a      	strh	r2, [r3, #0]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
20002806:	193b      	adds	r3, r7, r4
20002808:	68fa      	ldr	r2, [r7, #12]
2000280a:	8b12      	ldrh	r2, [r2, #24]
2000280c:	801a      	strh	r2, [r3, #0]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
2000280e:	197b      	adds	r3, r7, r5
20002810:	68fa      	ldr	r2, [r7, #12]
20002812:	8c12      	ldrh	r2, [r2, #32]
20002814:	801a      	strh	r2, [r3, #0]

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
20002816:	0008      	movs	r0, r1
20002818:	183b      	adds	r3, r7, r0
2000281a:	183a      	adds	r2, r7, r0
2000281c:	8812      	ldrh	r2, [r2, #0]
2000281e:	2107      	movs	r1, #7
20002820:	438a      	bics	r2, r1
20002822:	801a      	strh	r2, [r3, #0]
  tmpsmcr |= TIM_EncoderMode;
20002824:	183b      	adds	r3, r7, r0
20002826:	1839      	adds	r1, r7, r0
20002828:	19ba      	adds	r2, r7, r6
2000282a:	8809      	ldrh	r1, [r1, #0]
2000282c:	8812      	ldrh	r2, [r2, #0]
2000282e:	430a      	orrs	r2, r1
20002830:	801a      	strh	r2, [r3, #0]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
20002832:	193b      	adds	r3, r7, r4
20002834:	193a      	adds	r2, r7, r4
20002836:	8812      	ldrh	r2, [r2, #0]
20002838:	4916      	ldr	r1, [pc, #88]	; (20002894 <TIM_EncoderInterfaceConfig+0xd2>)
2000283a:	400a      	ands	r2, r1
2000283c:	801a      	strh	r2, [r3, #0]
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
2000283e:	193b      	adds	r3, r7, r4
20002840:	193a      	adds	r2, r7, r4
20002842:	8812      	ldrh	r2, [r2, #0]
20002844:	2102      	movs	r1, #2
20002846:	31ff      	adds	r1, #255	; 0xff
20002848:	430a      	orrs	r2, r1
2000284a:	801a      	strh	r2, [r3, #0]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
2000284c:	197b      	adds	r3, r7, r5
2000284e:	197a      	adds	r2, r7, r5
20002850:	8812      	ldrh	r2, [r2, #0]
20002852:	2122      	movs	r1, #34	; 0x22
20002854:	438a      	bics	r2, r1
20002856:	801a      	strh	r2, [r3, #0]
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
20002858:	1dbb      	adds	r3, r7, #6
2000285a:	881b      	ldrh	r3, [r3, #0]
2000285c:	011b      	lsls	r3, r3, #4
2000285e:	b29a      	uxth	r2, r3
20002860:	2308      	movs	r3, #8
20002862:	18fb      	adds	r3, r7, r3
20002864:	881b      	ldrh	r3, [r3, #0]
20002866:	4313      	orrs	r3, r2
20002868:	b299      	uxth	r1, r3
2000286a:	197b      	adds	r3, r7, r5
2000286c:	197a      	adds	r2, r7, r5
2000286e:	8812      	ldrh	r2, [r2, #0]
20002870:	430a      	orrs	r2, r1
20002872:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
20002874:	68fb      	ldr	r3, [r7, #12]
20002876:	183a      	adds	r2, r7, r0
20002878:	8812      	ldrh	r2, [r2, #0]
2000287a:	811a      	strh	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
2000287c:	68fb      	ldr	r3, [r7, #12]
2000287e:	193a      	adds	r2, r7, r4
20002880:	8812      	ldrh	r2, [r2, #0]
20002882:	831a      	strh	r2, [r3, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
20002884:	68fb      	ldr	r3, [r7, #12]
20002886:	197a      	adds	r2, r7, r5
20002888:	8812      	ldrh	r2, [r2, #0]
2000288a:	841a      	strh	r2, [r3, #32]
}
2000288c:	46c0      	nop			; (mov r8, r8)
2000288e:	46bd      	mov	sp, r7
20002890:	b007      	add	sp, #28
20002892:	bdf0      	pop	{r4, r5, r6, r7, pc}
20002894:	fffffcfc 			; <UNDEFINED> instruction: 0xfffffcfc

20002898 <TIM_SelectHallSensor>:
  * @param  NewState: new state of the TIMx Hall sensor interface.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectHallSensor(TIM_TypeDef* TIMx, FunctionalState NewState)
{
20002898:	b580      	push	{r7, lr}
2000289a:	b082      	sub	sp, #8
2000289c:	af00      	add	r7, sp, #0
2000289e:	6078      	str	r0, [r7, #4]
200028a0:	000a      	movs	r2, r1
200028a2:	1cfb      	adds	r3, r7, #3
200028a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
200028a6:	1cfb      	adds	r3, r7, #3
200028a8:	781b      	ldrb	r3, [r3, #0]
200028aa:	2b00      	cmp	r3, #0
200028ac:	d008      	beq.n	200028c0 <TIM_SelectHallSensor+0x28>
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
200028ae:	687b      	ldr	r3, [r7, #4]
200028b0:	889b      	ldrh	r3, [r3, #4]
200028b2:	b29b      	uxth	r3, r3
200028b4:	2280      	movs	r2, #128	; 0x80
200028b6:	4313      	orrs	r3, r2
200028b8:	b29a      	uxth	r2, r3
200028ba:	687b      	ldr	r3, [r7, #4]
200028bc:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_TI1S;
  }
}
200028be:	e007      	b.n	200028d0 <TIM_SelectHallSensor+0x38>
    TIMx->CR2 &= (uint16_t)~TIM_CR2_TI1S;
200028c0:	687b      	ldr	r3, [r7, #4]
200028c2:	889b      	ldrh	r3, [r3, #4]
200028c4:	b29b      	uxth	r3, r3
200028c6:	2280      	movs	r2, #128	; 0x80
200028c8:	4393      	bics	r3, r2
200028ca:	b29a      	uxth	r2, r3
200028cc:	687b      	ldr	r3, [r7, #4]
200028ce:	809a      	strh	r2, [r3, #4]
}
200028d0:	46c0      	nop			; (mov r8, r8)
200028d2:	46bd      	mov	sp, r7
200028d4:	b002      	add	sp, #8
200028d6:	bd80      	pop	{r7, pc}

200028d8 <TIM_RemapConfig>:
  *            @arg TIM11_HSE:      TIM11 CH4 input is connected to HSE_RTC clock
  *                                 (HSE divided by a programmable prescaler)  
  * @retval None
  */
void TIM_RemapConfig(TIM_TypeDef* TIMx, uint16_t TIM_Remap)
{
200028d8:	b580      	push	{r7, lr}
200028da:	b082      	sub	sp, #8
200028dc:	af00      	add	r7, sp, #0
200028de:	6078      	str	r0, [r7, #4]
200028e0:	000a      	movs	r2, r1
200028e2:	1cbb      	adds	r3, r7, #2
200028e4:	801a      	strh	r2, [r3, #0]
 /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_REMAP(TIM_Remap));

  /* Set the Timer remapping configuration */
  TIMx->OR =  TIM_Remap;
200028e6:	687b      	ldr	r3, [r7, #4]
200028e8:	1cba      	adds	r2, r7, #2
200028ea:	2150      	movs	r1, #80	; 0x50
200028ec:	8812      	ldrh	r2, [r2, #0]
200028ee:	525a      	strh	r2, [r3, r1]
}
200028f0:	46c0      	nop			; (mov r8, r8)
200028f2:	46bd      	mov	sp, r7
200028f4:	b002      	add	sp, #8
200028f6:	bd80      	pop	{r7, pc}

200028f8 <TI1_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
200028f8:	b5f0      	push	{r4, r5, r6, r7, lr}
200028fa:	b087      	sub	sp, #28
200028fc:	af00      	add	r7, sp, #0
200028fe:	60f8      	str	r0, [r7, #12]
20002900:	000c      	movs	r4, r1
20002902:	0010      	movs	r0, r2
20002904:	0019      	movs	r1, r3
20002906:	250a      	movs	r5, #10
20002908:	197b      	adds	r3, r7, r5
2000290a:	1c22      	adds	r2, r4, #0
2000290c:	801a      	strh	r2, [r3, #0]
2000290e:	2608      	movs	r6, #8
20002910:	19bb      	adds	r3, r7, r6
20002912:	1c02      	adds	r2, r0, #0
20002914:	801a      	strh	r2, [r3, #0]
20002916:	1dbb      	adds	r3, r7, #6
20002918:	1c0a      	adds	r2, r1, #0
2000291a:	801a      	strh	r2, [r3, #0]
  uint16_t tmpccmr1 = 0, tmpccer = 0;
2000291c:	2016      	movs	r0, #22
2000291e:	183b      	adds	r3, r7, r0
20002920:	2200      	movs	r2, #0
20002922:	801a      	strh	r2, [r3, #0]
20002924:	2414      	movs	r4, #20
20002926:	193b      	adds	r3, r7, r4
20002928:	2200      	movs	r2, #0
2000292a:	801a      	strh	r2, [r3, #0]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
2000292c:	68fb      	ldr	r3, [r7, #12]
2000292e:	8c1b      	ldrh	r3, [r3, #32]
20002930:	b29b      	uxth	r3, r3
20002932:	2201      	movs	r2, #1
20002934:	4393      	bics	r3, r2
20002936:	b29a      	uxth	r2, r3
20002938:	68fb      	ldr	r3, [r7, #12]
2000293a:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
2000293c:	183b      	adds	r3, r7, r0
2000293e:	68fa      	ldr	r2, [r7, #12]
20002940:	8b12      	ldrh	r2, [r2, #24]
20002942:	801a      	strh	r2, [r3, #0]
  tmpccer = TIMx->CCER;
20002944:	193b      	adds	r3, r7, r4
20002946:	68fa      	ldr	r2, [r7, #12]
20002948:	8c12      	ldrh	r2, [r2, #32]
2000294a:	801a      	strh	r2, [r3, #0]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
2000294c:	183b      	adds	r3, r7, r0
2000294e:	183a      	adds	r2, r7, r0
20002950:	8812      	ldrh	r2, [r2, #0]
20002952:	21f3      	movs	r1, #243	; 0xf3
20002954:	438a      	bics	r2, r1
20002956:	801a      	strh	r2, [r3, #0]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
20002958:	1dbb      	adds	r3, r7, #6
2000295a:	881b      	ldrh	r3, [r3, #0]
2000295c:	011b      	lsls	r3, r3, #4
2000295e:	b29a      	uxth	r2, r3
20002960:	19bb      	adds	r3, r7, r6
20002962:	881b      	ldrh	r3, [r3, #0]
20002964:	4313      	orrs	r3, r2
20002966:	b299      	uxth	r1, r3
20002968:	183b      	adds	r3, r7, r0
2000296a:	183a      	adds	r2, r7, r0
2000296c:	8812      	ldrh	r2, [r2, #0]
2000296e:	430a      	orrs	r2, r1
20002970:	801a      	strh	r2, [r3, #0]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
20002972:	193b      	adds	r3, r7, r4
20002974:	193a      	adds	r2, r7, r4
20002976:	8812      	ldrh	r2, [r2, #0]
20002978:	210a      	movs	r1, #10
2000297a:	438a      	bics	r2, r1
2000297c:	801a      	strh	r2, [r3, #0]
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
2000297e:	197a      	adds	r2, r7, r5
20002980:	193b      	adds	r3, r7, r4
20002982:	8812      	ldrh	r2, [r2, #0]
20002984:	881b      	ldrh	r3, [r3, #0]
20002986:	4313      	orrs	r3, r2
20002988:	b29a      	uxth	r2, r3
2000298a:	193b      	adds	r3, r7, r4
2000298c:	2101      	movs	r1, #1
2000298e:	430a      	orrs	r2, r1
20002990:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
20002992:	68fb      	ldr	r3, [r7, #12]
20002994:	183a      	adds	r2, r7, r0
20002996:	8812      	ldrh	r2, [r2, #0]
20002998:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
2000299a:	68fb      	ldr	r3, [r7, #12]
2000299c:	193a      	adds	r2, r7, r4
2000299e:	8812      	ldrh	r2, [r2, #0]
200029a0:	841a      	strh	r2, [r3, #32]
}
200029a2:	46c0      	nop			; (mov r8, r8)
200029a4:	46bd      	mov	sp, r7
200029a6:	b007      	add	sp, #28
200029a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

200029aa <TI2_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
200029aa:	b5f0      	push	{r4, r5, r6, r7, lr}
200029ac:	b087      	sub	sp, #28
200029ae:	af00      	add	r7, sp, #0
200029b0:	60f8      	str	r0, [r7, #12]
200029b2:	000c      	movs	r4, r1
200029b4:	0010      	movs	r0, r2
200029b6:	0019      	movs	r1, r3
200029b8:	260a      	movs	r6, #10
200029ba:	19bb      	adds	r3, r7, r6
200029bc:	1c22      	adds	r2, r4, #0
200029be:	801a      	strh	r2, [r3, #0]
200029c0:	2308      	movs	r3, #8
200029c2:	18fb      	adds	r3, r7, r3
200029c4:	1c02      	adds	r2, r0, #0
200029c6:	801a      	strh	r2, [r3, #0]
200029c8:	1dbb      	adds	r3, r7, #6
200029ca:	1c0a      	adds	r2, r1, #0
200029cc:	801a      	strh	r2, [r3, #0]
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
200029ce:	2116      	movs	r1, #22
200029d0:	187b      	adds	r3, r7, r1
200029d2:	2200      	movs	r2, #0
200029d4:	801a      	strh	r2, [r3, #0]
200029d6:	2414      	movs	r4, #20
200029d8:	193b      	adds	r3, r7, r4
200029da:	2200      	movs	r2, #0
200029dc:	801a      	strh	r2, [r3, #0]
200029de:	2512      	movs	r5, #18
200029e0:	197b      	adds	r3, r7, r5
200029e2:	2200      	movs	r2, #0
200029e4:	801a      	strh	r2, [r3, #0]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
200029e6:	68fb      	ldr	r3, [r7, #12]
200029e8:	8c1b      	ldrh	r3, [r3, #32]
200029ea:	b29b      	uxth	r3, r3
200029ec:	2210      	movs	r2, #16
200029ee:	4393      	bics	r3, r2
200029f0:	b29a      	uxth	r2, r3
200029f2:	68fb      	ldr	r3, [r7, #12]
200029f4:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
200029f6:	187b      	adds	r3, r7, r1
200029f8:	68fa      	ldr	r2, [r7, #12]
200029fa:	8b12      	ldrh	r2, [r2, #24]
200029fc:	801a      	strh	r2, [r3, #0]
  tmpccer = TIMx->CCER;
200029fe:	193b      	adds	r3, r7, r4
20002a00:	68fa      	ldr	r2, [r7, #12]
20002a02:	8c12      	ldrh	r2, [r2, #32]
20002a04:	801a      	strh	r2, [r3, #0]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
20002a06:	197b      	adds	r3, r7, r5
20002a08:	19ba      	adds	r2, r7, r6
20002a0a:	8812      	ldrh	r2, [r2, #0]
20002a0c:	0112      	lsls	r2, r2, #4
20002a0e:	801a      	strh	r2, [r3, #0]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
20002a10:	187b      	adds	r3, r7, r1
20002a12:	0008      	movs	r0, r1
20002a14:	187a      	adds	r2, r7, r1
20002a16:	8812      	ldrh	r2, [r2, #0]
20002a18:	4918      	ldr	r1, [pc, #96]	; (20002a7c <TI2_Config+0xd2>)
20002a1a:	400a      	ands	r2, r1
20002a1c:	801a      	strh	r2, [r3, #0]
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
20002a1e:	1dbb      	adds	r3, r7, #6
20002a20:	881b      	ldrh	r3, [r3, #0]
20002a22:	031b      	lsls	r3, r3, #12
20002a24:	b299      	uxth	r1, r3
20002a26:	183b      	adds	r3, r7, r0
20002a28:	183a      	adds	r2, r7, r0
20002a2a:	8812      	ldrh	r2, [r2, #0]
20002a2c:	430a      	orrs	r2, r1
20002a2e:	801a      	strh	r2, [r3, #0]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
20002a30:	2308      	movs	r3, #8
20002a32:	18fb      	adds	r3, r7, r3
20002a34:	881b      	ldrh	r3, [r3, #0]
20002a36:	021b      	lsls	r3, r3, #8
20002a38:	b299      	uxth	r1, r3
20002a3a:	183b      	adds	r3, r7, r0
20002a3c:	183a      	adds	r2, r7, r0
20002a3e:	8812      	ldrh	r2, [r2, #0]
20002a40:	430a      	orrs	r2, r1
20002a42:	801a      	strh	r2, [r3, #0]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
20002a44:	193b      	adds	r3, r7, r4
20002a46:	193a      	adds	r2, r7, r4
20002a48:	8812      	ldrh	r2, [r2, #0]
20002a4a:	21a0      	movs	r1, #160	; 0xa0
20002a4c:	438a      	bics	r2, r1
20002a4e:	801a      	strh	r2, [r3, #0]
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
20002a50:	197a      	adds	r2, r7, r5
20002a52:	193b      	adds	r3, r7, r4
20002a54:	8812      	ldrh	r2, [r2, #0]
20002a56:	881b      	ldrh	r3, [r3, #0]
20002a58:	4313      	orrs	r3, r2
20002a5a:	b29a      	uxth	r2, r3
20002a5c:	193b      	adds	r3, r7, r4
20002a5e:	2110      	movs	r1, #16
20002a60:	430a      	orrs	r2, r1
20002a62:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
20002a64:	68fb      	ldr	r3, [r7, #12]
20002a66:	183a      	adds	r2, r7, r0
20002a68:	8812      	ldrh	r2, [r2, #0]
20002a6a:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
20002a6c:	68fb      	ldr	r3, [r7, #12]
20002a6e:	193a      	adds	r2, r7, r4
20002a70:	8812      	ldrh	r2, [r2, #0]
20002a72:	841a      	strh	r2, [r3, #32]
}
20002a74:	46c0      	nop			; (mov r8, r8)
20002a76:	46bd      	mov	sp, r7
20002a78:	b007      	add	sp, #28
20002a7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
20002a7c:	00000cff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

20002a80 <TI3_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
20002a80:	b5f0      	push	{r4, r5, r6, r7, lr}
20002a82:	b087      	sub	sp, #28
20002a84:	af00      	add	r7, sp, #0
20002a86:	60f8      	str	r0, [r7, #12]
20002a88:	000c      	movs	r4, r1
20002a8a:	0010      	movs	r0, r2
20002a8c:	0019      	movs	r1, r3
20002a8e:	260a      	movs	r6, #10
20002a90:	19bb      	adds	r3, r7, r6
20002a92:	1c22      	adds	r2, r4, #0
20002a94:	801a      	strh	r2, [r3, #0]
20002a96:	2308      	movs	r3, #8
20002a98:	18fb      	adds	r3, r7, r3
20002a9a:	1c02      	adds	r2, r0, #0
20002a9c:	801a      	strh	r2, [r3, #0]
20002a9e:	1dbb      	adds	r3, r7, #6
20002aa0:	1c0a      	adds	r2, r1, #0
20002aa2:	801a      	strh	r2, [r3, #0]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
20002aa4:	2116      	movs	r1, #22
20002aa6:	187b      	adds	r3, r7, r1
20002aa8:	2200      	movs	r2, #0
20002aaa:	801a      	strh	r2, [r3, #0]
20002aac:	2414      	movs	r4, #20
20002aae:	193b      	adds	r3, r7, r4
20002ab0:	2200      	movs	r2, #0
20002ab2:	801a      	strh	r2, [r3, #0]
20002ab4:	2512      	movs	r5, #18
20002ab6:	197b      	adds	r3, r7, r5
20002ab8:	2200      	movs	r2, #0
20002aba:	801a      	strh	r2, [r3, #0]

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
20002abc:	68fb      	ldr	r3, [r7, #12]
20002abe:	8c1b      	ldrh	r3, [r3, #32]
20002ac0:	b29b      	uxth	r3, r3
20002ac2:	4a22      	ldr	r2, [pc, #136]	; (20002b4c <TI3_Config+0xcc>)
20002ac4:	4013      	ands	r3, r2
20002ac6:	b29a      	uxth	r2, r3
20002ac8:	68fb      	ldr	r3, [r7, #12]
20002aca:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
20002acc:	187b      	adds	r3, r7, r1
20002ace:	68fa      	ldr	r2, [r7, #12]
20002ad0:	8b92      	ldrh	r2, [r2, #28]
20002ad2:	801a      	strh	r2, [r3, #0]
  tmpccer = TIMx->CCER;
20002ad4:	193b      	adds	r3, r7, r4
20002ad6:	68fa      	ldr	r2, [r7, #12]
20002ad8:	8c12      	ldrh	r2, [r2, #32]
20002ada:	801a      	strh	r2, [r3, #0]
  tmp = (uint16_t)(TIM_ICPolarity << 8);
20002adc:	197b      	adds	r3, r7, r5
20002ade:	19ba      	adds	r2, r7, r6
20002ae0:	8812      	ldrh	r2, [r2, #0]
20002ae2:	0212      	lsls	r2, r2, #8
20002ae4:	801a      	strh	r2, [r3, #0]

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
20002ae6:	187b      	adds	r3, r7, r1
20002ae8:	0008      	movs	r0, r1
20002aea:	187a      	adds	r2, r7, r1
20002aec:	8812      	ldrh	r2, [r2, #0]
20002aee:	21f3      	movs	r1, #243	; 0xf3
20002af0:	438a      	bics	r2, r1
20002af2:	801a      	strh	r2, [r3, #0]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
20002af4:	1dbb      	adds	r3, r7, #6
20002af6:	881b      	ldrh	r3, [r3, #0]
20002af8:	011b      	lsls	r3, r3, #4
20002afa:	b29a      	uxth	r2, r3
20002afc:	2308      	movs	r3, #8
20002afe:	18fb      	adds	r3, r7, r3
20002b00:	881b      	ldrh	r3, [r3, #0]
20002b02:	4313      	orrs	r3, r2
20002b04:	b299      	uxth	r1, r3
20002b06:	183b      	adds	r3, r7, r0
20002b08:	183a      	adds	r2, r7, r0
20002b0a:	8812      	ldrh	r2, [r2, #0]
20002b0c:	430a      	orrs	r2, r1
20002b0e:	801a      	strh	r2, [r3, #0]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
20002b10:	193b      	adds	r3, r7, r4
20002b12:	193a      	adds	r2, r7, r4
20002b14:	8812      	ldrh	r2, [r2, #0]
20002b16:	490e      	ldr	r1, [pc, #56]	; (20002b50 <TI3_Config+0xd0>)
20002b18:	400a      	ands	r2, r1
20002b1a:	801a      	strh	r2, [r3, #0]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
20002b1c:	197a      	adds	r2, r7, r5
20002b1e:	193b      	adds	r3, r7, r4
20002b20:	8812      	ldrh	r2, [r2, #0]
20002b22:	881b      	ldrh	r3, [r3, #0]
20002b24:	4313      	orrs	r3, r2
20002b26:	b29a      	uxth	r2, r3
20002b28:	193b      	adds	r3, r7, r4
20002b2a:	2180      	movs	r1, #128	; 0x80
20002b2c:	0049      	lsls	r1, r1, #1
20002b2e:	430a      	orrs	r2, r1
20002b30:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
20002b32:	68fb      	ldr	r3, [r7, #12]
20002b34:	183a      	adds	r2, r7, r0
20002b36:	8812      	ldrh	r2, [r2, #0]
20002b38:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer;
20002b3a:	68fb      	ldr	r3, [r7, #12]
20002b3c:	193a      	adds	r2, r7, r4
20002b3e:	8812      	ldrh	r2, [r2, #0]
20002b40:	841a      	strh	r2, [r3, #32]
}
20002b42:	46c0      	nop			; (mov r8, r8)
20002b44:	46bd      	mov	sp, r7
20002b46:	b007      	add	sp, #28
20002b48:	bdf0      	pop	{r4, r5, r6, r7, pc}
20002b4a:	46c0      	nop			; (mov r8, r8)
20002b4c:	fffffeff 			; <UNDEFINED> instruction: 0xfffffeff
20002b50:	fffff5ff 			; <UNDEFINED> instruction: 0xfffff5ff

20002b54 <TI4_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
20002b54:	b5f0      	push	{r4, r5, r6, r7, lr}
20002b56:	b087      	sub	sp, #28
20002b58:	af00      	add	r7, sp, #0
20002b5a:	60f8      	str	r0, [r7, #12]
20002b5c:	000c      	movs	r4, r1
20002b5e:	0010      	movs	r0, r2
20002b60:	0019      	movs	r1, r3
20002b62:	260a      	movs	r6, #10
20002b64:	19bb      	adds	r3, r7, r6
20002b66:	1c22      	adds	r2, r4, #0
20002b68:	801a      	strh	r2, [r3, #0]
20002b6a:	2308      	movs	r3, #8
20002b6c:	18fb      	adds	r3, r7, r3
20002b6e:	1c02      	adds	r2, r0, #0
20002b70:	801a      	strh	r2, [r3, #0]
20002b72:	1dbb      	adds	r3, r7, #6
20002b74:	1c0a      	adds	r2, r1, #0
20002b76:	801a      	strh	r2, [r3, #0]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
20002b78:	2116      	movs	r1, #22
20002b7a:	187b      	adds	r3, r7, r1
20002b7c:	2200      	movs	r2, #0
20002b7e:	801a      	strh	r2, [r3, #0]
20002b80:	2414      	movs	r4, #20
20002b82:	193b      	adds	r3, r7, r4
20002b84:	2200      	movs	r2, #0
20002b86:	801a      	strh	r2, [r3, #0]
20002b88:	2512      	movs	r5, #18
20002b8a:	197b      	adds	r3, r7, r5
20002b8c:	2200      	movs	r2, #0
20002b8e:	801a      	strh	r2, [r3, #0]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
20002b90:	68fb      	ldr	r3, [r7, #12]
20002b92:	8c1b      	ldrh	r3, [r3, #32]
20002b94:	b29b      	uxth	r3, r3
20002b96:	4a24      	ldr	r2, [pc, #144]	; (20002c28 <TI4_Config+0xd4>)
20002b98:	4013      	ands	r3, r2
20002b9a:	b29a      	uxth	r2, r3
20002b9c:	68fb      	ldr	r3, [r7, #12]
20002b9e:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
20002ba0:	187b      	adds	r3, r7, r1
20002ba2:	68fa      	ldr	r2, [r7, #12]
20002ba4:	8b92      	ldrh	r2, [r2, #28]
20002ba6:	801a      	strh	r2, [r3, #0]
  tmpccer = TIMx->CCER;
20002ba8:	193b      	adds	r3, r7, r4
20002baa:	68fa      	ldr	r2, [r7, #12]
20002bac:	8c12      	ldrh	r2, [r2, #32]
20002bae:	801a      	strh	r2, [r3, #0]
  tmp = (uint16_t)(TIM_ICPolarity << 12);
20002bb0:	197b      	adds	r3, r7, r5
20002bb2:	19ba      	adds	r2, r7, r6
20002bb4:	8812      	ldrh	r2, [r2, #0]
20002bb6:	0312      	lsls	r2, r2, #12
20002bb8:	801a      	strh	r2, [r3, #0]

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
20002bba:	187b      	adds	r3, r7, r1
20002bbc:	0008      	movs	r0, r1
20002bbe:	187a      	adds	r2, r7, r1
20002bc0:	8812      	ldrh	r2, [r2, #0]
20002bc2:	491a      	ldr	r1, [pc, #104]	; (20002c2c <TI4_Config+0xd8>)
20002bc4:	400a      	ands	r2, r1
20002bc6:	801a      	strh	r2, [r3, #0]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
20002bc8:	2308      	movs	r3, #8
20002bca:	18fb      	adds	r3, r7, r3
20002bcc:	881b      	ldrh	r3, [r3, #0]
20002bce:	021b      	lsls	r3, r3, #8
20002bd0:	b299      	uxth	r1, r3
20002bd2:	183b      	adds	r3, r7, r0
20002bd4:	183a      	adds	r2, r7, r0
20002bd6:	8812      	ldrh	r2, [r2, #0]
20002bd8:	430a      	orrs	r2, r1
20002bda:	801a      	strh	r2, [r3, #0]
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
20002bdc:	1dbb      	adds	r3, r7, #6
20002bde:	881b      	ldrh	r3, [r3, #0]
20002be0:	031b      	lsls	r3, r3, #12
20002be2:	b299      	uxth	r1, r3
20002be4:	183b      	adds	r3, r7, r0
20002be6:	183a      	adds	r2, r7, r0
20002be8:	8812      	ldrh	r2, [r2, #0]
20002bea:	430a      	orrs	r2, r1
20002bec:	801a      	strh	r2, [r3, #0]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
20002bee:	193b      	adds	r3, r7, r4
20002bf0:	193a      	adds	r2, r7, r4
20002bf2:	8812      	ldrh	r2, [r2, #0]
20002bf4:	490e      	ldr	r1, [pc, #56]	; (20002c30 <TI4_Config+0xdc>)
20002bf6:	400a      	ands	r2, r1
20002bf8:	801a      	strh	r2, [r3, #0]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
20002bfa:	197a      	adds	r2, r7, r5
20002bfc:	193b      	adds	r3, r7, r4
20002bfe:	8812      	ldrh	r2, [r2, #0]
20002c00:	881b      	ldrh	r3, [r3, #0]
20002c02:	4313      	orrs	r3, r2
20002c04:	b29a      	uxth	r2, r3
20002c06:	193b      	adds	r3, r7, r4
20002c08:	2180      	movs	r1, #128	; 0x80
20002c0a:	0149      	lsls	r1, r1, #5
20002c0c:	430a      	orrs	r2, r1
20002c0e:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
20002c10:	68fb      	ldr	r3, [r7, #12]
20002c12:	183a      	adds	r2, r7, r0
20002c14:	8812      	ldrh	r2, [r2, #0]
20002c16:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
20002c18:	68fb      	ldr	r3, [r7, #12]
20002c1a:	193a      	adds	r2, r7, r4
20002c1c:	8812      	ldrh	r2, [r2, #0]
20002c1e:	841a      	strh	r2, [r3, #32]
}
20002c20:	46c0      	nop			; (mov r8, r8)
20002c22:	46bd      	mov	sp, r7
20002c24:	b007      	add	sp, #28
20002c26:	bdf0      	pop	{r4, r5, r6, r7, pc}
20002c28:	ffffefff 			; <UNDEFINED> instruction: 0xffffefff
20002c2c:	00000cff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20002c30:	00005fff 	strdeq	r5, [r0], -pc	; <UNPREDICTABLE>

20002c34 <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
20002c34:	b580      	push	{r7, lr}
20002c36:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
20002c38:	4b08      	ldr	r3, [pc, #32]	; (20002c5c <EXTI_DeInit+0x28>)
20002c3a:	2200      	movs	r2, #0
20002c3c:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
20002c3e:	4b07      	ldr	r3, [pc, #28]	; (20002c5c <EXTI_DeInit+0x28>)
20002c40:	2200      	movs	r2, #0
20002c42:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000;
20002c44:	4b05      	ldr	r3, [pc, #20]	; (20002c5c <EXTI_DeInit+0x28>)
20002c46:	2200      	movs	r2, #0
20002c48:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000;
20002c4a:	4b04      	ldr	r3, [pc, #16]	; (20002c5c <EXTI_DeInit+0x28>)
20002c4c:	2200      	movs	r2, #0
20002c4e:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x007FFFFF;
20002c50:	4b02      	ldr	r3, [pc, #8]	; (20002c5c <EXTI_DeInit+0x28>)
20002c52:	4a03      	ldr	r2, [pc, #12]	; (20002c60 <EXTI_DeInit+0x2c>)
20002c54:	615a      	str	r2, [r3, #20]
}
20002c56:	46c0      	nop			; (mov r8, r8)
20002c58:	46bd      	mov	sp, r7
20002c5a:	bd80      	pop	{r7, pc}
20002c5c:	40013c00 	andmi	r3, r1, r0, lsl #24
20002c60:	007fffff 	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>

20002c64 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
20002c64:	b580      	push	{r7, lr}
20002c66:	b084      	sub	sp, #16
20002c68:	af00      	add	r7, sp, #0
20002c6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
20002c6c:	2300      	movs	r3, #0
20002c6e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
20002c70:	4b33      	ldr	r3, [pc, #204]	; (20002d40 <EXTI_Init+0xdc>)
20002c72:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
20002c74:	687b      	ldr	r3, [r7, #4]
20002c76:	799b      	ldrb	r3, [r3, #6]
20002c78:	2b00      	cmp	r3, #0
20002c7a:	d04f      	beq.n	20002d1c <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
20002c7c:	4b30      	ldr	r3, [pc, #192]	; (20002d40 <EXTI_Init+0xdc>)
20002c7e:	681a      	ldr	r2, [r3, #0]
20002c80:	687b      	ldr	r3, [r7, #4]
20002c82:	681b      	ldr	r3, [r3, #0]
20002c84:	43d9      	mvns	r1, r3
20002c86:	4b2e      	ldr	r3, [pc, #184]	; (20002d40 <EXTI_Init+0xdc>)
20002c88:	400a      	ands	r2, r1
20002c8a:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
20002c8c:	4b2c      	ldr	r3, [pc, #176]	; (20002d40 <EXTI_Init+0xdc>)
20002c8e:	685a      	ldr	r2, [r3, #4]
20002c90:	687b      	ldr	r3, [r7, #4]
20002c92:	681b      	ldr	r3, [r3, #0]
20002c94:	43d9      	mvns	r1, r3
20002c96:	4b2a      	ldr	r3, [pc, #168]	; (20002d40 <EXTI_Init+0xdc>)
20002c98:	400a      	ands	r2, r1
20002c9a:	605a      	str	r2, [r3, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
20002c9c:	687b      	ldr	r3, [r7, #4]
20002c9e:	791b      	ldrb	r3, [r3, #4]
20002ca0:	001a      	movs	r2, r3
20002ca2:	68fb      	ldr	r3, [r7, #12]
20002ca4:	189b      	adds	r3, r3, r2
20002ca6:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
20002ca8:	68fb      	ldr	r3, [r7, #12]
20002caa:	6819      	ldr	r1, [r3, #0]
20002cac:	687b      	ldr	r3, [r7, #4]
20002cae:	681a      	ldr	r2, [r3, #0]
20002cb0:	68fb      	ldr	r3, [r7, #12]
20002cb2:	430a      	orrs	r2, r1
20002cb4:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
20002cb6:	4b22      	ldr	r3, [pc, #136]	; (20002d40 <EXTI_Init+0xdc>)
20002cb8:	689a      	ldr	r2, [r3, #8]
20002cba:	687b      	ldr	r3, [r7, #4]
20002cbc:	681b      	ldr	r3, [r3, #0]
20002cbe:	43d9      	mvns	r1, r3
20002cc0:	4b1f      	ldr	r3, [pc, #124]	; (20002d40 <EXTI_Init+0xdc>)
20002cc2:	400a      	ands	r2, r1
20002cc4:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
20002cc6:	4b1e      	ldr	r3, [pc, #120]	; (20002d40 <EXTI_Init+0xdc>)
20002cc8:	68da      	ldr	r2, [r3, #12]
20002cca:	687b      	ldr	r3, [r7, #4]
20002ccc:	681b      	ldr	r3, [r3, #0]
20002cce:	43d9      	mvns	r1, r3
20002cd0:	4b1b      	ldr	r3, [pc, #108]	; (20002d40 <EXTI_Init+0xdc>)
20002cd2:	400a      	ands	r2, r1
20002cd4:	60da      	str	r2, [r3, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
20002cd6:	687b      	ldr	r3, [r7, #4]
20002cd8:	795b      	ldrb	r3, [r3, #5]
20002cda:	2b10      	cmp	r3, #16
20002cdc:	d10e      	bne.n	20002cfc <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
20002cde:	4b18      	ldr	r3, [pc, #96]	; (20002d40 <EXTI_Init+0xdc>)
20002ce0:	6899      	ldr	r1, [r3, #8]
20002ce2:	687b      	ldr	r3, [r7, #4]
20002ce4:	681a      	ldr	r2, [r3, #0]
20002ce6:	4b16      	ldr	r3, [pc, #88]	; (20002d40 <EXTI_Init+0xdc>)
20002ce8:	430a      	orrs	r2, r1
20002cea:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
20002cec:	4b14      	ldr	r3, [pc, #80]	; (20002d40 <EXTI_Init+0xdc>)
20002cee:	68d9      	ldr	r1, [r3, #12]
20002cf0:	687b      	ldr	r3, [r7, #4]
20002cf2:	681a      	ldr	r2, [r3, #0]
20002cf4:	4b12      	ldr	r3, [pc, #72]	; (20002d40 <EXTI_Init+0xdc>)
20002cf6:	430a      	orrs	r2, r1
20002cf8:	60da      	str	r2, [r3, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
20002cfa:	e01d      	b.n	20002d38 <EXTI_Init+0xd4>
      tmp = (uint32_t)EXTI_BASE;
20002cfc:	4b10      	ldr	r3, [pc, #64]	; (20002d40 <EXTI_Init+0xdc>)
20002cfe:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
20002d00:	687b      	ldr	r3, [r7, #4]
20002d02:	795b      	ldrb	r3, [r3, #5]
20002d04:	001a      	movs	r2, r3
20002d06:	68fb      	ldr	r3, [r7, #12]
20002d08:	189b      	adds	r3, r3, r2
20002d0a:	60fb      	str	r3, [r7, #12]
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
20002d0c:	68fb      	ldr	r3, [r7, #12]
20002d0e:	6819      	ldr	r1, [r3, #0]
20002d10:	687b      	ldr	r3, [r7, #4]
20002d12:	681a      	ldr	r2, [r3, #0]
20002d14:	68fb      	ldr	r3, [r7, #12]
20002d16:	430a      	orrs	r2, r1
20002d18:	601a      	str	r2, [r3, #0]
}
20002d1a:	e00d      	b.n	20002d38 <EXTI_Init+0xd4>
    tmp += EXTI_InitStruct->EXTI_Mode;
20002d1c:	687b      	ldr	r3, [r7, #4]
20002d1e:	791b      	ldrb	r3, [r3, #4]
20002d20:	001a      	movs	r2, r3
20002d22:	68fb      	ldr	r3, [r7, #12]
20002d24:	189b      	adds	r3, r3, r2
20002d26:	60fb      	str	r3, [r7, #12]
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
20002d28:	68fb      	ldr	r3, [r7, #12]
20002d2a:	681a      	ldr	r2, [r3, #0]
20002d2c:	687b      	ldr	r3, [r7, #4]
20002d2e:	681b      	ldr	r3, [r3, #0]
20002d30:	43d9      	mvns	r1, r3
20002d32:	68fb      	ldr	r3, [r7, #12]
20002d34:	400a      	ands	r2, r1
20002d36:	601a      	str	r2, [r3, #0]
}
20002d38:	46c0      	nop			; (mov r8, r8)
20002d3a:	46bd      	mov	sp, r7
20002d3c:	b004      	add	sp, #16
20002d3e:	bd80      	pop	{r7, pc}
20002d40:	40013c00 	andmi	r3, r1, r0, lsl #24

20002d44 <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
20002d44:	b580      	push	{r7, lr}
20002d46:	b082      	sub	sp, #8
20002d48:	af00      	add	r7, sp, #0
20002d4a:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
20002d4c:	687b      	ldr	r3, [r7, #4]
20002d4e:	2200      	movs	r2, #0
20002d50:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
20002d52:	687b      	ldr	r3, [r7, #4]
20002d54:	2200      	movs	r2, #0
20002d56:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
20002d58:	687b      	ldr	r3, [r7, #4]
20002d5a:	220c      	movs	r2, #12
20002d5c:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
20002d5e:	687b      	ldr	r3, [r7, #4]
20002d60:	2200      	movs	r2, #0
20002d62:	719a      	strb	r2, [r3, #6]
}
20002d64:	46c0      	nop			; (mov r8, r8)
20002d66:	46bd      	mov	sp, r7
20002d68:	b002      	add	sp, #8
20002d6a:	bd80      	pop	{r7, pc}

20002d6c <EXTI_GenerateSWInterrupt>:
  *         will be generated.
  *         This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
20002d6c:	b580      	push	{r7, lr}
20002d6e:	b082      	sub	sp, #8
20002d70:	af00      	add	r7, sp, #0
20002d72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->SWIER |= EXTI_Line;
20002d74:	4b04      	ldr	r3, [pc, #16]	; (20002d88 <EXTI_GenerateSWInterrupt+0x1c>)
20002d76:	6919      	ldr	r1, [r3, #16]
20002d78:	4b03      	ldr	r3, [pc, #12]	; (20002d88 <EXTI_GenerateSWInterrupt+0x1c>)
20002d7a:	687a      	ldr	r2, [r7, #4]
20002d7c:	430a      	orrs	r2, r1
20002d7e:	611a      	str	r2, [r3, #16]
}
20002d80:	46c0      	nop			; (mov r8, r8)
20002d82:	46bd      	mov	sp, r7
20002d84:	b002      	add	sp, #8
20002d86:	bd80      	pop	{r7, pc}
20002d88:	40013c00 	andmi	r3, r1, r0, lsl #24

20002d8c <EXTI_GetFlagStatus>:
  * @param  EXTI_Line: specifies the EXTI line flag to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
20002d8c:	b580      	push	{r7, lr}
20002d8e:	b084      	sub	sp, #16
20002d90:	af00      	add	r7, sp, #0
20002d92:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
20002d94:	210f      	movs	r1, #15
20002d96:	187b      	adds	r3, r7, r1
20002d98:	2200      	movs	r2, #0
20002d9a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
20002d9c:	4b09      	ldr	r3, [pc, #36]	; (20002dc4 <EXTI_GetFlagStatus+0x38>)
20002d9e:	695b      	ldr	r3, [r3, #20]
20002da0:	687a      	ldr	r2, [r7, #4]
20002da2:	4013      	ands	r3, r2
20002da4:	d003      	beq.n	20002dae <EXTI_GetFlagStatus+0x22>
  {
    bitstatus = SET;
20002da6:	187b      	adds	r3, r7, r1
20002da8:	2201      	movs	r2, #1
20002daa:	701a      	strb	r2, [r3, #0]
20002dac:	e003      	b.n	20002db6 <EXTI_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
20002dae:	230f      	movs	r3, #15
20002db0:	18fb      	adds	r3, r7, r3
20002db2:	2200      	movs	r2, #0
20002db4:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
20002db6:	230f      	movs	r3, #15
20002db8:	18fb      	adds	r3, r7, r3
20002dba:	781b      	ldrb	r3, [r3, #0]
}
20002dbc:	0018      	movs	r0, r3
20002dbe:	46bd      	mov	sp, r7
20002dc0:	b004      	add	sp, #16
20002dc2:	bd80      	pop	{r7, pc}
20002dc4:	40013c00 	andmi	r3, r1, r0, lsl #24

20002dc8 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
20002dc8:	b580      	push	{r7, lr}
20002dca:	b082      	sub	sp, #8
20002dcc:	af00      	add	r7, sp, #0
20002dce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
20002dd0:	4b03      	ldr	r3, [pc, #12]	; (20002de0 <EXTI_ClearFlag+0x18>)
20002dd2:	687a      	ldr	r2, [r7, #4]
20002dd4:	615a      	str	r2, [r3, #20]
}
20002dd6:	46c0      	nop			; (mov r8, r8)
20002dd8:	46bd      	mov	sp, r7
20002dda:	b002      	add	sp, #8
20002ddc:	bd80      	pop	{r7, pc}
20002dde:	46c0      	nop			; (mov r8, r8)
20002de0:	40013c00 	andmi	r3, r1, r0, lsl #24

20002de4 <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
20002de4:	b580      	push	{r7, lr}
20002de6:	b084      	sub	sp, #16
20002de8:	af00      	add	r7, sp, #0
20002dea:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
20002dec:	210f      	movs	r1, #15
20002dee:	187b      	adds	r3, r7, r1
20002df0:	2200      	movs	r2, #0
20002df2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
20002df4:	4b09      	ldr	r3, [pc, #36]	; (20002e1c <EXTI_GetITStatus+0x38>)
20002df6:	695b      	ldr	r3, [r3, #20]
20002df8:	687a      	ldr	r2, [r7, #4]
20002dfa:	4013      	ands	r3, r2
20002dfc:	d003      	beq.n	20002e06 <EXTI_GetITStatus+0x22>
  {
    bitstatus = SET;
20002dfe:	187b      	adds	r3, r7, r1
20002e00:	2201      	movs	r2, #1
20002e02:	701a      	strb	r2, [r3, #0]
20002e04:	e003      	b.n	20002e0e <EXTI_GetITStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
20002e06:	230f      	movs	r3, #15
20002e08:	18fb      	adds	r3, r7, r3
20002e0a:	2200      	movs	r2, #0
20002e0c:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
20002e0e:	230f      	movs	r3, #15
20002e10:	18fb      	adds	r3, r7, r3
20002e12:	781b      	ldrb	r3, [r3, #0]
  
}
20002e14:	0018      	movs	r0, r3
20002e16:	46bd      	mov	sp, r7
20002e18:	b004      	add	sp, #16
20002e1a:	bd80      	pop	{r7, pc}
20002e1c:	40013c00 	andmi	r3, r1, r0, lsl #24

20002e20 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
20002e20:	b580      	push	{r7, lr}
20002e22:	b082      	sub	sp, #8
20002e24:	af00      	add	r7, sp, #0
20002e26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
20002e28:	4b03      	ldr	r3, [pc, #12]	; (20002e38 <EXTI_ClearITPendingBit+0x18>)
20002e2a:	687a      	ldr	r2, [r7, #4]
20002e2c:	615a      	str	r2, [r3, #20]
}
20002e2e:	46c0      	nop			; (mov r8, r8)
20002e30:	46bd      	mov	sp, r7
20002e32:	b002      	add	sp, #8
20002e34:	bd80      	pop	{r7, pc}
20002e36:	46c0      	nop			; (mov r8, r8)
20002e38:	40013c00 	andmi	r3, r1, r0, lsl #24

20002e3c <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
20002e3c:	b580      	push	{r7, lr}
20002e3e:	b082      	sub	sp, #8
20002e40:	af00      	add	r7, sp, #0
20002e42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
20002e44:	4b04      	ldr	r3, [pc, #16]	; (20002e58 <NVIC_PriorityGroupConfig+0x1c>)
20002e46:	687a      	ldr	r2, [r7, #4]
20002e48:	4904      	ldr	r1, [pc, #16]	; (20002e5c <NVIC_PriorityGroupConfig+0x20>)
20002e4a:	430a      	orrs	r2, r1
20002e4c:	60da      	str	r2, [r3, #12]
}
20002e4e:	46c0      	nop			; (mov r8, r8)
20002e50:	46bd      	mov	sp, r7
20002e52:	b002      	add	sp, #8
20002e54:	bd80      	pop	{r7, pc}
20002e56:	46c0      	nop			; (mov r8, r8)
20002e58:	e000ed00 	and	lr, r0, r0, lsl #26
20002e5c:	05fa0000 	ldrbeq	r0, [sl, #0]!

20002e60 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
20002e60:	b5b0      	push	{r4, r5, r7, lr}
20002e62:	b084      	sub	sp, #16
20002e64:	af00      	add	r7, sp, #0
20002e66:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
20002e68:	210f      	movs	r1, #15
20002e6a:	187b      	adds	r3, r7, r1
20002e6c:	2200      	movs	r2, #0
20002e6e:	701a      	strb	r2, [r3, #0]
20002e70:	250e      	movs	r5, #14
20002e72:	197b      	adds	r3, r7, r5
20002e74:	2200      	movs	r2, #0
20002e76:	701a      	strb	r2, [r3, #0]
20002e78:	240d      	movs	r4, #13
20002e7a:	193b      	adds	r3, r7, r4
20002e7c:	220f      	movs	r2, #15
20002e7e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
20002e80:	687b      	ldr	r3, [r7, #4]
20002e82:	78db      	ldrb	r3, [r3, #3]
20002e84:	2b00      	cmp	r3, #0
20002e86:	d04b      	beq.n	20002f20 <NVIC_Init+0xc0>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
20002e88:	4b30      	ldr	r3, [pc, #192]	; (20002f4c <NVIC_Init+0xec>)
20002e8a:	68db      	ldr	r3, [r3, #12]
20002e8c:	43db      	mvns	r3, r3
20002e8e:	0a1b      	lsrs	r3, r3, #8
20002e90:	b2da      	uxtb	r2, r3
20002e92:	0008      	movs	r0, r1
20002e94:	183b      	adds	r3, r7, r0
20002e96:	2107      	movs	r1, #7
20002e98:	400a      	ands	r2, r1
20002e9a:	701a      	strb	r2, [r3, #0]
    tmppre = (0x4 - tmppriority);
20002e9c:	197b      	adds	r3, r7, r5
20002e9e:	183a      	adds	r2, r7, r0
20002ea0:	7812      	ldrb	r2, [r2, #0]
20002ea2:	2104      	movs	r1, #4
20002ea4:	1a8a      	subs	r2, r1, r2
20002ea6:	701a      	strb	r2, [r3, #0]
    tmpsub = tmpsub >> tmppriority;
20002ea8:	193b      	adds	r3, r7, r4
20002eaa:	781a      	ldrb	r2, [r3, #0]
20002eac:	0001      	movs	r1, r0
20002eae:	187b      	adds	r3, r7, r1
20002eb0:	781b      	ldrb	r3, [r3, #0]
20002eb2:	411a      	asrs	r2, r3
20002eb4:	193b      	adds	r3, r7, r4
20002eb6:	701a      	strb	r2, [r3, #0]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
20002eb8:	687b      	ldr	r3, [r7, #4]
20002eba:	785b      	ldrb	r3, [r3, #1]
20002ebc:	001a      	movs	r2, r3
20002ebe:	197b      	adds	r3, r7, r5
20002ec0:	781b      	ldrb	r3, [r3, #0]
20002ec2:	409a      	lsls	r2, r3
20002ec4:	0008      	movs	r0, r1
20002ec6:	187b      	adds	r3, r7, r1
20002ec8:	701a      	strb	r2, [r3, #0]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
20002eca:	687b      	ldr	r3, [r7, #4]
20002ecc:	789b      	ldrb	r3, [r3, #2]
20002ece:	193a      	adds	r2, r7, r4
20002ed0:	7812      	ldrb	r2, [r2, #0]
20002ed2:	4013      	ands	r3, r2
20002ed4:	b2d9      	uxtb	r1, r3
20002ed6:	183b      	adds	r3, r7, r0
20002ed8:	183a      	adds	r2, r7, r0
20002eda:	7812      	ldrb	r2, [r2, #0]
20002edc:	430a      	orrs	r2, r1
20002ede:	701a      	strb	r2, [r3, #0]
        
    tmppriority = tmppriority << 0x04;
20002ee0:	183b      	adds	r3, r7, r0
20002ee2:	183a      	adds	r2, r7, r0
20002ee4:	7812      	ldrb	r2, [r2, #0]
20002ee6:	0112      	lsls	r2, r2, #4
20002ee8:	701a      	strb	r2, [r3, #0]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
20002eea:	4a19      	ldr	r2, [pc, #100]	; (20002f50 <NVIC_Init+0xf0>)
20002eec:	687b      	ldr	r3, [r7, #4]
20002eee:	781b      	ldrb	r3, [r3, #0]
20002ef0:	0019      	movs	r1, r3
20002ef2:	23c0      	movs	r3, #192	; 0xc0
20002ef4:	009b      	lsls	r3, r3, #2
20002ef6:	1852      	adds	r2, r2, r1
20002ef8:	18d3      	adds	r3, r2, r3
20002efa:	183a      	adds	r2, r7, r0
20002efc:	7812      	ldrb	r2, [r2, #0]
20002efe:	701a      	strb	r2, [r3, #0]
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
20002f00:	687b      	ldr	r3, [r7, #4]
20002f02:	781b      	ldrb	r3, [r3, #0]
20002f04:	001a      	movs	r2, r3
20002f06:	231f      	movs	r3, #31
20002f08:	4013      	ands	r3, r2
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
20002f0a:	4911      	ldr	r1, [pc, #68]	; (20002f50 <NVIC_Init+0xf0>)
20002f0c:	687a      	ldr	r2, [r7, #4]
20002f0e:	7812      	ldrb	r2, [r2, #0]
20002f10:	0952      	lsrs	r2, r2, #5
20002f12:	b2d2      	uxtb	r2, r2
20002f14:	0010      	movs	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
20002f16:	2201      	movs	r2, #1
20002f18:	409a      	lsls	r2, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
20002f1a:	0083      	lsls	r3, r0, #2
20002f1c:	505a      	str	r2, [r3, r1]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
20002f1e:	e010      	b.n	20002f42 <NVIC_Init+0xe2>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
20002f20:	687b      	ldr	r3, [r7, #4]
20002f22:	781b      	ldrb	r3, [r3, #0]
20002f24:	001a      	movs	r2, r3
20002f26:	231f      	movs	r3, #31
20002f28:	4013      	ands	r3, r2
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
20002f2a:	4909      	ldr	r1, [pc, #36]	; (20002f50 <NVIC_Init+0xf0>)
20002f2c:	687a      	ldr	r2, [r7, #4]
20002f2e:	7812      	ldrb	r2, [r2, #0]
20002f30:	0952      	lsrs	r2, r2, #5
20002f32:	b2d2      	uxtb	r2, r2
20002f34:	0010      	movs	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
20002f36:	2201      	movs	r2, #1
20002f38:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
20002f3a:	0003      	movs	r3, r0
20002f3c:	3320      	adds	r3, #32
20002f3e:	009b      	lsls	r3, r3, #2
20002f40:	505a      	str	r2, [r3, r1]
}
20002f42:	46c0      	nop			; (mov r8, r8)
20002f44:	46bd      	mov	sp, r7
20002f46:	b004      	add	sp, #16
20002f48:	bdb0      	pop	{r4, r5, r7, pc}
20002f4a:	46c0      	nop			; (mov r8, r8)
20002f4c:	e000ed00 	and	lr, r0, r0, lsl #26
20002f50:	e000e100 	and	lr, r0, r0, lsl #2

20002f54 <NVIC_SetVectorTable>:
  *     @arg NVIC_VectTab_FLASH: Vector Table in internal FLASH.
  * @param  Offset: Vector Table base offset field. This value must be a multiple of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
20002f54:	b580      	push	{r7, lr}
20002f56:	b082      	sub	sp, #8
20002f58:	af00      	add	r7, sp, #0
20002f5a:	6078      	str	r0, [r7, #4]
20002f5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
20002f5e:	683b      	ldr	r3, [r7, #0]
20002f60:	4a05      	ldr	r2, [pc, #20]	; (20002f78 <NVIC_SetVectorTable+0x24>)
20002f62:	4013      	ands	r3, r2
20002f64:	0019      	movs	r1, r3
20002f66:	4b05      	ldr	r3, [pc, #20]	; (20002f7c <NVIC_SetVectorTable+0x28>)
20002f68:	687a      	ldr	r2, [r7, #4]
20002f6a:	430a      	orrs	r2, r1
20002f6c:	609a      	str	r2, [r3, #8]
}
20002f6e:	46c0      	nop			; (mov r8, r8)
20002f70:	46bd      	mov	sp, r7
20002f72:	b002      	add	sp, #8
20002f74:	bd80      	pop	{r7, pc}
20002f76:	46c0      	nop			; (mov r8, r8)
20002f78:	1fffff80 	svcne	0x00ffff80
20002f7c:	e000ed00 	and	lr, r0, r0, lsl #26

20002f80 <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT: Low Power Sleep on Exit.
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
20002f80:	b580      	push	{r7, lr}
20002f82:	b082      	sub	sp, #8
20002f84:	af00      	add	r7, sp, #0
20002f86:	0002      	movs	r2, r0
20002f88:	1dfb      	adds	r3, r7, #7
20002f8a:	701a      	strb	r2, [r3, #0]
20002f8c:	1dbb      	adds	r3, r7, #6
20002f8e:	1c0a      	adds	r2, r1, #0
20002f90:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
20002f92:	1dbb      	adds	r3, r7, #6
20002f94:	781b      	ldrb	r3, [r3, #0]
20002f96:	2b00      	cmp	r3, #0
20002f98:	d007      	beq.n	20002faa <NVIC_SystemLPConfig+0x2a>
  {
    SCB->SCR |= LowPowerMode;
20002f9a:	4b0a      	ldr	r3, [pc, #40]	; (20002fc4 <NVIC_SystemLPConfig+0x44>)
20002f9c:	6919      	ldr	r1, [r3, #16]
20002f9e:	1dfb      	adds	r3, r7, #7
20002fa0:	781a      	ldrb	r2, [r3, #0]
20002fa2:	4b08      	ldr	r3, [pc, #32]	; (20002fc4 <NVIC_SystemLPConfig+0x44>)
20002fa4:	430a      	orrs	r2, r1
20002fa6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
  }
}
20002fa8:	e007      	b.n	20002fba <NVIC_SystemLPConfig+0x3a>
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
20002faa:	4b06      	ldr	r3, [pc, #24]	; (20002fc4 <NVIC_SystemLPConfig+0x44>)
20002fac:	691a      	ldr	r2, [r3, #16]
20002fae:	1dfb      	adds	r3, r7, #7
20002fb0:	781b      	ldrb	r3, [r3, #0]
20002fb2:	43d9      	mvns	r1, r3
20002fb4:	4b03      	ldr	r3, [pc, #12]	; (20002fc4 <NVIC_SystemLPConfig+0x44>)
20002fb6:	400a      	ands	r2, r1
20002fb8:	611a      	str	r2, [r3, #16]
}
20002fba:	46c0      	nop			; (mov r8, r8)
20002fbc:	46bd      	mov	sp, r7
20002fbe:	b002      	add	sp, #8
20002fc0:	bd80      	pop	{r7, pc}
20002fc2:	46c0      	nop			; (mov r8, r8)
20002fc4:	e000ed00 	and	lr, r0, r0, lsl #26

20002fc8 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
20002fc8:	b580      	push	{r7, lr}
20002fca:	b082      	sub	sp, #8
20002fcc:	af00      	add	r7, sp, #0
20002fce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
20002fd0:	687b      	ldr	r3, [r7, #4]
20002fd2:	2b04      	cmp	r3, #4
20002fd4:	d106      	bne.n	20002fe4 <SysTick_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
20002fd6:	4b08      	ldr	r3, [pc, #32]	; (20002ff8 <SysTick_CLKSourceConfig+0x30>)
20002fd8:	681a      	ldr	r2, [r3, #0]
20002fda:	4b07      	ldr	r3, [pc, #28]	; (20002ff8 <SysTick_CLKSourceConfig+0x30>)
20002fdc:	2104      	movs	r1, #4
20002fde:	430a      	orrs	r2, r1
20002fe0:	601a      	str	r2, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
  }
}
20002fe2:	e005      	b.n	20002ff0 <SysTick_CLKSourceConfig+0x28>
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
20002fe4:	4b04      	ldr	r3, [pc, #16]	; (20002ff8 <SysTick_CLKSourceConfig+0x30>)
20002fe6:	681a      	ldr	r2, [r3, #0]
20002fe8:	4b03      	ldr	r3, [pc, #12]	; (20002ff8 <SysTick_CLKSourceConfig+0x30>)
20002fea:	2104      	movs	r1, #4
20002fec:	438a      	bics	r2, r1
20002fee:	601a      	str	r2, [r3, #0]
}
20002ff0:	46c0      	nop			; (mov r8, r8)
20002ff2:	46bd      	mov	sp, r7
20002ff4:	b002      	add	sp, #8
20002ff6:	bd80      	pop	{r7, pc}
20002ff8:	e000e010 	and	lr, r0, r0, lsl r0

20002ffc <out_char>:
    volatile unsigned short gtpr;
} USART;

#define USART1  ((USART *) 0x40011000) 

void out_char( char c ) {
20002ffc:	b580      	push	{r7, lr}
20002ffe:	b082      	sub	sp, #8
20003000:	af00      	add	r7, sp, #0
20003002:	0002      	movs	r2, r0
20003004:	1dfb      	adds	r3, r7, #7
20003006:	701a      	strb	r2, [r3, #0]
    // wait until usart1 is ready
    while (( USART1->sr & 0x80) == 0);
20003008:	46c0      	nop			; (mov r8, r8)
2000300a:	4b0b      	ldr	r3, [pc, #44]	; (20003038 <out_char+0x3c>)
2000300c:	881b      	ldrh	r3, [r3, #0]
2000300e:	b29b      	uxth	r3, r3
20003010:	001a      	movs	r2, r3
20003012:	2380      	movs	r3, #128	; 0x80
20003014:	4013      	ands	r3, r2
20003016:	d0f8      	beq.n	2000300a <out_char+0xe>
    // write character to usart1 
    USART1->dr = (unsigned short) c;
20003018:	4a07      	ldr	r2, [pc, #28]	; (20003038 <out_char+0x3c>)
2000301a:	1dfb      	adds	r3, r7, #7
2000301c:	781b      	ldrb	r3, [r3, #0]
2000301e:	b29b      	uxth	r3, r3
20003020:	8093      	strh	r3, [r2, #4]
    if( c == '\n')
20003022:	1dfb      	adds	r3, r7, #7
20003024:	781b      	ldrb	r3, [r3, #0]
20003026:	2b0a      	cmp	r3, #10
20003028:	d102      	bne.n	20003030 <out_char+0x34>
        out_char('\r');
2000302a:	200d      	movs	r0, #13
2000302c:	f7ff ffe6 	bl	20002ffc <out_char>
}
20003030:	46c0      	nop			; (mov r8, r8)
20003032:	46bd      	mov	sp, r7
20003034:	b002      	add	sp, #8
20003036:	bd80      	pop	{r7, pc}
20003038:	40011000 	andmi	r1, r1, r0

2000303c <test_char>:

char test_char(void) {
2000303c:	b580      	push	{r7, lr}
2000303e:	af00      	add	r7, sp, #0
    // if character arrived at usart1, return it
    if( (USART1->sr & 0x20)==0)
20003040:	4b07      	ldr	r3, [pc, #28]	; (20003060 <test_char+0x24>)
20003042:	881b      	ldrh	r3, [r3, #0]
20003044:	b29b      	uxth	r3, r3
20003046:	001a      	movs	r2, r3
20003048:	2320      	movs	r3, #32
2000304a:	4013      	ands	r3, r2
2000304c:	d101      	bne.n	20003052 <test_char+0x16>
        return 0;
2000304e:	2300      	movs	r3, #0
20003050:	e003      	b.n	2000305a <test_char+0x1e>
    return (char) USART1->dr;
20003052:	4b03      	ldr	r3, [pc, #12]	; (20003060 <test_char+0x24>)
20003054:	889b      	ldrh	r3, [r3, #4]
20003056:	b29b      	uxth	r3, r3
20003058:	b2db      	uxtb	r3, r3
}
2000305a:	0018      	movs	r0, r3
2000305c:	46bd      	mov	sp, r7
2000305e:	bd80      	pop	{r7, pc}
20003060:	40011000 	andmi	r1, r1, r0

20003064 <_getchar>:

char _getchar(void) {
20003064:	b580      	push	{r7, lr}
20003066:	af00      	add	r7, sp, #0
    // wait until character arrived at usart1, then return it
    while( (USART1->sr & 0x20)==0);
20003068:	46c0      	nop			; (mov r8, r8)
2000306a:	4b07      	ldr	r3, [pc, #28]	; (20003088 <_getchar+0x24>)
2000306c:	881b      	ldrh	r3, [r3, #0]
2000306e:	b29b      	uxth	r3, r3
20003070:	001a      	movs	r2, r3
20003072:	2320      	movs	r3, #32
20003074:	4013      	ands	r3, r2
20003076:	d0f8      	beq.n	2000306a <_getchar+0x6>
    return (char) USART1->dr;
20003078:	4b03      	ldr	r3, [pc, #12]	; (20003088 <_getchar+0x24>)
2000307a:	889b      	ldrh	r3, [r3, #4]
2000307c:	b29b      	uxth	r3, r3
2000307e:	b2db      	uxtb	r3, r3
}
20003080:	0018      	movs	r0, r3
20003082:	46bd      	mov	sp, r7
20003084:	bd80      	pop	{r7, pc}
20003086:	46c0      	nop			; (mov r8, r8)
20003088:	40011000 	andmi	r1, r1, r0

2000308c <print>:

void print(char* s){
2000308c:	b580      	push	{r7, lr}
2000308e:	b082      	sub	sp, #8
20003090:	af00      	add	r7, sp, #0
20003092:	6078      	str	r0, [r7, #4]
    while (*s != '\0')
20003094:	e006      	b.n	200030a4 <print+0x18>
        out_char(*(s++));
20003096:	687b      	ldr	r3, [r7, #4]
20003098:	1c5a      	adds	r2, r3, #1
2000309a:	607a      	str	r2, [r7, #4]
2000309c:	781b      	ldrb	r3, [r3, #0]
2000309e:	0018      	movs	r0, r3
200030a0:	f7ff ffac 	bl	20002ffc <out_char>
    while (*s != '\0')
200030a4:	687b      	ldr	r3, [r7, #4]
200030a6:	781b      	ldrb	r3, [r3, #0]
200030a8:	2b00      	cmp	r3, #0
200030aa:	d1f4      	bne.n	20003096 <print+0xa>
200030ac:	46c0      	nop			; (mov r8, r8)
200030ae:	46c0      	nop			; (mov r8, r8)
200030b0:	46bd      	mov	sp, r7
200030b2:	b002      	add	sp, #8
200030b4:	bd80      	pop	{r7, pc}
200030b6:	46c0      	nop			; (mov r8, r8)

200030b8 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
200030b8:	b580      	push	{r7, lr}
200030ba:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
200030bc:	4b14      	ldr	r3, [pc, #80]	; (20003110 <RCC_DeInit+0x58>)
200030be:	681a      	ldr	r2, [r3, #0]
200030c0:	4b13      	ldr	r3, [pc, #76]	; (20003110 <RCC_DeInit+0x58>)
200030c2:	2101      	movs	r1, #1
200030c4:	430a      	orrs	r2, r1
200030c6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
200030c8:	4b11      	ldr	r3, [pc, #68]	; (20003110 <RCC_DeInit+0x58>)
200030ca:	2200      	movs	r2, #0
200030cc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42xxx/43xxx/446xx/469xx/479xx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
200030ce:	4b10      	ldr	r3, [pc, #64]	; (20003110 <RCC_DeInit+0x58>)
200030d0:	681a      	ldr	r2, [r3, #0]
200030d2:	4b0f      	ldr	r3, [pc, #60]	; (20003110 <RCC_DeInit+0x58>)
200030d4:	490f      	ldr	r1, [pc, #60]	; (20003114 <RCC_DeInit+0x5c>)
200030d6:	400a      	ands	r2, r1
200030d8:	601a      	str	r2, [r3, #0]
  
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
200030da:	4b0d      	ldr	r3, [pc, #52]	; (20003110 <RCC_DeInit+0x58>)
200030dc:	4a0e      	ldr	r2, [pc, #56]	; (20003118 <RCC_DeInit+0x60>)
200030de:	605a      	str	r2, [r3, #4]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F413_423xx) || defined(STM32F469_479xx)  
  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
200030e0:	4a0b      	ldr	r2, [pc, #44]	; (20003110 <RCC_DeInit+0x58>)
200030e2:	2384      	movs	r3, #132	; 0x84
200030e4:	490d      	ldr	r1, [pc, #52]	; (2000311c <RCC_DeInit+0x64>)
200030e6:	50d1      	str	r1, [r2, r3]
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE || STM32F446xx || STM32F413_423xx || STM32F469_479xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx) 
  /* Reset PLLSAICFGR register, only available for STM32F42xxx/43xxx/446xx/469xx/479xx devices */
  RCC->PLLSAICFGR = 0x24003000;
200030e8:	4a09      	ldr	r2, [pc, #36]	; (20003110 <RCC_DeInit+0x58>)
200030ea:	2388      	movs	r3, #136	; 0x88
200030ec:	490c      	ldr	r1, [pc, #48]	; (20003120 <RCC_DeInit+0x68>)
200030ee:	50d1      	str	r1, [r2, r3]
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F446xx || STM32F469_479xx */
  
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
200030f0:	4b07      	ldr	r3, [pc, #28]	; (20003110 <RCC_DeInit+0x58>)
200030f2:	681a      	ldr	r2, [r3, #0]
200030f4:	4b06      	ldr	r3, [pc, #24]	; (20003110 <RCC_DeInit+0x58>)
200030f6:	490b      	ldr	r1, [pc, #44]	; (20003124 <RCC_DeInit+0x6c>)
200030f8:	400a      	ands	r2, r1
200030fa:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
200030fc:	4b04      	ldr	r3, [pc, #16]	; (20003110 <RCC_DeInit+0x58>)
200030fe:	2200      	movs	r2, #0
20003100:	60da      	str	r2, [r3, #12]

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx and STM32F413_423xx devices */
  RCC->DCKCFGR = 0x00000000;
20003102:	4a03      	ldr	r2, [pc, #12]	; (20003110 <RCC_DeInit+0x58>)
20003104:	238c      	movs	r3, #140	; 0x8c
20003106:	2100      	movs	r1, #0
20003108:	50d1      	str	r1, [r2, r3]
  
#if defined(STM32F410xx) || defined(STM32F413_423xx)
  /* Disable LPTIM and FMPI2C clock prescalers selection, only available for STM32F410xx and STM32F413_423xx devices */
  RCC->DCKCFGR2 = 0x00000000;
#endif /* STM32F410xx || STM32F413_423xx */  
}
2000310a:	46c0      	nop			; (mov r8, r8)
2000310c:	46bd      	mov	sp, r7
2000310e:	bd80      	pop	{r7, pc}
20003110:	40023800 	andmi	r3, r2, r0, lsl #16
20003114:	eaf6ffff 	b	1fdc3118 <startup-0x23cee8>
20003118:	24003010 	strcs	r3, [r0], #-16
2000311c:	20003000 	andcs	r3, r0, r0
20003120:	24003000 	strcs	r3, [r0], #-0
20003124:	fffbffff 			; <UNDEFINED> instruction: 0xfffbffff

20003128 <RCC_HSEConfig>:
  *            @arg RCC_HSE_ON: turn ON the HSE oscillator
  *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint8_t RCC_HSE)
{
20003128:	b580      	push	{r7, lr}
2000312a:	b082      	sub	sp, #8
2000312c:	af00      	add	r7, sp, #0
2000312e:	0002      	movs	r2, r0
20003130:	1dfb      	adds	r3, r7, #7
20003132:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
20003134:	4b05      	ldr	r3, [pc, #20]	; (2000314c <RCC_HSEConfig+0x24>)
20003136:	2200      	movs	r2, #0
20003138:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
2000313a:	4a04      	ldr	r2, [pc, #16]	; (2000314c <RCC_HSEConfig+0x24>)
2000313c:	1dfb      	adds	r3, r7, #7
2000313e:	781b      	ldrb	r3, [r3, #0]
20003140:	7013      	strb	r3, [r2, #0]
}
20003142:	46c0      	nop			; (mov r8, r8)
20003144:	46bd      	mov	sp, r7
20003146:	b002      	add	sp, #8
20003148:	bd80      	pop	{r7, pc}
2000314a:	46c0      	nop			; (mov r8, r8)
2000314c:	40023802 	andmi	r3, r2, r2, lsl #16

20003150 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
20003150:	b590      	push	{r4, r7, lr}
20003152:	b083      	sub	sp, #12
20003154:	af00      	add	r7, sp, #0
  __IO uint32_t startupcounter = 0;
20003156:	2300      	movs	r3, #0
20003158:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
2000315a:	1dfb      	adds	r3, r7, #7
2000315c:	2200      	movs	r2, #0
2000315e:	701a      	strb	r2, [r3, #0]
  FlagStatus hsestatus = RESET;
20003160:	1dbb      	adds	r3, r7, #6
20003162:	2200      	movs	r2, #0
20003164:	701a      	strb	r2, [r3, #0]
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
20003166:	1dbc      	adds	r4, r7, #6
20003168:	2031      	movs	r0, #49	; 0x31
2000316a:	f000 fda1 	bl	20003cb0 <RCC_GetFlagStatus>
2000316e:	0003      	movs	r3, r0
20003170:	7023      	strb	r3, [r4, #0]
    startupcounter++;
20003172:	683b      	ldr	r3, [r7, #0]
20003174:	3301      	adds	r3, #1
20003176:	603b      	str	r3, [r7, #0]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
20003178:	683a      	ldr	r2, [r7, #0]
2000317a:	23a0      	movs	r3, #160	; 0xa0
2000317c:	01db      	lsls	r3, r3, #7
2000317e:	429a      	cmp	r2, r3
20003180:	d003      	beq.n	2000318a <RCC_WaitForHSEStartUp+0x3a>
20003182:	1dbb      	adds	r3, r7, #6
20003184:	781b      	ldrb	r3, [r3, #0]
20003186:	2b00      	cmp	r3, #0
20003188:	d0ed      	beq.n	20003166 <RCC_WaitForHSEStartUp+0x16>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
2000318a:	2031      	movs	r0, #49	; 0x31
2000318c:	f000 fd90 	bl	20003cb0 <RCC_GetFlagStatus>
20003190:	1e03      	subs	r3, r0, #0
20003192:	d003      	beq.n	2000319c <RCC_WaitForHSEStartUp+0x4c>
  {
    status = SUCCESS;
20003194:	1dfb      	adds	r3, r7, #7
20003196:	2201      	movs	r2, #1
20003198:	701a      	strb	r2, [r3, #0]
2000319a:	e002      	b.n	200031a2 <RCC_WaitForHSEStartUp+0x52>
  }
  else
  {
    status = ERROR;
2000319c:	1dfb      	adds	r3, r7, #7
2000319e:	2200      	movs	r2, #0
200031a0:	701a      	strb	r2, [r3, #0]
  }
  return (status);
200031a2:	1dfb      	adds	r3, r7, #7
200031a4:	781b      	ldrb	r3, [r3, #0]
}
200031a6:	0018      	movs	r0, r3
200031a8:	46bd      	mov	sp, r7
200031aa:	b003      	add	sp, #12
200031ac:	bd90      	pop	{r4, r7, pc}

200031ae <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *         This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
200031ae:	b580      	push	{r7, lr}
200031b0:	b084      	sub	sp, #16
200031b2:	af00      	add	r7, sp, #0
200031b4:	0002      	movs	r2, r0
200031b6:	1dfb      	adds	r3, r7, #7
200031b8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0;
200031ba:	2300      	movs	r3, #0
200031bc:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
200031be:	4b0a      	ldr	r3, [pc, #40]	; (200031e8 <RCC_AdjustHSICalibrationValue+0x3a>)
200031c0:	681b      	ldr	r3, [r3, #0]
200031c2:	60fb      	str	r3, [r7, #12]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
200031c4:	68fb      	ldr	r3, [r7, #12]
200031c6:	22f8      	movs	r2, #248	; 0xf8
200031c8:	4393      	bics	r3, r2
200031ca:	60fb      	str	r3, [r7, #12]

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
200031cc:	1dfb      	adds	r3, r7, #7
200031ce:	781b      	ldrb	r3, [r3, #0]
200031d0:	00db      	lsls	r3, r3, #3
200031d2:	68fa      	ldr	r2, [r7, #12]
200031d4:	4313      	orrs	r3, r2
200031d6:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CR = tmpreg;
200031d8:	4b03      	ldr	r3, [pc, #12]	; (200031e8 <RCC_AdjustHSICalibrationValue+0x3a>)
200031da:	68fa      	ldr	r2, [r7, #12]
200031dc:	601a      	str	r2, [r3, #0]
}
200031de:	46c0      	nop			; (mov r8, r8)
200031e0:	46bd      	mov	sp, r7
200031e2:	b004      	add	sp, #16
200031e4:	bd80      	pop	{r7, pc}
200031e6:	46c0      	nop			; (mov r8, r8)
200031e8:	40023800 	andmi	r3, r2, r0, lsl #16

200031ec <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.  
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
200031ec:	b580      	push	{r7, lr}
200031ee:	b082      	sub	sp, #8
200031f0:	af00      	add	r7, sp, #0
200031f2:	0002      	movs	r2, r0
200031f4:	1dfb      	adds	r3, r7, #7
200031f6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
200031f8:	4b03      	ldr	r3, [pc, #12]	; (20003208 <RCC_HSICmd+0x1c>)
200031fa:	1dfa      	adds	r2, r7, #7
200031fc:	7812      	ldrb	r2, [r2, #0]
200031fe:	601a      	str	r2, [r3, #0]
}
20003200:	46c0      	nop			; (mov r8, r8)
20003202:	46bd      	mov	sp, r7
20003204:	b002      	add	sp, #8
20003206:	bd80      	pop	{r7, pc}
20003208:	42470000 	submi	r0, r7, #0

2000320c <RCC_LSEConfig>:
  *            @arg RCC_LSE_ON: turn ON the LSE oscillator
  *            @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
2000320c:	b580      	push	{r7, lr}
2000320e:	b082      	sub	sp, #8
20003210:	af00      	add	r7, sp, #0
20003212:	0002      	movs	r2, r0
20003214:	1dfb      	adds	r3, r7, #7
20003216:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
20003218:	4b0c      	ldr	r3, [pc, #48]	; (2000324c <RCC_LSEConfig+0x40>)
2000321a:	2200      	movs	r2, #0
2000321c:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
2000321e:	4b0b      	ldr	r3, [pc, #44]	; (2000324c <RCC_LSEConfig+0x40>)
20003220:	2200      	movs	r2, #0
20003222:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
20003224:	1dfb      	adds	r3, r7, #7
20003226:	781b      	ldrb	r3, [r3, #0]
20003228:	2b01      	cmp	r3, #1
2000322a:	d002      	beq.n	20003232 <RCC_LSEConfig+0x26>
2000322c:	2b04      	cmp	r3, #4
2000322e:	d004      	beq.n	2000323a <RCC_LSEConfig+0x2e>
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;
    default:
      break;
20003230:	e007      	b.n	20003242 <RCC_LSEConfig+0x36>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
20003232:	4b06      	ldr	r3, [pc, #24]	; (2000324c <RCC_LSEConfig+0x40>)
20003234:	2201      	movs	r2, #1
20003236:	701a      	strb	r2, [r3, #0]
      break;
20003238:	e003      	b.n	20003242 <RCC_LSEConfig+0x36>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
2000323a:	4b04      	ldr	r3, [pc, #16]	; (2000324c <RCC_LSEConfig+0x40>)
2000323c:	2205      	movs	r2, #5
2000323e:	701a      	strb	r2, [r3, #0]
      break;
20003240:	46c0      	nop			; (mov r8, r8)
  }
}
20003242:	46c0      	nop			; (mov r8, r8)
20003244:	46bd      	mov	sp, r7
20003246:	b002      	add	sp, #8
20003248:	bd80      	pop	{r7, pc}
2000324a:	46c0      	nop			; (mov r8, r8)
2000324c:	40023870 	andmi	r3, r2, r0, ror r8

20003250 <RCC_LSICmd>:
  * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
  *         clock cycles. 
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
20003250:	b580      	push	{r7, lr}
20003252:	b082      	sub	sp, #8
20003254:	af00      	add	r7, sp, #0
20003256:	0002      	movs	r2, r0
20003258:	1dfb      	adds	r3, r7, #7
2000325a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
2000325c:	4b03      	ldr	r3, [pc, #12]	; (2000326c <RCC_LSICmd+0x1c>)
2000325e:	1dfa      	adds	r2, r7, #7
20003260:	7812      	ldrb	r2, [r2, #0]
20003262:	601a      	str	r2, [r3, #0]
}
20003264:	46c0      	nop			; (mov r8, r8)
20003266:	46bd      	mov	sp, r7
20003268:	b002      	add	sp, #8
2000326a:	bd80      	pop	{r7, pc}
2000326c:	42470e80 	submi	r0, r7, #128, 28	; 0x800

20003270 <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
20003270:	b580      	push	{r7, lr}
20003272:	b084      	sub	sp, #16
20003274:	af00      	add	r7, sp, #0
20003276:	60f8      	str	r0, [r7, #12]
20003278:	60b9      	str	r1, [r7, #8]
2000327a:	607a      	str	r2, [r7, #4]
2000327c:	603b      	str	r3, [r7, #0]
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
2000327e:	687b      	ldr	r3, [r7, #4]
20003280:	019a      	lsls	r2, r3, #6
20003282:	68bb      	ldr	r3, [r7, #8]
20003284:	431a      	orrs	r2, r3
20003286:	683b      	ldr	r3, [r7, #0]
20003288:	085b      	lsrs	r3, r3, #1
2000328a:	3b01      	subs	r3, #1
2000328c:	041b      	lsls	r3, r3, #16
2000328e:	431a      	orrs	r2, r3
20003290:	68fb      	ldr	r3, [r7, #12]
20003292:	431a      	orrs	r2, r3
20003294:	0011      	movs	r1, r2
                 (PLLQ << 24);
20003296:	69bb      	ldr	r3, [r7, #24]
20003298:	061a      	lsls	r2, r3, #24
  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
2000329a:	4b03      	ldr	r3, [pc, #12]	; (200032a8 <RCC_PLLConfig+0x38>)
2000329c:	430a      	orrs	r2, r1
2000329e:	605a      	str	r2, [r3, #4]
}
200032a0:	46c0      	nop			; (mov r8, r8)
200032a2:	46bd      	mov	sp, r7
200032a4:	b004      	add	sp, #16
200032a6:	bd80      	pop	{r7, pc}
200032a8:	40023800 	andmi	r3, r2, r0, lsl #16

200032ac <RCC_PLLCmd>:
  * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
  * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
200032ac:	b580      	push	{r7, lr}
200032ae:	b082      	sub	sp, #8
200032b0:	af00      	add	r7, sp, #0
200032b2:	0002      	movs	r2, r0
200032b4:	1dfb      	adds	r3, r7, #7
200032b6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
200032b8:	4b03      	ldr	r3, [pc, #12]	; (200032c8 <RCC_PLLCmd+0x1c>)
200032ba:	1dfa      	adds	r2, r7, #7
200032bc:	7812      	ldrb	r2, [r2, #0]
200032be:	601a      	str	r2, [r3, #0]
}
200032c0:	46c0      	nop			; (mov r8, r8)
200032c2:	46bd      	mov	sp, r7
200032c4:	b002      	add	sp, #8
200032c6:	bd80      	pop	{r7, pc}
200032c8:	42470060 	submi	r0, r7, #96	; 0x60

200032cc <RCC_PLLI2SConfig>:
  *         on the I2S clock frequency.
  *   
  * @retval None
  */
void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR)
{
200032cc:	b580      	push	{r7, lr}
200032ce:	b082      	sub	sp, #8
200032d0:	af00      	add	r7, sp, #0
200032d2:	6078      	str	r0, [r7, #4]
200032d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
200032d6:	687b      	ldr	r3, [r7, #4]
200032d8:	019a      	lsls	r2, r3, #6
200032da:	683b      	ldr	r3, [r7, #0]
200032dc:	071b      	lsls	r3, r3, #28
200032de:	4904      	ldr	r1, [pc, #16]	; (200032f0 <RCC_PLLI2SConfig+0x24>)
200032e0:	4313      	orrs	r3, r2
200032e2:	2284      	movs	r2, #132	; 0x84
200032e4:	508b      	str	r3, [r1, r2]
}
200032e6:	46c0      	nop			; (mov r8, r8)
200032e8:	46bd      	mov	sp, r7
200032ea:	b002      	add	sp, #8
200032ec:	bd80      	pop	{r7, pc}
200032ee:	46c0      	nop			; (mov r8, r8)
200032f0:	40023800 	andmi	r3, r2, r0, lsl #16

200032f4 <RCC_PLLI2SCmd>:
  * @note   The PLLI2S is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLI2S. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
200032f4:	b580      	push	{r7, lr}
200032f6:	b082      	sub	sp, #8
200032f8:	af00      	add	r7, sp, #0
200032fa:	0002      	movs	r2, r0
200032fc:	1dfb      	adds	r3, r7, #7
200032fe:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
20003300:	4b03      	ldr	r3, [pc, #12]	; (20003310 <RCC_PLLI2SCmd+0x1c>)
20003302:	1dfa      	adds	r2, r7, #7
20003304:	7812      	ldrb	r2, [r2, #0]
20003306:	601a      	str	r2, [r3, #0]
}
20003308:	46c0      	nop			; (mov r8, r8)
2000330a:	46bd      	mov	sp, r7
2000330c:	b002      	add	sp, #8
2000330e:	bd80      	pop	{r7, pc}
20003310:	42470068 	submi	r0, r7, #104	; 0x68

20003314 <RCC_PLLSAIConfig>:
  *          This parameter must be a number between 2 and 7.
  *   
  * @retval None
  */
void RCC_PLLSAIConfig(uint32_t PLLSAIN, uint32_t PLLSAIQ, uint32_t PLLSAIR)
{
20003314:	b580      	push	{r7, lr}
20003316:	b084      	sub	sp, #16
20003318:	af00      	add	r7, sp, #0
2000331a:	60f8      	str	r0, [r7, #12]
2000331c:	60b9      	str	r1, [r7, #8]
2000331e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIN));
  assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIR));
  assert_param(IS_RCC_PLLSAIQ_VALUE(PLLSAIQ));
  
  RCC->PLLSAICFGR = (PLLSAIN << 6) | (PLLSAIQ << 24) | (PLLSAIR << 28);
20003320:	68fb      	ldr	r3, [r7, #12]
20003322:	019a      	lsls	r2, r3, #6
20003324:	68bb      	ldr	r3, [r7, #8]
20003326:	061b      	lsls	r3, r3, #24
20003328:	431a      	orrs	r2, r3
2000332a:	687b      	ldr	r3, [r7, #4]
2000332c:	071b      	lsls	r3, r3, #28
2000332e:	4904      	ldr	r1, [pc, #16]	; (20003340 <RCC_PLLSAIConfig+0x2c>)
20003330:	4313      	orrs	r3, r2
20003332:	2288      	movs	r2, #136	; 0x88
20003334:	508b      	str	r3, [r1, r2]
}
20003336:	46c0      	nop			; (mov r8, r8)
20003338:	46bd      	mov	sp, r7
2000333a:	b004      	add	sp, #16
2000333c:	bd80      	pop	{r7, pc}
2000333e:	46c0      	nop			; (mov r8, r8)
20003340:	40023800 	andmi	r3, r2, r0, lsl #16

20003344 <RCC_PLLSAICmd>:
  * @note   The PLLSAI is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLSAI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLSAICmd(FunctionalState NewState)
{
20003344:	b580      	push	{r7, lr}
20003346:	b082      	sub	sp, #8
20003348:	af00      	add	r7, sp, #0
2000334a:	0002      	movs	r2, r0
2000334c:	1dfb      	adds	r3, r7, #7
2000334e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLSAION_BB = (uint32_t)NewState;
20003350:	4b03      	ldr	r3, [pc, #12]	; (20003360 <RCC_PLLSAICmd+0x1c>)
20003352:	1dfa      	adds	r2, r7, #7
20003354:	7812      	ldrb	r2, [r2, #0]
20003356:	601a      	str	r2, [r3, #0]
}
20003358:	46c0      	nop			; (mov r8, r8)
2000335a:	46bd      	mov	sp, r7
2000335c:	b002      	add	sp, #8
2000335e:	bd80      	pop	{r7, pc}
20003360:	42470070 	submi	r0, r7, #112	; 0x70

20003364 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
20003364:	b580      	push	{r7, lr}
20003366:	b082      	sub	sp, #8
20003368:	af00      	add	r7, sp, #0
2000336a:	0002      	movs	r2, r0
2000336c:	1dfb      	adds	r3, r7, #7
2000336e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
20003370:	4b03      	ldr	r3, [pc, #12]	; (20003380 <RCC_ClockSecuritySystemCmd+0x1c>)
20003372:	1dfa      	adds	r2, r7, #7
20003374:	7812      	ldrb	r2, [r2, #0]
20003376:	601a      	str	r2, [r3, #0]
}
20003378:	46c0      	nop			; (mov r8, r8)
2000337a:	46bd      	mov	sp, r7
2000337c:	b002      	add	sp, #8
2000337e:	bd80      	pop	{r7, pc}
20003380:	4247004c 	submi	r0, r7, #76	; 0x4c

20003384 <RCC_MCO1Config>:
  *            @arg RCC_MCO1Div_4: division by 4 applied to MCO1 clock
  *            @arg RCC_MCO1Div_5: division by 5 applied to MCO1 clock
  * @retval None
  */
void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
{
20003384:	b580      	push	{r7, lr}
20003386:	b084      	sub	sp, #16
20003388:	af00      	add	r7, sp, #0
2000338a:	6078      	str	r0, [r7, #4]
2000338c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
2000338e:	2300      	movs	r3, #0
20003390:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
20003392:	4b0a      	ldr	r3, [pc, #40]	; (200033bc <RCC_MCO1Config+0x38>)
20003394:	689b      	ldr	r3, [r3, #8]
20003396:	60fb      	str	r3, [r7, #12]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
20003398:	68fb      	ldr	r3, [r7, #12]
2000339a:	4a09      	ldr	r2, [pc, #36]	; (200033c0 <RCC_MCO1Config+0x3c>)
2000339c:	4013      	ands	r3, r2
2000339e:	60fb      	str	r3, [r7, #12]

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
200033a0:	687a      	ldr	r2, [r7, #4]
200033a2:	683b      	ldr	r3, [r7, #0]
200033a4:	4313      	orrs	r3, r2
200033a6:	68fa      	ldr	r2, [r7, #12]
200033a8:	4313      	orrs	r3, r2
200033aa:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
200033ac:	4b03      	ldr	r3, [pc, #12]	; (200033bc <RCC_MCO1Config+0x38>)
200033ae:	68fa      	ldr	r2, [r7, #12]
200033b0:	609a      	str	r2, [r3, #8]

#if defined(STM32F410xx)
  RCC_MCO1Cmd(ENABLE);
#endif /* STM32F410xx */   
}
200033b2:	46c0      	nop			; (mov r8, r8)
200033b4:	46bd      	mov	sp, r7
200033b6:	b004      	add	sp, #16
200033b8:	bd80      	pop	{r7, pc}
200033ba:	46c0      	nop			; (mov r8, r8)
200033bc:	40023800 	andmi	r3, r2, r0, lsl #16
200033c0:	f89fffff 			; <UNDEFINED> instruction: 0xf89fffff

200033c4 <RCC_MCO2Config>:
  * @note  For STM32F410xx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)
{
200033c4:	b580      	push	{r7, lr}
200033c6:	b084      	sub	sp, #16
200033c8:	af00      	add	r7, sp, #0
200033ca:	6078      	str	r0, [r7, #4]
200033cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
200033ce:	2300      	movs	r3, #0
200033d0:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
200033d2:	4b0a      	ldr	r3, [pc, #40]	; (200033fc <RCC_MCO2Config+0x38>)
200033d4:	689b      	ldr	r3, [r3, #8]
200033d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
200033d8:	68fb      	ldr	r3, [r7, #12]
200033da:	015b      	lsls	r3, r3, #5
200033dc:	095b      	lsrs	r3, r3, #5
200033de:	60fb      	str	r3, [r7, #12]

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
200033e0:	687a      	ldr	r2, [r7, #4]
200033e2:	683b      	ldr	r3, [r7, #0]
200033e4:	4313      	orrs	r3, r2
200033e6:	68fa      	ldr	r2, [r7, #12]
200033e8:	4313      	orrs	r3, r2
200033ea:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
200033ec:	4b03      	ldr	r3, [pc, #12]	; (200033fc <RCC_MCO2Config+0x38>)
200033ee:	68fa      	ldr	r2, [r7, #12]
200033f0:	609a      	str	r2, [r3, #8]

#if defined(STM32F410xx)
  RCC_MCO2Cmd(ENABLE);
#endif /* STM32F410xx */   
}
200033f2:	46c0      	nop			; (mov r8, r8)
200033f4:	46bd      	mov	sp, r7
200033f6:	b004      	add	sp, #16
200033f8:	bd80      	pop	{r7, pc}
200033fa:	46c0      	nop			; (mov r8, r8)
200033fc:	40023800 	andmi	r3, r2, r0, lsl #16

20003400 <RCC_SYSCLKConfig>:
  *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source (RCC_SYSCLKSource_PLLPCLK for STM32F446xx devices)
  *            @arg RCC_SYSCLKSource_PLLRCLK: PLL R selected as system clock source only for STM32F412xG, STM32F413_423xx and STM32F446xx devices
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
20003400:	b580      	push	{r7, lr}
20003402:	b084      	sub	sp, #16
20003404:	af00      	add	r7, sp, #0
20003406:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20003408:	2300      	movs	r3, #0
2000340a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
2000340c:	4b08      	ldr	r3, [pc, #32]	; (20003430 <RCC_SYSCLKConfig+0x30>)
2000340e:	689b      	ldr	r3, [r3, #8]
20003410:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
20003412:	68fb      	ldr	r3, [r7, #12]
20003414:	2203      	movs	r2, #3
20003416:	4393      	bics	r3, r2
20003418:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
2000341a:	68fa      	ldr	r2, [r7, #12]
2000341c:	687b      	ldr	r3, [r7, #4]
2000341e:	4313      	orrs	r3, r2
20003420:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
20003422:	4b03      	ldr	r3, [pc, #12]	; (20003430 <RCC_SYSCLKConfig+0x30>)
20003424:	68fa      	ldr	r2, [r7, #12]
20003426:	609a      	str	r2, [r3, #8]
}
20003428:	46c0      	nop			; (mov r8, r8)
2000342a:	46bd      	mov	sp, r7
2000342c:	b004      	add	sp, #16
2000342e:	bd80      	pop	{r7, pc}
20003430:	40023800 	andmi	r3, r2, r0, lsl #16

20003434 <RCC_GetSYSCLKSource>:
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock (PLL P for STM32F446xx devices)
  *              - 0x0C: PLL R used as system clock (only for STM32F412xG, STM32F413_423xx and STM32F446xx devices)
  */
uint8_t RCC_GetSYSCLKSource(void)
{
20003434:	b580      	push	{r7, lr}
20003436:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
20003438:	4b04      	ldr	r3, [pc, #16]	; (2000344c <RCC_GetSYSCLKSource+0x18>)
2000343a:	689b      	ldr	r3, [r3, #8]
2000343c:	b2db      	uxtb	r3, r3
2000343e:	220c      	movs	r2, #12
20003440:	4013      	ands	r3, r2
20003442:	b2db      	uxtb	r3, r3
}
20003444:	0018      	movs	r0, r3
20003446:	46bd      	mov	sp, r7
20003448:	bd80      	pop	{r7, pc}
2000344a:	46c0      	nop			; (mov r8, r8)
2000344c:	40023800 	andmi	r3, r2, r0, lsl #16

20003450 <RCC_HCLKConfig>:
  *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
20003450:	b580      	push	{r7, lr}
20003452:	b084      	sub	sp, #16
20003454:	af00      	add	r7, sp, #0
20003456:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20003458:	2300      	movs	r3, #0
2000345a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
2000345c:	4b08      	ldr	r3, [pc, #32]	; (20003480 <RCC_HCLKConfig+0x30>)
2000345e:	689b      	ldr	r3, [r3, #8]
20003460:	60fb      	str	r3, [r7, #12]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
20003462:	68fb      	ldr	r3, [r7, #12]
20003464:	22f0      	movs	r2, #240	; 0xf0
20003466:	4393      	bics	r3, r2
20003468:	60fb      	str	r3, [r7, #12]

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
2000346a:	68fa      	ldr	r2, [r7, #12]
2000346c:	687b      	ldr	r3, [r7, #4]
2000346e:	4313      	orrs	r3, r2
20003470:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
20003472:	4b03      	ldr	r3, [pc, #12]	; (20003480 <RCC_HCLKConfig+0x30>)
20003474:	68fa      	ldr	r2, [r7, #12]
20003476:	609a      	str	r2, [r3, #8]
}
20003478:	46c0      	nop			; (mov r8, r8)
2000347a:	46bd      	mov	sp, r7
2000347c:	b004      	add	sp, #16
2000347e:	bd80      	pop	{r7, pc}
20003480:	40023800 	andmi	r3, r2, r0, lsl #16

20003484 <RCC_PCLK1Config>:
  *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
20003484:	b580      	push	{r7, lr}
20003486:	b084      	sub	sp, #16
20003488:	af00      	add	r7, sp, #0
2000348a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
2000348c:	2300      	movs	r3, #0
2000348e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
20003490:	4b08      	ldr	r3, [pc, #32]	; (200034b4 <RCC_PCLK1Config+0x30>)
20003492:	689b      	ldr	r3, [r3, #8]
20003494:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
20003496:	68fb      	ldr	r3, [r7, #12]
20003498:	4a07      	ldr	r2, [pc, #28]	; (200034b8 <RCC_PCLK1Config+0x34>)
2000349a:	4013      	ands	r3, r2
2000349c:	60fb      	str	r3, [r7, #12]

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
2000349e:	68fa      	ldr	r2, [r7, #12]
200034a0:	687b      	ldr	r3, [r7, #4]
200034a2:	4313      	orrs	r3, r2
200034a4:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
200034a6:	4b03      	ldr	r3, [pc, #12]	; (200034b4 <RCC_PCLK1Config+0x30>)
200034a8:	68fa      	ldr	r2, [r7, #12]
200034aa:	609a      	str	r2, [r3, #8]
}
200034ac:	46c0      	nop			; (mov r8, r8)
200034ae:	46bd      	mov	sp, r7
200034b0:	b004      	add	sp, #16
200034b2:	bd80      	pop	{r7, pc}
200034b4:	40023800 	andmi	r3, r2, r0, lsl #16
200034b8:	ffffe3ff 			; <UNDEFINED> instruction: 0xffffe3ff

200034bc <RCC_PCLK2Config>:
  *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
200034bc:	b580      	push	{r7, lr}
200034be:	b084      	sub	sp, #16
200034c0:	af00      	add	r7, sp, #0
200034c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
200034c4:	2300      	movs	r3, #0
200034c6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
200034c8:	4b09      	ldr	r3, [pc, #36]	; (200034f0 <RCC_PCLK2Config+0x34>)
200034ca:	689b      	ldr	r3, [r3, #8]
200034cc:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
200034ce:	68fb      	ldr	r3, [r7, #12]
200034d0:	4a08      	ldr	r2, [pc, #32]	; (200034f4 <RCC_PCLK2Config+0x38>)
200034d2:	4013      	ands	r3, r2
200034d4:	60fb      	str	r3, [r7, #12]

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
200034d6:	687b      	ldr	r3, [r7, #4]
200034d8:	00db      	lsls	r3, r3, #3
200034da:	68fa      	ldr	r2, [r7, #12]
200034dc:	4313      	orrs	r3, r2
200034de:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
200034e0:	4b03      	ldr	r3, [pc, #12]	; (200034f0 <RCC_PCLK2Config+0x34>)
200034e2:	68fa      	ldr	r2, [r7, #12]
200034e4:	609a      	str	r2, [r3, #8]
}
200034e6:	46c0      	nop			; (mov r8, r8)
200034e8:	46bd      	mov	sp, r7
200034ea:	b004      	add	sp, #16
200034ec:	bd80      	pop	{r7, pc}
200034ee:	46c0      	nop			; (mov r8, r8)
200034f0:	40023800 	andmi	r3, r2, r0, lsl #16
200034f4:	ffff1fff 			; <UNDEFINED> instruction: 0xffff1fff

200034f8 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
200034f8:	b580      	push	{r7, lr}
200034fa:	b088      	sub	sp, #32
200034fc:	af00      	add	r7, sp, #0
200034fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
20003500:	2300      	movs	r3, #0
20003502:	61bb      	str	r3, [r7, #24]
20003504:	2300      	movs	r3, #0
20003506:	617b      	str	r3, [r7, #20]
20003508:	2300      	movs	r3, #0
2000350a:	61fb      	str	r3, [r7, #28]
2000350c:	2302      	movs	r3, #2
2000350e:	613b      	str	r3, [r7, #16]
20003510:	2300      	movs	r3, #0
20003512:	60fb      	str	r3, [r7, #12]
20003514:	2302      	movs	r3, #2
20003516:	60bb      	str	r3, [r7, #8]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
20003518:	4b4c      	ldr	r3, [pc, #304]	; (2000364c <RCC_GetClocksFreq+0x154>)
2000351a:	689b      	ldr	r3, [r3, #8]
2000351c:	220c      	movs	r2, #12
2000351e:	4013      	ands	r3, r2
20003520:	61bb      	str	r3, [r7, #24]
  
  switch (tmp)
20003522:	69bb      	ldr	r3, [r7, #24]
20003524:	2b08      	cmp	r3, #8
20003526:	d011      	beq.n	2000354c <RCC_GetClocksFreq+0x54>
20003528:	69bb      	ldr	r3, [r7, #24]
2000352a:	2b08      	cmp	r3, #8
2000352c:	d848      	bhi.n	200035c0 <RCC_GetClocksFreq+0xc8>
2000352e:	69bb      	ldr	r3, [r7, #24]
20003530:	2b00      	cmp	r3, #0
20003532:	d003      	beq.n	2000353c <RCC_GetClocksFreq+0x44>
20003534:	69bb      	ldr	r3, [r7, #24]
20003536:	2b04      	cmp	r3, #4
20003538:	d004      	beq.n	20003544 <RCC_GetClocksFreq+0x4c>
2000353a:	e041      	b.n	200035c0 <RCC_GetClocksFreq+0xc8>
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
2000353c:	687b      	ldr	r3, [r7, #4]
2000353e:	4a44      	ldr	r2, [pc, #272]	; (20003650 <RCC_GetClocksFreq+0x158>)
20003540:	601a      	str	r2, [r3, #0]
    break;
20003542:	e041      	b.n	200035c8 <RCC_GetClocksFreq+0xd0>
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
20003544:	687b      	ldr	r3, [r7, #4]
20003546:	4a43      	ldr	r2, [pc, #268]	; (20003654 <RCC_GetClocksFreq+0x15c>)
20003548:	601a      	str	r2, [r3, #0]
    break;
2000354a:	e03d      	b.n	200035c8 <RCC_GetClocksFreq+0xd0>
  case 0x08:  /* PLL P used as system clock  source */
    
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
2000354c:	4b3f      	ldr	r3, [pc, #252]	; (2000364c <RCC_GetClocksFreq+0x154>)
2000354e:	685b      	ldr	r3, [r3, #4]
20003550:	0d9b      	lsrs	r3, r3, #22
20003552:	2201      	movs	r2, #1
20003554:	4013      	ands	r3, r2
20003556:	60fb      	str	r3, [r7, #12]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
20003558:	4b3c      	ldr	r3, [pc, #240]	; (2000364c <RCC_GetClocksFreq+0x154>)
2000355a:	685b      	ldr	r3, [r3, #4]
2000355c:	223f      	movs	r2, #63	; 0x3f
2000355e:	4013      	ands	r3, r2
20003560:	60bb      	str	r3, [r7, #8]
    
    if (pllsource != 0)
20003562:	68fb      	ldr	r3, [r7, #12]
20003564:	2b00      	cmp	r3, #0
20003566:	d00d      	beq.n	20003584 <RCC_GetClocksFreq+0x8c>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
20003568:	68b9      	ldr	r1, [r7, #8]
2000356a:	483a      	ldr	r0, [pc, #232]	; (20003654 <RCC_GetClocksFreq+0x15c>)
2000356c:	f000 fc22 	bl	20003db4 <__udivsi3>
20003570:	0003      	movs	r3, r0
20003572:	001a      	movs	r2, r3
20003574:	4b35      	ldr	r3, [pc, #212]	; (2000364c <RCC_GetClocksFreq+0x154>)
20003576:	685b      	ldr	r3, [r3, #4]
20003578:	099b      	lsrs	r3, r3, #6
2000357a:	05db      	lsls	r3, r3, #23
2000357c:	0ddb      	lsrs	r3, r3, #23
2000357e:	4353      	muls	r3, r2
20003580:	61fb      	str	r3, [r7, #28]
20003582:	e00c      	b.n	2000359e <RCC_GetClocksFreq+0xa6>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
20003584:	68b9      	ldr	r1, [r7, #8]
20003586:	4832      	ldr	r0, [pc, #200]	; (20003650 <RCC_GetClocksFreq+0x158>)
20003588:	f000 fc14 	bl	20003db4 <__udivsi3>
2000358c:	0003      	movs	r3, r0
2000358e:	001a      	movs	r2, r3
20003590:	4b2e      	ldr	r3, [pc, #184]	; (2000364c <RCC_GetClocksFreq+0x154>)
20003592:	685b      	ldr	r3, [r3, #4]
20003594:	099b      	lsrs	r3, r3, #6
20003596:	05db      	lsls	r3, r3, #23
20003598:	0ddb      	lsrs	r3, r3, #23
2000359a:	4353      	muls	r3, r2
2000359c:	61fb      	str	r3, [r7, #28]
    }
    
    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
2000359e:	4b2b      	ldr	r3, [pc, #172]	; (2000364c <RCC_GetClocksFreq+0x154>)
200035a0:	685b      	ldr	r3, [r3, #4]
200035a2:	0c1b      	lsrs	r3, r3, #16
200035a4:	2203      	movs	r2, #3
200035a6:	4013      	ands	r3, r2
200035a8:	3301      	adds	r3, #1
200035aa:	005b      	lsls	r3, r3, #1
200035ac:	613b      	str	r3, [r7, #16]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
200035ae:	6939      	ldr	r1, [r7, #16]
200035b0:	69f8      	ldr	r0, [r7, #28]
200035b2:	f000 fbff 	bl	20003db4 <__udivsi3>
200035b6:	0003      	movs	r3, r0
200035b8:	001a      	movs	r2, r3
200035ba:	687b      	ldr	r3, [r7, #4]
200035bc:	601a      	str	r2, [r3, #0]
    break;
200035be:	e003      	b.n	200035c8 <RCC_GetClocksFreq+0xd0>
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;    
    break;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    
  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
200035c0:	687b      	ldr	r3, [r7, #4]
200035c2:	4a23      	ldr	r2, [pc, #140]	; (20003650 <RCC_GetClocksFreq+0x158>)
200035c4:	601a      	str	r2, [r3, #0]
    break;
200035c6:	46c0      	nop			; (mov r8, r8)
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
  
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
200035c8:	4b20      	ldr	r3, [pc, #128]	; (2000364c <RCC_GetClocksFreq+0x154>)
200035ca:	689b      	ldr	r3, [r3, #8]
200035cc:	22f0      	movs	r2, #240	; 0xf0
200035ce:	4013      	ands	r3, r2
200035d0:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
200035d2:	69bb      	ldr	r3, [r7, #24]
200035d4:	091b      	lsrs	r3, r3, #4
200035d6:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
200035d8:	4a1f      	ldr	r2, [pc, #124]	; (20003658 <RCC_GetClocksFreq+0x160>)
200035da:	69bb      	ldr	r3, [r7, #24]
200035dc:	18d3      	adds	r3, r2, r3
200035de:	781b      	ldrb	r3, [r3, #0]
200035e0:	b2db      	uxtb	r3, r3
200035e2:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
200035e4:	687b      	ldr	r3, [r7, #4]
200035e6:	681a      	ldr	r2, [r3, #0]
200035e8:	697b      	ldr	r3, [r7, #20]
200035ea:	40da      	lsrs	r2, r3
200035ec:	687b      	ldr	r3, [r7, #4]
200035ee:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
200035f0:	4b16      	ldr	r3, [pc, #88]	; (2000364c <RCC_GetClocksFreq+0x154>)
200035f2:	689a      	ldr	r2, [r3, #8]
200035f4:	23e0      	movs	r3, #224	; 0xe0
200035f6:	015b      	lsls	r3, r3, #5
200035f8:	4013      	ands	r3, r2
200035fa:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
200035fc:	69bb      	ldr	r3, [r7, #24]
200035fe:	0a9b      	lsrs	r3, r3, #10
20003600:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
20003602:	4a15      	ldr	r2, [pc, #84]	; (20003658 <RCC_GetClocksFreq+0x160>)
20003604:	69bb      	ldr	r3, [r7, #24]
20003606:	18d3      	adds	r3, r2, r3
20003608:	781b      	ldrb	r3, [r3, #0]
2000360a:	b2db      	uxtb	r3, r3
2000360c:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
2000360e:	687b      	ldr	r3, [r7, #4]
20003610:	685a      	ldr	r2, [r3, #4]
20003612:	697b      	ldr	r3, [r7, #20]
20003614:	40da      	lsrs	r2, r3
20003616:	687b      	ldr	r3, [r7, #4]
20003618:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
2000361a:	4b0c      	ldr	r3, [pc, #48]	; (2000364c <RCC_GetClocksFreq+0x154>)
2000361c:	689a      	ldr	r2, [r3, #8]
2000361e:	23e0      	movs	r3, #224	; 0xe0
20003620:	021b      	lsls	r3, r3, #8
20003622:	4013      	ands	r3, r2
20003624:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
20003626:	69bb      	ldr	r3, [r7, #24]
20003628:	0b5b      	lsrs	r3, r3, #13
2000362a:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
2000362c:	4a0a      	ldr	r2, [pc, #40]	; (20003658 <RCC_GetClocksFreq+0x160>)
2000362e:	69bb      	ldr	r3, [r7, #24]
20003630:	18d3      	adds	r3, r2, r3
20003632:	781b      	ldrb	r3, [r3, #0]
20003634:	b2db      	uxtb	r3, r3
20003636:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
20003638:	687b      	ldr	r3, [r7, #4]
2000363a:	685a      	ldr	r2, [r3, #4]
2000363c:	697b      	ldr	r3, [r7, #20]
2000363e:	40da      	lsrs	r2, r3
20003640:	687b      	ldr	r3, [r7, #4]
20003642:	60da      	str	r2, [r3, #12]
}
20003644:	46c0      	nop			; (mov r8, r8)
20003646:	46bd      	mov	sp, r7
20003648:	b008      	add	sp, #32
2000364a:	bd80      	pop	{r7, pc}
2000364c:	40023800 	andmi	r3, r2, r0, lsl #16
20003650:	00f42400 	rscseq	r2, r4, r0, lsl #8
20003654:	017d7840 	cmneq	sp, r0, asr #16
20003658:	20003ecc 	andcs	r3, r0, ip, asr #29

2000365c <RCC_RTCCLKConfig>:
  *         RTC clock source).
  *  
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
2000365c:	b580      	push	{r7, lr}
2000365e:	b084      	sub	sp, #16
20003660:	af00      	add	r7, sp, #0
20003662:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20003664:	2300      	movs	r3, #0
20003666:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
20003668:	687a      	ldr	r2, [r7, #4]
2000366a:	23c0      	movs	r3, #192	; 0xc0
2000366c:	009b      	lsls	r3, r3, #2
2000366e:	401a      	ands	r2, r3
20003670:	23c0      	movs	r3, #192	; 0xc0
20003672:	009b      	lsls	r3, r3, #2
20003674:	429a      	cmp	r2, r3
20003676:	d10f      	bne.n	20003698 <RCC_RTCCLKConfig+0x3c>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
20003678:	4b0d      	ldr	r3, [pc, #52]	; (200036b0 <RCC_RTCCLKConfig+0x54>)
2000367a:	689b      	ldr	r3, [r3, #8]
2000367c:	60fb      	str	r3, [r7, #12]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
2000367e:	68fb      	ldr	r3, [r7, #12]
20003680:	4a0c      	ldr	r2, [pc, #48]	; (200036b4 <RCC_RTCCLKConfig+0x58>)
20003682:	4013      	ands	r3, r2
20003684:	60fb      	str	r3, [r7, #12]

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
20003686:	687b      	ldr	r3, [r7, #4]
20003688:	4a0b      	ldr	r2, [pc, #44]	; (200036b8 <RCC_RTCCLKConfig+0x5c>)
2000368a:	4013      	ands	r3, r2
2000368c:	68fa      	ldr	r2, [r7, #12]
2000368e:	4313      	orrs	r3, r2
20003690:	60fb      	str	r3, [r7, #12]

    /* Store the new value */
    RCC->CFGR = tmpreg;
20003692:	4b07      	ldr	r3, [pc, #28]	; (200036b0 <RCC_RTCCLKConfig+0x54>)
20003694:	68fa      	ldr	r2, [r7, #12]
20003696:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
20003698:	4b05      	ldr	r3, [pc, #20]	; (200036b0 <RCC_RTCCLKConfig+0x54>)
2000369a:	6f19      	ldr	r1, [r3, #112]	; 0x70
2000369c:	687b      	ldr	r3, [r7, #4]
2000369e:	051b      	lsls	r3, r3, #20
200036a0:	0d1a      	lsrs	r2, r3, #20
200036a2:	4b03      	ldr	r3, [pc, #12]	; (200036b0 <RCC_RTCCLKConfig+0x54>)
200036a4:	430a      	orrs	r2, r1
200036a6:	671a      	str	r2, [r3, #112]	; 0x70
}
200036a8:	46c0      	nop			; (mov r8, r8)
200036aa:	46bd      	mov	sp, r7
200036ac:	b004      	add	sp, #16
200036ae:	bd80      	pop	{r7, pc}
200036b0:	40023800 	andmi	r3, r2, r0, lsl #16
200036b4:	ffe0ffff 			; <UNDEFINED> instruction: 0xffe0ffff
200036b8:	0ffffcff 	svceq	0x00fffcff

200036bc <RCC_RTCCLKCmd>:
  *         using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
200036bc:	b580      	push	{r7, lr}
200036be:	b082      	sub	sp, #8
200036c0:	af00      	add	r7, sp, #0
200036c2:	0002      	movs	r2, r0
200036c4:	1dfb      	adds	r3, r7, #7
200036c6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
200036c8:	4b03      	ldr	r3, [pc, #12]	; (200036d8 <RCC_RTCCLKCmd+0x1c>)
200036ca:	1dfa      	adds	r2, r7, #7
200036cc:	7812      	ldrb	r2, [r2, #0]
200036ce:	601a      	str	r2, [r3, #0]
}
200036d0:	46c0      	nop			; (mov r8, r8)
200036d2:	46bd      	mov	sp, r7
200036d4:	b002      	add	sp, #8
200036d6:	bd80      	pop	{r7, pc}
200036d8:	42470e3c 	submi	r0, r7, #60, 28	; 0x3c0

200036dc <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
200036dc:	b580      	push	{r7, lr}
200036de:	b082      	sub	sp, #8
200036e0:	af00      	add	r7, sp, #0
200036e2:	0002      	movs	r2, r0
200036e4:	1dfb      	adds	r3, r7, #7
200036e6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
200036e8:	4b03      	ldr	r3, [pc, #12]	; (200036f8 <RCC_BackupResetCmd+0x1c>)
200036ea:	1dfa      	adds	r2, r7, #7
200036ec:	7812      	ldrb	r2, [r2, #0]
200036ee:	601a      	str	r2, [r3, #0]
}
200036f0:	46c0      	nop			; (mov r8, r8)
200036f2:	46bd      	mov	sp, r7
200036f4:	b002      	add	sp, #8
200036f6:	bd80      	pop	{r7, pc}
200036f8:	42470e40 	submi	r0, r7, #64, 28	; 0x400

200036fc <RCC_I2SCLKConfig>:
  *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as I2S clock source
  * @retval None
  */
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
200036fc:	b580      	push	{r7, lr}
200036fe:	b082      	sub	sp, #8
20003700:	af00      	add	r7, sp, #0
20003702:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;  
20003704:	4b03      	ldr	r3, [pc, #12]	; (20003714 <RCC_I2SCLKConfig+0x18>)
20003706:	687a      	ldr	r2, [r7, #4]
20003708:	601a      	str	r2, [r3, #0]
}
2000370a:	46c0      	nop			; (mov r8, r8)
2000370c:	46bd      	mov	sp, r7
2000370e:	b002      	add	sp, #8
20003710:	bd80      	pop	{r7, pc}
20003712:	46c0      	nop			; (mov r8, r8)
20003714:	4247015c 	submi	r0, r7, #92, 2

20003718 <RCC_SAIBlockACLKConfig>:
  *            @arg RCC_SAIACLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as SAI1 Block A clock
  * @retval None
  */
void RCC_SAIBlockACLKConfig(uint32_t RCC_SAIBlockACLKSource)
{
20003718:	b580      	push	{r7, lr}
2000371a:	b084      	sub	sp, #16
2000371c:	af00      	add	r7, sp, #0
2000371e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20003720:	2300      	movs	r3, #0
20003722:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIACLK_SOURCE(RCC_SAIBlockACLKSource));
  
  tmpreg = RCC->DCKCFGR;
20003724:	4a09      	ldr	r2, [pc, #36]	; (2000374c <RCC_SAIBlockACLKConfig+0x34>)
20003726:	238c      	movs	r3, #140	; 0x8c
20003728:	58d3      	ldr	r3, [r2, r3]
2000372a:	60fb      	str	r3, [r7, #12]

  /* Clear RCC_DCKCFGR_SAI1ASRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1ASRC;
2000372c:	68fb      	ldr	r3, [r7, #12]
2000372e:	4a08      	ldr	r2, [pc, #32]	; (20003750 <RCC_SAIBlockACLKConfig+0x38>)
20003730:	4013      	ands	r3, r2
20003732:	60fb      	str	r3, [r7, #12]

  /* Set SAI Block A source selection value */
  tmpreg |= RCC_SAIBlockACLKSource;
20003734:	68fa      	ldr	r2, [r7, #12]
20003736:	687b      	ldr	r3, [r7, #4]
20003738:	4313      	orrs	r3, r2
2000373a:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
2000373c:	4903      	ldr	r1, [pc, #12]	; (2000374c <RCC_SAIBlockACLKConfig+0x34>)
2000373e:	228c      	movs	r2, #140	; 0x8c
20003740:	68fb      	ldr	r3, [r7, #12]
20003742:	508b      	str	r3, [r1, r2]
}
20003744:	46c0      	nop			; (mov r8, r8)
20003746:	46bd      	mov	sp, r7
20003748:	b004      	add	sp, #16
2000374a:	bd80      	pop	{r7, pc}
2000374c:	40023800 	andmi	r3, r2, r0, lsl #16
20003750:	ffcfffff 			; <UNDEFINED> instruction: 0xffcfffff

20003754 <RCC_SAIBlockBCLKConfig>:
  *            @arg RCC_SAIBCLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as SAI1 Block B clock
  * @retval None
  */
void RCC_SAIBlockBCLKConfig(uint32_t RCC_SAIBlockBCLKSource)
{
20003754:	b580      	push	{r7, lr}
20003756:	b084      	sub	sp, #16
20003758:	af00      	add	r7, sp, #0
2000375a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
2000375c:	2300      	movs	r3, #0
2000375e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIBCLK_SOURCE(RCC_SAIBlockBCLKSource));
  
  tmpreg = RCC->DCKCFGR;
20003760:	4a09      	ldr	r2, [pc, #36]	; (20003788 <RCC_SAIBlockBCLKConfig+0x34>)
20003762:	238c      	movs	r3, #140	; 0x8c
20003764:	58d3      	ldr	r3, [r2, r3]
20003766:	60fb      	str	r3, [r7, #12]

  /* Clear RCC_DCKCFGR_SAI1BSRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1BSRC;
20003768:	68fb      	ldr	r3, [r7, #12]
2000376a:	4a08      	ldr	r2, [pc, #32]	; (2000378c <RCC_SAIBlockBCLKConfig+0x38>)
2000376c:	4013      	ands	r3, r2
2000376e:	60fb      	str	r3, [r7, #12]

  /* Set SAI Block B source selection value */
  tmpreg |= RCC_SAIBlockBCLKSource;
20003770:	68fa      	ldr	r2, [r7, #12]
20003772:	687b      	ldr	r3, [r7, #4]
20003774:	4313      	orrs	r3, r2
20003776:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
20003778:	4903      	ldr	r1, [pc, #12]	; (20003788 <RCC_SAIBlockBCLKConfig+0x34>)
2000377a:	228c      	movs	r2, #140	; 0x8c
2000377c:	68fb      	ldr	r3, [r7, #12]
2000377e:	508b      	str	r3, [r1, r2]
}
20003780:	46c0      	nop			; (mov r8, r8)
20003782:	46bd      	mov	sp, r7
20003784:	b004      	add	sp, #16
20003786:	bd80      	pop	{r7, pc}
20003788:	40023800 	andmi	r3, r2, r0, lsl #16
2000378c:	ff3fffff 			; <UNDEFINED> instruction: 0xff3fffff

20003790 <RCC_SAIPLLI2SClkDivConfig>:
  *          SAI1 clock frequency = f(PLLI2S_Q) / RCC_PLLI2SDivQ 
  *              
  * @retval None
  */
void RCC_SAIPLLI2SClkDivConfig(uint32_t RCC_PLLI2SDivQ)  
{
20003790:	b580      	push	{r7, lr}
20003792:	b084      	sub	sp, #16
20003794:	af00      	add	r7, sp, #0
20003796:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20003798:	2300      	movs	r3, #0
2000379a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(RCC_PLLI2SDivQ));
  
  tmpreg = RCC->DCKCFGR;
2000379c:	4a0a      	ldr	r2, [pc, #40]	; (200037c8 <RCC_SAIPLLI2SClkDivConfig+0x38>)
2000379e:	238c      	movs	r3, #140	; 0x8c
200037a0:	58d3      	ldr	r3, [r2, r3]
200037a2:	60fb      	str	r3, [r7, #12]

  /* Clear PLLI2SDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLI2SDIVQ);
200037a4:	68fb      	ldr	r3, [r7, #12]
200037a6:	221f      	movs	r2, #31
200037a8:	4393      	bics	r3, r2
200037aa:	60fb      	str	r3, [r7, #12]

  /* Set PLLI2SDIVQ values */
  tmpreg |= (RCC_PLLI2SDivQ - 1);
200037ac:	687b      	ldr	r3, [r7, #4]
200037ae:	3b01      	subs	r3, #1
200037b0:	68fa      	ldr	r2, [r7, #12]
200037b2:	4313      	orrs	r3, r2
200037b4:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
200037b6:	4904      	ldr	r1, [pc, #16]	; (200037c8 <RCC_SAIPLLI2SClkDivConfig+0x38>)
200037b8:	228c      	movs	r2, #140	; 0x8c
200037ba:	68fb      	ldr	r3, [r7, #12]
200037bc:	508b      	str	r3, [r1, r2]
}
200037be:	46c0      	nop			; (mov r8, r8)
200037c0:	46bd      	mov	sp, r7
200037c2:	b004      	add	sp, #16
200037c4:	bd80      	pop	{r7, pc}
200037c6:	46c0      	nop			; (mov r8, r8)
200037c8:	40023800 	andmi	r3, r2, r0, lsl #16

200037cc <RCC_SAIPLLSAIClkDivConfig>:
  *          SAI1 clock frequency = f(PLLSAI_Q) / RCC_PLLSAIDivQ  
  *              
  * @retval None
  */
void RCC_SAIPLLSAIClkDivConfig(uint32_t RCC_PLLSAIDivQ)  
{
200037cc:	b580      	push	{r7, lr}
200037ce:	b084      	sub	sp, #16
200037d0:	af00      	add	r7, sp, #0
200037d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
200037d4:	2300      	movs	r3, #0
200037d6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(RCC_PLLSAIDivQ));
  
  tmpreg = RCC->DCKCFGR;
200037d8:	4a0a      	ldr	r2, [pc, #40]	; (20003804 <RCC_SAIPLLSAIClkDivConfig+0x38>)
200037da:	238c      	movs	r3, #140	; 0x8c
200037dc:	58d3      	ldr	r3, [r2, r3]
200037de:	60fb      	str	r3, [r7, #12]

  /* Clear PLLI2SDIVQ[4:0] and PLLSAIDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLSAIDIVQ);
200037e0:	68fb      	ldr	r3, [r7, #12]
200037e2:	4a09      	ldr	r2, [pc, #36]	; (20003808 <RCC_SAIPLLSAIClkDivConfig+0x3c>)
200037e4:	4013      	ands	r3, r2
200037e6:	60fb      	str	r3, [r7, #12]

  /* Set PLLSAIDIVQ values */
  tmpreg |= ((RCC_PLLSAIDivQ - 1) << 8);
200037e8:	687b      	ldr	r3, [r7, #4]
200037ea:	3b01      	subs	r3, #1
200037ec:	021b      	lsls	r3, r3, #8
200037ee:	68fa      	ldr	r2, [r7, #12]
200037f0:	4313      	orrs	r3, r2
200037f2:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
200037f4:	4903      	ldr	r1, [pc, #12]	; (20003804 <RCC_SAIPLLSAIClkDivConfig+0x38>)
200037f6:	228c      	movs	r2, #140	; 0x8c
200037f8:	68fb      	ldr	r3, [r7, #12]
200037fa:	508b      	str	r3, [r1, r2]
}
200037fc:	46c0      	nop			; (mov r8, r8)
200037fe:	46bd      	mov	sp, r7
20003800:	b004      	add	sp, #16
20003802:	bd80      	pop	{r7, pc}
20003804:	40023800 	andmi	r3, r2, r0, lsl #16
20003808:	ffffe0ff 			; <UNDEFINED> instruction: 0xffffe0ff

2000380c <RCC_LTDCCLKDivConfig>:
  *            @arg RCC_PLLSAIDivR_Div16: LTDC clock = f(PLLSAI_R)/16
  *            
  * @retval None
  */
void RCC_LTDCCLKDivConfig(uint32_t RCC_PLLSAIDivR)
{
2000380c:	b580      	push	{r7, lr}
2000380e:	b084      	sub	sp, #16
20003810:	af00      	add	r7, sp, #0
20003812:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20003814:	2300      	movs	r3, #0
20003816:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVR_VALUE(RCC_PLLSAIDivR));
  
  tmpreg = RCC->DCKCFGR;
20003818:	4a09      	ldr	r2, [pc, #36]	; (20003840 <RCC_LTDCCLKDivConfig+0x34>)
2000381a:	238c      	movs	r3, #140	; 0x8c
2000381c:	58d3      	ldr	r3, [r2, r3]
2000381e:	60fb      	str	r3, [r7, #12]

  /* Clear PLLSAIDIVR[2:0] bits */
  tmpreg &= ~RCC_DCKCFGR_PLLSAIDIVR;
20003820:	68fb      	ldr	r3, [r7, #12]
20003822:	4a08      	ldr	r2, [pc, #32]	; (20003844 <RCC_LTDCCLKDivConfig+0x38>)
20003824:	4013      	ands	r3, r2
20003826:	60fb      	str	r3, [r7, #12]

  /* Set PLLSAIDIVR values */
  tmpreg |= RCC_PLLSAIDivR;
20003828:	68fa      	ldr	r2, [r7, #12]
2000382a:	687b      	ldr	r3, [r7, #4]
2000382c:	4313      	orrs	r3, r2
2000382e:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
20003830:	4903      	ldr	r1, [pc, #12]	; (20003840 <RCC_LTDCCLKDivConfig+0x34>)
20003832:	228c      	movs	r2, #140	; 0x8c
20003834:	68fb      	ldr	r3, [r7, #12]
20003836:	508b      	str	r3, [r1, r2]
}
20003838:	46c0      	nop			; (mov r8, r8)
2000383a:	46bd      	mov	sp, r7
2000383c:	b004      	add	sp, #16
2000383e:	bd80      	pop	{r7, pc}
20003840:	40023800 	andmi	r3, r2, r0, lsl #16
20003844:	fffcffff 			; <UNDEFINED> instruction: 0xfffcffff

20003848 <RCC_TIMCLKPresConfig>:
  *                 else it is equal to [(HPRE * PPREx) / 4] if PPREx is corresponding 
  *                 to division by 8 or more.
  * @retval None
  */
void RCC_TIMCLKPresConfig(uint32_t RCC_TIMCLKPrescaler)
{
20003848:	b580      	push	{r7, lr}
2000384a:	b082      	sub	sp, #8
2000384c:	af00      	add	r7, sp, #0
2000384e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_TIMCLK_PRESCALER(RCC_TIMCLKPrescaler));

  *(__IO uint32_t *) DCKCFGR_TIMPRE_BB = RCC_TIMCLKPrescaler;
20003850:	4b03      	ldr	r3, [pc, #12]	; (20003860 <RCC_TIMCLKPresConfig+0x18>)
20003852:	687a      	ldr	r2, [r7, #4]
20003854:	601a      	str	r2, [r3, #0]
}
20003856:	46c0      	nop			; (mov r8, r8)
20003858:	46bd      	mov	sp, r7
2000385a:	b002      	add	sp, #8
2000385c:	bd80      	pop	{r7, pc}
2000385e:	46c0      	nop			; (mov r8, r8)
20003860:	424711e0 	submi	r1, r7, #224, 2	; 0x38

20003864 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
20003864:	b580      	push	{r7, lr}
20003866:	b082      	sub	sp, #8
20003868:	af00      	add	r7, sp, #0
2000386a:	6078      	str	r0, [r7, #4]
2000386c:	000a      	movs	r2, r1
2000386e:	1cfb      	adds	r3, r7, #3
20003870:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20003872:	1cfb      	adds	r3, r7, #3
20003874:	781b      	ldrb	r3, [r3, #0]
20003876:	2b00      	cmp	r3, #0
20003878:	d006      	beq.n	20003888 <RCC_AHB1PeriphClockCmd+0x24>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
2000387a:	4b09      	ldr	r3, [pc, #36]	; (200038a0 <RCC_AHB1PeriphClockCmd+0x3c>)
2000387c:	6b19      	ldr	r1, [r3, #48]	; 0x30
2000387e:	4b08      	ldr	r3, [pc, #32]	; (200038a0 <RCC_AHB1PeriphClockCmd+0x3c>)
20003880:	687a      	ldr	r2, [r7, #4]
20003882:	430a      	orrs	r2, r1
20003884:	631a      	str	r2, [r3, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
20003886:	e006      	b.n	20003896 <RCC_AHB1PeriphClockCmd+0x32>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
20003888:	4b05      	ldr	r3, [pc, #20]	; (200038a0 <RCC_AHB1PeriphClockCmd+0x3c>)
2000388a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
2000388c:	687b      	ldr	r3, [r7, #4]
2000388e:	43d9      	mvns	r1, r3
20003890:	4b03      	ldr	r3, [pc, #12]	; (200038a0 <RCC_AHB1PeriphClockCmd+0x3c>)
20003892:	400a      	ands	r2, r1
20003894:	631a      	str	r2, [r3, #48]	; 0x30
}
20003896:	46c0      	nop			; (mov r8, r8)
20003898:	46bd      	mov	sp, r7
2000389a:	b002      	add	sp, #8
2000389c:	bd80      	pop	{r7, pc}
2000389e:	46c0      	nop			; (mov r8, r8)
200038a0:	40023800 	andmi	r3, r2, r0, lsl #16

200038a4 <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
200038a4:	b580      	push	{r7, lr}
200038a6:	b082      	sub	sp, #8
200038a8:	af00      	add	r7, sp, #0
200038aa:	6078      	str	r0, [r7, #4]
200038ac:	000a      	movs	r2, r1
200038ae:	1cfb      	adds	r3, r7, #3
200038b0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
200038b2:	1cfb      	adds	r3, r7, #3
200038b4:	781b      	ldrb	r3, [r3, #0]
200038b6:	2b00      	cmp	r3, #0
200038b8:	d006      	beq.n	200038c8 <RCC_AHB2PeriphClockCmd+0x24>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
200038ba:	4b09      	ldr	r3, [pc, #36]	; (200038e0 <RCC_AHB2PeriphClockCmd+0x3c>)
200038bc:	6b59      	ldr	r1, [r3, #52]	; 0x34
200038be:	4b08      	ldr	r3, [pc, #32]	; (200038e0 <RCC_AHB2PeriphClockCmd+0x3c>)
200038c0:	687a      	ldr	r2, [r7, #4]
200038c2:	430a      	orrs	r2, r1
200038c4:	635a      	str	r2, [r3, #52]	; 0x34
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
  }
}
200038c6:	e006      	b.n	200038d6 <RCC_AHB2PeriphClockCmd+0x32>
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
200038c8:	4b05      	ldr	r3, [pc, #20]	; (200038e0 <RCC_AHB2PeriphClockCmd+0x3c>)
200038ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
200038cc:	687b      	ldr	r3, [r7, #4]
200038ce:	43d9      	mvns	r1, r3
200038d0:	4b03      	ldr	r3, [pc, #12]	; (200038e0 <RCC_AHB2PeriphClockCmd+0x3c>)
200038d2:	400a      	ands	r2, r1
200038d4:	635a      	str	r2, [r3, #52]	; 0x34
}
200038d6:	46c0      	nop			; (mov r8, r8)
200038d8:	46bd      	mov	sp, r7
200038da:	b002      	add	sp, #8
200038dc:	bd80      	pop	{r7, pc}
200038de:	46c0      	nop			; (mov r8, r8)
200038e0:	40023800 	andmi	r3, r2, r0, lsl #16

200038e4 <RCC_AHB3PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
200038e4:	b580      	push	{r7, lr}
200038e6:	b082      	sub	sp, #8
200038e8:	af00      	add	r7, sp, #0
200038ea:	6078      	str	r0, [r7, #4]
200038ec:	000a      	movs	r2, r1
200038ee:	1cfb      	adds	r3, r7, #3
200038f0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
200038f2:	1cfb      	adds	r3, r7, #3
200038f4:	781b      	ldrb	r3, [r3, #0]
200038f6:	2b00      	cmp	r3, #0
200038f8:	d006      	beq.n	20003908 <RCC_AHB3PeriphClockCmd+0x24>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
200038fa:	4b09      	ldr	r3, [pc, #36]	; (20003920 <RCC_AHB3PeriphClockCmd+0x3c>)
200038fc:	6b99      	ldr	r1, [r3, #56]	; 0x38
200038fe:	4b08      	ldr	r3, [pc, #32]	; (20003920 <RCC_AHB3PeriphClockCmd+0x3c>)
20003900:	687a      	ldr	r2, [r7, #4]
20003902:	430a      	orrs	r2, r1
20003904:	639a      	str	r2, [r3, #56]	; 0x38
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
  }
}
20003906:	e006      	b.n	20003916 <RCC_AHB3PeriphClockCmd+0x32>
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
20003908:	4b05      	ldr	r3, [pc, #20]	; (20003920 <RCC_AHB3PeriphClockCmd+0x3c>)
2000390a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
2000390c:	687b      	ldr	r3, [r7, #4]
2000390e:	43d9      	mvns	r1, r3
20003910:	4b03      	ldr	r3, [pc, #12]	; (20003920 <RCC_AHB3PeriphClockCmd+0x3c>)
20003912:	400a      	ands	r2, r1
20003914:	639a      	str	r2, [r3, #56]	; 0x38
}
20003916:	46c0      	nop			; (mov r8, r8)
20003918:	46bd      	mov	sp, r7
2000391a:	b002      	add	sp, #8
2000391c:	bd80      	pop	{r7, pc}
2000391e:	46c0      	nop			; (mov r8, r8)
20003920:	40023800 	andmi	r3, r2, r0, lsl #16

20003924 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
20003924:	b580      	push	{r7, lr}
20003926:	b082      	sub	sp, #8
20003928:	af00      	add	r7, sp, #0
2000392a:	6078      	str	r0, [r7, #4]
2000392c:	000a      	movs	r2, r1
2000392e:	1cfb      	adds	r3, r7, #3
20003930:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20003932:	1cfb      	adds	r3, r7, #3
20003934:	781b      	ldrb	r3, [r3, #0]
20003936:	2b00      	cmp	r3, #0
20003938:	d006      	beq.n	20003948 <RCC_APB1PeriphClockCmd+0x24>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
2000393a:	4b09      	ldr	r3, [pc, #36]	; (20003960 <RCC_APB1PeriphClockCmd+0x3c>)
2000393c:	6c19      	ldr	r1, [r3, #64]	; 0x40
2000393e:	4b08      	ldr	r3, [pc, #32]	; (20003960 <RCC_APB1PeriphClockCmd+0x3c>)
20003940:	687a      	ldr	r2, [r7, #4]
20003942:	430a      	orrs	r2, r1
20003944:	641a      	str	r2, [r3, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
20003946:	e006      	b.n	20003956 <RCC_APB1PeriphClockCmd+0x32>
    RCC->APB1ENR &= ~RCC_APB1Periph;
20003948:	4b05      	ldr	r3, [pc, #20]	; (20003960 <RCC_APB1PeriphClockCmd+0x3c>)
2000394a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
2000394c:	687b      	ldr	r3, [r7, #4]
2000394e:	43d9      	mvns	r1, r3
20003950:	4b03      	ldr	r3, [pc, #12]	; (20003960 <RCC_APB1PeriphClockCmd+0x3c>)
20003952:	400a      	ands	r2, r1
20003954:	641a      	str	r2, [r3, #64]	; 0x40
}
20003956:	46c0      	nop			; (mov r8, r8)
20003958:	46bd      	mov	sp, r7
2000395a:	b002      	add	sp, #8
2000395c:	bd80      	pop	{r7, pc}
2000395e:	46c0      	nop			; (mov r8, r8)
20003960:	40023800 	andmi	r3, r2, r0, lsl #16

20003964 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
20003964:	b580      	push	{r7, lr}
20003966:	b082      	sub	sp, #8
20003968:	af00      	add	r7, sp, #0
2000396a:	6078      	str	r0, [r7, #4]
2000396c:	000a      	movs	r2, r1
2000396e:	1cfb      	adds	r3, r7, #3
20003970:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20003972:	1cfb      	adds	r3, r7, #3
20003974:	781b      	ldrb	r3, [r3, #0]
20003976:	2b00      	cmp	r3, #0
20003978:	d006      	beq.n	20003988 <RCC_APB2PeriphClockCmd+0x24>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
2000397a:	4b09      	ldr	r3, [pc, #36]	; (200039a0 <RCC_APB2PeriphClockCmd+0x3c>)
2000397c:	6c59      	ldr	r1, [r3, #68]	; 0x44
2000397e:	4b08      	ldr	r3, [pc, #32]	; (200039a0 <RCC_APB2PeriphClockCmd+0x3c>)
20003980:	687a      	ldr	r2, [r7, #4]
20003982:	430a      	orrs	r2, r1
20003984:	645a      	str	r2, [r3, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
20003986:	e006      	b.n	20003996 <RCC_APB2PeriphClockCmd+0x32>
    RCC->APB2ENR &= ~RCC_APB2Periph;
20003988:	4b05      	ldr	r3, [pc, #20]	; (200039a0 <RCC_APB2PeriphClockCmd+0x3c>)
2000398a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
2000398c:	687b      	ldr	r3, [r7, #4]
2000398e:	43d9      	mvns	r1, r3
20003990:	4b03      	ldr	r3, [pc, #12]	; (200039a0 <RCC_APB2PeriphClockCmd+0x3c>)
20003992:	400a      	ands	r2, r1
20003994:	645a      	str	r2, [r3, #68]	; 0x44
}
20003996:	46c0      	nop			; (mov r8, r8)
20003998:	46bd      	mov	sp, r7
2000399a:	b002      	add	sp, #8
2000399c:	bd80      	pop	{r7, pc}
2000399e:	46c0      	nop			; (mov r8, r8)
200039a0:	40023800 	andmi	r3, r2, r0, lsl #16

200039a4 <RCC_AHB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
200039a4:	b580      	push	{r7, lr}
200039a6:	b082      	sub	sp, #8
200039a8:	af00      	add	r7, sp, #0
200039aa:	6078      	str	r0, [r7, #4]
200039ac:	000a      	movs	r2, r1
200039ae:	1cfb      	adds	r3, r7, #3
200039b0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
200039b2:	1cfb      	adds	r3, r7, #3
200039b4:	781b      	ldrb	r3, [r3, #0]
200039b6:	2b00      	cmp	r3, #0
200039b8:	d006      	beq.n	200039c8 <RCC_AHB1PeriphResetCmd+0x24>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
200039ba:	4b09      	ldr	r3, [pc, #36]	; (200039e0 <RCC_AHB1PeriphResetCmd+0x3c>)
200039bc:	6919      	ldr	r1, [r3, #16]
200039be:	4b08      	ldr	r3, [pc, #32]	; (200039e0 <RCC_AHB1PeriphResetCmd+0x3c>)
200039c0:	687a      	ldr	r2, [r7, #4]
200039c2:	430a      	orrs	r2, r1
200039c4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
  }
}
200039c6:	e006      	b.n	200039d6 <RCC_AHB1PeriphResetCmd+0x32>
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
200039c8:	4b05      	ldr	r3, [pc, #20]	; (200039e0 <RCC_AHB1PeriphResetCmd+0x3c>)
200039ca:	691a      	ldr	r2, [r3, #16]
200039cc:	687b      	ldr	r3, [r7, #4]
200039ce:	43d9      	mvns	r1, r3
200039d0:	4b03      	ldr	r3, [pc, #12]	; (200039e0 <RCC_AHB1PeriphResetCmd+0x3c>)
200039d2:	400a      	ands	r2, r1
200039d4:	611a      	str	r2, [r3, #16]
}
200039d6:	46c0      	nop			; (mov r8, r8)
200039d8:	46bd      	mov	sp, r7
200039da:	b002      	add	sp, #8
200039dc:	bd80      	pop	{r7, pc}
200039de:	46c0      	nop			; (mov r8, r8)
200039e0:	40023800 	andmi	r3, r2, r0, lsl #16

200039e4 <RCC_AHB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
200039e4:	b580      	push	{r7, lr}
200039e6:	b082      	sub	sp, #8
200039e8:	af00      	add	r7, sp, #0
200039ea:	6078      	str	r0, [r7, #4]
200039ec:	000a      	movs	r2, r1
200039ee:	1cfb      	adds	r3, r7, #3
200039f0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
200039f2:	1cfb      	adds	r3, r7, #3
200039f4:	781b      	ldrb	r3, [r3, #0]
200039f6:	2b00      	cmp	r3, #0
200039f8:	d006      	beq.n	20003a08 <RCC_AHB2PeriphResetCmd+0x24>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
200039fa:	4b09      	ldr	r3, [pc, #36]	; (20003a20 <RCC_AHB2PeriphResetCmd+0x3c>)
200039fc:	6959      	ldr	r1, [r3, #20]
200039fe:	4b08      	ldr	r3, [pc, #32]	; (20003a20 <RCC_AHB2PeriphResetCmd+0x3c>)
20003a00:	687a      	ldr	r2, [r7, #4]
20003a02:	430a      	orrs	r2, r1
20003a04:	615a      	str	r2, [r3, #20]
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
  }
}
20003a06:	e006      	b.n	20003a16 <RCC_AHB2PeriphResetCmd+0x32>
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
20003a08:	4b05      	ldr	r3, [pc, #20]	; (20003a20 <RCC_AHB2PeriphResetCmd+0x3c>)
20003a0a:	695a      	ldr	r2, [r3, #20]
20003a0c:	687b      	ldr	r3, [r7, #4]
20003a0e:	43d9      	mvns	r1, r3
20003a10:	4b03      	ldr	r3, [pc, #12]	; (20003a20 <RCC_AHB2PeriphResetCmd+0x3c>)
20003a12:	400a      	ands	r2, r1
20003a14:	615a      	str	r2, [r3, #20]
}
20003a16:	46c0      	nop			; (mov r8, r8)
20003a18:	46bd      	mov	sp, r7
20003a1a:	b002      	add	sp, #8
20003a1c:	bd80      	pop	{r7, pc}
20003a1e:	46c0      	nop			; (mov r8, r8)
20003a20:	40023800 	andmi	r3, r2, r0, lsl #16

20003a24 <RCC_AHB3PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
20003a24:	b580      	push	{r7, lr}
20003a26:	b082      	sub	sp, #8
20003a28:	af00      	add	r7, sp, #0
20003a2a:	6078      	str	r0, [r7, #4]
20003a2c:	000a      	movs	r2, r1
20003a2e:	1cfb      	adds	r3, r7, #3
20003a30:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20003a32:	1cfb      	adds	r3, r7, #3
20003a34:	781b      	ldrb	r3, [r3, #0]
20003a36:	2b00      	cmp	r3, #0
20003a38:	d006      	beq.n	20003a48 <RCC_AHB3PeriphResetCmd+0x24>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
20003a3a:	4b09      	ldr	r3, [pc, #36]	; (20003a60 <RCC_AHB3PeriphResetCmd+0x3c>)
20003a3c:	6999      	ldr	r1, [r3, #24]
20003a3e:	4b08      	ldr	r3, [pc, #32]	; (20003a60 <RCC_AHB3PeriphResetCmd+0x3c>)
20003a40:	687a      	ldr	r2, [r7, #4]
20003a42:	430a      	orrs	r2, r1
20003a44:	619a      	str	r2, [r3, #24]
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
  }
}
20003a46:	e006      	b.n	20003a56 <RCC_AHB3PeriphResetCmd+0x32>
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
20003a48:	4b05      	ldr	r3, [pc, #20]	; (20003a60 <RCC_AHB3PeriphResetCmd+0x3c>)
20003a4a:	699a      	ldr	r2, [r3, #24]
20003a4c:	687b      	ldr	r3, [r7, #4]
20003a4e:	43d9      	mvns	r1, r3
20003a50:	4b03      	ldr	r3, [pc, #12]	; (20003a60 <RCC_AHB3PeriphResetCmd+0x3c>)
20003a52:	400a      	ands	r2, r1
20003a54:	619a      	str	r2, [r3, #24]
}
20003a56:	46c0      	nop			; (mov r8, r8)
20003a58:	46bd      	mov	sp, r7
20003a5a:	b002      	add	sp, #8
20003a5c:	bd80      	pop	{r7, pc}
20003a5e:	46c0      	nop			; (mov r8, r8)
20003a60:	40023800 	andmi	r3, r2, r0, lsl #16

20003a64 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
20003a64:	b580      	push	{r7, lr}
20003a66:	b082      	sub	sp, #8
20003a68:	af00      	add	r7, sp, #0
20003a6a:	6078      	str	r0, [r7, #4]
20003a6c:	000a      	movs	r2, r1
20003a6e:	1cfb      	adds	r3, r7, #3
20003a70:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20003a72:	1cfb      	adds	r3, r7, #3
20003a74:	781b      	ldrb	r3, [r3, #0]
20003a76:	2b00      	cmp	r3, #0
20003a78:	d006      	beq.n	20003a88 <RCC_APB1PeriphResetCmd+0x24>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
20003a7a:	4b09      	ldr	r3, [pc, #36]	; (20003aa0 <RCC_APB1PeriphResetCmd+0x3c>)
20003a7c:	6a19      	ldr	r1, [r3, #32]
20003a7e:	4b08      	ldr	r3, [pc, #32]	; (20003aa0 <RCC_APB1PeriphResetCmd+0x3c>)
20003a80:	687a      	ldr	r2, [r7, #4]
20003a82:	430a      	orrs	r2, r1
20003a84:	621a      	str	r2, [r3, #32]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
20003a86:	e006      	b.n	20003a96 <RCC_APB1PeriphResetCmd+0x32>
    RCC->APB1RSTR &= ~RCC_APB1Periph;
20003a88:	4b05      	ldr	r3, [pc, #20]	; (20003aa0 <RCC_APB1PeriphResetCmd+0x3c>)
20003a8a:	6a1a      	ldr	r2, [r3, #32]
20003a8c:	687b      	ldr	r3, [r7, #4]
20003a8e:	43d9      	mvns	r1, r3
20003a90:	4b03      	ldr	r3, [pc, #12]	; (20003aa0 <RCC_APB1PeriphResetCmd+0x3c>)
20003a92:	400a      	ands	r2, r1
20003a94:	621a      	str	r2, [r3, #32]
}
20003a96:	46c0      	nop			; (mov r8, r8)
20003a98:	46bd      	mov	sp, r7
20003a9a:	b002      	add	sp, #8
20003a9c:	bd80      	pop	{r7, pc}
20003a9e:	46c0      	nop			; (mov r8, r8)
20003aa0:	40023800 	andmi	r3, r2, r0, lsl #16

20003aa4 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
20003aa4:	b580      	push	{r7, lr}
20003aa6:	b082      	sub	sp, #8
20003aa8:	af00      	add	r7, sp, #0
20003aaa:	6078      	str	r0, [r7, #4]
20003aac:	000a      	movs	r2, r1
20003aae:	1cfb      	adds	r3, r7, #3
20003ab0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20003ab2:	1cfb      	adds	r3, r7, #3
20003ab4:	781b      	ldrb	r3, [r3, #0]
20003ab6:	2b00      	cmp	r3, #0
20003ab8:	d006      	beq.n	20003ac8 <RCC_APB2PeriphResetCmd+0x24>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
20003aba:	4b09      	ldr	r3, [pc, #36]	; (20003ae0 <RCC_APB2PeriphResetCmd+0x3c>)
20003abc:	6a59      	ldr	r1, [r3, #36]	; 0x24
20003abe:	4b08      	ldr	r3, [pc, #32]	; (20003ae0 <RCC_APB2PeriphResetCmd+0x3c>)
20003ac0:	687a      	ldr	r2, [r7, #4]
20003ac2:	430a      	orrs	r2, r1
20003ac4:	625a      	str	r2, [r3, #36]	; 0x24
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
20003ac6:	e006      	b.n	20003ad6 <RCC_APB2PeriphResetCmd+0x32>
    RCC->APB2RSTR &= ~RCC_APB2Periph;
20003ac8:	4b05      	ldr	r3, [pc, #20]	; (20003ae0 <RCC_APB2PeriphResetCmd+0x3c>)
20003aca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
20003acc:	687b      	ldr	r3, [r7, #4]
20003ace:	43d9      	mvns	r1, r3
20003ad0:	4b03      	ldr	r3, [pc, #12]	; (20003ae0 <RCC_APB2PeriphResetCmd+0x3c>)
20003ad2:	400a      	ands	r2, r1
20003ad4:	625a      	str	r2, [r3, #36]	; 0x24
}
20003ad6:	46c0      	nop			; (mov r8, r8)
20003ad8:	46bd      	mov	sp, r7
20003ada:	b002      	add	sp, #8
20003adc:	bd80      	pop	{r7, pc}
20003ade:	46c0      	nop			; (mov r8, r8)
20003ae0:	40023800 	andmi	r3, r2, r0, lsl #16

20003ae4 <RCC_AHB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
20003ae4:	b580      	push	{r7, lr}
20003ae6:	b082      	sub	sp, #8
20003ae8:	af00      	add	r7, sp, #0
20003aea:	6078      	str	r0, [r7, #4]
20003aec:	000a      	movs	r2, r1
20003aee:	1cfb      	adds	r3, r7, #3
20003af0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20003af2:	1cfb      	adds	r3, r7, #3
20003af4:	781b      	ldrb	r3, [r3, #0]
20003af6:	2b00      	cmp	r3, #0
20003af8:	d006      	beq.n	20003b08 <RCC_AHB1PeriphClockLPModeCmd+0x24>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
20003afa:	4b09      	ldr	r3, [pc, #36]	; (20003b20 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
20003afc:	6d19      	ldr	r1, [r3, #80]	; 0x50
20003afe:	4b08      	ldr	r3, [pc, #32]	; (20003b20 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
20003b00:	687a      	ldr	r2, [r7, #4]
20003b02:	430a      	orrs	r2, r1
20003b04:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
  }
}
20003b06:	e006      	b.n	20003b16 <RCC_AHB1PeriphClockLPModeCmd+0x32>
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
20003b08:	4b05      	ldr	r3, [pc, #20]	; (20003b20 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
20003b0a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
20003b0c:	687b      	ldr	r3, [r7, #4]
20003b0e:	43d9      	mvns	r1, r3
20003b10:	4b03      	ldr	r3, [pc, #12]	; (20003b20 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
20003b12:	400a      	ands	r2, r1
20003b14:	651a      	str	r2, [r3, #80]	; 0x50
}
20003b16:	46c0      	nop			; (mov r8, r8)
20003b18:	46bd      	mov	sp, r7
20003b1a:	b002      	add	sp, #8
20003b1c:	bd80      	pop	{r7, pc}
20003b1e:	46c0      	nop			; (mov r8, r8)
20003b20:	40023800 	andmi	r3, r2, r0, lsl #16

20003b24 <RCC_AHB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
20003b24:	b580      	push	{r7, lr}
20003b26:	b082      	sub	sp, #8
20003b28:	af00      	add	r7, sp, #0
20003b2a:	6078      	str	r0, [r7, #4]
20003b2c:	000a      	movs	r2, r1
20003b2e:	1cfb      	adds	r3, r7, #3
20003b30:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20003b32:	1cfb      	adds	r3, r7, #3
20003b34:	781b      	ldrb	r3, [r3, #0]
20003b36:	2b00      	cmp	r3, #0
20003b38:	d006      	beq.n	20003b48 <RCC_AHB2PeriphClockLPModeCmd+0x24>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
20003b3a:	4b09      	ldr	r3, [pc, #36]	; (20003b60 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
20003b3c:	6d59      	ldr	r1, [r3, #84]	; 0x54
20003b3e:	4b08      	ldr	r3, [pc, #32]	; (20003b60 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
20003b40:	687a      	ldr	r2, [r7, #4]
20003b42:	430a      	orrs	r2, r1
20003b44:	655a      	str	r2, [r3, #84]	; 0x54
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
  }
}
20003b46:	e006      	b.n	20003b56 <RCC_AHB2PeriphClockLPModeCmd+0x32>
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
20003b48:	4b05      	ldr	r3, [pc, #20]	; (20003b60 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
20003b4a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
20003b4c:	687b      	ldr	r3, [r7, #4]
20003b4e:	43d9      	mvns	r1, r3
20003b50:	4b03      	ldr	r3, [pc, #12]	; (20003b60 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
20003b52:	400a      	ands	r2, r1
20003b54:	655a      	str	r2, [r3, #84]	; 0x54
}
20003b56:	46c0      	nop			; (mov r8, r8)
20003b58:	46bd      	mov	sp, r7
20003b5a:	b002      	add	sp, #8
20003b5c:	bd80      	pop	{r7, pc}
20003b5e:	46c0      	nop			; (mov r8, r8)
20003b60:	40023800 	andmi	r3, r2, r0, lsl #16

20003b64 <RCC_AHB3PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
20003b64:	b580      	push	{r7, lr}
20003b66:	b082      	sub	sp, #8
20003b68:	af00      	add	r7, sp, #0
20003b6a:	6078      	str	r0, [r7, #4]
20003b6c:	000a      	movs	r2, r1
20003b6e:	1cfb      	adds	r3, r7, #3
20003b70:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20003b72:	1cfb      	adds	r3, r7, #3
20003b74:	781b      	ldrb	r3, [r3, #0]
20003b76:	2b00      	cmp	r3, #0
20003b78:	d006      	beq.n	20003b88 <RCC_AHB3PeriphClockLPModeCmd+0x24>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
20003b7a:	4b09      	ldr	r3, [pc, #36]	; (20003ba0 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
20003b7c:	6d99      	ldr	r1, [r3, #88]	; 0x58
20003b7e:	4b08      	ldr	r3, [pc, #32]	; (20003ba0 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
20003b80:	687a      	ldr	r2, [r7, #4]
20003b82:	430a      	orrs	r2, r1
20003b84:	659a      	str	r2, [r3, #88]	; 0x58
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
  }
}
20003b86:	e006      	b.n	20003b96 <RCC_AHB3PeriphClockLPModeCmd+0x32>
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
20003b88:	4b05      	ldr	r3, [pc, #20]	; (20003ba0 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
20003b8a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
20003b8c:	687b      	ldr	r3, [r7, #4]
20003b8e:	43d9      	mvns	r1, r3
20003b90:	4b03      	ldr	r3, [pc, #12]	; (20003ba0 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
20003b92:	400a      	ands	r2, r1
20003b94:	659a      	str	r2, [r3, #88]	; 0x58
}
20003b96:	46c0      	nop			; (mov r8, r8)
20003b98:	46bd      	mov	sp, r7
20003b9a:	b002      	add	sp, #8
20003b9c:	bd80      	pop	{r7, pc}
20003b9e:	46c0      	nop			; (mov r8, r8)
20003ba0:	40023800 	andmi	r3, r2, r0, lsl #16

20003ba4 <RCC_APB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
20003ba4:	b580      	push	{r7, lr}
20003ba6:	b082      	sub	sp, #8
20003ba8:	af00      	add	r7, sp, #0
20003baa:	6078      	str	r0, [r7, #4]
20003bac:	000a      	movs	r2, r1
20003bae:	1cfb      	adds	r3, r7, #3
20003bb0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20003bb2:	1cfb      	adds	r3, r7, #3
20003bb4:	781b      	ldrb	r3, [r3, #0]
20003bb6:	2b00      	cmp	r3, #0
20003bb8:	d006      	beq.n	20003bc8 <RCC_APB1PeriphClockLPModeCmd+0x24>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
20003bba:	4b09      	ldr	r3, [pc, #36]	; (20003be0 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
20003bbc:	6e19      	ldr	r1, [r3, #96]	; 0x60
20003bbe:	4b08      	ldr	r3, [pc, #32]	; (20003be0 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
20003bc0:	687a      	ldr	r2, [r7, #4]
20003bc2:	430a      	orrs	r2, r1
20003bc4:	661a      	str	r2, [r3, #96]	; 0x60
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
  }
}
20003bc6:	e006      	b.n	20003bd6 <RCC_APB1PeriphClockLPModeCmd+0x32>
    RCC->APB1LPENR &= ~RCC_APB1Periph;
20003bc8:	4b05      	ldr	r3, [pc, #20]	; (20003be0 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
20003bca:	6e1a      	ldr	r2, [r3, #96]	; 0x60
20003bcc:	687b      	ldr	r3, [r7, #4]
20003bce:	43d9      	mvns	r1, r3
20003bd0:	4b03      	ldr	r3, [pc, #12]	; (20003be0 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
20003bd2:	400a      	ands	r2, r1
20003bd4:	661a      	str	r2, [r3, #96]	; 0x60
}
20003bd6:	46c0      	nop			; (mov r8, r8)
20003bd8:	46bd      	mov	sp, r7
20003bda:	b002      	add	sp, #8
20003bdc:	bd80      	pop	{r7, pc}
20003bde:	46c0      	nop			; (mov r8, r8)
20003be0:	40023800 	andmi	r3, r2, r0, lsl #16

20003be4 <RCC_APB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
20003be4:	b580      	push	{r7, lr}
20003be6:	b082      	sub	sp, #8
20003be8:	af00      	add	r7, sp, #0
20003bea:	6078      	str	r0, [r7, #4]
20003bec:	000a      	movs	r2, r1
20003bee:	1cfb      	adds	r3, r7, #3
20003bf0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20003bf2:	1cfb      	adds	r3, r7, #3
20003bf4:	781b      	ldrb	r3, [r3, #0]
20003bf6:	2b00      	cmp	r3, #0
20003bf8:	d006      	beq.n	20003c08 <RCC_APB2PeriphClockLPModeCmd+0x24>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
20003bfa:	4b09      	ldr	r3, [pc, #36]	; (20003c20 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
20003bfc:	6e59      	ldr	r1, [r3, #100]	; 0x64
20003bfe:	4b08      	ldr	r3, [pc, #32]	; (20003c20 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
20003c00:	687a      	ldr	r2, [r7, #4]
20003c02:	430a      	orrs	r2, r1
20003c04:	665a      	str	r2, [r3, #100]	; 0x64
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
  }
}
20003c06:	e006      	b.n	20003c16 <RCC_APB2PeriphClockLPModeCmd+0x32>
    RCC->APB2LPENR &= ~RCC_APB2Periph;
20003c08:	4b05      	ldr	r3, [pc, #20]	; (20003c20 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
20003c0a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
20003c0c:	687b      	ldr	r3, [r7, #4]
20003c0e:	43d9      	mvns	r1, r3
20003c10:	4b03      	ldr	r3, [pc, #12]	; (20003c20 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
20003c12:	400a      	ands	r2, r1
20003c14:	665a      	str	r2, [r3, #100]	; 0x64
}
20003c16:	46c0      	nop			; (mov r8, r8)
20003c18:	46bd      	mov	sp, r7
20003c1a:	b002      	add	sp, #8
20003c1c:	bd80      	pop	{r7, pc}
20003c1e:	46c0      	nop			; (mov r8, r8)
20003c20:	40023800 	andmi	r3, r2, r0, lsl #16

20003c24 <RCC_LSEModeConfig>:
  *            @arg RCC_LSE_LOWPOWER_MODE:  LSE oscillator in low power mode.
  *            @arg RCC_LSE_HIGHDRIVE_MODE: LSE oscillator in High Drive mode.
  * @retval None
  */
void RCC_LSEModeConfig(uint8_t RCC_Mode)
{
20003c24:	b580      	push	{r7, lr}
20003c26:	b082      	sub	sp, #8
20003c28:	af00      	add	r7, sp, #0
20003c2a:	0002      	movs	r2, r0
20003c2c:	1dfb      	adds	r3, r7, #7
20003c2e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_LSE_MODE(RCC_Mode));
  
  if(RCC_Mode == RCC_LSE_HIGHDRIVE_MODE)
20003c30:	1dfb      	adds	r3, r7, #7
20003c32:	781b      	ldrb	r3, [r3, #0]
20003c34:	2b01      	cmp	r3, #1
20003c36:	d106      	bne.n	20003c46 <RCC_LSEModeConfig+0x22>
  {
    SET_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
20003c38:	4b08      	ldr	r3, [pc, #32]	; (20003c5c <RCC_LSEModeConfig+0x38>)
20003c3a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
20003c3c:	4b07      	ldr	r3, [pc, #28]	; (20003c5c <RCC_LSEModeConfig+0x38>)
20003c3e:	2108      	movs	r1, #8
20003c40:	430a      	orrs	r2, r1
20003c42:	671a      	str	r2, [r3, #112]	; 0x70
  }
  else
  {
    CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
  }
}
20003c44:	e005      	b.n	20003c52 <RCC_LSEModeConfig+0x2e>
    CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
20003c46:	4b05      	ldr	r3, [pc, #20]	; (20003c5c <RCC_LSEModeConfig+0x38>)
20003c48:	6f1a      	ldr	r2, [r3, #112]	; 0x70
20003c4a:	4b04      	ldr	r3, [pc, #16]	; (20003c5c <RCC_LSEModeConfig+0x38>)
20003c4c:	2108      	movs	r1, #8
20003c4e:	438a      	bics	r2, r1
20003c50:	671a      	str	r2, [r3, #112]	; 0x70
}
20003c52:	46c0      	nop			; (mov r8, r8)
20003c54:	46bd      	mov	sp, r7
20003c56:	b002      	add	sp, #8
20003c58:	bd80      	pop	{r7, pc}
20003c5a:	46c0      	nop			; (mov r8, r8)
20003c5c:	40023800 	andmi	r3, r2, r0, lsl #16

20003c60 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
20003c60:	b580      	push	{r7, lr}
20003c62:	b082      	sub	sp, #8
20003c64:	af00      	add	r7, sp, #0
20003c66:	0002      	movs	r2, r0
20003c68:	1dfb      	adds	r3, r7, #7
20003c6a:	701a      	strb	r2, [r3, #0]
20003c6c:	1dbb      	adds	r3, r7, #6
20003c6e:	1c0a      	adds	r2, r1, #0
20003c70:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20003c72:	1dbb      	adds	r3, r7, #6
20003c74:	781b      	ldrb	r3, [r3, #0]
20003c76:	2b00      	cmp	r3, #0
20003c78:	d009      	beq.n	20003c8e <RCC_ITConfig+0x2e>
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
20003c7a:	4b0c      	ldr	r3, [pc, #48]	; (20003cac <RCC_ITConfig+0x4c>)
20003c7c:	781b      	ldrb	r3, [r3, #0]
20003c7e:	b2da      	uxtb	r2, r3
20003c80:	490a      	ldr	r1, [pc, #40]	; (20003cac <RCC_ITConfig+0x4c>)
20003c82:	1dfb      	adds	r3, r7, #7
20003c84:	781b      	ldrb	r3, [r3, #0]
20003c86:	4313      	orrs	r3, r2
20003c88:	b2db      	uxtb	r3, r3
20003c8a:	700b      	strb	r3, [r1, #0]
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
  }
}
20003c8c:	e00a      	b.n	20003ca4 <RCC_ITConfig+0x44>
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
20003c8e:	4b07      	ldr	r3, [pc, #28]	; (20003cac <RCC_ITConfig+0x4c>)
20003c90:	781b      	ldrb	r3, [r3, #0]
20003c92:	b2db      	uxtb	r3, r3
20003c94:	1dfa      	adds	r2, r7, #7
20003c96:	7812      	ldrb	r2, [r2, #0]
20003c98:	43d2      	mvns	r2, r2
20003c9a:	b2d2      	uxtb	r2, r2
20003c9c:	4903      	ldr	r1, [pc, #12]	; (20003cac <RCC_ITConfig+0x4c>)
20003c9e:	4013      	ands	r3, r2
20003ca0:	b2db      	uxtb	r3, r3
20003ca2:	700b      	strb	r3, [r1, #0]
}
20003ca4:	46c0      	nop			; (mov r8, r8)
20003ca6:	46bd      	mov	sp, r7
20003ca8:	b002      	add	sp, #8
20003caa:	bd80      	pop	{r7, pc}
20003cac:	4002380d 	andmi	r3, r2, sp, lsl #16

20003cb0 <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
20003cb0:	b580      	push	{r7, lr}
20003cb2:	b086      	sub	sp, #24
20003cb4:	af00      	add	r7, sp, #0
20003cb6:	0002      	movs	r2, r0
20003cb8:	1dfb      	adds	r3, r7, #7
20003cba:	701a      	strb	r2, [r3, #0]
  uint32_t tmp = 0;
20003cbc:	2300      	movs	r3, #0
20003cbe:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
20003cc0:	2300      	movs	r3, #0
20003cc2:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
20003cc4:	2313      	movs	r3, #19
20003cc6:	18fb      	adds	r3, r7, r3
20003cc8:	2200      	movs	r2, #0
20003cca:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
20003ccc:	1dfb      	adds	r3, r7, #7
20003cce:	781b      	ldrb	r3, [r3, #0]
20003cd0:	095b      	lsrs	r3, r3, #5
20003cd2:	b2db      	uxtb	r3, r3
20003cd4:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
20003cd6:	68fb      	ldr	r3, [r7, #12]
20003cd8:	2b01      	cmp	r3, #1
20003cda:	d103      	bne.n	20003ce4 <RCC_GetFlagStatus+0x34>
  {
    statusreg = RCC->CR;
20003cdc:	4b14      	ldr	r3, [pc, #80]	; (20003d30 <RCC_GetFlagStatus+0x80>)
20003cde:	681b      	ldr	r3, [r3, #0]
20003ce0:	617b      	str	r3, [r7, #20]
20003ce2:	e009      	b.n	20003cf8 <RCC_GetFlagStatus+0x48>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
20003ce4:	68fb      	ldr	r3, [r7, #12]
20003ce6:	2b02      	cmp	r3, #2
20003ce8:	d103      	bne.n	20003cf2 <RCC_GetFlagStatus+0x42>
  {
    statusreg = RCC->BDCR;
20003cea:	4b11      	ldr	r3, [pc, #68]	; (20003d30 <RCC_GetFlagStatus+0x80>)
20003cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
20003cee:	617b      	str	r3, [r7, #20]
20003cf0:	e002      	b.n	20003cf8 <RCC_GetFlagStatus+0x48>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
20003cf2:	4b0f      	ldr	r3, [pc, #60]	; (20003d30 <RCC_GetFlagStatus+0x80>)
20003cf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
20003cf6:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
20003cf8:	1dfb      	adds	r3, r7, #7
20003cfa:	781b      	ldrb	r3, [r3, #0]
20003cfc:	221f      	movs	r2, #31
20003cfe:	4013      	ands	r3, r2
20003d00:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
20003d02:	697a      	ldr	r2, [r7, #20]
20003d04:	68fb      	ldr	r3, [r7, #12]
20003d06:	40da      	lsrs	r2, r3
20003d08:	0013      	movs	r3, r2
20003d0a:	2201      	movs	r2, #1
20003d0c:	4013      	ands	r3, r2
20003d0e:	d004      	beq.n	20003d1a <RCC_GetFlagStatus+0x6a>
  {
    bitstatus = SET;
20003d10:	2313      	movs	r3, #19
20003d12:	18fb      	adds	r3, r7, r3
20003d14:	2201      	movs	r2, #1
20003d16:	701a      	strb	r2, [r3, #0]
20003d18:	e003      	b.n	20003d22 <RCC_GetFlagStatus+0x72>
  }
  else
  {
    bitstatus = RESET;
20003d1a:	2313      	movs	r3, #19
20003d1c:	18fb      	adds	r3, r7, r3
20003d1e:	2200      	movs	r2, #0
20003d20:	701a      	strb	r2, [r3, #0]
  }
  /* Return the flag status */
  return bitstatus;
20003d22:	2313      	movs	r3, #19
20003d24:	18fb      	adds	r3, r7, r3
20003d26:	781b      	ldrb	r3, [r3, #0]
}
20003d28:	0018      	movs	r0, r3
20003d2a:	46bd      	mov	sp, r7
20003d2c:	b006      	add	sp, #24
20003d2e:	bd80      	pop	{r7, pc}
20003d30:	40023800 	andmi	r3, r2, r0, lsl #16

20003d34 <RCC_ClearFlag>:
  *         RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
20003d34:	b580      	push	{r7, lr}
20003d36:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
20003d38:	4b04      	ldr	r3, [pc, #16]	; (20003d4c <RCC_ClearFlag+0x18>)
20003d3a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
20003d3c:	4b03      	ldr	r3, [pc, #12]	; (20003d4c <RCC_ClearFlag+0x18>)
20003d3e:	2180      	movs	r1, #128	; 0x80
20003d40:	0449      	lsls	r1, r1, #17
20003d42:	430a      	orrs	r2, r1
20003d44:	675a      	str	r2, [r3, #116]	; 0x74
}
20003d46:	46c0      	nop			; (mov r8, r8)
20003d48:	46bd      	mov	sp, r7
20003d4a:	bd80      	pop	{r7, pc}
20003d4c:	40023800 	andmi	r3, r2, r0, lsl #16

20003d50 <RCC_GetITStatus>:
  *            @arg RCC_IT_PLLSAIRDY: PLLSAI clock ready interrupt (only for STM32F42xxx/43xxx/446xx/469xx/479xx devices)
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
20003d50:	b580      	push	{r7, lr}
20003d52:	b084      	sub	sp, #16
20003d54:	af00      	add	r7, sp, #0
20003d56:	0002      	movs	r2, r0
20003d58:	1dfb      	adds	r3, r7, #7
20003d5a:	701a      	strb	r2, [r3, #0]
  ITStatus bitstatus = RESET;
20003d5c:	210f      	movs	r1, #15
20003d5e:	187b      	adds	r3, r7, r1
20003d60:	2200      	movs	r2, #0
20003d62:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
20003d64:	4b0a      	ldr	r3, [pc, #40]	; (20003d90 <RCC_GetITStatus+0x40>)
20003d66:	68db      	ldr	r3, [r3, #12]
20003d68:	1dfa      	adds	r2, r7, #7
20003d6a:	7812      	ldrb	r2, [r2, #0]
20003d6c:	4013      	ands	r3, r2
20003d6e:	d003      	beq.n	20003d78 <RCC_GetITStatus+0x28>
  {
    bitstatus = SET;
20003d70:	187b      	adds	r3, r7, r1
20003d72:	2201      	movs	r2, #1
20003d74:	701a      	strb	r2, [r3, #0]
20003d76:	e003      	b.n	20003d80 <RCC_GetITStatus+0x30>
  }
  else
  {
    bitstatus = RESET;
20003d78:	230f      	movs	r3, #15
20003d7a:	18fb      	adds	r3, r7, r3
20003d7c:	2200      	movs	r2, #0
20003d7e:	701a      	strb	r2, [r3, #0]
  }
  /* Return the RCC_IT status */
  return  bitstatus;
20003d80:	230f      	movs	r3, #15
20003d82:	18fb      	adds	r3, r7, r3
20003d84:	781b      	ldrb	r3, [r3, #0]
}
20003d86:	0018      	movs	r0, r3
20003d88:	46bd      	mov	sp, r7
20003d8a:	b004      	add	sp, #16
20003d8c:	bd80      	pop	{r7, pc}
20003d8e:	46c0      	nop			; (mov r8, r8)
20003d90:	40023800 	andmi	r3, r2, r0, lsl #16

20003d94 <RCC_ClearITPendingBit>:
  *            @arg RCC_IT_PLLSAIRDY: PLLSAI ready interrupt (only for STM32F42xxx/43xxx/446xx/469xx/479xx devices) 
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
20003d94:	b580      	push	{r7, lr}
20003d96:	b082      	sub	sp, #8
20003d98:	af00      	add	r7, sp, #0
20003d9a:	0002      	movs	r2, r0
20003d9c:	1dfb      	adds	r3, r7, #7
20003d9e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
20003da0:	4a03      	ldr	r2, [pc, #12]	; (20003db0 <RCC_ClearITPendingBit+0x1c>)
20003da2:	1dfb      	adds	r3, r7, #7
20003da4:	781b      	ldrb	r3, [r3, #0]
20003da6:	7013      	strb	r3, [r2, #0]
}
20003da8:	46c0      	nop			; (mov r8, r8)
20003daa:	46bd      	mov	sp, r7
20003dac:	b002      	add	sp, #8
20003dae:	bd80      	pop	{r7, pc}
20003db0:	4002380e 	andmi	r3, r2, lr, lsl #16

20003db4 <__udivsi3>:
20003db4:	2200      	movs	r2, #0
20003db6:	0843      	lsrs	r3, r0, #1
20003db8:	428b      	cmp	r3, r1
20003dba:	d374      	bcc.n	20003ea6 <__udivsi3+0xf2>
20003dbc:	0903      	lsrs	r3, r0, #4
20003dbe:	428b      	cmp	r3, r1
20003dc0:	d35f      	bcc.n	20003e82 <__udivsi3+0xce>
20003dc2:	0a03      	lsrs	r3, r0, #8
20003dc4:	428b      	cmp	r3, r1
20003dc6:	d344      	bcc.n	20003e52 <__udivsi3+0x9e>
20003dc8:	0b03      	lsrs	r3, r0, #12
20003dca:	428b      	cmp	r3, r1
20003dcc:	d328      	bcc.n	20003e20 <__udivsi3+0x6c>
20003dce:	0c03      	lsrs	r3, r0, #16
20003dd0:	428b      	cmp	r3, r1
20003dd2:	d30d      	bcc.n	20003df0 <__udivsi3+0x3c>
20003dd4:	22ff      	movs	r2, #255	; 0xff
20003dd6:	0209      	lsls	r1, r1, #8
20003dd8:	ba12      	rev	r2, r2
20003dda:	0c03      	lsrs	r3, r0, #16
20003ddc:	428b      	cmp	r3, r1
20003dde:	d302      	bcc.n	20003de6 <__udivsi3+0x32>
20003de0:	1212      	asrs	r2, r2, #8
20003de2:	0209      	lsls	r1, r1, #8
20003de4:	d065      	beq.n	20003eb2 <__udivsi3+0xfe>
20003de6:	0b03      	lsrs	r3, r0, #12
20003de8:	428b      	cmp	r3, r1
20003dea:	d319      	bcc.n	20003e20 <__udivsi3+0x6c>
20003dec:	e000      	b.n	20003df0 <__udivsi3+0x3c>
20003dee:	0a09      	lsrs	r1, r1, #8
20003df0:	0bc3      	lsrs	r3, r0, #15
20003df2:	428b      	cmp	r3, r1
20003df4:	d301      	bcc.n	20003dfa <__udivsi3+0x46>
20003df6:	03cb      	lsls	r3, r1, #15
20003df8:	1ac0      	subs	r0, r0, r3
20003dfa:	4152      	adcs	r2, r2
20003dfc:	0b83      	lsrs	r3, r0, #14
20003dfe:	428b      	cmp	r3, r1
20003e00:	d301      	bcc.n	20003e06 <__udivsi3+0x52>
20003e02:	038b      	lsls	r3, r1, #14
20003e04:	1ac0      	subs	r0, r0, r3
20003e06:	4152      	adcs	r2, r2
20003e08:	0b43      	lsrs	r3, r0, #13
20003e0a:	428b      	cmp	r3, r1
20003e0c:	d301      	bcc.n	20003e12 <__udivsi3+0x5e>
20003e0e:	034b      	lsls	r3, r1, #13
20003e10:	1ac0      	subs	r0, r0, r3
20003e12:	4152      	adcs	r2, r2
20003e14:	0b03      	lsrs	r3, r0, #12
20003e16:	428b      	cmp	r3, r1
20003e18:	d301      	bcc.n	20003e1e <__udivsi3+0x6a>
20003e1a:	030b      	lsls	r3, r1, #12
20003e1c:	1ac0      	subs	r0, r0, r3
20003e1e:	4152      	adcs	r2, r2
20003e20:	0ac3      	lsrs	r3, r0, #11
20003e22:	428b      	cmp	r3, r1
20003e24:	d301      	bcc.n	20003e2a <__udivsi3+0x76>
20003e26:	02cb      	lsls	r3, r1, #11
20003e28:	1ac0      	subs	r0, r0, r3
20003e2a:	4152      	adcs	r2, r2
20003e2c:	0a83      	lsrs	r3, r0, #10
20003e2e:	428b      	cmp	r3, r1
20003e30:	d301      	bcc.n	20003e36 <__udivsi3+0x82>
20003e32:	028b      	lsls	r3, r1, #10
20003e34:	1ac0      	subs	r0, r0, r3
20003e36:	4152      	adcs	r2, r2
20003e38:	0a43      	lsrs	r3, r0, #9
20003e3a:	428b      	cmp	r3, r1
20003e3c:	d301      	bcc.n	20003e42 <__udivsi3+0x8e>
20003e3e:	024b      	lsls	r3, r1, #9
20003e40:	1ac0      	subs	r0, r0, r3
20003e42:	4152      	adcs	r2, r2
20003e44:	0a03      	lsrs	r3, r0, #8
20003e46:	428b      	cmp	r3, r1
20003e48:	d301      	bcc.n	20003e4e <__udivsi3+0x9a>
20003e4a:	020b      	lsls	r3, r1, #8
20003e4c:	1ac0      	subs	r0, r0, r3
20003e4e:	4152      	adcs	r2, r2
20003e50:	d2cd      	bcs.n	20003dee <__udivsi3+0x3a>
20003e52:	09c3      	lsrs	r3, r0, #7
20003e54:	428b      	cmp	r3, r1
20003e56:	d301      	bcc.n	20003e5c <__udivsi3+0xa8>
20003e58:	01cb      	lsls	r3, r1, #7
20003e5a:	1ac0      	subs	r0, r0, r3
20003e5c:	4152      	adcs	r2, r2
20003e5e:	0983      	lsrs	r3, r0, #6
20003e60:	428b      	cmp	r3, r1
20003e62:	d301      	bcc.n	20003e68 <__udivsi3+0xb4>
20003e64:	018b      	lsls	r3, r1, #6
20003e66:	1ac0      	subs	r0, r0, r3
20003e68:	4152      	adcs	r2, r2
20003e6a:	0943      	lsrs	r3, r0, #5
20003e6c:	428b      	cmp	r3, r1
20003e6e:	d301      	bcc.n	20003e74 <__udivsi3+0xc0>
20003e70:	014b      	lsls	r3, r1, #5
20003e72:	1ac0      	subs	r0, r0, r3
20003e74:	4152      	adcs	r2, r2
20003e76:	0903      	lsrs	r3, r0, #4
20003e78:	428b      	cmp	r3, r1
20003e7a:	d301      	bcc.n	20003e80 <__udivsi3+0xcc>
20003e7c:	010b      	lsls	r3, r1, #4
20003e7e:	1ac0      	subs	r0, r0, r3
20003e80:	4152      	adcs	r2, r2
20003e82:	08c3      	lsrs	r3, r0, #3
20003e84:	428b      	cmp	r3, r1
20003e86:	d301      	bcc.n	20003e8c <__udivsi3+0xd8>
20003e88:	00cb      	lsls	r3, r1, #3
20003e8a:	1ac0      	subs	r0, r0, r3
20003e8c:	4152      	adcs	r2, r2
20003e8e:	0883      	lsrs	r3, r0, #2
20003e90:	428b      	cmp	r3, r1
20003e92:	d301      	bcc.n	20003e98 <__udivsi3+0xe4>
20003e94:	008b      	lsls	r3, r1, #2
20003e96:	1ac0      	subs	r0, r0, r3
20003e98:	4152      	adcs	r2, r2
20003e9a:	0843      	lsrs	r3, r0, #1
20003e9c:	428b      	cmp	r3, r1
20003e9e:	d301      	bcc.n	20003ea4 <__udivsi3+0xf0>
20003ea0:	004b      	lsls	r3, r1, #1
20003ea2:	1ac0      	subs	r0, r0, r3
20003ea4:	4152      	adcs	r2, r2
20003ea6:	1a41      	subs	r1, r0, r1
20003ea8:	d200      	bcs.n	20003eac <__udivsi3+0xf8>
20003eaa:	4601      	mov	r1, r0
20003eac:	4152      	adcs	r2, r2
20003eae:	4610      	mov	r0, r2
20003eb0:	4770      	bx	lr
20003eb2:	e7ff      	b.n	20003eb4 <__udivsi3+0x100>
20003eb4:	b501      	push	{r0, lr}
20003eb6:	2000      	movs	r0, #0
20003eb8:	f000 f806 	bl	20003ec8 <__aeabi_idiv0>
20003ebc:	bd02      	pop	{r1, pc}
20003ebe:	46c0      	nop			; (mov r8, r8)

20003ec0 <__aeabi_uidivmod>:
20003ec0:	2900      	cmp	r1, #0
20003ec2:	d0f7      	beq.n	20003eb4 <__udivsi3+0x100>
20003ec4:	e776      	b.n	20003db4 <__udivsi3>
20003ec6:	4770      	bx	lr

20003ec8 <__aeabi_idiv0>:
20003ec8:	4770      	bx	lr
20003eca:	46c0      	nop			; (mov r8, r8)

20003ecc <APBAHBPrescTable>:
20003ecc:	00000000 	andeq	r0, r0, r0
20003ed0:	04030201 	streq	r0, [r3], #-513	; 0xfffffdff
20003ed4:	04030201 	streq	r0, [r3], #-513	; 0xfffffdff
20003ed8:	09080706 	stmdbeq	r8, {r1, r2, r8, r9, sl}
20003edc:	7172690a 	cmnvc	r2, sl, lsl #18
20003ee0:	00000000 	andeq	r0, r0, r0
20003ee4:	636e490a 	cmnvs	lr, #163840	; 0x28000
20003ee8:	6e6d6572 	mcrvs	5, 3, r6, cr13, cr2, {3}
20003eec:	00000074 	andeq	r0, r0, r4, ror r0
20003ef0:	6e65430a 	cdpvs	3, 6, cr4, cr5, cr10, {0}
20003ef4:	6c617274 	sfmvs	f7, 2, [r1], #-464	; 0xfffffe30
20003ef8:	616c4120 	cmnvs	ip, r0, lsr #2
20003efc:	00006d72 	andeq	r6, r0, r2, ror sp
20003f00:	63656c77 	cmnvs	r5, #30464	; 0x7700
20003f04:	00656d6f 	rsbeq	r6, r5, pc, ror #26

20003f08 <doors>:
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	00000996 	muleq	r0, r6, r9
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	00000323 	andeq	r0, r0, r3, lsr #6
      10:	0000060c 	andeq	r0, r0, ip, lsl #12
      14:	00042e00 	andeq	r2, r4, r0, lsl #28
	...
      24:	05ee0200 	strbeq	r0, [lr, #512]!	; 0x200
      28:	01050000 	mrseq	r0, (UNDEF: 5)
      2c:	00000254 	andeq	r0, r0, r4, asr r2
      30:	540ec806 	strpl	ip, [lr], #-2054	; 0xfffff7fa
      34:	03000002 	movweq	r0, #2
      38:	000008c9 	andeq	r0, r0, r9, asr #17
      3c:	06bc0372 			; <UNDEFINED> instruction: 0x06bc0372
      40:	03740000 	cmneq	r4, #0
      44:	00000303 	andeq	r0, r0, r3, lsl #6
      48:	05490375 	strbeq	r0, [r9, #-885]	; 0xfffffc8b
      4c:	03760000 	cmneq	r6, #0
      50:	00000494 	muleq	r0, r4, r4
      54:	09d2037b 	ldmibeq	r2, {r0, r1, r3, r4, r5, r6, r8, r9}^
      58:	037c0000 	cmneq	ip, #0
      5c:	000002c6 	andeq	r0, r0, r6, asr #5
      60:	053c037e 	ldreq	r0, [ip, #-894]!	; 0xfffffc82
      64:	047f0000 	ldrbteq	r0, [pc], #-0	; 6c <startup-0x1fffff94>
      68:	00000179 	andeq	r0, r0, r9, ror r1
      6c:	00590400 	subseq	r0, r9, r0, lsl #8
      70:	04010000 	streq	r0, [r1], #-0
      74:	000008e7 	andeq	r0, r0, r7, ror #17
      78:	016b0402 	cmneq	fp, r2, lsl #8
      7c:	04030000 	streq	r0, [r3], #-0
      80:	0000080b 	andeq	r0, r0, fp, lsl #16
      84:	0a550404 	beq	154109c <startup-0x1eabef64>
      88:	04050000 	streq	r0, [r5], #-0
      8c:	000001c7 	andeq	r0, r0, r7, asr #3
      90:	0a790406 	beq	1e410b0 <startup-0x1e1bef50>
      94:	04070000 	streq	r0, [r7], #-0
      98:	00000800 	andeq	r0, r0, r0, lsl #16
      9c:	063e0408 	ldrteq	r0, [lr], -r8, lsl #8
      a0:	04090000 	streq	r0, [r9], #-0
      a4:	00000782 	andeq	r0, r0, r2, lsl #15
      a8:	0a84040a 	beq	fe1010d8 <doors+0xde0fd1d0>
      ac:	040b0000 	streq	r0, [fp], #-0
      b0:	000004ee 	andeq	r0, r0, lr, ror #9
      b4:	0653040c 	ldrbeq	r0, [r3], -ip, lsl #8
      b8:	040d0000 	streq	r0, [sp], #-0
      bc:	000003d5 	ldrdeq	r0, [r0], -r5
      c0:	0616040e 	ldreq	r0, [r6], -lr, lsl #8
      c4:	040f0000 	streq	r0, [pc], #-0	; cc <startup-0x1fffff34>
      c8:	0000025a 	andeq	r0, r0, sl, asr r2
      cc:	03e70410 	mvneq	r0, #16, 8	; 0x10000000
      d0:	04110000 	ldreq	r0, [r1], #-0
      d4:	00000a02 	andeq	r0, r0, r2, lsl #20
      d8:	04b70412 	ldrteq	r0, [r7], #1042	; 0x412
      dc:	04130000 	ldreq	r0, [r3], #-0
      e0:	0000004b 	andeq	r0, r0, fp, asr #32
      e4:	007a0414 	rsbseq	r0, sl, r4, lsl r4
      e8:	04150000 	ldreq	r0, [r5], #-0
      ec:	00000a39 	andeq	r0, r0, r9, lsr sl
      f0:	026c0416 	rsbeq	r0, ip, #369098752	; 0x16000000
      f4:	04170000 	ldreq	r0, [r7], #-0
      f8:	00000762 	andeq	r0, r0, r2, ror #14
      fc:	05e00418 	strbeq	r0, [r0, #1048]!	; 0x418
     100:	04190000 	ldreq	r0, [r9], #-0
     104:	000007b0 			; <UNDEFINED> instruction: 0x000007b0
     108:	045b041a 	ldrbeq	r0, [fp], #-1050	; 0xfffffbe6
     10c:	041b0000 	ldreq	r0, [fp], #-0
     110:	0000093d 	andeq	r0, r0, sp, lsr r9
     114:	0a6f041c 	beq	1bc118c <startup-0x1e43ee74>
     118:	041d0000 	ldreq	r0, [sp], #-0
     11c:	00000847 	andeq	r0, r0, r7, asr #16
     120:	00c4041e 	sbceq	r0, r4, lr, lsl r4
     124:	041f0000 	ldreq	r0, [pc], #-0	; 12c <startup-0x1ffffed4>
     128:	000009f5 	strdeq	r0, [r0], -r5
     12c:	02340420 	eorseq	r0, r4, #32, 8	; 0x20000000
     130:	04210000 	strteq	r0, [r1], #-0
     134:	00000142 	andeq	r0, r0, r2, asr #2
     138:	04e40422 	strbteq	r0, [r4], #1058	; 0x422
     13c:	04230000 	strteq	r0, [r3], #-0
     140:	00000649 	andeq	r0, r0, r9, asr #12
     144:	099f0424 	ldmibeq	pc, {r2, r5, sl}	; <UNPREDICTABLE>
     148:	04250000 	strteq	r0, [r5], #-0
     14c:	00000831 	andeq	r0, r0, r1, lsr r8
     150:	091e0426 	ldmdbeq	lr, {r1, r2, r5, sl}
     154:	04270000 	strteq	r0, [r7], #-0
     158:	000004c4 	andeq	r0, r0, r4, asr #9
     15c:	01280428 			; <UNDEFINED> instruction: 0x01280428
     160:	04290000 	strteq	r0, [r9], #-0
     164:	000002b5 			; <UNDEFINED> instruction: 0x000002b5
     168:	051b042a 	ldreq	r0, [fp, #-1066]	; 0xfffffbd6
     16c:	042b0000 	strteq	r0, [fp], #-0
     170:	000002d2 	ldrdeq	r0, [r0], -r2
     174:	056a042c 	strbeq	r0, [sl, #-1068]!	; 0xfffffbd4
     178:	042d0000 	strteq	r0, [sp], #-0
     17c:	0000088f 	andeq	r0, r0, pc, lsl #17
     180:	0851042e 	ldmdaeq	r1, {r1, r2, r3, r5, sl}^
     184:	042f0000 	strteq	r0, [pc], #-0	; 18c <startup-0x1ffffe74>
     188:	0000074a 	andeq	r0, r0, sl, asr #14
     18c:	01830430 	orreq	r0, r3, r0, lsr r4
     190:	04310000 	ldrteq	r0, [r1], #-0
     194:	00000634 	andeq	r0, r0, r4, lsr r6
     198:	07240432 			; <UNDEFINED> instruction: 0x07240432
     19c:	04330000 	ldrteq	r0, [r3], #-0
     1a0:	000002aa 	andeq	r0, r0, sl, lsr #5
     1a4:	07a50434 			; <UNDEFINED> instruction: 0x07a50434
     1a8:	04350000 	ldrteq	r0, [r5], #-0
     1ac:	0000029c 	muleq	r0, ip, r2
     1b0:	08a10436 	stmiaeq	r1!, {r1, r2, r4, r5, sl}
     1b4:	04370000 	ldrteq	r0, [r7], #-0
     1b8:	0000090c 	andeq	r0, r0, ip, lsl #18
     1bc:	0a0b0438 	beq	2c12a4 <startup-0x1fd3ed5c>
     1c0:	04390000 	ldrteq	r0, [r9], #-0
     1c4:	000004a5 	andeq	r0, r0, r5, lsr #9
     1c8:	05f3043a 	ldrbeq	r0, [r3, #1082]!	; 0x43a
     1cc:	043b0000 	ldrteq	r0, [fp], #-0
     1d0:	00000738 	andeq	r0, r0, r8, lsr r7
     1d4:	05d7043c 	ldrbeq	r0, [r7, #1084]	; 0x43c
     1d8:	043d0000 	ldrteq	r0, [sp], #-0
     1dc:	0000027e 	andeq	r0, r0, lr, ror r2
     1e0:	0665043e 			; <UNDEFINED> instruction: 0x0665043e
     1e4:	043f0000 	ldrteq	r0, [pc], #-0	; 1ec <startup-0x1ffffe14>
     1e8:	00000062 	andeq	r0, r0, r2, rrx
     1ec:	01b90440 			; <UNDEFINED> instruction: 0x01b90440
     1f0:	04410000 	strbeq	r0, [r1], #-0
     1f4:	00000a47 	andeq	r0, r0, r7, asr #20
     1f8:	081b0442 	ldmdaeq	fp, {r1, r6, sl}
     1fc:	04430000 	strbeq	r0, [r3], #-0
     200:	000000e2 	andeq	r0, r0, r2, ror #1
     204:	00880444 	addeq	r0, r8, r4, asr #8
     208:	04450000 	strbeq	r0, [r5], #-0
     20c:	0000039f 	muleq	r0, pc, r3	; <UNPREDICTABLE>
     210:	06280446 	strteq	r0, [r8], -r6, asr #8
     214:	04470000 	strbeq	r0, [r7], #-0
     218:	00000414 	andeq	r0, r0, r4, lsl r4
     21c:	00aa0448 	adceq	r0, sl, r8, asr #8
     220:	04490000 	strbeq	r0, [r9], #-0
     224:	00000468 	andeq	r0, r0, r8, ror #8
     228:	08b6044a 	ldmeq	r6!, {r1, r3, r6, sl}
     22c:	044b0000 	strbeq	r0, [fp], #-0
     230:	00000a5e 	andeq	r0, r0, lr, asr sl
     234:	06a0044c 	strteq	r0, [r0], ip, asr #8
     238:	044d0000 	strbeq	r0, [sp], #-0
     23c:	0000097f 	andeq	r0, r0, pc, ror r9
     240:	0885044e 	stmeq	r5, {r1, r2, r3, r6, sl}
     244:	044f0000 	strbeq	r0, [pc], #-0	; 24c <startup-0x1ffffdb4>
     248:	0000078d 	andeq	r0, r0, sp, lsl #15
     24c:	09c90450 	stmibeq	r9, {r4, r6, sl}^
     250:	00510000 	subseq	r0, r1, r0
     254:	56060105 	strpl	r0, [r6], -r5, lsl #2
     258:	06000007 	streq	r0, [r0], -r7
     25c:	000000d1 	ldrdeq	r0, [r0], -r1
     260:	67182b02 	ldrvs	r2, [r8, -r2, lsl #22]
     264:	05000002 	streq	r0, [r0, #-2]
     268:	07540801 	ldrbeq	r0, [r4, -r1, lsl #16]
     26c:	02050000 	andeq	r0, r5, #0
     270:	00079b05 	andeq	r9, r7, r5, lsl #22
     274:	02e50600 	rsceq	r0, r5, #0, 12
     278:	39020000 	stmdbcc	r2, {}	; <UNPREDICTABLE>
     27c:	00028119 	andeq	r8, r2, r9, lsl r1
     280:	07020500 	streq	r0, [r2, -r0, lsl #10]
     284:	000007ed 	andeq	r0, r0, sp, ror #15
     288:	0008dd06 	andeq	sp, r8, r6, lsl #26
     28c:	184d0200 	stmdane	sp, {r9}^
     290:	00000294 	muleq	r0, r4, r2
     294:	b0050405 	andlt	r0, r5, r5, lsl #8
     298:	06000001 	streq	r0, [r0], -r1
     29c:	000002f8 	strdeq	r0, [r0], -r8
     2a0:	a7194f02 	ldrge	r4, [r9, -r2, lsl #30]
     2a4:	05000002 	streq	r0, [r0, #-2]
     2a8:	01d70704 	bicseq	r0, r7, r4, lsl #14
     2ac:	08050000 	stmdaeq	r5, {}	; <UNPREDICTABLE>
     2b0:	0001ab05 	andeq	sl, r1, r5, lsl #22
     2b4:	07080500 	streq	r0, [r8, -r0, lsl #10]
     2b8:	000001d2 	ldrdeq	r0, [r0], -r2
     2bc:	69050407 	stmdbvs	r5, {r0, r1, r2, sl}
     2c0:	0500746e 	streq	r7, [r0, #-1134]	; 0xfffffb92
     2c4:	01dc0704 	bicseq	r0, ip, r4, lsl #14
     2c8:	d3060000 	movwle	r0, #24576	; 0x6000
     2cc:	03000000 	movweq	r0, #0
     2d0:	025b1318 	subseq	r1, fp, #24, 6	; 0x60000000
     2d4:	e7060000 	str	r0, [r6, -r0]
     2d8:	03000002 	movweq	r0, #2
     2dc:	02751424 	rsbseq	r1, r5, #36, 8	; 0x24000000
     2e0:	d6080000 	strle	r0, [r8], -r0
     2e4:	06000002 	streq	r0, [r0], -r2
     2e8:	000008df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     2ec:	88132c03 	ldmdahi	r3, {r0, r1, sl, fp, sp}
     2f0:	08000002 	stmdaeq	r0, {r1}
     2f4:	000002e7 	andeq	r0, r0, r7, ror #5
     2f8:	0002fa06 	andeq	pc, r2, r6, lsl #20
     2fc:	14300300 	ldrtne	r0, [r0], #-768	; 0xfffffd00
     300:	0000029b 	muleq	r0, fp, r2
     304:	0002f808 	andeq	pc, r2, r8, lsl #16
     308:	07750900 	ldrbeq	r0, [r5, -r0, lsl #18]!
     30c:	fa040000 	blx	100314 <startup-0x1feffcec>
     310:	02f31906 	rscseq	r1, r3, #98304	; 0x18000
     314:	ac0a0000 	stcge	0, cr0, [sl], {-0}
     318:	05000006 	streq	r0, [r0, #-6]
     31c:	02f8113b 	rscseq	r1, r8, #-1073741810	; 0xc000000e
     320:	070b0000 	streq	r0, [fp, -r0]
     324:	00026701 	andeq	r6, r2, r1, lsl #14
     328:	035f0600 	cmpeq	pc, #0, 12
     32c:	00033e0e 	andeq	r3, r3, lr, lsl #28
     330:	01000400 	tsteq	r0, r0, lsl #8
     334:	04000000 	streq	r0, [r0], #-0
     338:	0000022d 	andeq	r0, r0, sp, lsr #4
     33c:	830c0001 	movwhi	r0, #49153	; 0xc001
     340:	06000006 	streq	r0, [r0], -r6
     344:	222f035f 	eorcs	r0, pc, #2080374785	; 0x7c000001
     348:	0d000003 	stceq	0, cr0, [r0, #-12]
     34c:	05c30628 	strbeq	r0, [r3, #1576]	; 0x628
     350:	0003e209 	andeq	lr, r3, r9, lsl #4
     354:	069a0e00 	ldreq	r0, [sl], r0, lsl #28
     358:	c5060000 	strgt	r0, [r6, #-0]
     35c:	03041105 	movweq	r1, #16645	; 0x4105
     360:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     364:	000000db 	ldrdeq	r0, [r0], -fp
     368:	1105c606 	tstne	r5, r6, lsl #12
     36c:	00000304 	andeq	r0, r0, r4, lsl #6
     370:	02f00e04 	rscseq	r0, r0, #4, 28	; 0x40
     374:	c7060000 	strgt	r0, [r6, -r0]
     378:	03041105 	movweq	r1, #16645	; 0x4105
     37c:	0e080000 	cdpeq	0, 0, cr0, cr8, cr0, {0}
     380:	00000000 	andeq	r0, r0, r0
     384:	1105c806 	tstne	r5, r6, lsl #16
     388:	00000304 	andeq	r0, r0, r4, lsl #6
     38c:	44490f0c 	strbmi	r0, [r9], #-3852	; 0xfffff0f4
     390:	c9060052 	stmdbgt	r6, {r1, r4, r6}
     394:	03041105 	movweq	r1, #16645	; 0x4105
     398:	0f100000 	svceq	0x00100000
     39c:	0052444f 	subseq	r4, r2, pc, asr #8
     3a0:	1105ca06 	tstne	r5, r6, lsl #20
     3a4:	00000304 	andeq	r0, r0, r4, lsl #6
     3a8:	09510e14 	ldmdbeq	r1, {r2, r4, r9, sl, fp}^
     3ac:	cb060000 	blgt	1803b4 <startup-0x1fe7fc4c>
     3b0:	02e21105 	rsceq	r1, r2, #1073741825	; 0x40000001
     3b4:	0e180000 	cdpeq	0, 1, cr0, cr8, cr0, {0}
     3b8:	00000963 	andeq	r0, r0, r3, ror #18
     3bc:	1105cc06 	tstne	r5, r6, lsl #24
     3c0:	000002e2 	andeq	r0, r0, r2, ror #5
     3c4:	04560e1a 	ldrbeq	r0, [r6], #-3610	; 0xfffff1e6
     3c8:	cd060000 	stcgt	0, cr0, [r6, #-0]
     3cc:	03041105 	movweq	r1, #16645	; 0x4105
     3d0:	0f1c0000 	svceq	0x001c0000
     3d4:	00524641 	subseq	r4, r2, r1, asr #12
     3d8:	1105ce06 	tstne	r5, r6, lsl #28
     3dc:	000003f2 	strdeq	r0, [r0], -r2
     3e0:	04100020 	ldreq	r0, [r0], #-32	; 0xffffffe0
     3e4:	f2000003 	vhadd.s8	d0, d0, d3
     3e8:	11000003 	tstne	r0, r3
     3ec:	000002c3 	andeq	r0, r0, r3, asr #5
     3f0:	e2080001 	and	r0, r8, #1
     3f4:	0c000003 	stceq	0, cr0, [r0], {3}
     3f8:	00000421 	andeq	r0, r0, r1, lsr #8
     3fc:	0305cf06 	movweq	ip, #24326	; 0x5f06
     400:	0000034b 	andeq	r0, r0, fp, asr #6
     404:	4706540d 	strmi	r5, [r6, -sp, lsl #8]
     408:	06050907 	streq	r0, [r5], -r7, lsl #18
     40c:	430f0000 	movwmi	r0, #61440	; 0xf000
     410:	06003152 			; <UNDEFINED> instruction: 0x06003152
     414:	e2110749 	ands	r0, r1, #19136512	; 0x1240000
     418:	00000002 	andeq	r0, r0, r2
     41c:	0006de0e 	andeq	sp, r6, lr, lsl #28
     420:	074a0600 	strbeq	r0, [sl, -r0, lsl #12]
     424:	0002d611 	andeq	sp, r2, r1, lsl r6
     428:	430f0200 	movwmi	r0, #61952	; 0xf200
     42c:	06003252 			; <UNDEFINED> instruction: 0x06003252
     430:	e211074b 	ands	r0, r1, #19660800	; 0x12c0000
     434:	04000002 	streq	r0, [r0], #-2
     438:	0006e80e 	andeq	lr, r6, lr, lsl #16
     43c:	074c0600 	strbeq	r0, [ip, -r0, lsl #12]
     440:	0002d611 	andeq	sp, r2, r1, lsl r6
     444:	a00e0600 	andge	r0, lr, r0, lsl #12
     448:	06000004 	streq	r0, [r0], -r4
     44c:	e211074d 	ands	r0, r1, #20185088	; 0x1340000
     450:	08000002 	stmdaeq	r0, {r1}
     454:	0006f20e 	andeq	pc, r6, lr, lsl #4
     458:	074e0600 	strbeq	r0, [lr, -r0, lsl #12]
     45c:	0002d611 	andeq	sp, r2, r1, lsl r6
     460:	c40e0a00 	strgt	r0, [lr], #-2560	; 0xfffff600
     464:	06000009 	streq	r0, [r0], -r9
     468:	e211074f 	ands	r0, r1, #20709376	; 0x13c0000
     46c:	0c000002 	stceq	0, cr0, [r0], {2}
     470:	0006fc0e 	andeq	pc, r6, lr, lsl #24
     474:	07500600 	ldrbeq	r0, [r0, -r0, lsl #12]
     478:	0002d611 	andeq	sp, r2, r1, lsl r6
     47c:	530f0e00 	movwpl	r0, #65024	; 0xfe00
     480:	51060052 	qaddpl	r0, r2, r6
     484:	02e21107 	rsceq	r1, r2, #-1073741823	; 0xc0000001
     488:	0e100000 	cdpeq	0, 1, cr0, cr0, cr0, {0}
     48c:	00000706 	andeq	r0, r0, r6, lsl #14
     490:	11075206 	tstne	r7, r6, lsl #4
     494:	000002d6 	ldrdeq	r0, [r0], -r6
     498:	47450f12 	smlaldmi	r0, r5, r2, pc	; <UNPREDICTABLE>
     49c:	53060052 	movwpl	r0, #24658	; 0x6052
     4a0:	02e21107 	rsceq	r1, r2, #-1073741823	; 0xc0000001
     4a4:	0e140000 	cdpeq	0, 1, cr0, cr4, cr0, {0}
     4a8:	00000710 	andeq	r0, r0, r0, lsl r7
     4ac:	11075406 	tstne	r7, r6, lsl #8
     4b0:	000002d6 	ldrdeq	r0, [r0], -r6
     4b4:	019f0e16 	orrseq	r0, pc, r6, lsl lr	; <UNPREDICTABLE>
     4b8:	55060000 	strpl	r0, [r6, #-0]
     4bc:	02e21107 	rsceq	r1, r2, #-1073741823	; 0xc0000001
     4c0:	0e180000 	cdpeq	0, 1, cr0, cr8, cr0, {0}
     4c4:	0000071a 	andeq	r0, r0, sl, lsl r7
     4c8:	11075606 	tstne	r7, r6, lsl #12
     4cc:	000002d6 	ldrdeq	r0, [r0], -r6
     4d0:	01a50e1a 			; <UNDEFINED> instruction: 0x01a50e1a
     4d4:	57060000 	strpl	r0, [r6, -r0]
     4d8:	02e21107 	rsceq	r1, r2, #-1073741823	; 0xc0000001
     4dc:	0e1c0000 	cdpeq	0, 1, cr0, cr12, cr0, {0}
     4e0:	00000827 	andeq	r0, r0, r7, lsr #16
     4e4:	11075806 	tstne	r7, r6, lsl #16
     4e8:	000002d6 	ldrdeq	r0, [r0], -r6
     4ec:	02790e1e 	rsbseq	r0, r9, #480	; 0x1e0
     4f0:	59060000 	stmdbpl	r6, {}	; <UNPREDICTABLE>
     4f4:	02e21107 	rsceq	r1, r2, #-1073741823	; 0xc0000001
     4f8:	0e200000 	cdpeq	0, 2, cr0, cr0, cr0, {0}
     4fc:	0000083d 	andeq	r0, r0, sp, lsr r8
     500:	11075a06 	tstne	r7, r6, lsl #20
     504:	000002d6 	ldrdeq	r0, [r0], -r6
     508:	4e430f22 	cdpmi	15, 4, cr0, cr3, cr2, {1}
     50c:	5b060054 	blpl	180664 <startup-0x1fe7f99c>
     510:	03041107 	movweq	r1, #16647	; 0x4107
     514:	0f240000 	svceq	0x00240000
     518:	00435350 	subeq	r5, r3, r0, asr r3
     51c:	11075c06 	tstne	r7, r6, lsl #24
     520:	000002e2 	andeq	r0, r0, r2, ror #5
     524:	072e0e28 	streq	r0, [lr, -r8, lsr #28]!
     528:	5d060000 	stcpl	0, cr0, [r6, #-0]
     52c:	02d61107 	sbcseq	r1, r6, #-1073741823	; 0xc0000001
     530:	0f2a0000 	svceq	0x002a0000
     534:	00525241 	subseq	r5, r2, r1, asr #4
     538:	11075e06 	tstne	r7, r6, lsl #28
     53c:	00000304 	andeq	r0, r0, r4, lsl #6
     540:	43520f2c 	cmpmi	r2, #44, 30	; 0xb0
     544:	5f060052 	svcpl	0x00060052
     548:	02e21107 	rsceq	r1, r2, #-1073741823	; 0xc0000001
     54c:	0e300000 	cdpeq	0, 3, cr0, cr0, cr0, {0}
     550:	000001f6 	strdeq	r0, [r0], -r6
     554:	11076006 	tstne	r7, r6
     558:	000002d6 	ldrdeq	r0, [r0], -r6
     55c:	09380e32 	ldmdbeq	r8!, {r1, r4, r5, r9, sl, fp}
     560:	61060000 	mrsvs	r0, (UNDEF: 6)
     564:	03041107 	movweq	r1, #16647	; 0x4107
     568:	0e340000 	cdpeq	0, 3, cr0, cr4, cr0, {0}
     56c:	00000116 	andeq	r0, r0, r6, lsl r1
     570:	11076206 	tstne	r7, r6, lsl #4
     574:	00000304 	andeq	r0, r0, r4, lsl #6
     578:	09470e38 	stmdbeq	r7, {r3, r4, r5, r9, sl, fp}^
     57c:	63060000 	movwvs	r0, #24576	; 0x6000
     580:	03041107 	movweq	r1, #16647	; 0x4107
     584:	0e3c0000 	cdpeq	0, 3, cr0, cr12, cr0, {0}
     588:	0000094c 	andeq	r0, r0, ip, asr #18
     58c:	11076406 	tstne	r7, r6, lsl #8
     590:	00000304 	andeq	r0, r0, r4, lsl #6
     594:	05820e40 	streq	r0, [r2, #3648]	; 0xe40
     598:	65060000 	strvs	r0, [r6, #-0]
     59c:	02e21107 	rsceq	r1, r2, #-1073741823	; 0xc0000001
     5a0:	0e440000 	cdpeq	0, 4, cr0, cr4, cr0, {0}
     5a4:	00000201 	andeq	r0, r0, r1, lsl #4
     5a8:	11076606 	tstne	r7, r6, lsl #12
     5ac:	000002d6 	ldrdeq	r0, [r0], -r6
     5b0:	43440f46 	movtmi	r0, #20294	; 0x4f46
     5b4:	67060052 	smlsdvs	r6, r2, r0, r0
     5b8:	02e21107 	rsceq	r1, r2, #-1073741823	; 0xc0000001
     5bc:	0e480000 	cdpeq	0, 4, cr0, cr8, cr0, {0}
     5c0:	0000020c 	andeq	r0, r0, ip, lsl #4
     5c4:	11076806 	tstne	r7, r6, lsl #16
     5c8:	000002d6 	ldrdeq	r0, [r0], -r6
     5cc:	089c0e4a 	ldmeq	ip, {r1, r3, r6, r9, sl, fp}
     5d0:	69060000 	stmdbvs	r6, {}	; <UNPREDICTABLE>
     5d4:	02e21107 	rsceq	r1, r2, #-1073741823	; 0xc0000001
     5d8:	0e4c0000 	cdpeq	0, 4, cr0, cr12, cr0, {0}
     5dc:	00000217 	andeq	r0, r0, r7, lsl r2
     5e0:	11076a06 	tstne	r7, r6, lsl #20
     5e4:	000002d6 	ldrdeq	r0, [r0], -r6
     5e8:	524f0f4e 	subpl	r0, pc, #312	; 0x138
     5ec:	076b0600 	strbeq	r0, [fp, -r0, lsl #12]!
     5f0:	0002e211 	andeq	lr, r2, r1, lsl r2
     5f4:	220e5000 	andcs	r5, lr, #0
     5f8:	06000002 	streq	r0, [r0], -r2
     5fc:	d611076c 	ldrle	r0, [r1], -ip, ror #14
     600:	52000002 	andpl	r0, r0, #2
     604:	00f40c00 	rscseq	r0, r4, r0, lsl #24
     608:	6d060000 	stcvs	0, cr0, [r6, #-0]
     60c:	04040307 	streq	r0, [r4], #-775	; 0xfffffcf9
     610:	07120000 	ldreq	r0, [r2, -r0]
     614:	00026701 	andeq	r6, r2, r1, lsl #14
     618:	01420700 	cmpeq	r2, r0, lsl #14
     61c:	00000639 	andeq	r0, r0, r9, lsr r6
     620:	0001e904 	andeq	lr, r1, r4, lsl #18
     624:	63040000 	movwvs	r0, #16384	; 0x4000
     628:	01000008 	tsteq	r0, r8
     62c:	00011b04 	andeq	r1, r1, r4, lsl #22
     630:	4f040200 	svcmi	0x00040200
     634:	03000001 	movweq	r0, #1
     638:	09e40600 	stmibeq	r4!, {r9, sl}^
     63c:	47070000 	strmi	r0, [r7, -r0]
     640:	00061202 	andeq	r1, r6, r2, lsl #4
     644:	01071200 	mrseq	r1, (UNDEF: 39)
     648:	00000267 	andeq	r0, r0, r7, ror #4
     64c:	60014f07 	andvs	r4, r1, r7, lsl #30
     650:	04000006 	streq	r0, [r0], #-6
     654:	00000108 	andeq	r0, r0, r8, lsl #2
     658:	092a0400 	stmdbeq	sl!, {sl}
     65c:	00010000 	andeq	r0, r1, r0
     660:	00018d06 	andeq	r8, r1, r6, lsl #26
     664:	02520700 	subseq	r0, r2, #0, 14
     668:	00000645 	andeq	r0, r0, r5, asr #12
     66c:	67010712 	smladvs	r1, r2, r7, r0
     670:	07000002 	streq	r0, [r0, -r2]
     674:	0693015a 			; <UNDEFINED> instruction: 0x0693015a
     678:	5c040000 	stcpl	0, cr0, [r4], {-0}
     67c:	00000001 	andeq	r0, r0, r1
     680:	00031104 	andeq	r1, r3, r4, lsl #2
     684:	ab040100 	blge	100a8c <startup-0x1feff574>
     688:	02000009 	andeq	r0, r0, #9
     68c:	000a2904 	andeq	r2, sl, r4, lsl #18
     690:	06000300 	streq	r0, [r0], -r0, lsl #6
     694:	000003b1 			; <UNDEFINED> instruction: 0x000003b1
     698:	6c025f07 	stcvs	15, cr5, [r2], {7}
     69c:	12000006 	andne	r0, r0, #6
     6a0:	02670107 	rsbeq	r0, r7, #-1073741823	; 0xc0000001
     6a4:	6e070000 	cdpvs	0, 0, cr0, cr7, cr0, {0}
     6a8:	0006c001 	andeq	ip, r6, r1
     6ac:	05590400 	ldrbeq	r0, [r9, #-1024]	; 0xfffffc00
     6b0:	04000000 	streq	r0, [r0], #-0
     6b4:	000000b7 	strheq	r0, [r0], -r7
     6b8:	09700401 	ldmdbeq	r0!, {r0, sl}^
     6bc:	00020000 	andeq	r0, r2, r0
     6c0:	0004d306 	andeq	sp, r4, r6, lsl #6
     6c4:	02720700 	rsbseq	r0, r2, #0, 14
     6c8:	0000069f 	muleq	r0, pc, r6	; <UNPREDICTABLE>
     6cc:	84070813 	strhi	r0, [r7], #-2067	; 0xfffff7ed
     6d0:	00071709 	andeq	r1, r7, r9, lsl #14
     6d4:	03c31400 	biceq	r1, r3, #0, 8
     6d8:	86070000 	strhi	r0, [r7], -r0
     6dc:	0002f80c 	andeq	pc, r2, ip, lsl #16
     6e0:	92140000 	andsls	r0, r4, #0
     6e4:	07000002 	streq	r0, [r0, -r2]
     6e8:	06391489 	ldrteq	r1, [r9], -r9, lsl #9
     6ec:	14040000 	strne	r0, [r4], #-0
     6f0:	00000137 	andeq	r0, r0, r7, lsr r1
     6f4:	93158c07 	tstls	r5, #1792	; 0x700
     6f8:	05000006 	streq	r0, [r0, #-6]
     6fc:	0005cc14 	andeq	ip, r5, r4, lsl ip
     700:	158f0700 	strne	r0, [pc, #1792]	; e08 <startup-0x1ffff1f8>
     704:	00000660 	andeq	r0, r0, r0, ror #12
     708:	08711406 	ldmdaeq	r1!, {r1, r2, sl, ip}^
     70c:	92070000 	andls	r0, r7, #0
     710:	0006c014 	andeq	ip, r6, r4, lsl r0
     714:	06000700 	streq	r0, [r0], -r0, lsl #14
     718:	00000672 	andeq	r0, r0, r2, ror r6
     71c:	cc029407 	cfstrsgt	mvf9, [r2], {7}
     720:	13000006 	movwne	r0, #6
     724:	0937080c 	ldmdbeq	r7!, {r2, r3, fp}
     728:	0000076e 	andeq	r0, r0, lr, ror #14
     72c:	00059c14 	andeq	r9, r5, r4, lsl ip
     730:	0c390800 	ldceq	8, cr0, [r9], #-0
     734:	000002d6 	ldrdeq	r0, [r0], -r6
     738:	009a1400 	addseq	r1, sl, r0, lsl #8
     73c:	3c080000 	stccc	0, cr0, [r8], {-0}
     740:	0002d60c 	andeq	sp, r2, ip, lsl #12
     744:	ab140200 	blge	500f4c <startup-0x1faff0b4>
     748:	08000008 	stmdaeq	r0, {r3}
     74c:	02f80c3f 	rscseq	r0, r8, #16128	; 0x3f00
     750:	14040000 	strne	r0, [r4], #-0
     754:	000007c8 	andeq	r0, r0, r8, asr #15
     758:	d60c4308 	strle	r4, [ip], -r8, lsl #6
     75c:	08000002 	stmdaeq	r0, {r1}
     760:	00098914 	andeq	r8, r9, r4, lsl r9
     764:	0b460800 	bleq	118276c <startup-0x1ee7d894>
     768:	000002ca 	andeq	r0, r0, sl, asr #5
     76c:	7c06000a 	stcvc	0, cr0, [r6], {10}
     770:	08000004 	stmdaeq	r0, {r2}
     774:	0723034e 	streq	r0, [r3, -lr, asr #6]!
     778:	04130000 	ldreq	r0, [r3], #-0
     77c:	b8093609 	stmdalt	r9, {r0, r3, r9, sl, ip, sp}
     780:	14000007 	strne	r0, [r0], #-7
     784:	00000500 	andeq	r0, r0, r0, lsl #10
     788:	ca0b3809 	bgt	2ce7b4 <startup-0x1fd3184c>
     78c:	00000002 	andeq	r0, r0, r2
     790:	0005aa14 	andeq	sl, r5, r4, lsl sl
     794:	0b3d0900 	bleq	f42b9c <startup-0x1f0bd464>
     798:	000002ca 	andeq	r0, r0, sl, asr #5
     79c:	03f91401 	mvnseq	r1, #16777216	; 0x1000000
     7a0:	42090000 	andmi	r0, r9, #0
     7a4:	0002ca0b 	andeq	ip, r2, fp, lsl #20
     7a8:	38140200 	ldmdacc	r4, {r9}
     7ac:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     7b0:	033e1347 	teqeq	lr, #469762049	; 0x1c000001
     7b4:	00030000 	andeq	r0, r3, r0
     7b8:	00060506 	andeq	r0, r6, r6, lsl #10
     7bc:	034a0900 	movteq	r0, #43264	; 0xa900
     7c0:	0000077a 	andeq	r0, r0, sl, ror r7
     7c4:	0c0a1813 	stceq	8, cr1, [sl], {19}
     7c8:	00084209 	andeq	r4, r8, r9, lsl #4
     7cc:	44491500 	strbmi	r1, [r9], #-1280	; 0xfffffb00
     7d0:	060d0a00 	streq	r0, [sp], -r0, lsl #20
     7d4:	000002bc 			; <UNDEFINED> instruction: 0x000002bc
     7d8:	06931400 	ldreq	r1, [r3], r0, lsl #8
     7dc:	0f0a0000 	svceq	0x000a0000
     7e0:	0002d60b 	andeq	sp, r2, fp, lsl #12
     7e4:	1d140400 	cfldrsne	mvf0, [r4, #-0]
     7e8:	0a00000a 	beq	818 <startup-0x1ffff7e8>
     7ec:	02d60b10 	sbcseq	r0, r6, #16, 22	; 0x4000
     7f0:	14060000 	strne	r0, [r6], #-0
     7f4:	00000957 	andeq	r0, r0, r7, asr r9
     7f8:	d60b110a 	strle	r1, [fp], -sl, lsl #2
     7fc:	08000002 	stmdaeq	r0, {r1}
     800:	00096914 	andeq	r6, r9, r4, lsl r9
     804:	0b120a00 	bleq	48300c <startup-0x1fb7cff4>
     808:	000002d6 	ldrdeq	r0, [r0], -r6
     80c:	08f7140a 	ldmeq	r7!, {r1, r3, sl, ip}^
     810:	130a0000 	movwne	r0, #40960	; 0xa000
     814:	00084207 	andeq	r4, r8, r7, lsl #4
     818:	da140c00 	ble	503820 <startup-0x1fafc7e0>
     81c:	0a000007 	beq	840 <startup-0x1ffff7c0>
     820:	08420714 	stmdaeq	r2, {r2, r4, r8, r9, sl}^
     824:	140d0000 	strne	r0, [sp], #-0
     828:	0000058d 	andeq	r0, r0, sp, lsl #11
     82c:	bc06150a 	cfstr32lt	mvfx1, [r6], {10}
     830:	10000002 	andne	r0, r0, r2
     834:	00058714 	andeq	r8, r5, r4, lsl r7
     838:	06160a00 	ldreq	r0, [r6], -r0, lsl #20
     83c:	000002bc 			; <UNDEFINED> instruction: 0x000002bc
     840:	01050014 	tsteq	r5, r4, lsl r0
     844:	00075d08 	andeq	r5, r7, r8, lsl #26
     848:	08160600 	ldmdaeq	r6, {r9, sl}
     84c:	1a0a0000 	bne	280854 <startup-0x1fd7f7ac>
     850:	0007c402 	andeq	ip, r7, r2, lsl #8
     854:	08491000 	stmdaeq	r9, {ip}^
     858:	08650000 	stmdaeq	r5!, {}^	; <UNPREDICTABLE>
     85c:	c3110000 	tstgt	r1, #0
     860:	01000002 	tsteq	r0, r2
     864:	028c1600 	addeq	r1, ip, #0, 12
     868:	17010000 	strne	r0, [r1, -r0]
     86c:	00085506 	andeq	r5, r8, r6, lsl #10
     870:	08030500 	stmdaeq	r3, {r8, sl}
     874:	1720003f 			; <UNDEFINED> instruction: 0x1720003f
     878:	00000a24 	andeq	r0, r0, r4, lsr #20
     87c:	c4068001 	strgt	r8, [r6], #-1
     880:	24200003 	strtcs	r0, [r0], #-3
     884:	01000000 	mrseq	r0, (UNDEF: 0)
     888:	09bb189c 	ldmibeq	fp!, {r2, r3, r4, r7, fp, ip}
     88c:	6a010000 	bvs	40894 <startup-0x1ffbf76c>
     890:	00032c06 	andeq	r2, r3, r6, lsl #24
     894:	00009820 	andeq	r9, r0, r0, lsr #16
     898:	be9c0100 	fmllte	f0, f4, f0
     89c:	19000008 	stmdbne	r0, {r3}
     8a0:	00000070 	andeq	r0, r0, r0, ror r0
     8a4:	6e1a6d01 	cdpvs	13, 1, cr6, cr10, cr1, {0}
     8a8:	02000007 	andeq	r0, r0, #7
     8ac:	7b196c91 	blvc	65baf8 <startup-0x1f9a4508>
     8b0:	01000008 	tsteq	r0, r8
     8b4:	07b81377 			; <UNDEFINED> instruction: 0x07b81377
     8b8:	91020000 	mrsls	r0, (UNDEF: 2)
     8bc:	49180068 	ldmdbmi	r8, {r3, r5, r6}
     8c0:	01000002 	tsteq	r0, r2
     8c4:	01fc0657 	mvnseq	r0, r7, asr r6
     8c8:	01302000 	teqeq	r0, r0
     8cc:	9c010000 	stcls	0, cr0, [r1], {-0}
     8d0:	000008ec 	andeq	r0, r0, ip, ror #17
     8d4:	00020a1a 	andeq	r0, r2, sl, lsl sl
     8d8:	0000f820 	andeq	pc, r0, r0, lsr #16
     8dc:	00691b00 	rsbeq	r1, r9, r0, lsl #22
     8e0:	bc0b5901 			; <UNDEFINED> instruction: 0xbc0b5901
     8e4:	02000002 	andeq	r0, r0, #2
     8e8:	00007491 	muleq	r0, r1, r4
     8ec:	00052f18 	andeq	r2, r5, r8, lsl pc
     8f0:	06390100 	ldrteq	r0, [r9], -r0, lsl #2
     8f4:	2000010c 	andcs	r0, r0, ip, lsl #2
     8f8:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     8fc:	091a9c01 	ldmdbeq	sl, {r0, sl, fp, ip, pc}
     900:	121a0000 	andsne	r0, sl, #0
     904:	d8200001 	stmdale	r0!, {r0}
     908:	1b000000 	blne	910 <startup-0x1ffff6f0>
     90c:	3a010069 	bcc	40ab8 <startup-0x1ffbf548>
     910:	0002bc0b 	andeq	fp, r2, fp, lsl #24
     914:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     918:	d21c0000 	andsle	r0, ip, #0
     91c:	01000006 	tsteq	r0, r6
     920:	00680628 	rsbeq	r0, r8, r8, lsr #12
     924:	00a42000 	adceq	r2, r4, r0
     928:	9c010000 	stcls	0, cr0, [r1], {-0}
     92c:	00000961 	andeq	r0, r0, r1, ror #18
     930:	00006e1a 	andeq	r6, r0, sl, lsl lr
     934:	00009020 	andeq	r9, r0, r0, lsr #32
     938:	00691b00 	rsbeq	r1, r9, r0, lsl #22
     93c:	bc0b2901 			; <UNDEFINED> instruction: 0xbc0b2901
     940:	02000002 	andeq	r0, r0, #2
     944:	741a6c91 	ldrvc	r6, [sl], #-3217	; 0xfffff36f
     948:	7e200000 	cdpvc	0, 2, cr0, cr0, cr0, {0}
     94c:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
     950:	00000451 	andeq	r0, r0, r1, asr r4
     954:	49082a01 	stmdbmi	r8, {r0, r9, fp, sp}
     958:	02000008 	andeq	r0, r0, #8
     95c:	00005491 	muleq	r0, r1, r4
     960:	03cc1800 	biceq	r1, ip, #0, 16
     964:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
     968:	00001006 	andeq	r1, r0, r6
     96c:	00005820 	andeq	r5, r0, r0, lsr #16
     970:	879c0100 	ldrhi	r0, [ip, r0, lsl #2]
     974:	19000009 	stmdbne	r0, {r0, r3}
     978:	00000510 	andeq	r0, r0, r0, lsl r5
     97c:	17131a01 	ldrne	r1, [r3, -r1, lsl #20]
     980:	02000007 	andeq	r0, r0, #7
     984:	1d007091 	stcne	0, cr7, [r0, #-580]	; 0xfffffdbc
     988:	00000241 	andeq	r0, r0, r1, asr #4
     98c:	00060d01 	andeq	r0, r6, r1, lsl #26
     990:	0c200000 	stceq	0, cr0, [r0], #-0
     994:	01000000 	mrseq	r0, (UNDEF: 0)
     998:	067b009c 			; <UNDEFINED> instruction: 0x067b009c
     99c:	00040000 	andeq	r0, r4, r0
     9a0:	000001e0 	andeq	r0, r0, r0, ror #3
     9a4:	03230104 			; <UNDEFINED> instruction: 0x03230104
     9a8:	b90c0000 	stmdblt	ip, {}	; <UNPREDICTABLE>
     9ac:	2e00000a 	cdpcs	0, 0, cr0, cr0, cr10, {0}
     9b0:	e8000004 	stmda	r0, {r2}
     9b4:	0a200003 	beq	8009c8 <startup-0x1f7ff638>
     9b8:	a7000005 	strge	r0, [r0, -r5]
     9bc:	02000003 	andeq	r0, r0, #3
     9c0:	07560601 	ldrbeq	r0, [r6, -r1, lsl #12]
     9c4:	d1030000 	mrsle	r0, (UNDEF: 3)
     9c8:	02000000 	andeq	r0, r0, #0
     9cc:	0038182b 	eorseq	r1, r8, fp, lsr #16
     9d0:	01020000 	mrseq	r0, (UNDEF: 2)
     9d4:	00075408 	andeq	r5, r7, r8, lsl #8
     9d8:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
     9dc:	0000079b 	muleq	r0, fp, r7
     9e0:	0002e503 	andeq	lr, r2, r3, lsl #10
     9e4:	19390200 	ldmdbne	r9!, {r9}
     9e8:	00000052 	andeq	r0, r0, r2, asr r0
     9ec:	ed070202 	sfm	f0, 4, [r7, #-8]
     9f0:	03000007 	movweq	r0, #7
     9f4:	000008dd 	ldrdeq	r0, [r0], -sp
     9f8:	65184d02 	ldrvs	r4, [r8, #-3330]	; 0xfffff2fe
     9fc:	02000000 	andeq	r0, r0, #0
     a00:	01b00504 	lslseq	r0, r4, #10
     a04:	f8030000 			; <UNDEFINED> instruction: 0xf8030000
     a08:	02000002 	andeq	r0, r0, #2
     a0c:	0078194f 	rsbseq	r1, r8, pc, asr #18
     a10:	04020000 	streq	r0, [r2], #-0
     a14:	0001d707 	andeq	sp, r1, r7, lsl #14
     a18:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
     a1c:	000001ab 	andeq	r0, r0, fp, lsr #3
     a20:	d2070802 	andle	r0, r7, #131072	; 0x20000
     a24:	04000001 	streq	r0, [r0], #-1
     a28:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     a2c:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
     a30:	0001dc07 	andeq	sp, r1, r7, lsl #24
     a34:	00d30300 	sbcseq	r0, r3, r0, lsl #6
     a38:	18030000 	stmdane	r3, {}	; <UNPREDICTABLE>
     a3c:	00002c13 	andeq	r2, r0, r3, lsl ip
     a40:	02e70300 	rsceq	r0, r7, #0, 6
     a44:	24030000 	strcs	r0, [r3], #-0
     a48:	00004614 	andeq	r4, r0, r4, lsl r6
     a4c:	00a70500 	adceq	r0, r7, r0, lsl #10
     a50:	df030000 	svcle	0x00030000
     a54:	03000008 	movweq	r0, #8
     a58:	0059132c 	subseq	r1, r9, ip, lsr #6
     a5c:	b8050000 	stmdalt	r5, {}	; <UNPREDICTABLE>
     a60:	03000000 	movweq	r0, #0
     a64:	000002fa 	strdeq	r0, [r0], -sl
     a68:	6c143003 	ldcvs	0, cr3, [r4], {3}
     a6c:	05000000 	streq	r0, [r0, #-0]
     a70:	000000c9 	andeq	r0, r0, r9, asr #1
     a74:	00077506 	andeq	r7, r7, r6, lsl #10
     a78:	06fa0400 	ldrbteq	r0, [sl], r0, lsl #8
     a7c:	0000c419 	andeq	ip, r0, r9, lsl r4
     a80:	06ac0700 	strteq	r0, [ip], r0, lsl #14
     a84:	3b050000 	blcc	140a8c <startup-0x1febf574>
     a88:	0000c911 	andeq	ip, r0, r1, lsl r9
     a8c:	01070800 	tsteq	r7, r0, lsl #16
     a90:	00000038 	andeq	r0, r0, r8, lsr r0
     a94:	0e035f06 	cdpeq	15, 0, cr5, cr3, cr6, {0}
     a98:	0000010f 	andeq	r0, r0, pc, lsl #2
     a9c:	00010009 	andeq	r0, r1, r9
     aa0:	2d090000 	stccs	0, cr0, [r9, #-0]
     aa4:	01000002 	tsteq	r0, r2
     aa8:	06280a00 	strteq	r0, [r8], -r0, lsl #20
     aac:	a60905c3 	strge	r0, [r9], -r3, asr #11
     ab0:	0b000001 	bleq	abc <startup-0x1ffff544>
     ab4:	0000069a 	muleq	r0, sl, r6
     ab8:	1105c506 	tstne	r5, r6, lsl #10
     abc:	000000d5 	ldrdeq	r0, [r0], -r5
     ac0:	00db0b00 	sbcseq	r0, fp, r0, lsl #22
     ac4:	c6060000 	strgt	r0, [r6], -r0
     ac8:	00d51105 	sbcseq	r1, r5, r5, lsl #2
     acc:	0b040000 	bleq	100ad4 <startup-0x1feff52c>
     ad0:	000002f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     ad4:	1105c706 	tstne	r5, r6, lsl #14
     ad8:	000000d5 	ldrdeq	r0, [r0], -r5
     adc:	00000b08 	andeq	r0, r0, r8, lsl #22
     ae0:	c8060000 	stmdagt	r6, {}	; <UNPREDICTABLE>
     ae4:	00d51105 	sbcseq	r1, r5, r5, lsl #2
     ae8:	0c0c0000 	stceq	0, cr0, [ip], {-0}
     aec:	00524449 	subseq	r4, r2, r9, asr #8
     af0:	1105c906 	tstne	r5, r6, lsl #18
     af4:	000000d5 	ldrdeq	r0, [r0], -r5
     af8:	444f0c10 	strbmi	r0, [pc], #-3088	; b00 <startup-0x1ffff500>
     afc:	ca060052 	bgt	180c4c <startup-0x1fe7f3b4>
     b00:	00d51105 	sbcseq	r1, r5, r5, lsl #2
     b04:	0b140000 	bleq	500b0c <startup-0x1faff4f4>
     b08:	00000951 	andeq	r0, r0, r1, asr r9
     b0c:	1105cb06 	tstne	r5, r6, lsl #22
     b10:	000000b3 	strheq	r0, [r0], -r3
     b14:	09630b18 	stmdbeq	r3!, {r3, r4, r8, r9, fp}^
     b18:	cc060000 	stcgt	0, cr0, [r6], {-0}
     b1c:	00b31105 	adcseq	r1, r3, r5, lsl #2
     b20:	0b1a0000 	bleq	680b28 <startup-0x1f97f4d8>
     b24:	00000456 	andeq	r0, r0, r6, asr r4
     b28:	1105cd06 	tstne	r5, r6, lsl #26
     b2c:	000000d5 	ldrdeq	r0, [r0], -r5
     b30:	46410c1c 			; <UNDEFINED> instruction: 0x46410c1c
     b34:	ce060052 	mcrgt	0, 0, r0, cr6, cr2, {2}
     b38:	01b61105 			; <UNDEFINED> instruction: 0x01b61105
     b3c:	00200000 	eoreq	r0, r0, r0
     b40:	0000d50d 	andeq	sp, r0, sp, lsl #10
     b44:	0001b600 	andeq	fp, r1, r0, lsl #12
     b48:	00940e00 	addseq	r0, r4, r0, lsl #28
     b4c:	00010000 	andeq	r0, r1, r0
     b50:	0001a605 	andeq	sl, r1, r5, lsl #12
     b54:	04210f00 	strteq	r0, [r1], #-3840	; 0xfffff100
     b58:	cf060000 	svcgt	0x00060000
     b5c:	010f0305 	tsteq	pc, r5, lsl #6
     b60:	07100000 	ldreq	r0, [r0, -r0]
     b64:	00003801 	andeq	r3, r0, r1, lsl #16
     b68:	01420700 	cmpeq	r2, r0, lsl #14
     b6c:	000001ef 	andeq	r0, r0, pc, ror #3
     b70:	0001e909 	andeq	lr, r1, r9, lsl #18
     b74:	63090000 	movwvs	r0, #36864	; 0x9000
     b78:	01000008 	tsteq	r0, r8
     b7c:	00011b09 	andeq	r1, r1, r9, lsl #22
     b80:	4f090200 	svcmi	0x00090200
     b84:	03000001 	movweq	r0, #1
     b88:	09e40300 	stmibeq	r4!, {r8, r9}^
     b8c:	47070000 	strmi	r0, [r7, -r0]
     b90:	0001c802 	andeq	ip, r1, r2, lsl #16
     b94:	01071000 	mrseq	r1, (UNDEF: 7)
     b98:	00000038 	andeq	r0, r0, r8, lsr r0
     b9c:	16014f07 	strne	r4, [r1], -r7, lsl #30
     ba0:	09000002 	stmdbeq	r0, {r1}
     ba4:	00000108 	andeq	r0, r0, r8, lsl #2
     ba8:	092a0900 	stmdbeq	sl!, {r8, fp}
     bac:	00010000 	andeq	r0, r1, r0
     bb0:	00018d03 	andeq	r8, r1, r3, lsl #26
     bb4:	02520700 	subseq	r0, r2, #0, 14
     bb8:	000001fb 	strdeq	r0, [r0], -fp
     bbc:	38010710 	stmdacc	r1, {r4, r8, r9, sl}
     bc0:	07000000 	streq	r0, [r0, -r0]
     bc4:	0249015a 	subeq	r0, r9, #-2147483626	; 0x80000016
     bc8:	5c090000 	stcpl	0, cr0, [r9], {-0}
     bcc:	00000001 	andeq	r0, r0, r1
     bd0:	00031109 	andeq	r1, r3, r9, lsl #2
     bd4:	ab090100 	blge	240fdc <startup-0x1fdbf024>
     bd8:	02000009 	andeq	r0, r0, #9
     bdc:	000a2909 	andeq	r2, sl, r9, lsl #18
     be0:	03000300 	movweq	r0, #768	; 0x300
     be4:	000003b1 			; <UNDEFINED> instruction: 0x000003b1
     be8:	22025f07 	andcs	r5, r2, #7, 30
     bec:	10000002 	andne	r0, r0, r2
     bf0:	00380107 	eorseq	r0, r8, r7, lsl #2
     bf4:	6e070000 	cdpvs	0, 0, cr0, cr7, cr0, {0}
     bf8:	00027601 	andeq	r7, r2, r1, lsl #12
     bfc:	05590900 	ldrbeq	r0, [r9, #-2304]	; 0xfffff700
     c00:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     c04:	000000b7 	strheq	r0, [r0], -r7
     c08:	09700901 	ldmdbeq	r0!, {r0, r8, fp}^
     c0c:	00020000 	andeq	r0, r2, r0
     c10:	0004d303 	andeq	sp, r4, r3, lsl #6
     c14:	02720700 	rsbseq	r0, r2, #0, 14
     c18:	00000255 	andeq	r0, r0, r5, asr r2
     c1c:	38010710 	stmdacc	r1, {r4, r8, r9, sl}
     c20:	07000000 	streq	r0, [r0, -r0]
     c24:	029d017a 	addseq	r0, sp, #-2147483618	; 0x8000001e
     c28:	48090000 	stmdami	r9, {}	; <UNPREDICTABLE>
     c2c:	0000000b 	andeq	r0, r0, fp
     c30:	000a9d09 	andeq	r9, sl, r9, lsl #26
     c34:	03000100 	movweq	r0, #256	; 0x100
     c38:	00000bff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     c3c:	82027d07 	andhi	r7, r2, #448	; 0x1c0
     c40:	11000002 	tstne	r0, r2
     c44:	09840708 	stmibeq	r4, {r3, r8, r9, sl}
     c48:	000002f4 	strdeq	r0, [r0], -r4
     c4c:	0003c312 	andeq	ip, r3, r2, lsl r3
     c50:	0c860700 	stceq	7, cr0, [r6], {0}
     c54:	000000c9 	andeq	r0, r0, r9, asr #1
     c58:	02921200 	addseq	r1, r2, #0, 4
     c5c:	89070000 	stmdbhi	r7, {}	; <UNPREDICTABLE>
     c60:	0001ef14 	andeq	lr, r1, r4, lsl pc
     c64:	37120400 	ldrcc	r0, [r2, -r0, lsl #8]
     c68:	07000001 	streq	r0, [r0, -r1]
     c6c:	0249158c 	subeq	r1, r9, #140, 10	; 0x23000000
     c70:	12050000 	andne	r0, r5, #0
     c74:	000005cc 	andeq	r0, r0, ip, asr #11
     c78:	16158f07 	ldrne	r8, [r5], -r7, lsl #30
     c7c:	06000002 	streq	r0, [r0], -r2
     c80:	00087112 	andeq	r7, r8, r2, lsl r1
     c84:	14920700 	ldrne	r0, [r2], #1792	; 0x700
     c88:	00000276 	andeq	r0, r0, r6, ror r2
     c8c:	72030007 	andvc	r0, r3, #7
     c90:	07000006 	streq	r0, [r0, -r6]
     c94:	02a90294 	adceq	r0, r9, #148, 4	; 0x40000009
     c98:	36130000 	ldrcc	r0, [r3], -r0
     c9c:	0100000c 	tsteq	r0, ip
     ca0:	4e060243 	cdpmi	2, 0, cr0, cr6, cr3, {2}
     ca4:	a4200008 	strtge	r0, [r0], #-8
     ca8:	01000000 	mrseq	r0, (UNDEF: 0)
     cac:	0003689c 	muleq	r3, ip, r8
     cb0:	0de61400 	cfstrdeq	mvd1, [r6]
     cb4:	43010000 	movwmi	r0, #4096	; 0x1000
     cb8:	03682502 	cmneq	r8, #8388608	; 0x800000
     cbc:	91020000 	mrsls	r0, (UNDEF: 2)
     cc0:	0bca146c 	bleq	ff285e78 <doors+0xdf281f70>
     cc4:	43010000 	movwmi	r0, #4096	; 0x1000
     cc8:	00a73502 	adceq	r3, r7, r2, lsl #10
     ccc:	91020000 	mrsls	r0, (UNDEF: 2)
     cd0:	0b24146a 	bleq	905e80 <startup-0x1f6fa180>
     cd4:	43010000 	movwmi	r0, #4096	; 0x1000
     cd8:	009b4d02 	addseq	r4, fp, r2, lsl #26
     cdc:	91020000 	mrsls	r0, (UNDEF: 2)
     ce0:	0b2c1569 	bleq	b0628c <startup-0x1f4f9d74>
     ce4:	45010000 	strmi	r0, [r1, #-0]
     ce8:	00c90c02 	sbceq	r0, r9, r2, lsl #24
     cec:	91020000 	mrsls	r0, (UNDEF: 2)
     cf0:	0c2f1574 	cfstr32eq	mvfx1, [pc], #-464	; b28 <startup-0x1ffff4d8>
     cf4:	46010000 	strmi	r0, [r1], -r0
     cf8:	00c90c02 	sbceq	r0, r9, r2, lsl #24
     cfc:	91020000 	mrsls	r0, (UNDEF: 2)
     d00:	04160070 	ldreq	r0, [r6], #-112	; 0xffffff90
     d04:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
     d08:	000c1f13 	andeq	r1, ip, r3, lsl pc
     d0c:	01f00100 	mvnseq	r0, r0, lsl #2
     d10:	00082a06 	andeq	r2, r8, r6, lsl #20
     d14:	00002420 	andeq	r2, r0, r0, lsr #8
     d18:	a69c0100 	ldrge	r0, [ip], r0, lsl #2
     d1c:	14000003 	strne	r0, [r0], #-3
     d20:	00000de6 	andeq	r0, r0, r6, ror #27
     d24:	2401f001 	strcs	pc, [r1], #-1
     d28:	00000368 	andeq	r0, r0, r8, ror #6
     d2c:	14749102 	ldrbtne	r9, [r4], #-258	; 0xfffffefe
     d30:	000003c3 	andeq	r0, r0, r3, asr #7
     d34:	3401f001 	strcc	pc, [r1], #-1
     d38:	000000a7 	andeq	r0, r0, r7, lsr #1
     d3c:	00729102 	rsbseq	r9, r2, r2, lsl #2
     d40:	000c1413 	andeq	r1, ip, r3, lsl r4
     d44:	01e00100 	mvneq	r0, r0, lsl #2
     d48:	00080c06 	andeq	r0, r8, r6, lsl #24
     d4c:	00001e20 	andeq	r1, r0, r0, lsr #28
     d50:	de9c0100 	fmllee	f0, f4, f0
     d54:	14000003 	strne	r0, [r0], #-3
     d58:	00000de6 	andeq	r0, r0, r6, ror #27
     d5c:	1f01e001 	svcne	0x0001e001
     d60:	00000368 	andeq	r0, r0, r8, ror #6
     d64:	14749102 	ldrbtne	r9, [r4], #-258	; 0xfffffefe
     d68:	00000bc2 	andeq	r0, r0, r2, asr #23
     d6c:	2f01e001 	svccs	0x0001e001
     d70:	000000a7 	andeq	r0, r0, r7, lsr #1
     d74:	00729102 	rsbseq	r9, r2, r2, lsl #2
     d78:	000b5213 	andeq	r5, fp, r3, lsl r2
     d7c:	01c70100 	biceq	r0, r7, r0, lsl #2
     d80:	0007d206 	andeq	sp, r7, r6, lsl #4
     d84:	00003a20 	andeq	r3, r0, r0, lsr #20
     d88:	269c0100 	ldrcs	r0, [ip], r0, lsl #2
     d8c:	14000004 	strne	r0, [r0], #-4
     d90:	00000de6 	andeq	r0, r0, r6, ror #27
     d94:	2201c701 	andcs	ip, r1, #262144	; 0x40000
     d98:	00000368 	andeq	r0, r0, r8, ror #6
     d9c:	14749102 	ldrbtne	r9, [r4], #-258	; 0xfffffefe
     da0:	000003c3 	andeq	r0, r0, r3, asr #7
     da4:	3201c701 	andcc	ip, r1, #262144	; 0x40000
     da8:	000000a7 	andeq	r0, r0, r7, lsr #1
     dac:	14729102 	ldrbtne	r9, [r2], #-258	; 0xfffffefe
     db0:	00000b41 	andeq	r0, r0, r1, asr #22
     db4:	4601c701 	strmi	ip, [r1], -r1, lsl #14
     db8:	0000029d 	muleq	r0, sp, r2
     dbc:	00719102 	rsbseq	r9, r1, r2, lsl #2
     dc0:	000b7713 	andeq	r7, fp, r3, lsl r7
     dc4:	01b10100 			; <UNDEFINED> instruction: 0x01b10100
     dc8:	0007b406 	andeq	fp, r7, r6, lsl #8
     dcc:	00001e20 	andeq	r1, r0, r0, lsr #28
     dd0:	5e9c0100 	fmlple	f0, f4, f0
     dd4:	14000004 	strne	r0, [r0], #-4
     dd8:	00000de6 	andeq	r0, r0, r6, ror #27
     ddc:	2301b101 	movwcs	fp, #4353	; 0x1101
     de0:	00000368 	andeq	r0, r0, r8, ror #6
     de4:	14749102 	ldrbtne	r9, [r4], #-258	; 0xfffffefe
     de8:	000003c3 	andeq	r0, r0, r3, asr #7
     dec:	3301b101 	movwcc	fp, #4353	; 0x1101
     df0:	000000a7 	andeq	r0, r0, r7, lsr #1
     df4:	00729102 	rsbseq	r9, r2, r2, lsl #2
     df8:	000b6013 	andeq	r6, fp, r3, lsl r0
     dfc:	019c0100 	orrseq	r0, ip, r0, lsl #2
     e00:	00079606 	andeq	r9, r7, r6, lsl #12
     e04:	00001e20 	andeq	r1, r0, r0, lsr #28
     e08:	969c0100 	ldrls	r0, [ip], r0, lsl #2
     e0c:	14000004 	strne	r0, [r0], #-4
     e10:	00000de6 	andeq	r0, r0, r6, ror #27
     e14:	21019c01 	tstcs	r1, r1, lsl #24
     e18:	00000368 	andeq	r0, r0, r8, ror #6
     e1c:	14749102 	ldrbtne	r9, [r4], #-258	; 0xfffffefe
     e20:	000003c3 	andeq	r0, r0, r3, asr #7
     e24:	31019c01 	tstcc	r1, r1, lsl #24
     e28:	000000a7 	andeq	r0, r0, r7, lsr #1
     e2c:	00729102 	rsbseq	r9, r2, r2, lsl #2
     e30:	000aa517 	andeq	sl, sl, r7, lsl r5
     e34:	01880100 	orreq	r0, r8, r0, lsl #2
     e38:	0000a70a 	andeq	sl, r0, sl, lsl #14
     e3c:	00078000 	andeq	r8, r7, r0
     e40:	00001620 	andeq	r1, r0, r0, lsr #12
     e44:	c29c0100 	addsgt	r0, ip, #0, 2
     e48:	14000004 	strne	r0, [r0], #-4
     e4c:	00000de6 	andeq	r0, r0, r6, ror #27
     e50:	2c018801 	stccs	8, cr8, [r1], {1}
     e54:	00000368 	andeq	r0, r0, r8, ror #6
     e58:	00749102 	rsbseq	r9, r4, r2, lsl #2
     e5c:	000c4717 	andeq	r4, ip, r7, lsl r7
     e60:	016e0100 	cmneq	lr, r0, lsl #2
     e64:	00009b09 	andeq	r9, r0, r9, lsl #22
     e68:	00074000 	andeq	r4, r7, r0
     e6c:	00004020 	andeq	r4, r0, r0, lsr #32
     e70:	0e9c0100 	fmleqe	f0, f4, f0
     e74:	14000005 	strne	r0, [r0], #-5
     e78:	00000de6 	andeq	r0, r0, r6, ror #27
     e7c:	2e016e01 	cdpcs	14, 0, cr6, cr1, cr1, {0}
     e80:	00000368 	andeq	r0, r0, r8, ror #6
     e84:	146c9102 	strbtne	r9, [ip], #-258	; 0xfffffefe
     e88:	000003c3 	andeq	r0, r0, r3, asr #7
     e8c:	3e016e01 	cdpcc	14, 0, cr6, cr1, cr1, {0}
     e90:	000000a7 	andeq	r0, r0, r7, lsr #1
     e94:	156a9102 	strbne	r9, [sl, #-258]!	; 0xfffffefe
     e98:	00000ba8 	andeq	r0, r0, r8, lsr #23
     e9c:	0b017001 	bleq	5cea8 <startup-0x1ffa3158>
     ea0:	0000009b 	muleq	r0, fp, r0
     ea4:	00779102 	rsbseq	r9, r7, r2, lsl #2
     ea8:	000bd917 	andeq	sp, fp, r7, lsl r9
     eac:	015d0100 	cmpeq	sp, r0, lsl #2
     eb0:	0000a70a 	andeq	sl, r0, sl, lsl #14
     eb4:	00072a00 	andeq	r2, r7, r0, lsl #20
     eb8:	00001620 	andeq	r1, r0, r0, lsr #12
     ebc:	3a9c0100 	bcc	fe7012c4 <doors+0xde6fd3bc>
     ec0:	14000005 	strne	r0, [r0], #-5
     ec4:	00000de6 	andeq	r0, r0, r6, ror #27
     ec8:	2b015d01 	blcs	582d4 <startup-0x1ffa7d2c>
     ecc:	00000368 	andeq	r0, r0, r8, ror #6
     ed0:	00749102 	rsbseq	r9, r4, r2, lsl #2
     ed4:	000b9217 	andeq	r9, fp, r7, lsl r2
     ed8:	01430100 	mrseq	r0, (UNDEF: 83)
     edc:	00009b09 	andeq	r9, r0, r9, lsl #22
     ee0:	0006ea00 	andeq	lr, r6, r0, lsl #20
     ee4:	00004020 	andeq	r4, r0, r0, lsr #32
     ee8:	869c0100 	ldrhi	r0, [ip], r0, lsl #2
     eec:	14000005 	strne	r0, [r0], #-5
     ef0:	00000de6 	andeq	r0, r0, r6, ror #27
     ef4:	2d014301 	stccs	3, cr4, [r1, #-4]
     ef8:	00000368 	andeq	r0, r0, r8, ror #6
     efc:	146c9102 	strbtne	r9, [ip], #-258	; 0xfffffefe
     f00:	000003c3 	andeq	r0, r0, r3, asr #7
     f04:	3d014301 	stccc	3, cr4, [r1, #-4]
     f08:	000000a7 	andeq	r0, r0, r7, lsr #1
     f0c:	156a9102 	strbne	r9, [sl, #-258]!	; 0xfffffefe
     f10:	00000ba8 	andeq	r0, r0, r8, lsr #23
     f14:	0b014501 	bleq	52320 <startup-0x1ffadce0>
     f18:	0000009b 	muleq	r0, fp, r0
     f1c:	00779102 	rsbseq	r9, r7, r2, lsl #2
     f20:	000bec13 	andeq	lr, fp, r3, lsl ip
     f24:	01150100 	tsteq	r5, r0, lsl #2
     f28:	0006a406 	andeq	sl, r6, r6, lsl #8
     f2c:	00004620 	andeq	r4, r0, r0, lsr #12
     f30:	ce9c0100 	fmlgte	f0, f4, f0
     f34:	14000005 	strne	r0, [r0], #-5
     f38:	00000de6 	andeq	r0, r0, r6, ror #27
     f3c:	27011501 	strcs	r1, [r1, -r1, lsl #10]
     f40:	00000368 	andeq	r0, r0, r8, ror #6
     f44:	146c9102 	strbtne	r9, [ip], #-258	; 0xfffffefe
     f48:	000003c3 	andeq	r0, r0, r3, asr #7
     f4c:	37011501 	strcc	r1, [r1, -r1, lsl #10]
     f50:	000000a7 	andeq	r0, r0, r7, lsr #1
     f54:	186a9102 	stmdane	sl!, {r1, r8, ip, pc}^
     f58:	00706d74 	rsbseq	r6, r0, r4, ror sp
     f5c:	11011701 	tstne	r1, r1, lsl #14
     f60:	000000d5 	ldrdeq	r0, [r0], -r5
     f64:	00749102 	rsbseq	r9, r4, r2, lsl #2
     f68:	000b3119 	andeq	r3, fp, r9, lsl r1
     f6c:	06fe0100 	ldrbteq	r0, [lr], r0, lsl #2
     f70:	20000672 	andcs	r0, r0, r2, ror r6
     f74:	00000032 	andeq	r0, r0, r2, lsr r0
     f78:	05f49c01 	ldrbeq	r9, [r4, #3073]!	; 0xc01
     f7c:	b21a0000 	andslt	r0, sl, #0
     f80:	0100000b 	tsteq	r0, fp
     f84:	05f428fe 	ldrbeq	r2, [r4, #2302]!	; 0x8fe
     f88:	91020000 	mrsls	r0, (UNDEF: 2)
     f8c:	04160074 	ldreq	r0, [r6], #-116	; 0xffffff8c
     f90:	000002f4 	strdeq	r0, [r0], -r4
     f94:	000b6d19 	andeq	r6, fp, r9, lsl sp
     f98:	06ca0100 	strbeq	r0, [sl], r0, lsl #2
     f9c:	20000558 	andcs	r0, r0, r8, asr r5
     fa0:	0000011a 	andeq	r0, r0, sl, lsl r1
     fa4:	065c9c01 	ldrbeq	r9, [ip], -r1, lsl #24
     fa8:	e61a0000 	ldr	r0, [sl], -r0
     fac:	0100000d 	tsteq	r0, sp
     fb0:	03681eca 	cmneq	r8, #3232	; 0xca0
     fb4:	91020000 	mrsls	r0, (UNDEF: 2)
     fb8:	0bb21a64 	bleq	fec87950 <doors+0xdec83a48>
     fbc:	ca010000 	bgt	40fc4 <startup-0x1ffbf03c>
     fc0:	0005f437 	andeq	pc, r5, r7, lsr r4	; <UNPREDICTABLE>
     fc4:	60910200 	addsvs	r0, r1, r0, lsl #4
     fc8:	000a961b 	andeq	r9, sl, fp, lsl r6
     fcc:	0ccc0100 	stfeqe	f0, [ip], {0}
     fd0:	000000c9 	andeq	r0, r0, r9, asr #1
     fd4:	1c749102 	ldfnep	f1, [r4], #-8
     fd8:	00736f70 	rsbseq	r6, r3, r0, ror pc
     fdc:	c91bcc01 	ldmdbgt	fp, {r0, sl, fp, lr, pc}
     fe0:	02000000 	andeq	r0, r0, #0
     fe4:	091b7091 	ldmdbeq	fp, {r0, r4, r7, ip, sp, lr}
     fe8:	0100000c 	tsteq	r0, ip
     fec:	00c928cc 	sbceq	r2, r9, ip, asr #17
     ff0:	91020000 	mrsls	r0, (UNDEF: 2)
     ff4:	861d006c 	ldrhi	r0, [sp], -ip, rrx
     ff8:	0100000b 	tsteq	r0, fp
     ffc:	03e8067f 	mvneq	r0, #133169152	; 0x7f00000
    1000:	01702000 	cmneq	r0, r0
    1004:	9c010000 	stcls	0, cr0, [r1], {-0}
    1008:	000de61a 	andeq	lr, sp, sl, lsl r6
    100c:	207f0100 	rsbscs	r0, pc, r0, lsl #2
    1010:	00000368 	andeq	r0, r0, r8, ror #6
    1014:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1018:	0002c000 	andeq	ip, r2, r0
    101c:	c6000400 	strgt	r0, [r0], -r0, lsl #8
    1020:	04000003 	streq	r0, [r0], #-3
    1024:	00032301 	andeq	r2, r3, r1, lsl #6
    1028:	0ca80c00 	stceq	12, cr0, [r8]
    102c:	042e0000 	strteq	r0, [lr], #-0
    1030:	08f40000 	ldmeq	r4!, {}^	; <UNPREDICTABLE>
    1034:	01682000 	cmneq	r8, r0
    1038:	080f0000 	stmdaeq	pc, {}	; <UNPREDICTABLE>
    103c:	01020000 	mrseq	r0, (UNDEF: 2)
    1040:	00075606 	andeq	r5, r7, r6, lsl #12
    1044:	00d10300 	sbcseq	r0, r1, r0, lsl #6
    1048:	2b020000 	blcs	81050 <startup-0x1ff7efb0>
    104c:	00003818 	andeq	r3, r0, r8, lsl r8
    1050:	08010200 	stmdaeq	r1, {r9}
    1054:	00000754 	andeq	r0, r0, r4, asr r7
    1058:	9b050202 	blls	141868 <startup-0x1febe798>
    105c:	02000007 	andeq	r0, r0, #7
    1060:	07ed0702 	strbeq	r0, [sp, r2, lsl #14]!
    1064:	dd030000 	stcle	0, cr0, [r3, #-0]
    1068:	02000008 	andeq	r0, r0, #8
    106c:	0059184d 	subseq	r1, r9, sp, asr #16
    1070:	04020000 	streq	r0, [r2], #-0
    1074:	0001b005 	andeq	fp, r1, r5
    1078:	02f80300 	rscseq	r0, r8, #0, 6
    107c:	4f020000 	svcmi	0x00020000
    1080:	00006c19 	andeq	r6, r0, r9, lsl ip
    1084:	07040200 	streq	r0, [r4, -r0, lsl #4]
    1088:	000001d7 	ldrdeq	r0, [r0], -r7
    108c:	ab050802 	blge	14309c <startup-0x1febcf64>
    1090:	02000001 	andeq	r0, r0, #1
    1094:	01d20708 	bicseq	r0, r2, r8, lsl #14
    1098:	04040000 	streq	r0, [r4], #-0
    109c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    10a0:	07040200 	streq	r0, [r4, -r0, lsl #4]
    10a4:	000001dc 	ldrdeq	r0, [r0], -ip
    10a8:	0000d303 	andeq	sp, r0, r3, lsl #6
    10ac:	13180300 	tstne	r8, #0, 6
    10b0:	0000002c 	andeq	r0, r0, ip, lsr #32
    10b4:	0008df03 	andeq	sp, r8, r3, lsl #30
    10b8:	132c0300 			; <UNDEFINED> instruction: 0x132c0300
    10bc:	0000004d 	andeq	r0, r0, sp, asr #32
    10c0:	00009b05 	andeq	r9, r0, r5, lsl #22
    10c4:	02fa0300 	rscseq	r0, sl, #0, 6
    10c8:	30030000 	andcc	r0, r3, r0
    10cc:	00006014 	andeq	r6, r0, r4, lsl r0
    10d0:	00ac0500 	adceq	r0, ip, r0, lsl #10
    10d4:	ac060000 	stcge	0, cr0, [r6], {-0}
    10d8:	cd000000 	stcgt	0, cr0, [r0, #-0]
    10dc:	07000000 	streq	r0, [r0, -r0]
    10e0:	00000088 	andeq	r0, r0, r8, lsl #1
    10e4:	75080001 	strvc	r0, [r8, #-1]
    10e8:	04000007 	streq	r0, [r0], #-7
    10ec:	a71906fa 			; <UNDEFINED> instruction: 0xa71906fa
    10f0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    10f4:	000006ac 	andeq	r0, r0, ip, lsr #13
    10f8:	ac113b05 			; <UNDEFINED> instruction: 0xac113b05
    10fc:	0a000000 	beq	1104 <startup-0x1fffeefc>
    1100:	00380107 	eorseq	r0, r8, r7, lsl #2
    1104:	5d060000 	stcpl	0, cr0, [r6, #-0]
    1108:	01020e03 	tsteq	r2, r3, lsl #28
    110c:	4c0b0000 	stcmi	0, cr0, [fp], {-0}
    1110:	0000000b 	andeq	r0, r0, fp
    1114:	5445530c 	strbpl	r5, [r5], #-780	; 0xfffffcf4
    1118:	0d000100 	stfeqs	f0, [r0, #-0]
    111c:	0000216a 	andeq	r2, r0, sl, ror #2
    1120:	28035d06 	stmdacs	r3, {r1, r2, r8, sl, fp, ip, lr}
    1124:	000000e6 	andeq	r0, r0, r6, ror #1
    1128:	3801070a 	stmdacc	r1, {r1, r3, r8, r9, sl}
    112c:	06000000 	streq	r0, [r0], -r0
    1130:	2b0e035f 	blcs	381eb4 <startup-0x1fc7e14c>
    1134:	0b000001 	bleq	1140 <startup-0x1fffeec0>
    1138:	00000100 	andeq	r0, r0, r0, lsl #2
    113c:	022d0b00 	eoreq	r0, sp, #0, 22
    1140:	00010000 	andeq	r0, r1, r0
    1144:	0006830d 	andeq	r8, r6, sp, lsl #6
    1148:	035f0600 	cmpeq	pc, #0, 12
    114c:	00010f2f 	andeq	r0, r1, pc, lsr #30
    1150:	06240e00 	strteq	r0, [r4], -r0, lsl #28
    1154:	890905d5 	stmdbhi	r9, {r0, r2, r4, r6, r7, r8, sl}
    1158:	0f000001 	svceq	0x00000001
    115c:	00000d31 	andeq	r0, r0, r1, lsr sp
    1160:	1105d706 	tstne	r5, r6, lsl #14
    1164:	000000b8 	strheq	r0, [r0], -r8
    1168:	4d501000 	ldclmi	0, cr1, [r0, #-0]
    116c:	d8060043 	stmdale	r6, {r0, r1, r6}
    1170:	00b81105 	adcseq	r1, r8, r5, lsl #2
    1174:	0f040000 	svceq	0x00040000
    1178:	00000d75 	andeq	r0, r0, r5, ror sp
    117c:	1105d906 	tstne	r5, r6, lsl #18
    1180:	00000199 	muleq	r0, r9, r1
    1184:	0d520f08 	ldcleq	15, cr0, [r2, #-32]	; 0xffffffe0
    1188:	e1060000 	mrs	r0, (UNDEF: 6)
    118c:	00bd1105 	adcseq	r1, sp, r5, lsl #2
    1190:	0f180000 	svceq	0x00180000
    1194:	00000d2b 	andeq	r0, r0, fp, lsr #26
    1198:	1105e206 	tstne	r5, r6, lsl #4
    119c:	000000b8 	strheq	r0, [r0], -r8
    11a0:	b8060020 	stmdalt	r6, {r5}
    11a4:	99000000 	stmdbls	r0, {}	; <UNPREDICTABLE>
    11a8:	07000001 	streq	r0, [r0, -r1]
    11ac:	00000088 	andeq	r0, r0, r8, lsl #1
    11b0:	89050003 	stmdbhi	r5, {r0, r1}
    11b4:	0d000001 	stceq	0, cr0, [r0, #-4]
    11b8:	00000dc8 	andeq	r0, r0, r8, asr #27
    11bc:	0305e706 	movweq	lr, #22278	; 0x5706
    11c0:	00000138 	andeq	r0, r0, r8, lsr r1
    11c4:	000c7911 	andeq	r7, ip, r1, lsl r9
    11c8:	0cdb0100 	ldfeqe	f0, [fp], {0}
    11cc:	00000102 	andeq	r0, r0, r2, lsl #2
    11d0:	20000a24 	andcs	r0, r0, r4, lsr #20
    11d4:	00000038 	andeq	r0, r0, r8, lsr r0
    11d8:	01d59c01 	bicseq	r9, r5, r1, lsl #24
    11dc:	a8120000 	ldmdage	r2, {}	; <UNPREDICTABLE>
    11e0:	0100000b 	tsteq	r0, fp
    11e4:	01020edd 	ldrdeq	r0, [r2, -sp]
    11e8:	91020000 	mrsls	r0, (UNDEF: 2)
    11ec:	5e130077 	mrcpl	0, 0, r0, cr3, cr7, {3}
    11f0:	0100000c 	tsteq	r0, ip
    11f4:	0a0406ce 	beq	102d34 <startup-0x1fefd2cc>
    11f8:	00202000 	eoreq	r2, r0, r0
    11fc:	9c010000 	stcls	0, cr0, [r1], {-0}
    1200:	000001fb 	strdeq	r0, [r0], -fp
    1204:	000dbf14 	andeq	fp, sp, r4, lsl pc
    1208:	31ce0100 	biccc	r0, lr, r0, lsl #2
    120c:	0000012b 	andeq	r0, r0, fp, lsr #2
    1210:	00779102 	rsbseq	r9, r7, r2, lsl #2
    1214:	000d8c13 	andeq	r8, sp, r3, lsl ip
    1218:	06bd0100 	ldrteq	r0, [sp], r0, lsl #2
    121c:	200009e8 	andcs	r0, r0, r8, ror #19
    1220:	0000001c 	andeq	r0, r0, ip, lsl r0
    1224:	02219c01 	eoreq	r9, r1, #256	; 0x100
    1228:	38140000 	ldmdacc	r4, {}	; <UNPREDICTABLE>
    122c:	0100000d 	tsteq	r0, sp
    1230:	00ac2fbd 	strhteq	r2, [ip], sp
    1234:	91020000 	mrsls	r0, (UNDEF: 2)
    1238:	15130074 	ldrne	r0, [r3, #-116]	; 0xffffff8c
    123c:	0100000d 	tsteq	r0, sp
    1240:	095806a8 	ldmdbeq	r8, {r3, r5, r7, r9, sl}^
    1244:	00902000 	addseq	r2, r0, r0
    1248:	9c010000 	stcls	0, cr0, [r1], {-0}
    124c:	00000265 	andeq	r0, r0, r5, ror #4
    1250:	000dd714 	andeq	sp, sp, r4, lsl r7
    1254:	24a80100 	strtcs	r0, [r8], #256	; 0x100
    1258:	0000008f 	andeq	r0, r0, pc, lsl #1
    125c:	146f9102 	strbtne	r9, [pc], #-258	; 1264 <startup-0x1fffed9c>
    1260:	00000d7c 	andeq	r0, r0, ip, ror sp
    1264:	8f42a801 	svchi	0x0042a801
    1268:	02000000 	andeq	r0, r0, #0
    126c:	74156e91 	ldrvc	r6, [r5], #-3729	; 0xfffff16f
    1270:	0100706d 	tsteq	r0, sp, rrx
    1274:	00ac0caa 	adceq	r0, ip, sl, lsr #25
    1278:	91020000 	mrsls	r0, (UNDEF: 2)
    127c:	5b130074 	blpl	4c1454 <startup-0x1fb3ebac>
    1280:	0100000d 	tsteq	r0, sp
    1284:	09380691 	ldmdbeq	r8!, {r0, r4, r7, r9, sl}
    1288:	00202000 	eoreq	r2, r0, r0
    128c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1290:	0000028b 	andeq	r0, r0, fp, lsl #5
    1294:	000dbf14 	andeq	fp, sp, r4, lsl pc
    1298:	30910100 	addscc	r0, r1, r0, lsl #2
    129c:	0000012b 	andeq	r0, r0, fp, lsr #2
    12a0:	00779102 	rsbseq	r9, r7, r2, lsl #2
    12a4:	000dec13 	andeq	lr, sp, r3, lsl ip
    12a8:	067c0100 	ldrbteq	r0, [ip], -r0, lsl #2
    12ac:	20000916 	andcs	r0, r0, r6, lsl r9
    12b0:	00000022 	andeq	r0, r0, r2, lsr #32
    12b4:	02b19c01 	adcseq	r9, r1, #256	; 0x100
    12b8:	ac140000 	ldcge	0, cr0, [r4], {-0}
    12bc:	0100000d 	tsteq	r0, sp
    12c0:	008f277c 	addeq	r2, pc, ip, ror r7	; <UNPREDICTABLE>
    12c4:	91020000 	mrsls	r0, (UNDEF: 2)
    12c8:	9a160077 	bls	5814ac <startup-0x1fa7eb54>
    12cc:	0100000c 	tsteq	r0, ip
    12d0:	08f40669 	ldmeq	r4!, {r0, r3, r5, r6, r9, sl}^
    12d4:	00222000 	eoreq	r2, r2, r0
    12d8:	9c010000 	stcls	0, cr0, [r1], {-0}
    12dc:	001e2200 	andseq	r2, lr, r0, lsl #4
    12e0:	2a000400 	bcs	22e8 <startup-0x1fffdd18>
    12e4:	04000005 	streq	r0, [r0], #-5
    12e8:	00032301 	andeq	r2, r3, r1, lsl #6
    12ec:	17af0c00 	strne	r0, [pc, r0, lsl #24]!
    12f0:	042e0000 	strteq	r0, [lr], #-0
    12f4:	0a5c0000 	beq	17012fc <startup-0x1e8fed04>
    12f8:	21d82000 	bicscs	r2, r8, r0
    12fc:	0a9c0000 	beq	fe701304 <doors+0xde6fd3fc>
    1300:	01020000 	mrseq	r0, (UNDEF: 2)
    1304:	00075606 	andeq	r5, r7, r6, lsl #12
    1308:	00d10300 	sbcseq	r0, r1, r0, lsl #6
    130c:	2b020000 	blcs	81314 <startup-0x1ff7ecec>
    1310:	00003818 	andeq	r3, r0, r8, lsl r8
    1314:	08010200 	stmdaeq	r1, {r9}
    1318:	00000754 	andeq	r0, r0, r4, asr r7
    131c:	9b050202 	blls	141b2c <startup-0x1febe4d4>
    1320:	03000007 	movweq	r0, #7
    1324:	000002e5 	andeq	r0, r0, r5, ror #5
    1328:	52193902 	andspl	r3, r9, #32768	; 0x8000
    132c:	02000000 	andeq	r0, r0, #0
    1330:	07ed0702 	strbeq	r0, [sp, r2, lsl #14]!
    1334:	dd030000 	stcle	0, cr0, [r3, #-0]
    1338:	02000008 	andeq	r0, r0, #8
    133c:	0065184d 	rsbeq	r1, r5, sp, asr #16
    1340:	04020000 	streq	r0, [r2], #-0
    1344:	0001b005 	andeq	fp, r1, r5
    1348:	02f80300 	rscseq	r0, r8, #0, 6
    134c:	4f020000 	svcmi	0x00020000
    1350:	00007819 	andeq	r7, r0, r9, lsl r8
    1354:	07040200 	streq	r0, [r4, -r0, lsl #4]
    1358:	000001d7 	ldrdeq	r0, [r0], -r7
    135c:	ab050802 	blge	14336c <startup-0x1febcc94>
    1360:	02000001 	andeq	r0, r0, #1
    1364:	01d20708 	bicseq	r0, r2, r8, lsl #14
    1368:	04040000 	streq	r0, [r4], #-0
    136c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    1370:	07040200 	streq	r0, [r4, -r0, lsl #4]
    1374:	000001dc 	ldrdeq	r0, [r0], -ip
    1378:	0000d303 	andeq	sp, r0, r3, lsl #6
    137c:	13180300 	tstne	r8, #0, 6
    1380:	0000002c 	andeq	r0, r0, ip, lsr #32
    1384:	0002e703 	andeq	lr, r2, r3, lsl #14
    1388:	14240300 	strtne	r0, [r4], #-768	; 0xfffffd00
    138c:	00000046 	andeq	r0, r0, r6, asr #32
    1390:	0000a705 	andeq	sl, r0, r5, lsl #14
    1394:	08df0300 	ldmeq	pc, {r8, r9}^	; <UNPREDICTABLE>
    1398:	2c030000 	stccs	0, cr0, [r3], {-0}
    139c:	00005913 	andeq	r5, r0, r3, lsl r9
    13a0:	00b80500 	adcseq	r0, r8, r0, lsl #10
    13a4:	fa030000 	blx	c13ac <startup-0x1ff3ec54>
    13a8:	03000002 	movweq	r0, #2
    13ac:	006c1430 	rsbeq	r1, ip, r0, lsr r4
    13b0:	c9050000 	stmdbgt	r5, {}	; <UNPREDICTABLE>
    13b4:	06000000 	streq	r0, [r0], -r0
    13b8:	00000775 	andeq	r0, r0, r5, ror r7
    13bc:	1906fa04 	stmdbne	r6, {r2, r9, fp, ip, sp, lr, pc}
    13c0:	000000c4 	andeq	r0, r0, r4, asr #1
    13c4:	0006ac07 	andeq	sl, r6, r7, lsl #24
    13c8:	113b0500 	teqne	fp, r0, lsl #10
    13cc:	000000c9 	andeq	r0, r0, r9, asr #1
    13d0:	38010708 	stmdacc	r1, {r3, r8, r9, sl}
    13d4:	06000000 	streq	r0, [r0], -r0
    13d8:	0f0e035d 	svceq	0x000e035d
    13dc:	09000001 	stmdbeq	r0, {r0}
    13e0:	00000b4c 	andeq	r0, r0, ip, asr #22
    13e4:	45530a00 	ldrbmi	r0, [r3, #-2560]	; 0xfffff600
    13e8:	00010054 	andeq	r0, r1, r4, asr r0
    13ec:	00216a0b 	eoreq	r6, r1, fp, lsl #20
    13f0:	035d0600 	cmpeq	sp, #0, 12
    13f4:	0000f328 	andeq	pc, r0, r8, lsr #6
    13f8:	22fc0b00 	rscscs	r0, ip, #0, 22
    13fc:	5d060000 	stcpl	0, cr0, [r6, #-0]
    1400:	00f33403 	rscseq	r3, r3, r3, lsl #8
    1404:	07080000 	streq	r0, [r8, -r0]
    1408:	00003801 	andeq	r3, r0, r1, lsl #16
    140c:	035f0600 	cmpeq	pc, #0, 12
    1410:	0001450e 	andeq	r4, r1, lr, lsl #10
    1414:	01000900 	tsteq	r0, r0, lsl #18
    1418:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    141c:	0000022d 	andeq	r0, r0, sp, lsr #4
    1420:	830b0001 	movwhi	r0, #45057	; 0xb001
    1424:	06000006 	streq	r0, [r0], -r6
    1428:	292f035f 	stmdbcs	pc!, {r0, r1, r2, r3, r4, r6, r8, r9}	; <UNPREDICTABLE>
    142c:	0c000001 	stceq	0, cr0, [r0], {1}
    1430:	07470654 	smlsldeq	r0, r7, r4, r6
    1434:	00035309 	andeq	r5, r3, r9, lsl #6
    1438:	52430d00 	subpl	r0, r3, #0, 26
    143c:	49060031 	stmdbmi	r6, {r0, r4, r5}
    1440:	00b31107 	adcseq	r1, r3, r7, lsl #2
    1444:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    1448:	000006de 	ldrdeq	r0, [r0], -lr
    144c:	11074a06 	tstne	r7, r6, lsl #20
    1450:	000000a7 	andeq	r0, r0, r7, lsr #1
    1454:	52430d02 	subpl	r0, r3, #2, 26	; 0x80
    1458:	4b060032 	blmi	181528 <startup-0x1fe7ead8>
    145c:	00b31107 	adcseq	r1, r3, r7, lsl #2
    1460:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
    1464:	000006e8 	andeq	r0, r0, r8, ror #13
    1468:	11074c06 	tstne	r7, r6, lsl #24
    146c:	000000a7 	andeq	r0, r0, r7, lsr #1
    1470:	04a00e06 	strteq	r0, [r0], #3590	; 0xe06
    1474:	4d060000 	stcmi	0, cr0, [r6, #-0]
    1478:	00b31107 	adcseq	r1, r3, r7, lsl #2
    147c:	0e080000 	cdpeq	0, 0, cr0, cr8, cr0, {0}
    1480:	000006f2 	strdeq	r0, [r0], -r2
    1484:	11074e06 	tstne	r7, r6, lsl #28
    1488:	000000a7 	andeq	r0, r0, r7, lsr #1
    148c:	09c40e0a 	stmibeq	r4, {r1, r3, r9, sl, fp}^
    1490:	4f060000 	svcmi	0x00060000
    1494:	00b31107 	adcseq	r1, r3, r7, lsl #2
    1498:	0e0c0000 	cdpeq	0, 0, cr0, cr12, cr0, {0}
    149c:	000006fc 	strdeq	r0, [r0], -ip
    14a0:	11075006 	tstne	r7, r6
    14a4:	000000a7 	andeq	r0, r0, r7, lsr #1
    14a8:	52530d0e 	subspl	r0, r3, #896	; 0x380
    14ac:	07510600 	ldrbeq	r0, [r1, -r0, lsl #12]
    14b0:	0000b311 	andeq	fp, r0, r1, lsl r3
    14b4:	060e1000 	streq	r1, [lr], -r0
    14b8:	06000007 	streq	r0, [r0], -r7
    14bc:	a7110752 			; <UNDEFINED> instruction: 0xa7110752
    14c0:	12000000 	andne	r0, r0, #0
    14c4:	5247450d 	subpl	r4, r7, #54525952	; 0x3400000
    14c8:	07530600 	ldrbeq	r0, [r3, -r0, lsl #12]
    14cc:	0000b311 	andeq	fp, r0, r1, lsl r3
    14d0:	100e1400 	andne	r1, lr, r0, lsl #8
    14d4:	06000007 	streq	r0, [r0], -r7
    14d8:	a7110754 			; <UNDEFINED> instruction: 0xa7110754
    14dc:	16000000 	strne	r0, [r0], -r0
    14e0:	00019f0e 	andeq	r9, r1, lr, lsl #30
    14e4:	07550600 	ldrbeq	r0, [r5, -r0, lsl #12]
    14e8:	0000b311 	andeq	fp, r0, r1, lsl r3
    14ec:	1a0e1800 	bne	3874f4 <startup-0x1fc78b0c>
    14f0:	06000007 	streq	r0, [r0], -r7
    14f4:	a7110756 			; <UNDEFINED> instruction: 0xa7110756
    14f8:	1a000000 	bne	1500 <startup-0x1fffeb00>
    14fc:	0001a50e 	andeq	sl, r1, lr, lsl #10
    1500:	07570600 	ldrbeq	r0, [r7, -r0, lsl #12]
    1504:	0000b311 	andeq	fp, r0, r1, lsl r3
    1508:	270e1c00 	strcs	r1, [lr, -r0, lsl #24]
    150c:	06000008 	streq	r0, [r0], -r8
    1510:	a7110758 			; <UNDEFINED> instruction: 0xa7110758
    1514:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    1518:	0002790e 	andeq	r7, r2, lr, lsl #18
    151c:	07590600 	ldrbeq	r0, [r9, -r0, lsl #12]
    1520:	0000b311 	andeq	fp, r0, r1, lsl r3
    1524:	3d0e2000 	stccc	0, cr2, [lr, #-0]
    1528:	06000008 	streq	r0, [r0], -r8
    152c:	a711075a 			; <UNDEFINED> instruction: 0xa711075a
    1530:	22000000 	andcs	r0, r0, #0
    1534:	544e430d 	strbpl	r4, [lr], #-781	; 0xfffffcf3
    1538:	075b0600 	ldrbeq	r0, [fp, -r0, lsl #12]
    153c:	0000d511 	andeq	sp, r0, r1, lsl r5
    1540:	500d2400 	andpl	r2, sp, r0, lsl #8
    1544:	06004353 			; <UNDEFINED> instruction: 0x06004353
    1548:	b311075c 	tstlt	r1, #92, 14	; 0x1700000
    154c:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    1550:	00072e0e 	andeq	r2, r7, lr, lsl #28
    1554:	075d0600 	ldrbeq	r0, [sp, -r0, lsl #12]
    1558:	0000a711 	andeq	sl, r0, r1, lsl r7
    155c:	410d2a00 	tstmi	sp, r0, lsl #20
    1560:	06005252 			; <UNDEFINED> instruction: 0x06005252
    1564:	d511075e 	ldrle	r0, [r1, #-1886]	; 0xfffff8a2
    1568:	2c000000 	stccs	0, cr0, [r0], {-0}
    156c:	5243520d 	subpl	r5, r3, #-805306368	; 0xd0000000
    1570:	075f0600 	ldrbeq	r0, [pc, -r0, lsl #12]
    1574:	0000b311 	andeq	fp, r0, r1, lsl r3
    1578:	f60e3000 			; <UNDEFINED> instruction: 0xf60e3000
    157c:	06000001 	streq	r0, [r0], -r1
    1580:	a7110760 	ldrge	r0, [r1, -r0, ror #14]
    1584:	32000000 	andcc	r0, r0, #0
    1588:	0009380e 	andeq	r3, r9, lr, lsl #16
    158c:	07610600 	strbeq	r0, [r1, -r0, lsl #12]!
    1590:	0000d511 	andeq	sp, r0, r1, lsl r5
    1594:	160e3400 	strne	r3, [lr], -r0, lsl #8
    1598:	06000001 	streq	r0, [r0], -r1
    159c:	d5110762 	ldrle	r0, [r1, #-1890]	; 0xfffff89e
    15a0:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    15a4:	0009470e 	andeq	r4, r9, lr, lsl #14
    15a8:	07630600 	strbeq	r0, [r3, -r0, lsl #12]!
    15ac:	0000d511 	andeq	sp, r0, r1, lsl r5
    15b0:	4c0e3c00 	stcmi	12, cr3, [lr], {-0}
    15b4:	06000009 	streq	r0, [r0], -r9
    15b8:	d5110764 	ldrle	r0, [r1, #-1892]	; 0xfffff89c
    15bc:	40000000 	andmi	r0, r0, r0
    15c0:	0005820e 	andeq	r8, r5, lr, lsl #4
    15c4:	07650600 	strbeq	r0, [r5, -r0, lsl #12]!
    15c8:	0000b311 	andeq	fp, r0, r1, lsl r3
    15cc:	010e4400 	tsteq	lr, r0, lsl #8
    15d0:	06000002 	streq	r0, [r0], -r2
    15d4:	a7110766 	ldrge	r0, [r1, -r6, ror #14]
    15d8:	46000000 	strmi	r0, [r0], -r0
    15dc:	5243440d 	subpl	r4, r3, #218103808	; 0xd000000
    15e0:	07670600 	strbeq	r0, [r7, -r0, lsl #12]!
    15e4:	0000b311 	andeq	fp, r0, r1, lsl r3
    15e8:	0c0e4800 	stceq	8, cr4, [lr], {-0}
    15ec:	06000002 	streq	r0, [r0], -r2
    15f0:	a7110768 	ldrge	r0, [r1, -r8, ror #14]
    15f4:	4a000000 	bmi	15fc <startup-0x1fffea04>
    15f8:	00089c0e 	andeq	r9, r8, lr, lsl #24
    15fc:	07690600 	strbeq	r0, [r9, -r0, lsl #12]!
    1600:	0000b311 	andeq	fp, r0, r1, lsl r3
    1604:	170e4c00 	strne	r4, [lr, -r0, lsl #24]
    1608:	06000002 	streq	r0, [r0], -r2
    160c:	a711076a 	ldrge	r0, [r1, -sl, ror #14]
    1610:	4e000000 	cdpmi	0, 0, cr0, cr0, cr0, {0}
    1614:	00524f0d 	subseq	r4, r2, sp, lsl #30
    1618:	11076b06 	tstne	r7, r6, lsl #22
    161c:	000000b3 	strheq	r0, [r0], -r3
    1620:	02220e50 	eoreq	r0, r2, #80, 28	; 0x500
    1624:	6c060000 	stcvs	0, cr0, [r6], {-0}
    1628:	00a71107 	adceq	r1, r7, r7, lsl #2
    162c:	00520000 	subseq	r0, r2, r0
    1630:	0000f40b 	andeq	pc, r0, fp, lsl #8
    1634:	076d0600 	strbeq	r0, [sp, -r0, lsl #12]!
    1638:	00015203 	andeq	r5, r1, r3, lsl #4
    163c:	070c0f00 	streq	r0, [ip, -r0, lsl #30]
    1640:	03ab0937 			; <UNDEFINED> instruction: 0x03ab0937
    1644:	9c100000 	ldcls	0, cr0, [r0], {-0}
    1648:	07000005 	streq	r0, [r0, -r5]
    164c:	00a70c39 	adceq	r0, r7, r9, lsr ip
    1650:	10000000 	andne	r0, r0, r0
    1654:	0000009a 	muleq	r0, sl, r0
    1658:	a70c3c07 	strge	r3, [ip, -r7, lsl #24]
    165c:	02000000 	andeq	r0, r0, #0
    1660:	0008ab10 	andeq	sl, r8, r0, lsl fp
    1664:	0c3f0700 	ldceq	7, cr0, [pc], #-0	; 166c <startup-0x1fffe994>
    1668:	000000c9 	andeq	r0, r0, r9, asr #1
    166c:	07c81004 	strbeq	r1, [r8, r4]
    1670:	43070000 	movwmi	r0, #28672	; 0x7000
    1674:	0000a70c 	andeq	sl, r0, ip, lsl #14
    1678:	89100800 	ldmdbhi	r0, {fp}
    167c:	07000009 	streq	r0, [r0, -r9]
    1680:	009b0b46 	addseq	r0, fp, r6, asr #22
    1684:	000a0000 	andeq	r0, sl, r0
    1688:	00047c03 	andeq	r7, r4, r3, lsl #24
    168c:	034e0700 	movteq	r0, #59136	; 0xe700
    1690:	00000360 	andeq	r0, r0, r0, ror #6
    1694:	5407140f 	strpl	r1, [r7], #-1039	; 0xfffffbf1
    1698:	00042909 	andeq	r2, r4, r9, lsl #18
    169c:	16c81000 	strbne	r1, [r8], r0
    16a0:	56070000 	strpl	r0, [r7], -r0
    16a4:	0000a70c 	andeq	sl, r0, ip, lsl #14
    16a8:	7b100000 	blvc	4016b0 <startup-0x1fbfe950>
    16ac:	07000014 	smladeq	r0, r4, r0, r0
    16b0:	00a70c59 	adceq	r0, r7, r9, asr ip
    16b4:	10020000 	andne	r0, r2, r0
    16b8:	00001038 	andeq	r1, r0, r8, lsr r0
    16bc:	a70c5c07 	strge	r5, [ip, -r7, lsl #24]
    16c0:	04000000 	streq	r0, [r0], #-0
    16c4:	000ed110 	andeq	sp, lr, r0, lsl r1
    16c8:	0c600700 	stcleq	7, cr0, [r0], #-0
    16cc:	000000c9 	andeq	r0, r0, r9, asr #1
    16d0:	11841008 	orrne	r1, r4, r8
    16d4:	63070000 	movwvs	r0, #28672	; 0x7000
    16d8:	0000a70c 	andeq	sl, r0, ip, lsl #14
    16dc:	c4100c00 	ldrgt	r0, [r0], #-3072	; 0xfffff400
    16e0:	07000015 	smladeq	r0, r5, r0, r0
    16e4:	00a70c66 	adceq	r0, r7, r6, ror #24
    16e8:	100e0000 	andne	r0, lr, r0
    16ec:	00001819 	andeq	r1, r0, r9, lsl r8
    16f0:	a70c6a07 	strge	r6, [ip, -r7, lsl #20]
    16f4:	10000000 	andne	r0, r0, r0
    16f8:	0013ee10 	andseq	lr, r3, r0, lsl lr
    16fc:	0c6e0700 	stcleq	7, cr0, [lr], #-0
    1700:	000000a7 	andeq	r0, r0, r7, lsr #1
    1704:	21030012 	tstcs	r3, r2, lsl r0
    1708:	07000017 	smladeq	r0, r7, r0, r0
    170c:	03b70371 			; <UNDEFINED> instruction: 0x03b70371
    1710:	0a0f0000 	beq	3c1718 <startup-0x1fc3e8e8>
    1714:	80097707 	andhi	r7, r9, r7, lsl #14
    1718:	10000004 	andne	r0, r0, r4
    171c:	00000fcd 	andeq	r0, r0, sp, asr #31
    1720:	a70c7a07 	strge	r7, [ip, -r7, lsl #20]
    1724:	00000000 	andeq	r0, r0, r0
    1728:	00149b10 	andseq	r9, r4, r0, lsl fp
    172c:	0c7d0700 	ldcleq	7, cr0, [sp], #-0
    1730:	000000a7 	andeq	r0, r0, r7, lsr #1
    1734:	0f5b1002 	svceq	0x005b1002
    1738:	80070000 	andhi	r0, r7, r0
    173c:	0000a70c 	andeq	sl, r0, ip, lsl #14
    1740:	d2100400 	andsle	r0, r0, #0, 8
    1744:	07000013 	smladeq	r0, r3, r0, r0
    1748:	00a70c83 	adceq	r0, r7, r3, lsl #25
    174c:	10060000 	andne	r0, r6, r0
    1750:	00000f0b 	andeq	r0, r0, fp, lsl #30
    1754:	a70c8607 	strge	r8, [ip, -r7, lsl #12]
    1758:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    175c:	16350300 	ldrtne	r0, [r5], -r0, lsl #6
    1760:	88070000 	stmdahi	r7, {}	; <UNPREDICTABLE>
    1764:	00043503 	andeq	r3, r4, r3, lsl #10
    1768:	070e0f00 	streq	r0, [lr, -r0, lsl #30]
    176c:	04f1098f 	ldrbteq	r0, [r1], #2447	; 0x98f
    1770:	53100000 	tstpl	r0, #0
    1774:	07000012 	smladeq	r0, r2, r0, r0
    1778:	00a70c92 	umlaleq	r0, r7, r2, ip
    177c:	10000000 	andne	r0, r0, r0
    1780:	0000154a 	andeq	r1, r0, sl, asr #10
    1784:	a70c9507 	strge	r9, [ip, -r7, lsl #10]
    1788:	02000000 	andeq	r0, r0, #0
    178c:	0014c510 	andseq	ip, r4, r0, lsl r5
    1790:	0c980700 	ldceq	7, cr0, [r8], {0}
    1794:	000000a7 	andeq	r0, r0, r7, lsr #1
    1798:	13871004 	orrne	r1, r7, #4
    179c:	9b070000 	blls	1c17a4 <startup-0x1fe3e85c>
    17a0:	0000a70c 	andeq	sl, r0, ip, lsl #14
    17a4:	7d100600 	ldcvc	6, cr0, [r0, #-0]
    17a8:	07000013 	smladeq	r0, r3, r0, r0
    17ac:	00a70c9f 	umlaleq	r0, r7, pc, ip	; <UNPREDICTABLE>
    17b0:	10080000 	andne	r0, r8, r0
    17b4:	000016e3 	andeq	r1, r0, r3, ror #13
    17b8:	a70ca207 	strge	sl, [ip, -r7, lsl #4]
    17bc:	0a000000 	beq	17c4 <startup-0x1fffe83c>
    17c0:	00128c10 	andseq	r8, r2, r0, lsl ip
    17c4:	0ca50700 	stceq	7, cr0, [r5]
    17c8:	000000a7 	andeq	r0, r0, r7, lsr #1
    17cc:	2e03000c 	cdpcs	0, 0, cr0, cr3, cr12, {0}
    17d0:	07000012 	smladeq	r0, r2, r0, r0
    17d4:	048c03a7 	streq	r0, [ip], #935	; 0x3a7
    17d8:	79110000 	ldmdbvc	r1, {}	; <UNPREDICTABLE>
    17dc:	01000011 	tsteq	r0, r1, lsl r0
    17e0:	540d0d00 	strpl	r0, [sp], #-3328	; 0xfffff300
    17e4:	e020002b 	eor	r0, r0, fp, lsr #32
    17e8:	01000000 	mrseq	r0, (UNDEF: 0)
    17ec:	0005859c 	muleq	r5, ip, r5
    17f0:	12611200 	rsbne	r1, r1, #0, 4
    17f4:	00010000 	andeq	r0, r1, r0
    17f8:	0585250d 	streq	r2, [r5, #1293]	; 0x50d
    17fc:	91020000 	mrsls	r0, (UNDEF: 2)
    1800:	149b125c 	ldrne	r1, [fp], #604	; 0x25c
    1804:	00010000 	andeq	r0, r1, r0
    1808:	00a7340d 	adceq	r3, r7, sp, lsl #8
    180c:	91020000 	mrsls	r0, (UNDEF: 2)
    1810:	0f5b125a 	svceq	0x005b125a
    1814:	00010000 	andeq	r0, r1, r0
    1818:	00a74d0d 	adceq	r4, r7, sp, lsl #26
    181c:	91020000 	mrsls	r0, (UNDEF: 2)
    1820:	0f0b1258 	svceq	0x000b1258
    1824:	01010000 	mrseq	r0, (UNDEF: 1)
    1828:	00a7210d 	adceq	r2, r7, sp, lsl #2
    182c:	91020000 	mrsls	r0, (UNDEF: 2)
    1830:	0ee41356 	mcreq	3, 7, r1, cr4, cr6, {2}
    1834:	03010000 	movweq	r0, #4096	; 0x1000
    1838:	00a70c0d 	adceq	r0, r7, sp, lsl #24
    183c:	91020000 	mrsls	r0, (UNDEF: 2)
    1840:	115a1366 	cmpne	sl, r6, ror #6
    1844:	03010000 	movweq	r0, #4096	; 0x1000
    1848:	00a71a0d 	adceq	r1, r7, sp, lsl #20
    184c:	91020000 	mrsls	r0, (UNDEF: 2)
    1850:	6d741464 	cfldrdvs	mvd1, [r4, #-400]!	; 0xfffffe70
    1854:	03010070 	movweq	r0, #4208	; 0x1070
    1858:	00a7270d 	adceq	r2, r7, sp, lsl #14
    185c:	91020000 	mrsls	r0, (UNDEF: 2)
    1860:	04150062 	ldreq	r0, [r5], #-98	; 0xffffff9e
    1864:	00000353 	andeq	r0, r0, r3, asr r3
    1868:	0012db11 	andseq	sp, r2, r1, lsl fp
    186c:	0cd70100 	ldfeqe	f0, [r7], {0}
    1870:	002a800d 	eoreq	r8, sl, sp
    1874:	0000d420 	andeq	sp, r0, r0, lsr #8
    1878:	139c0100 	orrsne	r0, ip, #0, 2
    187c:	12000006 	andne	r0, r0, #6
    1880:	00001261 	andeq	r1, r0, r1, ror #4
    1884:	250cd701 	strcs	sp, [ip, #-1793]	; 0xfffff8ff
    1888:	00000585 	andeq	r0, r0, r5, lsl #11
    188c:	125c9102 	subsne	r9, ip, #-2147483648	; 0x80000000
    1890:	0000149b 	muleq	r0, fp, r4
    1894:	340cd701 	strcc	sp, [ip], #-1793	; 0xfffff8ff
    1898:	000000a7 	andeq	r0, r0, r7, lsr #1
    189c:	125a9102 	subsne	r9, sl, #-2147483648	; 0x80000000
    18a0:	00000f5b 	andeq	r0, r0, fp, asr pc
    18a4:	4d0cd701 	stcmi	7, cr13, [ip, #-4]
    18a8:	000000a7 	andeq	r0, r0, r7, lsr #1
    18ac:	12589102 	subsne	r9, r8, #-2147483648	; 0x80000000
    18b0:	00000f0b 	andeq	r0, r0, fp, lsl #30
    18b4:	210cd801 	tstcs	ip, r1, lsl #16
    18b8:	000000a7 	andeq	r0, r0, r7, lsr #1
    18bc:	13569102 	cmpne	r6, #-2147483648	; 0x80000000
    18c0:	00000ee4 	andeq	r0, r0, r4, ror #29
    18c4:	0c0cda01 			; <UNDEFINED> instruction: 0x0c0cda01
    18c8:	000000a7 	andeq	r0, r0, r7, lsr #1
    18cc:	13669102 	cmnne	r6, #-2147483648	; 0x80000000
    18d0:	0000115a 	andeq	r1, r0, sl, asr r1
    18d4:	1a0cda01 	bne	3380e0 <startup-0x1fcc7f20>
    18d8:	000000a7 	andeq	r0, r0, r7, lsr #1
    18dc:	14649102 	strbtne	r9, [r4], #-258	; 0xfffffefe
    18e0:	00706d74 	rsbseq	r6, r0, r4, ror sp
    18e4:	270cda01 	strcs	sp, [ip, -r1, lsl #20]
    18e8:	000000a7 	andeq	r0, r0, r7, lsr #1
    18ec:	00629102 	rsbeq	r9, r2, r2, lsl #2
    18f0:	00159511 	andseq	r9, r5, r1, lsl r5
    18f4:	0cad0100 	stfeqs	f0, [sp]
    18f8:	0029aa0d 	eoreq	sl, r9, sp, lsl #20
    18fc:	0000d620 	andeq	sp, r0, r0, lsr #12
    1900:	9b9c0100 	blls	fe701d08 <doors+0xde6fde00>
    1904:	12000006 	andne	r0, r0, #6
    1908:	00001261 	andeq	r1, r0, r1, ror #4
    190c:	250cad01 	strcs	sl, [ip, #-3329]	; 0xfffff2ff
    1910:	00000585 	andeq	r0, r0, r5, lsl #11
    1914:	125c9102 	subsne	r9, ip, #-2147483648	; 0x80000000
    1918:	0000149b 	muleq	r0, fp, r4
    191c:	340cad01 	strcc	sl, [ip], #-3329	; 0xfffff2ff
    1920:	000000a7 	andeq	r0, r0, r7, lsr #1
    1924:	125a9102 	subsne	r9, sl, #-2147483648	; 0x80000000
    1928:	00000f5b 	andeq	r0, r0, fp, asr pc
    192c:	4d0cad01 	stcmi	13, cr10, [ip, #-4]
    1930:	000000a7 	andeq	r0, r0, r7, lsr #1
    1934:	12589102 	subsne	r9, r8, #-2147483648	; 0x80000000
    1938:	00000f0b 	andeq	r0, r0, fp, lsl #30
    193c:	210cae01 	tstcs	ip, r1, lsl #28
    1940:	000000a7 	andeq	r0, r0, r7, lsr #1
    1944:	13569102 	cmpne	r6, #-2147483648	; 0x80000000
    1948:	00000edb 	ldrdeq	r0, [r0], -fp
    194c:	0c0cb001 	stceq	0, cr11, [ip], {1}
    1950:	000000a7 	andeq	r0, r0, r7, lsr #1
    1954:	13669102 	cmnne	r6, #-2147483648	; 0x80000000
    1958:	0000115a 	andeq	r1, r0, sl, asr r1
    195c:	1a0cb001 	bne	32d968 <startup-0x1fcd2698>
    1960:	000000a7 	andeq	r0, r0, r7, lsr #1
    1964:	14649102 	strbtne	r9, [r4], #-258	; 0xfffffefe
    1968:	00706d74 	rsbseq	r6, r0, r4, ror sp
    196c:	270cb001 	strcs	fp, [ip, -r1]
    1970:	000000a7 	andeq	r0, r0, r7, lsr #1
    1974:	00629102 	rsbeq	r9, r2, r2, lsl #2
    1978:	0015ec11 	andseq	lr, r5, r1, lsl ip
    197c:	0c840100 	stfeqs	f0, [r4], {0}
    1980:	0028f80d 	eoreq	pc, r8, sp, lsl #16
    1984:	0000b220 	andeq	fp, r0, r0, lsr #4
    1988:	139c0100 	orrsne	r0, ip, #0, 2
    198c:	12000007 	andne	r0, r0, #7
    1990:	00001261 	andeq	r1, r0, r1, ror #4
    1994:	250c8401 	strcs	r8, [ip, #-1025]	; 0xfffffbff
    1998:	00000585 	andeq	r0, r0, r5, lsl #11
    199c:	125c9102 	subsne	r9, ip, #-2147483648	; 0x80000000
    19a0:	0000149b 	muleq	r0, fp, r4
    19a4:	340c8401 	strcc	r8, [ip], #-1025	; 0xfffffbff
    19a8:	000000a7 	andeq	r0, r0, r7, lsr #1
    19ac:	125a9102 	subsne	r9, sl, #-2147483648	; 0x80000000
    19b0:	00000f5b 	andeq	r0, r0, fp, asr pc
    19b4:	4d0c8401 	cfstrsmi	mvf8, [ip, #-4]
    19b8:	000000a7 	andeq	r0, r0, r7, lsr #1
    19bc:	12589102 	subsne	r9, r8, #-2147483648	; 0x80000000
    19c0:	00000f0b 	andeq	r0, r0, fp, lsl #30
    19c4:	210c8501 	tstcs	ip, r1, lsl #10
    19c8:	000000a7 	andeq	r0, r0, r7, lsr #1
    19cc:	13569102 	cmpne	r6, #-2147483648	; 0x80000000
    19d0:	00000edb 	ldrdeq	r0, [r0], -fp
    19d4:	0c0c8701 	stceq	7, cr8, [ip], {1}
    19d8:	000000a7 	andeq	r0, r0, r7, lsr #1
    19dc:	13669102 	cmnne	r6, #-2147483648	; 0x80000000
    19e0:	0000115a 	andeq	r1, r0, sl, asr r1
    19e4:	1a0c8701 	bne	3235f0 <startup-0x1fcdca10>
    19e8:	000000a7 	andeq	r0, r0, r7, lsr #1
    19ec:	00649102 	rsbeq	r9, r4, r2, lsl #2
    19f0:	00176116 	andseq	r6, r7, r6, lsl r1
    19f4:	0c650100 	stfeqe	f0, [r5], #-0
    19f8:	0028d806 	eoreq	sp, r8, r6, lsl #16
    19fc:	00002020 	andeq	r2, r0, r0, lsr #32
    1a00:	4b9c0100 	blmi	fe701e08 <doors+0xde6fdf00>
    1a04:	12000007 	andne	r0, r0, #7
    1a08:	00001261 	andeq	r1, r0, r1, ror #4
    1a0c:	230c6501 	movwcs	r6, #50433	; 0xc501
    1a10:	00000585 	andeq	r0, r0, r5, lsl #11
    1a14:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
    1a18:	0000141f 	andeq	r1, r0, pc, lsl r4
    1a1c:	320c6501 	andcc	r6, ip, #4194304	; 0x400000
    1a20:	000000a7 	andeq	r0, r0, r7, lsr #1
    1a24:	00729102 	rsbseq	r9, r2, r2, lsl #2
    1a28:	00177d16 	andseq	r7, r7, r6, lsl sp
    1a2c:	0c320100 	ldfeqs	f0, [r2], #-0
    1a30:	00289806 	eoreq	r9, r8, r6, lsl #16
    1a34:	00004020 	andeq	r4, r0, r0, lsr #32
    1a38:	839c0100 	orrshi	r0, ip, #0, 2
    1a3c:	12000007 	andne	r0, r0, #7
    1a40:	00001261 	andeq	r1, r0, r1, ror #4
    1a44:	280c3201 	stmdacs	ip, {r0, r9, ip, sp}
    1a48:	00000585 	andeq	r0, r0, r5, lsl #11
    1a4c:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
    1a50:	00000dbf 			; <UNDEFINED> instruction: 0x00000dbf
    1a54:	3e0c3201 	cdpcc	2, 0, cr3, cr12, cr1, {0}
    1a58:	00000145 	andeq	r0, r0, r5, asr #2
    1a5c:	00739102 	rsbseq	r9, r3, r2, lsl #2
    1a60:	000f7016 	andeq	r7, pc, r6, lsl r0	; <UNPREDICTABLE>
    1a64:	0bfe0100 	bleq	fff81e6c <doors+0xdff7df64>
    1a68:	0027c206 	eoreq	ip, r7, r6, lsl #4
    1a6c:	0000d620 	andeq	sp, r0, r0, lsr #12
    1a70:	0b9c0100 	bleq	fe701e78 <doors+0xde6fdf70>
    1a74:	12000008 	andne	r0, r0, #8
    1a78:	00001261 	andeq	r1, r0, r1, ror #4
    1a7c:	2e0bfe01 	cdpcs	14, 0, cr15, cr11, cr1, {0}
    1a80:	00000585 	andeq	r0, r0, r5, lsl #11
    1a84:	125c9102 	subsne	r9, ip, #-2147483648	; 0x80000000
    1a88:	00001266 	andeq	r1, r0, r6, ror #4
    1a8c:	3d0bfe01 	stccc	14, cr15, [fp, #-4]
    1a90:	000000a7 	andeq	r0, r0, r7, lsr #1
    1a94:	125a9102 	subsne	r9, sl, #-2147483648	; 0x80000000
    1a98:	00000fb2 			; <UNDEFINED> instruction: 0x00000fb2
    1a9c:	2a0bff01 	bcs	3016a8 <startup-0x1fcfe958>
    1aa0:	000000a7 	andeq	r0, r0, r7, lsr #1
    1aa4:	12589102 	subsne	r9, r8, #-2147483648	; 0x80000000
    1aa8:	00000ea9 	andeq	r0, r0, r9, lsr #29
    1aac:	440bff01 	strmi	pc, [fp], #-3841	; 0xfffff0ff
    1ab0:	000000a7 	andeq	r0, r0, r7, lsr #1
    1ab4:	13569102 	cmpne	r6, #-2147483648	; 0x80000000
    1ab8:	00001323 	andeq	r1, r0, r3, lsr #6
    1abc:	0c0c0101 	stfeqs	f0, [ip], {1}
    1ac0:	000000a7 	andeq	r0, r0, r7, lsr #1
    1ac4:	13669102 	cmnne	r6, #-2147483648	; 0x80000000
    1ac8:	00000edb 	ldrdeq	r0, [r0], -fp
    1acc:	0c0c0201 	sfmeq	f0, 4, [ip], {1}
    1ad0:	000000a7 	andeq	r0, r0, r7, lsr #1
    1ad4:	13649102 	cmnne	r4, #-2147483648	; 0x80000000
    1ad8:	0000115a 	andeq	r1, r0, sl, asr r1
    1adc:	0c0c0301 	stceq	3, cr0, [ip], {1}
    1ae0:	000000a7 	andeq	r0, r0, r7, lsr #1
    1ae4:	00629102 	rsbeq	r9, r2, r2, lsl #2
    1ae8:	00184616 	andseq	r4, r8, r6, lsl r6
    1aec:	0bc40100 	bleq	ff101ef4 <doors+0xdf0fdfec>
    1af0:	00275006 	eoreq	r5, r7, r6
    1af4:	00007220 	andeq	r7, r0, r0, lsr #4
    1af8:	739c0100 	orrsvc	r0, ip, #0, 2
    1afc:	12000008 	andne	r0, r0, #8
    1b00:	00001261 	andeq	r1, r0, r1, ror #4
    1b04:	210bc401 	tstcs	fp, r1, lsl #8
    1b08:	00000585 	andeq	r0, r0, r5, lsl #11
    1b0c:	12649102 	rsbne	r9, r4, #-2147483648	; 0x80000000
    1b10:	00001369 	andeq	r1, r0, r9, ror #6
    1b14:	300bc401 	andcc	ip, fp, r1, lsl #8
    1b18:	000000a7 	andeq	r0, r0, r7, lsr #1
    1b1c:	12629102 	rsbne	r9, r2, #-2147483648	; 0x80000000
    1b20:	0000132b 	andeq	r1, r0, fp, lsr #6
    1b24:	1d0bc501 	cfstr32ne	mvfx12, [fp, #-4]
    1b28:	000000a7 	andeq	r0, r0, r7, lsr #1
    1b2c:	12609102 	rsbne	r9, r0, #-2147483648	; 0x80000000
    1b30:	000017a2 	andeq	r1, r0, r2, lsr #15
    1b34:	3a0bc501 	bcc	2f2f40 <startup-0x1fd0d0c0>
    1b38:	000000a7 	andeq	r0, r0, r7, lsr #1
    1b3c:	135e9102 	cmpne	lr, #-2147483648	; 0x80000000
    1b40:	00001323 	andeq	r1, r0, r3, lsr #6
    1b44:	0c0bc701 	stceq	7, cr12, [fp], {1}
    1b48:	000000a7 	andeq	r0, r0, r7, lsr #1
    1b4c:	006e9102 	rsbeq	r9, lr, r2, lsl #2
    1b50:	00120216 	andseq	r0, r2, r6, lsl r2
    1b54:	0ba60100 	bleq	fe981f5c <doors+0xde97e054>
    1b58:	00271806 	eoreq	r1, r7, r6, lsl #16
    1b5c:	00003820 	andeq	r3, r0, r0, lsr #16
    1b60:	ab9c0100 	blge	fe701f68 <doors+0xde6fe060>
    1b64:	12000008 	andne	r0, r0, #8
    1b68:	00001261 	andeq	r1, r0, r1, ror #4
    1b6c:	2d0ba601 	stccs	6, cr10, [fp, #-4]
    1b70:	00000585 	andeq	r0, r0, r5, lsl #11
    1b74:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
    1b78:	000011da 	ldrdeq	r1, [r0], -sl
    1b7c:	3c0ba601 	stccc	6, cr10, [fp], {1}
    1b80:	000000a7 	andeq	r0, r0, r7, lsr #1
    1b84:	00729102 	rsbseq	r9, r2, r2, lsl #2
    1b88:	0011ee16 	andseq	lr, r1, r6, lsl lr
    1b8c:	0b8f0100 	bleq	fe3c1f94 <doors+0xde3be08c>
    1b90:	0026e006 	eoreq	lr, r6, r6
    1b94:	00003820 	andeq	r3, r0, r0, lsr #16
    1b98:	e39c0100 	orrs	r0, ip, #0, 2
    1b9c:	12000008 	andne	r0, r0, #8
    1ba0:	00001261 	andeq	r1, r0, r1, ror #4
    1ba4:	270b8f01 	strcs	r8, [fp, -r1, lsl #30]
    1ba8:	00000585 	andeq	r0, r0, r5, lsl #11
    1bac:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
    1bb0:	000016ba 			; <UNDEFINED> instruction: 0x000016ba
    1bb4:	360b8f01 	strcc	r8, [fp], -r1, lsl #30
    1bb8:	000000a7 	andeq	r0, r0, r7, lsr #1
    1bbc:	00729102 	rsbseq	r9, r2, r2, lsl #2
    1bc0:	0012a016 	andseq	sl, r2, r6, lsl r0
    1bc4:	0b770100 	bleq	1dc1fcc <startup-0x1e23e034>
    1bc8:	0026a806 	eoreq	sl, r6, r6, lsl #16
    1bcc:	00003820 	andeq	r3, r0, r0, lsr #16
    1bd0:	1b9c0100 	blne	fe701fd8 <doors+0xde6fe0d0>
    1bd4:	12000009 	andne	r0, r0, #9
    1bd8:	00001261 	andeq	r1, r0, r1, ror #4
    1bdc:	2b0b7701 	blcs	2df7e8 <startup-0x1fd20818>
    1be0:	00000585 	andeq	r0, r0, r5, lsl #11
    1be4:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
    1be8:	00000e5d 	andeq	r0, r0, sp, asr lr
    1bec:	3a0b7701 	bcc	2df7f8 <startup-0x1fd20808>
    1bf0:	000000a7 	andeq	r0, r0, r7, lsr #1
    1bf4:	00729102 	rsbseq	r9, r2, r2, lsl #2
    1bf8:	000ef416 	andeq	pc, lr, r6, lsl r4	; <UNPREDICTABLE>
    1bfc:	0b4c0100 	bleq	1302004 <startup-0x1ecfdffc>
    1c00:	00266006 	eoreq	r6, r6, r6
    1c04:	00004820 	andeq	r4, r0, r0, lsr #16
    1c08:	639c0100 	orrsvs	r0, ip, #0, 2
    1c0c:	12000009 	andne	r0, r0, #9
    1c10:	00001261 	andeq	r1, r0, r1, ror #4
    1c14:	2a0b4c01 	bcs	2d4c20 <startup-0x1fd2b3e0>
    1c18:	00000585 	andeq	r0, r0, r5, lsl #11
    1c1c:	126c9102 	rsbne	r9, ip, #-2147483648	; 0x80000000
    1c20:	00000e46 	andeq	r0, r0, r6, asr #28
    1c24:	390b4c01 	stmdbcc	fp, {r0, sl, fp, lr}
    1c28:	000000a7 	andeq	r0, r0, r7, lsr #1
    1c2c:	136a9102 	cmnne	sl, #-2147483648	; 0x80000000
    1c30:	00001323 	andeq	r1, r0, r3, lsr #6
    1c34:	0c0b4e01 	stceq	14, cr4, [fp], {1}
    1c38:	000000a7 	andeq	r0, r0, r7, lsr #1
    1c3c:	00769102 	rsbseq	r9, r6, r2, lsl #2
    1c40:	0015d417 	andseq	sp, r5, r7, lsl r4
    1c44:	0b050100 	bleq	14204c <startup-0x1febdfb4>
    1c48:	00260e06 	eoreq	r0, r6, r6, lsl #28
    1c4c:	00005220 	andeq	r5, r0, r0, lsr #4
    1c50:	bb9c0100 	bllt	fe702058 <doors+0xde6fe150>
    1c54:	12000009 	andne	r0, r0, #9
    1c58:	00001261 	andeq	r1, r0, r1, ror #4
    1c5c:	2b0b0501 	blcs	2c3068 <startup-0x1fd3cf98>
    1c60:	00000585 	andeq	r0, r0, r5, lsl #11
    1c64:	12649102 	rsbne	r9, r4, #-2147483648	; 0x80000000
    1c68:	00001369 	andeq	r1, r0, r9, ror #6
    1c6c:	3a0b0501 	bcc	2c3078 <startup-0x1fd3cf88>
    1c70:	000000a7 	andeq	r0, r0, r7, lsr #1
    1c74:	12629102 	rsbne	r9, r2, #-2147483648	; 0x80000000
    1c78:	0000132b 	andeq	r1, r0, fp, lsr #6
    1c7c:	270b0601 	strcs	r0, [fp, -r1, lsl #12]
    1c80:	000000a7 	andeq	r0, r0, r7, lsr #1
    1c84:	12609102 	rsbne	r9, r0, #-2147483648	; 0x80000000
    1c88:	000017a2 	andeq	r1, r0, r2, lsr #15
    1c8c:	440b0601 	strmi	r0, [fp], #-1537	; 0xfffff9ff
    1c90:	000000a7 	andeq	r0, r0, r7, lsr #1
    1c94:	005e9102 	subseq	r9, lr, r2, lsl #2
    1c98:	00102017 	andseq	r2, r0, r7, lsl r0
    1c9c:	0ad60100 	beq	ff5820a4 <doors+0xdf57e19c>
    1ca0:	00258206 	eoreq	r8, r5, r6, lsl #4
    1ca4:	00008c20 	andeq	r8, r0, r0, lsr #24
    1ca8:	239c0100 	orrscs	r0, ip, #0, 2
    1cac:	1200000a 	andne	r0, r0, #10
    1cb0:	00001261 	andeq	r1, r0, r1, ror #4
    1cb4:	2b0ad601 	blcs	2b74c0 <startup-0x1fd48b40>
    1cb8:	00000585 	andeq	r0, r0, r5, lsl #11
    1cbc:	125c9102 	subsne	r9, ip, #-2147483648	; 0x80000000
    1cc0:	00001369 	andeq	r1, r0, r9, ror #6
    1cc4:	3a0ad601 	bcc	2b74d0 <startup-0x1fd48b30>
    1cc8:	000000a7 	andeq	r0, r0, r7, lsr #1
    1ccc:	125a9102 	subsne	r9, sl, #-2147483648	; 0x80000000
    1cd0:	0000132b 	andeq	r1, r0, fp, lsr #6
    1cd4:	260ad701 	strcs	sp, [sl], -r1, lsl #14
    1cd8:	000000a7 	andeq	r0, r0, r7, lsr #1
    1cdc:	12589102 	subsne	r9, r8, #-2147483648	; 0x80000000
    1ce0:	000017a2 	andeq	r1, r0, r2, lsr #15
    1ce4:	430ad701 	movwmi	sp, #42753	; 0xa701
    1ce8:	000000a7 	andeq	r0, r0, r7, lsr #1
    1cec:	13569102 	cmpne	r6, #-2147483648	; 0x80000000
    1cf0:	00001323 	andeq	r1, r0, r3, lsr #6
    1cf4:	0c0ad901 			; <UNDEFINED> instruction: 0x0c0ad901
    1cf8:	000000a7 	andeq	r0, r0, r7, lsr #1
    1cfc:	00669102 	rsbeq	r9, r6, r2, lsl #2
    1d00:	0014aa17 	andseq	sl, r4, r7, lsl sl
    1d04:	0aae0100 	beq	feb8210c <doors+0xdeb7e204>
    1d08:	00250606 	eoreq	r0, r5, r6, lsl #12
    1d0c:	00007c20 	andeq	r7, r0, r0, lsr #24
    1d10:	7b9c0100 	blvc	fe702118 <doors+0xde6fe210>
    1d14:	1200000a 	andne	r0, r0, #10
    1d18:	00001261 	andeq	r1, r0, r1, ror #4
    1d1c:	2e0aae01 	cdpcs	14, 0, cr10, cr10, cr1, {0}
    1d20:	00000585 	andeq	r0, r0, r5, lsl #11
    1d24:	126c9102 	rsbne	r9, ip, #-2147483648	; 0x80000000
    1d28:	00001569 	andeq	r1, r0, r9, ror #10
    1d2c:	3d0aae01 	stccc	14, cr10, [sl, #-4]
    1d30:	000000a7 	andeq	r0, r0, r7, lsr #1
    1d34:	126a9102 	rsbne	r9, sl, #-2147483648	; 0x80000000
    1d38:	0000149b 	muleq	r0, fp, r4
    1d3c:	2a0aaf01 	bcs	2ad948 <startup-0x1fd526b8>
    1d40:	000000a7 	andeq	r0, r0, r7, lsr #1
    1d44:	12689102 	rsbne	r9, r8, #-2147483648	; 0x80000000
    1d48:	00000f0f 	andeq	r0, r0, pc, lsl #30
    1d4c:	430aaf01 	movwmi	sl, #44801	; 0xaf01
    1d50:	000000a7 	andeq	r0, r0, r7, lsr #1
    1d54:	00669102 	rsbeq	r9, r6, r2, lsl #2
    1d58:	00151717 	andseq	r1, r5, r7, lsl r7
    1d5c:	0a900100 	beq	fe402164 <doors+0xde3fe25c>
    1d60:	0024d206 	eoreq	sp, r4, r6, lsl #4
    1d64:	00003420 	andeq	r3, r0, r0, lsr #8
    1d68:	b39c0100 	orrslt	r0, ip, #0, 2
    1d6c:	1200000a 	andne	r0, r0, #10
    1d70:	00001261 	andeq	r1, r0, r1, ror #4
    1d74:	2f0a9001 	svccs	0x000a9001
    1d78:	00000585 	andeq	r0, r0, r5, lsl #11
    1d7c:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
    1d80:	00000e46 	andeq	r0, r0, r6, asr #28
    1d84:	3e0a9001 	cdpcc	0, 0, cr9, cr10, cr1, {0}
    1d88:	000000a7 	andeq	r0, r0, r7, lsr #1
    1d8c:	00729102 	rsbseq	r9, r2, r2, lsl #2
    1d90:	000f1816 	andeq	r1, pc, r6, lsl r8	; <UNPREDICTABLE>
    1d94:	0a7b0100 	beq	1ec219c <startup-0x1e13de64>
    1d98:	0024b206 	eoreq	fp, r4, r6, lsl #4
    1d9c:	00002020 	andeq	r2, r0, r0, lsr #32
    1da0:	db9c0100 	blle	fe7021a8 <doors+0xde6fe2a0>
    1da4:	1200000a 	andne	r0, r0, #10
    1da8:	00001261 	andeq	r1, r0, r1, ror #4
    1dac:	2b0a7b01 	blcs	2a09b8 <startup-0x1fd5f648>
    1db0:	00000585 	andeq	r0, r0, r5, lsl #11
    1db4:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1db8:	0010e616 	andseq	lr, r0, r6, lsl r6
    1dbc:	0a540100 	beq	15021c4 <startup-0x1eafde3c>
    1dc0:	00247206 	eoreq	r7, r4, r6, lsl #4
    1dc4:	00004020 	andeq	r4, r0, r0, lsr #32
    1dc8:	139c0100 	orrsne	r0, ip, #0, 2
    1dcc:	1200000b 	andne	r0, r0, #11
    1dd0:	00001261 	andeq	r1, r0, r1, ror #4
    1dd4:	230a5401 	movwcs	r5, #41985	; 0xa401
    1dd8:	00000585 	andeq	r0, r0, r5, lsl #11
    1ddc:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
    1de0:	00000dbf 			; <UNDEFINED> instruction: 0x00000dbf
    1de4:	390a5401 	stmdbcc	sl, {r0, sl, ip, lr}
    1de8:	00000145 	andeq	r0, r0, r5, asr #2
    1dec:	00739102 	rsbseq	r9, r3, r2, lsl #2
    1df0:	000e3b16 	andeq	r3, lr, r6, lsl fp
    1df4:	0a3a0100 	beq	e821fc <startup-0x1f17de04>
    1df8:	00242006 	eoreq	r2, r4, r6
    1dfc:	00005220 	andeq	r5, r0, r0, lsr #4
    1e00:	5b9c0100 	blpl	fe702208 <doors+0xde6fe300>
    1e04:	1200000b 	andne	r0, r0, #11
    1e08:	00001261 	andeq	r1, r0, r1, ror #4
    1e0c:	1e0a3a01 	vmlane.f32	s6, s20, s2
    1e10:	00000585 	andeq	r0, r0, r5, lsl #11
    1e14:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
    1e18:	000012e6 	andeq	r1, r0, r6, ror #5
    1e1c:	2d0a3a01 	vstrcs	s6, [sl, #-4]
    1e20:	000000a7 	andeq	r0, r0, r7, lsr #1
    1e24:	12729102 	rsbsne	r9, r2, #-2147483648	; 0x80000000
    1e28:	00000dbf 			; <UNDEFINED> instruction: 0x00000dbf
    1e2c:	4c0a3a01 			; <UNDEFINED> instruction: 0x4c0a3a01
    1e30:	00000145 	andeq	r0, r0, r5, asr #2
    1e34:	00719102 	rsbseq	r9, r1, r2, lsl #2
    1e38:	00145016 	andseq	r5, r4, r6, lsl r0
    1e3c:	0a1f0100 	beq	7c2244 <startup-0x1f83ddbc>
    1e40:	0023ee06 	eoreq	lr, r3, r6, lsl #28
    1e44:	00003220 	andeq	r3, r0, r0, lsr #4
    1e48:	a39c0100 	orrsge	r0, ip, #0, 2
    1e4c:	1200000b 	andne	r0, r0, #11
    1e50:	00001261 	andeq	r1, r0, r1, ror #4
    1e54:	210a1f01 	tstcs	sl, r1, lsl #30
    1e58:	00000585 	andeq	r0, r0, r5, lsl #11
    1e5c:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
    1e60:	000013ff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
    1e64:	300a1f01 	andcc	r1, sl, r1, lsl #30
    1e68:	000000a7 	andeq	r0, r0, r7, lsr #1
    1e6c:	12729102 	rsbsne	r9, r2, #-2147483648	; 0x80000000
    1e70:	0000110b 	andeq	r1, r0, fp, lsl #2
    1e74:	460a1f01 	strmi	r1, [sl], -r1, lsl #30
    1e78:	000000a7 	andeq	r0, r0, r7, lsr #1
    1e7c:	00709102 	rsbseq	r9, r0, r2, lsl #2
    1e80:	00161f16 	andseq	r1, r6, r6, lsl pc
    1e84:	09fa0100 	ldmibeq	sl!, {r8}^
    1e88:	0023cc06 	eoreq	ip, r3, r6, lsl #24
    1e8c:	00002220 	andeq	r2, r0, r0, lsr #4
    1e90:	db9c0100 	blle	fe702298 <doors+0xde6fe390>
    1e94:	1200000b 	andne	r0, r0, #11
    1e98:	00001261 	andeq	r1, r0, r1, ror #4
    1e9c:	2909fa01 	stmdbcs	r9, {r0, r9, fp, ip, sp, lr, pc}
    1ea0:	00000585 	andeq	r0, r0, r5, lsl #11
    1ea4:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
    1ea8:	00001019 	andeq	r1, r0, r9, lsl r0
    1eac:	3809fa01 	stmdacc	r9, {r0, r9, fp, ip, sp, lr, pc}
    1eb0:	000000a7 	andeq	r0, r0, r7, lsr #1
    1eb4:	00729102 	rsbseq	r9, r2, r2, lsl #2
    1eb8:	00142918 	andseq	r2, r4, r8, lsl r9
    1ebc:	09d10100 	ldmibeq	r1, {r8}^
    1ec0:	00011c0a 	andeq	r1, r1, sl, lsl #24
    1ec4:	00235800 	eoreq	r5, r3, r0, lsl #16
    1ec8:	00007420 	andeq	r7, r0, r0, lsr #8
    1ecc:	479c0100 	ldrmi	r0, [ip, r0, lsl #2]
    1ed0:	1200000c 	andne	r0, r0, #12
    1ed4:	00001261 	andeq	r1, r0, r1, ror #4
    1ed8:	2709d101 	strcs	sp, [r9, -r1, lsl #2]
    1edc:	00000585 	andeq	r0, r0, r5, lsl #11
    1ee0:	12649102 	rsbne	r9, r4, #-2147483648	; 0x80000000
    1ee4:	00001019 	andeq	r1, r0, r9, lsl r0
    1ee8:	3609d101 	strcc	sp, [r9], -r1, lsl #2
    1eec:	000000a7 	andeq	r0, r0, r7, lsr #1
    1ef0:	13629102 	cmnne	r2, #-2147483648	; 0x80000000
    1ef4:	00000ba8 	andeq	r0, r0, r8, lsr #23
    1ef8:	0c09d301 	stceq	3, cr13, [r9], {1}
    1efc:	0000011c 	andeq	r0, r0, ip, lsl r1
    1f00:	136f9102 	cmnne	pc, #-2147483648	; 0x80000000
    1f04:	00000ba9 	andeq	r0, r0, r9, lsr #23
    1f08:	0c09d401 	cfstrseq	mvf13, [r9], {1}
    1f0c:	000000a7 	andeq	r0, r0, r7, lsr #1
    1f10:	136c9102 	cmnne	ip, #-2147483648	; 0x80000000
    1f14:	00001742 	andeq	r1, r0, r2, asr #14
    1f18:	1c09d401 	cfstrsne	mvf13, [r9], {1}
    1f1c:	000000a7 	andeq	r0, r0, r7, lsr #1
    1f20:	006a9102 	rsbeq	r9, sl, r2, lsl #2
    1f24:	00111e16 	andseq	r1, r1, r6, lsl lr
    1f28:	09b50100 	ldmibeq	r5!, {r8}
    1f2c:	00233606 	eoreq	r3, r3, r6, lsl #12
    1f30:	00002220 	andeq	r2, r0, r0, lsr #4
    1f34:	7f9c0100 	svcvc	0x009c0100
    1f38:	1200000c 	andne	r0, r0, #12
    1f3c:	00001261 	andeq	r1, r0, r1, ror #4
    1f40:	2109b501 	tstcs	r9, r1, lsl #10
    1f44:	00000585 	andeq	r0, r0, r5, lsl #11
    1f48:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
    1f4c:	00000e90 	muleq	r0, r0, lr
    1f50:	3009b501 	andcc	fp, r9, r1, lsl #10
    1f54:	000000a7 	andeq	r0, r0, r7, lsr #1
    1f58:	00729102 	rsbseq	r9, r2, r2, lsl #2
    1f5c:	00121c18 	andseq	r1, r2, r8, lsl ip
    1f60:	098b0100 	stmibeq	fp, {r8}
    1f64:	00010f0c 	andeq	r0, r1, ip, lsl #30
    1f68:	0022f000 	eoreq	pc, r2, r0
    1f6c:	00004620 	andeq	r4, r0, r0, lsr #12
    1f70:	cb9c0100 	blgt	fe702378 <doors+0xde6fe470>
    1f74:	1200000c 	andne	r0, r0, #12
    1f78:	00001261 	andeq	r1, r0, r1, ror #4
    1f7c:	2b098b01 	blcs	264b88 <startup-0x1fd9b478>
    1f80:	00000585 	andeq	r0, r0, r5, lsl #11
    1f84:	126c9102 	rsbne	r9, ip, #-2147483648	; 0x80000000
    1f88:	00000e90 	muleq	r0, r0, lr
    1f8c:	3a098b01 	bcc	264b98 <startup-0x1fd9b468>
    1f90:	000000a7 	andeq	r0, r0, r7, lsr #1
    1f94:	136a9102 	cmnne	sl, #-2147483648	; 0x80000000
    1f98:	00000ba8 	andeq	r0, r0, r8, lsr #23
    1f9c:	0c098d01 	stceq	13, cr8, [r9], {1}
    1fa0:	0000011c 	andeq	r0, r0, ip, lsl r1
    1fa4:	00779102 	rsbseq	r9, r7, r2, lsl #2
    1fa8:	000fa016 	andeq	sl, pc, r6, lsl r0	; <UNPREDICTABLE>
    1fac:	096a0100 	stmdbeq	sl!, {r8}^
    1fb0:	0022d206 	eoreq	sp, r2, r6, lsl #4
    1fb4:	00001e20 	andeq	r1, r0, r0, lsr #28
    1fb8:	039c0100 	orrseq	r0, ip, #0, 2
    1fbc:	1200000d 	andne	r0, r0, #13
    1fc0:	00001261 	andeq	r1, r0, r1, ror #4
    1fc4:	25096a01 	strcs	r6, [r9, #-2561]	; 0xfffff5ff
    1fc8:	00000585 	andeq	r0, r0, r5, lsl #11
    1fcc:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
    1fd0:	0000148b 	andeq	r1, r0, fp, lsl #9
    1fd4:	34096a01 	strcc	r6, [r9], #-2561	; 0xfffff5ff
    1fd8:	000000a7 	andeq	r0, r0, r7, lsr #1
    1fdc:	00729102 	rsbseq	r9, r2, r2, lsl #2
    1fe0:	0014d316 	andseq	sp, r4, r6, lsl r3
    1fe4:	09440100 	stmdbeq	r4, {r8}^
    1fe8:	00228006 	eoreq	r8, r2, r6
    1fec:	00005220 	andeq	r5, r0, r0, lsr #4
    1ff0:	4b9c0100 	blmi	fe7023f8 <doors+0xde6fe4f0>
    1ff4:	1200000d 	andne	r0, r0, #13
    1ff8:	00001261 	andeq	r1, r0, r1, ror #4
    1ffc:	20094401 	andcs	r4, r9, r1, lsl #8
    2000:	00000585 	andeq	r0, r0, r5, lsl #11
    2004:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
    2008:	00001019 	andeq	r1, r0, r9, lsl r0
    200c:	2f094401 	svccs	0x00094401
    2010:	000000a7 	andeq	r0, r0, r7, lsr #1
    2014:	12729102 	rsbsne	r9, r2, #-2147483648	; 0x80000000
    2018:	00000dbf 			; <UNDEFINED> instruction: 0x00000dbf
    201c:	47094401 	strmi	r4, [r9, -r1, lsl #8]
    2020:	00000145 	andeq	r0, r0, r5, asr #2
    2024:	00719102 	rsbseq	r9, r1, r2, lsl #2
    2028:	00170c16 	andseq	r0, r7, r6, lsl ip
    202c:	090b0100 	stmdbeq	fp, {r8}
    2030:	00224006 	eoreq	r4, r2, r6
    2034:	00004020 	andeq	r4, r0, r0, lsr #32
    2038:	839c0100 	orrshi	r0, ip, #0, 2
    203c:	1200000d 	andne	r0, r0, #13
    2040:	00001261 	andeq	r1, r0, r1, ror #4
    2044:	28090b01 	stmdacs	r9, {r0, r8, r9, fp}
    2048:	00000585 	andeq	r0, r0, r5, lsl #11
    204c:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
    2050:	00000dbf 			; <UNDEFINED> instruction: 0x00000dbf
    2054:	3e090b01 	vmlacc.f64	d0, d9, d1
    2058:	00000145 	andeq	r0, r0, r5, asr #2
    205c:	00739102 	rsbseq	r9, r3, r2, lsl #2
    2060:	00114c16 	andseq	r4, r1, r6, lsl ip
    2064:	08f20100 	ldmeq	r2!, {r8}^
    2068:	00220006 	eoreq	r0, r2, r6
    206c:	00004020 	andeq	r4, r0, r0, lsr #32
    2070:	bb9c0100 	bllt	fe702478 <doors+0xde6fe570>
    2074:	1200000d 	andne	r0, r0, #13
    2078:	00001261 	andeq	r1, r0, r1, ror #4
    207c:	2108f201 	tstcs	r8, r1, lsl #4	; <UNPREDICTABLE>
    2080:	00000585 	andeq	r0, r0, r5, lsl #11
    2084:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
    2088:	00000dbf 			; <UNDEFINED> instruction: 0x00000dbf
    208c:	3708f201 	strcc	pc, [r8, -r1, lsl #4]
    2090:	00000145 	andeq	r0, r0, r5, asr #2
    2094:	00739102 	rsbseq	r9, r3, r2, lsl #2
    2098:	00182916 	andseq	r2, r8, r6, lsl r9
    209c:	08d90100 	ldmeq	r9, {r8}^
    20a0:	0021b206 	eoreq	fp, r1, r6, lsl #4
    20a4:	00004e20 	andeq	r4, r0, r0, lsr #28
    20a8:	f39c0100 	vaddw.u16	q0, q6, d0
    20ac:	1200000d 	andne	r0, r0, #13
    20b0:	00001261 	andeq	r1, r0, r1, ror #4
    20b4:	2608d901 	strcs	sp, [r8], -r1, lsl #18
    20b8:	00000585 	andeq	r0, r0, r5, lsl #11
    20bc:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
    20c0:	00000dbf 			; <UNDEFINED> instruction: 0x00000dbf
    20c4:	3c08d901 			; <UNDEFINED> instruction: 0x3c08d901
    20c8:	00000145 	andeq	r0, r0, r5, asr #2
    20cc:	00739102 	rsbseq	r9, r3, r2, lsl #2
    20d0:	00133e16 	andseq	r3, r3, r6, lsl lr
    20d4:	08c60100 	stmiaeq	r6, {r8}^
    20d8:	00217806 	eoreq	r7, r1, r6, lsl #16
    20dc:	00003a20 	andeq	r3, r0, r0, lsr #20
    20e0:	1b9c0100 	blne	fe7024e8 <doors+0xde6fe5e0>
    20e4:	1200000e 	andne	r0, r0, #14
    20e8:	00001582 	andeq	r1, r0, r2, lsl #11
    20ec:	2e08c601 	cfmadd32cs	mvax0, mvfx12, mvfx8, mvfx1
    20f0:	00000e1b 	andeq	r0, r0, fp, lsl lr
    20f4:	00749102 	rsbseq	r9, r4, r2, lsl #2
    20f8:	04f10415 	ldrbteq	r0, [r1], #1045	; 0x415
    20fc:	e0160000 	ands	r0, r6, r0
    2100:	01000014 	tsteq	r0, r4, lsl r0
    2104:	2c0608ad 	stccs	8, cr0, [r6], {173}	; 0xad
    2108:	4c200021 	stcmi	0, cr0, [r0], #-132	; 0xffffff7c
    210c:	01000000 	mrseq	r0, (UNDEF: 0)
    2110:	000e599c 	muleq	lr, ip, r9
    2114:	12611200 	rsbne	r1, r1, #0, 4
    2118:	ad010000 	stcge	0, cr0, [r1, #-0]
    211c:	05852208 	streq	r2, [r5, #520]	; 0x208
    2120:	91020000 	mrsls	r0, (UNDEF: 2)
    2124:	15821274 	strne	r1, [r2, #628]	; 0x274
    2128:	ad010000 	stcge	0, cr0, [r1, #-0]
    212c:	0e1b3d08 	cdpeq	13, 1, cr3, cr11, cr8, {0}
    2130:	91020000 	mrsls	r0, (UNDEF: 2)
    2134:	86160070 			; <UNDEFINED> instruction: 0x86160070
    2138:	01000018 	tsteq	r0, r8, lsl r0
    213c:	ec060878 	stc	8, cr0, [r6], {120}	; 0x78
    2140:	40200020 	eormi	r0, r0, r0, lsr #32
    2144:	01000000 	mrseq	r0, (UNDEF: 0)
    2148:	000e919c 	muleq	lr, ip, r1
    214c:	12611200 	rsbne	r1, r1, #0, 4
    2150:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
    2154:	05852708 	streq	r2, [r5, #1800]	; 0x708
    2158:	91020000 	mrsls	r0, (UNDEF: 2)
    215c:	183c1274 	ldmdane	ip!, {r2, r4, r5, r6, r9, ip}
    2160:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
    2164:	00a73608 	adceq	r3, r7, r8, lsl #12
    2168:	91020000 	mrsls	r0, (UNDEF: 2)
    216c:	ff160072 			; <UNDEFINED> instruction: 0xff160072
    2170:	01000015 	tsteq	r0, r5, lsl r0
    2174:	b4060860 	strlt	r0, [r6], #-2144	; 0xfffff7a0
    2178:	38200020 	stmdacc	r0!, {r5}
    217c:	01000000 	mrseq	r0, (UNDEF: 0)
    2180:	000ec99c 	muleq	lr, ip, r9
    2184:	12611200 	rsbne	r1, r1, #0, 4
    2188:	60010000 	andvs	r0, r1, r0
    218c:	05852708 	streq	r2, [r5, #1800]	; 0x708
    2190:	91020000 	mrsls	r0, (UNDEF: 2)
    2194:	183c1274 	ldmdane	ip!, {r2, r4, r5, r6, r9, ip}
    2198:	60010000 	andvs	r0, r1, r0
    219c:	00a73608 	adceq	r3, r7, r8, lsl #12
    21a0:	91020000 	mrsls	r0, (UNDEF: 2)
    21a4:	ef160072 	svc	0x00160072
    21a8:	01000014 	tsteq	r0, r4, lsl r0
    21ac:	74060848 	strvc	r0, [r6], #-2120	; 0xfffff7b8
    21b0:	40200020 	eormi	r0, r0, r0, lsr #32
    21b4:	01000000 	mrseq	r0, (UNDEF: 0)
    21b8:	000f019c 	muleq	pc, ip, r1	; <UNPREDICTABLE>
    21bc:	12611200 	rsbne	r1, r1, #0, 4
    21c0:	48010000 	stmdami	r1, {}	; <UNPREDICTABLE>
    21c4:	05852708 	streq	r2, [r5, #1800]	; 0x708
    21c8:	91020000 	mrsls	r0, (UNDEF: 2)
    21cc:	183c1274 	ldmdane	ip!, {r2, r4, r5, r6, r9, ip}
    21d0:	48010000 	stmdami	r1, {}	; <UNPREDICTABLE>
    21d4:	00a73608 	adceq	r3, r7, r8, lsl #12
    21d8:	91020000 	mrsls	r0, (UNDEF: 2)
    21dc:	b8160072 	ldmdalt	r6, {r1, r4, r5, r6}
    21e0:	01000012 	tsteq	r0, r2, lsl r0
    21e4:	3c06082f 	stccc	8, cr0, [r6], {47}	; 0x2f
    21e8:	38200020 	stmdacc	r0!, {r5}
    21ec:	01000000 	mrseq	r0, (UNDEF: 0)
    21f0:	000f399c 	muleq	pc, ip, r9	; <UNPREDICTABLE>
    21f4:	12611200 	rsbne	r1, r1, #0, 4
    21f8:	2f010000 	svccs	0x00010000
    21fc:	05852708 	streq	r2, [r5, #1800]	; 0x708
    2200:	91020000 	mrsls	r0, (UNDEF: 2)
    2204:	183c1274 	ldmdane	ip!, {r2, r4, r5, r6, r9, ip}
    2208:	2f010000 	svccs	0x00010000
    220c:	00a73608 	adceq	r3, r7, r8, lsl #12
    2210:	91020000 	mrsls	r0, (UNDEF: 2)
    2214:	9d180072 	ldcls	0, cr0, [r8, #-456]	; 0xfffffe38
    2218:	01000010 	tsteq	r0, r0, lsl r0
    221c:	c90a081b 	stmdbgt	sl, {r0, r1, r3, r4, fp}
    2220:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    2224:	14200020 	strtne	r0, [r0], #-32	; 0xffffffe0
    2228:	01000000 	mrseq	r0, (UNDEF: 0)
    222c:	000f659c 	muleq	pc, ip, r5	; <UNPREDICTABLE>
    2230:	12611200 	rsbne	r1, r1, #0, 4
    2234:	1b010000 	blne	4223c <startup-0x1ffbddc4>
    2238:	05852708 	streq	r2, [r5, #1800]	; 0x708
    223c:	91020000 	mrsls	r0, (UNDEF: 2)
    2240:	8d180074 	ldchi	0, cr0, [r8, #-464]	; 0xfffffe30
    2244:	01000010 	tsteq	r0, r0, lsl r0
    2248:	c90a080d 	stmdbgt	sl, {r0, r2, r3, fp}
    224c:	14000000 	strne	r0, [r0], #-0
    2250:	14200020 	strtne	r0, [r0], #-32	; 0xffffffe0
    2254:	01000000 	mrseq	r0, (UNDEF: 0)
    2258:	000f919c 	muleq	pc, ip, r1	; <UNPREDICTABLE>
    225c:	12611200 	rsbne	r1, r1, #0, 4
    2260:	0d010000 	stceq	0, cr0, [r1, #-0]
    2264:	05852708 	streq	r2, [r5, #1800]	; 0x708
    2268:	91020000 	mrsls	r0, (UNDEF: 2)
    226c:	7d180074 	ldcvc	0, cr0, [r8, #-464]	; 0xfffffe30
    2270:	01000010 	tsteq	r0, r0, lsl r0
    2274:	c90a07ff 	stmdbgt	sl, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl}
    2278:	00000000 	andeq	r0, r0, r0
    227c:	14200020 	strtne	r0, [r0], #-32	; 0xffffffe0
    2280:	01000000 	mrseq	r0, (UNDEF: 0)
    2284:	000fbd9c 	muleq	pc, ip, sp	; <UNPREDICTABLE>
    2288:	12611200 	rsbne	r1, r1, #0, 4
    228c:	ff010000 			; <UNDEFINED> instruction: 0xff010000
    2290:	05852707 	streq	r2, [r5, #1799]	; 0x707
    2294:	91020000 	mrsls	r0, (UNDEF: 2)
    2298:	ca180074 	bgt	602470 <startup-0x1f9fdb90>
    229c:	01000011 	tsteq	r0, r1, lsl r0
    22a0:	c90a07f0 	stmdbgt	sl, {r4, r5, r6, r7, r8, r9, sl}
    22a4:	ec000000 	stc	0, cr0, [r0], {-0}
    22a8:	1420001f 	strtne	r0, [r0], #-31	; 0xffffffe1
    22ac:	01000000 	mrseq	r0, (UNDEF: 0)
    22b0:	000fe99c 	muleq	pc, ip, r9	; <UNPREDICTABLE>
    22b4:	12611200 	rsbne	r1, r1, #0, 4
    22b8:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
    22bc:	05852707 	streq	r2, [r5, #1799]	; 0x707
    22c0:	91020000 	mrsls	r0, (UNDEF: 2)
    22c4:	cc170074 	ldcgt	0, cr0, [r7], {116}	; 0x74
    22c8:	01000012 	tsteq	r0, r2, lsl r0
    22cc:	020607b7 	andeq	r0, r6, #47972352	; 0x2dc0000
    22d0:	ea20001f 	b	802354 <startup-0x1f7fdcac>
    22d4:	01000000 	mrseq	r0, (UNDEF: 0)
    22d8:	0010419c 	mulseq	r0, ip, r1
    22dc:	12611200 	rsbne	r1, r1, #0, 4
    22e0:	b7010000 	strlt	r0, [r1, -r0]
    22e4:	05852207 	streq	r2, [r5, #519]	; 0x207
    22e8:	91020000 	mrsls	r0, (UNDEF: 2)
    22ec:	13511264 	cmpne	r1, #100, 4	; 0x40000006
    22f0:	b7010000 	strlt	r0, [r1, -r0]
    22f4:	10413b07 	subne	r3, r1, r7, lsl #22
    22f8:	91020000 	mrsls	r0, (UNDEF: 2)
    22fc:	10b91360 	adcsne	r1, r9, r0, ror #6
    2300:	b9010000 	stmdblt	r1, {}	; <UNPREDICTABLE>
    2304:	00a70c07 	adceq	r0, r7, r7, lsl #24
    2308:	91020000 	mrsls	r0, (UNDEF: 2)
    230c:	140b136e 	strne	r1, [fp], #-878	; 0xfffffc92
    2310:	ba010000 	blt	42318 <startup-0x1ffbdce8>
    2314:	00a70c07 	adceq	r0, r7, r7, lsl #24
    2318:	91020000 	mrsls	r0, (UNDEF: 2)
    231c:	0415006c 	ldreq	r0, [r5], #-108	; 0xffffff94
    2320:	00000480 	andeq	r0, r0, r0, lsl #9
    2324:	00106c16 	andseq	r6, r0, r6, lsl ip
    2328:	07a40100 	streq	r0, [r4, r0, lsl #2]!
    232c:	001ed406 	andseq	sp, lr, r6, lsl #8
    2330:	00002e20 	andeq	r2, r0, r0, lsr #28
    2334:	6f9c0100 	svcvs	0x009c0100
    2338:	12000010 	andne	r0, r0, #16
    233c:	00001351 	andeq	r1, r0, r1, asr r3
    2340:	2a07a401 	bcs	1eb34c <startup-0x1fe14cb4>
    2344:	00001041 	andeq	r1, r0, r1, asr #32
    2348:	00749102 	rsbseq	r9, r4, r2, lsl #2
    234c:	00165317 	andseq	r5, r6, r7, lsl r3
    2350:	076c0100 	strbeq	r0, [ip, -r0, lsl #2]!
    2354:	001e2406 	andseq	r2, lr, r6, lsl #8
    2358:	0000b020 	andeq	fp, r0, r0, lsr #32
    235c:	a79c0100 	ldrge	r0, [ip, r0, lsl #2]
    2360:	12000010 	andne	r0, r0, #16
    2364:	00001261 	andeq	r1, r0, r1, ror #4
    2368:	1e076c01 	cdpne	12, 0, cr6, cr7, cr1, {0}
    236c:	00000585 	andeq	r0, r0, r5, lsl #11
    2370:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
    2374:	00001351 	andeq	r1, r0, r1, asr r3
    2378:	37076c01 	strcc	r6, [r7, -r1, lsl #24]
    237c:	00001041 	andeq	r1, r0, r1, asr #32
    2380:	00709102 	rsbseq	r9, r0, r2, lsl #2
    2384:	0013e216 	andseq	lr, r3, r6, lsl r2
    2388:	07180100 	ldreq	r0, [r8, -r0, lsl #2]
    238c:	001dbe06 	andseq	fp, sp, r6, lsl #28
    2390:	00006620 	andeq	r6, r0, r0, lsr #12
    2394:	ff9c0100 			; <UNDEFINED> instruction: 0xff9c0100
    2398:	12000010 	andne	r0, r0, #16
    239c:	00001261 	andeq	r1, r0, r1, ror #4
    23a0:	1f071801 	svcne	0x00071801
    23a4:	00000585 	andeq	r0, r0, r5, lsl #11
    23a8:	126c9102 	rsbne	r9, ip, #-2147483648	; 0x80000000
    23ac:	00000fcd 	andeq	r0, r0, sp, asr #31
    23b0:	2e071801 	cdpcs	8, 0, cr1, cr7, cr1, {0}
    23b4:	000000a7 	andeq	r0, r0, r7, lsr #1
    23b8:	126a9102 	rsbne	r9, sl, #-2147483648	; 0x80000000
    23bc:	000010dd 	ldrdeq	r1, [r0], -sp
    23c0:	44071801 	strmi	r1, [r7], #-2049	; 0xfffff7ff
    23c4:	000000a7 	andeq	r0, r0, r7, lsr #1
    23c8:	14689102 	strbtne	r9, [r8], #-258	; 0xfffffefe
    23cc:	00706d74 	rsbseq	r6, r0, r4, ror sp
    23d0:	0c071a01 			; <UNDEFINED> instruction: 0x0c071a01
    23d4:	000000a7 	andeq	r0, r0, r7, lsr #1
    23d8:	00769102 	rsbseq	r9, r6, r2, lsl #2
    23dc:	00100016 	andseq	r0, r0, r6, lsl r0
    23e0:	06fa0100 	ldrbteq	r0, [sl], r0, lsl #2
    23e4:	001d5806 	andseq	r5, sp, r6, lsl #16
    23e8:	00006620 	andeq	r6, r0, r0, lsr #12
    23ec:	579c0100 	ldrpl	r0, [ip, r0, lsl #2]
    23f0:	12000011 	andne	r0, r0, #17
    23f4:	00001261 	andeq	r1, r0, r1, ror #4
    23f8:	1e06fa01 	vmlane.f32	s30, s12, s2
    23fc:	00000585 	andeq	r0, r0, r5, lsl #11
    2400:	126c9102 	rsbne	r9, ip, #-2147483648	; 0x80000000
    2404:	00000fcd 	andeq	r0, r0, sp, asr #31
    2408:	2d06fa01 	vstrcs	s30, [r6, #-4]
    240c:	000000a7 	andeq	r0, r0, r7, lsr #1
    2410:	126a9102 	rsbne	r9, sl, #-2147483648	; 0x80000000
    2414:	00001473 	andeq	r1, r0, r3, ror r4
    2418:	4306fa01 	movwmi	pc, #27137	; 0x6a01	; <UNPREDICTABLE>
    241c:	000000a7 	andeq	r0, r0, r7, lsr #1
    2420:	14689102 	strbtne	r9, [r8], #-258	; 0xfffffefe
    2424:	00706d74 	rsbseq	r6, r0, r4, ror sp
    2428:	0c06fc01 	stceq	12, cr15, [r6], {1}
    242c:	000000a7 	andeq	r0, r0, r7, lsr #1
    2430:	00769102 	rsbseq	r9, r6, r2, lsl #2
    2434:	00127616 	andseq	r7, r2, r6, lsl r6
    2438:	06db0100 	ldrbeq	r0, [fp], r0, lsl #2
    243c:	001d0806 	andseq	r0, sp, r6, lsl #16
    2440:	00005020 	andeq	r5, r0, r0, lsr #32
    2444:	9f9c0100 	svcls	0x009c0100
    2448:	12000011 	andne	r0, r0, #17
    244c:	00001261 	andeq	r1, r0, r1, ror #4
    2450:	2906db01 	stmdbcs	r6, {r0, r8, r9, fp, ip, lr, pc}
    2454:	00000585 	andeq	r0, r0, r5, lsl #11
    2458:	126c9102 	rsbne	r9, ip, #-2147483648	; 0x80000000
    245c:	00001184 	andeq	r1, r0, r4, lsl #3
    2460:	3806db01 	stmdacc	r6, {r0, r8, r9, fp, ip, lr, pc}
    2464:	000000a7 	andeq	r0, r0, r7, lsr #1
    2468:	136a9102 	cmnne	sl, #-2147483648	; 0x80000000
    246c:	0000115a 	andeq	r1, r0, sl, asr r1
    2470:	0c06dd01 	stceq	13, cr13, [r6], {1}
    2474:	000000a7 	andeq	r0, r0, r7, lsr #1
    2478:	00769102 	rsbseq	r9, r6, r2, lsl #2
    247c:	00153316 	andseq	r3, r5, r6, lsl r3
    2480:	06c00100 	strbeq	r0, [r0], r0, lsl #2
    2484:	001cb806 	andseq	fp, ip, r6, lsl #16
    2488:	00005020 	andeq	r5, r0, r0, lsr #32
    248c:	e79c0100 	ldr	r0, [ip, r0, lsl #2]
    2490:	12000011 	andne	r0, r0, #17
    2494:	00001261 	andeq	r1, r0, r1, ror #4
    2498:	2a06c001 	bcs	1b24a4 <startup-0x1fe4db5c>
    249c:	00000585 	andeq	r0, r0, r5, lsl #11
    24a0:	126c9102 	rsbne	r9, ip, #-2147483648	; 0x80000000
    24a4:	000015c4 	andeq	r1, r0, r4, asr #11
    24a8:	3906c001 	stmdbcc	r6, {r0, lr, pc}
    24ac:	000000a7 	andeq	r0, r0, r7, lsr #1
    24b0:	136a9102 	cmnne	sl, #-2147483648	; 0x80000000
    24b4:	0000115a 	andeq	r1, r0, sl, asr r1
    24b8:	0c06c201 	sfmeq	f4, 1, [r6], {1}
    24bc:	000000a7 	andeq	r0, r0, r7, lsr #1
    24c0:	00769102 	rsbseq	r9, r6, r2, lsl #2
    24c4:	00174b16 	andseq	r4, r7, r6, lsl fp
    24c8:	06a50100 	strteq	r0, [r5], r0, lsl #2
    24cc:	001c6806 	andseq	r6, ip, r6, lsl #16
    24d0:	00005020 	andeq	r5, r0, r0, lsr #32
    24d4:	2f9c0100 	svccs	0x009c0100
    24d8:	12000012 	andne	r0, r0, #18
    24dc:	00001261 	andeq	r1, r0, r1, ror #4
    24e0:	2906a501 	stmdbcs	r6, {r0, r8, sl, sp, pc}
    24e4:	00000585 	andeq	r0, r0, r5, lsl #11
    24e8:	126c9102 	rsbne	r9, ip, #-2147483648	; 0x80000000
    24ec:	00001184 	andeq	r1, r0, r4, lsl #3
    24f0:	3806a501 	stmdacc	r6, {r0, r8, sl, sp, pc}
    24f4:	000000a7 	andeq	r0, r0, r7, lsr #1
    24f8:	136a9102 	cmnne	sl, #-2147483648	; 0x80000000
    24fc:	0000115a 	andeq	r1, r0, sl, asr r1
    2500:	0c06a701 	stceq	7, cr10, [r6], {1}
    2504:	000000a7 	andeq	r0, r0, r7, lsr #1
    2508:	00769102 	rsbseq	r9, r6, r2, lsl #2
    250c:	00116216 	andseq	r6, r1, r6, lsl r2
    2510:	068a0100 	streq	r0, [sl], r0, lsl #2
    2514:	001c1c06 	andseq	r1, ip, r6, lsl #24
    2518:	00004c20 	andeq	r4, r0, r0, lsr #24
    251c:	779c0100 	ldrvc	r0, [ip, r0, lsl #2]
    2520:	12000012 	andne	r0, r0, #18
    2524:	00001261 	andeq	r1, r0, r1, ror #4
    2528:	2a068a01 	bcs	1a4d34 <startup-0x1fe5b2cc>
    252c:	00000585 	andeq	r0, r0, r5, lsl #11
    2530:	126c9102 	rsbne	r9, ip, #-2147483648	; 0x80000000
    2534:	000015c4 	andeq	r1, r0, r4, asr #11
    2538:	39068a01 	stmdbcc	r6, {r0, r9, fp, pc}
    253c:	000000a7 	andeq	r0, r0, r7, lsr #1
    2540:	136a9102 	cmnne	sl, #-2147483648	; 0x80000000
    2544:	0000115a 	andeq	r1, r0, sl, asr r1
    2548:	0c068c01 	stceq	12, cr8, [r6], {1}
    254c:	000000a7 	andeq	r0, r0, r7, lsr #1
    2550:	00769102 	rsbseq	r9, r6, r2, lsl #2
    2554:	000f3016 	andeq	r3, pc, r6, lsl r0	; <UNPREDICTABLE>
    2558:	066f0100 	strbteq	r0, [pc], -r0, lsl #2
    255c:	001bd006 	andseq	sp, fp, r6
    2560:	00004c20 	andeq	r4, r0, r0, lsr #24
    2564:	bf9c0100 	svclt	0x009c0100
    2568:	12000012 	andne	r0, r0, #18
    256c:	00001261 	andeq	r1, r0, r1, ror #4
    2570:	29066f01 	stmdbcs	r6, {r0, r8, r9, sl, fp, sp, lr}
    2574:	00000585 	andeq	r0, r0, r5, lsl #11
    2578:	126c9102 	rsbne	r9, ip, #-2147483648	; 0x80000000
    257c:	00001184 	andeq	r1, r0, r4, lsl #3
    2580:	38066f01 	stmdacc	r6, {r0, r8, r9, sl, fp, sp, lr}
    2584:	000000a7 	andeq	r0, r0, r7, lsr #1
    2588:	136a9102 	cmnne	sl, #-2147483648	; 0x80000000
    258c:	0000115a 	andeq	r1, r0, sl, asr r1
    2590:	0c067101 	stfeqs	f7, [r6], {1}
    2594:	000000a7 	andeq	r0, r0, r7, lsr #1
    2598:	00769102 	rsbseq	r9, r6, r2, lsl #2
    259c:	0016f516 	andseq	pc, r6, r6, lsl r5	; <UNPREDICTABLE>
    25a0:	06540100 	ldrbeq	r0, [r4], -r0, lsl #2
    25a4:	001b8806 	andseq	r8, fp, r6, lsl #16
    25a8:	00004820 	andeq	r4, r0, r0, lsr #16
    25ac:	079c0100 	ldreq	r0, [ip, r0, lsl #2]
    25b0:	12000013 	andne	r0, r0, #19
    25b4:	00001261 	andeq	r1, r0, r1, ror #4
    25b8:	2a065401 	bcs	1975c4 <startup-0x1fe68a3c>
    25bc:	00000585 	andeq	r0, r0, r5, lsl #11
    25c0:	126c9102 	rsbne	r9, ip, #-2147483648	; 0x80000000
    25c4:	000015c4 	andeq	r1, r0, r4, asr #11
    25c8:	39065401 	stmdbcc	r6, {r0, sl, ip, lr}
    25cc:	000000a7 	andeq	r0, r0, r7, lsr #1
    25d0:	136a9102 	cmnne	sl, #-2147483648	; 0x80000000
    25d4:	0000115a 	andeq	r1, r0, sl, asr r1
    25d8:	0c065601 	stceq	6, cr5, [r6], {1}
    25dc:	000000a7 	andeq	r0, r0, r7, lsr #1
    25e0:	00769102 	rsbseq	r9, r6, r2, lsl #2
    25e4:	00139416 	andseq	r9, r3, r6, lsl r4
    25e8:	06390100 	ldrteq	r0, [r9], -r0, lsl #2
    25ec:	001b4006 	andseq	r4, fp, r6
    25f0:	00004820 	andeq	r4, r0, r0, lsr #16
    25f4:	4f9c0100 	svcmi	0x009c0100
    25f8:	12000013 	andne	r0, r0, #19
    25fc:	00001261 	andeq	r1, r0, r1, ror #4
    2600:	29063901 	stmdbcs	r6, {r0, r8, fp, ip, sp}
    2604:	00000585 	andeq	r0, r0, r5, lsl #11
    2608:	126c9102 	rsbne	r9, ip, #-2147483648	; 0x80000000
    260c:	00001184 	andeq	r1, r0, r4, lsl #3
    2610:	38063901 	stmdacc	r6, {r0, r8, fp, ip, sp}
    2614:	000000a7 	andeq	r0, r0, r7, lsr #1
    2618:	136a9102 	cmnne	sl, #-2147483648	; 0x80000000
    261c:	0000115a 	andeq	r1, r0, sl, asr r1
    2620:	0c063b01 			; <UNDEFINED> instruction: 0x0c063b01
    2624:	000000a7 	andeq	r0, r0, r7, lsr #1
    2628:	00769102 	rsbseq	r9, r6, r2, lsl #2
    262c:	0016d316 	andseq	sp, r6, r6, lsl r3
    2630:	061c0100 	ldreq	r0, [ip], -r0, lsl #2
    2634:	001af406 	andseq	pc, sl, r6, lsl #8
    2638:	00004c20 	andeq	r4, r0, r0, lsr #24
    263c:	979c0100 	ldrls	r0, [ip, r0, lsl #2]
    2640:	12000013 	andne	r0, r0, #19
    2644:	00001261 	andeq	r1, r0, r1, ror #4
    2648:	23061c01 	movwcs	r1, #27649	; 0x6c01
    264c:	00000585 	andeq	r0, r0, r5, lsl #11
    2650:	126c9102 	rsbne	r9, ip, #-2147483648	; 0x80000000
    2654:	00001317 	andeq	r1, r0, r7, lsl r3
    2658:	32061c01 	andcc	r1, r6, #256	; 0x100
    265c:	000000a7 	andeq	r0, r0, r7, lsr #1
    2660:	136a9102 	cmnne	sl, #-2147483648	; 0x80000000
    2664:	00000ee4 	andeq	r0, r0, r4, ror #29
    2668:	0c061e01 	stceq	14, cr1, [r6], {1}
    266c:	000000a7 	andeq	r0, r0, r7, lsr #1
    2670:	00769102 	rsbseq	r9, r6, r2, lsl #2
    2674:	0016aa16 	andseq	sl, r6, r6, lsl sl
    2678:	05ff0100 	ldrbeq	r0, [pc, #256]!	; 2780 <startup-0x1fffd880>
    267c:	001aac06 	andseq	sl, sl, r6, lsl #24
    2680:	00004820 	andeq	r4, r0, r0, lsr #16
    2684:	df9c0100 	svcle	0x009c0100
    2688:	12000013 	andne	r0, r0, #19
    268c:	00001261 	andeq	r1, r0, r1, ror #4
    2690:	2305ff01 	movwcs	pc, #24321	; 0x5f01	; <UNPREDICTABLE>
    2694:	00000585 	andeq	r0, r0, r5, lsl #11
    2698:	126c9102 	rsbne	r9, ip, #-2147483648	; 0x80000000
    269c:	00001317 	andeq	r1, r0, r7, lsl r3
    26a0:	3205ff01 	andcc	pc, r5, #1, 30
    26a4:	000000a7 	andeq	r0, r0, r7, lsr #1
    26a8:	136a9102 	cmnne	sl, #-2147483648	; 0x80000000
    26ac:	00000ee4 	andeq	r0, r0, r4, ror #29
    26b0:	0c060101 	stfeqs	f0, [r6], {1}
    26b4:	000000a7 	andeq	r0, r0, r7, lsr #1
    26b8:	00769102 	rsbseq	r9, r6, r2, lsl #2
    26bc:	00179216 	andseq	r9, r7, r6, lsl r2
    26c0:	05e20100 	strbeq	r0, [r2, #256]!	; 0x100
    26c4:	001a6006 	andseq	r6, sl, r6
    26c8:	00004c20 	andeq	r4, r0, r0, lsr #24
    26cc:	279c0100 	ldrcs	r0, [ip, r0, lsl #2]
    26d0:	12000014 	andne	r0, r0, #20
    26d4:	00001261 	andeq	r1, r0, r1, ror #4
    26d8:	2305e201 	movwcs	lr, #20993	; 0x5201
    26dc:	00000585 	andeq	r0, r0, r5, lsl #11
    26e0:	126c9102 	rsbne	r9, ip, #-2147483648	; 0x80000000
    26e4:	00001317 	andeq	r1, r0, r7, lsl r3
    26e8:	3205e201 	andcc	lr, r5, #268435456	; 0x10000000
    26ec:	000000a7 	andeq	r0, r0, r7, lsr #1
    26f0:	136a9102 	cmnne	sl, #-2147483648	; 0x80000000
    26f4:	00000edb 	ldrdeq	r0, [r0], -fp
    26f8:	0c05e401 	cfstrseq	mvf14, [r5], {1}
    26fc:	000000a7 	andeq	r0, r0, r7, lsr #1
    2700:	00769102 	rsbseq	r9, r6, r2, lsl #2
    2704:	000e8016 	andeq	r8, lr, r6, lsl r0
    2708:	05c40100 	strbeq	r0, [r4, #256]	; 0x100
    270c:	001a1806 	andseq	r1, sl, r6, lsl #16
    2710:	00004820 	andeq	r4, r0, r0, lsr #16
    2714:	6f9c0100 	svcvs	0x009c0100
    2718:	12000014 	andne	r0, r0, #20
    271c:	00001261 	andeq	r1, r0, r1, ror #4
    2720:	2305c401 	movwcs	ip, #21505	; 0x5401
    2724:	00000585 	andeq	r0, r0, r5, lsl #11
    2728:	126c9102 	rsbne	r9, ip, #-2147483648	; 0x80000000
    272c:	00001317 	andeq	r1, r0, r7, lsl r3
    2730:	3205c401 	andcc	ip, r5, #16777216	; 0x1000000
    2734:	000000a7 	andeq	r0, r0, r7, lsr #1
    2738:	136a9102 	cmnne	sl, #-2147483648	; 0x80000000
    273c:	00000edb 	ldrdeq	r0, [r0], -fp
    2740:	0c05c601 	stceq	6, cr12, [r5], {1}
    2744:	000000a7 	andeq	r0, r0, r7, lsr #1
    2748:	00769102 	rsbseq	r9, r6, r2, lsl #2
    274c:	0015b216 	andseq	fp, r5, r6, lsl r2
    2750:	05a60100 	streq	r0, [r6, #256]!	; 0x100
    2754:	0019c806 	andseq	ip, r9, r6, lsl #16
    2758:	00005020 	andeq	r5, r0, r0, lsr #32
    275c:	b79c0100 	ldrlt	r0, [ip, r0, lsl #2]
    2760:	12000014 	andne	r0, r0, #20
    2764:	00001261 	andeq	r1, r0, r1, ror #4
    2768:	2505a601 	strcs	sl, [r5, #-1537]	; 0xfffff9ff
    276c:	00000585 	andeq	r0, r0, r5, lsl #11
    2770:	126c9102 	rsbne	r9, ip, #-2147483648	; 0x80000000
    2774:	00000fc2 	andeq	r0, r0, r2, asr #31
    2778:	3405a601 	strcc	sl, [r5], #-1537	; 0xfffff9ff
    277c:	000000a7 	andeq	r0, r0, r7, lsr #1
    2780:	136a9102 	cmnne	sl, #-2147483648	; 0x80000000
    2784:	00000ee4 	andeq	r0, r0, r4, ror #29
    2788:	0c05a801 	stceq	8, cr10, [r5], {1}
    278c:	000000a7 	andeq	r0, r0, r7, lsr #1
    2790:	00769102 	rsbseq	r9, r6, r2, lsl #2
    2794:	00185f16 	andseq	r5, r8, r6, lsl pc
    2798:	05880100 	streq	r0, [r8, #256]	; 0x100
    279c:	00198006 	andseq	r8, r9, r6
    27a0:	00004820 	andeq	r4, r0, r0, lsr #16
    27a4:	ff9c0100 			; <UNDEFINED> instruction: 0xff9c0100
    27a8:	12000014 	andne	r0, r0, #20
    27ac:	00001261 	andeq	r1, r0, r1, ror #4
    27b0:	25058801 	strcs	r8, [r5, #-2049]	; 0xfffff7ff
    27b4:	00000585 	andeq	r0, r0, r5, lsl #11
    27b8:	126c9102 	rsbne	r9, ip, #-2147483648	; 0x80000000
    27bc:	00000fc2 	andeq	r0, r0, r2, asr #31
    27c0:	34058801 	strcc	r8, [r5], #-2049	; 0xfffff7ff
    27c4:	000000a7 	andeq	r0, r0, r7, lsr #1
    27c8:	136a9102 	cmnne	sl, #-2147483648	; 0x80000000
    27cc:	00000ee4 	andeq	r0, r0, r4, ror #29
    27d0:	0c058a01 			; <UNDEFINED> instruction: 0x0c058a01
    27d4:	000000a7 	andeq	r0, r0, r7, lsr #1
    27d8:	00769102 	rsbseq	r9, r6, r2, lsl #2
    27dc:	0015a016 	andseq	sl, r5, r6, lsl r0
    27e0:	056a0100 	strbeq	r0, [sl, #-256]!	; 0xffffff00
    27e4:	00193006 	andseq	r3, r9, r6
    27e8:	00005020 	andeq	r5, r0, r0, lsr #32
    27ec:	479c0100 	ldrmi	r0, [ip, r0, lsl #2]
    27f0:	12000015 	andne	r0, r0, #21
    27f4:	00001261 	andeq	r1, r0, r1, ror #4
    27f8:	25056a01 	strcs	r6, [r5, #-2561]	; 0xfffff5ff
    27fc:	00000585 	andeq	r0, r0, r5, lsl #11
    2800:	126c9102 	rsbne	r9, ip, #-2147483648	; 0x80000000
    2804:	00000fc2 	andeq	r0, r0, r2, asr #31
    2808:	34056a01 	strcc	r6, [r5], #-2561	; 0xfffff5ff
    280c:	000000a7 	andeq	r0, r0, r7, lsr #1
    2810:	136a9102 	cmnne	sl, #-2147483648	; 0x80000000
    2814:	00000edb 	ldrdeq	r0, [r0], -fp
    2818:	0c056c01 	stceq	12, cr6, [r5], {1}
    281c:	000000a7 	andeq	r0, r0, r7, lsr #1
    2820:	00769102 	rsbseq	r9, r6, r2, lsl #2
    2824:	00189a16 	andseq	r9, r8, r6, lsl sl
    2828:	054b0100 	strbeq	r0, [fp, #-256]	; 0xffffff00
    282c:	0018e806 	andseq	lr, r8, r6, lsl #16
    2830:	00004820 	andeq	r4, r0, r0, lsr #16
    2834:	8f9c0100 	svchi	0x009c0100
    2838:	12000015 	andne	r0, r0, #21
    283c:	00001261 	andeq	r1, r0, r1, ror #4
    2840:	25054b01 	strcs	r4, [r5, #-2817]	; 0xfffff4ff
    2844:	00000585 	andeq	r0, r0, r5, lsl #11
    2848:	126c9102 	rsbne	r9, ip, #-2147483648	; 0x80000000
    284c:	00000fc2 	andeq	r0, r0, r2, asr #31
    2850:	34054b01 	strcc	r4, [r5], #-2817	; 0xfffff4ff
    2854:	000000a7 	andeq	r0, r0, r7, lsr #1
    2858:	136a9102 	cmnne	sl, #-2147483648	; 0x80000000
    285c:	00000edb 	ldrdeq	r0, [r0], -fp
    2860:	0c054d01 	stceq	13, cr4, [r5], {1}
    2864:	000000a7 	andeq	r0, r0, r7, lsr #1
    2868:	00769102 	rsbseq	r9, r6, r2, lsl #2
    286c:	00169516 	andseq	r9, r6, r6, lsl r5
    2870:	052e0100 	streq	r0, [lr, #-256]!	; 0xffffff00
    2874:	00189806 	andseq	r9, r8, r6, lsl #16
    2878:	00005020 	andeq	r5, r0, r0, lsr #32
    287c:	d79c0100 	ldrle	r0, [ip, r0, lsl #2]
    2880:	12000015 	andne	r0, r0, #21
    2884:	00001261 	andeq	r1, r0, r1, ror #4
    2888:	28052e01 	stmdacs	r5, {r0, r9, sl, fp, sp}
    288c:	00000585 	andeq	r0, r0, r5, lsl #11
    2890:	126c9102 	rsbne	r9, ip, #-2147483648	; 0x80000000
    2894:	0000100b 	andeq	r1, r0, fp
    2898:	37052e01 	strcc	r2, [r5, -r1, lsl #28]
    289c:	000000a7 	andeq	r0, r0, r7, lsr #1
    28a0:	136a9102 	cmnne	sl, #-2147483648	; 0x80000000
    28a4:	00000ee4 	andeq	r0, r0, r4, ror #29
    28a8:	0c053001 	stceq	0, cr3, [r5], {1}
    28ac:	000000a7 	andeq	r0, r0, r7, lsr #1
    28b0:	00769102 	rsbseq	r9, r6, r2, lsl #2
    28b4:	00187116 	andseq	r7, r8, r6, lsl r1
    28b8:	05110100 	ldreq	r0, [r1, #-256]	; 0xffffff00
    28bc:	00185006 	andseq	r5, r8, r6
    28c0:	00004820 	andeq	r4, r0, r0, lsr #16
    28c4:	1f9c0100 	svcne	0x009c0100
    28c8:	12000016 	andne	r0, r0, #22
    28cc:	00001261 	andeq	r1, r0, r1, ror #4
    28d0:	28051101 	stmdacs	r5, {r0, r8, ip}
    28d4:	00000585 	andeq	r0, r0, r5, lsl #11
    28d8:	126c9102 	rsbne	r9, ip, #-2147483648	; 0x80000000
    28dc:	0000100b 	andeq	r1, r0, fp
    28e0:	37051101 	strcc	r1, [r5, -r1, lsl #2]
    28e4:	000000a7 	andeq	r0, r0, r7, lsr #1
    28e8:	136a9102 	cmnne	sl, #-2147483648	; 0x80000000
    28ec:	00000ee4 	andeq	r0, r0, r4, ror #29
    28f0:	0c051301 	stceq	3, cr1, [r5], {1}
    28f4:	000000a7 	andeq	r0, r0, r7, lsr #1
    28f8:	00769102 	rsbseq	r9, r6, r2, lsl #2
    28fc:	000f8b16 	andeq	r8, pc, r6, lsl fp	; <UNPREDICTABLE>
    2900:	04f40100 	ldrbteq	r0, [r4], #256	; 0x100
    2904:	00180006 	andseq	r0, r8, r6
    2908:	00005020 	andeq	r5, r0, r0, lsr #32
    290c:	679c0100 	ldrvs	r0, [ip, r0, lsl #2]
    2910:	12000016 	andne	r0, r0, #22
    2914:	00001261 	andeq	r1, r0, r1, ror #4
    2918:	2804f401 	stmdacs	r4, {r0, sl, ip, sp, lr, pc}
    291c:	00000585 	andeq	r0, r0, r5, lsl #11
    2920:	126c9102 	rsbne	r9, ip, #-2147483648	; 0x80000000
    2924:	0000100b 	andeq	r1, r0, fp
    2928:	3704f401 	strcc	pc, [r4, -r1, lsl #8]
    292c:	000000a7 	andeq	r0, r0, r7, lsr #1
    2930:	136a9102 	cmnne	sl, #-2147483648	; 0x80000000
    2934:	00000edb 	ldrdeq	r0, [r0], -fp
    2938:	0c04f601 	stceq	6, cr15, [r4], {1}
    293c:	000000a7 	andeq	r0, r0, r7, lsr #1
    2940:	00769102 	rsbseq	r9, r6, r2, lsl #2
    2944:	0010f616 	andseq	pc, r0, r6, lsl r6	; <UNPREDICTABLE>
    2948:	04d60100 	ldrbeq	r0, [r6], #256	; 0x100
    294c:	0017b806 	andseq	fp, r7, r6, lsl #16
    2950:	00004820 	andeq	r4, r0, r0, lsr #16
    2954:	af9c0100 	svcge	0x009c0100
    2958:	12000016 	andne	r0, r0, #22
    295c:	00001261 	andeq	r1, r0, r1, ror #4
    2960:	2804d601 	stmdacs	r4, {r0, r9, sl, ip, lr, pc}
    2964:	00000585 	andeq	r0, r0, r5, lsl #11
    2968:	126c9102 	rsbne	r9, ip, #-2147483648	; 0x80000000
    296c:	0000100b 	andeq	r1, r0, fp
    2970:	3704d601 	strcc	sp, [r4, -r1, lsl #12]
    2974:	000000a7 	andeq	r0, r0, r7, lsr #1
    2978:	136a9102 	cmnne	sl, #-2147483648	; 0x80000000
    297c:	00000edb 	ldrdeq	r0, [r0], -fp
    2980:	0c04d801 	stceq	8, cr13, [r4], {1}
    2984:	000000a7 	andeq	r0, r0, r7, lsr #1
    2988:	00769102 	rsbseq	r9, r6, r2, lsl #2
    298c:	000e6c16 	andeq	r6, lr, r6, lsl ip
    2990:	04ba0100 	ldrteq	r0, [sl], #256	; 0x100
    2994:	00176806 	andseq	r6, r7, r6, lsl #16
    2998:	00005020 	andeq	r5, r0, r0, lsr #32
    299c:	f79c0100 			; <UNDEFINED> instruction: 0xf79c0100
    29a0:	12000016 	andne	r0, r0, #22
    29a4:	00001261 	andeq	r1, r0, r1, ror #4
    29a8:	2704ba01 	strcs	fp, [r4, -r1, lsl #20]
    29ac:	00000585 	andeq	r0, r0, r5, lsl #11
    29b0:	126c9102 	rsbne	r9, ip, #-2147483648	; 0x80000000
    29b4:	00000fef 	andeq	r0, r0, pc, ror #31
    29b8:	3604ba01 	strcc	fp, [r4], -r1, lsl #20
    29bc:	000000a7 	andeq	r0, r0, r7, lsr #1
    29c0:	136a9102 	cmnne	sl, #-2147483648	; 0x80000000
    29c4:	00000ee4 	andeq	r0, r0, r4, ror #29
    29c8:	0c04bc01 	stceq	12, cr11, [r4], {1}
    29cc:	000000a7 	andeq	r0, r0, r7, lsr #1
    29d0:	00769102 	rsbseq	r9, r6, r2, lsl #2
    29d4:	0013be16 	andseq	fp, r3, r6, lsl lr
    29d8:	049d0100 	ldreq	r0, [sp], #256	; 0x100
    29dc:	00172006 	andseq	r2, r7, r6
    29e0:	00004820 	andeq	r4, r0, r0, lsr #16
    29e4:	3f9c0100 	svccc	0x009c0100
    29e8:	12000017 	andne	r0, r0, #23
    29ec:	00001261 	andeq	r1, r0, r1, ror #4
    29f0:	27049d01 	strcs	r9, [r4, -r1, lsl #26]
    29f4:	00000585 	andeq	r0, r0, r5, lsl #11
    29f8:	126c9102 	rsbne	r9, ip, #-2147483648	; 0x80000000
    29fc:	00000fef 	andeq	r0, r0, pc, ror #31
    2a00:	36049d01 	strcc	r9, [r4], -r1, lsl #26
    2a04:	000000a7 	andeq	r0, r0, r7, lsr #1
    2a08:	136a9102 	cmnne	sl, #-2147483648	; 0x80000000
    2a0c:	00000ee4 	andeq	r0, r0, r4, ror #29
    2a10:	0c049f01 	stceq	15, cr9, [r4], {1}
    2a14:	000000a7 	andeq	r0, r0, r7, lsr #1
    2a18:	00769102 	rsbseq	r9, r6, r2, lsl #2
    2a1c:	000e1016 	andeq	r1, lr, r6, lsl r0
    2a20:	04810100 	streq	r0, [r1], #256	; 0x100
    2a24:	0016d006 	andseq	sp, r6, r6
    2a28:	00005020 	andeq	r5, r0, r0, lsr #32
    2a2c:	879c0100 	ldrhi	r0, [ip, r0, lsl #2]
    2a30:	12000017 	andne	r0, r0, #23
    2a34:	00001261 	andeq	r1, r0, r1, ror #4
    2a38:	27048101 	strcs	r8, [r4, -r1, lsl #2]
    2a3c:	00000585 	andeq	r0, r0, r5, lsl #11
    2a40:	126c9102 	rsbne	r9, ip, #-2147483648	; 0x80000000
    2a44:	00000fef 	andeq	r0, r0, pc, ror #31
    2a48:	36048101 	strcc	r8, [r4], -r1, lsl #2
    2a4c:	000000a7 	andeq	r0, r0, r7, lsr #1
    2a50:	136a9102 	cmnne	sl, #-2147483648	; 0x80000000
    2a54:	00000edb 	ldrdeq	r0, [r0], -fp
    2a58:	0c048301 	stceq	3, cr8, [r4], {1}
    2a5c:	000000a7 	andeq	r0, r0, r7, lsr #1
    2a60:	00769102 	rsbseq	r9, r6, r2, lsl #2
    2a64:	0013aa16 	andseq	sl, r3, r6, lsl sl
    2a68:	04640100 	strbteq	r0, [r4], #-256	; 0xffffff00
    2a6c:	00168806 	andseq	r8, r6, r6, lsl #16
    2a70:	00004820 	andeq	r4, r0, r0, lsr #16
    2a74:	cf9c0100 	svcgt	0x009c0100
    2a78:	12000017 	andne	r0, r0, #23
    2a7c:	00001261 	andeq	r1, r0, r1, ror #4
    2a80:	27046401 	strcs	r6, [r4, -r1, lsl #8]
    2a84:	00000585 	andeq	r0, r0, r5, lsl #11
    2a88:	126c9102 	rsbne	r9, ip, #-2147483648	; 0x80000000
    2a8c:	00000fef 	andeq	r0, r0, pc, ror #31
    2a90:	36046401 	strcc	r6, [r4], -r1, lsl #8
    2a94:	000000a7 	andeq	r0, r0, r7, lsr #1
    2a98:	136a9102 	cmnne	sl, #-2147483648	; 0x80000000
    2a9c:	00000edb 	ldrdeq	r0, [r0], -fp
    2aa0:	0c046601 	stceq	6, cr6, [r4], {1}
    2aa4:	000000a7 	andeq	r0, r0, r7, lsr #1
    2aa8:	00769102 	rsbseq	r9, r6, r2, lsl #2
    2aac:	00165e16 	andseq	r5, r6, r6, lsl lr
    2ab0:	04520100 	ldrbeq	r0, [r2], #-256	; 0xffffff00
    2ab4:	00167006 	andseq	r7, r6, r6
    2ab8:	00001820 	andeq	r1, r0, r0, lsr #16
    2abc:	079c0100 	ldreq	r0, [ip, r0, lsl #2]
    2ac0:	12000018 	andne	r0, r0, #24
    2ac4:	00001261 	andeq	r1, r0, r1, ror #4
    2ac8:	23045201 	movwcs	r5, #16897	; 0x4201
    2acc:	00000585 	andeq	r0, r0, r5, lsl #11
    2ad0:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
    2ad4:	00001665 	andeq	r1, r0, r5, ror #12
    2ad8:	32045201 	andcc	r5, r4, #268435456	; 0x10000000
    2adc:	000000c9 	andeq	r0, r0, r9, asr #1
    2ae0:	00709102 	rsbseq	r9, r0, r2, lsl #2
    2ae4:	00113c16 	andseq	r3, r1, r6, lsl ip
    2ae8:	04430100 	strbeq	r0, [r3], #-256	; 0xffffff00
    2aec:	00165806 	andseq	r5, r6, r6, lsl #16
    2af0:	00001820 	andeq	r1, r0, r0, lsr #16
    2af4:	3f9c0100 	svccc	0x009c0100
    2af8:	12000018 	andne	r0, r0, #24
    2afc:	00001261 	andeq	r1, r0, r1, ror #4
    2b00:	23044301 	movwcs	r4, #17153	; 0x4301
    2b04:	00000585 	andeq	r0, r0, r5, lsl #11
    2b08:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
    2b0c:	00001143 	andeq	r1, r0, r3, asr #2
    2b10:	32044301 	andcc	r4, r4, #67108864	; 0x4000000
    2b14:	000000c9 	andeq	r0, r0, r9, asr #1
    2b18:	00709102 	rsbseq	r9, r0, r2, lsl #2
    2b1c:	00112c16 	andseq	r2, r1, r6, lsl ip
    2b20:	04340100 	ldrteq	r0, [r4], #-256	; 0xffffff00
    2b24:	00164006 	andseq	r4, r6, r6
    2b28:	00001820 	andeq	r1, r0, r0, lsr #16
    2b2c:	779c0100 	ldrvc	r0, [ip, r0, lsl #2]
    2b30:	12000018 	andne	r0, r0, #24
    2b34:	00001261 	andeq	r1, r0, r1, ror #4
    2b38:	23043401 	movwcs	r3, #17409	; 0x4401
    2b3c:	00000585 	andeq	r0, r0, r5, lsl #11
    2b40:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
    2b44:	00001133 	andeq	r1, r0, r3, lsr r1
    2b48:	32043401 	andcc	r3, r4, #16777216	; 0x1000000
    2b4c:	000000c9 	andeq	r0, r0, r9, asr #1
    2b50:	00709102 	rsbseq	r9, r0, r2, lsl #2
    2b54:	000e9916 	andeq	r9, lr, r6, lsl r9
    2b58:	04240100 	strteq	r0, [r4], #-256	; 0xffffff00
    2b5c:	00162806 	andseq	r2, r6, r6, lsl #16
    2b60:	00001820 	andeq	r1, r0, r0, lsr #16
    2b64:	af9c0100 	svcge	0x009c0100
    2b68:	12000018 	andne	r0, r0, #24
    2b6c:	00001261 	andeq	r1, r0, r1, ror #4
    2b70:	23042401 	movwcs	r2, #17409	; 0x4401
    2b74:	00000585 	andeq	r0, r0, r5, lsl #11
    2b78:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
    2b7c:	00000ea0 	andeq	r0, r0, r0, lsr #29
    2b80:	32042401 	andcc	r2, r4, #16777216	; 0x1000000
    2b84:	000000c9 	andeq	r0, r0, r9, asr #1
    2b88:	00709102 	rsbseq	r9, r0, r2, lsl #2
    2b8c:	00166e16 	andseq	r6, r6, r6, lsl lr
    2b90:	03f60100 	mvnseq	r0, #0, 2
    2b94:	00155406 	andseq	r5, r5, r6, lsl #8
    2b98:	0000d420 	andeq	sp, r0, r0, lsr #8
    2b9c:	179c0100 	ldrne	r0, [ip, r0, lsl #2]
    2ba0:	12000019 	andne	r0, r0, #25
    2ba4:	00001261 	andeq	r1, r0, r1, ror #4
    2ba8:	2203f601 	andcs	pc, r3, #1048576	; 0x100000
    2bac:	00000585 	andeq	r0, r0, r5, lsl #11
    2bb0:	126c9102 	rsbne	r9, ip, #-2147483648	; 0x80000000
    2bb4:	00000fcd 	andeq	r0, r0, sp, asr #31
    2bb8:	3103f601 	tstcc	r3, r1, lsl #12	; <UNPREDICTABLE>
    2bbc:	000000a7 	andeq	r0, r0, r7, lsr #1
    2bc0:	126a9102 	rsbne	r9, sl, #-2147483648	; 0x80000000
    2bc4:	000016c8 	andeq	r1, r0, r8, asr #13
    2bc8:	4703f601 	strmi	pc, [r3, -r1, lsl #12]
    2bcc:	000000a7 	andeq	r0, r0, r7, lsr #1
    2bd0:	14689102 	strbtne	r9, [r8], #-258	; 0xfffffefe
    2bd4:	00706d74 	rsbseq	r6, r0, r4, ror sp
    2bd8:	0c03f801 	stceq	8, cr15, [r3], {1}
    2bdc:	000000c9 	andeq	r0, r0, r9, asr #1
    2be0:	13749102 	cmnne	r4, #-2147483648	; 0x80000000
    2be4:	00000f6b 	andeq	r0, r0, fp, ror #30
    2be8:	0c03f901 			; <UNDEFINED> instruction: 0x0c03f901
    2bec:	000000a7 	andeq	r0, r0, r7, lsr #1
    2bf0:	00729102 	rsbseq	r9, r2, r2, lsl #2
    2bf4:	0012f416 	andseq	pc, r2, r6, lsl r4	; <UNPREDICTABLE>
    2bf8:	03d20100 	bicseq	r0, r2, #0, 2
    2bfc:	00151406 	andseq	r1, r5, r6, lsl #8
    2c00:	00004020 	andeq	r4, r0, r0, lsr #32
    2c04:	3f9c0100 	svccc	0x009c0100
    2c08:	12000019 	andne	r0, r0, #25
    2c0c:	00001242 	andeq	r1, r0, r2, asr #4
    2c10:	2a03d201 	bcs	f741c <startup-0x1ff08be4>
    2c14:	0000193f 	andeq	r1, r0, pc, lsr r9
    2c18:	00749102 	rsbseq	r9, r4, r2, lsl #2
    2c1c:	04290415 	strteq	r0, [r9], #-1045	; 0xfffffbeb
    2c20:	47160000 	ldrmi	r0, [r6, -r0]
    2c24:	01000016 	tsteq	r0, r6, lsl r0
    2c28:	f0060393 			; <UNDEFINED> instruction: 0xf0060393
    2c2c:	24200013 	strtcs	r0, [r0], #-19	; 0xffffffed
    2c30:	01000001 	tsteq	r0, r1
    2c34:	0019ad9c 	mulseq	r9, ip, sp
    2c38:	12611200 	rsbne	r1, r1, #0, 4
    2c3c:	93010000 	movwls	r0, #4096	; 0x1000
    2c40:	05851f03 	streq	r1, [r5, #3843]	; 0xf03
    2c44:	91020000 	mrsls	r0, (UNDEF: 2)
    2c48:	12421264 	subne	r1, r2, #100, 4	; 0x40000006
    2c4c:	93010000 	movwls	r0, #4096	; 0x1000
    2c50:	193f3803 	ldmdbne	pc!, {r0, r1, fp, ip, sp}	; <UNPREDICTABLE>
    2c54:	91020000 	mrsls	r0, (UNDEF: 2)
    2c58:	10491360 	subne	r1, r9, r0, ror #6
    2c5c:	95010000 	strls	r0, [r1, #-0]
    2c60:	00a70c03 	adceq	r0, r7, r3, lsl #24
    2c64:	91020000 	mrsls	r0, (UNDEF: 2)
    2c68:	115a136c 	cmpne	sl, ip, ror #6
    2c6c:	95010000 	strls	r0, [r1, #-0]
    2c70:	00a71a03 	adceq	r1, r7, r3, lsl #20
    2c74:	91020000 	mrsls	r0, (UNDEF: 2)
    2c78:	1362136a 	cmnne	r2, #-1476395007	; 0xa8000001
    2c7c:	95010000 	strls	r0, [r1, #-0]
    2c80:	00a72703 	adceq	r2, r7, r3, lsl #14
    2c84:	91020000 	mrsls	r0, (UNDEF: 2)
    2c88:	ad16006e 	ldcge	0, cr0, [r6, #-440]	; 0xfffffe48
    2c8c:	01000010 	tsteq	r0, r0, lsl r0
    2c90:	70060343 	andvc	r0, r6, r3, asr #6
    2c94:	80200012 	eorhi	r0, r0, r2, lsl r0
    2c98:	01000001 	tsteq	r0, r1
    2c9c:	001a159c 	mulseq	sl, ip, r5
    2ca0:	12611200 	rsbne	r1, r1, #0, 4
    2ca4:	43010000 	movwmi	r0, #4096	; 0x1000
    2ca8:	05851f03 	streq	r1, [r5, #3843]	; 0xf03
    2cac:	91020000 	mrsls	r0, (UNDEF: 2)
    2cb0:	12421264 	subne	r1, r2, #100, 4	; 0x40000006
    2cb4:	43010000 	movwmi	r0, #4096	; 0x1000
    2cb8:	193f3803 	ldmdbne	pc!, {r0, r1, fp, ip, sp}	; <UNPREDICTABLE>
    2cbc:	91020000 	mrsls	r0, (UNDEF: 2)
    2cc0:	10491360 	subne	r1, r9, r0, ror #6
    2cc4:	45010000 	strmi	r0, [r1, #-0]
    2cc8:	00a70c03 	adceq	r0, r7, r3, lsl #24
    2ccc:	91020000 	mrsls	r0, (UNDEF: 2)
    2cd0:	115a136a 	cmpne	sl, sl, ror #6
    2cd4:	45010000 	strmi	r0, [r1, #-0]
    2cd8:	00a71a03 	adceq	r1, r7, r3, lsl #20
    2cdc:	91020000 	mrsls	r0, (UNDEF: 2)
    2ce0:	1362136e 	cmnne	r2, #-1207959551	; 0xb8000001
    2ce4:	45010000 	strmi	r0, [r1, #-0]
    2ce8:	00a72703 	adceq	r2, r7, r3, lsl #14
    2cec:	91020000 	mrsls	r0, (UNDEF: 2)
    2cf0:	1316006c 	tstne	r6, #108	; 0x6c
    2cf4:	01000016 	tsteq	r0, r6, lsl r0
    2cf8:	f40602f2 	vst1.64	{d0-d3}, [r6 :256], r2
    2cfc:	7c200010 	stcvc	0, cr0, [r0], #-64	; 0xffffffc0
    2d00:	01000001 	tsteq	r0, r1
    2d04:	001a7d9c 	mulseq	sl, ip, sp
    2d08:	12611200 	rsbne	r1, r1, #0, 4
    2d0c:	f2010000 	vhadd.s8	d0, d1, d0
    2d10:	05851f02 	streq	r1, [r5, #3842]	; 0xf02
    2d14:	91020000 	mrsls	r0, (UNDEF: 2)
    2d18:	12421264 	subne	r1, r2, #100, 4	; 0x40000006
    2d1c:	f2010000 	vhadd.s8	d0, d1, d0
    2d20:	193f3802 	ldmdbne	pc!, {r1, fp, ip, sp}	; <UNPREDICTABLE>
    2d24:	91020000 	mrsls	r0, (UNDEF: 2)
    2d28:	10491360 	subne	r1, r9, r0, ror #6
    2d2c:	f4010000 	vst4.8	{d0-d3}, [r1], r0
    2d30:	00a70c02 	adceq	r0, r7, r2, lsl #24
    2d34:	91020000 	mrsls	r0, (UNDEF: 2)
    2d38:	115a136a 	cmpne	sl, sl, ror #6
    2d3c:	f4010000 	vst4.8	{d0-d3}, [r1], r0
    2d40:	00a71a02 	adceq	r1, r7, r2, lsl #20
    2d44:	91020000 	mrsls	r0, (UNDEF: 2)
    2d48:	1362136e 	cmnne	r2, #-1207959551	; 0xb8000001
    2d4c:	f4010000 	vst4.8	{d0-d3}, [r1], r0
    2d50:	00a72702 	adceq	r2, r7, r2, lsl #14
    2d54:	91020000 	mrsls	r0, (UNDEF: 2)
    2d58:	7116006c 	tstvc	r6, ip, rrx
    2d5c:	01000017 	tsteq	r0, r7, lsl r0
    2d60:	9c0602a1 	sfmls	f0, 4, [r6], {161}	; 0xa1
    2d64:	5820000f 	stmdapl	r0!, {r0, r1, r2, r3}
    2d68:	01000001 	tsteq	r0, r1
    2d6c:	001ae59c 	mulseq	sl, ip, r5
    2d70:	12611200 	rsbne	r1, r1, #0, 4
    2d74:	a1010000 	mrsge	r0, (UNDEF: 1)
    2d78:	05851f02 	streq	r1, [r5, #3842]	; 0xf02
    2d7c:	91020000 	mrsls	r0, (UNDEF: 2)
    2d80:	12421264 	subne	r1, r2, #100, 4	; 0x40000006
    2d84:	a1010000 	mrsge	r0, (UNDEF: 1)
    2d88:	193f3802 	ldmdbne	pc!, {r1, fp, ip, sp}	; <UNPREDICTABLE>
    2d8c:	91020000 	mrsls	r0, (UNDEF: 2)
    2d90:	10491360 	subne	r1, r9, r0, ror #6
    2d94:	a3010000 	movwge	r0, #4096	; 0x1000
    2d98:	00a70c02 	adceq	r0, r7, r2, lsl #24
    2d9c:	91020000 	mrsls	r0, (UNDEF: 2)
    2da0:	115a136a 	cmpne	sl, sl, ror #6
    2da4:	a3010000 	movwge	r0, #4096	; 0x1000
    2da8:	00a71a02 	adceq	r1, r7, r2, lsl #20
    2dac:	91020000 	mrsls	r0, (UNDEF: 2)
    2db0:	1362136e 	cmnne	r2, #-1207959551	; 0xb8000001
    2db4:	a3010000 	movwge	r0, #4096	; 0x1000
    2db8:	00a72702 	adceq	r2, r7, r2, lsl #14
    2dbc:	91020000 	mrsls	r0, (UNDEF: 2)
    2dc0:	f716006c 			; <UNDEFINED> instruction: 0xf716006c
    2dc4:	01000015 	tsteq	r0, r5, lsl r0
    2dc8:	5c060250 	sfmpl	f0, 4, [r6], {80}	; 0x50
    2dcc:	4020000f 	eormi	r0, r0, pc
    2dd0:	01000000 	mrseq	r0, (UNDEF: 0)
    2dd4:	001b1d9c 	mulseq	fp, ip, sp
    2dd8:	12611200 	rsbne	r1, r1, #0, 4
    2ddc:	50010000 	andpl	r0, r1, r0
    2de0:	05851b02 	streq	r1, [r5, #2818]	; 0xb02
    2de4:	91020000 	mrsls	r0, (UNDEF: 2)
    2de8:	0dbf1274 	lfmeq	f1, 4, [pc, #464]!	; 2fc0 <startup-0x1fffd040>
    2dec:	50010000 	andpl	r0, r1, r0
    2df0:	01453102 	cmpeq	r5, r2, lsl #2
    2df4:	91020000 	mrsls	r0, (UNDEF: 2)
    2df8:	5e160073 	mrcpl	0, 0, r0, cr6, cr3, {3}
    2dfc:	01000014 	tsteq	r0, r4, lsl r0
    2e00:	1e06023c 	mcrne	2, 0, r0, cr6, cr12, {1}
    2e04:	3e20000f 	cdpcc	0, 2, cr0, cr0, cr15, {0}
    2e08:	01000000 	mrseq	r0, (UNDEF: 0)
    2e0c:	001b559c 	mulseq	fp, ip, r5
    2e10:	12611200 	rsbne	r1, r1, #0, 4
    2e14:	3c010000 	stccc	0, cr0, [r1], {-0}
    2e18:	05852802 	streq	r2, [r5, #2050]	; 0x802
    2e1c:	91020000 	mrsls	r0, (UNDEF: 2)
    2e20:	10521274 	subsne	r1, r2, r4, ror r2
    2e24:	3c010000 	stccc	0, cr0, [r1], {-0}
    2e28:	00a73702 	adceq	r3, r7, r2, lsl #14
    2e2c:	91020000 	mrsls	r0, (UNDEF: 2)
    2e30:	24160072 	ldrcs	r0, [r6], #-114	; 0xffffff8e
    2e34:	0100000e 	tsteq	r0, lr
    2e38:	e6060225 	str	r0, [r6], -r5, lsr #4
    2e3c:	3820000e 	stmdacc	r0!, {r1, r2, r3}
    2e40:	01000000 	mrseq	r0, (UNDEF: 0)
    2e44:	001b8d9c 	mulseq	fp, ip, sp
    2e48:	12611200 	rsbne	r1, r1, #0, 4
    2e4c:	25010000 	strcs	r0, [r1, #-0]
    2e50:	05852a02 	streq	r2, [r5, #2562]	; 0xa02
    2e54:	91020000 	mrsls	r0, (UNDEF: 2)
    2e58:	0e051274 	mcreq	2, 0, r1, cr5, cr4, {3}
    2e5c:	25010000 	strcs	r0, [r1, #-0]
    2e60:	00a73902 	adceq	r3, r7, r2, lsl #18
    2e64:	91020000 	mrsls	r0, (UNDEF: 2)
    2e68:	46160072 			; <UNDEFINED> instruction: 0x46160072
    2e6c:	0100000f 	tsteq	r0, pc
    2e70:	a606020a 	strge	r0, [r6], -sl, lsl #4
    2e74:	4020000e 	eormi	r0, r0, lr
    2e78:	01000000 	mrseq	r0, (UNDEF: 0)
    2e7c:	001bc59c 	mulseq	fp, ip, r5
    2e80:	12611200 	rsbne	r1, r1, #0, 4
    2e84:	0a010000 	beq	42e8c <startup-0x1ffbd174>
    2e88:	05852802 	streq	r2, [r5, #2050]	; 0x802
    2e8c:	91020000 	mrsls	r0, (UNDEF: 2)
    2e90:	0dbf1274 	lfmeq	f1, 4, [pc, #464]!	; 3068 <startup-0x1fffcf98>
    2e94:	0a010000 	beq	42e9c <startup-0x1ffbd164>
    2e98:	01453e02 	cmpeq	r5, r2, lsl #28
    2e9c:	91020000 	mrsls	r0, (UNDEF: 2)
    2ea0:	7d160073 	ldcvc	0, cr0, [r6, #-460]	; 0xfffffe34
    2ea4:	01000016 	tsteq	r0, r6, lsl r0
    2ea8:	660601f1 			; <UNDEFINED> instruction: 0x660601f1
    2eac:	4020000e 	eormi	r0, r0, lr
    2eb0:	01000000 	mrseq	r0, (UNDEF: 0)
    2eb4:	001bfd9c 	mulseq	fp, ip, sp
    2eb8:	12611200 	rsbne	r1, r1, #0, 4
    2ebc:	f1010000 	setend	le
    2ec0:	05852b01 	streq	r2, [r5, #2817]	; 0xb01
    2ec4:	91020000 	mrsls	r0, (UNDEF: 2)
    2ec8:	10cc1274 	sbcne	r1, ip, r4, ror r2
    2ecc:	f1010000 	setend	le
    2ed0:	00a73a01 	adceq	r3, r7, r1, lsl #20
    2ed4:	91020000 	mrsls	r0, (UNDEF: 2)
    2ed8:	b9160072 	ldmdblt	r6, {r1, r4, r5, r6}
    2edc:	0100000e 	tsteq	r0, lr
    2ee0:	260601d4 			; <UNDEFINED> instruction: 0x260601d4
    2ee4:	4020000e 	eormi	r0, r0, lr
    2ee8:	01000000 	mrseq	r0, (UNDEF: 0)
    2eec:	001c359c 	mulseq	ip, ip, r5
    2ef0:	12611200 	rsbne	r1, r1, #0, 4
    2ef4:	d4010000 	strle	r0, [r1], #-0
    2ef8:	05852b01 	streq	r2, [r5, #2817]	; 0xb01
    2efc:	91020000 	mrsls	r0, (UNDEF: 2)
    2f00:	0dbf1274 	lfmeq	f1, 4, [pc, #464]!	; 30d8 <startup-0x1fffcf28>
    2f04:	d4010000 	strle	r0, [r1], #-0
    2f08:	01454101 	cmpeq	r5, r1, lsl #2
    2f0c:	91020000 	mrsls	r0, (UNDEF: 2)
    2f10:	93180073 	tstls	r8, #115	; 0x73
    2f14:	01000011 	tsteq	r0, r1, lsl r0
    2f18:	a70a01c4 	strge	r0, [sl, -r4, asr #3]
    2f1c:	10000000 	andne	r0, r0, r0
    2f20:	1620000e 	strtne	r0, [r0], -lr
    2f24:	01000000 	mrseq	r0, (UNDEF: 0)
    2f28:	001c619c 	mulseq	ip, ip, r1
    2f2c:	12611200 	rsbne	r1, r1, #0, 4
    2f30:	c4010000 	strgt	r0, [r1], #-0
    2f34:	05852801 	streq	r2, [r5, #2049]	; 0x801
    2f38:	91020000 	mrsls	r0, (UNDEF: 2)
    2f3c:	a4180074 	ldrge	r0, [r8], #-116	; 0xffffff8c
    2f40:	01000011 	tsteq	r0, r1, lsl r0
    2f44:	c90a01b6 	stmdbgt	sl, {r1, r2, r4, r5, r7, r8}
    2f48:	fc000000 	stc2	0, cr0, [r0], {-0}
    2f4c:	1420000d 	strtne	r0, [r0], #-13
    2f50:	01000000 	mrseq	r0, (UNDEF: 0)
    2f54:	001c8d9c 	mulseq	ip, ip, sp
    2f58:	12611200 	rsbne	r1, r1, #0, 4
    2f5c:	b6010000 	strlt	r0, [r1], -r0
    2f60:	05852601 	streq	r2, [r5, #1537]	; 0x601
    2f64:	91020000 	mrsls	r0, (UNDEF: 2)
    2f68:	5a160074 	bpl	583140 <startup-0x1fa7cec0>
    2f6c:	01000010 	tsteq	r0, r0, lsl r0
    2f70:	e40601a8 	str	r0, [r6], #-424	; 0xfffffe58
    2f74:	1820000d 	stmdane	r0!, {r0, r2, r3}
    2f78:	01000000 	mrseq	r0, (UNDEF: 0)
    2f7c:	001cc59c 	mulseq	ip, ip, r5
    2f80:	12611200 	rsbne	r1, r1, #0, 4
    2f84:	a8010000 	stmdage	r1, {}	; <UNPREDICTABLE>
    2f88:	05852501 	streq	r2, [r5, #1281]	; 0x501
    2f8c:	91020000 	mrsls	r0, (UNDEF: 2)
    2f90:	10611274 	rsbne	r1, r1, r4, ror r2
    2f94:	a8010000 	stmdage	r1, {}	; <UNPREDICTABLE>
    2f98:	00c93401 	sbceq	r3, r9, r1, lsl #8
    2f9c:	91020000 	mrsls	r0, (UNDEF: 2)
    2fa0:	33160070 	tstcc	r6, #112	; 0x70
    2fa4:	01000017 	tsteq	r0, r7, lsl r0
    2fa8:	cc060199 	stfgts	f0, [r6], {153}	; 0x99
    2fac:	1820000d 	stmdane	r0!, {r0, r2, r3}
    2fb0:	01000000 	mrseq	r0, (UNDEF: 0)
    2fb4:	001cfd9c 	mulseq	ip, ip, sp
    2fb8:	12611200 	rsbne	r1, r1, #0, 4
    2fbc:	99010000 	stmdbls	r1, {}	; <UNPREDICTABLE>
    2fc0:	05852201 	streq	r2, [r5, #513]	; 0x201
    2fc4:	91020000 	mrsls	r0, (UNDEF: 2)
    2fc8:	09971274 	ldmibeq	r7, {r2, r4, r5, r6, r9, ip}
    2fcc:	99010000 	stmdbls	r1, {}	; <UNPREDICTABLE>
    2fd0:	00c93101 	sbceq	r3, r9, r1, lsl #2
    2fd4:	91020000 	mrsls	r0, (UNDEF: 2)
    2fd8:	d9160070 	ldmdble	r6, {r4, r5, r6}
    2fdc:	0100000f 	tsteq	r0, pc
    2fe0:	8406017f 	strhi	r0, [r6], #-383	; 0xfffffe81
    2fe4:	4820000d 	stmdami	r0!, {r0, r2, r3}
    2fe8:	01000000 	mrseq	r0, (UNDEF: 0)
    2fec:	001d459c 	mulseq	sp, ip, r5
    2ff0:	12611200 	rsbne	r1, r1, #0, 4
    2ff4:	7f010000 	svcvc	0x00010000
    2ff8:	05852901 	streq	r2, [r5, #2305]	; 0x901
    2ffc:	91020000 	mrsls	r0, (UNDEF: 2)
    3000:	009a126c 	addseq	r1, sl, ip, ror #4
    3004:	7f010000 	svcvc	0x00010000
    3008:	00a73801 	adceq	r3, r7, r1, lsl #16
    300c:	91020000 	mrsls	r0, (UNDEF: 2)
    3010:	0eed136a 	cdpeq	3, 14, cr1, cr13, cr10, {3}
    3014:	81010000 	mrshi	r0, (UNDEF: 1)
    3018:	00a70c01 	adceq	r0, r7, r1, lsl #24
    301c:	91020000 	mrsls	r0, (UNDEF: 2)
    3020:	03160076 	tsteq	r6, #118	; 0x76
    3024:	01000015 	tsteq	r0, r5, lsl r0
    3028:	54060168 	strpl	r0, [r6], #-360	; 0xfffffe98
    302c:	3020000d 	eorcc	r0, r0, sp
    3030:	01000000 	mrseq	r0, (UNDEF: 0)
    3034:	001d8d9c 	mulseq	sp, ip, sp
    3038:	12611200 	rsbne	r1, r1, #0, 4
    303c:	68010000 	stmdavs	r1, {}	; <UNPREDICTABLE>
    3040:	05852701 	streq	r2, [r5, #1793]	; 0x701
    3044:	91020000 	mrsls	r0, (UNDEF: 2)
    3048:	12c21274 	sbcne	r1, r2, #116, 4	; 0x40000007
    304c:	68010000 	stmdavs	r1, {}	; <UNPREDICTABLE>
    3050:	00a73601 	adceq	r3, r7, r1, lsl #12
    3054:	91020000 	mrsls	r0, (UNDEF: 2)
    3058:	13051272 	movwne	r1, #21106	; 0x5272
    305c:	68010000 	stmdavs	r1, {}	; <UNPREDICTABLE>
    3060:	00a74a01 	adceq	r4, r7, r1, lsl #20
    3064:	91020000 	mrsls	r0, (UNDEF: 2)
    3068:	b3160070 	tstlt	r6, #112	; 0x70
    306c:	01000011 	tsteq	r0, r1, lsl r0
    3070:	24060154 	strcs	r0, [r6], #-340	; 0xfffffeac
    3074:	3020000d 	eorcc	r0, r0, sp
    3078:	01000000 	mrseq	r0, (UNDEF: 0)
    307c:	001db59c 	mulseq	sp, ip, r5
    3080:	14391200 	ldrtne	r1, [r9], #-512	; 0xfffffe00
    3084:	54010000 	strpl	r0, [r1], #-0
    3088:	1db53601 	ldcne	6, cr3, [r5, #4]!
    308c:	91020000 	mrsls	r0, (UNDEF: 2)
    3090:	04150074 	ldreq	r0, [r5], #-116	; 0xffffff8c
    3094:	000003ab 	andeq	r0, r0, fp, lsr #7
    3098:	00155816 	andseq	r5, r5, r6, lsl r8
    309c:	01200100 			; <UNDEFINED> instruction: 0x01200100
    30a0:	000c2c06 	andeq	r2, ip, r6, lsl #24
    30a4:	0000f820 	andeq	pc, r0, r0, lsr #16
    30a8:	039c0100 	orrseq	r0, ip, #0, 2
    30ac:	1200001e 	andne	r0, r0, #30
    30b0:	00001261 	andeq	r1, r0, r1, ror #4
    30b4:	24012001 	strcs	r2, [r1], #-1
    30b8:	00000585 	andeq	r0, r0, r5, lsl #11
    30bc:	126c9102 	rsbne	r9, ip, #-2147483648	; 0x80000000
    30c0:	00001439 	andeq	r1, r0, r9, lsr r4
    30c4:	43012001 	movwmi	r2, #4097	; 0x1001
    30c8:	00001db5 			; <UNDEFINED> instruction: 0x00001db5
    30cc:	13689102 	cmnne	r8, #-2147483648	; 0x80000000
    30d0:	00000eed 	andeq	r0, r0, sp, ror #29
    30d4:	0c012201 	sfmeq	f2, 4, [r1], {1}
    30d8:	000000a7 	andeq	r0, r0, r7, lsr #1
    30dc:	00769102 	rsbseq	r9, r6, r2, lsl #2
    30e0:	00185419 	andseq	r5, r8, r9, lsl r4
    30e4:	06c80100 	strbeq	r0, [r8], r0, lsl #2
    30e8:	20000a5c 	andcs	r0, r0, ip, asr sl
    30ec:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    30f0:	611a9c01 	tstvs	sl, r1, lsl #24
    30f4:	01000012 	tsteq	r0, r2, lsl r0
    30f8:	05851ec8 	streq	r1, [r5, #3784]	; 0xec8
    30fc:	91020000 	mrsls	r0, (UNDEF: 2)
    3100:	7f000074 	svcvc	0x00000074
    3104:	04000003 	streq	r0, [r0], #-3
    3108:	0006ec00 	andeq	lr, r6, r0, lsl #24
    310c:	23010400 	movwcs	r0, #5120	; 0x1400
    3110:	0c000003 	stceq	0, cr0, [r0], {3}
    3114:	000018c0 	andeq	r1, r0, r0, asr #17
    3118:	0000042e 	andeq	r0, r0, lr, lsr #8
    311c:	20002c34 	andcs	r2, r0, r4, lsr ip
    3120:	00000208 	andeq	r0, r0, r8, lsl #4
    3124:	00001685 	andeq	r1, r0, r5, lsl #13
    3128:	56060102 	strpl	r0, [r6], -r2, lsl #2
    312c:	02000007 	andeq	r0, r0, #7
    3130:	07540801 	ldrbeq	r0, [r4, -r1, lsl #16]
    3134:	02020000 	andeq	r0, r2, #0
    3138:	00079b05 	andeq	r9, r7, r5, lsl #22
    313c:	07020200 	streq	r0, [r2, -r0, lsl #4]
    3140:	000007ed 	andeq	r0, r0, sp, ror #15
    3144:	0008dd03 	andeq	sp, r8, r3, lsl #26
    3148:	184d0200 	stmdane	sp, {r9}^
    314c:	0000004d 	andeq	r0, r0, sp, asr #32
    3150:	b0050402 	andlt	r0, r5, r2, lsl #8
    3154:	03000001 	movweq	r0, #1
    3158:	000002f8 	strdeq	r0, [r0], -r8
    315c:	60194f02 	andsvs	r4, r9, r2, lsl #30
    3160:	02000000 	andeq	r0, r0, #0
    3164:	01d70704 	bicseq	r0, r7, r4, lsl #14
    3168:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    316c:	0001ab05 	andeq	sl, r1, r5, lsl #22
    3170:	07080200 	streq	r0, [r8, -r0, lsl #4]
    3174:	000001d2 	ldrdeq	r0, [r0], -r2
    3178:	69050404 	stmdbvs	r5, {r2, sl}
    317c:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    3180:	01dc0704 	bicseq	r0, ip, r4, lsl #14
    3184:	df030000 	svcle	0x00030000
    3188:	03000008 	movweq	r0, #8
    318c:	0041132c 	subeq	r1, r1, ip, lsr #6
    3190:	83050000 	movwhi	r0, #20480	; 0x5000
    3194:	03000000 	movweq	r0, #0
    3198:	000002fa 	strdeq	r0, [r0], -sl
    319c:	54143003 	ldrpl	r3, [r4], #-3
    31a0:	05000000 	streq	r0, [r0, #-0]
    31a4:	00000094 	muleq	r0, r4, r0
    31a8:	00077506 	andeq	r7, r7, r6, lsl #10
    31ac:	06fa0400 	ldrbteq	r0, [sl], r0, lsl #8
    31b0:	00008f19 	andeq	r8, r0, r9, lsl pc
    31b4:	06ac0700 	strteq	r0, [ip], r0, lsl #14
    31b8:	3b050000 	blcc	1431c0 <startup-0x1febce40>
    31bc:	00009411 	andeq	r9, r0, r1, lsl r4
    31c0:	01070800 	tsteq	r7, r0, lsl #16
    31c4:	0000002c 	andeq	r0, r0, ip, lsr #32
    31c8:	0e035d06 	cdpeq	13, 0, cr5, cr3, cr6, {0}
    31cc:	000000da 	ldrdeq	r0, [r0], -sl
    31d0:	000b4c09 	andeq	r4, fp, r9, lsl #24
    31d4:	530a0000 	movwpl	r0, #40960	; 0xa000
    31d8:	01005445 	tsteq	r0, r5, asr #8
    31dc:	216a0b00 	cmncs	sl, r0, lsl #22
    31e0:	5d060000 	stcpl	0, cr0, [r6, #-0]
    31e4:	00be2803 	adcseq	r2, lr, r3, lsl #16
    31e8:	fc0b0000 	stc2	0, cr0, [fp], {-0}
    31ec:	06000022 	streq	r0, [r0], -r2, lsr #32
    31f0:	be34035d 	mrclt	3, 1, r0, cr4, cr13, {2}
    31f4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    31f8:	002c0107 	eoreq	r0, ip, r7, lsl #2
    31fc:	5f060000 	svcpl	0x00060000
    3200:	01100e03 	tsteq	r0, r3, lsl #28
    3204:	00090000 	andeq	r0, r9, r0
    3208:	00000001 	andeq	r0, r0, r1
    320c:	00022d09 	andeq	r2, r2, r9, lsl #26
    3210:	0b000100 	bleq	3618 <startup-0x1fffc9e8>
    3214:	00000683 	andeq	r0, r0, r3, lsl #13
    3218:	2f035f06 	svccs	0x00035f06
    321c:	000000f4 	strdeq	r0, [r0], -r4
    3220:	1f06180c 	svcne	0x0006180c
    3224:	017b0905 	cmneq	fp, r5, lsl #18
    3228:	490d0000 	stmdbmi	sp, {}	; <UNPREDICTABLE>
    322c:	0600524d 	streq	r5, [r0], -sp, asr #4
    3230:	a0110521 	andsge	r0, r1, r1, lsr #10
    3234:	00000000 	andeq	r0, r0, r0
    3238:	524d450d 	subpl	r4, sp, #54525952	; 0x3400000
    323c:	05220600 	streq	r0, [r2, #-1536]!	; 0xfffffa00
    3240:	0000a011 	andeq	sl, r0, r1, lsl r0
    3244:	d00e0400 	andle	r0, lr, r0, lsl #8
    3248:	06000019 			; <UNDEFINED> instruction: 0x06000019
    324c:	a0110523 	andsge	r0, r1, r3, lsr #10
    3250:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3254:	001a6f0e 	andseq	r6, sl, lr, lsl #30
    3258:	05240600 	streq	r0, [r4, #-1536]!	; 0xfffffa00
    325c:	0000a011 	andeq	sl, r0, r1, lsl r0
    3260:	880e0c00 	stmdahi	lr, {sl, fp}
    3264:	0600001a 			; <UNDEFINED> instruction: 0x0600001a
    3268:	a0110525 	andsge	r0, r1, r5, lsr #10
    326c:	10000000 	andne	r0, r0, r0
    3270:	0052500d 	subseq	r5, r2, sp
    3274:	11052606 	tstne	r5, r6, lsl #12
    3278:	000000a0 	andeq	r0, r0, r0, lsr #1
    327c:	c30b0014 	movwgt	r0, #45076	; 0xb014
    3280:	06000019 			; <UNDEFINED> instruction: 0x06000019
    3284:	1d030527 	cfstr32ne	mvfx0, [r3, #-156]	; 0xffffff64
    3288:	0f000001 	svceq	0x00000001
    328c:	002c0107 	eoreq	r0, ip, r7, lsl #2
    3290:	37070000 	strcc	r0, [r7, -r0]
    3294:	0001a301 	andeq	sl, r1, r1, lsl #6
    3298:	19550900 	ldmdbne	r5, {r8, fp}^
    329c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    32a0:	00001945 	andeq	r1, r0, r5, asr #18
    32a4:	b2030004 	andlt	r0, r3, #4
    32a8:	07000019 	smladeq	r0, r9, r0, r0
    32ac:	0188023a 	orreq	r0, r8, sl, lsr r2
    32b0:	070f0000 	streq	r0, [pc, -r0]
    32b4:	00002c01 	andeq	r2, r0, r1, lsl #24
    32b8:	01430700 	cmpeq	r3, r0, lsl #14
    32bc:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    32c0:	0019d509 	andseq	sp, r9, r9, lsl #10
    32c4:	5a090800 	bpl	2452cc <startup-0x1fdbad34>
    32c8:	0c00001a 	stceq	0, cr0, [r0], {26}
    32cc:	0019e909 	andseq	lr, r9, r9, lsl #18
    32d0:	03001000 	movweq	r1, #0
    32d4:	00001a74 	andeq	r1, r0, r4, ror sl
    32d8:	af024707 	svcge	0x00024707
    32dc:	10000001 	andne	r0, r0, r1
    32e0:	09500708 	ldmdbeq	r0, {r3, r8, r9, sl}^
    32e4:	0000021a 	andeq	r0, r0, sl, lsl r2
    32e8:	0018ac11 	andseq	sl, r8, r1, lsl ip
    32ec:	0c520700 	mrrceq	7, 0, r0, r2, cr0
    32f0:	00000094 	muleq	r0, r4, r0
    32f4:	18b61100 	ldmne	r6!, {r8, ip}
    32f8:	55070000 	strpl	r0, [r7, #-0]
    32fc:	0001a314 	andeq	sl, r1, r4, lsl r3
    3300:	38110400 	ldmdacc	r1, {sl}
    3304:	07000019 	smladeq	r0, r9, r0, r0
    3308:	01d01758 	bicseq	r1, r0, r8, asr r7
    330c:	11050000 	mrsne	r0, (UNDEF: 5)
    3310:	0000192b 	andeq	r1, r0, fp, lsr #18
    3314:	10135b07 	andsne	r5, r3, r7, lsl #22
    3318:	06000001 	streq	r0, [r0], -r1
    331c:	19820300 	stmibne	r2, {r8, r9}
    3320:	5d070000 	stcpl	0, cr0, [r7, #-0]
    3324:	0001dc02 	andeq	sp, r1, r2, lsl #24
    3328:	1a431200 	bne	10c7b30 <startup-0x1ef384d0>
    332c:	20010000 	andcs	r0, r1, r0
    3330:	2e200601 	cfmadda32cs	mvax0, mvax0, mvfx0, mvfx1
    3334:	001c2000 	andseq	r2, ip, r0
    3338:	9c010000 	stcls	0, cr0, [r1], {-0}
    333c:	0000024e 	andeq	r0, r0, lr, asr #4
    3340:	0018ac13 	andseq	sl, r8, r3, lsl ip
    3344:	01200100 			; <UNDEFINED> instruction: 0x01200100
    3348:	00009426 	andeq	r9, r0, r6, lsr #8
    334c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3350:	1a321400 	bne	c88358 <startup-0x1f377ca8>
    3354:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    3358:	00e70a01 	rsceq	r0, r7, r1, lsl #20
    335c:	2de40000 	stclcs	0, cr0, [r4]
    3360:	003c2000 	eorseq	r2, ip, r0
    3364:	9c010000 	stcls	0, cr0, [r1], {-0}
    3368:	0000028a 	andeq	r0, r0, sl, lsl #5
    336c:	0018ac13 	andseq	sl, r8, r3, lsl ip
    3370:	01080100 	mrseq	r0, (UNDEF: 24)
    3374:	00009424 	andeq	r9, r0, r4, lsr #8
    3378:	6c910200 	lfmvs	f0, 4, [r1], {0}
    337c:	000ba815 	andeq	sl, fp, r5, lsl r8
    3380:	010a0100 	mrseq	r0, (UNDEF: 26)
    3384:	0000da0e 	andeq	sp, r0, lr, lsl #20
    3388:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    338c:	19a31600 	stmibne	r3!, {r9, sl, ip}
    3390:	fa010000 	blx	43398 <startup-0x1ffbcc68>
    3394:	002dc806 	eoreq	ip, sp, r6, lsl #16
    3398:	00001c20 	andeq	r1, r0, r0, lsr #24
    339c:	b09c0100 	addslt	r0, ip, r0, lsl #2
    33a0:	17000002 	strne	r0, [r0, -r2]
    33a4:	000018ac 	andeq	r1, r0, ip, lsr #17
    33a8:	941efa01 	ldrls	pc, [lr], #-2561	; 0xfffff5ff
    33ac:	02000000 	andeq	r0, r0, #0
    33b0:	18007491 	stmdane	r0, {r0, r4, r7, sl, ip, sp, lr}
    33b4:	00001a0f 	andeq	r1, r0, pc, lsl #20
    33b8:	da0ce301 	ble	33bfc4 <startup-0x1fcc403c>
    33bc:	8c000000 	stchi	0, cr0, [r0], {-0}
    33c0:	3c20002d 	stccc	0, cr0, [r0], #-180	; 0xffffff4c
    33c4:	01000000 	mrseq	r0, (UNDEF: 0)
    33c8:	0002e99c 	muleq	r2, ip, r9
    33cc:	18ac1700 	stmiane	ip!, {r8, r9, sl, ip}
    33d0:	e3010000 	movw	r0, #4096	; 0x1000
    33d4:	00009428 	andeq	r9, r0, r8, lsr #8
    33d8:	6c910200 	lfmvs	f0, 4, [r1], {0}
    33dc:	000ba819 	andeq	sl, fp, r9, lsl r8
    33e0:	0ee50100 	cdpeq	1, 14, cr0, cr5, cr0, {0}
    33e4:	000000da 	ldrdeq	r0, [r0], -sl
    33e8:	00779102 	rsbseq	r9, r7, r2, lsl #2
    33ec:	00196916 	andseq	r6, r9, r6, lsl r9
    33f0:	06c50100 	strbeq	r0, [r5], r0, lsl #2
    33f4:	20002d6c 	andcs	r2, r0, ip, ror #26
    33f8:	00000020 	andeq	r0, r0, r0, lsr #32
    33fc:	030f9c01 	movweq	r9, #64513	; 0xfc01
    3400:	ac170000 	ldcge	0, cr0, [r7], {-0}
    3404:	01000018 	tsteq	r0, r8, lsl r0
    3408:	009428c5 	addseq	r2, r4, r5, asr #17
    340c:	91020000 	mrsls	r0, (UNDEF: 2)
    3410:	22160074 	andscs	r0, r6, #116	; 0x74
    3414:	0100001a 	tsteq	r0, sl, lsl r0
    3418:	2d4406b6 	stclcs	6, cr0, [r4, #-728]	; 0xfffffd28
    341c:	00282000 	eoreq	r2, r8, r0
    3420:	9c010000 	stcls	0, cr0, [r1], {-0}
    3424:	00000335 	andeq	r0, r0, r5, lsr r3
    3428:	00199317 	andseq	r9, r9, r7, lsl r3
    342c:	28b60100 	ldmcs	r6!, {r8}
    3430:	00000335 	andeq	r0, r0, r5, lsr r3
    3434:	00749102 	rsbseq	r9, r4, r2, lsl #2
    3438:	021a041a 	andseq	r0, sl, #436207616	; 0x1a000000
    343c:	05160000 	ldreq	r0, [r6, #-0]
    3440:	0100001a 	tsteq	r0, sl, lsl r0
    3444:	2c64067e 	stclcs	6, cr0, [r4], #-504	; 0xfffffe08
    3448:	00e02000 	rsceq	r2, r0, r0
    344c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3450:	00000370 	andeq	r0, r0, r0, ror r3
    3454:	00199317 	andseq	r9, r9, r7, lsl r3
    3458:	227e0100 	rsbscs	r0, lr, #0, 2
    345c:	00000335 	andeq	r0, r0, r5, lsr r3
    3460:	1b6c9102 	blne	1b27870 <startup-0x1e4d8790>
    3464:	00706d74 	rsbseq	r6, r0, r4, ror sp
    3468:	940c8001 	strls	r8, [ip], #-1
    346c:	02000000 	andeq	r0, r0, #0
    3470:	1c007491 	cfstrsne	mvf7, [r0], {145}	; 0x91
    3474:	00001a8e 	andeq	r1, r0, lr, lsl #21
    3478:	34066e01 	strcc	r6, [r6], #-3585	; 0xfffff1ff
    347c:	3020002c 	eorcc	r0, r0, ip, lsr #32
    3480:	01000000 	mrseq	r0, (UNDEF: 0)
    3484:	058e009c 	streq	r0, [lr, #156]	; 0x9c
    3488:	00040000 	andeq	r0, r4, r0
    348c:	000008d6 	ldrdeq	r0, [r0], -r6
    3490:	03230104 			; <UNDEFINED> instruction: 0x03230104
    3494:	f00c0000 			; <UNDEFINED> instruction: 0xf00c0000
    3498:	2e00001b 	mcrcs	0, 0, r0, cr0, cr11, {0}
    349c:	3c000004 	stccc	0, cr0, [r0], {4}
    34a0:	c020002e 	eorgt	r0, r0, lr, lsr #32
    34a4:	bc000001 	stclt	0, cr0, [r0], {1}
    34a8:	02000019 	andeq	r0, r0, #25
    34ac:	07560601 	ldrbeq	r0, [r6, -r1, lsl #12]
    34b0:	d1030000 	mrsle	r0, (UNDEF: 3)
    34b4:	02000000 	andeq	r0, r0, #0
    34b8:	0038182b 	eorseq	r1, r8, fp, lsr #16
    34bc:	01020000 	mrseq	r0, (UNDEF: 2)
    34c0:	00075408 	andeq	r5, r7, r8, lsl #8
    34c4:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    34c8:	0000079b 	muleq	r0, fp, r7
    34cc:	ed070202 	sfm	f0, 4, [r7, #-8]
    34d0:	03000007 	movweq	r0, #7
    34d4:	000008dd 	ldrdeq	r0, [r0], -sp
    34d8:	59184d02 	ldmdbpl	r8, {r1, r8, sl, fp, lr}
    34dc:	02000000 	andeq	r0, r0, #0
    34e0:	01b00504 	lslseq	r0, r4, #10
    34e4:	f8030000 			; <UNDEFINED> instruction: 0xf8030000
    34e8:	02000002 	andeq	r0, r0, #2
    34ec:	006c194f 	rsbeq	r1, ip, pc, asr #18
    34f0:	04020000 	streq	r0, [r2], #-0
    34f4:	0001d707 	andeq	sp, r1, r7, lsl #14
    34f8:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    34fc:	000001ab 	andeq	r0, r0, fp, lsr #3
    3500:	d2070802 	andle	r0, r7, #131072	; 0x20000
    3504:	04000001 	streq	r0, [r0], #-1
    3508:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    350c:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    3510:	0001dc07 	andeq	sp, r1, r7, lsl #24
    3514:	00d30300 	sbcseq	r0, r3, r0, lsl #6
    3518:	18030000 	stmdane	r3, {}	; <UNPREDICTABLE>
    351c:	00002c13 	andeq	r2, r0, r3, lsl ip
    3520:	008f0500 	addeq	r0, pc, r0, lsl #10
    3524:	df030000 	svcle	0x00030000
    3528:	03000008 	movweq	r0, #8
    352c:	004d132c 	subeq	r1, sp, ip, lsr #6
    3530:	a0050000 	andge	r0, r5, r0
    3534:	03000000 	movweq	r0, #0
    3538:	000002fa 	strdeq	r0, [r0], -sl
    353c:	60143003 	andsvs	r3, r4, r3
    3540:	05000000 	streq	r0, [r0, #-0]
    3544:	000000b1 	strheq	r0, [r0], -r1
    3548:	0000bd06 	andeq	fp, r0, r6, lsl #26
    354c:	0e040700 	cdpeq	7, 0, cr0, cr4, cr0, {0}
    3550:	0901a004 	stmdbeq	r1, {r2, sp, pc}
    3554:	00000191 	muleq	r0, r1, r1
    3558:	001af108 	andseq	pc, sl, r8, lsl #2
    355c:	01a20400 			; <UNDEFINED> instruction: 0x01a20400
    3560:	0001a111 	andeq	sl, r1, r1, lsl r1
    3564:	de080000 	cdple	0, 0, cr0, cr8, cr0, {0}
    3568:	04000006 	streq	r0, [r0], #-6
    356c:	a61101a3 	ldrge	r0, [r1], -r3, lsr #3
    3570:	20000001 	andcs	r0, r0, r1
    3574:	001b5308 	andseq	r5, fp, r8, lsl #6
    3578:	01a40400 			; <UNDEFINED> instruction: 0x01a40400
    357c:	0001a111 	andeq	sl, r1, r1, lsl r1
    3580:	09088000 	stmdbeq	r8, {pc}
    3584:	0400001b 	streq	r0, [r0], #-27	; 0xffffffe5
    3588:	a61101a5 	ldrge	r0, [r1], -r5, lsr #3
    358c:	a0000001 	andge	r0, r0, r1
    3590:	001bae09 	andseq	sl, fp, r9, lsl #28
    3594:	01a60400 			; <UNDEFINED> instruction: 0x01a60400
    3598:	0001a111 	andeq	sl, r1, r1, lsl r1
    359c:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    35a0:	000006f2 	strdeq	r0, [r0], -r2
    35a4:	1101a704 	tstne	r1, r4, lsl #14
    35a8:	000001a6 	andeq	r0, r0, r6, lsr #3
    35ac:	42090120 	andmi	r0, r9, #32, 2
    35b0:	0400001b 	streq	r0, [r0], #-27	; 0xffffffe5
    35b4:	a11101a8 	tstge	r1, r8, lsr #3
    35b8:	80000001 	andhi	r0, r0, r1
    35bc:	06fc0901 	ldrbteq	r0, [ip], r1, lsl #18
    35c0:	a9040000 	stmdbge	r4, {}	; <UNPREDICTABLE>
    35c4:	01a61101 			; <UNDEFINED> instruction: 0x01a61101
    35c8:	01a00000 	moveq	r0, r0
    35cc:	001a9a09 	andseq	r9, sl, r9, lsl #20
    35d0:	01aa0400 			; <UNDEFINED> instruction: 0x01aa0400
    35d4:	0001a111 	andeq	sl, r1, r1, lsl r1
    35d8:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    35dc:	00000706 	andeq	r0, r0, r6, lsl #14
    35e0:	1101ab04 	tstne	r1, r4, lsl #22
    35e4:	000001b6 			; <UNDEFINED> instruction: 0x000001b6
    35e8:	490a0220 	stmdbmi	sl, {r5, r9}
    35ec:	ac040050 	stcge	0, cr0, [r4], {80}	; 0x50
    35f0:	01d61101 	bicseq	r1, r6, r1, lsl #2
    35f4:	03000000 	movweq	r0, #0
    35f8:	00071009 	andeq	r1, r7, r9
    35fc:	01ad0400 			; <UNDEFINED> instruction: 0x01ad0400
    3600:	0001db11 	andeq	sp, r1, r1, lsl fp
    3604:	0903f000 	stmdbeq	r3, {ip, sp, lr, pc}
    3608:	00001aff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
    360c:	1101ae04 	tstne	r1, r4, lsl #28
    3610:	000000bd 	strheq	r0, [r0], -sp
    3614:	0b000e00 	bleq	6e1c <startup-0x1fff91e4>
    3618:	000000bd 	strheq	r0, [r0], -sp
    361c:	000001a1 	andeq	r0, r0, r1, lsr #3
    3620:	0000880c 	andeq	r8, r0, ip, lsl #16
    3624:	05000700 	streq	r0, [r0, #-1792]	; 0xfffff900
    3628:	00000191 	muleq	r0, r1, r1
    362c:	0000b10b 	andeq	fp, r0, fp, lsl #2
    3630:	0001b600 	andeq	fp, r1, r0, lsl #12
    3634:	00880c00 	addeq	r0, r8, r0, lsl #24
    3638:	00170000 	andseq	r0, r7, r0
    363c:	0000b10b 	andeq	fp, r0, fp, lsl #2
    3640:	0001c600 	andeq	ip, r1, r0, lsl #12
    3644:	00880c00 	addeq	r0, r8, r0, lsl #24
    3648:	00370000 	eorseq	r0, r7, r0
    364c:	00009b0b 	andeq	r9, r0, fp, lsl #22
    3650:	0001d600 	andeq	sp, r1, r0, lsl #12
    3654:	00880c00 	addeq	r0, r8, r0, lsl #24
    3658:	00ef0000 	rsceq	r0, pc, r0
    365c:	0001c605 	andeq	ip, r1, r5, lsl #12
    3660:	00b10b00 	adcseq	r0, r1, r0, lsl #22
    3664:	01ec0000 	mvneq	r0, r0
    3668:	880d0000 	stmdahi	sp, {}	; <UNPREDICTABLE>
    366c:	83000000 	movwhi	r0, #0
    3670:	c20e0002 	andgt	r0, lr, #2
    3674:	0400001b 	streq	r0, [r0], #-27	; 0xffffffe5
    3678:	c70401af 	strgt	r0, [r4, -pc, lsr #3]
    367c:	0f000000 	svceq	0x00000000
    3680:	01c0048c 	biceq	r0, r0, ip, lsl #9
    3684:	00032a09 	andeq	r2, r3, r9, lsl #20
    3688:	1aeb0800 	bne	ffac5690 <doors+0xdfac1788>
    368c:	c2040000 	andgt	r0, r4, #0
    3690:	00c21101 	sbceq	r1, r2, r1, lsl #2
    3694:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3698:	00001b04 	andeq	r1, r0, r4, lsl #22
    369c:	1101c304 	tstne	r1, r4, lsl #6
    36a0:	000000bd 	strheq	r0, [r0], -sp
    36a4:	1ba40804 	blne	fe9056bc <doors+0xde9017b4>
    36a8:	c4040000 	strgt	r0, [r4], #-0
    36ac:	00bd1101 	adcseq	r1, sp, r1, lsl #2
    36b0:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
    36b4:	00001b23 	andeq	r1, r0, r3, lsr #22
    36b8:	1101c504 	tstne	r1, r4, lsl #10
    36bc:	000000bd 	strheq	r0, [r0], -sp
    36c0:	4353100c 	cmpmi	r3, #12
    36c4:	c6040052 			; <UNDEFINED> instruction: 0xc6040052
    36c8:	00bd1101 	adcseq	r1, sp, r1, lsl #2
    36cc:	10100000 	andsne	r0, r0, r0
    36d0:	00524343 	subseq	r4, r2, r3, asr #6
    36d4:	1101c704 	tstne	r1, r4, lsl #14
    36d8:	000000bd 	strheq	r0, [r0], -sp
    36dc:	48531014 	ldmdami	r3, {r2, r4, ip}^
    36e0:	c8040050 	stmdagt	r4, {r4, r6}
    36e4:	033a1101 	teqeq	sl, #1073741824	; 0x40000000
    36e8:	08180000 	ldmdaeq	r8, {}	; <UNPREDICTABLE>
    36ec:	00001b4d 	andeq	r1, r0, sp, asr #22
    36f0:	1101c904 	tstne	r1, r4, lsl #18
    36f4:	000000bd 	strheq	r0, [r0], -sp
    36f8:	1b1e0824 	blne	785790 <startup-0x1f87a870>
    36fc:	ca040000 	bgt	103704 <startup-0x1fefc8fc>
    3700:	00bd1101 	adcseq	r1, sp, r1, lsl #2
    3704:	08280000 	stmdaeq	r8!, {}	; <UNPREDICTABLE>
    3708:	00001bb8 			; <UNDEFINED> instruction: 0x00001bb8
    370c:	1101cb04 	tstne	r1, r4, lsl #22
    3710:	000000bd 	strheq	r0, [r0], -sp
    3714:	1bb3082c 	blne	fecc57cc <doors+0xdecc18c4>
    3718:	cc040000 	stcgt	0, cr0, [r4], {-0}
    371c:	00bd1101 	adcseq	r1, sp, r1, lsl #2
    3720:	08300000 	ldmdaeq	r0!, {}	; <UNPREDICTABLE>
    3724:	00001ad4 	ldrdeq	r1, [r0], -r4
    3728:	1101cd04 	tstne	r1, r4, lsl #26
    372c:	000000bd 	strheq	r0, [r0], -sp
    3730:	1b190834 	blne	645808 <startup-0x1f9ba7f8>
    3734:	ce040000 	cdpgt	0, 0, cr0, cr4, cr0, {0}
    3738:	00bd1101 	adcseq	r1, sp, r1, lsl #2
    373c:	08380000 	ldmdaeq	r8!, {}	; <UNPREDICTABLE>
    3740:	00001bde 	ldrdeq	r1, [r0], -lr
    3744:	1101cf04 	tstne	r1, r4, lsl #30
    3748:	000000bd 	strheq	r0, [r0], -sp
    374c:	4650103c 			; <UNDEFINED> instruction: 0x4650103c
    3750:	d0040052 	andle	r0, r4, r2, asr r0
    3754:	03541101 	cmpeq	r4, #1073741824	; 0x40000000
    3758:	10400000 	subne	r0, r0, r0
    375c:	00524644 	subseq	r4, r2, r4, asr #12
    3760:	1101d104 	tstne	r1, r4, lsl #2
    3764:	000000c2 	andeq	r0, r0, r2, asr #1
    3768:	44411048 	strbmi	r1, [r1], #-72	; 0xffffffb8
    376c:	d2040052 	andle	r0, r4, #82	; 0x52
    3770:	00c21101 	sbceq	r1, r2, r1, lsl #2
    3774:	084c0000 	stmdaeq	ip, {}^	; <UNPREDICTABLE>
    3778:	00001bbd 			; <UNDEFINED> instruction: 0x00001bbd
    377c:	1101d304 	tstne	r1, r4, lsl #6
    3780:	0000036e 	andeq	r0, r0, lr, ror #6
    3784:	1ba90850 	blne	fea458cc <doors+0xdea419c4>
    3788:	d4040000 	strle	r0, [r4], #-0
    378c:	03881101 	orreq	r1, r8, #1073741824	; 0x40000000
    3790:	08600000 	stmdaeq	r0!, {}^	; <UNPREDICTABLE>
    3794:	000006de 	ldrdeq	r0, [r0], -lr
    3798:	1101d504 	tstne	r1, r4, lsl #10
    379c:	0000038d 	andeq	r0, r0, sp, lsl #7
    37a0:	1c510874 	mrrcne	8, 7, r0, r1, cr4
    37a4:	d6040000 	strle	r0, [r4], -r0
    37a8:	00bd1101 	adcseq	r1, sp, r1, lsl #2
    37ac:	00880000 	addeq	r0, r8, r0
    37b0:	00009b0b 	andeq	r9, r0, fp, lsl #22
    37b4:	00033a00 	andeq	r3, r3, r0, lsl #20
    37b8:	00880c00 	addeq	r0, r8, r0, lsl #24
    37bc:	000b0000 	andeq	r0, fp, r0
    37c0:	00032a05 	andeq	r2, r3, r5, lsl #20
    37c4:	00c20b00 	sbceq	r0, r2, r0, lsl #22
    37c8:	034f0000 	movteq	r0, #61440	; 0xf000
    37cc:	880c0000 	stmdahi	ip, {}	; <UNPREDICTABLE>
    37d0:	01000000 	mrseq	r0, (UNDEF: 0)
    37d4:	033f0600 	teqeq	pc, #0, 12
    37d8:	4f050000 	svcmi	0x00050000
    37dc:	0b000003 	bleq	37f0 <startup-0x1fffc810>
    37e0:	000000c2 	andeq	r0, r0, r2, asr #1
    37e4:	00000369 	andeq	r0, r0, r9, ror #6
    37e8:	0000880c 	andeq	r8, r0, ip, lsl #16
    37ec:	06000300 	streq	r0, [r0], -r0, lsl #6
    37f0:	00000359 	andeq	r0, r0, r9, asr r3
    37f4:	00036905 	andeq	r6, r3, r5, lsl #18
    37f8:	00c20b00 	sbceq	r0, r2, r0, lsl #22
    37fc:	03830000 	orreq	r0, r3, #0
    3800:	880c0000 	stmdahi	ip, {}	; <UNPREDICTABLE>
    3804:	04000000 	streq	r0, [r0], #-0
    3808:	03730600 	cmneq	r3, #0, 12
    380c:	83050000 	movwhi	r0, #20480	; 0x5000
    3810:	0b000003 	bleq	3824 <startup-0x1fffc7dc>
    3814:	000000b1 	strheq	r0, [r0], -r1
    3818:	0000039d 	muleq	r0, sp, r3
    381c:	0000880c 	andeq	r8, r0, ip, lsl #16
    3820:	0e000400 	cfcpyseq	mvf0, mvf0
    3824:	00001af6 	strdeq	r1, [r0], -r6
    3828:	0301d704 	movweq	sp, #5892	; 0x1704
    382c:	000001f9 	strdeq	r0, [r0], -r9
    3830:	bf04100f 	svclt	0x0004100f
    3834:	03ed0902 	mvneq	r0, #32768	; 0x8000
    3838:	29080000 	stmdbcs	r8, {}	; <UNPREDICTABLE>
    383c:	0400001b 	streq	r0, [r0], #-27	; 0xffffffe5
    3840:	bd1102c1 	lfmlt	f0, 4, [r1, #-772]	; 0xfffffcfc
    3844:	00000000 	andeq	r0, r0, r0
    3848:	001bd908 	andseq	sp, fp, r8, lsl #18
    384c:	02c20400 	sbceq	r0, r2, #0, 8
    3850:	0000bd11 	andeq	fp, r0, r1, lsl sp
    3854:	56100400 	ldrpl	r0, [r0], -r0, lsl #8
    3858:	04004c41 	streq	r4, [r0], #-3137	; 0xfffff3bf
    385c:	bd1102c3 	lfmlt	f0, 4, [r1, #-780]	; 0xfffffcf4
    3860:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3864:	001b4708 	andseq	r4, fp, r8, lsl #14
    3868:	02c40400 	sbceq	r0, r4, #0, 8
    386c:	0000c211 	andeq	ip, r0, r1, lsl r2
    3870:	0e000c00 	cdpeq	12, 0, cr0, cr0, cr0, {0}
    3874:	00001b8b 	andeq	r1, r0, fp, lsl #23
    3878:	0302c504 	movweq	ip, #9476	; 0x2504
    387c:	000003aa 	andeq	r0, r0, sl, lsr #7
    3880:	00077511 	andeq	r7, r7, r1, lsl r5
    3884:	06fa0400 	ldrbteq	r0, [sl], r0, lsl #8
    3888:	0000ac19 	andeq	sl, r0, r9, lsl ip
    388c:	06ac1200 	strteq	r1, [ip], r0, lsl #4
    3890:	3b050000 	blcc	143898 <startup-0x1febc768>
    3894:	0000b111 	andeq	fp, r0, r1, lsl r1
    3898:	01071300 	mrseq	r1, SP_und
    389c:	00000038 	andeq	r0, r0, r8, lsr r0
    38a0:	0e035f06 	cdpeq	15, 0, cr5, cr3, cr6, {0}
    38a4:	0000042f 	andeq	r0, r0, pc, lsr #8
    38a8:	00010014 	andeq	r0, r1, r4, lsl r0
    38ac:	2d140000 	ldccs	0, cr0, [r4, #-0]
    38b0:	01000002 	tsteq	r0, r2
    38b4:	06830e00 	streq	r0, [r3], r0, lsl #28
    38b8:	5f060000 	svcpl	0x00060000
    38bc:	04132f03 	ldreq	r2, [r3], #-3843	; 0xfffff0fd
    38c0:	04150000 	ldreq	r0, [r5], #-0
    38c4:	7a093607 	bvc	2510e8 <startup-0x1fdaef18>
    38c8:	16000004 	strne	r0, [r0], -r4
    38cc:	00000500 	andeq	r0, r0, r0, lsl #10
    38d0:	8f0b3807 	svchi	0x000b3807
    38d4:	00000000 	andeq	r0, r0, r0
    38d8:	0005aa16 	andeq	sl, r5, r6, lsl sl
    38dc:	0b3d0700 	bleq	f454e4 <startup-0x1f0bab1c>
    38e0:	0000008f 	andeq	r0, r0, pc, lsl #1
    38e4:	03f91601 	mvnseq	r1, #1048576	; 0x100000
    38e8:	42070000 	andmi	r0, r7, #0
    38ec:	00008f0b 	andeq	r8, r0, fp, lsl #30
    38f0:	38160200 	ldmdacc	r6, {r9}
    38f4:	07000000 	streq	r0, [r0, -r0]
    38f8:	042f1347 	strteq	r1, [pc], #-839	; 3900 <startup-0x1fffc700>
    38fc:	00030000 	andeq	r0, r3, r0
    3900:	00060503 	andeq	r0, r6, r3, lsl #10
    3904:	034a0700 	movteq	r0, #42752	; 0xa700
    3908:	0000043c 	andeq	r0, r0, ip, lsr r4
    390c:	001b7317 	andseq	r7, fp, r7, lsl r3
    3910:	06df0100 	ldrbeq	r0, [pc], r0, lsl #2
    3914:	20002fc8 	andcs	r2, r0, r8, asr #31
    3918:	00000034 	andeq	r0, r0, r4, lsr r0
    391c:	04ac9c01 	strteq	r9, [ip], #3073	; 0xc01
    3920:	9f180000 	svcls	0x00180000
    3924:	0100001a 	tsteq	r0, sl, lsl r0
    3928:	00b127df 	ldrsbteq	r2, [r1], pc
    392c:	91020000 	mrsls	r0, (UNDEF: 2)
    3930:	5f170074 	svcpl	0x00170074
    3934:	0100001b 	tsteq	r0, fp, lsl r0
    3938:	2f8006c7 	svccs	0x008006c7
    393c:	00482000 	subeq	r2, r8, r0
    3940:	9c010000 	stcls	0, cr0, [r1], {-0}
    3944:	000004e1 	andeq	r0, r0, r1, ror #9
    3948:	001be318 	andseq	lr, fp, r8, lsl r3
    394c:	22c70100 	sbccs	r0, r7, #0, 2
    3950:	0000008f 	andeq	r0, r0, pc, lsl #1
    3954:	18779102 	ldmdane	r7!, {r1, r8, ip, pc}^
    3958:	00000dbf 			; <UNDEFINED> instruction: 0x00000dbf
    395c:	2f40c701 	svccs	0x0040c701
    3960:	02000004 	andeq	r0, r0, #4
    3964:	17007691 			; <UNDEFINED> instruction: 0x17007691
    3968:	00001b2e 	andeq	r1, r0, lr, lsr #22
    396c:	5406b401 	strpl	fp, [r6], #-1025	; 0xfffffbff
    3970:	2c20002f 	stccs	0, cr0, [r0], #-188	; 0xffffff44
    3974:	01000000 	mrseq	r0, (UNDEF: 0)
    3978:	0005169c 	muleq	r5, ip, r6
    397c:	1bcc1800 	blne	ff309984 <doors+0xdf305a7c>
    3980:	b4010000 	strlt	r0, [r1], #-0
    3984:	0000b123 	andeq	fp, r0, r3, lsr #2
    3988:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    398c:	001b1218 	andseq	r1, fp, r8, lsl r2
    3990:	3ab40100 	bcc	fed03d98 <doors+0xdecffe90>
    3994:	000000b1 	strheq	r0, [r0], -r1
    3998:	00709102 	rsbseq	r9, r0, r2, lsl #2
    399c:	001ada17 	andseq	sp, sl, r7, lsl sl
    39a0:	06880100 	streq	r0, [r8], r0, lsl #2
    39a4:	20002e60 	andcs	r2, r0, r0, ror #28
    39a8:	000000f4 	strdeq	r0, [r0], -r4
    39ac:	05699c01 	strbeq	r9, [r9, #-3073]!	; 0xfffff3ff
    39b0:	b1180000 	tstlt	r8, r0
    39b4:	0100001a 	tsteq	r0, sl, lsl r0
    39b8:	05692288 	strbeq	r2, [r9, #-648]!	; 0xfffffd78
    39bc:	91020000 	mrsls	r0, (UNDEF: 2)
    39c0:	1b981964 	blne	fe609f58 <doors+0xde606050>
    39c4:	8a010000 	bhi	439cc <startup-0x1ffbc634>
    39c8:	00008f0b 	andeq	r8, r0, fp, lsl #30
    39cc:	6f910200 	svcvs	0x00910200
    39d0:	001ae419 	andseq	lr, sl, r9, lsl r4
    39d4:	1f8a0100 	svcne	0x008a0100
    39d8:	0000008f 	andeq	r0, r0, pc, lsl #1
    39dc:	196e9102 	stmdbne	lr!, {r1, r8, ip, pc}^
    39e0:	00001b58 	andeq	r1, r0, r8, asr fp
    39e4:	8f2e8a01 	svchi	0x002e8a01
    39e8:	02000000 	andeq	r0, r0, #0
    39ec:	1a006d91 	bne	1f038 <startup-0x1ffe0fc8>
    39f0:	00047a04 	andeq	r7, r4, r4, lsl #20
    39f4:	1c571b00 	mrrcne	11, 0, r1, r7, cr0
    39f8:	76010000 	strvc	r0, [r1], -r0
    39fc:	002e3c06 	eoreq	r3, lr, r6, lsl #24
    3a00:	00002420 	andeq	r2, r0, r0, lsr #8
    3a04:	189c0100 	ldmne	ip, {r8}
    3a08:	00001ac1 	andeq	r1, r0, r1, asr #21
    3a0c:	b1287601 			; <UNDEFINED> instruction: 0xb1287601
    3a10:	02000000 	andeq	r0, r0, #0
    3a14:	00007491 	muleq	r0, r1, r4
    3a18:	0000016c 	andeq	r0, r0, ip, ror #2
    3a1c:	0a6c0004 	beq	1b03a34 <startup-0x1e4fc5cc>
    3a20:	01040000 	mrseq	r0, (UNDEF: 4)
    3a24:	00000323 	andeq	r0, r0, r3, lsr #6
    3a28:	001cc70c 	andseq	ip, ip, ip, lsl #14
    3a2c:	00042e00 	andeq	r2, r4, r0, lsl #28
    3a30:	002ffc00 	eoreq	pc, pc, r0, lsl #24
    3a34:	0000ba20 	andeq	fp, r0, r0, lsr #20
    3a38:	001c8a00 	andseq	r8, ip, r0, lsl #20
    3a3c:	1cef0200 	sfmne	f0, 2, [pc]	; 3a44 <startup-0x1fffc5bc>
    3a40:	011a0000 	tsteq	sl, r0
    3a44:	00da1003 	sbcseq	r1, sl, r3
    3a48:	73030000 	movwvc	r0, #12288	; 0x3000
    3a4c:	04010072 	streq	r0, [r1], #-114	; 0xffffff8e
    3a50:	0000e11d 	andeq	lr, r0, sp, lsl r1
    3a54:	9f040000 	svcls	0x00040000
    3a58:	0100001c 	tsteq	r0, ip, lsl r0
    3a5c:	00e11d05 	rsceq	r1, r1, r5, lsl #26
    3a60:	03020000 	movweq	r0, #8192	; 0x2000
    3a64:	01007264 	tsteq	r0, r4, ror #4
    3a68:	00e11d06 	rsceq	r1, r1, r6, lsl #26
    3a6c:	04040000 	streq	r0, [r4], #-0
    3a70:	00001ca7 	andeq	r1, r0, r7, lsr #25
    3a74:	e11d0701 	tst	sp, r1, lsl #14
    3a78:	06000000 	streq	r0, [r0], -r0
    3a7c:	72726203 	rsbsvc	r6, r2, #805306368	; 0x30000000
    3a80:	1d080100 	stfnes	f0, [r8, #-0]
    3a84:	000000e1 	andeq	r0, r0, r1, ror #1
    3a88:	1caf0408 	cfstrsne	mvf0, [pc], #32	; 3ab0 <startup-0x1fffc550>
    3a8c:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    3a90:	0000e11d 	andeq	lr, r0, sp, lsl r1
    3a94:	63030a00 	movwvs	r0, #14848	; 0x3a00
    3a98:	01003172 	tsteq	r0, r2, ror r1
    3a9c:	00e11d0a 	rsceq	r1, r1, sl, lsl #26
    3aa0:	040c0000 	streq	r0, [ip], #-0
    3aa4:	00001cb7 			; <UNDEFINED> instruction: 0x00001cb7
    3aa8:	e11d0b01 	tst	sp, r1, lsl #22
    3aac:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    3ab0:	32726303 	rsbscc	r6, r2, #201326592	; 0xc000000
    3ab4:	1d0c0100 	stfnes	f0, [ip, #-0]
    3ab8:	000000e1 	andeq	r0, r0, r1, ror #1
    3abc:	1cbf0410 	cfldrsne	mvf0, [pc], #64	; 3b04 <startup-0x1fffc4fc>
    3ac0:	0d010000 	stceq	0, cr0, [r1, #-0]
    3ac4:	0000e11d 	andeq	lr, r0, sp, lsl r1
    3ac8:	63031200 	movwvs	r1, #12800	; 0x3200
    3acc:	01003372 	tsteq	r0, r2, ror r3
    3ad0:	00e11d0e 	rsceq	r1, r1, lr, lsl #26
    3ad4:	04140000 	ldreq	r0, [r4], #-0
    3ad8:	00001c7f 	andeq	r1, r0, pc, ror ip
    3adc:	e11d0f01 	tst	sp, r1, lsl #30
    3ae0:	16000000 	strne	r0, [r0], -r0
    3ae4:	001c9a04 	andseq	r9, ip, r4, lsl #20
    3ae8:	1d100100 	ldfnes	f0, [r0, #-0]
    3aec:	000000e1 	andeq	r0, r0, r1, ror #1
    3af0:	02050018 	andeq	r0, r5, #24
    3af4:	0007ed07 	andeq	lr, r7, r7, lsl #26
    3af8:	00da0600 	sbcseq	r0, sl, r0, lsl #12
    3afc:	ef070000 	svc	0x00070000
    3b00:	0100001c 	tsteq	r0, ip, lsl r0
    3b04:	00250311 	eoreq	r0, r5, r1, lsl r3
    3b08:	79080000 	stmdbvc	r8, {}	; <UNPREDICTABLE>
    3b0c:	0100001c 	tsteq	r0, ip, lsl r0
    3b10:	308c062b 	addcc	r0, ip, fp, lsr #12
    3b14:	002a2000 	eoreq	r2, sl, r0
    3b18:	9c010000 	stcls	0, cr0, [r1], {-0}
    3b1c:	00000116 	andeq	r0, r0, r6, lsl r1
    3b20:	01007309 	tsteq	r0, r9, lsl #6
    3b24:	0116122b 	tsteq	r6, fp, lsr #4
    3b28:	91020000 	mrsls	r0, (UNDEF: 2)
    3b2c:	040a0074 	streq	r0, [sl], #-116	; 0xffffff8c
    3b30:	0000011c 	andeq	r0, r0, ip, lsl r1
    3b34:	5d080105 	stfpls	f0, [r8, #-20]	; 0xffffffec
    3b38:	0b000007 	bleq	3b5c <startup-0x1fffc4a4>
    3b3c:	00001c87 	andeq	r1, r0, r7, lsl #25
    3b40:	1c062501 	cfstr32ne	mvfx2, [r6], {1}
    3b44:	64000001 	strvs	r0, [r0], #-1
    3b48:	28200030 	stmdacs	r0!, {r4, r5}
    3b4c:	01000000 	mrseq	r0, (UNDEF: 0)
    3b50:	1c900b9c 	vldmiane	r0, {d0-d13}
    3b54:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
    3b58:	00011c06 	andeq	r1, r1, r6, lsl #24
    3b5c:	00303c00 	eorseq	r3, r0, r0, lsl #24
    3b60:	00002820 	andeq	r2, r0, r0, lsr #16
    3b64:	0c9c0100 	ldfeqs	f0, [ip], {0}
    3b68:	00001c70 	andeq	r1, r0, r0, ror ip
    3b6c:	fc061501 	stc2	5, cr1, [r6], {1}
    3b70:	4020002f 	eormi	r0, r0, pc, lsr #32
    3b74:	01000000 	mrseq	r0, (UNDEF: 0)
    3b78:	0063099c 	mlseq	r3, ip, r9, r0
    3b7c:	1c151501 	cfldr32ne	mvfx1, [r5], {1}
    3b80:	02000001 	andeq	r0, r0, #1
    3b84:	00007791 	muleq	r0, r1, r7
    3b88:	00000f34 	andeq	r0, r0, r4, lsr pc
    3b8c:	0b400004 	bleq	1003ba4 <startup-0x1effc45c>
    3b90:	01040000 	mrseq	r0, (UNDEF: 4)
    3b94:	00000323 	andeq	r0, r0, r3, lsr #6
    3b98:	0023950c 	eoreq	r9, r3, ip, lsl #10
    3b9c:	00042e00 	andeq	r2, r4, r0, lsl #28
    3ba0:	0030b800 	eorseq	fp, r0, r0, lsl #16
    3ba4:	000cfc20 	andeq	pc, ip, r0, lsr #24
    3ba8:	001d5c00 	andseq	r5, sp, r0, lsl #24
    3bac:	06010200 	streq	r0, [r1], -r0, lsl #4
    3bb0:	00000756 	andeq	r0, r0, r6, asr r7
    3bb4:	0000d103 	andeq	sp, r0, r3, lsl #2
    3bb8:	182b0200 	stmdane	fp!, {r9}
    3bbc:	00000038 	andeq	r0, r0, r8, lsr r0
    3bc0:	54080102 	strpl	r0, [r8], #-258	; 0xfffffefe
    3bc4:	02000007 	andeq	r0, r0, #7
    3bc8:	079b0502 	ldreq	r0, [fp, r2, lsl #10]
    3bcc:	e5030000 	str	r0, [r3, #-0]
    3bd0:	02000002 	andeq	r0, r0, #2
    3bd4:	00521939 	subseq	r1, r2, r9, lsr r9
    3bd8:	02020000 	andeq	r0, r2, #0
    3bdc:	0007ed07 	andeq	lr, r7, r7, lsl #26
    3be0:	08dd0300 	ldmeq	sp, {r8, r9}^
    3be4:	4d020000 	stcmi	0, cr0, [r2, #-0]
    3be8:	00006518 	andeq	r6, r0, r8, lsl r5
    3bec:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    3bf0:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
    3bf4:	0002f803 	andeq	pc, r2, r3, lsl #16
    3bf8:	194f0200 	stmdbne	pc, {r9}^	; <UNPREDICTABLE>
    3bfc:	00000078 	andeq	r0, r0, r8, ror r0
    3c00:	d7070402 	strle	r0, [r7, -r2, lsl #8]
    3c04:	02000001 	andeq	r0, r0, #1
    3c08:	01ab0508 			; <UNDEFINED> instruction: 0x01ab0508
    3c0c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    3c10:	0001d207 	andeq	sp, r1, r7, lsl #4
    3c14:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    3c18:	00746e69 	rsbseq	r6, r4, r9, ror #28
    3c1c:	dc070402 	cfstrsle	mvf0, [r7], {2}
    3c20:	03000001 	movweq	r0, #1
    3c24:	000000d3 	ldrdeq	r0, [r0], -r3
    3c28:	2c131803 	ldccs	8, cr1, [r3], {3}
    3c2c:	05000000 	streq	r0, [r0, #-0]
    3c30:	0000009b 	muleq	r0, fp, r0
    3c34:	0000a706 	andeq	sl, r0, r6, lsl #14
    3c38:	02e70300 	rsceq	r0, r7, #0, 6
    3c3c:	24030000 	strcs	r0, [r3], #-0
    3c40:	00004614 	andeq	r4, r0, r4, lsl r6
    3c44:	08df0300 	ldmeq	pc, {r8, r9}^	; <UNPREDICTABLE>
    3c48:	2c030000 	stccs	0, cr0, [r3], {-0}
    3c4c:	00005913 	andeq	r5, r0, r3, lsl r9
    3c50:	00bd0500 	adcseq	r0, sp, r0, lsl #10
    3c54:	fa030000 	blx	c3c5c <startup-0x1ff3c3a4>
    3c58:	03000002 	movweq	r0, #2
    3c5c:	006c1430 	rsbeq	r1, ip, r0, lsr r4
    3c60:	ce050000 	cdpgt	0, 0, cr0, cr5, cr0, {0}
    3c64:	07000000 	streq	r0, [r0, -r0]
    3c68:	000000ce 	andeq	r0, r0, lr, asr #1
    3c6c:	000000ef 	andeq	r0, r0, pc, ror #1
    3c70:	00009408 	andeq	r9, r0, r8, lsl #8
    3c74:	09000100 	stmdbeq	r0, {r8}
    3c78:	00000775 	andeq	r0, r0, r5, ror r7
    3c7c:	1906fa04 	stmdbne	r6, {r2, r9, fp, ip, sp, lr, pc}
    3c80:	000000c9 	andeq	r0, r0, r9, asr #1
    3c84:	0006ac0a 	andeq	sl, r6, sl, lsl #24
    3c88:	113b0500 	teqne	fp, r0, lsl #10
    3c8c:	000000ce 	andeq	r0, r0, lr, asr #1
    3c90:	3801070b 	stmdacc	r1, {r0, r1, r3, r8, r9, sl}
    3c94:	06000000 	streq	r0, [r0], -r0
    3c98:	240e035d 	strcs	r0, [lr], #-861	; 0xfffffca3
    3c9c:	0c000001 	stceq	0, cr0, [r0], {1}
    3ca0:	00000b4c 	andeq	r0, r0, ip, asr #22
    3ca4:	45530d00 	ldrbmi	r0, [r3, #-3328]	; 0xfffff300
    3ca8:	00010054 	andeq	r0, r1, r4, asr r0
    3cac:	00216a0e 	eoreq	r6, r1, lr, lsl #20
    3cb0:	035d0600 	cmpeq	sp, #0, 12
    3cb4:	00010828 	andeq	r0, r1, r8, lsr #16
    3cb8:	22fc0e00 	rscscs	r0, ip, #0, 28
    3cbc:	5d060000 	stcpl	0, cr0, [r6, #-0]
    3cc0:	01083403 	tsteq	r8, r3, lsl #8
    3cc4:	070b0000 	streq	r0, [fp, -r0]
    3cc8:	00003801 	andeq	r3, r0, r1, lsl #16
    3ccc:	035f0600 	cmpeq	pc, #0, 12
    3cd0:	00015a0e 	andeq	r5, r1, lr, lsl #20
    3cd4:	01000c00 	tsteq	r0, r0, lsl #24
    3cd8:	0c000000 	stceq	0, cr0, [r0], {-0}
    3cdc:	0000022d 	andeq	r0, r0, sp, lsr #4
    3ce0:	830e0001 	movwhi	r0, #57345	; 0xe001
    3ce4:	06000006 	streq	r0, [r0], -r6
    3ce8:	3e2f035f 	mcrcc	3, 1, r0, cr15, cr15, {2}
    3cec:	0b000001 	bleq	3cf8 <startup-0x1fffc308>
    3cf0:	00380107 	eorseq	r0, r8, r7, lsl #2
    3cf4:	62060000 	andvs	r0, r6, #0
    3cf8:	01830e03 	orreq	r0, r3, r3, lsl #28
    3cfc:	b00c0000 	andlt	r0, ip, r0
    3d00:	00000020 	andeq	r0, r0, r0, lsr #32
    3d04:	0024450c 	eoreq	r4, r4, ip, lsl #10
    3d08:	0e000100 	adfeqs	f0, f0, f0
    3d0c:	00001f19 	andeq	r1, r0, r9, lsl pc
    3d10:	2c036206 	sfmcs	f6, 4, [r3], {6}
    3d14:	00000167 	andeq	r0, r0, r7, ror #2
    3d18:	6406980f 	strvs	r9, [r6], #-2063	; 0xfffff7f1
    3d1c:	03760906 	cmneq	r6, #98304	; 0x18000
    3d20:	43100000 	tstmi	r0, #0
    3d24:	66060052 			; <UNDEFINED> instruction: 0x66060052
    3d28:	00da1106 	sbcseq	r1, sl, r6, lsl #2
    3d2c:	11000000 	mrsne	r0, (UNDEF: 0)
    3d30:	00001efe 	strdeq	r1, [r0], -lr
    3d34:	11066706 	tstne	r6, r6, lsl #14
    3d38:	000000da 	ldrdeq	r0, [r0], -sl
    3d3c:	215e1104 	cmpcs	lr, r4, lsl #2
    3d40:	68060000 	stmdavs	r6, {}	; <UNPREDICTABLE>
    3d44:	00da1106 	sbcseq	r1, sl, r6, lsl #2
    3d48:	10080000 	andne	r0, r8, r0
    3d4c:	00524943 	subseq	r4, r2, r3, asr #18
    3d50:	11066906 	tstne	r6, r6, lsl #18
    3d54:	000000da 	ldrdeq	r0, [r0], -sl
    3d58:	1e29110c 	sufnee	f1, f1, #4.0
    3d5c:	6a060000 	bvs	183d64 <startup-0x1fe7c29c>
    3d60:	00da1106 	sbcseq	r1, sl, r6, lsl #2
    3d64:	11100000 	tstne	r0, r0
    3d68:	000022d9 	ldrdeq	r2, [r0], -r9
    3d6c:	11066b06 	tstne	r6, r6, lsl #22
    3d70:	000000da 	ldrdeq	r0, [r0], -sl
    3d74:	21f01114 	mvnscs	r1, r4, lsl r1
    3d78:	6c060000 	stcvs	0, cr0, [r6], {-0}
    3d7c:	00da1106 	sbcseq	r1, sl, r6, lsl #2
    3d80:	11180000 	tstne	r8, r0
    3d84:	000006de 	ldrdeq	r0, [r0], -lr
    3d88:	11066d06 	tstne	r6, r6, lsl #26
    3d8c:	000000ce 	andeq	r0, r0, lr, asr #1
    3d90:	23ff111c 	mvnscs	r1, #28, 2
    3d94:	6e060000 	cdpvs	0, 0, cr0, cr6, cr0, {0}
    3d98:	00da1106 	sbcseq	r1, sl, r6, lsl #2
    3d9c:	11200000 			; <UNDEFINED> instruction: 0x11200000
    3da0:	00001e69 	andeq	r1, r0, r9, ror #28
    3da4:	11066f06 	tstne	r6, r6, lsl #30
    3da8:	000000da 	ldrdeq	r0, [r0], -sl
    3dac:	06e81124 	strbteq	r1, [r8], r4, lsr #2
    3db0:	70060000 	andvc	r0, r6, r0
    3db4:	00df1106 	sbcseq	r1, pc, r6, lsl #2
    3db8:	11280000 			; <UNDEFINED> instruction: 0x11280000
    3dbc:	0000246d 	andeq	r2, r0, sp, ror #8
    3dc0:	11067106 	tstne	r6, r6, lsl #2
    3dc4:	000000da 	ldrdeq	r0, [r0], -sl
    3dc8:	230d1130 	movwcs	r1, #53552	; 0xd130
    3dcc:	72060000 	andvc	r0, r6, #0
    3dd0:	00da1106 	sbcseq	r1, sl, r6, lsl #2
    3dd4:	11340000 	teqne	r4, r0
    3dd8:	000020f1 	strdeq	r2, [r0], -r1
    3ddc:	11067306 	tstne	r6, r6, lsl #6
    3de0:	000000da 	ldrdeq	r0, [r0], -sl
    3de4:	06f21138 			; <UNDEFINED> instruction: 0x06f21138
    3de8:	74060000 	strvc	r0, [r6], #-0
    3dec:	00ce1106 	sbceq	r1, lr, r6, lsl #2
    3df0:	113c0000 	teqne	ip, r0
    3df4:	00002305 	andeq	r2, r0, r5, lsl #6
    3df8:	11067506 	tstne	r6, r6, lsl #10
    3dfc:	000000da 	ldrdeq	r0, [r0], -sl
    3e00:	21e81140 	mvncs	r1, r0, asr #2
    3e04:	76060000 	strvc	r0, [r6], -r0
    3e08:	00da1106 	sbcseq	r1, sl, r6, lsl #2
    3e0c:	11440000 	mrsne	r0, (UNDEF: 68)
    3e10:	000006fc 	strdeq	r0, [r0], -ip
    3e14:	11067706 	tstne	r6, r6, lsl #14
    3e18:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    3e1c:	1de11148 	stfnee	f1, [r1, #288]!	; 0x120
    3e20:	78060000 	stmdavc	r6, {}	; <UNPREDICTABLE>
    3e24:	00da1106 	sbcseq	r1, sl, r6, lsl #2
    3e28:	11500000 	cmpne	r0, r0
    3e2c:	0000210b 	andeq	r2, r0, fp, lsl #2
    3e30:	11067906 	tstne	r6, r6, lsl #18
    3e34:	000000da 	ldrdeq	r0, [r0], -sl
    3e38:	238b1154 	orrcs	r1, fp, #84, 2
    3e3c:	7a060000 	bvc	183e44 <startup-0x1fe7c1bc>
    3e40:	00da1106 	sbcseq	r1, sl, r6, lsl #2
    3e44:	11580000 	cmpne	r8, r0
    3e48:	00000706 	andeq	r0, r0, r6, lsl #14
    3e4c:	11067b06 	tstne	r6, r6, lsl #22
    3e50:	000000ce 	andeq	r0, r0, lr, asr #1
    3e54:	1d06115c 	stfnes	f1, [r6, #-368]	; 0xfffffe90
    3e58:	7c060000 	stcvc	0, cr0, [r6], {-0}
    3e5c:	00da1106 	sbcseq	r1, sl, r6, lsl #2
    3e60:	11600000 	cmnne	r0, r0
    3e64:	00002063 	andeq	r2, r0, r3, rrx
    3e68:	11067d06 	tstne	r6, r6, lsl #26
    3e6c:	000000da 	ldrdeq	r0, [r0], -sl
    3e70:	07101164 	ldreq	r1, [r0, -r4, ror #2]
    3e74:	7e060000 	cdpvc	0, 0, cr0, cr6, cr0, {0}
    3e78:	00df1106 	sbcseq	r1, pc, r6, lsl #2
    3e7c:	11680000 	cmnne	r8, r0
    3e80:	0000241c 	andeq	r2, r0, ip, lsl r4
    3e84:	11067f06 	tstne	r6, r6, lsl #30
    3e88:	000000da 	ldrdeq	r0, [r0], -sl
    3e8c:	53431070 	movtpl	r1, #12400	; 0x3070
    3e90:	80060052 	andhi	r0, r6, r2, asr r0
    3e94:	00da1106 	sbcseq	r1, sl, r6, lsl #2
    3e98:	11740000 	cmnne	r4, r0
    3e9c:	0000071a 	andeq	r0, r0, sl, lsl r7
    3ea0:	11068106 	tstne	r6, r6, lsl #2
    3ea4:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    3ea8:	23851178 	orrcs	r1, r5, #120, 2
    3eac:	82060000 	andhi	r0, r6, #0
    3eb0:	00da1106 	sbcseq	r1, sl, r6, lsl #2
    3eb4:	11800000 	orrne	r0, r0, r0
    3eb8:	00002010 	andeq	r2, r0, r0, lsl r0
    3ebc:	11068306 	tstne	r6, r6, lsl #6
    3ec0:	000000da 	ldrdeq	r0, [r0], -sl
    3ec4:	21581184 	cmpcs	r8, r4, lsl #3
    3ec8:	84060000 	strhi	r0, [r6], #-0
    3ecc:	00da1106 	sbcseq	r1, sl, r6, lsl #2
    3ed0:	11880000 	orrne	r0, r8, r0
    3ed4:	00001e13 	andeq	r1, r0, r3, lsl lr
    3ed8:	11068506 	tstne	r6, r6, lsl #10
    3edc:	000000da 	ldrdeq	r0, [r0], -sl
    3ee0:	2413118c 	ldrcs	r1, [r3], #-396	; 0xfffffe74
    3ee4:	86060000 	strhi	r0, [r6], -r0
    3ee8:	00da1106 	sbcseq	r1, sl, r6, lsl #2
    3eec:	11900000 	orrsne	r0, r0, r0
    3ef0:	00001e32 	andeq	r1, r0, r2, lsr lr
    3ef4:	11068706 	tstne	r6, r6, lsl #14
    3ef8:	000000da 	ldrdeq	r0, [r0], -sl
    3efc:	aa0e0094 	bge	384154 <startup-0x1fc7beac>
    3f00:	0600001f 			; <UNDEFINED> instruction: 0x0600001f
    3f04:	90030689 	andls	r0, r3, r9, lsl #13
    3f08:	12000001 	andne	r0, r0, #1
    3f0c:	09300710 	ldmdbeq	r0!, {r4, r8, r9, sl}
    3f10:	000003c1 	andeq	r0, r0, r1, asr #7
    3f14:	001d4613 	andseq	r4, sp, r3, lsl r6
    3f18:	0c320700 	ldceq	7, cr0, [r2], #-0
    3f1c:	000000ce 	andeq	r0, r0, lr, asr #1
    3f20:	1f5d1300 	svcne	0x005d1300
    3f24:	33070000 	movwcc	r0, #28672	; 0x7000
    3f28:	0000ce0c 	andeq	ip, r0, ip, lsl #28
    3f2c:	5f130400 	svcpl	0x00130400
    3f30:	07000022 	streq	r0, [r0, -r2, lsr #32]
    3f34:	00ce0c34 	sbceq	r0, lr, r4, lsr ip
    3f38:	13080000 	movwne	r0, #32768	; 0x8000
    3f3c:	00001e42 	andeq	r1, r0, r2, asr #28
    3f40:	ce0c3507 	cfsh32gt	mvfx3, mvfx12, #7
    3f44:	0c000000 	stceq	0, cr0, [r0], {-0}
    3f48:	245b0300 	ldrbcs	r0, [fp], #-768	; 0xfffffd00
    3f4c:	36070000 	strcc	r0, [r7], -r0
    3f50:	00038302 	andeq	r8, r3, r2, lsl #6
    3f54:	00ac0700 	adceq	r0, ip, r0, lsl #14
    3f58:	03dd0000 	bicseq	r0, sp, #0
    3f5c:	94080000 	strls	r0, [r8], #-0
    3f60:	0f000000 	svceq	0x00000000
    3f64:	03cd0600 	biceq	r0, sp, #0, 12
    3f68:	dd050000 	stcle	0, cr0, [r5, #-0]
    3f6c:	14000003 	strne	r0, [r0], #-3
    3f70:	0000226f 	andeq	r2, r0, pc, ror #4
    3f74:	e2149901 	ands	r9, r4, #16384	; 0x4000
    3f78:	05000003 	streq	r0, [r0, #-3]
    3f7c:	003ecc03 	eorseq	ip, lr, r3, lsl #24
    3f80:	1db01520 	cfldr32ne	mvfx1, [r0, #128]!	; 0x80
    3f84:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
    3f88:	3d94060c 	ldccc	6, cr0, [r4, #48]	; 0x30
    3f8c:	00202000 	eoreq	r2, r0, r0
    3f90:	9c010000 	stcls	0, cr0, [r1], {-0}
    3f94:	00000421 	andeq	r0, r0, r1, lsr #8
    3f98:	001dc616 	andseq	ip, sp, r6, lsl r6
    3f9c:	0c5e0100 	ldfeqe	f0, [lr], {-0}
    3fa0:	00009b24 	andeq	r9, r0, r4, lsr #22
    3fa4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    3fa8:	22f51700 	rscscs	r1, r5, #0, 14
    3fac:	3c010000 	stccc	0, cr0, [r1], {-0}
    3fb0:	01310a0c 	teqeq	r1, ip, lsl #20
    3fb4:	3d500000 	ldclcc	0, cr0, [r0, #-0]
    3fb8:	00442000 	subeq	r2, r4, r0
    3fbc:	9c010000 	stcls	0, cr0, [r1], {-0}
    3fc0:	0000045d 	andeq	r0, r0, sp, asr r4
    3fc4:	001dc616 	andseq	ip, sp, r6, lsl r6
    3fc8:	0c3c0100 	ldfeqs	f0, [ip], #-0
    3fcc:	00009b22 	andeq	r9, r0, r2, lsr #22
    3fd0:	6f910200 	svcvs	0x00910200
    3fd4:	000ba818 	andeq	sl, fp, r8, lsl r8
    3fd8:	0c3e0100 	ldfeqs	f0, [lr], #-0
    3fdc:	0001310c 	andeq	r3, r1, ip, lsl #2
    3fe0:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    3fe4:	1e1b1900 	vnmlsne.f16	s2, s22, s0	; <UNPREDICTABLE>
    3fe8:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
    3fec:	3d34060c 	ldccc	6, cr0, [r4, #-48]!	; 0xffffffd0
    3ff0:	001c2000 	andseq	r2, ip, r0
    3ff4:	9c010000 	stcls	0, cr0, [r1], {-0}
    3ff8:	00216317 	eoreq	r6, r1, r7, lsl r3
    3ffc:	0bfb0100 	bleq	ffec4404 <doors+0xdfec04fc>
    4000:	0001240c 	andeq	r2, r1, ip, lsl #8
    4004:	003cb000 	eorseq	fp, ip, r0
    4008:	00008420 	andeq	r8, r0, r0, lsr #8
    400c:	cc9c0100 	ldfgts	f0, [ip], {0}
    4010:	16000004 	strne	r0, [r0], -r4
    4014:	00001ef5 	strdeq	r1, [r0], -r5
    4018:	260bfb01 	strcs	pc, [fp], -r1, lsl #22
    401c:	0000009b 	muleq	r0, fp, r0
    4020:	1a679102 	bne	19e8430 <startup-0x1e617bd0>
    4024:	00706d74 	rsbseq	r6, r0, r4, ror sp
    4028:	0c0bfd01 	stceq	13, cr15, [fp], {1}
    402c:	000000ce 	andeq	r0, r0, lr, asr #1
    4030:	186c9102 	stmdane	ip!, {r1, r8, ip, pc}^
    4034:	00001d3c 	andeq	r1, r0, ip, lsr sp
    4038:	0c0bfe01 	stceq	14, cr15, [fp], {1}
    403c:	000000ce 	andeq	r0, r0, lr, asr #1
    4040:	18749102 	ldmdane	r4!, {r1, r8, ip, pc}^
    4044:	00000ba8 	andeq	r0, r0, r8, lsr #23
    4048:	0e0bff01 	cdpeq	15, 0, cr15, cr11, cr1, {0}
    404c:	00000124 	andeq	r0, r0, r4, lsr #2
    4050:	00739102 	rsbseq	r9, r3, r2, lsl #2
    4054:	00243815 	eoreq	r3, r4, r5, lsl r8
    4058:	0bd60100 	bleq	ff584460 <doors+0xdf580558>
    405c:	003c6006 	eorseq	r6, ip, r6
    4060:	00005020 	andeq	r5, r0, r0, lsr #32
    4064:	049c0100 	ldreq	r0, [ip], #256	; 0x100
    4068:	16000005 	strne	r0, [r0], -r5
    406c:	00001dc6 	andeq	r1, r0, r6, asr #27
    4070:	1b0bd601 	blne	2f987c <startup-0x1fd06784>
    4074:	0000009b 	muleq	r0, fp, r0
    4078:	16779102 	ldrbtne	r9, [r7], -r2, lsl #2
    407c:	00000dbf 			; <UNDEFINED> instruction: 0x00000dbf
    4080:	330bd601 	movwcc	sp, #46593	; 0xb601
    4084:	0000015a 	andeq	r0, r0, sl, asr r1
    4088:	00769102 	rsbseq	r9, r6, r2, lsl #2
    408c:	0020f915 	eoreq	pc, r0, r5, lsl r9	; <UNPREDICTABLE>
    4090:	0a9e0100 	beq	fe784498 <doors+0xde780590>
    4094:	003c2406 	eorseq	r2, ip, r6, lsl #8
    4098:	00003c20 	andeq	r3, r0, r0, lsr #24
    409c:	2c9c0100 	ldfcss	f0, [ip], {0}
    40a0:	16000005 	strne	r0, [r0], -r5
    40a4:	000021f9 	strdeq	r2, [r0], -r9
    40a8:	200a9e01 	andcs	r9, sl, r1, lsl #28
    40ac:	0000009b 	muleq	r0, fp, r0
    40b0:	00779102 	rsbseq	r9, r7, r2, lsl #2
    40b4:	001df615 	andseq	pc, sp, r5, lsl r6	; <UNPREDICTABLE>
    40b8:	0a860100 	beq	fe1844c0 <doors+0xde1805b8>
    40bc:	003be406 	eorseq	lr, fp, r6, lsl #8
    40c0:	00004020 	andeq	r4, r0, r0, lsr #32
    40c4:	649c0100 	ldrvs	r0, [ip], #256	; 0x100
    40c8:	16000005 	strne	r0, [r0], -r5
    40cc:	00002341 	andeq	r2, r0, r1, asr #6
    40d0:	2c0a8601 	stccs	6, cr8, [sl], {1}
    40d4:	000000ce 	andeq	r0, r0, lr, asr #1
    40d8:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
    40dc:	00000dbf 			; <UNDEFINED> instruction: 0x00000dbf
    40e0:	4c0a8601 	stcmi	6, cr8, [sl], {1}
    40e4:	0000015a 	andeq	r0, r0, sl, asr r1
    40e8:	00739102 	rsbseq	r9, r3, r2, lsl #2
    40ec:	00221915 	eoreq	r1, r2, r5, lsl r9
    40f0:	0a520100 	beq	14844f8 <startup-0x1eb7bb08>
    40f4:	003ba406 	eorseq	sl, fp, r6, lsl #8
    40f8:	00004020 	andeq	r4, r0, r0, lsr #32
    40fc:	9c9c0100 	ldflss	f0, [ip], {0}
    4100:	16000005 	strne	r0, [r0], -r5
    4104:	00001f6c 	andeq	r1, r0, ip, ror #30
    4108:	2c0a5201 	sfmcs	f5, 4, [sl], {1}
    410c:	000000ce 	andeq	r0, r0, lr, asr #1
    4110:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
    4114:	00000dbf 			; <UNDEFINED> instruction: 0x00000dbf
    4118:	4c0a5201 	sfmmi	f5, 4, [sl], {1}
    411c:	0000015a 	andeq	r0, r0, sl, asr r1
    4120:	00739102 	rsbseq	r9, r3, r2, lsl #2
    4124:	00231515 	eoreq	r1, r3, r5, lsl r5
    4128:	0a190100 	beq	644530 <startup-0x1f9bbad0>
    412c:	003b6406 	eorseq	r6, fp, r6, lsl #8
    4130:	00004020 	andeq	r4, r0, r0, lsr #32
    4134:	d49c0100 	ldrle	r0, [ip], #256	; 0x100
    4138:	16000005 	strne	r0, [r0], -r5
    413c:	0000206d 	andeq	r2, r0, sp, rrx
    4140:	2c0a1901 			; <UNDEFINED> instruction: 0x2c0a1901
    4144:	000000ce 	andeq	r0, r0, lr, asr #1
    4148:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
    414c:	00000dbf 			; <UNDEFINED> instruction: 0x00000dbf
    4150:	4c0a1901 			; <UNDEFINED> instruction: 0x4c0a1901
    4154:	0000015a 	andeq	r0, r0, sl, asr r1
    4158:	00739102 	rsbseq	r9, r3, r2, lsl #2
    415c:	00201b15 	eoreq	r1, r0, r5, lsl fp
    4160:	09fb0100 	ldmibeq	fp!, {r8}^
    4164:	003b2406 	eorseq	r2, fp, r6, lsl #8
    4168:	00004020 	andeq	r4, r0, r0, lsr #32
    416c:	0c9c0100 	ldfeqs	f0, [ip], {0}
    4170:	16000006 	strne	r0, [r0], -r6
    4174:	00002054 	andeq	r2, r0, r4, asr r0
    4178:	2c09fb01 			; <UNDEFINED> instruction: 0x2c09fb01
    417c:	000000ce 	andeq	r0, r0, lr, asr #1
    4180:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
    4184:	00000dbf 			; <UNDEFINED> instruction: 0x00000dbf
    4188:	4c09fb01 			; <UNDEFINED> instruction: 0x4c09fb01
    418c:	0000015a 	andeq	r0, r0, sl, asr r1
    4190:	00739102 	rsbseq	r9, r3, r2, lsl #2
    4194:	00249015 	eoreq	r9, r4, r5, lsl r0
    4198:	09db0100 	ldmibeq	fp, {r8}^
    419c:	003ae406 	eorseq	lr, sl, r6, lsl #8
    41a0:	00004020 	andeq	r4, r0, r0, lsr #32
    41a4:	449c0100 	ldrmi	r0, [ip], #256	; 0x100
    41a8:	16000006 	strne	r0, [r0], -r6
    41ac:	00001dd2 	ldrdeq	r1, [r0], -r2
    41b0:	2c09db01 			; <UNDEFINED> instruction: 0x2c09db01
    41b4:	000000ce 	andeq	r0, r0, lr, asr #1
    41b8:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
    41bc:	00000dbf 			; <UNDEFINED> instruction: 0x00000dbf
    41c0:	4c09db01 			; <UNDEFINED> instruction: 0x4c09db01
    41c4:	0000015a 	andeq	r0, r0, sl, asr r1
    41c8:	00739102 	rsbseq	r9, r3, r2, lsl #2
    41cc:	00212115 	eoreq	r2, r1, r5, lsl r1
    41d0:	09aa0100 	stmibeq	sl!, {r8}
    41d4:	003aa406 	eorseq	sl, sl, r6, lsl #8
    41d8:	00004020 	andeq	r4, r0, r0, lsr #32
    41dc:	7c9c0100 	ldfvcs	f0, [ip], {0}
    41e0:	16000006 	strne	r0, [r0], -r6
    41e4:	00002341 	andeq	r2, r0, r1, asr #6
    41e8:	2609aa01 	strcs	sl, [r9], -r1, lsl #20
    41ec:	000000ce 	andeq	r0, r0, lr, asr #1
    41f0:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
    41f4:	00000dbf 			; <UNDEFINED> instruction: 0x00000dbf
    41f8:	4609aa01 	strmi	sl, [r9], -r1, lsl #20
    41fc:	0000015a 	andeq	r0, r0, sl, asr r1
    4200:	00739102 	rsbseq	r9, r3, r2, lsl #2
    4204:	001d7015 	andseq	r7, sp, r5, lsl r0
    4208:	097b0100 	ldmdbeq	fp!, {r8}^
    420c:	003a6406 	eorseq	r6, sl, r6, lsl #8
    4210:	00004020 	andeq	r4, r0, r0, lsr #32
    4214:	b49c0100 	ldrlt	r0, [ip], #256	; 0x100
    4218:	16000006 	strne	r0, [r0], -r6
    421c:	00001f6c 	andeq	r1, r0, ip, ror #30
    4220:	26097b01 	strcs	r7, [r9], -r1, lsl #22
    4224:	000000ce 	andeq	r0, r0, lr, asr #1
    4228:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
    422c:	00000dbf 			; <UNDEFINED> instruction: 0x00000dbf
    4230:	46097b01 	strmi	r7, [r9], -r1, lsl #22
    4234:	0000015a 	andeq	r0, r0, sl, asr r1
    4238:	00739102 	rsbseq	r9, r3, r2, lsl #2
    423c:	001e8215 	andseq	r8, lr, r5, lsl r2
    4240:	09450100 	stmdbeq	r5, {r8}^
    4244:	003a2406 	eorseq	r2, sl, r6, lsl #8
    4248:	00004020 	andeq	r4, r0, r0, lsr #32
    424c:	ec9c0100 	ldfs	f0, [ip], {0}
    4250:	16000006 	strne	r0, [r0], -r6
    4254:	0000206d 	andeq	r2, r0, sp, rrx
    4258:	26094501 	strcs	r4, [r9], -r1, lsl #10
    425c:	000000ce 	andeq	r0, r0, lr, asr #1
    4260:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
    4264:	00000dbf 			; <UNDEFINED> instruction: 0x00000dbf
    4268:	46094501 	strmi	r4, [r9], -r1, lsl #10
    426c:	0000015a 	andeq	r0, r0, sl, asr r1
    4270:	00739102 	rsbseq	r9, r3, r2, lsl #2
    4274:	00220215 	eoreq	r0, r2, r5, lsl r2
    4278:	092a0100 	stmdbeq	sl!, {r8}
    427c:	0039e406 	eorseq	lr, r9, r6, lsl #8
    4280:	00004020 	andeq	r4, r0, r0, lsr #32
    4284:	249c0100 	ldrcs	r0, [ip], #256	; 0x100
    4288:	16000007 	strne	r0, [r0], -r7
    428c:	00002054 	andeq	r2, r0, r4, asr r0
    4290:	26092a01 	strcs	r2, [r9], -r1, lsl #20
    4294:	000000ce 	andeq	r0, r0, lr, asr #1
    4298:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
    429c:	00000dbf 			; <UNDEFINED> instruction: 0x00000dbf
    42a0:	46092a01 	strmi	r2, [r9], -r1, lsl #20
    42a4:	0000015a 	andeq	r0, r0, sl, asr r1
    42a8:	00739102 	rsbseq	r9, r3, r2, lsl #2
    42ac:	001eb015 	andseq	fp, lr, r5, lsl r0
    42b0:	090d0100 	stmdbeq	sp, {r8}
    42b4:	0039a406 	eorseq	sl, r9, r6, lsl #8
    42b8:	00004020 	andeq	r4, r0, r0, lsr #32
    42bc:	5c9c0100 	ldfpls	f0, [ip], {0}
    42c0:	16000007 	strne	r0, [r0], -r7
    42c4:	00001dd2 	ldrdeq	r1, [r0], -r2
    42c8:	26090d01 	strcs	r0, [r9], -r1, lsl #26
    42cc:	000000ce 	andeq	r0, r0, lr, asr #1
    42d0:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
    42d4:	00000dbf 			; <UNDEFINED> instruction: 0x00000dbf
    42d8:	46090d01 	strmi	r0, [r9], -r1, lsl #26
    42dc:	0000015a 	andeq	r0, r0, sl, asr r1
    42e0:	00739102 	rsbseq	r9, r3, r2, lsl #2
    42e4:	0022c215 	eoreq	ip, r2, r5, lsl r2
    42e8:	08e30100 	stmiaeq	r3!, {r8}^
    42ec:	00396406 	eorseq	r6, r9, r6, lsl #8
    42f0:	00004020 	andeq	r4, r0, r0, lsr #32
    42f4:	949c0100 	ldrls	r0, [ip], #256	; 0x100
    42f8:	16000007 	strne	r0, [r0], -r7
    42fc:	00002341 	andeq	r2, r0, r1, asr #6
    4300:	2608e301 	strcs	lr, [r8], -r1, lsl #6
    4304:	000000ce 	andeq	r0, r0, lr, asr #1
    4308:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
    430c:	00000dbf 			; <UNDEFINED> instruction: 0x00000dbf
    4310:	4608e301 	strmi	lr, [r8], -r1, lsl #6
    4314:	0000015a 	andeq	r0, r0, sl, asr r1
    4318:	00739102 	rsbseq	r9, r3, r2, lsl #2
    431c:	00242115 	eoreq	r2, r4, r5, lsl r1
    4320:	08af0100 	stmiaeq	pc!, {r8}	; <UNPREDICTABLE>
    4324:	00392406 	eorseq	r2, r9, r6, lsl #8
    4328:	00004020 	andeq	r4, r0, r0, lsr #32
    432c:	cc9c0100 	ldfgts	f0, [ip], {0}
    4330:	16000007 	strne	r0, [r0], -r7
    4334:	00001f6c 	andeq	r1, r0, ip, ror #30
    4338:	2608af01 	strcs	sl, [r8], -r1, lsl #30
    433c:	000000ce 	andeq	r0, r0, lr, asr #1
    4340:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
    4344:	00000dbf 			; <UNDEFINED> instruction: 0x00000dbf
    4348:	4608af01 	strmi	sl, [r8], -r1, lsl #30
    434c:	0000015a 	andeq	r0, r0, sl, asr r1
    4350:	00739102 	rsbseq	r9, r3, r2, lsl #2
    4354:	0024ad15 	eoreq	sl, r4, r5, lsl sp
    4358:	08760100 	ldmdaeq	r6!, {r8}^
    435c:	0038e406 	eorseq	lr, r8, r6, lsl #8
    4360:	00004020 	andeq	r4, r0, r0, lsr #32
    4364:	049c0100 	ldreq	r0, [ip], #256	; 0x100
    4368:	16000008 	strne	r0, [r0], -r8
    436c:	0000206d 	andeq	r2, r0, sp, rrx
    4370:	26087601 	strcs	r7, [r8], -r1, lsl #12
    4374:	000000ce 	andeq	r0, r0, lr, asr #1
    4378:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
    437c:	00000dbf 			; <UNDEFINED> instruction: 0x00000dbf
    4380:	46087601 	strmi	r7, [r8], -r1, lsl #12
    4384:	0000015a 	andeq	r0, r0, sl, asr r1
    4388:	00739102 	rsbseq	r9, r3, r2, lsl #2
    438c:	001e5215 	andseq	r5, lr, r5, lsl r2
    4390:	08580100 	ldmdaeq	r8, {r8}^
    4394:	0038a406 	eorseq	sl, r8, r6, lsl #8
    4398:	00004020 	andeq	r4, r0, r0, lsr #32
    439c:	3c9c0100 	ldfccs	f0, [ip], {0}
    43a0:	16000008 	strne	r0, [r0], -r8
    43a4:	00002054 	andeq	r2, r0, r4, asr r0
    43a8:	26085801 	strcs	r5, [r8], -r1, lsl #16
    43ac:	000000ce 	andeq	r0, r0, lr, asr #1
    43b0:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
    43b4:	00000dbf 			; <UNDEFINED> instruction: 0x00000dbf
    43b8:	46085801 	strmi	r5, [r8], -r1, lsl #16
    43bc:	0000015a 	andeq	r0, r0, sl, asr r1
    43c0:	00739102 	rsbseq	r9, r3, r2, lsl #2
    43c4:	0021d115 	eoreq	sp, r1, r5, lsl r1
    43c8:	08380100 	ldmdaeq	r8!, {r8}
    43cc:	00386406 	eorseq	r6, r8, r6, lsl #8
    43d0:	00004020 	andeq	r4, r0, r0, lsr #32
    43d4:	749c0100 	ldrvc	r0, [ip], #256	; 0x100
    43d8:	16000008 	strne	r0, [r0], -r8
    43dc:	00001dd2 	ldrdeq	r1, [r0], -r2
    43e0:	26083801 	strcs	r3, [r8], -r1, lsl #16
    43e4:	000000ce 	andeq	r0, r0, lr, asr #1
    43e8:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
    43ec:	00000dbf 			; <UNDEFINED> instruction: 0x00000dbf
    43f0:	46083801 	strmi	r3, [r8], -r1, lsl #16
    43f4:	0000015a 	andeq	r0, r0, sl, asr r1
    43f8:	00739102 	rsbseq	r9, r3, r2, lsl #2
    43fc:	00235015 	eoreq	r5, r3, r5, lsl r0
    4400:	080e0100 	stmdaeq	lr, {r8}
    4404:	00384806 	eorseq	r4, r8, r6, lsl #16
    4408:	00001c20 	andeq	r1, r0, r0, lsr #24
    440c:	9c9c0100 	ldflss	f0, [ip], {0}
    4410:	16000008 	strne	r0, [r0], -r8
    4414:	000021b2 			; <UNDEFINED> instruction: 0x000021b2
    4418:	24080e01 	strcs	r0, [r8], #-3585	; 0xfffff1ff
    441c:	000000ce 	andeq	r0, r0, lr, asr #1
    4420:	00749102 	rsbseq	r9, r4, r2, lsl #2
    4424:	001ffb15 	andseq	pc, pc, r5, lsl fp	; <UNPREDICTABLE>
    4428:	078e0100 	streq	r0, [lr, r0, lsl #2]
    442c:	00380c06 	eorseq	r0, r8, r6, lsl #24
    4430:	00003c20 	andeq	r3, r0, r0, lsr #24
    4434:	d49c0100 	ldrle	r0, [ip], #256	; 0x100
    4438:	16000008 	strne	r0, [r0], -r8
    443c:	00001d2d 	andeq	r1, r0, sp, lsr #26
    4440:	24078e01 	strcs	r8, [r7], #-3585	; 0xfffff1ff
    4444:	000000ce 	andeq	r0, r0, lr, asr #1
    4448:	186c9102 	stmdane	ip!, {r1, r8, ip, pc}^
    444c:	00001e3b 	andeq	r1, r0, fp, lsr lr
    4450:	0c079001 	stceq	0, cr9, [r7], {1}
    4454:	000000ce 	andeq	r0, r0, lr, asr #1
    4458:	00749102 	rsbseq	r9, r4, r2, lsl #2
    445c:	001d8c15 	andseq	r8, sp, r5, lsl ip
    4460:	072b0100 	streq	r0, [fp, -r0, lsl #2]!
    4464:	0037cc06 	eorseq	ip, r7, r6, lsl #24
    4468:	00004020 	andeq	r4, r0, r0, lsr #32
    446c:	0c9c0100 	ldfeqs	f0, [ip], {0}
    4470:	16000009 	strne	r0, [r0], -r9
    4474:	00001d1e 	andeq	r1, r0, lr, lsl sp
    4478:	29072b01 	stmdbcs	r7, {r0, r8, r9, fp, sp}
    447c:	000000ce 	andeq	r0, r0, lr, asr #1
    4480:	186c9102 	stmdane	ip!, {r1, r8, ip, pc}^
    4484:	00001e3b 	andeq	r1, r0, fp, lsr lr
    4488:	0c072d01 	stceq	13, cr2, [r7], {1}
    448c:	000000ce 	andeq	r0, r0, lr, asr #1
    4490:	00749102 	rsbseq	r9, r4, r2, lsl #2
    4494:	00208815 	eoreq	r8, r0, r5, lsl r8
    4498:	070b0100 	streq	r0, [fp, -r0, lsl #2]
    449c:	00379006 	eorseq	r9, r7, r6
    44a0:	00003c20 	andeq	r3, r0, r0, lsr #24
    44a4:	449c0100 	ldrmi	r0, [ip], #256	; 0x100
    44a8:	16000009 	strne	r0, [r0], -r9
    44ac:	000020d1 	ldrdeq	r2, [r0], -r1
    44b0:	29070b01 	stmdbcs	r7, {r0, r8, r9, fp}
    44b4:	000000ce 	andeq	r0, r0, lr, asr #1
    44b8:	186c9102 	stmdane	ip!, {r1, r8, ip, pc}^
    44bc:	00001e3b 	andeq	r1, r0, fp, lsr lr
    44c0:	0c070d01 	stceq	13, cr0, [r7], {1}
    44c4:	000000ce 	andeq	r0, r0, lr, asr #1
    44c8:	00749102 	rsbseq	r9, r4, r2, lsl #2
    44cc:	00218315 	eoreq	r8, r1, r5, lsl r3
    44d0:	06ea0100 	strbteq	r0, [sl], r0, lsl #2
    44d4:	00375406 	eorseq	r5, r7, r6, lsl #8
    44d8:	00003c20 	andeq	r3, r0, r0, lsr #24
    44dc:	7c9c0100 	ldfvcs	f0, [ip], {0}
    44e0:	16000009 	strne	r0, [r0], -r9
    44e4:	00001fe4 	andeq	r1, r0, r4, ror #31
    44e8:	2606ea01 	strcs	lr, [r6], -r1, lsl #20
    44ec:	000000ce 	andeq	r0, r0, lr, asr #1
    44f0:	186c9102 	stmdane	ip!, {r1, r8, ip, pc}^
    44f4:	00001e3b 	andeq	r1, r0, fp, lsr lr
    44f8:	0c06ec01 	stceq	12, cr14, [r6], {1}
    44fc:	000000ce 	andeq	r0, r0, lr, asr #1
    4500:	00749102 	rsbseq	r9, r4, r2, lsl #2
    4504:	001e9915 	andseq	r9, lr, r5, lsl r9
    4508:	06c60100 	strbeq	r0, [r6], r0, lsl #2
    450c:	00371806 	eorseq	r1, r7, r6, lsl #16
    4510:	00003c20 	andeq	r3, r0, r0, lsr #24
    4514:	b49c0100 	ldrlt	r0, [ip], #256	; 0x100
    4518:	16000009 	strne	r0, [r0], -r9
    451c:	00001fcd 	andeq	r1, r0, sp, asr #31
    4520:	2606c601 	strcs	ip, [r6], -r1, lsl #12
    4524:	000000ce 	andeq	r0, r0, lr, asr #1
    4528:	186c9102 	stmdane	ip!, {r1, r8, ip, pc}^
    452c:	00001e3b 	andeq	r1, r0, fp, lsr lr
    4530:	0c06c801 	stceq	8, cr12, [r6], {1}
    4534:	000000ce 	andeq	r0, r0, lr, asr #1
    4538:	00749102 	rsbseq	r9, r4, r2, lsl #2
    453c:	00236515 	eoreq	r6, r3, r5, lsl r5
    4540:	06ab0100 	strteq	r0, [fp], r0, lsl #2
    4544:	0036fc06 	eorseq	pc, r6, r6, lsl #24
    4548:	00001c20 	andeq	r1, r0, r0, lsr #24
    454c:	dc9c0100 	ldfles	f0, [ip], {0}
    4550:	16000009 	strne	r0, [r0], -r9
    4554:	00002147 	andeq	r2, r0, r7, asr #2
    4558:	2006ab01 	andcs	sl, r6, r1, lsl #22
    455c:	000000ce 	andeq	r0, r0, lr, asr #1
    4560:	00749102 	rsbseq	r9, r4, r2, lsl #2
    4564:	001f0615 	andseq	r0, pc, r5, lsl r6	; <UNPREDICTABLE>
    4568:	05ef0100 	strbeq	r0, [pc, #256]!	; 4670 <startup-0x1fffb990>
    456c:	0036dc06 	eorseq	sp, r6, r6, lsl #24
    4570:	00002020 	andeq	r2, r0, r0, lsr #32
    4574:	049c0100 	ldreq	r0, [ip], #256	; 0x100
    4578:	1600000a 	strne	r0, [r0], -sl
    457c:	00000dbf 			; <UNDEFINED> instruction: 0x00000dbf
    4580:	2905ef01 	stmdbcs	r5, {r0, r8, r9, sl, fp, sp, lr, pc}
    4584:	0000015a 	andeq	r0, r0, sl, asr r1
    4588:	00779102 	rsbseq	r9, r7, r2, lsl #2
    458c:	0020a215 	eoreq	sl, r0, r5, lsl r2
    4590:	05de0100 	ldrbeq	r0, [lr, #256]	; 0x100
    4594:	0036bc06 	eorseq	fp, r6, r6, lsl #24
    4598:	00002020 	andeq	r2, r0, r0, lsr #32
    459c:	2c9c0100 	ldfcss	f0, [ip], {0}
    45a0:	1600000a 	strne	r0, [r0], -sl
    45a4:	00000dbf 			; <UNDEFINED> instruction: 0x00000dbf
    45a8:	2405de01 	strcs	sp, [r5], #-3585	; 0xfffff1ff
    45ac:	0000015a 	andeq	r0, r0, sl, asr r1
    45b0:	00779102 	rsbseq	r9, r7, r2, lsl #2
    45b4:	00247515 	eoreq	r7, r4, r5, lsl r5
    45b8:	05be0100 	ldreq	r0, [lr, #256]!	; 0x100
    45bc:	00365c06 	eorseq	r5, r6, r6, lsl #24
    45c0:	00006020 	andeq	r6, r0, r0, lsr #32
    45c4:	649c0100 	ldrvs	r0, [ip], #256	; 0x100
    45c8:	1600000a 	strne	r0, [r0], -sl
    45cc:	00001fbc 			; <UNDEFINED> instruction: 0x00001fbc
    45d0:	2005be01 	andcs	fp, r5, r1, lsl #28
    45d4:	000000ce 	andeq	r0, r0, lr, asr #1
    45d8:	186c9102 	stmdane	ip!, {r1, r8, ip, pc}^
    45dc:	00001e3b 	andeq	r1, r0, fp, lsr lr
    45e0:	0c05c001 	stceq	0, cr12, [r5], {1}
    45e4:	000000ce 	andeq	r0, r0, lr, asr #1
    45e8:	00749102 	rsbseq	r9, r4, r2, lsl #2
    45ec:	0022b01b 	eoreq	fp, r2, fp, lsl r0
    45f0:	05250100 	streq	r0, [r5, #-256]!	; 0xffffff00
    45f4:	0034f806 	eorseq	pc, r4, r6, lsl #16
    45f8:	00016420 	andeq	r6, r1, r0, lsr #8
    45fc:	ec9c0100 	ldfs	f0, [ip], {0}
    4600:	1600000a 	strne	r0, [r0], -sl
    4604:	00001deb 	andeq	r1, r0, fp, ror #27
    4608:	2b052501 	blcs	14da14 <startup-0x1feb25ec>
    460c:	00000aec 	andeq	r0, r0, ip, ror #21
    4610:	1a5c9102 	bne	1728a20 <startup-0x1e8d75e0>
    4614:	00706d74 	rsbseq	r6, r0, r4, ror sp
    4618:	0c052701 	stceq	7, cr2, [r5], {1}
    461c:	000000ce 	andeq	r0, r0, lr, asr #1
    4620:	18709102 	ldmdane	r0!, {r1, r8, ip, pc}^
    4624:	00001fb6 			; <UNDEFINED> instruction: 0x00001fb6
    4628:	15052701 	strne	r2, [r5, #-1793]	; 0xfffff8ff
    462c:	000000ce 	andeq	r0, r0, lr, asr #1
    4630:	186c9102 	stmdane	ip!, {r1, r8, ip, pc}^
    4634:	00001f7b 	andeq	r1, r0, fp, ror pc
    4638:	20052701 	andcs	r2, r5, r1, lsl #14
    463c:	000000ce 	andeq	r0, r0, lr, asr #1
    4640:	18749102 	ldmdane	r4!, {r1, r8, ip, pc}^
    4644:	00001d5c 	andeq	r1, r0, ip, asr sp
    4648:	2c052701 	stccs	7, cr2, [r5], {1}
    464c:	000000ce 	andeq	r0, r0, lr, asr #1
    4650:	18689102 	stmdane	r8!, {r1, r8, ip, pc}^
    4654:	00002486 	andeq	r2, r0, r6, lsl #9
    4658:	36052701 	strcc	r2, [r5], -r1, lsl #14
    465c:	000000ce 	andeq	r0, r0, lr, asr #1
    4660:	18649102 	stmdane	r4!, {r1, r8, ip, pc}^
    4664:	00001d57 	andeq	r1, r0, r7, asr sp
    4668:	45052701 	strmi	r2, [r5, #-1793]	; 0xfffff8ff
    466c:	000000ce 	andeq	r0, r0, lr, asr #1
    4670:	00609102 	rsbeq	r9, r0, r2, lsl #2
    4674:	03c1041c 	biceq	r0, r1, #28, 8	; 0x1c000000
    4678:	36150000 	ldrcc	r0, [r5], -r0
    467c:	01000022 	tsteq	r0, r2, lsr #32
    4680:	bc0604f1 	cfstrslt	mvf0, [r6], {241}	; 0xf1
    4684:	3c200034 	stccc	0, cr0, [r0], #-208	; 0xffffff30
    4688:	01000000 	mrseq	r0, (UNDEF: 0)
    468c:	000b2a9c 	muleq	fp, ip, sl
    4690:	1cf51600 	ldclne	6, cr1, [r5]
    4694:	f1010000 	setend	le
    4698:	00ce1f04 	sbceq	r1, lr, r4, lsl #30
    469c:	91020000 	mrsls	r0, (UNDEF: 2)
    46a0:	1e3b186c 	cdpne	8, 3, cr1, cr11, cr12, {3}
    46a4:	f3010000 	vhadd.u8	d0, d1, d0
    46a8:	00ce0c04 	sbceq	r0, lr, r4, lsl #24
    46ac:	91020000 	mrsls	r0, (UNDEF: 2)
    46b0:	72150074 	andsvc	r0, r5, #116	; 0x74
    46b4:	0100001e 	tsteq	r0, lr, lsl r0
    46b8:	840604d2 	strhi	r0, [r6], #-1234	; 0xfffffb2e
    46bc:	38200034 	stmdacc	r0!, {r2, r4, r5}
    46c0:	01000000 	mrseq	r0, (UNDEF: 0)
    46c4:	000b629c 	muleq	fp, ip, r2
    46c8:	1cf51600 	ldclne	6, cr1, [r5]
    46cc:	d2010000 	andle	r0, r1, #0
    46d0:	00ce1f04 	sbceq	r1, lr, r4, lsl #30
    46d4:	91020000 	mrsls	r0, (UNDEF: 2)
    46d8:	1e3b186c 	cdpne	8, 3, cr1, cr11, cr12, {3}
    46dc:	d4010000 	strle	r0, [r1], #-0
    46e0:	00ce0c04 	sbceq	r0, lr, r4, lsl #24
    46e4:	91020000 	mrsls	r0, (UNDEF: 2)
    46e8:	c7150074 			; <UNDEFINED> instruction: 0xc7150074
    46ec:	0100001e 	tsteq	r0, lr, lsl r0
    46f0:	500604b3 			; <UNDEFINED> instruction: 0x500604b3
    46f4:	34200034 	strtcc	r0, [r0], #-52	; 0xffffffcc
    46f8:	01000000 	mrseq	r0, (UNDEF: 0)
    46fc:	000b9a9c 	muleq	fp, ip, sl
    4700:	1f911600 	svcne	0x00911600
    4704:	b3010000 	movwlt	r0, #4096	; 0x1000
    4708:	00ce1e04 	sbceq	r1, lr, r4, lsl #28
    470c:	91020000 	mrsls	r0, (UNDEF: 2)
    4710:	1e3b186c 	cdpne	8, 3, cr1, cr11, cr12, {3}
    4714:	b5010000 	strlt	r0, [r1, #-0]
    4718:	00ce0c04 	sbceq	r0, lr, r4, lsl #24
    471c:	91020000 	mrsls	r0, (UNDEF: 2)
    4720:	331d0074 	tstcc	sp, #116	; 0x74
    4724:	0100001f 	tsteq	r0, pc, lsl r0
    4728:	9b09049a 	blls	245998 <startup-0x1fdba668>
    472c:	34000000 	strcc	r0, [r0], #-0
    4730:	1c200034 	stcne	0, cr0, [r0], #-208	; 0xffffff30
    4734:	01000000 	mrseq	r0, (UNDEF: 0)
    4738:	1ed6159c 	mrcne	5, 6, r1, cr6, cr12, {4}
    473c:	7d010000 	stcvc	0, cr0, [r1, #-0]
    4740:	34000604 	strcc	r0, [r0], #-1540	; 0xfffff9fc
    4744:	00342000 	eorseq	r2, r4, r0
    4748:	9c010000 	stcls	0, cr0, [r1], {-0}
    474c:	00000be9 	andeq	r0, r0, r9, ror #23
    4750:	00224616 	eoreq	r4, r2, r6, lsl r6
    4754:	047d0100 	ldrbteq	r0, [sp], #-256	; 0xffffff00
    4758:	0000ce20 	andeq	ip, r0, r0, lsr #28
    475c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    4760:	001e3b18 	andseq	r3, lr, r8, lsl fp
    4764:	047f0100 	ldrbteq	r0, [pc], #-256	; 476c <startup-0x1fffb894>
    4768:	0000ce0c 	andeq	ip, r0, ip, lsl #28
    476c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    4770:	23761500 	cmncs	r6, #0, 10
    4774:	b5010000 	strlt	r0, [r1, #-0]
    4778:	33c40603 	biccc	r0, r4, #3145728	; 0x300000
    477c:	003c2000 	eorseq	r2, ip, r0
    4780:	9c010000 	stcls	0, cr0, [r1], {-0}
    4784:	00000c31 	andeq	r0, r0, r1, lsr ip
    4788:	00213816 	eoreq	r3, r1, r6, lsl r8
    478c:	03b50100 			; <UNDEFINED> instruction: 0x03b50100
    4790:	0000ce1e 	andeq	ip, r0, lr, lsl lr
    4794:	6c910200 	lfmvs	f0, 4, [r1], {0}
    4798:	00207c16 	eoreq	r7, r0, r6, lsl ip
    479c:	03b50100 			; <UNDEFINED> instruction: 0x03b50100
    47a0:	0000ce37 	andeq	ip, r0, r7, lsr lr
    47a4:	68910200 	ldmvs	r1, {r9}
    47a8:	001e3b18 	andseq	r3, lr, r8, lsl fp
    47ac:	03b70100 			; <UNDEFINED> instruction: 0x03b70100
    47b0:	0000ce0c 	andeq	ip, r0, ip, lsl #28
    47b4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    47b8:	1f821500 	svcne	0x00821500
    47bc:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
    47c0:	33840603 	orrcc	r0, r4, #3145728	; 0x300000
    47c4:	00402000 	subeq	r2, r0, r0
    47c8:	9c010000 	stcls	0, cr0, [r1], {-0}
    47cc:	00000c79 	andeq	r0, r0, r9, ror ip
    47d0:	001d6116 	andseq	r6, sp, r6, lsl r1
    47d4:	03880100 	orreq	r0, r8, #0, 2
    47d8:	0000ce1e 	andeq	ip, r0, lr, lsl lr
    47dc:	6c910200 	lfmvs	f0, 4, [r1], {0}
    47e0:	00211516 	eoreq	r1, r1, r6, lsl r5
    47e4:	03880100 	orreq	r0, r8, #0, 2
    47e8:	0000ce37 	andeq	ip, r0, r7, lsr lr
    47ec:	68910200 	ldmvs	r1, {r9}
    47f0:	001e3b18 	andseq	r3, lr, r8, lsl fp
    47f4:	038a0100 	orreq	r0, sl, #0, 2
    47f8:	0000ce0c 	andeq	ip, r0, ip, lsl #28
    47fc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    4800:	20b61500 	adcscs	r1, r6, r0, lsl #10
    4804:	6f010000 	svcvs	0x00010000
    4808:	33640603 	cmncc	r4, #3145728	; 0x300000
    480c:	00202000 	eoreq	r2, r0, r0
    4810:	9c010000 	stcls	0, cr0, [r1], {-0}
    4814:	00000ca1 	andeq	r0, r0, r1, lsr #25
    4818:	000dbf16 	andeq	fp, sp, r6, lsl pc
    481c:	036f0100 	cmneq	pc, #0, 2
    4820:	00015a31 	andeq	r5, r1, r1, lsr sl
    4824:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    4828:	1d101500 	cfldr32ne	mvfx1, [r0, #-0]
    482c:	5d010000 	stcpl	0, cr0, [r1, #-0]
    4830:	33440603 	movtcc	r0, #17923	; 0x4603
    4834:	00202000 	eoreq	r2, r0, r0
    4838:	9c010000 	stcls	0, cr0, [r1], {-0}
    483c:	00000cc9 	andeq	r0, r0, r9, asr #25
    4840:	000dbf16 	andeq	fp, sp, r6, lsl pc
    4844:	035d0100 	cmpeq	sp, #0, 2
    4848:	00015a24 	andeq	r5, r1, r4, lsr #20
    484c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    4850:	20e01500 	rsccs	r1, r0, r0, lsl #10
    4854:	49010000 	stmdbmi	r1, {}	; <UNPREDICTABLE>
    4858:	33140603 	tstcc	r4, #3145728	; 0x300000
    485c:	00302000 	eorseq	r2, r0, r0
    4860:	9c010000 	stcls	0, cr0, [r1], {-0}
    4864:	00000d11 	andeq	r0, r0, r1, lsl sp
    4868:	00219a16 	eoreq	r9, r1, r6, lsl sl
    486c:	03490100 	movteq	r0, #37120	; 0x9100
    4870:	0000ce20 	andeq	ip, r0, r0, lsr #28
    4874:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    4878:	0021a216 	eoreq	sl, r1, r6, lsl r2
    487c:	03490100 	movteq	r0, #37120	; 0x9100
    4880:	0000ce32 	andeq	ip, r0, r2, lsr lr
    4884:	70910200 	addsvc	r0, r1, r0, lsl #4
    4888:	0021aa16 	eoreq	sl, r1, r6, lsl sl
    488c:	03490100 	movteq	r0, #37120	; 0x9100
    4890:	0000ce44 	andeq	ip, r0, r4, asr #28
    4894:	6c910200 	lfmvs	f0, 4, [r1], {0}
    4898:	1f9c1500 	svcne	0x009c1500
    489c:	dc010000 	stcle	0, cr0, [r1], {-0}
    48a0:	32f40602 	rscscc	r0, r4, #2097152	; 0x200000
    48a4:	00202000 	eoreq	r2, r0, r0
    48a8:	9c010000 	stcls	0, cr0, [r1], {-0}
    48ac:	00000d39 	andeq	r0, r0, r9, lsr sp
    48b0:	000dbf16 	andeq	fp, sp, r6, lsl pc
    48b4:	02dc0100 	sbcseq	r0, ip, #0, 2
    48b8:	00015a24 	andeq	r5, r1, r4, lsr #20
    48bc:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    48c0:	20381500 	eorscs	r1, r8, r0, lsl #10
    48c4:	51010000 	mrspl	r0, (UNDEF: 1)
    48c8:	32cc0602 	sbccc	r0, ip, #2097152	; 0x200000
    48cc:	00282000 	eoreq	r2, r8, r0
    48d0:	9c010000 	stcls	0, cr0, [r1], {-0}
    48d4:	00000d71 	andeq	r0, r0, r1, ror sp
    48d8:	0022a816 	eoreq	sl, r2, r6, lsl r8
    48dc:	02510100 	subseq	r0, r1, #0, 2
    48e0:	0000ce20 	andeq	ip, r0, r0, lsr #28
    48e4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    48e8:	0022ed16 	eoreq	lr, r2, r6, lsl sp
    48ec:	02510100 	subseq	r0, r1, #0, 2
    48f0:	0000ce32 	andeq	ip, r0, r2, lsr lr
    48f4:	70910200 	addsvc	r0, r1, r0, lsl #4
    48f8:	21c61500 	biccs	r1, r6, r0, lsl #10
    48fc:	33010000 	movwcc	r0, #4096	; 0x1000
    4900:	32ac0602 	adccc	r0, ip, #2097152	; 0x200000
    4904:	00202000 	eoreq	r2, r0, r0
    4908:	9c010000 	stcls	0, cr0, [r1], {-0}
    490c:	00000d99 	muleq	r0, r9, sp
    4910:	000dbf16 	andeq	fp, sp, r6, lsl pc
    4914:	02330100 	eorseq	r0, r3, #0, 2
    4918:	00015a21 	andeq	r5, r1, r1, lsr #20
    491c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    4920:	244d1500 	strbcs	r1, [sp], #-1280	; 0xfffffb00
    4924:	1b010000 	blne	4492c <startup-0x1ffbb6d4>
    4928:	32700602 	rsbscc	r0, r0, #2097152	; 0x200000
    492c:	003c2000 	eorseq	r2, ip, r0
    4930:	9c010000 	stcls	0, cr0, [r1], {-0}
    4934:	00000e01 	andeq	r0, r0, r1, lsl #28
    4938:	001f2516 	andseq	r2, pc, r6, lsl r5	; <UNPREDICTABLE>
    493c:	021b0100 	andseq	r0, fp, #0, 2
    4940:	0000ce1d 	andeq	ip, r0, sp, lsl lr
    4944:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    4948:	001dcd16 	andseq	ip, sp, r6, lsl sp
    494c:	021b0100 	andseq	r0, fp, #0, 2
    4950:	0000ce35 	andeq	ip, r0, r5, lsr lr
    4954:	70910200 	addsvc	r0, r1, r0, lsl #4
    4958:	001d8716 	andseq	r8, sp, r6, lsl r7
    495c:	021b0100 	andseq	r0, fp, #0, 2
    4960:	0000ce44 	andeq	ip, r0, r4, asr #28
    4964:	6c910200 	lfmvs	f0, 4, [r1], {0}
    4968:	001da616 	andseq	sl, sp, r6, lsl r6
    496c:	021b0100 	andseq	r0, fp, #0, 2
    4970:	0000ce53 	andeq	ip, r0, r3, asr lr
    4974:	68910200 	ldmvs	r1, {r9}
    4978:	001dab16 	andseq	sl, sp, r6, lsl fp
    497c:	021b0100 	andseq	r0, fp, #0, 2
    4980:	0000ce62 	andeq	ip, r0, r2, ror #28
    4984:	00910200 	addseq	r0, r1, r0, lsl #4
    4988:	24081500 	strcs	r1, [r8], #-1280	; 0xfffffb00
    498c:	b8010000 	stmdalt	r1, {}	; <UNPREDICTABLE>
    4990:	32500601 	subscc	r0, r0, #1048576	; 0x100000
    4994:	00202000 	eoreq	r2, r0, r0
    4998:	9c010000 	stcls	0, cr0, [r1], {-0}
    499c:	00000e29 	andeq	r0, r0, r9, lsr #28
    49a0:	000dbf16 	andeq	fp, sp, r6, lsl pc
    49a4:	01b80100 			; <UNDEFINED> instruction: 0x01b80100
    49a8:	00015a21 	andeq	r5, r1, r1, lsr #20
    49ac:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    49b0:	1ee71500 	cdpne	5, 14, cr1, cr7, cr0, {0}
    49b4:	90010000 	andls	r0, r1, r0
    49b8:	320c0601 	andcc	r0, ip, #1048576	; 0x100000
    49bc:	00442000 	subeq	r2, r4, r0
    49c0:	9c010000 	stcls	0, cr0, [r1], {-0}
    49c4:	00000e51 	andeq	r0, r0, r1, asr lr
    49c8:	001cfe16 	andseq	pc, ip, r6, lsl lr	; <UNPREDICTABLE>
    49cc:	01900100 	orrseq	r0, r0, r0, lsl #2
    49d0:	00009b1c 	andeq	r9, r0, ip, lsl fp
    49d4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    49d8:	20491500 	subcs	r1, r9, r0, lsl #10
    49dc:	77010000 	strvc	r0, [r1, -r0]
    49e0:	31ec0601 	mvncc	r0, r1, lsl #12
    49e4:	00202000 	eoreq	r2, r0, r0
    49e8:	9c010000 	stcls	0, cr0, [r1], {-0}
    49ec:	00000e79 	andeq	r0, r0, r9, ror lr
    49f0:	000dbf16 	andeq	fp, sp, r6, lsl pc
    49f4:	01770100 	cmneq	r7, r0, lsl #2
    49f8:	00015a21 	andeq	r5, r1, r1, lsr #20
    49fc:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    4a00:	22801500 	addcs	r1, r0, #0, 10
    4a04:	53010000 	movwpl	r0, #4096	; 0x1000
    4a08:	31ae0601 			; <UNDEFINED> instruction: 0x31ae0601
    4a0c:	003e2000 	eorseq	r2, lr, r0
    4a10:	9c010000 	stcls	0, cr0, [r1], {-0}
    4a14:	00000eb1 			; <UNDEFINED> instruction: 0x00000eb1
    4a18:	00228a16 	eoreq	r8, r2, r6, lsl sl
    4a1c:	01530100 	cmpeq	r3, r0, lsl #2
    4a20:	00009b2c 	andeq	r9, r0, ip, lsr #22
    4a24:	6f910200 	svcvs	0x00910200
    4a28:	001e3b18 	andseq	r3, lr, r8, lsl fp
    4a2c:	01550100 	cmpeq	r5, r0, lsl #2
    4a30:	0000ce0c 	andeq	ip, r0, ip, lsl #28
    4a34:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    4a38:	1f471e00 	svcne	0x00471e00
    4a3c:	34010000 	strcc	r0, [r1], #-0
    4a40:	01830d01 	orreq	r0, r3, r1, lsl #26
    4a44:	31500000 	cmpcc	r0, r0
    4a48:	005e2000 	subseq	r2, lr, r0
    4a4c:	9c010000 	stcls	0, cr0, [r1], {-0}
    4a50:	00000efd 	strdeq	r0, [r0], -sp
    4a54:	00233218 	eoreq	r3, r3, r8, lsl r2
    4a58:	01360100 	teqeq	r6, r0, lsl #2
    4a5c:	0000da11 	andeq	sp, r0, r1, lsl sl
    4a60:	68910200 	ldmvs	r1, {r9}
    4a64:	0022a118 	eoreq	sl, r2, r8, lsl r1
    4a68:	01370100 	teqeq	r7, r0, lsl #2
    4a6c:	0001830f 	andeq	r8, r1, pc, lsl #6
    4a70:	6f910200 	svcvs	0x00910200
    4a74:	00229e18 	eoreq	r9, r2, r8, lsl lr
    4a78:	01380100 	teqeq	r8, r0, lsl #2
    4a7c:	0001240e 	andeq	r2, r1, lr, lsl #8
    4a80:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
    4a84:	21751500 	cmncs	r5, r0, lsl #10
    4a88:	1c010000 	stcne	0, cr0, [r1], {-0}
    4a8c:	31280601 			; <UNDEFINED> instruction: 0x31280601
    4a90:	00282000 	eoreq	r2, r8, r0
    4a94:	9c010000 	stcls	0, cr0, [r1], {-0}
    4a98:	00000f25 	andeq	r0, r0, r5, lsr #30
    4a9c:	00225716 	eoreq	r5, r2, r6, lsl r7
    4aa0:	011c0100 	tsteq	ip, r0, lsl #2
    4aa4:	00009b1c 	andeq	r9, r0, ip, lsl fp
    4aa8:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    4aac:	22e21f00 	rsccs	r1, r2, #0, 30
    4ab0:	e1010000 	mrs	r0, (UNDEF: 1)
    4ab4:	0030b806 	eorseq	fp, r0, r6, lsl #16
    4ab8:	00007020 	andeq	r7, r0, r0, lsr #32
    4abc:	009c0100 	addseq	r0, ip, r0, lsl #2

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	0e030104 	adfeqs	f0, f3, f4
  18:	0b0b0b3e 	bleq	2c2d18 <startup-0x1fd3d2e8>
  1c:	0b3a1349 	bleq	e84d48 <startup-0x1f17b2b8>
  20:	0b390b3b 	bleq	e42d14 <startup-0x1f1bd2ec>
  24:	00001301 	andeq	r1, r0, r1, lsl #6
  28:	03002803 	movweq	r2, #2051	; 0x803
  2c:	000d1c0e 	andeq	r1, sp, lr, lsl #24
  30:	00280400 	eoreq	r0, r8, r0, lsl #8
  34:	0b1c0e03 	bleq	703848 <startup-0x1f8fc7b8>
  38:	24050000 	strcs	r0, [r5], #-0
  3c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  40:	000e030b 	andeq	r0, lr, fp, lsl #6
  44:	00160600 	andseq	r0, r6, r0, lsl #12
  48:	0b3a0e03 	bleq	e8385c <startup-0x1f17c7a4>
  4c:	0b390b3b 	bleq	e42d40 <startup-0x1f1bd2c0>
  50:	00001349 	andeq	r1, r0, r9, asr #6
  54:	0b002407 	bleq	9078 <startup-0x1fff6f88>
  58:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  5c:	08000008 	stmdaeq	r0, {r3}
  60:	13490035 	movtne	r0, #36917	; 0x9035
  64:	34090000 	strcc	r0, [r9], #-0
  68:	3a0e0300 	bcc	380c70 <startup-0x1fc7f390>
  6c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
  70:	3f13490b 	svccc	0x0013490b
  74:	00193c19 	andseq	r3, r9, r9, lsl ip
  78:	00340a00 	eorseq	r0, r4, r0, lsl #20
  7c:	0b3a0e03 	bleq	e83890 <startup-0x1f17c770>
  80:	0b390b3b 	bleq	e42d74 <startup-0x1f1bd28c>
  84:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
  88:	0000193c 	andeq	r1, r0, ip, lsr r9
  8c:	3e01040b 	cdpcc	4, 0, cr0, cr1, cr11, {0}
  90:	490b0b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp}
  94:	3b0b3a13 	blcc	2ce8e8 <startup-0x1fd31718>
  98:	010b3905 	tsteq	fp, r5, lsl #18
  9c:	0c000013 	stceq	0, cr0, [r0], {19}
  a0:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
  a4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  a8:	13490b39 	movtne	r0, #39737	; 0x9b39
  ac:	130d0000 	movwne	r0, #53248	; 0xd000
  b0:	3a0b0b01 	bcc	2c2cbc <startup-0x1fd3d344>
  b4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
  b8:	0013010b 	andseq	r0, r3, fp, lsl #2
  bc:	000d0e00 	andeq	r0, sp, r0, lsl #28
  c0:	0b3a0e03 	bleq	e838d4 <startup-0x1f17c72c>
  c4:	0b39053b 	bleq	e415b8 <startup-0x1f1bea48>
  c8:	0b381349 	bleq	e04df4 <startup-0x1f1fb20c>
  cc:	0d0f0000 	stceq	0, cr0, [pc, #-0]	; d4 <startup-0x1fffff2c>
  d0:	3a080300 	bcc	200cd8 <startup-0x1fdff328>
  d4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
  d8:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
  dc:	1000000b 	andne	r0, r0, fp
  e0:	13490101 	movtne	r0, #37121	; 0x9101
  e4:	00001301 	andeq	r1, r0, r1, lsl #6
  e8:	49002111 	stmdbmi	r0, {r0, r4, r8, sp}
  ec:	000b2f13 	andeq	r2, fp, r3, lsl pc
  f0:	01041200 	mrseq	r1, R12_usr
  f4:	0b0b0b3e 	bleq	2c2df4 <startup-0x1fd3d20c>
  f8:	0b3a1349 	bleq	e84e24 <startup-0x1f17b1dc>
  fc:	0b390b3b 	bleq	e42df0 <startup-0x1f1bd210>
 100:	00001301 	andeq	r1, r0, r1, lsl #6
 104:	0b011313 	bleq	44d58 <startup-0x1ffbb2a8>
 108:	3b0b3a0b 	blcc	2ce93c <startup-0x1fd316c4>
 10c:	010b390b 	tsteq	fp, fp, lsl #18
 110:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
 114:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 118:	0b3b0b3a 	bleq	ec2e08 <startup-0x1f13d1f8>
 11c:	13490b39 	movtne	r0, #39737	; 0x9b39
 120:	00000b38 	andeq	r0, r0, r8, lsr fp
 124:	03000d15 	movweq	r0, #3349	; 0xd15
 128:	3b0b3a08 	blcc	2ce950 <startup-0x1fd316b0>
 12c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 130:	000b3813 	andeq	r3, fp, r3, lsl r8
 134:	00341600 	eorseq	r1, r4, r0, lsl #12
 138:	0b3a0e03 	bleq	e8394c <startup-0x1f17c6b4>
 13c:	0b390b3b 	bleq	e42e30 <startup-0x1f1bd1d0>
 140:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 144:	00001802 	andeq	r1, r0, r2, lsl #16
 148:	3f002e17 	svccc	0x00002e17
 14c:	3a0e0319 	bcc	380db8 <startup-0x1fc7f248>
 150:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 154:	1119270b 	tstne	r9, fp, lsl #14
 158:	40061201 	andmi	r1, r6, r1, lsl #4
 15c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 160:	2e180000 	cdpcs	0, 1, cr0, cr8, cr0, {0}
 164:	03193f01 	tsteq	r9, #1, 30
 168:	3b0b3a0e 	blcc	2ce9a8 <startup-0x1fd31658>
 16c:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 170:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 174:	96184006 	ldrls	r4, [r8], -r6
 178:	13011942 	movwne	r1, #6466	; 0x1942
 17c:	34190000 	ldrcc	r0, [r9], #-0
 180:	3a0e0300 	bcc	380d88 <startup-0x1fc7f278>
 184:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 188:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 18c:	1a000018 	bne	1f4 <startup-0x1ffffe0c>
 190:	0111010b 	tsteq	r1, fp, lsl #2
 194:	00000612 	andeq	r0, r0, r2, lsl r6
 198:	0300341b 	movweq	r3, #1051	; 0x41b
 19c:	3b0b3a08 	blcc	2ce9c4 <startup-0x1fd3163c>
 1a0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 1a4:	00180213 	andseq	r0, r8, r3, lsl r2
 1a8:	012e1c00 			; <UNDEFINED> instruction: 0x012e1c00
 1ac:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 1b0:	0b3b0b3a 	bleq	ec2ea0 <startup-0x1f13d160>
 1b4:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 1b8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1bc:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 1c0:	00130119 	andseq	r0, r3, r9, lsl r1
 1c4:	002e1d00 	eoreq	r1, lr, r0, lsl #26
 1c8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 1cc:	0b3b0b3a 	bleq	ec2ebc <startup-0x1f13d144>
 1d0:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 1d4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1d8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 1dc:	00000019 	andeq	r0, r0, r9, lsl r0
 1e0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 1e4:	030b130e 	movweq	r1, #45838	; 0xb30e
 1e8:	110e1b0e 	tstne	lr, lr, lsl #22
 1ec:	10061201 	andne	r1, r6, r1, lsl #4
 1f0:	02000017 	andeq	r0, r0, #23
 1f4:	0b0b0024 	bleq	2c028c <startup-0x1fd3fd74>
 1f8:	0e030b3e 	vmoveq.16	d3[0], r0
 1fc:	16030000 	strne	r0, [r3], -r0
 200:	3a0e0300 	bcc	380e08 <startup-0x1fc7f1f8>
 204:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 208:	0013490b 	andseq	r4, r3, fp, lsl #18
 20c:	00240400 	eoreq	r0, r4, r0, lsl #8
 210:	0b3e0b0b 	bleq	f82e44 <startup-0x1f07d1bc>
 214:	00000803 	andeq	r0, r0, r3, lsl #16
 218:	49003505 	stmdbmi	r0, {r0, r2, r8, sl, ip, sp}
 21c:	06000013 			; <UNDEFINED> instruction: 0x06000013
 220:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 224:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 228:	13490b39 	movtne	r0, #39737	; 0x9b39
 22c:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 230:	34070000 	strcc	r0, [r7], #-0
 234:	3a0e0300 	bcc	380e3c <startup-0x1fc7f1c4>
 238:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 23c:	3f13490b 	svccc	0x0013490b
 240:	00193c19 	andseq	r3, r9, r9, lsl ip
 244:	01040800 	tsteq	r4, r0, lsl #16
 248:	0b0b0b3e 	bleq	2c2f48 <startup-0x1fd3d0b8>
 24c:	0b3a1349 	bleq	e84f78 <startup-0x1f17b088>
 250:	0b39053b 	bleq	e41744 <startup-0x1f1be8bc>
 254:	00001301 	andeq	r1, r0, r1, lsl #6
 258:	03002809 	movweq	r2, #2057	; 0x809
 25c:	000b1c0e 	andeq	r1, fp, lr, lsl #24
 260:	01130a00 	tsteq	r3, r0, lsl #20
 264:	0b3a0b0b 	bleq	e82e98 <startup-0x1f17d168>
 268:	0b39053b 	bleq	e4175c <startup-0x1f1be8a4>
 26c:	00001301 	andeq	r1, r0, r1, lsl #6
 270:	03000d0b 	movweq	r0, #3339	; 0xd0b
 274:	3b0b3a0e 	blcc	2ceab4 <startup-0x1fd3154c>
 278:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 27c:	000b3813 	andeq	r3, fp, r3, lsl r8
 280:	000d0c00 	andeq	r0, sp, r0, lsl #24
 284:	0b3a0803 	bleq	e82298 <startup-0x1f17dd68>
 288:	0b39053b 	bleq	e4177c <startup-0x1f1be884>
 28c:	0b381349 	bleq	e04fb8 <startup-0x1f1fb048>
 290:	010d0000 	mrseq	r0, (UNDEF: 13)
 294:	01134901 	tsteq	r3, r1, lsl #18
 298:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
 29c:	13490021 	movtne	r0, #36897	; 0x9021
 2a0:	00000b2f 	andeq	r0, r0, pc, lsr #22
 2a4:	0300160f 	movweq	r1, #1551	; 0x60f
 2a8:	3b0b3a0e 	blcc	2ceae8 <startup-0x1fd31518>
 2ac:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 2b0:	10000013 	andne	r0, r0, r3, lsl r0
 2b4:	0b3e0104 	bleq	f806cc <startup-0x1f07f934>
 2b8:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 2bc:	0b3b0b3a 	bleq	ec2fac <startup-0x1f13d054>
 2c0:	13010b39 	movwne	r0, #6969	; 0x1b39
 2c4:	13110000 	tstne	r1, #0
 2c8:	3a0b0b01 	bcc	2c2ed4 <startup-0x1fd3d12c>
 2cc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 2d0:	0013010b 	andseq	r0, r3, fp, lsl #2
 2d4:	000d1200 	andeq	r1, sp, r0, lsl #4
 2d8:	0b3a0e03 	bleq	e83aec <startup-0x1f17c514>
 2dc:	0b390b3b 	bleq	e42fd0 <startup-0x1f1bd030>
 2e0:	0b381349 	bleq	e0500c <startup-0x1f1faff4>
 2e4:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
 2e8:	03193f01 	tsteq	r9, #1, 30
 2ec:	3b0b3a0e 	blcc	2ceb2c <startup-0x1fd314d4>
 2f0:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
 2f4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 2f8:	97184006 	ldrls	r4, [r8, -r6]
 2fc:	13011942 	movwne	r1, #6466	; 0x1942
 300:	05140000 	ldreq	r0, [r4, #-0]
 304:	3a0e0300 	bcc	380f0c <startup-0x1fc7f0f4>
 308:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 30c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 310:	15000018 	strne	r0, [r0, #-24]	; 0xffffffe8
 314:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 318:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 31c:	13490b39 	movtne	r0, #39737	; 0x9b39
 320:	00001802 	andeq	r1, r0, r2, lsl #16
 324:	0b000f16 	bleq	3f84 <startup-0x1fffc07c>
 328:	0013490b 	andseq	r4, r3, fp, lsl #18
 32c:	012e1700 			; <UNDEFINED> instruction: 0x012e1700
 330:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 334:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 338:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 33c:	01111349 	tsteq	r1, r9, asr #6
 340:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 344:	01194297 			; <UNDEFINED> instruction: 0x01194297
 348:	18000013 	stmdane	r0, {r0, r1, r4}
 34c:	08030034 	stmdaeq	r3, {r2, r4, r5}
 350:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 354:	13490b39 	movtne	r0, #39737	; 0x9b39
 358:	00001802 	andeq	r1, r0, r2, lsl #16
 35c:	3f012e19 	svccc	0x00012e19
 360:	3a0e0319 	bcc	380fcc <startup-0x1fc7f034>
 364:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 368:	1119270b 	tstne	r9, fp, lsl #14
 36c:	40061201 	andmi	r1, r6, r1, lsl #4
 370:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 374:	00001301 	andeq	r1, r0, r1, lsl #6
 378:	0300051a 	movweq	r0, #1306	; 0x51a
 37c:	3b0b3a0e 	blcc	2cebbc <startup-0x1fd31444>
 380:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 384:	00180213 	andseq	r0, r8, r3, lsl r2
 388:	00341b00 	eorseq	r1, r4, r0, lsl #22
 38c:	0b3a0e03 	bleq	e83ba0 <startup-0x1f17c460>
 390:	0b390b3b 	bleq	e43084 <startup-0x1f1bcf7c>
 394:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 398:	341c0000 	ldrcc	r0, [ip], #-0
 39c:	3a080300 	bcc	200fa4 <startup-0x1fdff05c>
 3a0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 3a4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 3a8:	1d000018 	stcne	0, cr0, [r0, #-96]	; 0xffffffa0
 3ac:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 3b0:	0b3a0e03 	bleq	e83bc4 <startup-0x1f17c43c>
 3b4:	0b390b3b 	bleq	e430a8 <startup-0x1f1bcf58>
 3b8:	01111927 	tsteq	r1, r7, lsr #18
 3bc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 3c0:	00194296 	mulseq	r9, r6, r2
 3c4:	11010000 	mrsne	r0, (UNDEF: 1)
 3c8:	130e2501 	movwne	r2, #58625	; 0xe501
 3cc:	1b0e030b 	blne	381000 <startup-0x1fc7f000>
 3d0:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 3d4:	00171006 	andseq	r1, r7, r6
 3d8:	00240200 	eoreq	r0, r4, r0, lsl #4
 3dc:	0b3e0b0b 	bleq	f83010 <startup-0x1f07cff0>
 3e0:	00000e03 	andeq	r0, r0, r3, lsl #28
 3e4:	03001603 	movweq	r1, #1539	; 0x603
 3e8:	3b0b3a0e 	blcc	2cec28 <startup-0x1fd313d8>
 3ec:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 3f0:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
 3f4:	0b0b0024 	bleq	2c048c <startup-0x1fd3fb74>
 3f8:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 3fc:	35050000 	strcc	r0, [r5, #-0]
 400:	00134900 	andseq	r4, r3, r0, lsl #18
 404:	01010600 	tsteq	r1, r0, lsl #12
 408:	13011349 	movwne	r1, #4937	; 0x1349
 40c:	21070000 	mrscs	r0, (UNDEF: 7)
 410:	2f134900 	svccs	0x00134900
 414:	0800000b 	stmdaeq	r0, {r0, r1, r3}
 418:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 41c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 420:	13490b39 	movtne	r0, #39737	; 0x9b39
 424:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 428:	34090000 	strcc	r0, [r9], #-0
 42c:	3a0e0300 	bcc	381034 <startup-0x1fc7efcc>
 430:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 434:	3f13490b 	svccc	0x0013490b
 438:	00193c19 	andseq	r3, r9, r9, lsl ip
 43c:	01040a00 	tsteq	r4, r0, lsl #20
 440:	0b0b0b3e 	bleq	2c3140 <startup-0x1fd3cec0>
 444:	0b3a1349 	bleq	e85170 <startup-0x1f17ae90>
 448:	0b39053b 	bleq	e4193c <startup-0x1f1be6c4>
 44c:	00001301 	andeq	r1, r0, r1, lsl #6
 450:	0300280b 	movweq	r2, #2059	; 0x80b
 454:	000b1c0e 	andeq	r1, fp, lr, lsl #24
 458:	00280c00 	eoreq	r0, r8, r0, lsl #24
 45c:	0b1c0803 	bleq	702470 <startup-0x1f8fdb90>
 460:	160d0000 	strne	r0, [sp], -r0
 464:	3a0e0300 	bcc	38106c <startup-0x1fc7ef94>
 468:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 46c:	0013490b 	andseq	r4, r3, fp, lsl #18
 470:	01130e00 	tsteq	r3, r0, lsl #28
 474:	0b3a0b0b 	bleq	e830a8 <startup-0x1f17cf58>
 478:	0b39053b 	bleq	e4196c <startup-0x1f1be694>
 47c:	00001301 	andeq	r1, r0, r1, lsl #6
 480:	03000d0f 	movweq	r0, #3343	; 0xd0f
 484:	3b0b3a0e 	blcc	2cecc4 <startup-0x1fd3133c>
 488:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 48c:	000b3813 	andeq	r3, fp, r3, lsl r8
 490:	000d1000 	andeq	r1, sp, r0
 494:	0b3a0803 	bleq	e824a8 <startup-0x1f17db58>
 498:	0b39053b 	bleq	e4198c <startup-0x1f1be674>
 49c:	0b381349 	bleq	e051c8 <startup-0x1f1fae38>
 4a0:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
 4a4:	03193f01 	tsteq	r9, #1, 30
 4a8:	3b0b3a0e 	blcc	2cece8 <startup-0x1fd31318>
 4ac:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 4b0:	11134919 	tstne	r3, r9, lsl r9
 4b4:	40061201 	andmi	r1, r6, r1, lsl #4
 4b8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 4bc:	00001301 	andeq	r1, r0, r1, lsl #6
 4c0:	03003412 	movweq	r3, #1042	; 0x412
 4c4:	3b0b3a0e 	blcc	2ced04 <startup-0x1fd312fc>
 4c8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 4cc:	00180213 	andseq	r0, r8, r3, lsl r2
 4d0:	012e1300 			; <UNDEFINED> instruction: 0x012e1300
 4d4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 4d8:	0b3b0b3a 	bleq	ec31c8 <startup-0x1f13ce38>
 4dc:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 4e0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 4e4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 4e8:	00130119 	andseq	r0, r3, r9, lsl r1
 4ec:	00051400 	andeq	r1, r5, r0, lsl #8
 4f0:	0b3a0e03 	bleq	e83d04 <startup-0x1f17c2fc>
 4f4:	0b390b3b 	bleq	e431e8 <startup-0x1f1bce18>
 4f8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 4fc:	34150000 	ldrcc	r0, [r5], #-0
 500:	3a080300 	bcc	201108 <startup-0x1fdfeef8>
 504:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 508:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 50c:	16000018 			; <UNDEFINED> instruction: 0x16000018
 510:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 514:	0b3a0e03 	bleq	e83d28 <startup-0x1f17c2d8>
 518:	0b390b3b 	bleq	e4320c <startup-0x1f1bcdf4>
 51c:	01111927 	tsteq	r1, r7, lsr #18
 520:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 524:	00194296 	mulseq	r9, r6, r2
 528:	11010000 	mrsne	r0, (UNDEF: 1)
 52c:	130e2501 	movwne	r2, #58625	; 0xe501
 530:	1b0e030b 	blne	381164 <startup-0x1fc7ee9c>
 534:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 538:	00171006 	andseq	r1, r7, r6
 53c:	00240200 	eoreq	r0, r4, r0, lsl #4
 540:	0b3e0b0b 	bleq	f83174 <startup-0x1f07ce8c>
 544:	00000e03 	andeq	r0, r0, r3, lsl #28
 548:	03001603 	movweq	r1, #1539	; 0x603
 54c:	3b0b3a0e 	blcc	2ced8c <startup-0x1fd31274>
 550:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 554:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
 558:	0b0b0024 	bleq	2c05f0 <startup-0x1fd3fa10>
 55c:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 560:	35050000 	strcc	r0, [r5, #-0]
 564:	00134900 	andseq	r4, r3, r0, lsl #18
 568:	00340600 	eorseq	r0, r4, r0, lsl #12
 56c:	0b3a0e03 	bleq	e83d80 <startup-0x1f17c280>
 570:	0b39053b 	bleq	e41a64 <startup-0x1f1be59c>
 574:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 578:	0000193c 	andeq	r1, r0, ip, lsr r9
 57c:	03003407 	movweq	r3, #1031	; 0x407
 580:	3b0b3a0e 	blcc	2cedc0 <startup-0x1fd31240>
 584:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 588:	3c193f13 	ldccc	15, cr3, [r9], {19}
 58c:	08000019 	stmdaeq	r0, {r0, r3, r4}
 590:	0b3e0104 	bleq	f809a8 <startup-0x1f07f658>
 594:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 598:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 59c:	13010b39 	movwne	r0, #6969	; 0x1b39
 5a0:	28090000 	stmdacs	r9, {}	; <UNPREDICTABLE>
 5a4:	1c0e0300 	stcne	3, cr0, [lr], {-0}
 5a8:	0a00000b 	beq	5dc <startup-0x1ffffa24>
 5ac:	08030028 	stmdaeq	r3, {r3, r5}
 5b0:	00000b1c 	andeq	r0, r0, ip, lsl fp
 5b4:	0300160b 	movweq	r1, #1547	; 0x60b
 5b8:	3b0b3a0e 	blcc	2cedf8 <startup-0x1fd31208>
 5bc:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 5c0:	0c000013 	stceq	0, cr0, [r0], {19}
 5c4:	0b0b0113 	bleq	2c0a18 <startup-0x1fd3f5e8>
 5c8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 5cc:	13010b39 	movwne	r0, #6969	; 0x1b39
 5d0:	0d0d0000 	stceq	0, cr0, [sp, #-0]
 5d4:	3a080300 	bcc	2011dc <startup-0x1fdfee24>
 5d8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 5dc:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 5e0:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
 5e4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 5e8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 5ec:	13490b39 	movtne	r0, #39737	; 0x9b39
 5f0:	00000b38 	andeq	r0, r0, r8, lsr fp
 5f4:	0b01130f 	bleq	45238 <startup-0x1ffbadc8>
 5f8:	3b0b3a0b 	blcc	2cee2c <startup-0x1fd311d4>
 5fc:	010b390b 	tsteq	fp, fp, lsl #18
 600:	10000013 	andne	r0, r0, r3, lsl r0
 604:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 608:	0b3b0b3a 	bleq	ec32f8 <startup-0x1f13cd08>
 60c:	13490b39 	movtne	r0, #39737	; 0x9b39
 610:	00000b38 	andeq	r0, r0, r8, lsr fp
 614:	03012e11 	movweq	r2, #7697	; 0x1e11
 618:	3b0b3a0e 	blcc	2cee58 <startup-0x1fd311a8>
 61c:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
 620:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 624:	97184006 	ldrls	r4, [r8, -r6]
 628:	13011942 	movwne	r1, #6466	; 0x1942
 62c:	05120000 	ldreq	r0, [r2, #-0]
 630:	3a0e0300 	bcc	381238 <startup-0x1fc7edc8>
 634:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 638:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 63c:	13000018 	movwne	r0, #24
 640:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 644:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 648:	13490b39 	movtne	r0, #39737	; 0x9b39
 64c:	00001802 	andeq	r1, r0, r2, lsl #16
 650:	03003414 	movweq	r3, #1044	; 0x414
 654:	3b0b3a08 	blcc	2cee7c <startup-0x1fd31184>
 658:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 65c:	00180213 	andseq	r0, r8, r3, lsl r2
 660:	000f1500 	andeq	r1, pc, r0, lsl #10
 664:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 668:	2e160000 	cdpcs	0, 1, cr0, cr6, cr0, {0}
 66c:	03193f01 	tsteq	r9, #1, 30
 670:	3b0b3a0e 	blcc	2ceeb0 <startup-0x1fd31150>
 674:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
 678:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 67c:	97184006 	ldrls	r4, [r8, -r6]
 680:	13011942 	movwne	r1, #6466	; 0x1942
 684:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
 688:	03193f01 	tsteq	r9, #1, 30
 68c:	3b0b3a0e 	blcc	2ceecc <startup-0x1fd31134>
 690:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
 694:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 698:	96184006 	ldrls	r4, [r8], -r6
 69c:	13011942 	movwne	r1, #6466	; 0x1942
 6a0:	2e180000 	cdpcs	0, 1, cr0, cr8, cr0, {0}
 6a4:	03193f01 	tsteq	r9, #1, 30
 6a8:	3b0b3a0e 	blcc	2ceee8 <startup-0x1fd31118>
 6ac:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
 6b0:	11134919 	tstne	r3, r9, lsl r9
 6b4:	40061201 	andmi	r1, r6, r1, lsl #4
 6b8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 6bc:	00001301 	andeq	r1, r0, r1, lsl #6
 6c0:	3f012e19 	svccc	0x00012e19
 6c4:	3a0e0319 	bcc	381330 <startup-0x1fc7ecd0>
 6c8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 6cc:	1119270b 	tstne	r9, fp, lsl #14
 6d0:	40061201 	andmi	r1, r6, r1, lsl #4
 6d4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 6d8:	051a0000 	ldreq	r0, [sl, #-0]
 6dc:	3a0e0300 	bcc	3812e4 <startup-0x1fc7ed1c>
 6e0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 6e4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 6e8:	00000018 	andeq	r0, r0, r8, lsl r0
 6ec:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 6f0:	030b130e 	movweq	r1, #45838	; 0xb30e
 6f4:	110e1b0e 	tstne	lr, lr, lsl #22
 6f8:	10061201 	andne	r1, r6, r1, lsl #4
 6fc:	02000017 	andeq	r0, r0, #23
 700:	0b0b0024 	bleq	2c0798 <startup-0x1fd3f868>
 704:	0e030b3e 	vmoveq.16	d3[0], r0
 708:	16030000 	strne	r0, [r3], -r0
 70c:	3a0e0300 	bcc	381314 <startup-0x1fc7ecec>
 710:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 714:	0013490b 	andseq	r4, r3, fp, lsl #18
 718:	00240400 	eoreq	r0, r4, r0, lsl #8
 71c:	0b3e0b0b 	bleq	f83350 <startup-0x1f07ccb0>
 720:	00000803 	andeq	r0, r0, r3, lsl #16
 724:	49003505 	stmdbmi	r0, {r0, r2, r8, sl, ip, sp}
 728:	06000013 			; <UNDEFINED> instruction: 0x06000013
 72c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 730:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 734:	13490b39 	movtne	r0, #39737	; 0x9b39
 738:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 73c:	34070000 	strcc	r0, [r7], #-0
 740:	3a0e0300 	bcc	381348 <startup-0x1fc7ecb8>
 744:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 748:	3f13490b 	svccc	0x0013490b
 74c:	00193c19 	andseq	r3, r9, r9, lsl ip
 750:	01040800 	tsteq	r4, r0, lsl #16
 754:	0b0b0b3e 	bleq	2c3454 <startup-0x1fd3cbac>
 758:	0b3a1349 	bleq	e85484 <startup-0x1f17ab7c>
 75c:	0b39053b 	bleq	e41c50 <startup-0x1f1be3b0>
 760:	00001301 	andeq	r1, r0, r1, lsl #6
 764:	03002809 	movweq	r2, #2057	; 0x809
 768:	000b1c0e 	andeq	r1, fp, lr, lsl #24
 76c:	00280a00 	eoreq	r0, r8, r0, lsl #20
 770:	0b1c0803 	bleq	702784 <startup-0x1f8fd87c>
 774:	160b0000 	strne	r0, [fp], -r0
 778:	3a0e0300 	bcc	381380 <startup-0x1fc7ec80>
 77c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 780:	0013490b 	andseq	r4, r3, fp, lsl #18
 784:	01130c00 	tsteq	r3, r0, lsl #24
 788:	0b3a0b0b 	bleq	e833bc <startup-0x1f17cc44>
 78c:	0b39053b 	bleq	e41c80 <startup-0x1f1be380>
 790:	00001301 	andeq	r1, r0, r1, lsl #6
 794:	03000d0d 	movweq	r0, #3341	; 0xd0d
 798:	3b0b3a08 	blcc	2cefc0 <startup-0x1fd31040>
 79c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 7a0:	000b3813 	andeq	r3, fp, r3, lsl r8
 7a4:	000d0e00 	andeq	r0, sp, r0, lsl #28
 7a8:	0b3a0e03 	bleq	e83fbc <startup-0x1f17c044>
 7ac:	0b39053b 	bleq	e41ca0 <startup-0x1f1be360>
 7b0:	0b381349 	bleq	e054dc <startup-0x1f1fab24>
 7b4:	040f0000 	streq	r0, [pc], #-0	; 7bc <startup-0x1ffff844>
 7b8:	0b0b3e01 	bleq	2cffc4 <startup-0x1fd3003c>
 7bc:	3a13490b 	bcc	4d2bf0 <startup-0x1fb2d410>
 7c0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 7c4:	0013010b 	andseq	r0, r3, fp, lsl #2
 7c8:	01131000 	tsteq	r3, r0
 7cc:	0b3a0b0b 	bleq	e83400 <startup-0x1f17cc00>
 7d0:	0b390b3b 	bleq	e434c4 <startup-0x1f1bcb3c>
 7d4:	00001301 	andeq	r1, r0, r1, lsl #6
 7d8:	03000d11 	movweq	r0, #3345	; 0xd11
 7dc:	3b0b3a0e 	blcc	2cf01c <startup-0x1fd30fe4>
 7e0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 7e4:	000b3813 	andeq	r3, fp, r3, lsl r8
 7e8:	012e1200 			; <UNDEFINED> instruction: 0x012e1200
 7ec:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 7f0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 7f4:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 7f8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 7fc:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 800:	00130119 	andseq	r0, r3, r9, lsl r1
 804:	00051300 	andeq	r1, r5, r0, lsl #6
 808:	0b3a0e03 	bleq	e8401c <startup-0x1f17bfe4>
 80c:	0b39053b 	bleq	e41d00 <startup-0x1f1be300>
 810:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 814:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
 818:	03193f01 	tsteq	r9, #1, 30
 81c:	3b0b3a0e 	blcc	2cf05c <startup-0x1fd30fa4>
 820:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
 824:	11134919 	tstne	r3, r9, lsl r9
 828:	40061201 	andmi	r1, r6, r1, lsl #4
 82c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 830:	00001301 	andeq	r1, r0, r1, lsl #6
 834:	03003415 	movweq	r3, #1045	; 0x415
 838:	3b0b3a0e 	blcc	2cf078 <startup-0x1fd30f88>
 83c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 840:	00180213 	andseq	r0, r8, r3, lsl r2
 844:	012e1600 			; <UNDEFINED> instruction: 0x012e1600
 848:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 84c:	0b3b0b3a 	bleq	ec353c <startup-0x1f13cac4>
 850:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 854:	06120111 			; <UNDEFINED> instruction: 0x06120111
 858:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 85c:	00130119 	andseq	r0, r3, r9, lsl r1
 860:	00051700 	andeq	r1, r5, r0, lsl #14
 864:	0b3a0e03 	bleq	e84078 <startup-0x1f17bf88>
 868:	0b390b3b 	bleq	e4355c <startup-0x1f1bcaa4>
 86c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 870:	2e180000 	cdpcs	0, 1, cr0, cr8, cr0, {0}
 874:	03193f01 	tsteq	r9, #1, 30
 878:	3b0b3a0e 	blcc	2cf0b8 <startup-0x1fd30f48>
 87c:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 880:	11134919 	tstne	r3, r9, lsl r9
 884:	40061201 	andmi	r1, r6, r1, lsl #4
 888:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 88c:	00001301 	andeq	r1, r0, r1, lsl #6
 890:	03003419 	movweq	r3, #1049	; 0x419
 894:	3b0b3a0e 	blcc	2cf0d4 <startup-0x1fd30f2c>
 898:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 89c:	00180213 	andseq	r0, r8, r3, lsl r2
 8a0:	000f1a00 	andeq	r1, pc, r0, lsl #20
 8a4:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 8a8:	341b0000 	ldrcc	r0, [fp], #-0
 8ac:	3a080300 	bcc	2014b4 <startup-0x1fdfeb4c>
 8b0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 8b4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 8b8:	1c000018 	stcne	0, cr0, [r0], {24}
 8bc:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 8c0:	0b3a0e03 	bleq	e840d4 <startup-0x1f17bf2c>
 8c4:	0b390b3b 	bleq	e435b8 <startup-0x1f1bca48>
 8c8:	01111927 	tsteq	r1, r7, lsr #18
 8cc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 8d0:	00194297 	mulseq	r9, r7, r2
 8d4:	11010000 	mrsne	r0, (UNDEF: 1)
 8d8:	130e2501 	movwne	r2, #58625	; 0xe501
 8dc:	1b0e030b 	blne	381510 <startup-0x1fc7eaf0>
 8e0:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 8e4:	00171006 	andseq	r1, r7, r6
 8e8:	00240200 	eoreq	r0, r4, r0, lsl #4
 8ec:	0b3e0b0b 	bleq	f83520 <startup-0x1f07cae0>
 8f0:	00000e03 	andeq	r0, r0, r3, lsl #28
 8f4:	03001603 	movweq	r1, #1539	; 0x603
 8f8:	3b0b3a0e 	blcc	2cf138 <startup-0x1fd30ec8>
 8fc:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 900:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
 904:	0b0b0024 	bleq	2c099c <startup-0x1fd3f664>
 908:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 90c:	35050000 	strcc	r0, [r5, #-0]
 910:	00134900 	andseq	r4, r3, r0, lsl #18
 914:	00260600 	eoreq	r0, r6, r0, lsl #12
 918:	00001349 	andeq	r1, r0, r9, asr #6
 91c:	0b011307 	bleq	45540 <startup-0x1ffbaac0>
 920:	3b0b3a05 	blcc	2cf13c <startup-0x1fd30ec4>
 924:	010b3905 	tsteq	fp, r5, lsl #18
 928:	08000013 	stmdaeq	r0, {r0, r1, r4}
 92c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 930:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 934:	13490b39 	movtne	r0, #39737	; 0x9b39
 938:	00000b38 	andeq	r0, r0, r8, lsr fp
 93c:	03000d09 	movweq	r0, #3337	; 0xd09
 940:	3b0b3a0e 	blcc	2cf180 <startup-0x1fd30e80>
 944:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 948:	00053813 	andeq	r3, r5, r3, lsl r8
 94c:	000d0a00 	andeq	r0, sp, r0, lsl #20
 950:	0b3a0803 	bleq	e82964 <startup-0x1f17d69c>
 954:	0b39053b 	bleq	e41e48 <startup-0x1f1be1b8>
 958:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
 95c:	010b0000 	mrseq	r0, (UNDEF: 11)
 960:	01134901 	tsteq	r3, r1, lsl #18
 964:	0c000013 	stceq	0, cr0, [r0], {19}
 968:	13490021 	movtne	r0, #36897	; 0x9021
 96c:	00000b2f 	andeq	r0, r0, pc, lsr #22
 970:	4900210d 	stmdbmi	r0, {r0, r2, r3, r8, sp}
 974:	00052f13 	andeq	r2, r5, r3, lsl pc
 978:	00160e00 	andseq	r0, r6, r0, lsl #28
 97c:	0b3a0e03 	bleq	e84190 <startup-0x1f17be70>
 980:	0b39053b 	bleq	e41e74 <startup-0x1f1be18c>
 984:	00001349 	andeq	r1, r0, r9, asr #6
 988:	0b01130f 	bleq	455cc <startup-0x1ffbaa34>
 98c:	3b0b3a0b 	blcc	2cf1c0 <startup-0x1fd30e40>
 990:	010b3905 	tsteq	fp, r5, lsl #18
 994:	10000013 	andne	r0, r0, r3, lsl r0
 998:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 99c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 9a0:	13490b39 	movtne	r0, #39737	; 0x9b39
 9a4:	00000b38 	andeq	r0, r0, r8, lsr fp
 9a8:	03003411 	movweq	r3, #1041	; 0x411
 9ac:	3b0b3a0e 	blcc	2cf1ec <startup-0x1fd30e14>
 9b0:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 9b4:	3c193f13 	ldccc	15, cr3, [r9], {19}
 9b8:	12000019 	andne	r0, r0, #25
 9bc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 9c0:	0b3b0b3a 	bleq	ec36b0 <startup-0x1f13c950>
 9c4:	13490b39 	movtne	r0, #39737	; 0x9b39
 9c8:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 9cc:	04130000 	ldreq	r0, [r3], #-0
 9d0:	0b0b3e01 	bleq	2d01dc <startup-0x1fd2fe24>
 9d4:	3a13490b 	bcc	4d2e08 <startup-0x1fb2d1f8>
 9d8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 9dc:	0013010b 	andseq	r0, r3, fp, lsl #2
 9e0:	00281400 	eoreq	r1, r8, r0, lsl #8
 9e4:	0b1c0e03 	bleq	7041f8 <startup-0x1f8fbe08>
 9e8:	13150000 	tstne	r5, #0
 9ec:	3a0b0b01 	bcc	2c35f8 <startup-0x1fd3ca08>
 9f0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 9f4:	0013010b 	andseq	r0, r3, fp, lsl #2
 9f8:	000d1600 	andeq	r1, sp, r0, lsl #12
 9fc:	0b3a0e03 	bleq	e84210 <startup-0x1f17bdf0>
 a00:	0b390b3b 	bleq	e436f4 <startup-0x1f1bc90c>
 a04:	0b381349 	bleq	e05730 <startup-0x1f1fa8d0>
 a08:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
 a0c:	03193f01 	tsteq	r9, #1, 30
 a10:	3b0b3a0e 	blcc	2cf250 <startup-0x1fd30db0>
 a14:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 a18:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 a1c:	97184006 	ldrls	r4, [r8, -r6]
 a20:	13011942 	movwne	r1, #6466	; 0x1942
 a24:	05180000 	ldreq	r0, [r8, #-0]
 a28:	3a0e0300 	bcc	381630 <startup-0x1fc7e9d0>
 a2c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 a30:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 a34:	19000018 	stmdbne	r0, {r3, r4}
 a38:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 a3c:	0b3b0b3a 	bleq	ec372c <startup-0x1f13c8d4>
 a40:	13490b39 	movtne	r0, #39737	; 0x9b39
 a44:	00001802 	andeq	r1, r0, r2, lsl #16
 a48:	0b000f1a 	bleq	46b8 <startup-0x1fffb948>
 a4c:	0013490b 	andseq	r4, r3, fp, lsl #18
 a50:	012e1b00 			; <UNDEFINED> instruction: 0x012e1b00
 a54:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 a58:	0b3b0b3a 	bleq	ec3748 <startup-0x1f13c8b8>
 a5c:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 a60:	06120111 			; <UNDEFINED> instruction: 0x06120111
 a64:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 a68:	00000019 	andeq	r0, r0, r9, lsl r0
 a6c:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 a70:	030b130e 	movweq	r1, #45838	; 0xb30e
 a74:	110e1b0e 	tstne	lr, lr, lsl #22
 a78:	10061201 	andne	r1, r6, r1, lsl #4
 a7c:	02000017 	andeq	r0, r0, #23
 a80:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 a84:	0b3a0b0b 	bleq	e836b8 <startup-0x1f17c948>
 a88:	0b390b3b 	bleq	e4377c <startup-0x1f1bc884>
 a8c:	00001301 	andeq	r1, r0, r1, lsl #6
 a90:	03000d03 	movweq	r0, #3331	; 0xd03
 a94:	3b0b3a08 	blcc	2cf2bc <startup-0x1fd30d44>
 a98:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 a9c:	000b3813 	andeq	r3, fp, r3, lsl r8
 aa0:	000d0400 	andeq	r0, sp, r0, lsl #8
 aa4:	0b3a0e03 	bleq	e842b8 <startup-0x1f17bd48>
 aa8:	0b390b3b 	bleq	e4379c <startup-0x1f1bc864>
 aac:	0b381349 	bleq	e057d8 <startup-0x1f1fa828>
 ab0:	24050000 	strcs	r0, [r5], #-0
 ab4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 ab8:	000e030b 	andeq	r0, lr, fp, lsl #6
 abc:	00350600 	eorseq	r0, r5, r0, lsl #12
 ac0:	00001349 	andeq	r1, r0, r9, asr #6
 ac4:	03001607 	movweq	r1, #1543	; 0x607
 ac8:	3b0b3a0e 	blcc	2cf308 <startup-0x1fd30cf8>
 acc:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 ad0:	08000013 	stmdaeq	r0, {r0, r1, r4}
 ad4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 ad8:	0b3a0e03 	bleq	e842ec <startup-0x1f17bd14>
 adc:	0b390b3b 	bleq	e437d0 <startup-0x1f1bc830>
 ae0:	01111927 	tsteq	r1, r7, lsr #18
 ae4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 ae8:	01194296 			; <UNDEFINED> instruction: 0x01194296
 aec:	09000013 	stmdbeq	r0, {r0, r1, r4}
 af0:	08030005 	stmdaeq	r3, {r0, r2}
 af4:	0b3b0b3a 	bleq	ec37e4 <startup-0x1f13c81c>
 af8:	13490b39 	movtne	r0, #39737	; 0x9b39
 afc:	00001802 	andeq	r1, r0, r2, lsl #16
 b00:	0b000f0a 	bleq	4730 <startup-0x1fffb8d0>
 b04:	0013490b 	andseq	r4, r3, fp, lsl #18
 b08:	002e0b00 	eoreq	r0, lr, r0, lsl #22
 b0c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 b10:	0b3b0b3a 	bleq	ec3800 <startup-0x1f13c800>
 b14:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 b18:	01111349 	tsteq	r1, r9, asr #6
 b1c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 b20:	00194297 	mulseq	r9, r7, r2
 b24:	012e0c00 			; <UNDEFINED> instruction: 0x012e0c00
 b28:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 b2c:	0b3b0b3a 	bleq	ec381c <startup-0x1f13c7e4>
 b30:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 b34:	06120111 			; <UNDEFINED> instruction: 0x06120111
 b38:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 b3c:	00000019 	andeq	r0, r0, r9, lsl r0
 b40:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 b44:	030b130e 	movweq	r1, #45838	; 0xb30e
 b48:	110e1b0e 	tstne	lr, lr, lsl #22
 b4c:	10061201 	andne	r1, r6, r1, lsl #4
 b50:	02000017 	andeq	r0, r0, #23
 b54:	0b0b0024 	bleq	2c0bec <startup-0x1fd3f414>
 b58:	0e030b3e 	vmoveq.16	d3[0], r0
 b5c:	16030000 	strne	r0, [r3], -r0
 b60:	3a0e0300 	bcc	381768 <startup-0x1fc7e898>
 b64:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 b68:	0013490b 	andseq	r4, r3, fp, lsl #18
 b6c:	00240400 	eoreq	r0, r4, r0, lsl #8
 b70:	0b3e0b0b 	bleq	f837a4 <startup-0x1f07c85c>
 b74:	00000803 	andeq	r0, r0, r3, lsl #16
 b78:	49003505 	stmdbmi	r0, {r0, r2, r8, sl, ip, sp}
 b7c:	06000013 			; <UNDEFINED> instruction: 0x06000013
 b80:	13490026 	movtne	r0, #36902	; 0x9026
 b84:	01070000 	mrseq	r0, (UNDEF: 7)
 b88:	01134901 	tsteq	r3, r1, lsl #18
 b8c:	08000013 	stmdaeq	r0, {r0, r1, r4}
 b90:	13490021 	movtne	r0, #36897	; 0x9021
 b94:	00000b2f 	andeq	r0, r0, pc, lsr #22
 b98:	03003409 	movweq	r3, #1033	; 0x409
 b9c:	3b0b3a0e 	blcc	2cf3dc <startup-0x1fd30c24>
 ba0:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 ba4:	3c193f13 	ldccc	15, cr3, [r9], {19}
 ba8:	0a000019 	beq	c14 <startup-0x1ffff3ec>
 bac:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 bb0:	0b3b0b3a 	bleq	ec38a0 <startup-0x1f13c760>
 bb4:	13490b39 	movtne	r0, #39737	; 0x9b39
 bb8:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 bbc:	040b0000 	streq	r0, [fp], #-0
 bc0:	0b0b3e01 	bleq	2d03cc <startup-0x1fd2fc34>
 bc4:	3a13490b 	bcc	4d2ff8 <startup-0x1fb2d008>
 bc8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 bcc:	0013010b 	andseq	r0, r3, fp, lsl #2
 bd0:	00280c00 	eoreq	r0, r8, r0, lsl #24
 bd4:	0b1c0e03 	bleq	7043e8 <startup-0x1f8fbc18>
 bd8:	280d0000 	stmdacs	sp, {}	; <UNPREDICTABLE>
 bdc:	1c080300 	stcne	3, cr0, [r8], {-0}
 be0:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
 be4:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 be8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 bec:	13490b39 	movtne	r0, #39737	; 0x9b39
 bf0:	130f0000 	movwne	r0, #61440	; 0xf000
 bf4:	3a0b0b01 	bcc	2c3800 <startup-0x1fd3c800>
 bf8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 bfc:	0013010b 	andseq	r0, r3, fp, lsl #2
 c00:	000d1000 	andeq	r1, sp, r0
 c04:	0b3a0803 	bleq	e82c18 <startup-0x1f17d3e8>
 c08:	0b39053b 	bleq	e420fc <startup-0x1f1bdf04>
 c0c:	0b381349 	bleq	e05938 <startup-0x1f1fa6c8>
 c10:	0d110000 	ldceq	0, cr0, [r1, #-0]
 c14:	3a0e0300 	bcc	38181c <startup-0x1fc7e7e4>
 c18:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 c1c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 c20:	1200000b 	andne	r0, r0, #11
 c24:	0b0b0113 	bleq	2c1078 <startup-0x1fd3ef88>
 c28:	0b3b0b3a 	bleq	ec3918 <startup-0x1f13c6e8>
 c2c:	13010b39 	movwne	r0, #6969	; 0x1b39
 c30:	0d130000 	ldceq	0, cr0, [r3, #-0]
 c34:	3a0e0300 	bcc	38183c <startup-0x1fc7e7c4>
 c38:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 c3c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 c40:	1400000b 	strne	r0, [r0], #-11
 c44:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 c48:	0b3b0b3a 	bleq	ec3938 <startup-0x1f13c6c8>
 c4c:	13490b39 	movtne	r0, #39737	; 0x9b39
 c50:	00001802 	andeq	r1, r0, r2, lsl #16
 c54:	3f012e15 	svccc	0x00012e15
 c58:	3a0e0319 	bcc	3818c4 <startup-0x1fc7e73c>
 c5c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 c60:	1119270b 	tstne	r9, fp, lsl #14
 c64:	40061201 	andmi	r1, r6, r1, lsl #4
 c68:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 c6c:	00001301 	andeq	r1, r0, r1, lsl #6
 c70:	03000516 	movweq	r0, #1302	; 0x516
 c74:	3b0b3a0e 	blcc	2cf4b4 <startup-0x1fd30b4c>
 c78:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 c7c:	00180213 	andseq	r0, r8, r3, lsl r2
 c80:	012e1700 			; <UNDEFINED> instruction: 0x012e1700
 c84:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 c88:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 c8c:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 c90:	01111349 	tsteq	r1, r9, asr #6
 c94:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 c98:	01194297 			; <UNDEFINED> instruction: 0x01194297
 c9c:	18000013 	stmdane	r0, {r0, r1, r4}
 ca0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 ca4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 ca8:	13490b39 	movtne	r0, #39737	; 0x9b39
 cac:	00001802 	andeq	r1, r0, r2, lsl #16
 cb0:	3f002e19 	svccc	0x00002e19
 cb4:	3a0e0319 	bcc	381920 <startup-0x1fc7e6e0>
 cb8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 cbc:	1119270b 	tstne	r9, fp, lsl #14
 cc0:	40061201 	andmi	r1, r6, r1, lsl #4
 cc4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 cc8:	341a0000 	ldrcc	r0, [sl], #-0
 ccc:	3a080300 	bcc	2018d4 <startup-0x1fdfe72c>
 cd0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 cd4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 cd8:	1b000018 	blne	d40 <startup-0x1ffff2c0>
 cdc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 ce0:	0b3a0e03 	bleq	e844f4 <startup-0x1f17bb0c>
 ce4:	0b39053b 	bleq	e421d8 <startup-0x1f1bde28>
 ce8:	01111927 	tsteq	r1, r7, lsr #18
 cec:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 cf0:	01194296 			; <UNDEFINED> instruction: 0x01194296
 cf4:	1c000013 	stcne	0, cr0, [r0], {19}
 cf8:	0b0b000f 	bleq	2c0d3c <startup-0x1fd3f2c4>
 cfc:	00001349 	andeq	r1, r0, r9, asr #6
 d00:	3f002e1d 	svccc	0x00002e1d
 d04:	3a0e0319 	bcc	381970 <startup-0x1fc7e690>
 d08:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 d0c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 d10:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 d14:	97184006 	ldrls	r4, [r8, -r6]
 d18:	00001942 	andeq	r1, r0, r2, asr #18
 d1c:	3f012e1e 	svccc	0x00012e1e
 d20:	3a0e0319 	bcc	38198c <startup-0x1fc7e674>
 d24:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 d28:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 d2c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 d30:	96184006 	ldrls	r4, [r8], -r6
 d34:	13011942 	movwne	r1, #6466	; 0x1942
 d38:	2e1f0000 	cdpcs	0, 1, cr0, cr15, cr0, {0}
 d3c:	03193f00 	tsteq	r9, #0, 30
 d40:	3b0b3a0e 	blcc	2cf580 <startup-0x1fd30a80>
 d44:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 d48:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 d4c:	97184006 	ldrls	r4, [r8, -r6]
 d50:	00001942 	andeq	r1, r0, r2, asr #18
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	000003d8 	ldrdeq	r0, [r0], -r8
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
  2c:	099a0002 	ldmibeq	sl, {r1}
  30:	00040000 	andeq	r0, r4, r0
  34:	00000000 	andeq	r0, r0, r0
  38:	200003e8 	andcs	r0, r0, r8, ror #7
  3c:	0000050a 	andeq	r0, r0, sl, lsl #10
	...
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	10190002 	andsne	r0, r9, r2
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	200008f4 	strdcs	r0, [r0], -r4
  5c:	00000168 	andeq	r0, r0, r8, ror #2
	...
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	12dd0002 	sbcsne	r0, sp, #2
  70:	00040000 	andeq	r0, r4, r0
  74:	00000000 	andeq	r0, r0, r0
  78:	20000a5c 	andcs	r0, r0, ip, asr sl
  7c:	000021d8 	ldrdeq	r2, [r0], -r8
	...
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	31030002 	tstcc	r3, r2
  90:	00040000 	andeq	r0, r4, r0
  94:	00000000 	andeq	r0, r0, r0
  98:	20002c34 	andcs	r2, r0, r4, lsr ip
  9c:	00000208 	andeq	r0, r0, r8, lsl #4
	...
  a8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ac:	34860002 	strcc	r0, [r6], #2
  b0:	00040000 	andeq	r0, r4, r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	20002e3c 	andcs	r2, r0, ip, lsr lr
  bc:	000001c0 	andeq	r0, r0, r0, asr #3
	...
  c8:	0000001c 	andeq	r0, r0, ip, lsl r0
  cc:	3a180002 	bcc	6000dc <startup-0x1f9fff24>
  d0:	00040000 	andeq	r0, r4, r0
  d4:	00000000 	andeq	r0, r0, r0
  d8:	20002ffc 	strdcs	r2, [r0], -ip
  dc:	000000ba 	strheq	r0, [r0], -sl
	...
  e8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ec:	3b880002 	blcc	fe2000fc <doors+0xde1fc1f4>
  f0:	00040000 	andeq	r0, r4, r0
  f4:	00000000 	andeq	r0, r0, r0
  f8:	200030b8 	strhcs	r3, [r0], -r8
  fc:	00000cfc 	strdeq	r0, [r0], -ip
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	200003e8 	andcs	r0, r0, r8, ror #7
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	000003a3 	andeq	r0, r0, r3, lsr #7
       4:	01f40003 	mvnseq	r0, r3
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
      18:	43010000 	movwmi	r0, #4096	; 0x1000
      1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
      20:	2f737265 	svccs	0x00737265
      24:	6e696d61 	cdpvs	13, 6, cr6, cr9, cr1, {3}
      28:	65442f72 	strbvs	r2, [r4, #-3954]	; 0xfffff08e
      2c:	6f746b73 	svcvs	0x00746b73
      30:	61642f70 	smcvs	17136	; 0x42f0
      34:	72706174 	rsbsvc	r6, r0, #116, 2
      38:	6b656a6f 	blvs	195a9fc <startup-0x1e6a5604>
      3c:	6f642f74 	svcvs	0x00642f74
      40:	6300726f 	movwvs	r7, #623	; 0x26f
      44:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
      48:	70706165 	rsbsvc	r6, r0, r5, ror #2
      4c:	646f635c 	strbtvs	r6, [pc], #-860	; 54 <startup-0x1fffffac>
      50:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
      54:	6f745c65 	svcvs	0x00745c65
      58:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
      5c:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
      60:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
      64:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
      68:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
      6c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
      70:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
      74:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
      78:	616d5c65 	cmnvs	sp, r5, ror #24
      7c:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
      80:	3a630065 	bcc	18c021c <startup-0x1e73fde4>
      84:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
      88:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
      8c:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
      90:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
      94:	6f6f745c 	svcvs	0x006f745c
      98:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
      9c:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
      a0:	615c6d72 	cmpvs	ip, r2, ror sp
      a4:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
      a8:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
      ac:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
      b0:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
      b4:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
      b8:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
      bc:	2f3a4300 	svccs	0x003a4300
      c0:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
      c4:	6d612f73 	stclvs	15, cr2, [r1, #-460]!	; 0xfffffe34
      c8:	2f726e69 	svccs	0x00726e69
      cc:	6b736544 	blvs	1cd95e4 <startup-0x1e326a1c>
      d0:	2f706f74 	svccs	0x00706f74
      d4:	61746164 	cmnvs	r4, r4, ror #2
      d8:	6a6f7270 	bvs	1bdcaa0 <startup-0x1e423560>
      dc:	2f746b65 	svccs	0x00746b65
      e0:	334d5453 	movtcc	r5, #54355	; 0xd453
      e4:	5f344632 	svcpl	0x00344632
      e8:	2f62696c 	svccs	0x0062696c
      ec:	334d5453 	movtcc	r5, #54355	; 0xd453
      f0:	5f344632 	svcpl	0x00344632
      f4:	2f62696c 	svccs	0x0062696c
      f8:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
      fc:	6e492f53 	mcrvs	15, 2, r2, cr9, cr3, {2}
     100:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     104:	3a430065 	bcc	10c02a0 <startup-0x1ef3fd60>
     108:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
     10c:	612f7372 			; <UNDEFINED> instruction: 0x612f7372
     110:	726e696d 	rsbvc	r6, lr, #1785856	; 0x1b4000
     114:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
     118:	706f746b 	rsbvc	r7, pc, fp, ror #8
     11c:	7461642f 	strbtvc	r6, [r1], #-1071	; 0xfffffbd1
     120:	6f727061 	svcvs	0x00727061
     124:	746b656a 	strbtvc	r6, [fp], #-1386	; 0xfffffa96
     128:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     12c:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
     130:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     134:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     138:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
     13c:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     140:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     144:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
     148:	535f7878 	cmppl	pc, #120, 16	; 0x780000
     14c:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0xfffffb8c
     150:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     154:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
     158:	2f726576 	svccs	0x00726576
     15c:	00636e69 	rsbeq	r6, r3, r9, ror #28
     160:	61747300 	cmnvs	r4, r0, lsl #6
     164:	70757472 	rsbsvc	r7, r5, r2, ror r4
     168:	0100632e 	tsteq	r0, lr, lsr #6
     16c:	645f0000 	ldrbvs	r0, [pc], #-0	; 174 <startup-0x1ffffe8c>
     170:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
     174:	745f746c 	ldrbvc	r7, [pc], #-1132	; 17c <startup-0x1ffffe84>
     178:	73657079 	cmnvc	r5, #121	; 0x79
     17c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     180:	735f0000 	cmpvc	pc, #0
     184:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
     188:	00682e74 	rsbeq	r2, r8, r4, ror lr
     18c:	63000003 	movwvs	r0, #3
     190:	5f65726f 	svcpl	0x0065726f
     194:	2e346d63 	cdpcs	13, 3, cr6, cr4, cr3, {3}
     198:	00040068 	andeq	r0, r4, r8, rrx
     19c:	73797300 	cmnvc	r9, #0, 6
     1a0:	5f6d6574 	svcpl	0x006d6574
     1a4:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     1a8:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     1ac:	00682e78 	rsbeq	r2, r8, r8, ror lr
     1b0:	73000005 	movwvc	r0, #5
     1b4:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     1b8:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
     1bc:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
     1c0:	74730000 	ldrbtvc	r0, [r3], #-0
     1c4:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     1c8:	5f787834 	svcpl	0x00787834
     1cc:	6f697067 	svcvs	0x00697067
     1d0:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
     1d4:	74730000 	ldrbtvc	r0, [r3], #-0
     1d8:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     1dc:	5f787834 	svcpl	0x00787834
     1e0:	2e6d6974 			; <UNDEFINED> instruction: 0x2e6d6974
     1e4:	00050068 	andeq	r0, r5, r8, rrx
     1e8:	73696d00 	cmnvc	r9, #0, 26
     1ec:	00682e63 	rsbeq	r2, r8, r3, ror #28
     1f0:	64000005 	strvs	r0, [r0], #-5
     1f4:	2e726f6f 	cdpcs	15, 7, cr6, cr2, cr15, {3}
     1f8:	00010068 	andeq	r0, r1, r8, rrx
     1fc:	01050000 	mrseq	r0, (UNDEF: 5)
     200:	00020500 	andeq	r0, r2, r0, lsl #10
     204:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
     208:	2113010d 	tstcs	r3, sp, lsl #2
     20c:	02212f21 	eoreq	r2, r1, #33, 30	; 0x84
     210:	01010003 	tsteq	r1, r3
     214:	05001405 	streq	r1, [r0, #-1029]	; 0xfffffbfb
     218:	00001002 	andeq	r1, r0, r2
     21c:	01180320 	tsteq	r8, r0, lsr #6
     220:	053e0205 	ldreq	r0, [lr, #-517]!	; 0xfffffdfb
     224:	17054c16 	smladne	r5, r6, ip, r4
     228:	02053d3d 	andeq	r3, r5, #3904	; 0xf40
     22c:	6816053d 	ldmdavs	r6, {r0, r2, r3, r4, r5, r8, sl}
     230:	3d3d1705 	ldccc	7, cr1, [sp, #-20]!	; 0xffffffec
     234:	053d0205 	ldreq	r0, [sp, #-517]!	; 0xfffffdfb
     238:	18056701 	stmdane	r5, {r0, r8, r9, sl, sp, lr}
     23c:	3d0b0576 	cfstr32cc	mvfx0, [fp, #-472]	; 0xfffffe28
     240:	052e0205 	streq	r0, [lr, #-517]!	; 0xfffffdfb
     244:	04020005 	streq	r0, [r2], #-5
     248:	08052203 	stmdaeq	r5, {r0, r1, r9, sp}
     24c:	03040200 	movweq	r0, #16896	; 0x4200
     250:	000c052d 	andeq	r0, ip, sp, lsr #10
     254:	30030402 	andcc	r0, r3, r2, lsl #8
     258:	02000605 	andeq	r0, r0, #5242880	; 0x500000
     25c:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
     260:	04020008 	streq	r0, [r2], #-8
     264:	0d053a03 	vstreq	s6, [r5, #-12]
     268:	03040200 	movweq	r0, #16896	; 0x4200
     26c:	0012053f 	andseq	r0, r2, pc, lsr r5
     270:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
     274:	02000605 	andeq	r0, r0, #5242880	; 0x500000
     278:	05200304 	streq	r0, [r0, #-772]!	; 0xfffffcfc
     27c:	04020008 	streq	r0, [r2], #-8
     280:	0d053903 	vstreq.16	s6, [r5, #-6]	; <UNPREDICTABLE>
     284:	03040200 	movweq	r0, #16896	; 0x4200
     288:	00120540 	andseq	r0, r2, r0, asr #10
     28c:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
     290:	02000605 	andeq	r0, r0, #5242880	; 0x500000
     294:	05200304 	streq	r0, [r0, #-772]!	; 0xfffffcfc
     298:	04020008 	streq	r0, [r2], #-8
     29c:	0d053803 	stceq	8, cr3, [r5, #-12]
     2a0:	03040200 	movweq	r0, #16896	; 0x4200
     2a4:	00120541 	andseq	r0, r2, r1, asr #10
     2a8:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
     2ac:	02000605 	andeq	r0, r0, #5242880	; 0x500000
     2b0:	05200304 	streq	r0, [r0, #-772]!	; 0xfffffcfc
     2b4:	04020008 	streq	r0, [r2], #-8
     2b8:	0c053703 	stceq	7, cr3, [r5], {3}
     2bc:	03040200 	movweq	r0, #16896	; 0x4200
     2c0:	05e40b03 	strbeq	r0, [r4, #2819]!	; 0xb03
     2c4:	04020024 	streq	r0, [r2], #-36	; 0xffffffdc
     2c8:	ba740303 	blt	1d00edc <startup-0x1e2ff124>
     2cc:	02000205 	andeq	r0, r0, #1342177280	; 0x50000000
     2d0:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
     2d4:	3c0e0301 	stccc	3, cr0, [lr], {1}
     2d8:	05761805 	ldrbeq	r1, [r6, #-2053]!	; 0xfffff7fb
     2dc:	02053d0b 	andeq	r3, r5, #704	; 0x2c0
     2e0:	2109052e 	tstcs	r9, lr, lsr #10
     2e4:	05e40605 	strbeq	r0, [r4, #1541]!	; 0x605
     2e8:	04052120 	streq	r2, [r5], #-288	; 0xfffffee0
     2ec:	e620059f 			; <UNDEFINED> instruction: 0xe620059f
     2f0:	059f2205 	ldreq	r2, [pc, #517]	; 4fd <startup-0x1ffffb03>
     2f4:	04059f13 	streq	r9, [r5], #-3859	; 0xfffff0ed
     2f8:	2505d79f 	strcs	sp, [r5, #-1951]	; 0xfffff861
     2fc:	02040200 	andeq	r0, r4, #0, 4
     300:	05d67703 	ldrbeq	r7, [r6, #1795]	; 0x703
     304:	04020002 	streq	r0, [r2], #-2
     308:	01053c01 	tsteq	r5, r1, lsl #24
     30c:	053c0d03 	ldreq	r0, [ip, #-3331]!	; 0xfffff2fd
     310:	9010031c 	andsls	r0, r0, ip, lsl r3
     314:	053d0205 	ldreq	r0, [sp, #-517]!	; 0xfffffdfb
     318:	02054b0b 	andeq	r4, r5, #11264	; 0x2c00
     31c:	2110052e 	tstcs	r0, lr, lsr #10
     320:	05902e05 	ldreq	r2, [r0, #3589]	; 0xe05
     324:	06059008 	streq	r9, [r5], -r8
     328:	2f0c052e 	svccs	0x000c052e
     32c:	05901205 	ldreq	r1, [r0, #517]	; 0x205
     330:	10059f04 	andne	r9, r5, r4, lsl #30
     334:	9026054b 	eorls	r0, r6, fp, asr #10
     338:	05901c05 	ldreq	r1, [r0, #3077]	; 0xc05
     33c:	04052007 	streq	r2, [r5], #-7
     340:	5916052f 	ldmdbpl	r6, {r0, r1, r2, r3, r5, r8, sl}
     344:	05902805 	ldreq	r2, [r0, #2053]	; 0x805
     348:	0405900d 	streq	r9, [r5], #-13
     34c:	d722052f 	strle	r0, [r2, -pc, lsr #10]!
     350:	02002505 	andeq	r2, r0, #20971520	; 0x1400000
     354:	78030204 	stmdavc	r3, {r2, r9}
     358:	0002059e 	muleq	r2, lr, r5
     35c:	3c010402 	cfstrscc	mvf0, [r1], {2}
     360:	053c0e03 	ldreq	r0, [ip, #-3587]!	; 0xfffff1fd
     364:	15056701 	strne	r6, [r5, #-1793]	; 0xfffff8ff
     368:	3d0205e6 	cfstr32cc	mvfx0, [r2, #-920]	; 0xfffffc68
     36c:	2018054b 	andscs	r0, r8, fp, asr #10
     370:	05301a05 	ldreq	r1, [r0, #-2565]!	; 0xfffff5fb
     374:	1e053d17 	mcrne	13, 0, r3, cr5, cr7, {0}
     378:	3d1c053d 	cfldr32cc	mvfx0, [ip, #-244]	; 0xffffff0c
     37c:	753d0205 	ldrvc	r0, [sp, #-517]!	; 0xfffffdfb
     380:	1c057667 	stcne	6, cr7, [r5], {103}	; 0x67
     384:	3d2e055a 	cfstr32cc	mvfx0, [lr, #-360]!	; 0xfffffe98
     388:	053d2705 	ldreq	r2, [sp, #-1797]!	; 0xfffff8fb
     38c:	02053d1f 	andeq	r3, r5, #1984	; 0x7c0
     390:	4d01053d 	cfstr32mi	mvfx0, [r1, #-244]	; 0xffffff0c
     394:	2f0205ca 	svccs	0x000205ca
     398:	052f2f2f 	streq	r2, [pc, #-3887]!	; fffff471 <doors+0xdfffb569>
     39c:	04020003 	streq	r0, [r2], #-3
     3a0:	06024d01 	streq	r4, [r2], -r1, lsl #26
     3a4:	64010100 	strvs	r0, [r1], #-256	; 0xffffff00
     3a8:	03000004 	movweq	r0, #4
     3ac:	00020600 	andeq	r0, r2, r0, lsl #12
     3b0:	fb010200 	blx	40bba <startup-0x1ffbf446>
     3b4:	01000d0e 	tsteq	r0, lr, lsl #26
     3b8:	00010101 	andeq	r0, r1, r1, lsl #2
     3bc:	00010000 	andeq	r0, r1, r0
     3c0:	3a430100 	bcc	10c07c8 <startup-0x1ef3f838>
     3c4:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
     3c8:	612f7372 			; <UNDEFINED> instruction: 0x612f7372
     3cc:	726e696d 	rsbvc	r6, lr, #1785856	; 0x1b4000
     3d0:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
     3d4:	706f746b 	rsbvc	r7, pc, fp, ror #8
     3d8:	7461642f 	strbtvc	r6, [r1], #-1071	; 0xfffffbd1
     3dc:	6f727061 	svcvs	0x00727061
     3e0:	746b656a 	strbtvc	r6, [fp], #-1386	; 0xfffffa96
     3e4:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     3e8:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
     3ec:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     3f0:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     3f4:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
     3f8:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     3fc:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     400:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
     404:	535f7878 	cmppl	pc, #120, 16	; 0x780000
     408:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0xfffffb8c
     40c:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     410:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
     414:	2f726576 	svccs	0x00726576
     418:	00637273 	rsbeq	r7, r3, r3, ror r2
     41c:	635c3a63 	cmpvs	ip, #405504	; 0x63000
     420:	70616573 	rsbvc	r6, r1, r3, ror r5
     424:	6f635c70 	svcvs	0x00635c70
     428:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
     42c:	745c6574 	ldrbvc	r6, [ip], #-1396	; 0xfffffa8c
     430:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
     434:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
     438:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
     43c:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
     440:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
     444:	61652d65 	cmnvs	r5, r5, ror #26
     448:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
     44c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
     450:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
     454:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
     458:	6300656e 	movwvs	r6, #1390	; 0x56e
     45c:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
     460:	70706165 	rsbsvc	r6, r0, r5, ror #2
     464:	646f635c 	strbtvs	r6, [pc], #-860	; 46c <startup-0x1ffffb94>
     468:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
     46c:	6f745c65 	svcvs	0x00745c65
     470:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
     474:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
     478:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
     47c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     480:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
     484:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
     488:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
     48c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     490:	79735c65 	ldmdbvc	r3!, {r0, r2, r5, r6, sl, fp, ip, lr}^
     494:	3a430073 	bcc	10c0668 <startup-0x1ef3f998>
     498:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
     49c:	612f7372 			; <UNDEFINED> instruction: 0x612f7372
     4a0:	726e696d 	rsbvc	r6, lr, #1785856	; 0x1b4000
     4a4:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
     4a8:	706f746b 	rsbvc	r7, pc, fp, ror #8
     4ac:	7461642f 	strbtvc	r6, [r1], #-1071	; 0xfffffbd1
     4b0:	6f727061 	svcvs	0x00727061
     4b4:	746b656a 	strbtvc	r6, [fp], #-1386	; 0xfffffa96
     4b8:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     4bc:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
     4c0:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     4c4:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     4c8:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
     4cc:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     4d0:	534d432f 	movtpl	r4, #54063	; 0xd32f
     4d4:	492f5349 	stmdbmi	pc!, {r0, r3, r6, r8, r9, ip, lr}	; <UNPREDICTABLE>
     4d8:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
     4dc:	43006564 	movwmi	r6, #1380	; 0x564
     4e0:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
     4e4:	2f737265 	svccs	0x00737265
     4e8:	6e696d61 	cdpvs	13, 6, cr6, cr9, cr1, {3}
     4ec:	65442f72 	strbvs	r2, [r4, #-3954]	; 0xfffff08e
     4f0:	6f746b73 	svcvs	0x00746b73
     4f4:	61642f70 	smcvs	17136	; 0x42f0
     4f8:	72706174 	rsbsvc	r6, r0, #116, 2
     4fc:	6b656a6f 	blvs	195aec0 <startup-0x1e6a5140>
     500:	54532f74 	ldrbpl	r2, [r3], #-3956	; 0xfffff08c
     504:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     508:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
     50c:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
     510:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     514:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
     518:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
     51c:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     520:	5f787834 	svcpl	0x00787834
     524:	50647453 	rsbpl	r7, r4, r3, asr r4
     528:	70697265 	rsbvc	r7, r9, r5, ror #4
     52c:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
     530:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
     534:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     538:	74730000 	ldrbtvc	r0, [r3], #-0
     53c:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     540:	5f787834 	svcpl	0x00787834
     544:	6f697067 	svcvs	0x00697067
     548:	0100632e 	tsteq	r0, lr, lsr #6
     54c:	645f0000 	ldrbvs	r0, [pc], #-0	; 554 <startup-0x1ffffaac>
     550:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
     554:	745f746c 	ldrbvc	r7, [pc], #-1132	; 55c <startup-0x1ffffaa4>
     558:	73657079 	cmnvc	r5, #121	; 0x79
     55c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     560:	735f0000 	cmpvc	pc, #0
     564:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
     568:	00682e74 	rsbeq	r2, r8, r4, ror lr
     56c:	63000003 	movwvs	r0, #3
     570:	5f65726f 	svcpl	0x0065726f
     574:	2e346d63 	cdpcs	13, 3, cr6, cr4, cr3, {3}
     578:	00040068 	andeq	r0, r4, r8, rrx
     57c:	73797300 	cmnvc	r9, #0, 6
     580:	5f6d6574 	svcpl	0x006d6574
     584:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     588:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     58c:	00682e78 	rsbeq	r2, r8, r8, ror lr
     590:	73000005 	movwvc	r0, #5
     594:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     598:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
     59c:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
     5a0:	74730000 	ldrbtvc	r0, [r3], #-0
     5a4:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     5a8:	5f787834 	svcpl	0x00787834
     5ac:	6f697067 	svcvs	0x00697067
     5b0:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
     5b4:	05000000 	streq	r0, [r0, #-0]
     5b8:	02050001 	andeq	r0, r5, #1
     5bc:	200003e8 	andcs	r0, r0, r8, ror #7
     5c0:	0100ff03 	tsteq	r0, r3, lsl #30	; <UNPREDICTABLE>
     5c4:	054e0605 	strbeq	r0, [lr, #-1541]	; 0xfffff9fb
     5c8:	054b4c05 	strbeq	r4, [fp, #-3077]	; 0xfffff3fb
     5cc:	4a380301 	bmi	e011d8 <startup-0x1f1fee28>
     5d0:	4a030b05 	bmi	c31ec <startup-0x1ff3ce14>
     5d4:	4c050520 	cfstr32mi	mvfx0, [r5], {32}
     5d8:	0301054b 	movweq	r0, #5451	; 0x154b
     5dc:	0b054a33 	bleq	152eb0 <startup-0x1fead150>
     5e0:	05204f03 	streq	r4, [r0, #-3843]!	; 0xfffff0fd
     5e4:	054b4c05 	strbeq	r4, [fp, #-3077]	; 0xfffff3fb
     5e8:	4a2e0301 	bmi	b811f4 <startup-0x1f47ee0c>
     5ec:	54030b05 	strpl	r0, [r3], #-2821	; 0xfffff4fb
     5f0:	4c050520 	cfstr32mi	mvfx0, [r5], {32}
     5f4:	0301054b 	movweq	r0, #5451	; 0x154b
     5f8:	0b054a29 	bleq	152ea4 <startup-0x1fead15c>
     5fc:	05205903 	streq	r5, [r0, #-2307]!	; 0xfffff6fd
     600:	054b4c05 	strbeq	r4, [fp, #-3077]	; 0xfffff3fb
     604:	4a240301 	bmi	901210 <startup-0x1f6fedf0>
     608:	5e030b05 	vmlapl.f64	d0, d3, d5
     60c:	4c050520 	cfstr32mi	mvfx0, [r5], {32}
     610:	0301054b 	movweq	r0, #5451	; 0x154b
     614:	0b054a1f 	bleq	152e98 <startup-0x1fead168>
     618:	05206303 	streq	r6, [r0, #-771]!	; 0xfffffcfd
     61c:	054b4c05 	strbeq	r4, [fp, #-3077]	; 0xfffff3fb
     620:	4a1a0301 	bmi	68122c <startup-0x1f97edd4>
     624:	68030b05 	stmdavs	r3, {r0, r2, r8, r9, fp}
     628:	4c050520 	cfstr32mi	mvfx0, [r5], {32}
     62c:	0301054b 	movweq	r0, #5451	; 0x154b
     630:	0b054a15 	bleq	152e8c <startup-0x1fead174>
     634:	05206e03 	streq	r6, [r0, #-3587]!	; 0xfffff1fd
     638:	05674c05 	strbeq	r4, [r7, #-3077]!	; 0xfffff3fb
     63c:	660f0301 	strvs	r0, [pc], -r1, lsl #6
     640:	73030b05 	movwvc	r0, #15109	; 0x3b05
     644:	4c050520 	cfstr32mi	mvfx0, [r5], {32}
     648:	03010567 	movweq	r0, #5479	; 0x1567
     64c:	0805660a 	stmdaeq	r5, {r1, r3, r9, sl, sp, lr}
     650:	05207a03 	streq	r7, [r0, #-2563]!	; 0xfffff5fd
     654:	05674c07 	strbeq	r4, [r7, #-3079]!	; 0xfffff3f9
     658:	0c036901 			; <UNDEFINED> instruction: 0x0c036901
     65c:	0c059008 	stceq	0, cr9, [r5], {8}
     660:	2e1b0559 	mrccs	5, 0, r0, cr11, cr9, {2}
     664:	052e2805 	streq	r2, [lr, #-2053]!	; 0xfffff7fb
     668:	2e0a030f 	cdpcs	3, 0, cr0, cr10, cr15, {0}
     66c:	052e0305 	streq	r0, [lr, #-773]!	; 0xfffffcfb
     670:	22052209 	andcs	r2, r5, #-1879048192	; 0x90000000
     674:	2e10055a 	mrccs	5, 0, r0, cr0, cr10, {2}
     678:	053e0805 	ldreq	r0, [lr, #-2053]!	; 0xfffff7fb
     67c:	37054c15 	smladcc	r5, r5, ip, r4
     680:	2e2c052e 	cfsh64cs	mvdx0, mvdx12, #30
     684:	053c1805 	ldreq	r1, [ip, #-2053]!	; 0xfffff7fb
     688:	14052015 	strne	r2, [r5], #-21	; 0xffffffeb
     68c:	2e32053d 	mrccs	5, 1, r0, cr2, cr13, {1}
     690:	052e1905 	streq	r1, [lr, #-2309]!	; 0xfffff6fb
     694:	3f05204a 	svccc	0x0005204a
     698:	2e14052e 	cfmul64cs	mvdx0, mvdx4, mvdx14
     69c:	053e1b05 	ldreq	r1, [lr, #-2821]!	; 0xfffff4fb
     6a0:	4c052e0a 	stcmi	14, cr2, [r5], {10}
     6a4:	01040200 	mrseq	r0, R12_usr
     6a8:	0039052e 	eorseq	r0, r9, lr, lsr #10
     6ac:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
     6b0:	05341805 	ldreq	r1, [r4, #-2053]!	; 0xfffff7fb
     6b4:	34052e3f 	strcc	r2, [r5], #-3647	; 0xfffff1c1
     6b8:	3c1b052e 	cfldr32cc	mvfx0, [fp], {46}	; 0x2e
     6bc:	3d201805 	stccc	8, cr1, [r0, #-20]!	; 0xffffffec
     6c0:	052e3605 	streq	r3, [lr, #-1541]!	; 0xfffff9fb
     6c4:	4f052e1c 	svcmi	0x00052e1c
     6c8:	2e440520 	cdpcs	5, 4, cr0, cr4, cr0, {1}
     6cc:	422e1805 	eormi	r1, lr, #327680	; 0x50000
     6d0:	052e3405 	streq	r3, [lr, #-1029]!	; 0xfffffbfb
     6d4:	1b053c30 	blne	14f79c <startup-0x1feb0864>
     6d8:	2018052e 	andscs	r0, r8, lr, lsr #10
     6dc:	053d1705 	ldreq	r1, [sp, #-1797]!	; 0xfffff8fb
     6e0:	26052e3f 			; <UNDEFINED> instruction: 0x26052e3f
     6e4:	2051052e 	subscs	r0, r1, lr, lsr #10
     6e8:	052e4d05 	streq	r4, [lr, #-3333]!	; 0xfffff2fb
     6ec:	17052e1a 	smladne	r5, sl, lr, r2
     6f0:	40140520 	andsmi	r0, r4, r0, lsr #10
     6f4:	052e2f05 	streq	r2, [lr, #-3845]!	; 0xfffff0fb
     6f8:	2b052e40 	blcs	14c000 <startup-0x1feb4000>
     6fc:	3c170520 	cfldr32cc	mvfx0, [r7], {32}
     700:	3d201405 	cfstrscc	mvf1, [r0, #-20]!	; 0xffffffec
     704:	052e3205 	streq	r3, [lr, #-517]!	; 0xfffffdfb
     708:	4a052e19 	bmi	14bf74 <startup-0x1feb408c>
     70c:	2e3f0520 	cfabs64cs	mvdx0, mvdx15
     710:	052e1405 	streq	r1, [lr, #-1029]!	; 0xfffffbfb
     714:	0402002c 	streq	r0, [r2], #-44	; 0xffffffd4
     718:	3c620302 	stclcc	3, cr0, [r2], #-8
     71c:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
     720:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
     724:	3c210301 	stccc	3, cr0, [r1], #-4
     728:	4c1e0560 	cfldr32mi	mvfx0, [lr], {96}	; 0x60
     72c:	3d1f053d 	cfldr32cc	mvfx0, [pc, #-244]	; 640 <startup-0x1ffff9c0>
     730:	3d1e053d 	cfldr32cc	mvfx0, [lr, #-244]	; 0xffffff0c
     734:	033d0105 	teqeq	sp, #1073741825	; 0x40000001
     738:	11056610 	tstne	r5, r0, lsl r6
     73c:	42070575 	andmi	r0, r7, #490733568	; 0x1d400000
     740:	3e5a0f05 	cdpcc	15, 5, cr0, cr10, cr5, {0}
     744:	3e0e054c 	cfsh32cc	mvfx0, mvfx14, #44
     748:	052e0705 	streq	r0, [lr, #-1797]!	; 0xfffff8fb
     74c:	0705220e 	streq	r2, [r5, -lr, lsl #4]
     750:	2101052e 	tstcs	r1, lr, lsr #10
     754:	054a1c03 	strbeq	r1, [sl, #-3075]	; 0xfffff3fd
     758:	0d05750b 	cfstr32eq	mvfx7, [r5, #-44]	; 0xffffffd4
     75c:	2e130550 	mrccs	5, 0, r0, cr3, cr0, {2}
     760:	053c0605 	ldreq	r0, [ip, #-1541]!	; 0xfffff9fb
     764:	054e220f 	strbeq	r2, [lr, #-527]	; 0xfffffdf1
     768:	01054c0a 	tsteq	r5, sl, lsl #24
     76c:	4a0a033d 	bmi	281468 <startup-0x1fd7eb98>
     770:	054e1a05 	strbeq	r1, [lr, #-2565]	; 0xfffff5fb
     774:	01052e0b 	tsteq	r5, fp, lsl #28
     778:	4a0c0321 	bmi	301404 <startup-0x1fcfebfc>
     77c:	05750b05 	ldrbeq	r0, [r5, #-2821]!	; 0xfffff4fb
     780:	1505500e 	strne	r5, [r5, #-14]
     784:	3c06052e 	cfstr32cc	mvfx0, [r6], {46}	; 0x2e
     788:	4e220f05 	cdpmi	15, 2, cr0, cr2, cr5, {0}
     78c:	054c0a05 	strbeq	r0, [ip, #-2565]	; 0xfffff5fb
     790:	0a033d01 	beq	cfb9c <startup-0x1ff30464>
     794:	4e1a054a 	cfmac32mi	mvfx0, mvfx10, mvfx10
     798:	052e0b05 	streq	r0, [lr, #-2821]!	; 0xfffff4fb
     79c:	0f032101 	svceq	0x00032101
     7a0:	7910054a 	ldmdbvc	r0, {r1, r3, r6, r8, sl}
     7a4:	034b0105 	movteq	r0, #45317	; 0xb105
     7a8:	10054a0f 	andne	r4, r5, pc, lsl #20
     7ac:	4b010579 	blmi	41d98 <startup-0x1ffbe268>
     7b0:	054a1003 	strbeq	r1, [sl, #-3]
     7b4:	1205c006 	andne	ip, r5, #6
     7b8:	5001054c 	andpl	r0, r1, ip, asr #10
     7bc:	051e1205 	ldreq	r1, [lr, #-517]	; 0xfffffdfb
     7c0:	0b034c01 	bleq	d37cc <startup-0x1ff2c834>
     7c4:	780e054a 	stmdavc	lr, {r1, r3, r6, r8, sl}
     7c8:	034b0105 	movteq	r0, #45317	; 0xb105
     7cc:	0e054a0b 	vmlaeq.f32	s8, s10, s22
     7d0:	75010578 	strvc	r0, [r1, #-1400]	; 0xfffffa88
     7d4:	4a00ce03 	bmi	33fe8 <startup-0x1ffcc018>
     7d8:	2fbb0c05 	svccs	0x00bb0c05
     7dc:	05350b05 	ldreq	r0, [r5, #-2821]!	; 0xfffff4fb
     7e0:	59052e23 	stmdbpl	r5, {r0, r1, r5, r9, sl, fp, sp}
     7e4:	2008054a 	andcs	r0, r8, sl, asr #10
     7e8:	053d2605 	ldreq	r2, [sp, #-1541]!	; 0xfffff9fb
     7ec:	7305903d 	movwvc	r9, #20541	; 0x503d
     7f0:	2039054a 	eorscs	r0, r9, sl, asr #10
     7f4:	053c2905 	ldreq	r2, [ip, #-2309]!	; 0xfffff6fb
     7f8:	05bb2026 	ldreq	r2, [fp, #38]!	; 0x26
     7fc:	0a055816 	beq	15685c <startup-0x1fea97a4>
     800:	3d1d054a 	cfldr32cc	mvfx0, [sp, #-296]	; 0xfffffed8
     804:	05582605 	ldrbeq	r2, [r8, #-1541]	; 0xfffff9fb
     808:	04025901 	streq	r5, [r2], #-2305	; 0xfffff6ff
     80c:	89010100 	stmdbhi	r1, {r8}
     810:	03000002 	movweq	r0, #2
     814:	0001f400 	andeq	pc, r1, r0, lsl #8
     818:	fb010200 	blx	41022 <startup-0x1ffbefde>
     81c:	01000d0e 	tsteq	r0, lr, lsl #26
     820:	00010101 	andeq	r0, r1, r1, lsl #2
     824:	00010000 	andeq	r0, r1, r0
     828:	3a430100 	bcc	10c0c30 <startup-0x1ef3f3d0>
     82c:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
     830:	612f7372 			; <UNDEFINED> instruction: 0x612f7372
     834:	726e696d 	rsbvc	r6, lr, #1785856	; 0x1b4000
     838:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
     83c:	706f746b 	rsbvc	r7, pc, fp, ror #8
     840:	7461642f 	strbtvc	r6, [r1], #-1071	; 0xfffffbd1
     844:	6f727061 	svcvs	0x00727061
     848:	746b656a 	strbtvc	r6, [fp], #-1386	; 0xfffffa96
     84c:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     850:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
     854:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     858:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     85c:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
     860:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     864:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     868:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
     86c:	535f7878 	cmppl	pc, #120, 16	; 0x780000
     870:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0xfffffb8c
     874:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     878:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
     87c:	2f726576 	svccs	0x00726576
     880:	00637273 	rsbeq	r7, r3, r3, ror r2
     884:	635c3a63 	cmpvs	ip, #405504	; 0x63000
     888:	70616573 	rsbvc	r6, r1, r3, ror r5
     88c:	6f635c70 	svcvs	0x00635c70
     890:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
     894:	745c6574 	ldrbvc	r6, [ip], #-1396	; 0xfffffa8c
     898:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
     89c:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
     8a0:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
     8a4:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
     8a8:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
     8ac:	61652d65 	cmnvs	r5, r5, ror #26
     8b0:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
     8b4:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
     8b8:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
     8bc:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
     8c0:	6300656e 	movwvs	r6, #1390	; 0x56e
     8c4:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
     8c8:	70706165 	rsbsvc	r6, r0, r5, ror #2
     8cc:	646f635c 	strbtvs	r6, [pc], #-860	; 8d4 <startup-0x1ffff72c>
     8d0:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
     8d4:	6f745c65 	svcvs	0x00745c65
     8d8:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
     8dc:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
     8e0:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
     8e4:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     8e8:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
     8ec:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
     8f0:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
     8f4:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     8f8:	79735c65 	ldmdbvc	r3!, {r0, r2, r5, r6, sl, fp, ip, lr}^
     8fc:	3a430073 	bcc	10c0ad0 <startup-0x1ef3f530>
     900:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
     904:	612f7372 			; <UNDEFINED> instruction: 0x612f7372
     908:	726e696d 	rsbvc	r6, lr, #1785856	; 0x1b4000
     90c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
     910:	706f746b 	rsbvc	r7, pc, fp, ror #8
     914:	7461642f 	strbtvc	r6, [r1], #-1071	; 0xfffffbd1
     918:	6f727061 	svcvs	0x00727061
     91c:	746b656a 	strbtvc	r6, [fp], #-1386	; 0xfffffa96
     920:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     924:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
     928:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     92c:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     930:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
     934:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     938:	534d432f 	movtpl	r4, #54063	; 0xd32f
     93c:	492f5349 	stmdbmi	pc!, {r0, r3, r6, r8, r9, ip, lr}	; <UNPREDICTABLE>
     940:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
     944:	43006564 	movwmi	r6, #1380	; 0x564
     948:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
     94c:	2f737265 	svccs	0x00737265
     950:	6e696d61 	cdpvs	13, 6, cr6, cr9, cr1, {3}
     954:	65442f72 	strbvs	r2, [r4, #-3954]	; 0xfffff08e
     958:	6f746b73 	svcvs	0x00746b73
     95c:	61642f70 	smcvs	17136	; 0x42f0
     960:	72706174 	rsbsvc	r6, r0, #116, 2
     964:	6b656a6f 	blvs	195b328 <startup-0x1e6a4cd8>
     968:	54532f74 	ldrbpl	r2, [r3], #-3956	; 0xfffff08c
     96c:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     970:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
     974:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
     978:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     97c:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
     980:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
     984:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     988:	5f787834 	svcpl	0x00787834
     98c:	50647453 	rsbpl	r7, r4, r3, asr r4
     990:	70697265 	rsbvc	r7, r9, r5, ror #4
     994:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
     998:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
     99c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     9a0:	74730000 	ldrbtvc	r0, [r3], #-0
     9a4:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     9a8:	5f787834 	svcpl	0x00787834
     9ac:	63737973 	cmnvs	r3, #1884160	; 0x1cc000
     9b0:	632e6766 			; <UNDEFINED> instruction: 0x632e6766
     9b4:	00000100 	andeq	r0, r0, r0, lsl #2
     9b8:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
     9bc:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
     9c0:	7079745f 	rsbsvc	r7, r9, pc, asr r4
     9c4:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
     9c8:	00000200 	andeq	r0, r0, r0, lsl #4
     9cc:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
     9d0:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
     9d4:	00030068 	andeq	r0, r3, r8, rrx
     9d8:	726f6300 	rsbvc	r6, pc, #0, 6
     9dc:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
     9e0:	00682e34 	rsbeq	r2, r8, r4, lsr lr
     9e4:	73000004 	movwvc	r0, #4
     9e8:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
     9ec:	74735f6d 	ldrbtvc	r5, [r3], #-3949	; 0xfffff093
     9f0:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     9f4:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
     9f8:	00050068 	andeq	r0, r5, r8, rrx
     9fc:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     a00:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
     a04:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
     a08:	00000500 	andeq	r0, r0, r0, lsl #10
     a0c:	00010500 	andeq	r0, r1, r0, lsl #10
     a10:	08f40205 	ldmeq	r4!, {r0, r2, r9}^
     a14:	e9032000 	stmdb	r3, {sp}
     a18:	04050100 	streq	r0, [r5], #-256	; 0xffffff00
     a1c:	0105672f 	tsteq	r5, pc, lsr #14
     a20:	3c100367 	ldccc	3, cr0, [r0], {103}	; 0x67
     a24:	056a0905 	strbeq	r0, [sl, #-2309]!	; 0xfffff6fb
     a28:	01052012 	tsteq	r5, r2, lsl r0
     a2c:	7410033d 	ldrvc	r0, [r0], #-829	; 0xfffffcc3
     a30:	056a0305 	strbeq	r0, [sl, #-773]!	; 0xfffffcfb
     a34:	22052024 	andcs	r2, r5, #36	; 0x24
     a38:	2101052e 	tstcs	r1, lr, lsr #10
     a3c:	05661203 	strbeq	r1, [r6, #-515]!	; 0xfffffdfd
     a40:	3605910c 	strcc	r9, [r5], -ip, lsl #2
     a44:	4a230534 	bmi	8c1f1c <startup-0x1f73e0e4>
     a48:	05200705 	streq	r0, [r0, #-1797]!	; 0xfffff8fb
     a4c:	2e054b2b 	vmlacs.f64	d4, d5, d27
     a50:	2e2b0582 	cfsh64cs	mvdx0, mvdx11, #-62
     a54:	82300591 	eorshi	r0, r0, #608174080	; 0x24400000
     a58:	052e6c05 	streq	r6, [lr, #-3077]!	; 0xfffff3fb
     a5c:	50054a59 	andpl	r4, r5, r9, asr sl
     a60:	2e2b0520 	cfsh64cs	mvdx0, mvdx11, #16
     a64:	03910105 	orrseq	r0, r1, #1073741825	; 0x40000001
     a68:	0305740b 	movweq	r7, #21515	; 0x540b
     a6c:	202a054d 	eorcs	r0, sl, sp, asr #10
     a70:	032f0105 			; <UNDEFINED> instruction: 0x032f0105
     a74:	0305740d 	movweq	r7, #21517	; 0x540d
     a78:	2028056a 	eorcs	r0, r8, sl, ror #10
     a7c:	052e2605 	streq	r2, [lr, #-1541]!	; 0xfffff9fb
     a80:	056e2101 	strbeq	r2, [lr, #-257]!	; 0xfffffeff
     a84:	053e3d0e 	ldreq	r3, [lr, #-3342]!	; 0xfffff2f2
     a88:	06052e16 			; <UNDEFINED> instruction: 0x06052e16
     a8c:	220f053c 	andcs	r0, pc, #60, 10	; 0xf000000
     a90:	3e0a054e 	cfsh32cc	mvfx0, mvfx10, #46
     a94:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
     a98:	01010007 	tsteq	r1, r7
     a9c:	00000be5 	andeq	r0, r0, r5, ror #23
     aa0:	02040003 	andeq	r0, r4, #3
     aa4:	01020000 	mrseq	r0, (UNDEF: 2)
     aa8:	000d0efb 	strdeq	r0, [sp], -fp
     aac:	01010101 	tsteq	r1, r1, lsl #2
     ab0:	01000000 	mrseq	r0, (UNDEF: 0)
     ab4:	43010000 	movwmi	r0, #4096	; 0x1000
     ab8:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
     abc:	2f737265 	svccs	0x00737265
     ac0:	6e696d61 	cdpvs	13, 6, cr6, cr9, cr1, {3}
     ac4:	65442f72 	strbvs	r2, [r4, #-3954]	; 0xfffff08e
     ac8:	6f746b73 	svcvs	0x00746b73
     acc:	61642f70 	smcvs	17136	; 0x42f0
     ad0:	72706174 	rsbsvc	r6, r0, #116, 2
     ad4:	6b656a6f 	blvs	195b498 <startup-0x1e6a4b68>
     ad8:	54532f74 	ldrbpl	r2, [r3], #-3956	; 0xfffff08c
     adc:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     ae0:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
     ae4:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
     ae8:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     aec:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
     af0:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
     af4:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     af8:	5f787834 	svcpl	0x00787834
     afc:	50647453 	rsbpl	r7, r4, r3, asr r4
     b00:	70697265 	rsbvc	r7, r9, r5, ror #4
     b04:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
     b08:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
     b0c:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
     b10:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
     b14:	61657363 	cmnvs	r5, r3, ror #6
     b18:	635c7070 	cmpvs	ip, #112	; 0x70
     b1c:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
     b20:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
     b24:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 95c <startup-0x1ffff6a4>
     b28:	63675c73 	cmnvs	r7, #29440	; 0x7300
     b2c:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
     b30:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
     b34:	6f6e2d6d 	svcvs	0x006e2d6d
     b38:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
     b3c:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
     b40:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     b44:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
     b48:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
     b4c:	00656e69 	rsbeq	r6, r5, r9, ror #28
     b50:	635c3a63 	cmpvs	ip, #405504	; 0x63000
     b54:	70616573 	rsbvc	r6, r1, r3, ror r5
     b58:	6f635c70 	svcvs	0x00635c70
     b5c:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
     b60:	745c6574 	ldrbvc	r6, [ip], #-1396	; 0xfffffa8c
     b64:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
     b68:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
     b6c:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
     b70:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
     b74:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
     b78:	61652d65 	cmnvs	r5, r5, ror #26
     b7c:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
     b80:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
     b84:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
     b88:	43007379 	movwmi	r7, #889	; 0x379
     b8c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
     b90:	2f737265 	svccs	0x00737265
     b94:	6e696d61 	cdpvs	13, 6, cr6, cr9, cr1, {3}
     b98:	65442f72 	strbvs	r2, [r4, #-3954]	; 0xfffff08e
     b9c:	6f746b73 	svcvs	0x00746b73
     ba0:	61642f70 	smcvs	17136	; 0x42f0
     ba4:	72706174 	rsbsvc	r6, r0, #116, 2
     ba8:	6b656a6f 	blvs	195b56c <startup-0x1e6a4a94>
     bac:	54532f74 	ldrbpl	r2, [r3], #-3956	; 0xfffff08c
     bb0:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     bb4:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
     bb8:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
     bbc:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     bc0:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
     bc4:	4d432f62 	stclmi	15, cr2, [r3, #-392]	; 0xfffffe78
     bc8:	2f534953 	svccs	0x00534953
     bcc:	6c636e49 	stclvs	14, cr6, [r3], #-292	; 0xfffffedc
     bd0:	00656475 	rsbeq	r6, r5, r5, ror r4
     bd4:	552f3a43 	strpl	r3, [pc, #-2627]!	; 199 <startup-0x1ffffe67>
     bd8:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
     bdc:	696d612f 	stmdbvs	sp!, {r0, r1, r2, r3, r5, r8, sp, lr}^
     be0:	442f726e 	strtmi	r7, [pc], #-622	; be8 <startup-0x1ffff418>
     be4:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
     be8:	642f706f 	strtvs	r7, [pc], #-111	; bf0 <startup-0x1ffff410>
     bec:	70617461 	rsbvc	r7, r1, r1, ror #8
     bf0:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xfffff08e
     bf4:	532f746b 			; <UNDEFINED> instruction: 0x532f746b
     bf8:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     bfc:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
     c00:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
     c04:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     c08:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
     c0c:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
     c10:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     c14:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
     c18:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0xfffffca1
     c1c:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     c20:	445f6870 	ldrbmi	r6, [pc], #-2160	; c28 <startup-0x1ffff3d8>
     c24:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
     c28:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
     c2c:	73000063 	movwvc	r0, #99	; 0x63
     c30:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     c34:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
     c38:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
     c3c:	0100632e 	tsteq	r0, lr, lsr #6
     c40:	645f0000 	ldrbvs	r0, [pc], #-0	; c48 <startup-0x1ffff3b8>
     c44:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
     c48:	745f746c 	ldrbvc	r7, [pc], #-1132	; c50 <startup-0x1ffff3b0>
     c4c:	73657079 	cmnvc	r5, #121	; 0x79
     c50:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     c54:	735f0000 	cmpvc	pc, #0
     c58:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
     c5c:	00682e74 	rsbeq	r2, r8, r4, ror lr
     c60:	63000003 	movwvs	r0, #3
     c64:	5f65726f 	svcpl	0x0065726f
     c68:	2e346d63 	cdpcs	13, 3, cr6, cr4, cr3, {3}
     c6c:	00040068 	andeq	r0, r4, r8, rrx
     c70:	73797300 	cmnvc	r9, #0, 6
     c74:	5f6d6574 	svcpl	0x006d6574
     c78:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     c7c:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     c80:	00682e78 	rsbeq	r2, r8, r8, ror lr
     c84:	73000005 	movwvc	r0, #5
     c88:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     c8c:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
     c90:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
     c94:	74730000 	ldrbtvc	r0, [r3], #-0
     c98:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     c9c:	5f787834 	svcpl	0x00787834
     ca0:	2e6d6974 			; <UNDEFINED> instruction: 0x2e6d6974
     ca4:	00050068 	andeq	r0, r5, r8, rrx
     ca8:	01050000 	mrseq	r0, (UNDEF: 5)
     cac:	5c020500 	cfstr32pl	mvfx0, [r2], {-0}
     cb0:	0320000a 			; <UNDEFINED> instruction: 0x0320000a
     cb4:	050101c8 	streq	r0, [r1, #-456]	; 0xfffffe38
     cb8:	05054e06 	streq	r4, [r5, #-3590]	; 0xfffff1fa
     cbc:	01054b4c 	tsteq	r5, ip, asr #22
     cc0:	4a00c603 	bmi	324d4 <startup-0x1ffcdb2c>
     cc4:	bc030b05 			; <UNDEFINED> instruction: 0xbc030b05
     cc8:	0505207f 	streq	r2, [r5, #-127]	; 0xffffff81
     ccc:	01054b5a 	tsteq	r5, sl, asr fp
     cd0:	4a00c103 	bmi	310e4 <startup-0x1ffcef1c>
     cd4:	41030b05 	tstmi	r3, r5, lsl #22
     cd8:	4c050520 	cfstr32mi	mvfx0, [r5], {32}
     cdc:	0301054b 	movweq	r0, #5451	; 0x154b
     ce0:	0b054a3c 	bleq	1535d8 <startup-0x1feaca28>
     ce4:	05204603 	streq	r4, [r0, #-1539]!	; 0xfffff9fd
     ce8:	054b4c05 	strbeq	r4, [fp, #-3077]	; 0xfffff3fb
     cec:	4a370301 	bmi	dc18f8 <startup-0x1f23e708>
     cf0:	4b030b05 	blmi	c390c <startup-0x1ff3c6f4>
     cf4:	4c050520 	cfstr32mi	mvfx0, [r5], {32}
     cf8:	0301054b 	movweq	r0, #5451	; 0x154b
     cfc:	0b054a32 	bleq	1535cc <startup-0x1feaca34>
     d00:	05205003 	streq	r5, [r0, #-3]!
     d04:	054b4c05 	strbeq	r4, [fp, #-3077]	; 0xfffff3fb
     d08:	4a2d0301 	bmi	b41914 <startup-0x1f4be6ec>
     d0c:	55030b05 	strpl	r0, [r3, #-2821]	; 0xfffff4fb
     d10:	4c050520 	cfstr32mi	mvfx0, [r5], {32}
     d14:	0301054b 	movweq	r0, #5451	; 0x154b
     d18:	0b054a28 	bleq	1535c0 <startup-0x1feaca40>
     d1c:	05205a03 	streq	r5, [r0, #-2563]!	; 0xfffff5fd
     d20:	054b4c05 	strbeq	r4, [fp, #-3077]	; 0xfffff3fb
     d24:	4a230301 	bmi	8c1930 <startup-0x1f73e6d0>
     d28:	5f030b05 	svcpl	0x00030b05
     d2c:	4c050520 	cfstr32mi	mvfx0, [r5], {32}
     d30:	03010567 	movweq	r0, #5479	; 0x1567
     d34:	0b05661e 	bleq	15a5b4 <startup-0x1fea5a4c>
     d38:	05206403 	streq	r6, [r0, #-1027]!	; 0xfffffbfd
     d3c:	05674c05 	strbeq	r4, [r7, #-3077]!	; 0xfffff3fb
     d40:	66190301 	ldrvs	r0, [r9], -r1, lsl #6
     d44:	69030b05 	stmdbvs	r3, {r0, r2, r8, r9, fp}
     d48:	4c050520 	cfstr32mi	mvfx0, [r5], {32}
     d4c:	03010567 	movweq	r0, #5479	; 0x1567
     d50:	0b056614 	bleq	15a5a8 <startup-0x1fea5a58>
     d54:	05206e03 	streq	r6, [r0, #-3587]!	; 0xfffff1fd
     d58:	054b4c05 	strbeq	r4, [fp, #-3077]	; 0xfffff3fb
     d5c:	4a0f0301 	bmi	3c1968 <startup-0x1fc3e698>
     d60:	73030b05 	movwvc	r0, #15109	; 0x3b05
     d64:	4c050520 	cfstr32mi	mvfx0, [r5], {32}
     d68:	0301054b 	movweq	r0, #5451	; 0x154b
     d6c:	08054a0a 	stmdaeq	r5, {r1, r3, r9, fp, lr}
     d70:	05207a03 	streq	r7, [r0, #-2563]!	; 0xfffff5fd
     d74:	05674c07 	strbeq	r4, [r7, #-3079]!	; 0xfffff3f9
     d78:	0b036901 	bleq	db184 <startup-0x1ff24e7c>
     d7c:	0c05c808 	stceq	8, cr12, [r5], {8}
     d80:	510a0559 	tstpl	sl, r9, asr r5
     d84:	054c0505 	strbeq	r0, [ip, #-1285]	; 0xfffffafb
     d88:	04020015 	streq	r0, [r2], #-21	; 0xffffffeb
     d8c:	26054a01 	strcs	r4, [r5], -r1, lsl #20
     d90:	02040200 	andeq	r0, r4, #0, 4
     d94:	5915054a 	ldmdbpl	r5, {r1, r3, r6, r8, sl}
     d98:	02002605 	andeq	r2, r0, #5242880	; 0x500000
     d9c:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
     da0:	0c054b15 			; <UNDEFINED> instruction: 0x0c054b15
     da4:	752f054d 	strvc	r0, [pc, #-1357]!	; 85f <startup-0x1ffff7a1>
     da8:	052e0c05 	streq	r0, [lr, #-3077]!	; 0xfffff3fb
     dac:	15055b05 	strne	r5, [r5, #-2821]	; 0xfffff4fb
     db0:	01040200 	mrseq	r0, R12_usr
     db4:	4d0c054a 	cfstr32mi	mvfx0, [ip, #-296]	; 0xfffffed8
     db8:	05752f05 	ldrbeq	r2, [r5, #-3845]!	; 0xfffff0fb
     dbc:	0d052e0c 	stceq	14, cr2, [r5, #-48]	; 0xffffffd0
     dc0:	5b25055b 	blpl	942334 <startup-0x1f6bdccc>
     dc4:	052e0d05 	streq	r0, [lr, #-3333]!	; 0xfffff2fb
     dc8:	0d053125 	stfeqs	f3, [r5, #-148]	; 0xffffff6c
     dcc:	3006052e 	andcc	r0, r6, lr, lsr #10
     dd0:	02001605 	andeq	r1, r0, #5242880	; 0x500000
     dd4:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
     dd8:	0f054d27 	svceq	0x00054d27
     ddc:	330d053c 	movwcc	r0, #54588	; 0xd53c
     de0:	033d0105 	teqeq	sp, #1073741825	; 0x40000001
     de4:	054a0809 	strbeq	r0, [sl, #-2057]	; 0xfffff7f7
     de8:	29054c26 	stmdbcs	r5, {r1, r2, r5, sl, fp, lr}
     dec:	3d2d054b 	cfstr32cc	mvfx0, [sp, #-300]!	; 0xfffffed4
     df0:	053d2b05 	ldreq	r2, [sp, #-2821]!	; 0xfffff4fb
     df4:	01053d31 	tsteq	r5, r1, lsr sp
     df8:	4a0d033d 	bmi	341af4 <startup-0x1fcbe50c>
     dfc:	4cbf0d05 	ldcmi	13, cr0, [pc], #20	; e18 <startup-0x1ffff1e8>
     e00:	034b0105 	movteq	r0, #45317	; 0xb105
     e04:	0c054a0f 			; <UNDEFINED> instruction: 0x0c054a0f
     e08:	500a0575 	andpl	r0, sl, r5, ror r5
     e0c:	0d05694d 	vstreq.16	s12, [r5, #-154]	; 0xffffff66	; <UNPREDICTABLE>
     e10:	4b010577 	blmi	423f4 <startup-0x1ffbdc0c>
     e14:	054a0903 	strbeq	r0, [sl, #-2307]	; 0xfffff6fd
     e18:	01055d0d 	tsteq	r5, sp, lsl #26
     e1c:	4a09033d 	bmi	241b18 <startup-0x1fdbe4e8>
     e20:	055d0d05 	ldrbeq	r0, [sp, #-3333]	; 0xfffff2fb
     e24:	05523d01 	ldrbeq	r3, [r2, #-3329]	; 0xfffff2ff
     e28:	01054f0e 	tsteq	r5, lr, lsl #30
     e2c:	0e05522f 	cdpeq	2, 0, cr5, cr5, cr15, {1}
     e30:	3d01054f 	cfstr32cc	mvfx0, [r1, #-316]	; 0xfffffec4
     e34:	054a0a03 	strbeq	r0, [sl, #-2563]	; 0xfffff5fd
     e38:	0f057906 	svceq	0x00057906
     e3c:	8901054d 	stmdbhi	r1, {r0, r2, r3, r6, r8, sl}
     e40:	051e0f05 	ldreq	r0, [lr, #-3845]	; 0xfffff0fb
     e44:	0e038401 	cdpeq	4, 0, cr8, cr3, cr1, {0}
     e48:	7906054a 	stmdbvc	r6, {r1, r3, r6, r8, sl}
     e4c:	054d0f05 	strbeq	r0, [sp, #-3845]	; 0xfffff0fb
     e50:	0f058901 	svceq	0x00058901
     e54:	8401051e 	strhi	r0, [r1], #-1310	; 0xfffffae2
     e58:	054a0a03 	strbeq	r0, [sl, #-2563]	; 0xfffff5fd
     e5c:	0f057906 	svceq	0x00057906
     e60:	8901054d 	stmdbhi	r1, {r0, r2, r3, r6, r8, sl}
     e64:	051e0f05 	ldreq	r0, [lr, #-3845]	; 0xfffff0fb
     e68:	0c038401 	cfstrseq	mvf8, [r3], {1}
     e6c:	7a0d054a 	bvc	34239c <startup-0x1fcbdc64>
     e70:	91010585 	smlabbls	r1, r5, r5, r0
     e74:	054a0d03 	strbeq	r0, [sl, #-3331]	; 0xfffff2fd
     e78:	05857a0d 	streq	r7, [r5, #2573]	; 0xa0d
     e7c:	0a039101 	beq	e5288 <startup-0x1ff1ad78>
     e80:	79060574 	stmdbvc	r6, {r2, r4, r5, r6, r8, sl}
     e84:	054d0f05 	strbeq	r0, [sp, #-3845]	; 0xfffff0fb
     e88:	0f058901 	svceq	0x00058901
     e8c:	8401051e 	strhi	r0, [r1], #-1310	; 0xfffffae2
     e90:	4a00c203 	bmi	316a4 <startup-0x1ffce95c>
     e94:	05590c05 	ldrbeq	r0, [r9, #-3077]	; 0xfffff3fb
     e98:	27054a1a 	smladcs	r5, sl, sl, r4
     e9c:	030e054a 	movweq	r0, #58698	; 0xe54a
     ea0:	0b054a09 	bleq	1536cc <startup-0x1feac934>
     ea4:	4c0a0585 	cfstr32mi	mvfx0, [sl], {133}	; 0x85
     ea8:	4d4d0c05 	stclmi	12, cr0, [sp, #-20]	; 0xffffffec
     eac:	681f0575 	ldmdavs	pc, {r0, r2, r4, r5, r6, r8, sl}	; <UNPREDICTABLE>
     eb0:	052e0c05 	streq	r0, [lr, #-3077]!	; 0xfffff3fb
     eb4:	1e055b0b 	vmlane.f64	d5, d5, d11
     eb8:	2e0b0576 	cfrshl64cs	mvdx11, mvdx6, r0
     ebc:	055b1e05 	ldrbeq	r1, [fp, #-3589]	; 0xfffff1fb
     ec0:	05052e0b 	streq	r2, [r5, #-3595]	; 0xfffff1f5
     ec4:	0015055a 	andseq	r0, r5, sl, asr r5
     ec8:	4a010402 	bmi	41ed8 <startup-0x1ffbe128>
     ecc:	05520d05 	ldrbeq	r0, [r2, #-3333]	; 0xfffff2fb
     ed0:	0d057620 	stceq	6, cr7, [r5, #-128]	; 0xffffff80
     ed4:	20055a2e 	andcs	r5, r5, lr, lsr #20
     ed8:	2e0d0569 	cfsh32cs	mvfx0, mvfx13, #57
     edc:	755a0c05 	ldrbvc	r0, [sl, #-3077]	; 0xfffff3fb
     ee0:	05681f05 	strbeq	r1, [r8, #-3845]!	; 0xfffff0fb
     ee4:	1f052e0c 	svcne	0x00052e0c
     ee8:	2e0c055a 	cfrshl32cs	mvfx12, mvfx10, r0
     eec:	055b0d05 	ldrbeq	r0, [fp, #-3333]	; 0xfffff2fb
     ef0:	20055b0f 	andcs	r5, r5, pc, lsl #22
     ef4:	2e0e055b 	cfrshl32cs	mvfx14, mvfx11, r0
     ef8:	59010531 	stmdbpl	r1, {r0, r4, r5, r8, sl}
     efc:	05c80c03 	strbeq	r0, [r8, #3075]	; 0xc03
     f00:	1a05590c 	bne	157338 <startup-0x1fea8cc8>
     f04:	4a27054a 	bmi	9c2434 <startup-0x1f63dbcc>
     f08:	09030e05 	stmdbeq	r3, {r0, r2, r9, sl, fp}
     f0c:	850b054a 	strhi	r0, [fp, #-1354]	; 0xfffffab6
     f10:	054c0a05 	strbeq	r0, [ip, #-2565]	; 0xfffff5fb
     f14:	754d4d0c 	strbvc	r4, [sp, #-3340]	; 0xfffff2f4
     f18:	05692a05 	strbeq	r2, [r9, #-2565]!	; 0xfffff5fb
     f1c:	0c052e0f 	stceq	14, cr2, [r5], {15}
     f20:	5b0b052e 	blpl	2c23e0 <startup-0x1fd3dc20>
     f24:	05762905 	ldrbeq	r2, [r6, #-2309]!	; 0xfffff6fb
     f28:	0b052e0e 	bleq	14c768 <startup-0x1feb3898>
     f2c:	5b29052e 	blpl	a423ec <startup-0x1f5bdc14>
     f30:	052e0e05 	streq	r0, [lr, #-3589]!	; 0xfffff1fb
     f34:	05052e0b 	streq	r2, [r5, #-3595]	; 0xfffff1f5
     f38:	0015055a 	andseq	r0, r5, sl, asr r5
     f3c:	4a010402 	bmi	41f4c <startup-0x1ffbe0b4>
     f40:	05520d05 	ldrbeq	r0, [r2, #-3333]	; 0xfffff2fb
     f44:	1005762b 	andne	r7, r5, fp, lsr #12
     f48:	2e0d052e 	cfsh32cs	mvfx0, mvfx13, #30
     f4c:	692b055a 	stmdbvs	fp!, {r1, r3, r4, r6, r8, sl}
     f50:	052e1005 	streq	r1, [lr, #-5]!
     f54:	0c052e0d 	stceq	14, cr2, [r5], {13}
     f58:	2a05755a 	bcs	15e4c8 <startup-0x1fea1b38>
     f5c:	2e0f0568 	cfsh32cs	mvfx0, mvfx15, #56
     f60:	052e0c05 	streq	r0, [lr, #-3077]!	; 0xfffff3fb
     f64:	0f055a2a 	svceq	0x00055a2a
     f68:	2e0c052e 	cfsh32cs	mvfx0, mvfx12, #30
     f6c:	055b0d05 	ldrbeq	r0, [fp, #-3333]	; 0xfffff2fb
     f70:	20055b0f 	andcs	r5, r5, pc, lsl #22
     f74:	2e0e055b 	cfrshl32cs	mvfx14, mvfx11, r0
     f78:	59010531 	stmdbpl	r1, {r0, r4, r5, r8, sl}
     f7c:	12080b03 	andne	r0, r8, #3072	; 0xc00
     f80:	05590c05 	ldrbeq	r0, [r9, #-3077]	; 0xfffff3fb
     f84:	27054a1a 	smladcs	r5, sl, sl, r4
     f88:	030e054a 	movweq	r0, #58698	; 0xe54a
     f8c:	0b054a09 	bleq	1537b8 <startup-0x1feac848>
     f90:	4c0a0585 	cfstr32mi	mvfx0, [sl], {133}	; 0x85
     f94:	4d4d0c05 	stclmi	12, cr0, [sp, #-20]	; 0xffffffec
     f98:	681f0575 	ldmdavs	pc, {r0, r2, r4, r5, r6, r8, sl}	; <UNPREDICTABLE>
     f9c:	052e0c05 	streq	r0, [lr, #-3077]!	; 0xfffff3fb
     fa0:	29055b0b 	stmdbcs	r5, {r0, r1, r3, r8, r9, fp, ip, lr}
     fa4:	2e0e0576 	cfrshl64cs	mvdx14, mvdx6, r0
     fa8:	052e0b05 	streq	r0, [lr, #-2821]!	; 0xfffff4fb
     fac:	0e055b29 	vmlaeq.f64	d5, d5, d25
     fb0:	2e0b052e 	cfsh32cs	mvfx0, mvfx11, #30
     fb4:	055a0505 	ldrbeq	r0, [sl, #-1285]	; 0xfffffafb
     fb8:	04020015 	streq	r0, [r2], #-21	; 0xffffffeb
     fbc:	0d054a01 	vstreq	s8, [r5, #-4]
     fc0:	762b0552 			; <UNDEFINED> instruction: 0x762b0552
     fc4:	052e1005 	streq	r1, [lr, #-5]!
     fc8:	055a2e0d 	ldrbeq	r2, [sl, #-3597]	; 0xfffff1f3
     fcc:	1005692b 	andne	r6, r5, fp, lsr #18
     fd0:	2e0d052e 	cfsh32cs	mvfx0, mvfx13, #30
     fd4:	755a0c05 	ldrbvc	r0, [sl, #-3077]	; 0xfffff3fb
     fd8:	05682a05 	strbeq	r2, [r8, #-2565]!	; 0xfffff5fb
     fdc:	0c052e0f 	stceq	14, cr2, [r5], {15}
     fe0:	5a2a052e 	bpl	a824a0 <startup-0x1f57db60>
     fe4:	052e0f05 	streq	r0, [lr, #-3845]!	; 0xfffff0fb
     fe8:	0d052e0c 	stceq	14, cr2, [r5, #-48]	; 0xffffffd0
     fec:	5b0f055b 	blpl	3c2560 <startup-0x1fc3daa0>
     ff0:	055b2005 	ldrbeq	r2, [fp, #-5]
     ff4:	05312e0e 	ldreq	r2, [r1, #-3598]!	; 0xfffff1f2
     ff8:	0b035901 	bleq	d7404 <startup-0x1ff28bfc>
     ffc:	0c054a08 			; <UNDEFINED> instruction: 0x0c054a08
    1000:	4a1a0559 	bmi	68256c <startup-0x1f97da94>
    1004:	054a2705 	strbeq	r2, [sl, #-1797]	; 0xfffff8fb
    1008:	4a09030e 	bmi	241c48 <startup-0x1fdbe3b8>
    100c:	05850b05 	streq	r0, [r5, #2821]	; 0xb05
    1010:	0c054c0a 	stceq	12, cr4, [r5], {10}
    1014:	05754d4d 	ldrbeq	r4, [r5, #-3405]!	; 0xfffff2b3
    1018:	0f05692a 	svceq	0x0005692a
    101c:	2e0c052e 	cfsh32cs	mvfx0, mvfx12, #30
    1020:	055b0b05 	ldrbeq	r0, [fp, #-2821]	; 0xfffff4fb
    1024:	0e057629 	cfmadd32eq	mvax1, mvfx7, mvfx5, mvfx9
    1028:	2e0b052e 	cfsh32cs	mvfx0, mvfx11, #30
    102c:	055b2905 	ldrbeq	r2, [fp, #-2309]	; 0xfffff6fb
    1030:	0b052e0e 	bleq	14c870 <startup-0x1feb3790>
    1034:	5a05052e 	bpl	1424f4 <startup-0x1febdb0c>
    1038:	02001505 	andeq	r1, r0, #20971520	; 0x1400000
    103c:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
    1040:	2a054e0c 	bcs	154878 <startup-0x1feab788>
    1044:	2e0f0576 	cfrshl64cs	mvdx15, mvdx6, r0
    1048:	052e0c05 	streq	r0, [lr, #-3077]!	; 0xfffff3fb
    104c:	0f055b0d 	svceq	0x00055b0d
    1050:	5b20055b 	blpl	8025c4 <startup-0x1f7fda3c>
    1054:	312e0e05 			; <UNDEFINED> instruction: 0x312e0e05
    1058:	03590105 	cmpeq	r9, #1073741825	; 0x40000001
    105c:	052e0809 	streq	r0, [lr, #-2057]!	; 0xfffff7f7
    1060:	25054c20 	strcs	r4, [r5, #-3104]	; 0xfffff3e0
    1064:	3d26053d 	cfstr32cc	mvfx0, [r6, #-244]!	; 0xffffff0c
    1068:	053d1f05 	ldreq	r1, [sp, #-3845]!	; 0xfffff0fb
    106c:	25053d24 	strcs	r3, [r5, #-3364]	; 0xfffff2dc
    1070:	26053d3d 			; <UNDEFINED> instruction: 0x26053d3d
    1074:	3d01053d 	cfstr32cc	mvfx0, [r1, #-244]	; 0xffffff0c
    1078:	054a1a03 	strbeq	r1, [sl, #-2563]	; 0xfffff5fd
    107c:	052fbb0c 	streq	fp, [pc, #-2828]!	; 578 <startup-0x1ffffa88>
    1080:	052f5107 	streq	r5, [pc, #-263]!	; f81 <startup-0x1ffff07f>
    1084:	17053e1a 	smladne	r5, sl, lr, r3
    1088:	2e08052e 	cfsh32cs	mvfx0, mvfx8, #30
    108c:	05310e05 	ldreq	r0, [r1, #-3589]!	; 0xfffff1fb
    1090:	0e053c11 	mcreq	12, 0, r3, cr5, cr1, {0}
    1094:	4c05054a 	cfstr32mi	mvfx0, [r5], {74}	; 0x4a
    1098:	02002505 	andeq	r2, r0, #20971520	; 0x1400000
    109c:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
    10a0:	09054c18 	stmdbeq	r5, {r3, r4, sl, fp, lr}
    10a4:	3f1c0558 	svccc	0x001c0558
    10a8:	860c0569 	strhi	r0, [ip], -r9, ror #10
    10ac:	054a3105 	strbeq	r3, [sl, #-261]	; 0xfffffefb
    10b0:	1c053c09 	stcne	12, cr3, [r5], {9}
    10b4:	1f05693f 	svcne	0x0005693f
    10b8:	581c052e 	ldmdapl	ip, {r1, r2, r3, r5, r8, sl}
    10bc:	033e0105 	teqeq	lr, #1073741825	; 0x40000001
    10c0:	0e059e09 	cdpeq	14, 0, cr9, cr5, cr9, {0}
    10c4:	3d01055d 	cfstr32cc	mvfx0, [r1, #-372]	; 0xfffffe8c
    10c8:	054a0a03 	strbeq	r0, [sl, #-2563]	; 0xfffff5fd
    10cc:	01055d0e 	tsteq	r5, lr, lsl #26
    10d0:	4a09033d 	bmi	241dcc <startup-0x1fdbe234>
    10d4:	055d0e05 	ldrbeq	r0, [sp, #-3589]	; 0xfffff1fb
    10d8:	09033d01 	stmdbeq	r3, {r0, r8, sl, fp, ip, sp}
    10dc:	5d0e054a 	cfstr32pl	mvfx0, [lr, #-296]	; 0xfffffed8
    10e0:	033d0105 	teqeq	sp, #1073741825	; 0x40000001
    10e4:	0c054a0c 			; <UNDEFINED> instruction: 0x0c054a0c
    10e8:	694d4f75 	stmdbvs	sp, {r0, r2, r4, r5, r6, r8, r9, sl, fp, lr}^
    10ec:	05770f05 	ldrbeq	r0, [r7, #-3845]!	; 0xfffff0fb
    10f0:	0d034b01 	vstreq	d4, [r3, #-4]
    10f4:	750c054a 	strvc	r0, [ip, #-1354]	; 0xfffffab6
    10f8:	0f054d4f 	svceq	0x00054d4f
    10fc:	4a0c0569 	bmi	3026a8 <startup-0x1fcfd958>
    1100:	055b0f05 	ldrbeq	r0, [fp, #-3845]	; 0xfffff0fb
    1104:	0c034b01 			; <UNDEFINED> instruction: 0x0c034b01
    1108:	750c0566 	strvc	r0, [ip, #-1382]	; 0xfffffa9a
    110c:	05694d50 	strbeq	r4, [r9, #-3408]!	; 0xfffff2b0
    1110:	0105770f 	tsteq	r5, pc, lsl #14
    1114:	4a0c034b 	bmi	301e48 <startup-0x1fcfe1b8>
    1118:	4f750c05 	svcmi	0x00750c05
    111c:	690f054d 	stmdbvs	pc, {r0, r2, r3, r6, r8, sl}	; <UNPREDICTABLE>
    1120:	054a0c05 	strbeq	r0, [sl, #-3077]	; 0xfffff3fb
    1124:	01055b0f 	tsteq	r5, pc, lsl #22
    1128:	660c034b 	strvs	r0, [ip], -fp, asr #6
    112c:	50750c05 	rsbspl	r0, r5, r5, lsl #24
    1130:	0f05694d 	svceq	0x0005694d
    1134:	4b010577 	blmi	42718 <startup-0x1ffbd8e8>
    1138:	054a0d03 	strbeq	r0, [sl, #-3331]	; 0xfffff2fd
    113c:	4d50750c 	cfldr64mi	mvdx7, [r0, #-48]	; 0xffffffd0
    1140:	05690f05 	strbeq	r0, [r9, #-3845]!	; 0xfffff0fb
    1144:	0f054a0c 	svceq	0x00054a0c
    1148:	4b01055b 	blmi	426bc <startup-0x1ffbd944>
    114c:	05660c03 	strbeq	r0, [r6, #-3075]!	; 0xfffff3fd
    1150:	4d50750c 	cfldr64mi	mvdx7, [r0, #-48]	; 0xffffffd0
    1154:	770f0569 	strvc	r0, [pc, -r9, ror #10]
    1158:	034b0105 	movteq	r0, #45317	; 0xb105
    115c:	0c054a0c 			; <UNDEFINED> instruction: 0x0c054a0c
    1160:	054d5075 	strbeq	r5, [sp, #-117]	; 0xffffff8b
    1164:	0c05690f 			; <UNDEFINED> instruction: 0x0c05690f
    1168:	5b0f054a 	blpl	3c2698 <startup-0x1fc3d968>
    116c:	034b0105 	movteq	r0, #45317	; 0xb105
    1170:	0c05660c 	stceq	6, cr6, [r5], {12}
    1174:	694d5175 	stmdbvs	sp, {r0, r2, r4, r5, r6, r8, ip, lr}^
    1178:	05770f05 	ldrbeq	r0, [r7, #-3845]!	; 0xfffff0fb
    117c:	0d034b01 	vstreq	d4, [r3, #-4]
    1180:	750c054a 	strvc	r0, [ip, #-1354]	; 0xfffffab6
    1184:	0f054d51 	svceq	0x00054d51
    1188:	4a0c0569 	bmi	302734 <startup-0x1fcfd8cc>
    118c:	055b0f05 	ldrbeq	r0, [fp, #-3845]	; 0xfffff0fb
    1190:	0c034b01 			; <UNDEFINED> instruction: 0x0c034b01
    1194:	750c0566 	strvc	r0, [ip, #-1382]	; 0xfffffa9a
    1198:	05694d51 	strbeq	r4, [r9, #-3409]!	; 0xfffff2af
    119c:	0105770f 	tsteq	r5, pc, lsl #14
    11a0:	4a0c034b 	bmi	301ed4 <startup-0x1fcfe12c>
    11a4:	51750c05 	cmnpl	r5, r5, lsl #24
    11a8:	690f054d 	stmdbvs	pc, {r0, r2, r3, r6, r8, sl}	; <UNPREDICTABLE>
    11ac:	054a0c05 	strbeq	r0, [sl, #-3077]	; 0xfffff3fb
    11b0:	01055b0f 	tsteq	r5, pc, lsl #22
    11b4:	660c034b 	strvs	r0, [ip], -fp, asr #6
    11b8:	50750c05 	rsbspl	r0, r5, r5, lsl #24
    11bc:	0f05694d 	svceq	0x0005694d
    11c0:	4b010577 	blmi	427a4 <startup-0x1ffbd85c>
    11c4:	054a0d03 	strbeq	r0, [sl, #-3331]	; 0xfffff2fd
    11c8:	4d50750c 	cfldr64mi	mvdx7, [r0, #-48]	; 0xffffffd0
    11cc:	05690f05 	strbeq	r0, [r9, #-3845]!	; 0xfffff0fb
    11d0:	0f054a0c 	svceq	0x00054a0c
    11d4:	4b01055b 	blmi	42748 <startup-0x1ffbd8b8>
    11d8:	054a0c03 	strbeq	r0, [sl, #-3075]	; 0xfffff3fd
    11dc:	4d50750c 	cfldr64mi	mvdx7, [r0, #-48]	; 0xffffffd0
    11e0:	770f0569 	strvc	r0, [pc, -r9, ror #10]
    11e4:	034b0105 	movteq	r0, #45317	; 0xb105
    11e8:	0c054a0c 			; <UNDEFINED> instruction: 0x0c054a0c
    11ec:	054d5075 	strbeq	r5, [sp, #-117]	; 0xffffff8b
    11f0:	0c05690f 			; <UNDEFINED> instruction: 0x0c05690f
    11f4:	5b0f054a 	blpl	3c2724 <startup-0x1fc3d8dc>
    11f8:	034b0105 	movteq	r0, #45317	; 0xb105
    11fc:	0c054a0c 			; <UNDEFINED> instruction: 0x0c054a0c
    1200:	500b0575 	andpl	r0, fp, r5, ror r5
    1204:	0e05674d 	cdpeq	7, 0, cr6, cr5, cr13, {2}
    1208:	4b010577 	blmi	427ec <startup-0x1ffbd814>
    120c:	054a0c03 	strbeq	r0, [sl, #-3075]	; 0xfffff3fd
    1210:	0b05750c 	bleq	15e648 <startup-0x1fea19b8>
    1214:	05674d4f 	strbeq	r4, [r7, #-3407]!	; 0xfffff2b1
    1218:	0105770e 	tsteq	r5, lr, lsl #14
    121c:	4a0d034b 	bmi	341f50 <startup-0x1fcbe0b0>
    1220:	05750c05 	ldrbeq	r0, [r5, #-3077]!	; 0xfffff3fb
    1224:	054d500b 	strbeq	r5, [sp, #-11]
    1228:	0b05670e 	bleq	15ae68 <startup-0x1fea5198>
    122c:	5b0e054a 	blpl	38275c <startup-0x1fc7d8a4>
    1230:	034b0105 	movteq	r0, #45317	; 0xb105
    1234:	0c054a0c 			; <UNDEFINED> instruction: 0x0c054a0c
    1238:	500b0575 	andpl	r0, fp, r5, ror r5
    123c:	670e054d 	strvs	r0, [lr, -sp, asr #10]
    1240:	054a0b05 	strbeq	r0, [sl, #-2821]	; 0xfffff4fb
    1244:	01055b0e 	tsteq	r5, lr, lsl #22
    1248:	4a0c034b 	bmi	301f7c <startup-0x1fcfe084>
    124c:	05750c05 	ldrbeq	r0, [r5, #-3077]!	; 0xfffff3fb
    1250:	054d500b 	strbeq	r5, [sp, #-11]
    1254:	0b05670e 	bleq	15ae94 <startup-0x1fea516c>
    1258:	5b0e054a 	blpl	382788 <startup-0x1fc7d878>
    125c:	034b0105 	movteq	r0, #45317	; 0xb105
    1260:	0c05660c 	stceq	6, cr6, [r5], {12}
    1264:	500b0575 	andpl	r0, fp, r5, ror r5
    1268:	670e054d 	strvs	r0, [lr, -sp, asr #10]
    126c:	054a0b05 	strbeq	r0, [sl, #-2821]	; 0xfffff4fb
    1270:	01055b0e 	tsteq	r5, lr, lsl #22
    1274:	660c034b 	strvs	r0, [ip], -fp, asr #6
    1278:	05750c05 	ldrbeq	r0, [r5, #-3077]!	; 0xfffff3fb
    127c:	054d500b 	strbeq	r5, [sp, #-11]
    1280:	0b05670e 	bleq	15aec0 <startup-0x1fea5140>
    1284:	5b0e054a 	blpl	3827b4 <startup-0x1fc7d84c>
    1288:	034b0105 	movteq	r0, #45317	; 0xb105
    128c:	0c056610 	stceq	6, cr6, [r5], {16}
    1290:	511605bb 			; <UNDEFINED> instruction: 0x511605bb
    1294:	054a0705 	strbeq	r0, [sl, #-1797]	; 0xfffff8fb
    1298:	1105310e 	tstne	r5, lr, lsl #2
    129c:	4a0e053c 	bmi	382794 <startup-0x1fc7d86c>
    12a0:	3c25054d 	cfstr32cc	mvfx0, [r5], #-308	; 0xfffffecc
    12a4:	05661205 	strbeq	r1, [r6, #-517]!	; 0xfffffdfb
    12a8:	0105200e 	tsteq	r5, lr
    12ac:	4a0f034b 	bmi	3c1fe0 <startup-0x1fc3e020>
    12b0:	05bb0c05 	ldreq	r0, [fp, #3077]!	; 0xc05
    12b4:	07055117 	smladeq	r5, r7, r1, r5
    12b8:	310e054a 	tstcc	lr, sl, asr #10
    12bc:	053c1105 	ldreq	r1, [ip, #-261]!	; 0xfffffefb
    12c0:	054d4a0e 	strbeq	r4, [sp, #-2574]	; 0xfffff5f2
    12c4:	12053c26 	andne	r3, r5, #9728	; 0x2600
    12c8:	200e0566 	andcs	r0, lr, r6, ror #10
    12cc:	034b0105 	movteq	r0, #45317	; 0xb105
    12d0:	054a00c5 	strbeq	r0, [sl, #-197]	; 0xffffff3b
    12d4:	06056017 			; <UNDEFINED> instruction: 0x06056017
    12d8:	3105052e 	tstcc	r5, lr, lsr #10
    12dc:	03010594 	movweq	r0, #5524	; 0x1594
    12e0:	1c057420 	cfstrsne	mvf7, [r5], {32}
    12e4:	05206203 	streq	r6, [r0, #-515]!	; 0xfffffdfd
    12e8:	05052e0b 	streq	r2, [r5, #-3595]	; 0xfffff1f5
    12ec:	01059432 	tsteq	r5, r2, lsr r4
    12f0:	05741603 	ldrbeq	r1, [r4, #-1539]!	; 0xfffff9fd
    12f4:	206c031c 	rsbcs	r0, ip, ip, lsl r3
    12f8:	052e0b05 	streq	r0, [lr, #-2821]!	; 0xfffff4fb
    12fc:	05943205 	ldreq	r3, [r4, #517]	; 0x205
    1300:	740c0301 	strvc	r0, [ip], #-769	; 0xfffffcff
    1304:	7a030505 	bvc	c2720 <startup-0x1ff3d8e0>
    1308:	01059420 	tsteq	r5, r0, lsr #8
    130c:	4a090376 	bmi	2420ec <startup-0x1fdbdf14>
    1310:	054c2105 	strbeq	r2, [ip, #-261]	; 0xfffffefb
    1314:	25053d24 	strcs	r3, [r5, #-3364]	; 0xfffff2dc
    1318:	22053d3d 	andcs	r3, r5, #3904	; 0xf40
    131c:	3d01053d 	cfstr32cc	mvfx0, [r1, #-244]	; 0xffffff0c
    1320:	054a0c03 	strbeq	r0, [sl, #-3075]	; 0xfffff3fd
    1324:	054b590c 	strbeq	r5, [fp, #-2316]	; 0xfffff6f4
    1328:	06055017 			; <UNDEFINED> instruction: 0x06055017
    132c:	3018052e 	andscc	r0, r8, lr, lsr #10
    1330:	4d17054e 	cfldr32mi	mvfx0, [r7, #-312]	; 0xfffffec8
    1334:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
    1338:	055c3019 	ldrbeq	r3, [ip, #-25]	; 0xffffffe7
    133c:	06054c17 			; <UNDEFINED> instruction: 0x06054c17
    1340:	3105052e 	tstcc	r5, lr, lsr #10
    1344:	05bc7693 	ldreq	r7, [ip, #1683]!	; 0x693
    1348:	740e0301 	strvc	r0, [lr], #-769	; 0xfffffcff
    134c:	77030505 	strvc	r0, [r3, -r5, lsl #10]
    1350:	bc769320 	ldcllt	3, cr9, [r6], #-128	; 0xffffff80
    1354:	52760105 	rsbspl	r0, r6, #1073741825	; 0x40000001
    1358:	054f0e05 	strbeq	r0, [pc, #-3589]	; 55b <startup-0x1ffffaa5>
    135c:	09032f01 	stmdbeq	r3, {r0, r8, r9, sl, fp, sp}
    1360:	4f0e054a 	svcmi	0x000e054a
    1364:	522f0105 	eorpl	r0, pc, #1073741825	; 0x40000001
    1368:	054f0e05 	strbeq	r0, [pc, #-3589]	; 56b <startup-0x1ffffa95>
    136c:	05522f01 	ldrbeq	r2, [r2, #-3841]	; 0xfffff0ff
    1370:	01054f0e 	tsteq	r5, lr, lsl #30
    1374:	4a0e032f 	bmi	382038 <startup-0x1fc7dfc8>
    1378:	857a0f05 	ldrbhi	r0, [sl, #-3845]!	; 0xfffff0fb
    137c:	03910105 	orrseq	r0, r1, #1073741825	; 0x40000001
    1380:	0f054a0f 	svceq	0x00054a0f
    1384:	1205857a 	andne	r8, r5, #511705088	; 0x1e800000
    1388:	4a0f053c 	bmi	3c2880 <startup-0x1fc3d780>
    138c:	034b0105 	movteq	r0, #45317	; 0xb105
    1390:	0f05660e 	svceq	0x0005660e
    1394:	0105857a 	tsteq	r5, sl, ror r5
    1398:	4a0e0391 	bmi	3821e4 <startup-0x1fc7de1c>
    139c:	857a0f05 	ldrbhi	r0, [sl, #-3845]!	; 0xfffff0fb
    13a0:	053c1205 	ldreq	r1, [ip, #-517]!	; 0xfffffdfb
    13a4:	01054a0f 	tsteq	r5, pc, lsl #20
    13a8:	662b034b 	strtvs	r0, [fp], -fp, asr #6
    13ac:	0c032c05 	stceq	12, cr2, [r3], {5}
    13b0:	2e500558 	mrccs	5, 2, r0, cr0, cr8, {2}
    13b4:	052e0e05 	streq	r0, [lr, #-3589]!	; 0xfffff1fb
    13b8:	0e052f20 	cdpeq	15, 0, cr2, cr5, cr0, {1}
    13bc:	2f44052d 	svccs	0x0044052d
    13c0:	052d0e05 	streq	r0, [sp, #-3589]!	; 0xfffff1fb
    13c4:	0e053020 	cdpeq	0, 0, cr3, cr5, cr0, {1}
    13c8:	3040052c 	subcc	r0, r0, ip, lsr #10
    13cc:	052c0e05 	streq	r0, [ip, #-3589]!	; 0xfffff1fb
    13d0:	0e053120 	adfeqsp	f3, f5, f0
    13d4:	5c01052b 	cfstr32pl	mvfx0, [r1], {43}	; 0x2b
    13d8:	054a0903 	strbeq	r0, [sl, #-2307]	; 0xfffff6fd
    13dc:	3d3d4c25 	ldccc	12, cr4, [sp, #-148]!	; 0xffffff6c
    13e0:	053d2405 	ldreq	r2, [sp, #-1029]!	; 0xfffffbfb
    13e4:	29053d21 	stmdbcs	r5, {r0, r5, r8, sl, fp, ip, sp}
    13e8:	3d2b053d 	cfstr32cc	mvfx0, [fp, #-244]!	; 0xffffff0c
    13ec:	033d0105 	teqeq	sp, #1073741825	; 0x40000001
    13f0:	06054a0a 	streq	r4, [r5], -sl, lsl #20
    13f4:	4d100579 	cfldr32mi	mvfx0, [r0, #-484]	; 0xfffffe1c
    13f8:	05a50105 	streq	r0, [r5, #261]!	; 0x105
    13fc:	01051e10 	tsteq	r5, r0, lsl lr
    1400:	740a03a0 	strvc	r0, [sl], #-928	; 0xfffffc60
    1404:	05790605 	ldrbeq	r0, [r9, #-1541]!	; 0xfffff9fb
    1408:	01054d0f 	tsteq	r5, pc, lsl #26
    140c:	1e0f0589 	cfsh32ne	mvfx0, mvfx15, #-55
    1410:	03840105 	orreq	r0, r4, #1073741825	; 0x40000001
    1414:	06054a0a 	streq	r4, [r5], -sl, lsl #20
    1418:	4d0f0578 	cfstr32mi	mvfx0, [pc, #-480]	; 1240 <startup-0x1fffedc0>
    141c:	05890105 	streq	r0, [r9, #261]	; 0x105
    1420:	01051e0f 	tsteq	r5, pc, lsl #28
    1424:	4a2b0384 	bmi	ac223c <startup-0x1f53ddc4>
    1428:	05c00605 	strbeq	r0, [r0, #1541]	; 0x605
    142c:	01054d10 	tsteq	r5, r0, lsl sp
    1430:	1e100597 	cfcmp32ne	r0, mvfx0, mvfx7
    1434:	053c1305 	ldreq	r1, [ip, #-773]!	; 0xfffffcfb
    1438:	01054a10 	tsteq	r5, r0, lsl sl
    143c:	4a16034c 	bmi	582174 <startup-0x1fa7de8c>
    1440:	057a0d05 	ldrbeq	r0, [sl, #-3333]!	; 0xfffff2fb
    1444:	1a034b01 	bne	d4050 <startup-0x1ff2bfb0>
    1448:	750c054a 	strvc	r0, [ip, #-1354]	; 0xfffffab6
    144c:	3c1d0550 	cfldr32cc	mvfx0, [sp], {80}	; 0x50
    1450:	054a0605 	strbeq	r0, [sl, #-1541]	; 0xfffff9fb
    1454:	054e300f 	strbeq	r3, [lr, #-15]
    1458:	01054c0a 	tsteq	r5, sl, lsl #24
    145c:	4a1a033d 	bmi	682158 <startup-0x1f97dea8>
    1460:	05790e05 	ldrbeq	r0, [r9, #-3589]!	; 0xfffff1fb
    1464:	01054a0c 	tsteq	r5, ip, lsl #20
    1468:	4a16032f 	bmi	58212c <startup-0x1fa7ded4>
    146c:	4b750c05 	blmi	1d44488 <startup-0x1e2bbb78>
    1470:	054a1c05 	strbeq	r1, [sl, #-3077]	; 0xfffff3fb
    1474:	0c054f12 	stceq	15, cr4, [r5], {18}
    1478:	5a12053c 	bpl	482970 <startup-0x1fb7d690>
    147c:	053c0c05 	ldreq	r0, [ip, #-3077]!	; 0xfffff3fb
    1480:	25055906 	strcs	r5, [r5, #-2310]	; 0xfffff6fa
    1484:	01040200 	mrseq	r0, R12_usr
    1488:	4c0f054a 	cfstr32mi	mvfx0, [pc], {74}	; 0x4a
    148c:	4c0a054e 	cfstr32mi	mvfx0, [sl], {78}	; 0x4e
    1490:	033d0105 	teqeq	sp, #1073741825	; 0x40000001
    1494:	0e054a16 			; <UNDEFINED> instruction: 0x0e054a16
    1498:	4a0c0579 	bmi	302a84 <startup-0x1fcfd57c>
    149c:	032f0105 			; <UNDEFINED> instruction: 0x032f0105
    14a0:	0d054a1f 	vstreq	s8, [r5, #-124]	; 0xffffff84
    14a4:	910105c1 	smlabtls	r1, r1, r5, r0
    14a8:	054a1303 	strbeq	r1, [sl, #-771]	; 0xfffffcfd
    14ac:	1005c006 	andne	ip, r5, r6
    14b0:	9701054d 	strls	r0, [r1, -sp, asr #10]
    14b4:	051e1005 	ldreq	r1, [lr, #-5]
    14b8:	10053c13 	andne	r3, r5, r3, lsl ip
    14bc:	4c01054a 	cfstr32mi	mvfx0, [r1], {74}	; 0x4a
    14c0:	054a0a03 	strbeq	r0, [sl, #-2563]	; 0xfffff5fd
    14c4:	0f057906 	svceq	0x00057906
    14c8:	8901054d 	stmdbhi	r1, {r0, r2, r3, r6, r8, sl}
    14cc:	051e0f05 	ldreq	r0, [lr, #-3845]	; 0xfffff0fb
    14d0:	18038401 	stmdane	r3, {r0, sl, pc}
    14d4:	4f0e054a 	svcmi	0x000e054a
    14d8:	03830105 	orreq	r0, r3, #1073741825	; 0x40000001
    14dc:	03054a0f 	movweq	r4, #23055	; 0x5a0f
    14e0:	770e057a 	smlsdxvc	lr, sl, r5, r0
    14e4:	03830105 	orreq	r0, r3, #1073741825	; 0x40000001
    14e8:	06054a15 			; <UNDEFINED> instruction: 0x06054a15
    14ec:	05052708 	streq	r2, [r5, #-1800]	; 0xfffff8f8
    14f0:	0305a24c 	movweq	sl, #21068	; 0x524c
    14f4:	840e05a1 	strhi	r0, [lr], #-1441	; 0xfffffa5f
    14f8:	03830105 	orreq	r0, r3, #1073741825	; 0x40000001
    14fc:	0c054a15 			; <UNDEFINED> instruction: 0x0c054a15
    1500:	03052108 	movweq	r2, #20744	; 0x5108
    1504:	af0b0552 	svcge	0x000b0552
    1508:	6769774d 	strbvs	r7, [r9, -sp, asr #14]!
    150c:	05690e05 	strbeq	r0, [r9, #-3589]!	; 0xfffff1fb
    1510:	15034b01 	strne	r4, [r3, #-2817]	; 0xfffff4ff
    1514:	0803054a 	stmdaeq	r3, {r1, r3, r6, r8, sl}
    1518:	a10e0528 	tstge	lr, r8, lsr #10
    151c:	03910105 	orrseq	r0, r1, #1073741825	; 0x40000001
    1520:	0c054a3a 			; <UNDEFINED> instruction: 0x0c054a3a
    1524:	510b0575 	tstpl	fp, r5, ror r5
    1528:	0e05694d 	vmlseq.f16	s12, s10, s26	; <UNPREDICTABLE>
    152c:	4b010577 	blmi	42b10 <startup-0x1ffbd4f0>
    1530:	054a1903 	strbeq	r1, [sl, #-2307]	; 0xfffff6fd
    1534:	05847a0d 	streq	r7, [r4, #2573]	; 0xa0d
    1538:	0f039101 	svceq	0x00039101
    153c:	7a0e054a 	bvc	382a6c <startup-0x1fc7d594>
    1540:	91010585 	smlabbls	r1, r5, r5, r0
    1544:	054a0d03 	strbeq	r0, [sl, #-3331]	; 0xfffff2fd
    1548:	05857a0e 	streq	r7, [r5, #2574]	; 0xa0e
    154c:	15039101 	strne	r9, [r3, #-257]	; 0xfffffeff
    1550:	080c054a 	stmdaeq	ip, {r1, r3, r6, r8, sl}
    1554:	520b0521 	andpl	r0, fp, #138412032	; 0x8400000
    1558:	694f054d 	stmdbvs	pc, {r0, r2, r3, r6, r8, sl}^	; <UNPREDICTABLE>
    155c:	054a2f05 	strbeq	r2, [sl, #-3845]	; 0xfffff0fb
    1560:	0b054a0e 	bleq	153da0 <startup-0x1feac260>
    1564:	5b0e054a 	blpl	382a94 <startup-0x1fc7d56c>
    1568:	034b0105 	movteq	r0, #45317	; 0xb105
    156c:	0c054a27 			; <UNDEFINED> instruction: 0x0c054a27
    1570:	4b4b2108 	blmi	12c9998 <startup-0x1ed36668>
    1574:	09030b05 	stmdbeq	r3, {r0, r2, r8, r9, fp}
    1578:	4d0c054a 	cfstr32mi	mvfx0, [ip, #-296]	; 0xfffffed8
    157c:	4d4d0b05 	vstrmi	d16, [sp, #-20]	; 0xffffffec
    1580:	770c0575 	smlsdxvc	ip, r5, r5, r0
    1584:	770b0567 	strvc	r0, [fp, -r7, ror #10]
    1588:	05672b05 	strbeq	r2, [r7, #-2821]!	; 0xfffff4fb
    158c:	0b054a0e 	bleq	153dcc <startup-0x1feac234>
    1590:	5b0e0558 	blpl	382af8 <startup-0x1fc7d508>
    1594:	054d0f05 	strbeq	r0, [sp, #-3845]	; 0xfffff0fb
    1598:	01054d0e 	tsteq	r5, lr, lsl #26
    159c:	660b034b 	strvs	r0, [fp], -fp, asr #6
    15a0:	05790605 	ldrbeq	r0, [r9, #-1541]!	; 0xfffff9fb
    15a4:	01054d0f 	tsteq	r5, pc, lsl #26
    15a8:	1e0f0589 	cfsh32ne	mvfx0, mvfx15, #-55
    15ac:	03840105 	orreq	r0, r4, #1073741825	; 0x40000001
    15b0:	0c054a24 			; <UNDEFINED> instruction: 0x0c054a24
    15b4:	5901057a 	stmdbpl	r1, {r1, r3, r4, r5, r6, r8, sl}
    15b8:	054a1903 	strbeq	r1, [sl, #-2307]	; 0xfffff6fd
    15bc:	0521080c 	streq	r0, [r1, #-2060]!	; 0xfffff7f4
    15c0:	0e054a1a 			; <UNDEFINED> instruction: 0x0e054a1a
    15c4:	830c054d 	movwhi	r0, #50509	; 0xc54d
    15c8:	054b0b05 	strbeq	r0, [fp, #-2821]	; 0xfffff4fb
    15cc:	2c054d0c 	stccs	13, cr4, [r5], {12}
    15d0:	4a0f0567 	bmi	3c2b74 <startup-0x1fc3d48c>
    15d4:	054a0c05 	strbeq	r0, [sl, #-3077]	; 0xfffff3fb
    15d8:	05675b0b 	strbeq	r5, [r7, #-2827]!	; 0xfffff4f5
    15dc:	0e05a10f 	mvfeqs	f2, #10.0
    15e0:	4b01054b 	blmi	42b14 <startup-0x1ffbd4ec>
    15e4:	054a1603 	strbeq	r1, [sl, #-1539]	; 0xfffff9fd
    15e8:	0521080c 	streq	r0, [r1, #-2060]!	; 0xfffff7f4
    15ec:	27054a1a 	smladcs	r5, sl, sl, r4
    15f0:	4d0e054a 	cfstr32mi	mvfx0, [lr, #-296]	; 0xfffffed8
    15f4:	05830c05 	streq	r0, [r3, #3077]	; 0xc05
    15f8:	07054b0b 	streq	r4, [r5, -fp, lsl #22]
    15fc:	5b0c054b 	blpl	302b30 <startup-0x1fcfd4d0>
    1600:	05750f05 	ldrbeq	r0, [r5, #-3845]!	; 0xfffff0fb
    1604:	0f054a0c 	svceq	0x00054a0c
    1608:	580c0559 	stmdapl	ip, {r0, r3, r4, r6, r8, sl}
    160c:	675b0b05 	ldrbvs	r0, [fp, -r5, lsl #22]
    1610:	05a10f05 	streq	r0, [r1, #3845]!	; 0xf05
    1614:	01054b0e 	tsteq	r5, lr, lsl #22
    1618:	6615034b 	ldrvs	r0, [r5], -fp, asr #6
    161c:	21080c05 	tstcs	r8, r5, lsl #24
    1620:	054a1a05 	strbeq	r1, [sl, #-2565]	; 0xfffff5fb
    1624:	0e054a27 	vmlaeq.f32	s8, s10, s15
    1628:	830c054d 	movwhi	r0, #50509	; 0xc54d
    162c:	054b0b05 	strbeq	r0, [fp, #-2821]	; 0xfffff4fb
    1630:	0c054b07 			; <UNDEFINED> instruction: 0x0c054b07
    1634:	752c055b 	strvc	r0, [ip, #-1371]!	; 0xfffffaa5
    1638:	054a0f05 	strbeq	r0, [sl, #-3845]	; 0xfffff0fb
    163c:	0b05580c 	bleq	157674 <startup-0x1fea898c>
    1640:	0f05675b 	svceq	0x0005675b
    1644:	4b0e05af 	blmi	382d08 <startup-0x1fc7d2f8>
    1648:	034b0105 	movteq	r0, #45317	; 0xb105
    164c:	0c059015 	stceq	0, cr9, [r5], {21}
    1650:	1a052108 	bne	149a78 <startup-0x1feb6588>
    1654:	4a27054a 	bmi	9c2b84 <startup-0x1f63d47c>
    1658:	054d0e05 	strbeq	r0, [sp, #-3589]	; 0xfffff1fb
    165c:	0b05830c 	bleq	162294 <startup-0x1fe9dd6c>
    1660:	4b07054b 	blmi	1c2b94 <startup-0x1fe3d46c>
    1664:	055b0c05 	ldrbeq	r0, [fp, #-3077]	; 0xfffff3fb
    1668:	0c05750f 	cfstr32eq	mvfx7, [r5], {15}
    166c:	590f0558 	stmdbpl	pc, {r3, r4, r6, r8, sl}	; <UNPREDICTABLE>
    1670:	054a0c05 	strbeq	r0, [sl, #-3077]	; 0xfffff3fb
    1674:	05675b0b 	strbeq	r5, [r7, #-2827]!	; 0xfffff4f5
    1678:	0e05af0f 	cdpeq	15, 0, cr10, cr5, cr15, {0}
    167c:	4b01054b 	blmi	42bb0 <startup-0x1ffbd450>
    1680:	01000a02 	tsteq	r0, r2, lsl #20
    1684:	00033301 	andeq	r3, r3, r1, lsl #6
    1688:	06000300 	streq	r0, [r0], -r0, lsl #6
    168c:	02000002 	andeq	r0, r0, #2
    1690:	0d0efb01 	vstreq	d15, [lr, #-4]
    1694:	01010100 	mrseq	r0, (UNDEF: 17)
    1698:	00000001 	andeq	r0, r0, r1
    169c:	01000001 	tsteq	r0, r1
    16a0:	552f3a43 	strpl	r3, [pc, #-2627]!	; c65 <startup-0x1ffff39b>
    16a4:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
    16a8:	696d612f 	stmdbvs	sp!, {r0, r1, r2, r3, r5, r8, sp, lr}^
    16ac:	442f726e 	strtmi	r7, [pc], #-622	; 16b4 <startup-0x1fffe94c>
    16b0:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    16b4:	642f706f 	strtvs	r7, [pc], #-111	; 16bc <startup-0x1fffe944>
    16b8:	70617461 	rsbvc	r7, r1, r1, ror #8
    16bc:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xfffff08e
    16c0:	532f746b 			; <UNDEFINED> instruction: 0x532f746b
    16c4:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    16c8:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
    16cc:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
    16d0:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    16d4:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
    16d8:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
    16dc:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    16e0:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    16e4:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0xfffffca1
    16e8:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    16ec:	445f6870 	ldrbmi	r6, [pc], #-2160	; 16f4 <startup-0x1fffe90c>
    16f0:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    16f4:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
    16f8:	3a630063 	bcc	18c188c <startup-0x1e73e774>
    16fc:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
    1700:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
    1704:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
    1708:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
    170c:	6f6f745c 	svcvs	0x006f745c
    1710:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
    1714:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    1718:	615c6d72 	cmpvs	ip, r2, ror sp
    171c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    1720:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    1724:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    1728:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    172c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    1730:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
    1734:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
    1738:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    173c:	61657363 	cmnvs	r5, r3, ror #6
    1740:	635c7070 	cmpvs	ip, #112	; 0x70
    1744:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
    1748:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
    174c:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 1584 <startup-0x1fffea7c>
    1750:	63675c73 	cmnvs	r7, #29440	; 0x7300
    1754:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    1758:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
    175c:	6f6e2d6d 	svcvs	0x006e2d6d
    1760:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    1764:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    1768:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    176c:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    1770:	00737973 	rsbseq	r7, r3, r3, ror r9
    1774:	552f3a43 	strpl	r3, [pc, #-2627]!	; d39 <startup-0x1ffff2c7>
    1778:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
    177c:	696d612f 	stmdbvs	sp!, {r0, r1, r2, r3, r5, r8, sp, lr}^
    1780:	442f726e 	strtmi	r7, [pc], #-622	; 1788 <startup-0x1fffe878>
    1784:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    1788:	642f706f 	strtvs	r7, [pc], #-111	; 1790 <startup-0x1fffe870>
    178c:	70617461 	rsbvc	r7, r1, r1, ror #8
    1790:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xfffff08e
    1794:	532f746b 			; <UNDEFINED> instruction: 0x532f746b
    1798:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    179c:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
    17a0:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
    17a4:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    17a8:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
    17ac:	432f6269 			; <UNDEFINED> instruction: 0x432f6269
    17b0:	5349534d 	movtpl	r5, #37709	; 0x934d
    17b4:	636e492f 	cmnvs	lr, #770048	; 0xbc000
    17b8:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    17bc:	2f3a4300 	svccs	0x003a4300
    17c0:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    17c4:	6d612f73 	stclvs	15, cr2, [r1, #-460]!	; 0xfffffe34
    17c8:	2f726e69 	svccs	0x00726e69
    17cc:	6b736544 	blvs	1cdace4 <startup-0x1e32531c>
    17d0:	2f706f74 	svccs	0x00706f74
    17d4:	61746164 	cmnvs	r4, r4, ror #2
    17d8:	6a6f7270 	bvs	1bde1a0 <startup-0x1e421e60>
    17dc:	2f746b65 	svccs	0x00746b65
    17e0:	334d5453 	movtcc	r5, #54355	; 0xd453
    17e4:	5f344632 	svcpl	0x00344632
    17e8:	2f62696c 	svccs	0x0062696c
    17ec:	334d5453 	movtcc	r5, #54355	; 0xd453
    17f0:	5f344632 	svcpl	0x00344632
    17f4:	2f62696c 	svccs	0x0062696c
    17f8:	334d5453 	movtcc	r5, #54355	; 0xd453
    17fc:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
    1800:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xfffff088
    1804:	72655064 	rsbvc	r5, r5, #100	; 0x64
    1808:	5f687069 	svcpl	0x00687069
    180c:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    1810:	692f7265 	stmdbvs	pc!, {r0, r2, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    1814:	0000636e 	andeq	r6, r0, lr, ror #6
    1818:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    181c:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    1820:	78655f78 	stmdavc	r5!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1824:	632e6974 			; <UNDEFINED> instruction: 0x632e6974
    1828:	00000100 	andeq	r0, r0, r0, lsl #2
    182c:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    1830:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    1834:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    1838:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    183c:	00000200 	andeq	r0, r0, r0, lsl #4
    1840:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
    1844:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    1848:	00030068 	andeq	r0, r3, r8, rrx
    184c:	726f6300 	rsbvc	r6, pc, #0, 6
    1850:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
    1854:	00682e34 	rsbeq	r2, r8, r4, lsr lr
    1858:	73000004 	movwvc	r0, #4
    185c:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
    1860:	74735f6d 	ldrbtvc	r5, [r3], #-3949	; 0xfffff093
    1864:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    1868:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
    186c:	00050068 	andeq	r0, r5, r8, rrx
    1870:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    1874:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
    1878:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
    187c:	00000500 	andeq	r0, r0, r0, lsl #10
    1880:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    1884:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    1888:	78655f78 	stmdavc	r5!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    188c:	682e6974 	stmdavs	lr!, {r2, r4, r5, r6, r8, fp, sp, lr}
    1890:	00000500 	andeq	r0, r0, r0, lsl #10
    1894:	00010500 	andeq	r0, r1, r0, lsl #10
    1898:	2c340205 	lfmcs	f0, 4, [r4], #-20	; 0xffffffec
    189c:	ee032000 	cdp	0, 0, cr2, cr3, cr0, {0}
    18a0:	07050100 	streq	r0, [r5, -r0, lsl #2]
    18a4:	200d052f 	andcs	r0, sp, pc, lsr #10
    18a8:	052f0705 	streq	r0, [pc, #-1797]!	; 11ab <startup-0x1fffee55>
    18ac:	0705200d 	streq	r2, [r5, -sp]
    18b0:	200e052f 	andcs	r0, lr, pc, lsr #10
    18b4:	052f0705 	streq	r0, [pc, #-1797]!	; 11b7 <startup-0x1fffee49>
    18b8:	0705200e 	streq	r2, [r5, -lr]
    18bc:	200c052f 	andcs	r0, ip, pc, lsr #10
    18c0:	032f0105 			; <UNDEFINED> instruction: 0x032f0105
    18c4:	0c05740a 	cfstrseq	mvf7, [r5], {10}
    18c8:	3607054b 	strcc	r0, [r7], -fp, asr #10
    18cc:	05301605 	ldreq	r1, [r0, #-1541]!	; 0xfffff9fb
    18d0:	0f052e06 	svceq	0x00052e06
    18d4:	2e220531 	mcrcs	5, 1, r0, cr2, cr1, {1}
    18d8:	052e1205 	streq	r1, [lr, #-517]!	; 0xfffffdfb
    18dc:	053d200f 	ldreq	r2, [sp, #-15]!
    18e0:	12052e22 	andne	r2, r5, #544	; 0x220
    18e4:	200f052e 	andcs	r0, pc, lr, lsr #10
    18e8:	053e1b05 	ldreq	r1, [lr, #-2821]!	; 0xfffff4fb
    18ec:	1c053c09 	stcne	12, cr3, [r5], {9}
    18f0:	2e2e053e 	mcrcs	5, 1, r0, cr14, cr14, {1}
    18f4:	052e1c05 	streq	r1, [lr, #-3077]!	; 0xfffff3fb
    18f8:	23053f10 	movwcs	r3, #24336	; 0x5f10
    18fc:	2e13052e 	cfmul64cs	mvdx0, mvdx3, mvdx14
    1900:	3d201005 	stccc	0, cr1, [r0, #-20]!	; 0xffffffec
    1904:	052e2305 	streq	r2, [lr, #-773]!	; 0xfffffcfb
    1908:	10052e13 	andne	r2, r5, r3, lsl lr
    190c:	3f180520 	svccc	0x00180520
    1910:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
    1914:	24053112 	strcs	r3, [r5], #-274	; 0xfffffeee
    1918:	2e12052e 	cfmul64cs	mvdx0, mvdx2, mvdx14
    191c:	2e24053d 	mcrcs	5, 1, r0, cr4, cr13, {1}
    1920:	052e1205 	streq	r1, [lr, #-517]!	; 0xfffffdfb
    1924:	3c110301 	ldccc	3, cr0, [r1], {1}
    1928:	73030b05 	movwvc	r0, #15109	; 0x3b05
    192c:	2f1d0520 	svccs	0x001d0520
    1930:	053c0b05 	ldreq	r0, [ip, #-2821]!	; 0xfffff4fb
    1934:	30053e1e 	andcc	r3, r5, lr, lsl lr
    1938:	2e1e052e 	cfmul64cs	mvdx0, mvdx14, mvdx14
    193c:	0a030105 	beq	c1d58 <startup-0x1ff3e2a8>
    1940:	1b1b053c 	blne	6c2e38 <startup-0x1f93d1c8>
    1944:	053c0905 	ldreq	r0, [ip, #-2309]!	; 0xfffff6fb
    1948:	2f053f1c 	svccs	0x00053f1c
    194c:	2e1f052e 	cfmul64cs	mvdx0, mvdx15, mvdx14
    1950:	05201c05 	streq	r1, [r0, #-3077]!	; 0xfffff3fb
    1954:	09033e01 	stmdbeq	r3, {r0, r9, sl, fp, ip, sp}
    1958:	4b1e0566 	blmi	782ef8 <startup-0x1f87d108>
    195c:	3d21053d 	cfstr32cc	mvfx0, [r1, #-244]!	; 0xffffff0c
    1960:	3d01053d 	cfstr32cc	mvfx0, [r1, #-244]	; 0xffffff0c
    1964:	054a0a03 	strbeq	r0, [sl, #-2563]	; 0xfffff5fd
    1968:	01054e0f 	tsteq	r5, pc, lsl #28
    196c:	66190367 	ldrvs	r0, [r9], -r7, ror #6
    1970:	054b0e05 	strbeq	r0, [fp, #-3589]	; 0xfffff1fb
    1974:	11054e0c 	tstne	r5, ip, lsl #28
    1978:	2e06052e 	cfsh32cs	mvfx0, mvfx6, #30
    197c:	4e220f05 	cdpmi	15, 2, cr0, cr2, cr5, {0}
    1980:	054c0a05 	strbeq	r0, [ip, #-2565]	; 0xfffff5fb
    1984:	09033d01 	stmdbeq	r3, {r0, r8, sl, fp, ip, sp}
    1988:	4e070566 	cfsh32mi	mvfx0, mvfx7, #54
    198c:	05200c05 	streq	r0, [r0, #-3077]!	; 0xfffff3fb
    1990:	09032f01 	stmdbeq	r3, {r0, r8, r9, sl, fp, sp}
    1994:	4b0e0574 	blmi	382f6c <startup-0x1fc7d094>
    1998:	054e0c05 	strbeq	r0, [lr, #-3077]	; 0xfffff3fb
    199c:	06052e11 			; <UNDEFINED> instruction: 0x06052e11
    19a0:	220f052e 	andcs	r0, pc, #192937984	; 0xb800000
    19a4:	4c0a054e 	cfstr32mi	mvfx0, [sl], {78}	; 0x4e
    19a8:	033e0105 	teqeq	lr, #1073741825	; 0x40000001
    19ac:	07056609 	streq	r6, [r5, -r9, lsl #12]
    19b0:	200c054e 	andcs	r0, ip, lr, asr #10
    19b4:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
    19b8:	01010007 	tsteq	r1, r7
    19bc:	000002ca 	andeq	r0, r0, sl, asr #5
    19c0:	01f20003 	mvnseq	r0, r3
    19c4:	01020000 	mrseq	r0, (UNDEF: 2)
    19c8:	000d0efb 	strdeq	r0, [sp], -fp
    19cc:	01010101 	tsteq	r1, r1, lsl #2
    19d0:	01000000 	mrseq	r0, (UNDEF: 0)
    19d4:	43010000 	movwmi	r0, #4096	; 0x1000
    19d8:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
    19dc:	2f737265 	svccs	0x00737265
    19e0:	6e696d61 	cdpvs	13, 6, cr6, cr9, cr1, {3}
    19e4:	65442f72 	strbvs	r2, [r4, #-3954]	; 0xfffff08e
    19e8:	6f746b73 	svcvs	0x00746b73
    19ec:	61642f70 	smcvs	17136	; 0x42f0
    19f0:	72706174 	rsbsvc	r6, r0, #116, 2
    19f4:	6b656a6f 	blvs	195c3b8 <startup-0x1e6a3c48>
    19f8:	54532f74 	ldrbpl	r2, [r3], #-3956	; 0xfffff08c
    19fc:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    1a00:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
    1a04:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
    1a08:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    1a0c:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
    1a10:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
    1a14:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    1a18:	5f787834 	svcpl	0x00787834
    1a1c:	50647453 	rsbpl	r7, r4, r3, asr r4
    1a20:	70697265 	rsbvc	r7, r9, r5, ror #4
    1a24:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
    1a28:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    1a2c:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    1a30:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    1a34:	61657363 	cmnvs	r5, r3, ror #6
    1a38:	635c7070 	cmpvs	ip, #112	; 0x70
    1a3c:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
    1a40:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
    1a44:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 187c <startup-0x1fffe784>
    1a48:	63675c73 	cmnvs	r7, #29440	; 0x7300
    1a4c:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    1a50:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
    1a54:	6f6e2d6d 	svcvs	0x006e2d6d
    1a58:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    1a5c:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    1a60:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    1a64:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    1a68:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    1a6c:	00656e69 	rsbeq	r6, r5, r9, ror #28
    1a70:	635c3a63 	cmpvs	ip, #405504	; 0x63000
    1a74:	70616573 	rsbvc	r6, r1, r3, ror r5
    1a78:	6f635c70 	svcvs	0x00635c70
    1a7c:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
    1a80:	745c6574 	ldrbvc	r6, [ip], #-1396	; 0xfffffa8c
    1a84:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    1a88:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    1a8c:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    1a90:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    1a94:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    1a98:	61652d65 	cmnvs	r5, r5, ror #26
    1a9c:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    1aa0:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    1aa4:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
    1aa8:	43007379 	movwmi	r7, #889	; 0x379
    1aac:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
    1ab0:	2f737265 	svccs	0x00737265
    1ab4:	6e696d61 	cdpvs	13, 6, cr6, cr9, cr1, {3}
    1ab8:	65442f72 	strbvs	r2, [r4, #-3954]	; 0xfffff08e
    1abc:	6f746b73 	svcvs	0x00746b73
    1ac0:	61642f70 	smcvs	17136	; 0x42f0
    1ac4:	72706174 	rsbsvc	r6, r0, #116, 2
    1ac8:	6b656a6f 	blvs	195c48c <startup-0x1e6a3b74>
    1acc:	54532f74 	ldrbpl	r2, [r3], #-3956	; 0xfffff08c
    1ad0:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    1ad4:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
    1ad8:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
    1adc:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    1ae0:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
    1ae4:	4d432f62 	stclmi	15, cr2, [r3, #-392]	; 0xfffffe78
    1ae8:	2f534953 	svccs	0x00534953
    1aec:	6c636e49 	stclvs	14, cr6, [r3], #-292	; 0xfffffedc
    1af0:	00656475 	rsbeq	r6, r5, r5, ror r4
    1af4:	552f3a43 	strpl	r3, [pc, #-2627]!	; 10b9 <startup-0x1fffef47>
    1af8:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
    1afc:	696d612f 	stmdbvs	sp!, {r0, r1, r2, r3, r5, r8, sp, lr}^
    1b00:	442f726e 	strtmi	r7, [pc], #-622	; 1b08 <startup-0x1fffe4f8>
    1b04:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    1b08:	642f706f 	strtvs	r7, [pc], #-111	; 1b10 <startup-0x1fffe4f0>
    1b0c:	70617461 	rsbvc	r7, r1, r1, ror #8
    1b10:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xfffff08e
    1b14:	532f746b 			; <UNDEFINED> instruction: 0x532f746b
    1b18:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    1b1c:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
    1b20:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
    1b24:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    1b28:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
    1b2c:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
    1b30:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    1b34:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    1b38:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0xfffffca1
    1b3c:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    1b40:	445f6870 	ldrbmi	r6, [pc], #-2160	; 1b48 <startup-0x1fffe4b8>
    1b44:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    1b48:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    1b4c:	6d000063 	stcvs	0, cr0, [r0, #-396]	; 0xfffffe74
    1b50:	2e637369 	cdpcs	3, 6, cr7, cr3, cr9, {3}
    1b54:	00010063 	andeq	r0, r1, r3, rrx
    1b58:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    1b5c:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    1b60:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1b64:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    1b68:	00020068 	andeq	r0, r2, r8, rrx
    1b6c:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    1b70:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    1b74:	0300682e 	movweq	r6, #2094	; 0x82e
    1b78:	6f630000 	svcvs	0x00630000
    1b7c:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
    1b80:	682e346d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, ip, sp}
    1b84:	00000400 	andeq	r0, r0, r0, lsl #8
    1b88:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
    1b8c:	735f6d65 	cmpvc	pc, #6464	; 0x1940
    1b90:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    1b94:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    1b98:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    1b9c:	74730000 	ldrbtvc	r0, [r3], #-0
    1ba0:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    1ba4:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
    1ba8:	00050068 	andeq	r0, r5, r8, rrx
    1bac:	73696d00 	cmnvc	r9, #0, 26
    1bb0:	00682e63 	rsbeq	r2, r8, r3, ror #28
    1bb4:	00000005 	andeq	r0, r0, r5
    1bb8:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    1bbc:	002e3c02 	eoreq	r3, lr, r2, lsl #24
    1bc0:	00f60320 	rscseq	r0, r6, r0, lsr #6
    1bc4:	4f060501 	svcmi	0x00060501
    1bc8:	05202305 	streq	r2, [r0, #-773]!	; 0xfffffcfb
    1bcc:	01053c0e 	tsteq	r5, lr, lsl #24
    1bd0:	900c0321 	andls	r0, ip, r1, lsr #6
    1bd4:	054b0b05 	strbeq	r0, [fp, #-2821]	; 0xfffff4fb
    1bd8:	2e054a1f 			; <UNDEFINED> instruction: 0x2e054a1f
    1bdc:	5116054a 	tstpl	r6, sl, asr #10
    1be0:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
    1be4:	1a053121 	bne	14e070 <startup-0x1feb1f90>
    1be8:	203d052e 	eorscs	r0, sp, lr, lsr #10
    1bec:	052e1105 	streq	r1, [lr, #-261]!	; 0xfffffefb
    1bf0:	1505590c 	strne	r5, [r5, #-2316]	; 0xfffff6f4
    1bf4:	660c0567 	strvs	r0, [ip], -r7, ror #10
    1bf8:	05302205 	ldreq	r2, [r0, #-517]!	; 0xfffffdfb
    1bfc:	11053c46 	tstne	r5, r6, asr #24
    1c00:	3d2e053c 	cfstr32cc	mvfx0, [lr, #-240]!	; 0xffffff10
    1c04:	052e1505 	streq	r1, [lr, #-1285]!	; 0xfffffafb
    1c08:	055a4a11 	ldrbeq	r4, [sl, #-2577]	; 0xfffff5ef
    1c0c:	1d055a09 	vstrne	s10, [r5, #-36]	; 0xffffffdc
    1c10:	3c300520 	cfldr32cc	mvfx0, [r0], #-128	; 0xffffff80
    1c14:	05782905 	ldrbeq	r2, [r8, #-2309]!	; 0xfffff6fb
    1c18:	09052e3b 	stmdbeq	r5, {r0, r1, r3, r4, r5, r9, sl, fp, sp}
    1c1c:	201f053b 	andscs	r0, pc, fp, lsr r5	; <UNPREDICTABLE>
    1c20:	052e3105 	streq	r3, [lr, #-261]!	; 0xfffffefb
    1c24:	3a053d16 	bcc	151084 <startup-0x1feaef7c>
    1c28:	0301052d 	movweq	r0, #5421	; 0x152d
    1c2c:	29052e09 	stmdbcs	r5, {r0, r3, r9, sl, fp, sp}
    1c30:	2e3b051e 	mrccs	5, 1, r0, cr11, cr14, {0}
    1c34:	053b0905 	ldreq	r0, [fp, #-2309]!	; 0xfffff6fb
    1c38:	3105201f 	tstcc	r5, pc, lsl r0
    1c3c:	3d16052e 	cfldr32cc	mvfx0, [r6, #-184]	; 0xffffff48
    1c40:	052d3a05 	streq	r3, [sp, #-2565]!	; 0xfffff5fb
    1c44:	0c034d01 	stceq	13, cr4, [r3], {1}
    1c48:	5d260590 	cfstr32pl	mvfx0, [r6, #-576]!	; 0xfffffdc0
    1c4c:	054a0605 	strbeq	r0, [sl, #-1541]	; 0xfffff9fb
    1c50:	0d05201c 	stceq	0, cr2, [r5, #-112]	; 0xffffff90
    1c54:	2101052e 	tstcs	r1, lr, lsr #10
    1c58:	05900d03 	ldreq	r0, [r0, #3331]	; 0xd03
    1c5c:	0e059506 	cfsh32eq	mvfx9, mvfx5, #6
    1c60:	7a01054c 	bvc	43198 <startup-0x1ffbce68>
    1c64:	051e0e05 	ldreq	r0, [lr, #-3589]	; 0xfffff1fb
    1c68:	11052e1d 	tstne	r5, sp, lsl lr
    1c6c:	200e052e 	andcs	r0, lr, lr, lsr #10
    1c70:	033e0105 	teqeq	lr, #1073741825	; 0x40000001
    1c74:	0605740b 	streq	r7, [r5], -fp, lsl #8
    1c78:	3e13054d 	cfmac32cc	mvfx0, mvfx3, mvfx13
    1c7c:	056c0105 	strbeq	r0, [ip, #-261]!	; 0xfffffefb
    1c80:	01051e13 	tsteq	r5, r3, lsl lr
    1c84:	00060268 	andeq	r0, r6, r8, ror #4
    1c88:	00ce0101 	sbceq	r0, lr, r1, lsl #2
    1c8c:	00030000 	andeq	r0, r3, r0
    1c90:	0000003e 	andeq	r0, r0, lr, lsr r0
    1c94:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    1c98:	0101000d 	tsteq	r1, sp
    1c9c:	00000101 	andeq	r0, r0, r1, lsl #2
    1ca0:	00000100 	andeq	r0, r0, r0, lsl #2
    1ca4:	2f3a4301 	svccs	0x003a4301
    1ca8:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    1cac:	6d612f73 	stclvs	15, cr2, [r1, #-460]!	; 0xfffffe34
    1cb0:	2f726e69 	svccs	0x00726e69
    1cb4:	6b736544 	blvs	1cdb1cc <startup-0x1e324e34>
    1cb8:	2f706f74 	svccs	0x00706f74
    1cbc:	74616863 	strbtvc	r6, [r1], #-2147	; 0xfffff79d
    1cc0:	7070615f 	rsbsvc	r6, r0, pc, asr r1
    1cc4:	73750000 	cmnvc	r5, #0
    1cc8:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
    1ccc:	00010063 	andeq	r0, r1, r3, rrx
    1cd0:	19050000 	stmdbne	r5, {}	; <UNPREDICTABLE>
    1cd4:	fc020500 	stc2	5, cr0, [r2], {-0}
    1cd8:	0320002f 			; <UNDEFINED> instruction: 0x0320002f
    1cdc:	0b050114 	bleq	142134 <startup-0x1febdecc>
    1ce0:	00140568 	andseq	r0, r4, r8, ror #10
    1ce4:	20010402 	andcs	r0, r1, r2, lsl #8
    1ce8:	02001905 	andeq	r1, r0, #81920	; 0x14000
    1cec:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
    1cf0:	0402000b 	streq	r0, [r2], #-11
    1cf4:	05223c01 	streq	r3, [r2, #-3073]!	; 0xfffff3ff
    1cf8:	10052012 	andne	r2, r5, r2, lsl r0
    1cfc:	2107053c 	tstcs	r7, ip, lsr r5
    1d00:	054b0905 	strbeq	r0, [fp, #-2309]	; 0xfffff6fb
    1d04:	16053d01 	strne	r3, [r5], -r1, lsl #26
    1d08:	30100568 	andscc	r0, r0, r8, ror #10
    1d0c:	053c1505 	ldreq	r1, [ip, #-1285]!	; 0xfffffafb
    1d10:	10053c07 	andne	r3, r5, r7, lsl #24
    1d14:	2f190521 	svccs	0x00190521
    1d18:	053c0c05 	ldreq	r0, [ip, #-3077]!	; 0xfffff3fb
    1d1c:	15052101 	strne	r2, [r5, #-257]	; 0xfffffeff
    1d20:	300a055a 	andcc	r0, sl, sl, asr r5
    1d24:	02001305 	andeq	r1, r0, #335544320	; 0x14000000
    1d28:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
    1d2c:	04020018 	streq	r0, [r2], #-24	; 0xffffffe8
    1d30:	0a053c01 	beq	150d3c <startup-0x1feaf2c4>
    1d34:	01040200 	mrseq	r0, R12_usr
    1d38:	2119053c 	tstcs	r9, ip, lsr r5
    1d3c:	053c0c05 	ldreq	r0, [ip, #-3077]!	; 0xfffff3fb
    1d40:	14052101 	strne	r2, [r5], #-257	; 0xfffffeff
    1d44:	4b0b0568 	blmi	2c32ec <startup-0x1fd3cd14>
    1d48:	05211505 	streq	r1, [r1, #-1285]!	; 0xfffffafb
    1d4c:	0c053c09 	stceq	12, cr3, [r5], {9}
    1d50:	2e0b0549 	cfsh32cs	mvfx0, mvfx11, #41
    1d54:	02300105 	eorseq	r0, r0, #1073741825	; 0x40000001
    1d58:	01010005 	tsteq	r1, r5
    1d5c:	000007d5 	ldrdeq	r0, [r0], -r5
    1d60:	02040003 	andeq	r0, r4, #3
    1d64:	01020000 	mrseq	r0, (UNDEF: 2)
    1d68:	000d0efb 	strdeq	r0, [sp], -fp
    1d6c:	01010101 	tsteq	r1, r1, lsl #2
    1d70:	01000000 	mrseq	r0, (UNDEF: 0)
    1d74:	43010000 	movwmi	r0, #4096	; 0x1000
    1d78:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
    1d7c:	2f737265 	svccs	0x00737265
    1d80:	6e696d61 	cdpvs	13, 6, cr6, cr9, cr1, {3}
    1d84:	65442f72 	strbvs	r2, [r4, #-3954]	; 0xfffff08e
    1d88:	6f746b73 	svcvs	0x00746b73
    1d8c:	61642f70 	smcvs	17136	; 0x42f0
    1d90:	72706174 	rsbsvc	r6, r0, #116, 2
    1d94:	6b656a6f 	blvs	195c758 <startup-0x1e6a38a8>
    1d98:	54532f74 	ldrbpl	r2, [r3], #-3956	; 0xfffff08c
    1d9c:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    1da0:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
    1da4:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
    1da8:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    1dac:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
    1db0:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
    1db4:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    1db8:	5f787834 	svcpl	0x00787834
    1dbc:	50647453 	rsbpl	r7, r4, r3, asr r4
    1dc0:	70697265 	rsbvc	r7, r9, r5, ror #4
    1dc4:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
    1dc8:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    1dcc:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    1dd0:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    1dd4:	61657363 	cmnvs	r5, r3, ror #6
    1dd8:	635c7070 	cmpvs	ip, #112	; 0x70
    1ddc:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
    1de0:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
    1de4:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 1c1c <startup-0x1fffe3e4>
    1de8:	63675c73 	cmnvs	r7, #29440	; 0x7300
    1dec:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    1df0:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
    1df4:	6f6e2d6d 	svcvs	0x006e2d6d
    1df8:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    1dfc:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    1e00:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    1e04:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    1e08:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    1e0c:	00656e69 	rsbeq	r6, r5, r9, ror #28
    1e10:	635c3a63 	cmpvs	ip, #405504	; 0x63000
    1e14:	70616573 	rsbvc	r6, r1, r3, ror r5
    1e18:	6f635c70 	svcvs	0x00635c70
    1e1c:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
    1e20:	745c6574 	ldrbvc	r6, [ip], #-1396	; 0xfffffa8c
    1e24:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    1e28:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    1e2c:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    1e30:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    1e34:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    1e38:	61652d65 	cmnvs	r5, r5, ror #26
    1e3c:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    1e40:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    1e44:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
    1e48:	43007379 	movwmi	r7, #889	; 0x379
    1e4c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
    1e50:	2f737265 	svccs	0x00737265
    1e54:	6e696d61 	cdpvs	13, 6, cr6, cr9, cr1, {3}
    1e58:	65442f72 	strbvs	r2, [r4, #-3954]	; 0xfffff08e
    1e5c:	6f746b73 	svcvs	0x00746b73
    1e60:	61642f70 	smcvs	17136	; 0x42f0
    1e64:	72706174 	rsbsvc	r6, r0, #116, 2
    1e68:	6b656a6f 	blvs	195c82c <startup-0x1e6a37d4>
    1e6c:	54532f74 	ldrbpl	r2, [r3], #-3956	; 0xfffff08c
    1e70:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    1e74:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
    1e78:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
    1e7c:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    1e80:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
    1e84:	4d432f62 	stclmi	15, cr2, [r3, #-392]	; 0xfffffe78
    1e88:	2f534953 	svccs	0x00534953
    1e8c:	6c636e49 	stclvs	14, cr6, [r3], #-292	; 0xfffffedc
    1e90:	00656475 	rsbeq	r6, r5, r5, ror r4
    1e94:	552f3a43 	strpl	r3, [pc, #-2627]!	; 1459 <startup-0x1fffeba7>
    1e98:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
    1e9c:	696d612f 	stmdbvs	sp!, {r0, r1, r2, r3, r5, r8, sp, lr}^
    1ea0:	442f726e 	strtmi	r7, [pc], #-622	; 1ea8 <startup-0x1fffe158>
    1ea4:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    1ea8:	642f706f 	strtvs	r7, [pc], #-111	; 1eb0 <startup-0x1fffe150>
    1eac:	70617461 	rsbvc	r7, r1, r1, ror #8
    1eb0:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xfffff08e
    1eb4:	532f746b 			; <UNDEFINED> instruction: 0x532f746b
    1eb8:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    1ebc:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
    1ec0:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
    1ec4:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    1ec8:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
    1ecc:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
    1ed0:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    1ed4:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    1ed8:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0xfffffca1
    1edc:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    1ee0:	445f6870 	ldrbmi	r6, [pc], #-2160	; 1ee8 <startup-0x1fffe118>
    1ee4:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    1ee8:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    1eec:	73000063 	movwvc	r0, #99	; 0x63
    1ef0:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    1ef4:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    1ef8:	6363725f 	cmnvs	r3, #-268435451	; 0xf0000005
    1efc:	0100632e 	tsteq	r0, lr, lsr #6
    1f00:	645f0000 	ldrbvs	r0, [pc], #-0	; 1f08 <startup-0x1fffe0f8>
    1f04:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
    1f08:	745f746c 	ldrbvc	r7, [pc], #-1132	; 1f10 <startup-0x1fffe0f0>
    1f0c:	73657079 	cmnvc	r5, #121	; 0x79
    1f10:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    1f14:	735f0000 	cmpvc	pc, #0
    1f18:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    1f1c:	00682e74 	rsbeq	r2, r8, r4, ror lr
    1f20:	63000003 	movwvs	r0, #3
    1f24:	5f65726f 	svcpl	0x0065726f
    1f28:	2e346d63 	cdpcs	13, 3, cr6, cr4, cr3, {3}
    1f2c:	00040068 	andeq	r0, r4, r8, rrx
    1f30:	73797300 	cmnvc	r9, #0, 6
    1f34:	5f6d6574 	svcpl	0x006d6574
    1f38:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    1f3c:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    1f40:	00682e78 	rsbeq	r2, r8, r8, ror lr
    1f44:	73000005 	movwvc	r0, #5
    1f48:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    1f4c:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    1f50:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    1f54:	74730000 	ldrbtvc	r0, [r3], #-0
    1f58:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    1f5c:	5f787834 	svcpl	0x00787834
    1f60:	2e636372 	mcrcs	3, 3, r6, cr3, cr2, {3}
    1f64:	00050068 	andeq	r0, r5, r8, rrx
    1f68:	01050000 	mrseq	r0, (UNDEF: 5)
    1f6c:	b8020500 	stmdalt	r2, {r8, sl}
    1f70:	03200030 			; <UNDEFINED> instruction: 0x03200030
    1f74:	050101e1 	streq	r0, [r1, #-481]	; 0xfffffe1f
    1f78:	0605300b 	streq	r3, [r5], -fp
    1f7c:	200d0569 	andcs	r0, sp, r9, ror #10
    1f80:	05310b05 	ldreq	r0, [r1, #-2821]!	; 0xfffff4fb
    1f84:	10056906 	andne	r6, r5, r6, lsl #18
    1f88:	32060520 	andcc	r0, r6, #32, 10	; 0x8000000
    1f8c:	05201305 	streq	r1, [r0, #-773]!	; 0xfffffcfb
    1f90:	13054106 	movwne	r4, #20742	; 0x5106
    1f94:	400b0520 	andmi	r0, fp, r0, lsr #10
    1f98:	05690605 	strbeq	r0, [r9, #-1541]!	; 0xfffff9fb
    1f9c:	0605200c 	streq	r2, [r5], -ip
    1fa0:	20100531 	andscs	r0, r0, r1, lsr r5
    1fa4:	03420105 	movteq	r0, #8453	; 0x2105
    1fa8:	0305e417 	movweq	lr, #21527	; 0x5417
    1fac:	2026056b 	eorcs	r0, r6, fp, ror #10
    1fb0:	05310305 	ldreq	r0, [r1, #-773]!	; 0xfffffcfb
    1fb4:	01052026 	tsteq	r5, r6, lsr #32
    1fb8:	740f033d 	strvc	r0, [pc], #-829	; 1fc0 <startup-0x1fffe040>
    1fbc:	053d1105 	ldreq	r1, [sp, #-261]!	; 0xfffffefb
    1fc0:	0e052f0f 	cdpeq	15, 0, cr2, cr5, cr15, {0}
    1fc4:	0011053d 	andseq	r0, r1, sp, lsr r5
    1fc8:	40020402 	andmi	r0, r2, r2, lsl #8
    1fcc:	02001305 	andeq	r1, r0, #335544320	; 0x14000000
    1fd0:	05670204 	strbeq	r0, [r7, #-516]!	; 0xfffffdfc
    1fd4:	0402001b 	streq	r0, [r2], #-27	; 0xffffffe5
    1fd8:	03053d02 	movweq	r3, #23810	; 0x5d02
    1fdc:	02040200 	andeq	r0, r4, #0, 4
    1fe0:	00330520 	eorseq	r0, r3, r0, lsr #10
    1fe4:	4a010402 	bmi	42ff4 <startup-0x1ffbd00c>
    1fe8:	054c0705 	strbeq	r0, [ip, #-1797]	; 0xfffff8fb
    1fec:	0c054a06 			; <UNDEFINED> instruction: 0x0c054a06
    1ff0:	0a054e22 	beq	155880 <startup-0x1feaa780>
    1ff4:	2f01053e 	svccs	0x0001053e
    1ff8:	054a0b03 	strbeq	r0, [sl, #-2819]	; 0xfffff4fd
    1ffc:	0f05670c 	svceq	0x0005670c
    2000:	200a0532 	andcs	r0, sl, r2, lsr r5
    2004:	4d0d0531 	cfstr32mi	mvfx0, [sp, #-196]	; 0xffffff3c
    2008:	052e2b05 	streq	r2, [lr, #-2821]!	; 0xfffff4fb
    200c:	0605200a 	streq	r2, [r5], -sl
    2010:	200b053f 	andcs	r0, fp, pc, lsr r5
    2014:	032f0105 			; <UNDEFINED> instruction: 0x032f0105
    2018:	03057415 	movweq	r7, #21525	; 0x5415
    201c:	2024056a 	eorcs	r0, r4, sl, ror #10
    2020:	052e2205 	streq	r2, [lr, #-517]!	; 0xfffffdfb
    2024:	14032101 	strne	r2, [r3], #-257	; 0xfffffeff
    2028:	6c030566 	cfstr32vs	mvfx0, [r3], {102}	; 0x66
    202c:	05202205 	streq	r2, [r0, #-517]!	; 0xfffffdfb
    2030:	22053103 	andcs	r3, r5, #-1073741824	; 0xc0000000
    2034:	31030520 	tstcc	r3, r0, lsr #10
    2038:	0b030705 	bleq	c3c54 <startup-0x1ff3c3ac>
    203c:	20790366 	rsbscs	r0, r9, r6, ror #6
    2040:	05202605 	streq	r2, [r0, #-1541]!	; 0xfffff9fb
    2044:	05232f07 	streq	r2, [r3, #-3847]!	; 0xfffff0f9
    2048:	07052026 	streq	r2, [r5, -r6, lsr #32]
    204c:	2401052f 	strcs	r0, [r1], #-1327	; 0xfffffad1
    2050:	05740f03 	ldrbeq	r0, [r4, #-3843]!	; 0xfffff0fd
    2054:	25056a03 	strcs	r6, [r5, #-2563]	; 0xfffff5fd
    2058:	2e230520 	cfsh64cs	mvdx0, mvdx3, #16
    205c:	03210105 			; <UNDEFINED> instruction: 0x03210105
    2060:	056600de 	strbeq	r0, [r6, #-222]!	; 0xffffff22
    2064:	17057c1f 	smladne	r5, pc, ip, r7	; <UNPREDICTABLE>
    2068:	2e2f052e 	cfsh64cs	mvdx0, mvdx15, #30
    206c:	052e3505 	streq	r3, [lr, #-1285]!	; 0xfffffafb
    2070:	25052039 	strcs	r2, [r5, #-57]	; 0xffffffc7
    2074:	20400520 	subcs	r0, r0, r0, lsr #10
    2078:	053d1805 	ldreq	r1, [sp, #-2053]!	; 0xfffff7fb
    207c:	52052d06 	andpl	r2, r5, #384	; 0x180
    2080:	20100520 	andscs	r0, r0, r0, lsr #10
    2084:	03220105 			; <UNDEFINED> instruction: 0x03220105
    2088:	0305660e 	movweq	r6, #22030	; 0x560e
    208c:	20240569 	eorcs	r0, r4, r9, ror #10
    2090:	052e2205 	streq	r2, [lr, #-517]!	; 0xfffffdfb
    2094:	1a032101 	bne	ca4a0 <startup-0x1ff35b60>
    2098:	5d1e0566 	cfldr32pl	mvfx0, [lr, #-408]	; 0xfffffe68
    209c:	052e2f05 	streq	r2, [lr, #-3845]!	; 0xfffff0fb
    20a0:	24052e06 	strcs	r2, [r5], #-3590	; 0xfffff1fa
    20a4:	20130520 	andscs	r0, r3, r0, lsr #10
    20a8:	032f0105 			; <UNDEFINED> instruction: 0x032f0105
    20ac:	05740185 	ldrbeq	r0, [r4, #-389]!	; 0xfffffe7b
    20b0:	27056903 	strcs	r6, [r5, -r3, lsl #18]
    20b4:	2e250520 	cfsh64cs	mvdx0, mvdx5, #16
    20b8:	03210105 			; <UNDEFINED> instruction: 0x03210105
    20bc:	056600e9 	strbeq	r0, [r6, #-233]!	; 0xffffff17
    20c0:	2f056c1e 	svccs	0x00056c1e
    20c4:	2e24052e 	cfsh64cs	mvdx0, mvdx4, #30
    20c8:	05204105 	streq	r4, [r0, #-261]!	; 0xfffffefb
    20cc:	36052e06 	strcc	r2, [r5], -r6, lsl #28
    20d0:	20130520 	andscs	r0, r3, r0, lsr #10
    20d4:	032f0105 			; <UNDEFINED> instruction: 0x032f0105
    20d8:	0305740d 	movweq	r7, #21517	; 0x540d
    20dc:	20270569 	eorcs	r0, r7, r9, ror #10
    20e0:	052e2505 	streq	r2, [lr, #-1285]!	; 0xfffffafb
    20e4:	0e032101 	adfeqs	f2, f3, f1
    20e8:	69030566 	stmdbvs	r3, {r1, r2, r5, r6, r8, sl}
    20ec:	05202405 	streq	r2, [r0, #-1029]!	; 0xfffffbfb
    20f0:	01052e22 	tsteq	r5, r2, lsr #28
    20f4:	66150321 	ldrvs	r0, [r5], -r1, lsr #6
    20f8:	05590c05 	ldrbeq	r0, [r9, #-3077]	; 0xfffff3fb
    20fc:	0a05340f 	beq	14f140 <startup-0x1feb0ec0>
    2100:	1c053120 	stfnes	f3, [r5], {32}
    2104:	3c0a054d 	cfstr32cc	mvfx0, [sl], {77}	; 0x4d
    2108:	053f0605 	ldreq	r0, [pc, #-1541]!	; 1b0b <startup-0x1fffe4f5>
    210c:	0105200d 	tsteq	r5, sp
    2110:	90180333 	andsls	r0, r8, r3, lsr r3
    2114:	05590c05 	ldrbeq	r0, [r9, #-3077]	; 0xfffff3fb
    2118:	0a05340f 	beq	14f15c <startup-0x1feb0ea4>
    211c:	1c053120 	stfnes	f3, [r5], {32}
    2120:	3c0a054d 	cfstr32cc	mvfx0, [sl], {77}	; 0x4d
    2124:	053f0605 	ldreq	r0, [pc, #-1541]!	; 1b27 <startup-0x1fffe4d9>
    2128:	0105200d 	tsteq	r5, sp
    212c:	01b30333 			; <UNDEFINED> instruction: 0x01b30333
    2130:	4b0c0574 	blmi	303708 <startup-0x1fcfc8f8>
    2134:	05330f05 	ldreq	r0, [r3, #-3845]!	; 0xfffff0fb
    2138:	4d31200a 	ldcmi	0, cr2, [r1, #-40]!	; 0xffffffd8
    213c:	054d0605 	strbeq	r0, [sp, #-1541]	; 0xfffff9fb
    2140:	0105200d 	tsteq	r5, sp
    2144:	660d032f 	strvs	r0, [sp], -pc, lsr #6
    2148:	052f1805 	streq	r1, [pc, #-2053]!	; 194b <startup-0x1fffe6b5>
    214c:	01052e0b 	tsteq	r5, fp, lsl #28
    2150:	6617034b 	ldrvs	r0, [r7], -fp, asr #6
    2154:	054b0c05 	strbeq	r0, [fp, #-3077]	; 0xfffff3fb
    2158:	0a05330f 	beq	14ed9c <startup-0x1feb1264>
    215c:	054d3120 	strbeq	r3, [sp, #-288]	; 0xfffffee0
    2160:	0d054d06 	stceq	13, cr4, [r5, #-24]	; 0xffffffe8
    2164:	2f010520 	svccs	0x00010520
    2168:	05660f03 	strbeq	r0, [r6, #-3843]!	; 0xfffff0fd
    216c:	0f054b0c 	svceq	0x00054b0c
    2170:	200a0533 	andcs	r0, sl, r3, lsr r5
    2174:	06054d31 			; <UNDEFINED> instruction: 0x06054d31
    2178:	200d054d 	andcs	r0, sp, sp, asr #10
    217c:	032f0105 			; <UNDEFINED> instruction: 0x032f0105
    2180:	0c05820f 	sfmeq	f0, 1, [r5], {15}
    2184:	330f054b 	movwcc	r0, #62795	; 0xf54b
    2188:	31200a05 			; <UNDEFINED> instruction: 0x31200a05
    218c:	054d1605 	strbeq	r1, [sp, #-1541]	; 0xfffff9fb
    2190:	06052e0a 	streq	r2, [r5], -sl, lsl #28
    2194:	200d053f 	andcs	r0, sp, pc, lsr r5
    2198:	032f0105 			; <UNDEFINED> instruction: 0x032f0105
    219c:	0c059024 	stceq	0, cr9, [r5], {36}	; 0x24
    21a0:	2e15054b 	cfmac32cs	mvfx0, mvfx5, mvfx11
    21a4:	052e2005 	streq	r2, [lr, #-5]!
    21a8:	36052e2c 	strcc	r2, [r5], -ip, lsr #28
    21ac:	2e45052e 	cdpcs	5, 4, cr0, cr5, cr14, {1}
    21b0:	05340c05 	ldreq	r0, [r4, #-3077]!	; 0xfffff3fb
    21b4:	03052e07 	movweq	r2, #24071	; 0x5e07
    21b8:	cb22053e 	blgt	8836b8 <startup-0x1f77c948>
    21bc:	053d0505 	ldreq	r0, [sp, #-1285]!	; 0xfffffafb
    21c0:	05052222 	streq	r2, [r5, #-546]	; 0xfffffdde
    21c4:	2615053d 			; <UNDEFINED> instruction: 0x2615053d
    21c8:	052e3505 	streq	r3, [lr, #-1285]!	; 0xfffffafb
    21cc:	053d200f 	ldreq	r2, [sp, #-15]!
    21d0:	08052e0a 	stmdaeq	r5, {r1, r3, r9, sl, fp, sp}
    21d4:	3f1b053e 	svccc	0x001b053e
    21d8:	05662a05 	strbeq	r2, [r6, #-2565]!	; 0xfffff5fb
    21dc:	0e052e48 	cdpeq	14, 0, cr2, cr5, cr8, {2}
    21e0:	411b053c 	tstmi	fp, ip, lsr r5
    21e4:	05662a05 	strbeq	r2, [r6, #-2565]!	; 0xfffff5fb
    21e8:	0e052e48 	cdpeq	14, 0, cr2, cr5, cr8, {2}
    21ec:	3112053c 	tstcc	r2, ip, lsr r5
    21f0:	052e3005 	streq	r3, [lr, #-5]!
    21f4:	0a053c36 	beq	1512d4 <startup-0x1feaed2c>
    21f8:	2f2a0520 	svccs	0x002a0520
    21fc:	05662205 	strbeq	r2, [r6, #-517]!	; 0xfffffdfb
    2200:	22052f05 	andcs	r2, r5, #5, 30
    2204:	05201b03 	streq	r1, [r0, #-2819]!	; 0xfffff4fd
    2208:	0c053d05 	stceq	13, cr3, [r5], {5}
    220c:	2e070525 	cfsh32cs	mvfx0, mvfx7, #21
    2210:	3d1b053d 	cfldr32cc	mvfx0, [fp, #-244]	; 0xffffff0c
    2214:	05580905 	ldrbeq	r0, [r8, #-2309]	; 0xfffff6fb
    2218:	3d05222a 	sfmcc	f2, 4, [r5, #-168]	; 0xffffff58
    221c:	2e1e052e 	cfmul64cs	mvdx0, mvdx14, mvdx14
    2220:	05310c05 	ldreq	r0, [r1, #-3077]!	; 0xfffff3fb
    2224:	054b2e07 	strbeq	r2, [fp, #-3591]	; 0xfffff1f9
    2228:	09053d1b 	stmdbeq	r5, {r0, r1, r3, r4, r8, sl, fp, ip, sp}
    222c:	222b0558 	eorcs	r0, fp, #88, 10	; 0x16000000
    2230:	052e3c05 	streq	r3, [lr, #-3077]!	; 0xfffff3fb
    2234:	0c052e1f 	stceq	14, cr2, [r5], {31}
    2238:	2e070531 	mcrcs	5, 0, r0, cr7, cr1, {1}
    223c:	3d1b054b 	cfldr32cc	mvfx0, [fp, #-300]	; 0xfffffed4
    2240:	05580905 	ldrbeq	r0, [r8, #-2309]	; 0xfffff6fb
    2244:	3c05222b 	sfmcc	f2, 4, [r5], {43}	; 0x2b
    2248:	2e1f052e 	cfmul64cs	mvdx0, mvdx15, mvdx14
    224c:	032f0105 			; <UNDEFINED> instruction: 0x032f0105
    2250:	0c05ba3f 			; <UNDEFINED> instruction: 0x0c05ba3f
    2254:	3319054b 	tstcc	r9, #314572800	; 0x12c00000
    2258:	054a0605 	strbeq	r0, [sl, #-1541]	; 0xfffff9fb
    225c:	0c054c11 	stceq	12, cr4, [r5], {17}
    2260:	21053120 	tstcs	r5, r0, lsr #2
    2264:	3c0c054d 	cfstr32cc	mvfx0, [ip], {77}	; 0x4d
    2268:	053f0805 	ldreq	r0, [pc, #-2053]!	; 1a6b <startup-0x1fffe595>
    226c:	0d05200f 	stceq	0, cr2, [r5, #-60]	; 0xffffffc4
    2270:	2e220532 	mcrcs	5, 1, r0, cr2, cr2, {1}
    2274:	053c0d05 	ldreq	r0, [ip, #-3333]!	; 0xfffff2fb
    2278:	0a033d01 	beq	d1684 <startup-0x1ff2e97c>
    227c:	6a03059e 	bvs	c38fc <startup-0x1ff3c704>
    2280:	05202605 	streq	r2, [r0, #-1541]!	; 0xfffff9fb
    2284:	01052e24 	tsteq	r5, r4, lsr #28
    2288:	660c0321 	strvs	r0, [ip], -r1, lsr #6
    228c:	05690305 	strbeq	r0, [r9, #-773]!	; 0xfffffcfb
    2290:	24052026 	strcs	r2, [r5], #-38	; 0xffffffda
    2294:	2101052e 	tstcs	r1, lr, lsr #10
    2298:	6601b803 	strvs	fp, [r1], -r3, lsl #16
    229c:	054e0305 	strbeq	r0, [lr, #-773]	; 0xfffffcfb
    22a0:	01052025 	tsteq	r5, r5, lsr #32
    22a4:	7416032f 	ldrvc	r0, [r6], #-815	; 0xfffffcd1
    22a8:	054b0c05 	strbeq	r0, [fp, #-3077]	; 0xfffff3fb
    22ac:	0a05330f 	beq	14eef0 <startup-0x1feb1110>
    22b0:	054d3f20 	strbeq	r3, [sp, #-3872]	; 0xfffff0e0
    22b4:	10054d06 	andne	r4, r5, r6, lsl #26
    22b8:	3d010520 	cfstr32cc	mvfx0, [r1, #-128]	; 0xffffff80
    22bc:	05821403 	streq	r1, [r2, #1027]	; 0x403
    22c0:	0f054b0c 	svceq	0x00054b0c
    22c4:	200a0533 	andcs	r0, sl, r3, lsr r5
    22c8:	06054d3f 			; <UNDEFINED> instruction: 0x06054d3f
    22cc:	2010054d 	andscs	r0, r0, sp, asr #10
    22d0:	033d0105 	teqeq	sp, #1073741825	; 0x40000001
    22d4:	0c058211 	sfmeq	f0, 1, [r5], {17}
    22d8:	330f054b 	movwcc	r0, #62795	; 0xf54b
    22dc:	3f200a05 	svccc	0x00200a05
    22e0:	054d1d05 	strbeq	r1, [sp, #-3333]	; 0xfffff2fb
    22e4:	06052e0a 	streq	r2, [r5], -sl, lsl #28
    22e8:	2010053f 	andscs	r0, r0, pc, lsr r5
    22ec:	033d0105 	teqeq	sp, #1073741825	; 0x40000001
    22f0:	0c057410 	cfstrseq	mvf7, [r5], {16}
    22f4:	330f054b 	movwcc	r0, #62795	; 0xf54b
    22f8:	3f200a05 	svccc	0x00200a05
    22fc:	054d1e05 	strbeq	r1, [sp, #-3589]	; 0xfffff1fb
    2300:	0a052e23 	beq	14db94 <startup-0x1feb246c>
    2304:	3f060520 	svccc	0x00060520
    2308:	05201005 	streq	r1, [r0, #-5]!
    230c:	d3033d01 	movwle	r3, #15617	; 0x3d01
    2310:	0c058200 	sfmeq	f0, 1, [r5], {-0}
    2314:	330f054b 	movwcc	r0, #62795	; 0xf54b
    2318:	3f200a05 	svccc	0x00200a05
    231c:	4d06054d 	cfstr32mi	mvfx0, [r6, #-308]	; 0xfffffecc
    2320:	05201005 	streq	r1, [r0, #-5]!
    2324:	f0033d01 			; <UNDEFINED> instruction: 0xf0033d01
    2328:	03058200 	movweq	r8, #20992	; 0x5200
    232c:	2028054e 	eorcs	r0, r8, lr, asr #10
    2330:	032f0105 			; <UNDEFINED> instruction: 0x032f0105
    2334:	06057425 	streq	r7, [r5], -r5, lsr #8
    2338:	4c120579 	cfldr32mi	mvfx0, [r2], {121}	; 0x79
    233c:	056c0105 	strbeq	r0, [ip, #-261]!	; 0xfffffefb
    2340:	15051e12 	strne	r1, [r5, #-3602]	; 0xfffff1ee
    2344:	2e12052e 	cfmul64cs	mvdx0, mvdx2, mvdx14
    2348:	033e0105 	teqeq	lr, #1073741825	; 0x40000001
    234c:	06057413 			; <UNDEFINED> instruction: 0x06057413
    2350:	4c120579 	cfldr32mi	mvfx0, [r2], {121}	; 0x79
    2354:	056c0105 	strbeq	r0, [ip, #-261]!	; 0xfffffefb
    2358:	15051e12 	strne	r1, [r5, #-3602]	; 0xfffff1ee
    235c:	2e12052e 	cfmul64cs	mvdx0, mvdx2, mvdx14
    2360:	033e0105 	teqeq	lr, #1073741825	; 0x40000001
    2364:	06057411 			; <UNDEFINED> instruction: 0x06057411
    2368:	4c120579 	cfldr32mi	mvfx0, [r2], {121}	; 0x79
    236c:	056c0105 	strbeq	r0, [ip, #-261]!	; 0xfffffefb
    2370:	15051e12 	strne	r1, [r5, #-3602]	; 0xfffff1ee
    2374:	2e12052e 	cfmul64cs	mvdx0, mvdx2, mvdx14
    2378:	033e0105 	teqeq	lr, #1073741825	; 0x40000001
    237c:	0605742c 	streq	r7, [r5], -ip, lsr #8
    2380:	4c120579 	cfldr32mi	mvfx0, [r2], {121}	; 0x79
    2384:	056c0105 	strbeq	r0, [ip, #-261]!	; 0xfffffefb
    2388:	15051e12 	strne	r1, [r5, #-3602]	; 0xfffff1ee
    238c:	2e12052e 	cfmul64cs	mvdx0, mvdx2, mvdx14
    2390:	033e0105 	teqeq	lr, #1073741825	; 0x40000001
    2394:	06057427 	streq	r7, [r5], -r7, lsr #8
    2398:	4c120579 	cfldr32mi	mvfx0, [r2], {121}	; 0x79
    239c:	056c0105 	strbeq	r0, [ip, #-261]!	; 0xfffffefb
    23a0:	15051e12 	strne	r1, [r5, #-3602]	; 0xfffff1ee
    23a4:	2e12052e 	cfmul64cs	mvdx0, mvdx2, mvdx14
    23a8:	033e0105 	teqeq	lr, #1073741825	; 0x40000001
    23ac:	0605741d 			; <UNDEFINED> instruction: 0x0605741d
    23b0:	4c130579 	cfldr32mi	mvfx0, [r3], {121}	; 0x79
    23b4:	056c0105 	strbeq	r0, [ip, #-261]!	; 0xfffffefb
    23b8:	16051e13 			; <UNDEFINED> instruction: 0x16051e13
    23bc:	2e13052e 	cfmul64cs	mvdx0, mvdx3, mvdx14
    23c0:	033e0105 	teqeq	lr, #1073741825	; 0x40000001
    23c4:	06057410 			; <UNDEFINED> instruction: 0x06057410
    23c8:	4c130579 	cfldr32mi	mvfx0, [r3], {121}	; 0x79
    23cc:	056c0105 	strbeq	r0, [ip, #-261]!	; 0xfffffefb
    23d0:	16051e13 			; <UNDEFINED> instruction: 0x16051e13
    23d4:	2e13052e 	cfmul64cs	mvdx0, mvdx3, mvdx14
    23d8:	033e0105 	teqeq	lr, #1073741825	; 0x40000001
    23dc:	0605740e 	streq	r7, [r5], -lr, lsl #8
    23e0:	4c130579 	cfldr32mi	mvfx0, [r3], {121}	; 0x79
    23e4:	056c0105 	strbeq	r0, [ip, #-261]!	; 0xfffffefb
    23e8:	16051e13 			; <UNDEFINED> instruction: 0x16051e13
    23ec:	2e13052e 	cfmul64cs	mvdx0, mvdx3, mvdx14
    23f0:	033e0105 	teqeq	lr, #1073741825	; 0x40000001
    23f4:	06057429 	streq	r7, [r5], -r9, lsr #8
    23f8:	4c130578 	cfldr32mi	mvfx0, [r3], {120}	; 0x78
    23fc:	056c0105 	strbeq	r0, [ip, #-261]!	; 0xfffffefb
    2400:	16051e13 			; <UNDEFINED> instruction: 0x16051e13
    2404:	2e13052e 	cfmul64cs	mvdx0, mvdx3, mvdx14
    2408:	033e0105 	teqeq	lr, #1073741825	; 0x40000001
    240c:	06057423 	streq	r7, [r5], -r3, lsr #8
    2410:	4c130578 	cfldr32mi	mvfx0, [r3], {120}	; 0x78
    2414:	056c0105 	strbeq	r0, [ip, #-261]!	; 0xfffffefb
    2418:	16051e13 			; <UNDEFINED> instruction: 0x16051e13
    241c:	2e13052e 	cfmul64cs	mvdx0, mvdx3, mvdx14
    2420:	033e0105 	teqeq	lr, #1073741825	; 0x40000001
    2424:	06057425 	streq	r7, [r5], -r5, lsr #8
    2428:	4c140578 	cfldr32mi	mvfx0, [r4], {120}	; 0x78
    242c:	056c0105 	strbeq	r0, [ip, #-261]!	; 0xfffffefb
    2430:	17051e14 	smladne	r5, r4, lr, r1
    2434:	2e14052e 	cfmul64cs	mvdx0, mvdx4, mvdx14
    2438:	033e0105 	teqeq	lr, #1073741825	; 0x40000001
    243c:	06057414 			; <UNDEFINED> instruction: 0x06057414
    2440:	4c140578 	cfldr32mi	mvfx0, [r4], {120}	; 0x78
    2444:	056c0105 	strbeq	r0, [ip, #-261]!	; 0xfffffefb
    2448:	17051e14 	smladne	r5, r4, lr, r1
    244c:	2e14052e 	cfmul64cs	mvdx0, mvdx4, mvdx14
    2450:	033e0105 	teqeq	lr, #1073741825	; 0x40000001
    2454:	06057412 			; <UNDEFINED> instruction: 0x06057412
    2458:	4c140578 	cfldr32mi	mvfx0, [r4], {120}	; 0x78
    245c:	056c0105 	strbeq	r0, [ip, #-261]!	; 0xfffffefb
    2460:	17051e14 	smladne	r5, r4, lr, r1
    2464:	2e14052e 	cfmul64cs	mvdx0, mvdx4, mvdx14
    2468:	033e0105 	teqeq	lr, #1073741825	; 0x40000001
    246c:	0605742d 	streq	r7, [r5], -sp, lsr #8
    2470:	4c140578 	cfldr32mi	mvfx0, [r4], {120}	; 0x78
    2474:	056c0105 	strbeq	r0, [ip, #-261]!	; 0xfffffefb
    2478:	17051e14 	smladne	r5, r4, lr, r1
    247c:	2e14052e 	cfmul64cs	mvdx0, mvdx4, mvdx14
    2480:	033e0105 	teqeq	lr, #1073741825	; 0x40000001
    2484:	06057428 	streq	r7, [r5], -r8, lsr #8
    2488:	4c140578 	cfldr32mi	mvfx0, [r4], {120}	; 0x78
    248c:	056c0105 	strbeq	r0, [ip, #-261]!	; 0xfffffefb
    2490:	17051e14 	smladne	r5, r4, lr, r1
    2494:	2e14052e 	cfmul64cs	mvdx0, mvdx4, mvdx14
    2498:	033e0105 	teqeq	lr, #1073741825	; 0x40000001
    249c:	0505740c 	streq	r7, [r5, #-1036]	; 0xfffffbf4
    24a0:	01054c6a 	tsteq	r5, sl, ror #24
    24a4:	1e05056c 	cfsh32ne	mvfx0, mvfx5, #60
    24a8:	03680105 	cmneq	r8, #1073741825	; 0x40000001
    24ac:	057402ac 	ldrbeq	r0, [r4, #-684]!	; 0xfffffd54
    24b0:	29059406 	stmdbcs	r5, {r1, r2, sl, ip, pc}
    24b4:	9701054d 	strls	r0, [r1, -sp, asr #10]
    24b8:	051e2905 	ldreq	r2, [lr, #-2309]	; 0xfffff6fb
    24bc:	29053c2c 	stmdbcs	r5, {r2, r3, r5, sl, fp, ip, sp}
    24c0:	4c01054a 	cfstr32mi	mvfx0, [r1], {74}	; 0x4a
    24c4:	05661703 	strbeq	r1, [r6, #-1795]!	; 0xfffff8fd
    24c8:	052f670c 	streq	r6, [pc, #-1804]!	; 1dc4 <startup-0x1fffe23c>
    24cc:	12052f0e 	andne	r2, r5, #14, 30	; 0x38
    24d0:	4a070550 	bmi	1c3a18 <startup-0x1fe3c5e8>
    24d4:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
    24d8:	0f053e14 	svceq	0x00053e14
    24dc:	3e0b0520 	cfsh32cc	mvfx0, mvfx11, #16
    24e0:	053e1405 	ldreq	r1, [lr, #-1029]!	; 0xfffffbfb
    24e4:	1405200f 	strne	r2, [r5], #-15
    24e8:	200f0540 	andcs	r0, pc, r0, asr #10
    24ec:	05321205 	ldreq	r1, [r2, #-517]!	; 0xfffffdfb
    24f0:	2a052e07 	bcs	14dd14 <startup-0x1feb22ec>
    24f4:	6606053d 			; <UNDEFINED> instruction: 0x6606053d
    24f8:	5c220f05 	stcpl	15, cr0, [r2], #-20	; 0xffffffec
    24fc:	054d0a05 	strbeq	r0, [sp, #-2565]	; 0xfffff5fb
    2500:	0a033d01 	beq	d190c <startup-0x1ff2e6f4>
    2504:	300c0566 	andcc	r0, ip, r6, ror #10
    2508:	03750105 	cmneq	r5, #1073741825	; 0x40000001
    250c:	0c055811 	stceq	8, cr5, [r5], {17}
    2510:	500b0567 	andpl	r0, fp, r7, ror #10
    2514:	052e1105 	streq	r1, [lr, #-261]!	; 0xfffffefb
    2518:	0f053c06 	svceq	0x00053c06
    251c:	0b054e22 	bleq	155dac <startup-0x1feaa254>
    2520:	3d01054d 	cfstr32cc	mvfx0, [r1, #-308]	; 0xfffffecc
    2524:	05741103 	ldrbeq	r1, [r4, #-259]!	; 0xfffffefd
    2528:	27056c03 	strcs	r6, [r5, -r3, lsl #24]
    252c:	3d010520 	cfstr32cc	mvfx0, [r1, #-128]	; 0xffffff80
    2530:	01000602 	tsteq	r0, r2, lsl #12
    2534:	Address 0x00002534 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	44505550 	ldrbmi	r5, [r0], #-1360	; 0xfffffab0
       4:	3a430052 	bcc	10c0154 <startup-0x1ef3feac>
       8:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
       c:	612f7372 			; <UNDEFINED> instruction: 0x612f7372
      10:	726e696d 	rsbvc	r6, lr, #1785856	; 0x1b4000
      14:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
      18:	706f746b 	rsbvc	r7, pc, fp, ror #8
      1c:	7461642f 	strbtvc	r6, [r1], #-1071	; 0xfffffbd1
      20:	6f727061 	svcvs	0x00727061
      24:	746b656a 	strbtvc	r6, [fp], #-1386	; 0xfffffa96
      28:	6f6f642f 	svcvs	0x006f642f
      2c:	74732f72 	ldrbtvc	r2, [r3], #-3954	; 0xfffff08e
      30:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
      34:	00632e70 	rsbeq	r2, r3, r0, ror lr
      38:	4349564e 	movtmi	r5, #38478	; 0x964e
      3c:	5152495f 	cmppl	r2, pc, asr r9
      40:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
      44:	436c656e 	cmnmi	ip, #461373440	; 0x1b800000
      48:	4300646d 	movwmi	r6, #1133	; 0x46d
      4c:	5f314e41 	svcpl	0x00314e41
      50:	5f305852 	svcpl	0x00305852
      54:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
      58:	44565000 	ldrbmi	r5, [r6], #-0
      5c:	5152495f 	cmppl	r2, pc, asr r9
      60:	4143006e 	cmpmi	r3, lr, rrx
      64:	525f324e 	subspl	r3, pc, #-536870908	; 0xe0000004
      68:	495f3058 	ldmdbmi	pc, {r3, r4, r6, ip, sp}^	; <UNPREDICTABLE>
      6c:	006e5152 	rsbeq	r5, lr, r2, asr r1
      70:	5f4d4954 	svcpl	0x004d4954
      74:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
      78:	41430072 	hvcmi	12290	; 0x3002
      7c:	525f314e 	subspl	r3, pc, #-2147483629	; 0x80000013
      80:	495f3158 	ldmdbmi	pc, {r3, r4, r6, r8, ip, sp}^	; <UNPREDICTABLE>
      84:	006e5152 	rsbeq	r5, lr, r2, asr r1
      88:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
      8c:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
      90:	366d6165 	strbtcc	r6, [sp], -r5, ror #2
      94:	5152495f 	cmppl	r2, pc, asr r9
      98:	4954006e 	ldmdbmi	r4, {r1, r2, r3, r5, r6}^
      9c:	6f435f4d 	svcvs	0x00435f4d
      a0:	65746e75 	ldrbvs	r6, [r4, #-3701]!	; 0xfffff18b
      a4:	646f4d72 	strbtvs	r4, [pc], #-3442	; ac <startup-0x1fffff54>
      a8:	32490065 	subcc	r0, r9, #101	; 0x65
      ac:	455f3343 	ldrbmi	r3, [pc, #-835]	; fffffd71 <doors+0xdfffbe69>
      b0:	52495f52 	subpl	r5, r9, #328	; 0x148
      b4:	47006e51 	smlsdmi	r0, r1, lr, r6
      b8:	5f4f4950 	svcpl	0x004f4950
      bc:	64507550 	ldrbvs	r7, [r0], #-1360	; 0xfffffab0
      c0:	0050555f 	subseq	r5, r0, pc, asr r5
      c4:	31433249 	cmpcc	r3, r9, asr #4
      c8:	5f56455f 	svcpl	0x0056455f
      cc:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
      d0:	755f5f00 	ldrbvc	r5, [pc, #-3840]	; fffff1d8 <doors+0xdfffb2d0>
      d4:	38746e69 	ldmdacc	r4!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
      d8:	4f00745f 	svcmi	0x0000745f
      dc:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0xfffff6ac
      e0:	4d440052 	stclmi	0, cr0, [r4, #-328]	; 0xfffffeb8
      e4:	535f3241 	cmppl	pc, #268435460	; 0x10000004
      e8:	61657274 	smcvs	22308	; 0x5724
      ec:	495f356d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r8, sl, ip, sp}^	; <UNPREDICTABLE>
      f0:	006e5152 	rsbeq	r5, lr, r2, asr r1
      f4:	5f4d4954 	svcpl	0x004d4954
      f8:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
      fc:	00666544 	rsbeq	r6, r6, r4, asr #10
     100:	41534944 	cmpmi	r3, r4, asr #18
     104:	00454c42 	subeq	r4, r5, r2, asr #24
     108:	4f495047 	svcmi	0x00495047
     10c:	79544f5f 	ldmdbvc	r4, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, lr}^
     110:	505f6570 	subspl	r6, pc, r0, ror r5	; <UNPREDICTABLE>
     114:	43430050 	movtmi	r0, #12368	; 0x3050
     118:	47003252 	smlsdmi	r0, r2, r2, r3
     11c:	5f4f4950 	svcpl	0x004f4950
     120:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
     124:	0046415f 	subeq	r4, r6, pc, asr r1
     128:	5f435452 	svcpl	0x00435452
     12c:	72616c41 	rsbvc	r6, r1, #16640	; 0x4100
     130:	52495f6d 	subpl	r5, r9, #436	; 0x1b4
     134:	47006e51 	smlsdmi	r0, r1, lr, r6
     138:	5f4f4950 	svcpl	0x004f4950
     13c:	65657053 	strbvs	r7, [r5, #-83]!	; 0xffffffad
     140:	32490064 	subcc	r0, r9, #100	; 0x64
     144:	455f3243 	ldrbmi	r3, [pc, #-579]	; ffffff09 <doors+0xdfffc001>
     148:	52495f52 	subpl	r5, r9, #328	; 0x148
     14c:	47006e51 	smlsdmi	r0, r1, lr, r6
     150:	5f4f4950 	svcpl	0x004f4950
     154:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
     158:	004e415f 	subeq	r4, lr, pc, asr r1
     15c:	4f495047 	svcmi	0x00495047
     160:	776f4c5f 			; <UNDEFINED> instruction: 0x776f4c5f
     164:	6570535f 	ldrbvs	r5, [r0, #-863]!	; 0xfffffca1
     168:	52006465 	andpl	r6, r0, #1694498816	; 0x65000000
     16c:	575f4354 			; <UNDEFINED> instruction: 0x575f4354
     170:	5f50554b 	svcpl	0x0050554b
     174:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     178:	44575700 	ldrbmi	r5, [r7], #-1792	; 0xfffff900
     17c:	52495f47 	subpl	r5, r9, #284	; 0x11c
     180:	53006e51 	movwpl	r6, #3665	; 0xe51
     184:	5f4f4944 	svcpl	0x004f4944
     188:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     18c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     190:	79544f4f 	ldmdbvc	r4, {r0, r1, r2, r3, r6, r8, r9, sl, fp, lr}^
     194:	545f6570 	ldrbpl	r6, [pc], #-1392	; 19c <startup-0x1ffffe64>
     198:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
     19c:	43006665 	movwmi	r6, #1637	; 0x665
     1a0:	31524d43 	cmpcc	r2, r3, asr #26
     1a4:	4d434300 	stclmi	3, cr4, [r3, #-0]
     1a8:	6c003252 	sfmvs	f3, 4, [r0], {82}	; 0x52
     1ac:	20676e6f 	rsbcs	r6, r7, pc, ror #28
     1b0:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
     1b4:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
     1b8:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     1bc:	58525f32 	ldmdapl	r2, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
     1c0:	52495f31 	subpl	r5, r9, #49, 30	; 0xc4
     1c4:	45006e51 	strmi	r6, [r0, #-3665]	; 0xfffff1af
     1c8:	30495458 	subcc	r5, r9, r8, asr r4
     1cc:	5152495f 	cmppl	r2, pc, asr r9
     1d0:	6f6c006e 	svcvs	0x006c006e
     1d4:	6c20676e 	stcvs	7, cr6, [r0], #-440	; 0xfffffe48
     1d8:	20676e6f 	rsbcs	r6, r7, pc, ror #28
     1dc:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
     1e0:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
     1e4:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
     1e8:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     1ec:	6f4d5f4f 	svcvs	0x004d5f4f
     1f0:	495f6564 	ldmdbmi	pc, {r2, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
     1f4:	4552004e 	ldrbmi	r0, [r2, #-78]	; 0xffffffb2
     1f8:	56524553 			; <UNDEFINED> instruction: 0x56524553
     1fc:	30314445 	eorscc	r4, r1, r5, asr #8
     200:	53455200 	movtpl	r5, #20992	; 0x5200
     204:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
     208:	00313144 	eorseq	r3, r1, r4, asr #2
     20c:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
     210:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
     214:	52003231 	andpl	r3, r0, #268435459	; 0x10000003
     218:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     21c:	31444556 	cmpcc	r4, r6, asr r5
     220:	45520033 	ldrbmi	r0, [r2, #-51]	; 0xffffffcd
     224:	56524553 			; <UNDEFINED> instruction: 0x56524553
     228:	34314445 	ldrtcc	r4, [r1], #-1093	; 0xfffffbbb
     22c:	414e4500 	cmpmi	lr, r0, lsl #10
     230:	00454c42 	subeq	r4, r5, r2, asr #24
     234:	32433249 	subcc	r3, r3, #-1879048188	; 0x90000004
     238:	5f56455f 	svcpl	0x0056455f
     23c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     240:	61747300 	cmnvs	r4, r0, lsl #6
     244:	70757472 	rsbsvc	r7, r5, r2, ror r4
     248:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     24c:	72695f32 	rsbvc	r5, r9, #50, 30	; 0xc8
     250:	61685f71 	smcvs	34289	; 0x85f1
     254:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
     258:	4d440072 	stclmi	0, cr0, [r4, #-456]	; 0xfffffe38
     25c:	535f3141 	cmppl	pc, #1073741840	; 0x40000010
     260:	61657274 	smcvs	22308	; 0x5724
     264:	495f356d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r8, sl, ip, sp}^	; <UNPREDICTABLE>
     268:	006e5152 	rsbeq	r5, lr, r2, asr r1
     26c:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
     270:	5f355f39 	svcpl	0x00355f39
     274:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     278:	45434300 	strbmi	r4, [r3, #-768]	; 0xfffffd00
     27c:	54450052 	strbpl	r0, [r5], #-82	; 0xffffffae
     280:	4b575f48 	blmi	15d7fa8 <startup-0x1ea28058>
     284:	495f5055 	ldmdbmi	pc, {r0, r2, r4, r6, ip, lr}^	; <UNPREDICTABLE>
     288:	006e5152 	rsbeq	r5, lr, r2, asr r1
     28c:	726f6f64 	rsbvc	r6, pc, #100, 30	; 0x190
     290:	50470073 	subpl	r0, r7, r3, ror r0
     294:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]	; 178 <startup-0x1ffffe88>
     298:	0065646f 	rsbeq	r6, r5, pc, ror #8
     29c:	364d4954 			; <UNDEFINED> instruction: 0x364d4954
     2a0:	4341445f 	movtmi	r4, #5215	; 0x145f
     2a4:	5152495f 	cmppl	r2, pc, asr r9
     2a8:	4155006e 	cmpmi	r5, lr, rrx
     2ac:	5f345452 	svcpl	0x00345452
     2b0:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     2b4:	47544f00 	ldrbmi	r4, [r4, -r0, lsl #30]
     2b8:	5f53465f 	svcpl	0x0053465f
     2bc:	50554b57 	subspl	r4, r5, r7, asr fp
     2c0:	5152495f 	cmppl	r2, pc, asr r9
     2c4:	6550006e 	ldrbvs	r0, [r0, #-110]	; 0xffffff92
     2c8:	5653646e 	ldrbpl	r6, [r3], -lr, ror #8
     2cc:	5152495f 	cmppl	r2, pc, asr r9
     2d0:	4954006e 	ldmdbmi	r4, {r1, r2, r3, r5, r6}^
     2d4:	555f384d 	ldrbpl	r3, [pc, #-2125]	; fffffa8f <doors+0xdfffbb87>
     2d8:	49545f50 	ldmdbmi	r4, {r4, r6, r8, r9, sl, fp, ip, lr}^
     2dc:	5f33314d 	svcpl	0x0033314d
     2e0:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     2e4:	755f5f00 	ldrbvc	r5, [pc, #-3840]	; fffff3ec <doors+0xdfffb4e4>
     2e8:	31746e69 	cmncc	r4, r9, ror #28
     2ec:	00745f36 	rsbseq	r5, r4, r6, lsr pc
     2f0:	4550534f 	ldrbmi	r5, [r0, #-847]	; 0xfffffcb1
     2f4:	00524445 	subseq	r4, r2, r5, asr #8
     2f8:	69755f5f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     2fc:	3233746e 	eorscc	r7, r3, #1845493760	; 0x6e000000
     300:	4200745f 	andmi	r7, r0, #1593835520	; 0x5f000000
     304:	61467375 	hvcvs	26421	; 0x6735
     308:	5f746c75 	svcpl	0x00746c75
     30c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     310:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     314:	654d5f4f 	strbvs	r5, [sp, #-3919]	; 0xfffff0b1
     318:	6d756964 			; <UNDEFINED> instruction: 0x6d756964
     31c:	6570535f 	ldrbvs	r5, [r0, #-863]!	; 0xfffffca1
     320:	47006465 	strmi	r6, [r0, -r5, ror #8]
     324:	4320554e 			; <UNDEFINED> instruction: 0x4320554e
     328:	39203939 	stmdbcc	r0!, {r0, r3, r4, r5, r8, fp, ip, sp}
     32c:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
     330:	31303220 	teqcc	r0, r0, lsr #4
     334:	32303139 	eorscc	r3, r0, #1073741838	; 0x4000000e
     338:	72282035 	eorvc	r2, r8, #53	; 0x35
     33c:	61656c65 	cmnvs	r5, r5, ror #24
     340:	20296573 	eorcs	r6, r9, r3, ror r5
     344:	4d52415b 	ldfmie	f4, [r2, #-364]	; 0xfffffe94
     348:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
     34c:	622d392d 	eorvs	r3, sp, #737280	; 0xb4000
     350:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
     354:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
     358:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
     35c:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
     360:	39353737 	ldmdbcc	r5!, {r0, r1, r2, r4, r5, r8, r9, sl, ip, sp}
     364:	2d205d39 	stccs	13, cr5, [r0, #-228]!	; 0xffffff1c
     368:	7568746d 	strbvc	r7, [r8, #-1133]!	; 0xfffffb93
     36c:	2d20626d 	sfmcs	f6, 4, [r0, #-436]!	; 0xfffffe4c
     370:	6f6c666d 	svcvs	0x006c666d
     374:	612d7461 			; <UNDEFINED> instruction: 0x612d7461
     378:	733d6962 	teqvc	sp, #1605632	; 0x188000
     37c:	2074666f 	rsbscs	r6, r4, pc, ror #12
     380:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
     384:	613d6863 	teqvs	sp, r3, ror #16
     388:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
     38c:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
     390:	4f2d2067 	svcmi	0x002d2067
     394:	732d2030 			; <UNDEFINED> instruction: 0x732d2030
     398:	633d6474 	teqvs	sp, #116, 8	; 0x74000000
     39c:	44003939 	strmi	r3, [r0], #-2361	; 0xfffff6c7
     3a0:	5f32414d 	svcpl	0x0032414d
     3a4:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
     3a8:	5f376d61 	svcpl	0x00376d61
     3ac:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     3b0:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     3b4:	6570534f 	ldrbvs	r5, [r0, #-847]!	; 0xfffffcb1
     3b8:	545f6465 	ldrbpl	r6, [pc], #-1125	; 3c0 <startup-0x1ffffc40>
     3bc:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
     3c0:	47006665 	strmi	r6, [r0, -r5, ror #12]
     3c4:	5f4f4950 	svcpl	0x004f4950
     3c8:	006e6950 	rsbeq	r6, lr, r0, asr r9
     3cc:	4f495047 	svcmi	0x00495047
     3d0:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
     3d4:	414d4400 	cmpmi	sp, r0, lsl #8
     3d8:	74535f31 	ldrbvc	r5, [r3], #-3889	; 0xfffff0cf
     3dc:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
     3e0:	52495f33 	subpl	r5, r9, #51, 30	; 0xcc
     3e4:	44006e51 	strmi	r6, [r0], #-3665	; 0xfffff1af
     3e8:	5f31414d 	svcpl	0x0031414d
     3ec:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
     3f0:	5f366d61 	svcpl	0x00366d61
     3f4:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     3f8:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     3fc:	52495f43 	subpl	r5, r9, #268	; 0x10c
     400:	61684351 	cmnvs	r8, r1, asr r3
     404:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
     408:	50627553 	rsbpl	r7, r2, r3, asr r5
     40c:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
     410:	00797469 	rsbseq	r7, r9, r9, ror #8
     414:	33433249 	movtcc	r3, #12873	; 0x3249
     418:	5f56455f 	svcpl	0x0056455f
     41c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     420:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     424:	79545f4f 	ldmdbvc	r4, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     428:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
     42c:	3a430066 	bcc	10c05cc <startup-0x1ef3fa34>
     430:	6573555c 	ldrbvs	r5, [r3, #-1372]!	; 0xfffffaa4
     434:	615c7372 	cmpvs	ip, r2, ror r3
     438:	726e696d 	rsbvc	r6, lr, #1785856	; 0x1b4000
     43c:	7365445c 	cmnvc	r5, #92, 8	; 0x5c000000
     440:	706f746b 	rsbvc	r7, pc, fp, ror #8
     444:	7461645c 	strbtvc	r6, [r1], #-1116	; 0xfffffba4
     448:	6f727061 	svcvs	0x00727061
     44c:	746b656a 	strbtvc	r6, [fp], #-1386	; 0xfffffa96
     450:	6f6f645c 	svcvs	0x006f645c
     454:	434c0072 	movtmi	r0, #49266	; 0xc072
     458:	5400524b 	strpl	r5, [r0], #-587	; 0xfffffdb5
     45c:	5f314d49 	svcpl	0x00314d49
     460:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     464:	006e5152 	rsbeq	r5, lr, r2, asr r1
     468:	5f47544f 	svcpl	0x0047544f
     46c:	455f5348 	ldrbmi	r5, [pc, #-840]	; 12c <startup-0x1ffffed4>
     470:	4f5f3150 	svcmi	0x005f3150
     474:	495f5455 	ldmdbmi	pc, {r0, r2, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
     478:	006e5152 	rsbeq	r5, lr, r2, asr r1
     47c:	5f4d4954 	svcpl	0x004d4954
     480:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
     484:	65736142 	ldrbvs	r6, [r3, #-322]!	; 0xfffffebe
     488:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
     48c:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     490:	00666544 	rsbeq	r6, r6, r4, asr #10
     494:	61435653 	cmpvs	r3, r3, asr r6
     498:	495f6c6c 	ldmdbmi	pc, {r2, r3, r5, r6, sl, fp, sp, lr}^	; <UNPREDICTABLE>
     49c:	006e5152 	rsbeq	r5, lr, r2, asr r1
     4a0:	52434d53 	subpl	r4, r3, #5312	; 0x14c0
     4a4:	414d4400 	cmpmi	sp, r0, lsl #8
     4a8:	74535f32 	ldrbvc	r5, [r3], #-3890	; 0xfffff0ce
     4ac:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
     4b0:	52495f32 	subpl	r5, r9, #50, 30	; 0xc8
     4b4:	43006e51 	movwmi	r6, #3665	; 0xe51
     4b8:	5f314e41 	svcpl	0x00314e41
     4bc:	495f5854 	ldmdbmi	pc, {r2, r4, r6, fp, ip, lr}^	; <UNPREDICTABLE>
     4c0:	006e5152 	rsbeq	r5, lr, r2, asr r1
     4c4:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
     4c8:	315f3531 	cmpcc	pc, r1, lsr r5	; <UNPREDICTABLE>
     4cc:	52495f30 	subpl	r5, r9, #48, 30	; 0xc0
     4d0:	47006e51 	smlsdmi	r0, r1, lr, r6
     4d4:	504f4950 	subpl	r4, pc, r0, asr r9	; <UNPREDICTABLE>
     4d8:	5f645075 	svcpl	0x00645075
     4dc:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     4e0:	00666544 	rsbeq	r6, r6, r4, asr #10
     4e4:	31495053 	qdaddcc	r5, r3, r9
     4e8:	5152495f 	cmppl	r2, pc, asr r9
     4ec:	4d44006e 	stclmi	0, cr0, [r4, #-440]	; 0xfffffe48
     4f0:	535f3141 	cmppl	pc, #1073741840	; 0x40000010
     4f4:	61657274 	smcvs	22308	; 0x5724
     4f8:	495f316d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r8, ip, sp}^	; <UNPREDICTABLE>
     4fc:	006e5152 	rsbeq	r5, lr, r2, asr r1
     500:	4349564e 	movtmi	r5, #38478	; 0x964e
     504:	5152495f 	cmppl	r2, pc, asr r9
     508:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
     50c:	006c656e 	rsbeq	r6, ip, lr, ror #10
     510:	4f495047 	svcmi	0x00495047
     514:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     518:	54006769 	strpl	r6, [r0], #-1897	; 0xfffff897
     51c:	5f384d49 	svcpl	0x00384d49
     520:	5f4b5242 	svcpl	0x004b5242
     524:	314d4954 	cmpcc	sp, r4, asr r9
     528:	52495f32 	subpl	r5, r9, #50, 30	; 0xc8
     52c:	63006e51 	movwvs	r6, #3665	; 0xe51
     530:	6b636568 	blvs	18d9ad8 <startup-0x1e726528>
     534:	6977735f 	ldmdbvs	r7!, {r0, r1, r2, r3, r4, r6, r8, r9, ip, sp, lr}^
     538:	00686374 	rsbeq	r6, r8, r4, ror r3
     53c:	54737953 	ldrbtpl	r7, [r3], #-2387	; 0xfffff6ad
     540:	5f6b6369 	svcpl	0x006b6369
     544:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     548:	61735500 	cmnvs	r3, r0, lsl #10
     54c:	61466567 	cmpvs	r6, r7, ror #10
     550:	5f746c75 	svcpl	0x00746c75
     554:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     558:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     55c:	75505f4f 	ldrbvc	r5, [r0, #-3919]	; 0xfffff0b1
     560:	4e5f6450 	mrcmi	4, 2, r6, cr15, cr0, {2}
     564:	4c55504f 	mrrcmi	0, 4, r5, r5, cr15	; <UNPREDICTABLE>
     568:	4954004c 	ldmdbmi	r4, {r2, r3, r6}^
     56c:	545f384d 	ldrbpl	r3, [pc], #-2125	; 574 <startup-0x1ffffa8c>
     570:	435f4752 	cmpmi	pc, #21495808	; 0x1480000
     574:	545f4d4f 	ldrbpl	r4, [pc], #-3407	; 57c <startup-0x1ffffa84>
     578:	34314d49 	ldrtcc	r4, [r1], #-3401	; 0xfffff2b7
     57c:	5152495f 	cmppl	r2, pc, asr r9
     580:	4442006e 	strbmi	r0, [r2], #-110	; 0xffffff92
     584:	54005254 	strpl	r5, [r0], #-596	; 0xfffffdac
     588:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
     58c:	6d695400 	cfstrdvs	mvd5, [r9, #-0]
     590:	68745f65 	ldmdavs	r4!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
     594:	68736572 	ldmdavs	r3!, {r1, r4, r5, r6, r8, sl, sp, lr}^
     598:	00646c6f 	rsbeq	r6, r4, pc, ror #24
     59c:	5f4d4954 	svcpl	0x004d4954
     5a0:	73657250 	cmnvc	r5, #80, 4
     5a4:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
     5a8:	564e0072 			; <UNDEFINED> instruction: 0x564e0072
     5ac:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     5b0:	68435152 	stmdavs	r3, {r1, r4, r6, r8, ip, lr}^
     5b4:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xfffff19f
     5b8:	6572506c 	ldrbvs	r5, [r2, #-108]!	; 0xffffff94
     5bc:	74706d65 	ldrbtvc	r6, [r0], #-3429	; 0xfffff29b
     5c0:	506e6f69 	rsbpl	r6, lr, r9, ror #30
     5c4:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
     5c8:	00797469 	rsbseq	r7, r9, r9, ror #8
     5cc:	4f495047 	svcmi	0x00495047
     5d0:	79544f5f 	ldmdbvc	r4, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, lr}^
     5d4:	45006570 	strmi	r6, [r0, #-1392]	; 0xfffffa90
     5d8:	495f4854 	ldmdbmi	pc, {r2, r4, r6, fp, lr}^	; <UNPREDICTABLE>
     5dc:	006e5152 	rsbeq	r5, lr, r2, asr r1
     5e0:	314d4954 	cmpcc	sp, r4, asr r9
     5e4:	5f50555f 	svcpl	0x0050555f
     5e8:	314d4954 	cmpcc	sp, r4, asr r9
     5ec:	52495f30 	subpl	r5, r9, #48, 30	; 0xc0
     5f0:	44006e51 	strmi	r6, [r0], #-3665	; 0xfffff1af
     5f4:	5f32414d 	svcpl	0x0032414d
     5f8:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
     5fc:	5f336d61 	svcpl	0x00336d61
     600:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     604:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     608:	6e495f43 	cdpvs	15, 4, cr5, cr9, cr3, {2}
     60c:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
     610:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
     614:	4d440066 	stclmi	0, cr0, [r4, #-408]	; 0xfffffe68
     618:	535f3141 	cmppl	pc, #1073741840	; 0x40000010
     61c:	61657274 	smcvs	22308	; 0x5724
     620:	495f346d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, sl, ip, sp}^	; <UNPREDICTABLE>
     624:	006e5152 	rsbeq	r5, lr, r2, asr r1
     628:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     62c:	495f3654 	ldmdbmi	pc, {r2, r4, r6, r9, sl, ip, sp}^	; <UNPREDICTABLE>
     630:	006e5152 	rsbeq	r5, lr, r2, asr r1
     634:	354d4954 	strbcc	r4, [sp, #-2388]	; 0xfffff6ac
     638:	5152495f 	cmppl	r2, pc, asr r9
     63c:	5845006e 	stmdapl	r5, {r1, r2, r3, r5, r6}^
     640:	5f334954 	svcpl	0x00334954
     644:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     648:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
     64c:	52495f32 	subpl	r5, r9, #50, 30	; 0xc8
     650:	44006e51 	strmi	r6, [r0], #-3665	; 0xfffff1af
     654:	5f31414d 	svcpl	0x0031414d
     658:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
     65c:	5f326d61 	svcpl	0x00326d61
     660:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     664:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     668:	58545f32 	ldmdapl	r4, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
     66c:	5152495f 	cmppl	r2, pc, asr r9
     670:	5047006e 	subpl	r0, r7, lr, rrx
     674:	495f4f49 	ldmdbmi	pc, {r0, r3, r6, r8, r9, sl, fp, lr}^	; <UNPREDICTABLE>
     678:	5474696e 	ldrbtpl	r6, [r4], #-2414	; 0xfffff692
     67c:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
     680:	46006665 	strmi	r6, [r0], -r5, ror #12
     684:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xfffff18b
     688:	616e6f69 	cmnvs	lr, r9, ror #30
     68c:	6174536c 	cmnvs	r4, ip, ror #6
     690:	53006574 	movwpl	r6, #1396	; 0x574
     694:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
     698:	4f4d0068 	svcmi	0x004d0068
     69c:	00524544 	subseq	r4, r2, r4, asr #10
     6a0:	5f47544f 	svcpl	0x0047544f
     6a4:	495f5348 	ldmdbmi	pc, {r3, r6, r8, r9, ip, lr}^	; <UNPREDICTABLE>
     6a8:	006e5152 	rsbeq	r5, lr, r2, asr r1
     6ac:	74737953 	ldrbtvc	r7, [r3], #-2387	; 0xfffff6ad
     6b0:	6f436d65 	svcvs	0x00436d65
     6b4:	6c436572 	cfstr64vs	mvdx6, [r3], {114}	; 0x72
     6b8:	006b636f 	rsbeq	r6, fp, pc, ror #6
     6bc:	6f6d654d 	svcvs	0x006d654d
     6c0:	614d7972 	hvcvs	55186	; 0xd792
     6c4:	6567616e 	strbvs	r6, [r7, #-366]!	; 0xfffffe92
     6c8:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
     6cc:	5152495f 	cmppl	r2, pc, asr r9
     6d0:	7243006e 	subvc	r0, r3, #110	; 0x6e
     6d4:	65746165 	ldrbvs	r6, [r4, #-357]!	; 0xfffffe9b
     6d8:	726f6f44 	rsbvc	r6, pc, #68, 30	; 0x110
     6dc:	45520073 	ldrbmi	r0, [r2, #-115]	; 0xffffff8d
     6e0:	56524553 			; <UNDEFINED> instruction: 0x56524553
     6e4:	00304445 	eorseq	r4, r0, r5, asr #8
     6e8:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
     6ec:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
     6f0:	45520031 	ldrbmi	r0, [r2, #-49]	; 0xffffffcf
     6f4:	56524553 			; <UNDEFINED> instruction: 0x56524553
     6f8:	00324445 	eorseq	r4, r2, r5, asr #8
     6fc:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
     700:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
     704:	45520033 	ldrbmi	r0, [r2, #-51]	; 0xffffffcd
     708:	56524553 			; <UNDEFINED> instruction: 0x56524553
     70c:	00344445 	eorseq	r4, r4, r5, asr #8
     710:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
     714:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
     718:	45520035 	ldrbmi	r0, [r2, #-53]	; 0xffffffcb
     71c:	56524553 			; <UNDEFINED> instruction: 0x56524553
     720:	00364445 	eorseq	r4, r6, r5, asr #8
     724:	33495053 	movtcc	r5, #36947	; 0x9053
     728:	5152495f 	cmppl	r2, pc, asr r9
     72c:	4552006e 	ldrbmi	r0, [r2, #-110]	; 0xffffff92
     730:	56524553 			; <UNDEFINED> instruction: 0x56524553
     734:	00394445 	eorseq	r4, r9, r5, asr #8
     738:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
     73c:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
     740:	346d6165 	strbtcc	r6, [sp], #-357	; 0xfffffe9b
     744:	5152495f 	cmppl	r2, pc, asr r9
     748:	5346006e 	movtpl	r0, #24686	; 0x606e
     74c:	495f434d 	ldmdbmi	pc, {r0, r2, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     750:	006e5152 	rsbeq	r5, lr, r2, asr r1
     754:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
     758:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
     75c:	61686320 	cmnvs	r8, r0, lsr #6
     760:	49540072 	ldmdbmi	r4, {r1, r4, r5, r6}^
     764:	425f314d 	subsmi	r3, pc, #1073741843	; 0x40000013
     768:	545f4b52 	ldrbpl	r4, [pc], #-2898	; 770 <startup-0x1ffff890>
     76c:	5f394d49 	svcpl	0x00394d49
     770:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     774:	4d544900 	vldrmi.16	s9, [r4, #-0]	; <UNPREDICTABLE>
     778:	4278525f 	rsbsmi	r5, r8, #-268435451	; 0xf0000005
     77c:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
     780:	58450072 	stmdapl	r5, {r1, r4, r5, r6}^
     784:	5f344954 	svcpl	0x00344954
     788:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     78c:	53414800 	movtpl	r4, #6144	; 0x1800
     790:	4e525f48 	cdpmi	15, 5, cr5, cr2, cr8, {2}
     794:	52495f47 	subpl	r5, r9, #284	; 0x11c
     798:	73006e51 	movwvc	r6, #3665	; 0xe51
     79c:	74726f68 	ldrbtvc	r6, [r2], #-3944	; 0xfffff098
     7a0:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
     7a4:	52415500 	subpl	r5, r1, #0, 10
     7a8:	495f3554 	ldmdbmi	pc, {r2, r4, r6, r8, sl, ip, sp}^	; <UNPREDICTABLE>
     7ac:	006e5152 	rsbeq	r5, lr, r2, asr r1
     7b0:	314d4954 	cmpcc	sp, r4, asr r9
     7b4:	4752545f 			; <UNDEFINED> instruction: 0x4752545f
     7b8:	4d4f435f 	stclmi	3, cr4, [pc, #-380]	; 644 <startup-0x1ffff9bc>
     7bc:	4d49545f 	cfstrdmi	mvd5, [r9, #-380]	; 0xfffffe84
     7c0:	495f3131 	ldmdbmi	pc, {r0, r4, r5, r8, ip, sp}^	; <UNPREDICTABLE>
     7c4:	006e5152 	rsbeq	r5, lr, r2, asr r1
     7c8:	5f4d4954 	svcpl	0x004d4954
     7cc:	636f6c43 	cmnvs	pc, #17152	; 0x4300
     7d0:	7669446b 	strbtvc	r4, [r9], -fp, ror #8
     7d4:	6f697369 	svcvs	0x00697369
     7d8:	7453006e 	ldrbvc	r0, [r3], #-110	; 0xffffff92
     7dc:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
     7e0:	6b6f4c5f 	blvs	1bd3964 <startup-0x1e42c69c>
     7e4:	615f6c61 	cmpvs	pc, r1, ror #24
     7e8:	6d72616c 	ldfvse	f6, [r2, #-432]!	; 0xfffffe50
     7ec:	6f687300 	svcvs	0x00687300
     7f0:	75207472 	strvc	r7, [r0, #-1138]!	; 0xfffffb8e
     7f4:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
     7f8:	2064656e 	rsbcs	r6, r4, lr, ror #10
     7fc:	00746e69 	rsbseq	r6, r4, r9, ror #28
     800:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
     804:	52495f32 	subpl	r5, r9, #50, 30	; 0xc8
     808:	46006e51 			; <UNDEFINED> instruction: 0x46006e51
     80c:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
     810:	5152495f 	cmppl	r2, pc, asr r9
     814:	6f44006e 	svcvs	0x0044006e
     818:	4f00726f 	svcmi	0x0000726f
     81c:	465f4754 			; <UNDEFINED> instruction: 0x465f4754
     820:	52495f53 	subpl	r5, r9, #332	; 0x14c
     824:	52006e51 	andpl	r6, r0, #1296	; 0x510
     828:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     82c:	37444556 	smlsldcc	r4, r4, r6, r5	; <UNPREDICTABLE>
     830:	41535500 	cmpmi	r3, r0, lsl #10
     834:	5f325452 	svcpl	0x00325452
     838:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     83c:	53455200 	movtpl	r5, #20992	; 0x5200
     840:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
     844:	54003844 	strpl	r3, [r0], #-2116	; 0xfffff7bc
     848:	5f344d49 	svcpl	0x00344d49
     84c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     850:	414d4400 	cmpmi	sp, r0, lsl #8
     854:	74535f31 	ldrbvc	r5, [r3], #-3889	; 0xfffff0cf
     858:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
     85c:	52495f37 	subpl	r5, r9, #55, 30	; 0xdc
     860:	47006e51 	smlsdmi	r0, r1, lr, r6
     864:	5f4f4950 	svcpl	0x004f4950
     868:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
     86c:	54554f5f 	ldrbpl	r4, [r5], #-3935	; 0xfffff0a1
     870:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     874:	75505f4f 	ldrbvc	r5, [r0, #-3919]	; 0xfffff0b1
     878:	6e006450 	cfmvsrvs	mvf0, r6
     87c:	5f636976 	svcpl	0x00636976
     880:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
     884:	59524300 	ldmdbpl	r2, {r8, r9, lr}^
     888:	52495f50 	subpl	r5, r9, #80, 30	; 0x140
     88c:	54006e51 	strpl	r6, [r0], #-3665	; 0xfffff1af
     890:	5f384d49 	svcpl	0x00384d49
     894:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     898:	006e5152 	rsbeq	r5, lr, r2, asr r1
     89c:	52414d44 	subpl	r4, r1, #68, 26	; 0x1100
     8a0:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     8a4:	52495f37 	subpl	r5, r9, #55, 30	; 0xdc
     8a8:	54006e51 	strpl	r6, [r0], #-3665	; 0xfffff1af
     8ac:	505f4d49 	subspl	r4, pc, r9, asr #26
     8b0:	6f697265 	svcvs	0x00697265
     8b4:	544f0064 	strbpl	r0, [pc], #-100	; 8bc <startup-0x1ffff744>
     8b8:	53485f47 	movtpl	r5, #36679	; 0x8f47
     8bc:	3150455f 	cmpcc	r0, pc, asr r5
     8c0:	5f4e495f 	svcpl	0x004e495f
     8c4:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     8c8:	6e6f4e00 	cdpvs	14, 6, cr4, cr15, cr0, {0}
     8cc:	6b73614d 	blvs	1cd8e08 <startup-0x1e3271f8>
     8d0:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
     8d4:	5f746e49 	svcpl	0x00746e49
     8d8:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     8dc:	695f5f00 	ldmdbvs	pc, {r8, r9, sl, fp, ip, lr}^	; <UNPREDICTABLE>
     8e0:	3233746e 	eorscc	r7, r3, #1845493760	; 0x6e000000
     8e4:	5400745f 	strpl	r7, [r0], #-1119	; 0xfffffba1
     8e8:	5f504d41 	svcpl	0x00504d41
     8ec:	4d415453 	cfstrdmi	mvd5, [r1, #-332]	; 0xfffffeb4
     8f0:	52495f50 	subpl	r5, r9, #80, 30	; 0x140
     8f4:	53006e51 	movwpl	r6, #3665	; 0xe51
     8f8:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
     8fc:	65435f73 	strbvs	r5, [r3, #-3955]	; 0xfffff08d
     900:	6172746e 	cmnvs	r2, lr, ror #8
     904:	6c615f6c 	stclvs	15, cr5, [r1], #-432	; 0xfffffe50
     908:	006d7261 	rsbeq	r7, sp, r1, ror #4
     90c:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
     910:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
     914:	306d6165 	rsbcc	r6, sp, r5, ror #2
     918:	5152495f 	cmppl	r2, pc, asr r9
     91c:	5355006e 	cmppl	r5, #110	; 0x6e
     920:	33545241 	cmpcc	r4, #268435460	; 0x10000004
     924:	5152495f 	cmppl	r2, pc, asr r9
     928:	5047006e 	subpl	r0, r7, lr, rrx
     92c:	4f5f4f49 	svcmi	0x005f4f49
     930:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     934:	00444f5f 	subeq	r4, r4, pc, asr pc
     938:	31524343 	cmpcc	r2, r3, asr #6
     93c:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     940:	52495f32 	subpl	r5, r9, #50, 30	; 0xc8
     944:	43006e51 	movwmi	r6, #3665	; 0xe51
     948:	00335243 	eorseq	r5, r3, r3, asr #4
     94c:	34524343 	ldrbcc	r4, [r2], #-835	; 0xfffffcbd
     950:	52534200 	subspl	r4, r3, #0, 4
     954:	4c004c52 	stcmi	12, cr4, [r0], {82}	; 0x52
     958:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
     95c:	616c615f 	cmnvs	ip, pc, asr r1
     960:	42006d72 	andmi	r6, r0, #7296	; 0x1c80
     964:	48525253 	ldmdami	r2, {r0, r1, r4, r6, r9, ip, lr}^
     968:	636f4c00 	cmnvs	pc, #0, 24
     96c:	0064656b 	rsbeq	r6, r4, fp, ror #10
     970:	4f495047 	svcmi	0x00495047
     974:	5075505f 	rsbspl	r5, r5, pc, asr r0
     978:	4f445f64 	svcmi	0x00445f64
     97c:	44004e57 	strmi	r4, [r0], #-3671	; 0xfffff1a9
     980:	5f494d43 	svcpl	0x00494d43
     984:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     988:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     98c:	7065525f 	rsbvc	r5, r5, pc, asr r2
     990:	74697465 	strbtvc	r7, [r9], #-1125	; 0xfffffb9b
     994:	436e6f69 	cmnmi	lr, #420	; 0x1a4
     998:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
     99c:	55007265 	strpl	r7, [r0, #-613]	; 0xfffffd9b
     9a0:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
     9a4:	52495f31 	subpl	r5, r9, #49, 30	; 0xc4
     9a8:	47006e51 	smlsdmi	r0, r1, lr, r6
     9ac:	5f4f4950 	svcpl	0x004f4950
     9b0:	74736146 	ldrbtvc	r6, [r3], #-326	; 0xfffffeba
     9b4:	6570535f 	ldrbvs	r5, [r0, #-863]!	; 0xfffffca1
     9b8:	54006465 	strpl	r6, [r0], #-1125	; 0xfffffb9b
     9bc:	495f6d69 	ldmdbmi	pc, {r0, r3, r5, r6, r8, sl, fp, sp, lr}^	; <UNPREDICTABLE>
     9c0:	0074696e 	rsbseq	r6, r4, lr, ror #18
     9c4:	52454944 	subpl	r4, r5, #68, 18	; 0x110000
     9c8:	55504600 	ldrbpl	r4, [r0, #-1536]	; 0xfffffa00
     9cc:	5152495f 	cmppl	r2, pc, asr r9
     9d0:	6544006e 	strbvs	r0, [r4, #-110]	; 0xffffff92
     9d4:	4d677562 	cfstr64mi	mvdx7, [r7, #-392]!	; 0xfffffe78
     9d8:	74696e6f 	strbtvc	r6, [r9], #-3695	; 0xfffff191
     9dc:	495f726f 	ldmdbmi	pc, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
     9e0:	006e5152 	rsbeq	r5, lr, r2, asr r1
     9e4:	4f495047 	svcmi	0x00495047
     9e8:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
     9ec:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     9f0:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     9f4:	43324900 	teqmi	r2, #0, 18
     9f8:	52455f31 	subpl	r5, r5, #49, 30	; 0xc4
     9fc:	5152495f 	cmppl	r2, pc, asr r9
     a00:	4441006e 	strbmi	r0, [r1], #-110	; 0xffffff92
     a04:	52495f43 	subpl	r5, r9, #268	; 0x10c
     a08:	44006e51 	strmi	r6, [r0], #-3665	; 0xfffff1af
     a0c:	5f32414d 	svcpl	0x0032414d
     a10:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
     a14:	5f316d61 	svcpl	0x00316d61
     a18:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     a1c:	6f6c4300 	svcvs	0x006c4300
     a20:	00646573 	rsbeq	r6, r4, r3, ror r5
     a24:	6e69616d 	powvsez	f6, f1, #5.0
     a28:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     a2c:	69485f4f 	stmdbvs	r8, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     a30:	535f6867 	cmppl	pc, #6750208	; 0x670000
     a34:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
     a38:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     a3c:	43535f31 	cmpmi	r3, #49, 30	; 0xc4
     a40:	52495f45 	subpl	r5, r9, #276	; 0x114
     a44:	43006e51 	movwmi	r6, #3665	; 0xe51
     a48:	5f324e41 	svcpl	0x00324e41
     a4c:	5f454353 	svcpl	0x00454353
     a50:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     a54:	43435200 	movtmi	r5, #12800	; 0x3200
     a58:	5152495f 	cmppl	r2, pc, asr r9
     a5c:	544f006e 	strbpl	r0, [pc], #-110	; a64 <startup-0x1ffff59c>
     a60:	53485f47 	movtpl	r5, #36679	; 0x8f47
     a64:	554b575f 	strbpl	r5, [fp, #-1887]	; 0xfffff8a1
     a68:	52495f50 	subpl	r5, r9, #80, 30	; 0x140
     a6c:	54006e51 	strpl	r6, [r0], #-3665	; 0xfffff1af
     a70:	5f334d49 	svcpl	0x00334d49
     a74:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     a78:	54584500 	ldrbpl	r4, [r8], #-1280	; 0xfffffb00
     a7c:	495f3149 	ldmdbmi	pc, {r0, r3, r6, r8, ip, sp}^	; <UNPREDICTABLE>
     a80:	006e5152 	rsbeq	r5, lr, r2, asr r1
     a84:	31414d44 	cmpcc	r1, r4, asr #26
     a88:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
     a8c:	306d6165 	rsbcc	r6, sp, r5, ror #2
     a90:	5152495f 	cmppl	r2, pc, asr r9
     a94:	6970006e 	ldmdbvs	r0!, {r1, r2, r3, r5, r6}^
     a98:	736f706e 	cmnvc	pc, #110	; 0x6e
     a9c:	74694200 	strbtvc	r4, [r9], #-512	; 0xfffffe00
     aa0:	5445535f 	strbpl	r5, [r5], #-863	; 0xfffffca1
     aa4:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     aa8:	65525f4f 	ldrbvs	r5, [r2, #-3919]	; 0xfffff0b1
     aac:	754f6461 	strbvc	r6, [pc, #-1121]	; 653 <startup-0x1ffff9ad>
     ab0:	74757074 	ldrbtvc	r7, [r5], #-116	; 0xffffff8c
     ab4:	61746144 	cmnvs	r4, r4, asr #2
     ab8:	2f3a4300 	svccs	0x003a4300
     abc:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
     ac0:	6d612f73 	stclvs	15, cr2, [r1, #-460]!	; 0xfffffe34
     ac4:	2f726e69 	svccs	0x00726e69
     ac8:	6b736544 	blvs	1cd9fe0 <startup-0x1e326020>
     acc:	2f706f74 	svccs	0x00706f74
     ad0:	61746164 	cmnvs	r4, r4, ror #2
     ad4:	6a6f7270 	bvs	1bdd49c <startup-0x1e422b64>
     ad8:	2f746b65 	svccs	0x00746b65
     adc:	334d5453 	movtcc	r5, #54355	; 0xd453
     ae0:	5f344632 	svcpl	0x00344632
     ae4:	2f62696c 	svccs	0x0062696c
     ae8:	334d5453 	movtcc	r5, #54355	; 0xd453
     aec:	5f344632 	svcpl	0x00344632
     af0:	2f62696c 	svccs	0x0062696c
     af4:	334d5453 	movtcc	r5, #54355	; 0xd453
     af8:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
     afc:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xfffff088
     b00:	72655064 	rsbvc	r5, r5, #100	; 0x64
     b04:	5f687069 	svcpl	0x00687069
     b08:	76697244 	strbtvc	r7, [r9], -r4, asr #4
     b0c:	732f7265 			; <UNDEFINED> instruction: 0x732f7265
     b10:	732f6372 			; <UNDEFINED> instruction: 0x732f6372
     b14:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     b18:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
     b1c:	6970675f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, sp, lr}^
     b20:	00632e6f 	rsbeq	r2, r3, pc, ror #28
     b24:	4f495047 	svcmi	0x00495047
     b28:	0046415f 	subeq	r4, r6, pc, asr r1
     b2c:	706d6574 	rsbvc	r6, sp, r4, ror r5
     b30:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     b34:	74535f4f 	ldrbvc	r5, [r3], #-3919	; 0xfffff0b1
     b38:	74637572 	strbtvc	r7, [r3], #-1394	; 0xfffffa8e
     b3c:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
     b40:	74694200 	strbtvc	r4, [r9], #-512	; 0xfffffe00
     b44:	006c6156 	rsbeq	r6, ip, r6, asr r1
     b48:	5f746942 	svcpl	0x00746942
     b4c:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
     b50:	50470054 	subpl	r0, r7, r4, asr r0
     b54:	575f4f49 	ldrbpl	r4, [pc, -r9, asr #30]
     b58:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
     b5c:	00746942 	rsbseq	r6, r4, r2, asr #18
     b60:	4f495047 	svcmi	0x00495047
     b64:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
     b68:	73746942 	cmnvc	r4, #1081344	; 0x108000
     b6c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     b70:	6e495f4f 	cdpvs	15, 4, cr5, cr9, cr15, {2}
     b74:	47007469 	strmi	r7, [r0, -r9, ror #8]
     b78:	5f4f4950 	svcpl	0x004f4950
     b7c:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
     b80:	74694274 	strbtvc	r4, [r9], #-628	; 0xfffffd8c
     b84:	50470073 	subpl	r0, r7, r3, ror r0
     b88:	445f4f49 	ldrbmi	r4, [pc], #-3913	; b90 <startup-0x1ffff470>
     b8c:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
     b90:	50470074 	subpl	r0, r7, r4, ror r0
     b94:	525f4f49 	subspl	r4, pc, #292	; 0x124
     b98:	49646165 	stmdbmi	r4!, {r0, r2, r5, r6, r8, sp, lr}^
     b9c:	7475706e 	ldrbtvc	r7, [r5], #-110	; 0xffffff92
     ba0:	61746144 	cmnvs	r4, r4, asr #2
     ba4:	00746942 	rsbseq	r6, r4, r2, asr #18
     ba8:	73746962 	cmnvc	r4, #1605632	; 0x188000
     bac:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
     bb0:	50470073 	subpl	r0, r7, r3, ror r0
     bb4:	495f4f49 	ldmdbmi	pc, {r0, r3, r6, r8, r9, sl, fp, lr}^	; <UNPREDICTABLE>
     bb8:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
     bbc:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
     bc0:	6f500074 	svcvs	0x00500074
     bc4:	61567472 	cmpvs	r6, r2, ror r4
     bc8:	5047006c 	subpl	r0, r7, ip, rrx
     bcc:	505f4f49 	subspl	r4, pc, r9, asr #30
     bd0:	6f536e69 	svcvs	0x00536e69
     bd4:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
     bd8:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     bdc:	65525f4f 	ldrbvs	r5, [r2, #-3919]	; 0xfffff0b1
     be0:	6e496461 	cdpvs	4, 4, cr6, cr9, cr1, {3}
     be4:	44747570 	ldrbtmi	r7, [r4], #-1392	; 0xfffffa90
     be8:	00617461 	rsbeq	r7, r1, r1, ror #8
     bec:	4f495047 	svcmi	0x00495047
     bf0:	6e69505f 	mcrvs	0, 3, r5, cr9, cr15, {2}
     bf4:	6b636f4c 	blvs	18dc92c <startup-0x1e7236d4>
     bf8:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     bfc:	42006769 	andmi	r6, r0, #27525120	; 0x1a40000
     c00:	63417469 	movtvs	r7, #5225	; 0x1469
     c04:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     c08:	72756300 	rsbsvc	r6, r5, #0, 6
     c0c:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
     c10:	006e6970 	rsbeq	r6, lr, r0, ror r9
     c14:	4f495047 	svcmi	0x00495047
     c18:	6972575f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
     c1c:	47006574 	smlsdxmi	r0, r4, r5, r6
     c20:	5f4f4950 	svcpl	0x004f4950
     c24:	67676f54 			; <UNDEFINED> instruction: 0x67676f54
     c28:	6942656c 	stmdbvs	r2, {r2, r3, r5, r6, r8, sl, sp, lr}^
     c2c:	74007374 	strvc	r7, [r0], #-884	; 0xfffffc8c
     c30:	5f706d65 	svcpl	0x00706d65
     c34:	50470032 	subpl	r0, r7, r2, lsr r0
     c38:	505f4f49 	subspl	r4, pc, r9, asr #30
     c3c:	46416e69 	strbmi	r6, [r1], -r9, ror #28
     c40:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     c44:	47006769 	strmi	r6, [r0, -r9, ror #14]
     c48:	5f4f4950 	svcpl	0x004f4950
     c4c:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
     c50:	7074754f 	rsbsvc	r7, r4, pc, asr #10
     c54:	61447475 	hvcvs	18245	; 0x4745
     c58:	69426174 	stmdbvs	r2, {r2, r4, r5, r6, r8, sp, lr}^
     c5c:	59530074 	ldmdbpl	r3, {r2, r4, r5, r6}^
     c60:	47464353 	smlsldmi	r4, r6, r3, r3
     c64:	6d6f435f 	stclvs	3, cr4, [pc, #-380]!	; af0 <startup-0x1ffff510>
     c68:	736e6570 	cmnvc	lr, #112, 10	; 0x1c000000
     c6c:	6f697461 	svcvs	0x00697461
     c70:	6c65436e 	stclvs	3, cr4, [r5], #-440	; 0xfffffe48
     c74:	646d436c 	strbtvs	r4, [sp], #-876	; 0xfffffc94
     c78:	53595300 	cmppl	r9, #0, 6
     c7c:	5f474643 	svcpl	0x00474643
     c80:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
     c84:	65706d6f 	ldrbvs	r6, [r0, #-3439]!	; 0xfffff291
     c88:	7461736e 	strbtvc	r7, [r1], #-878	; 0xfffffc92
     c8c:	436e6f69 	cmnmi	lr, #420	; 0x1a4
     c90:	536c6c65 	cmnpl	ip, #25856	; 0x6500
     c94:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
     c98:	59530073 	ldmdbpl	r3, {r0, r1, r4, r5, r6}^
     c9c:	47464353 	smlsldmi	r4, r6, r3, r3
     ca0:	4965445f 	stmdbmi	r5!, {r0, r1, r2, r3, r4, r6, sl, lr}^
     ca4:	0074696e 	rsbseq	r6, r4, lr, ror #18
     ca8:	552f3a43 	strpl	r3, [pc, #-2627]!	; 26d <startup-0x1ffffd93>
     cac:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
     cb0:	696d612f 	stmdbvs	sp!, {r0, r1, r2, r3, r5, r8, sp, lr}^
     cb4:	442f726e 	strtmi	r7, [pc], #-622	; cbc <startup-0x1ffff344>
     cb8:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
     cbc:	642f706f 	strtvs	r7, [pc], #-111	; cc4 <startup-0x1ffff33c>
     cc0:	70617461 	rsbvc	r7, r1, r1, ror #8
     cc4:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xfffff08e
     cc8:	532f746b 			; <UNDEFINED> instruction: 0x532f746b
     ccc:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     cd0:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
     cd4:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
     cd8:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     cdc:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
     ce0:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
     ce4:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     ce8:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
     cec:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0xfffffca1
     cf0:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     cf4:	445f6870 	ldrbmi	r6, [pc], #-2160	; cfc <startup-0x1ffff304>
     cf8:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
     cfc:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
     d00:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xfffff09d
     d04:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     d08:	5f787834 	svcpl	0x00787834
     d0c:	63737973 	cmnvs	r3, #1884160	; 0x1cc000
     d10:	632e6766 			; <UNDEFINED> instruction: 0x632e6766
     d14:	53595300 	cmppl	r9, #0, 6
     d18:	5f474643 	svcpl	0x00474643
     d1c:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
     d20:	656e694c 	strbvs	r6, [lr, #-2380]!	; 0xfffff6b4
     d24:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     d28:	43006769 	movwmi	r6, #1897	; 0x769
     d2c:	5243504d 	subpl	r5, r3, #77	; 0x4d
     d30:	4d454d00 	stclmi	13, cr4, [r5, #-0]
     d34:	00504d52 	subseq	r4, r0, r2, asr sp
     d38:	43535953 	cmpmi	r3, #1359872	; 0x14c000
     d3c:	455f4746 	ldrbmi	r4, [pc, #-1862]	; 5fe <startup-0x1ffffa02>
     d40:	4d5f4854 	ldclmi	8, cr4, [pc, #-336]	; bf8 <startup-0x1ffff408>
     d44:	61696465 	cmnvs	r9, r5, ror #8
     d48:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xfffff1b7
     d4c:	63616672 	cmnvs	r1, #119537664	; 0x7200000
     d50:	45520065 	ldrbmi	r0, [r2, #-101]	; 0xffffff9b
     d54:	56524553 			; <UNDEFINED> instruction: 0x56524553
     d58:	53004445 	movwpl	r4, #1093	; 0x445
     d5c:	46435359 			; <UNDEFINED> instruction: 0x46435359
     d60:	654d5f47 	strbvs	r5, [sp, #-3911]	; 0xfffff0b9
     d64:	79726f6d 	ldmdbvc	r2!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     d68:	70617753 	rsbvc	r7, r1, r3, asr r7
     d6c:	676e6970 			; <UNDEFINED> instruction: 0x676e6970
     d70:	6b6e6142 	blvs	1b99280 <startup-0x1e466d80>
     d74:	54584500 	ldrbpl	r4, [r8], #-1280	; 0xfffffb00
     d78:	00524349 	subseq	r4, r2, r9, asr #6
     d7c:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
     d80:	6e69505f 	mcrvs	0, 3, r5, cr9, cr15, {2}
     d84:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     d88:	00786563 	rsbseq	r6, r8, r3, ror #10
     d8c:	43535953 	cmpmi	r3, #1359872	; 0x14c000
     d90:	455f4746 	ldrbmi	r4, [pc, #-1862]	; 652 <startup-0x1ffff9ae>
     d94:	4d5f4854 	ldclmi	8, cr4, [pc, #-336]	; c4c <startup-0x1ffff3b4>
     d98:	61696465 	cmnvs	r9, r5, ror #8
     d9c:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xfffff1b7
     da0:	63616672 	cmnvs	r1, #119537664	; 0x7200000
     da4:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
     da8:	00676966 	rsbeq	r6, r7, r6, ror #18
     dac:	43535953 	cmpmi	r3, #1359872	; 0x14c000
     db0:	4d5f4746 	ldclmi	7, cr4, [pc, #-280]	; ca0 <startup-0x1ffff360>
     db4:	726f6d65 	rsbvc	r6, pc, #6464	; 0x1940
     db8:	6d655279 	sfmvs	f5, 2, [r5, #-484]!	; 0xfffffe1c
     dbc:	4e007061 	cdpmi	0, 0, cr7, cr0, cr1, {3}
     dc0:	74537765 	ldrbvc	r7, [r3], #-1893	; 0xfffff89b
     dc4:	00657461 	rsbeq	r7, r5, r1, ror #8
     dc8:	43535953 	cmpmi	r3, #1359872	; 0x14c000
     dcc:	545f4746 	ldrbpl	r4, [pc], #-1862	; dd4 <startup-0x1ffff22c>
     dd0:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
     dd4:	45006665 	strmi	r6, [r0, #-1637]	; 0xfffff99b
     dd8:	5f495458 	svcpl	0x00495458
     ddc:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xfffff0b0
     de0:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     de4:	50476563 	subpl	r6, r7, r3, ror #10
     de8:	00784f49 	rsbseq	r4, r8, r9, asr #30
     dec:	43535953 	cmpmi	r3, #1359872	; 0x14c000
     df0:	4d5f4746 	ldclmi	7, cr4, [pc, #-280]	; ce0 <startup-0x1ffff320>
     df4:	726f6d65 	rsbvc	r6, pc, #6464	; 0x1940
     df8:	6d655279 	sfmvs	f5, 2, [r5, #-484]!	; 0xfffffe1c
     dfc:	6f437061 	svcvs	0x00437061
     e00:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     e04:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     e08:	4d504f5f 	ldclmi	15, cr4, [r0, #-380]	; 0xfffffe84
     e0c:	0065646f 	rsbeq	r6, r5, pc, ror #8
     e10:	5f4d4954 	svcpl	0x004d4954
     e14:	63726f46 	cmnvs	r2, #280	; 0x118
     e18:	434f6465 	movtmi	r6, #62565	; 0xf465
     e1c:	6e6f4332 	mcrvs	3, 3, r4, cr15, cr2, {1}
     e20:	00676966 	rsbeq	r6, r7, r6, ror #18
     e24:	5f4d4954 	svcpl	0x004d4954
     e28:	656c6553 	strbvs	r6, [ip, #-1363]!	; 0xfffffaad
     e2c:	6e4f7463 	cdpvs	4, 4, cr7, cr15, cr3, {3}
     e30:	6c755065 	ldclvs	0, cr5, [r5], #-404	; 0xfffffe6c
     e34:	6f4d6573 	svcvs	0x004d6573
     e38:	54006564 	strpl	r6, [r0], #-1380	; 0xfffffa9c
     e3c:	445f4d49 	ldrbmi	r4, [pc], #-3401	; e44 <startup-0x1ffff1bc>
     e40:	6d43414d 	stfvse	f4, [r3, #-308]	; 0xfffffecc
     e44:	49540064 	ldmdbmi	r4, {r2, r5, r6}^
     e48:	6e495f4d 	cdpvs	15, 4, cr5, cr9, cr13, {2}
     e4c:	54747570 	ldrbtpl	r7, [r4], #-1392	; 0xfffffa90
     e50:	67676972 			; <UNDEFINED> instruction: 0x67676972
     e54:	6f537265 	svcvs	0x00537265
     e58:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
     e5c:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     e60:	4752545f 			; <UNDEFINED> instruction: 0x4752545f
     e64:	756f534f 	strbvc	r5, [pc, #-847]!	; b1d <startup-0x1ffff4e3>
     e68:	00656372 	rsbeq	r6, r5, r2, ror r3
     e6c:	5f4d4954 	svcpl	0x004d4954
     e70:	63726f46 	cmnvs	r2, #280	; 0x118
     e74:	434f6465 	movtmi	r6, #62565	; 0xf465
     e78:	6e6f4334 	mcrvs	3, 3, r4, cr15, cr4, {1}
     e7c:	00676966 	rsbeq	r6, r7, r6, ror #18
     e80:	5f4d4954 	svcpl	0x004d4954
     e84:	61656c43 	cmnvs	r5, r3, asr #24
     e88:	31434f72 	hvccc	13554	; 0x34f2
     e8c:	00666552 	rsbeq	r6, r6, r2, asr r5
     e90:	5f4d4954 	svcpl	0x004d4954
     e94:	47414c46 	strbmi	r4, [r1, -r6, asr #24]
     e98:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     e9c:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
     ea0:	706d6f43 	rsbvc	r6, sp, r3, asr #30
     ea4:	31657261 	cmncc	r5, r1, ror #4
     ea8:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     eac:	3243495f 	subcc	r4, r3, #1556480	; 0x17c000
     eb0:	616c6f50 	cmnvs	ip, r0, asr pc
     eb4:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     eb8:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     ebc:	6470555f 	ldrbtvs	r5, [r0], #-1375	; 0xfffffaa1
     ec0:	44657461 	strbtmi	r7, [r5], #-1121	; 0xfffffb9f
     ec4:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
     ec8:	6f43656c 	svcvs	0x0043656c
     ecc:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     ed0:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     ed4:	6c75505f 	ldclvs	0, cr5, [r5], #-380	; 0xfffffe84
     ed8:	74006573 	strvc	r6, [r0], #-1395	; 0xfffffa8d
     edc:	6363706d 	cmnvs	r3, #109	; 0x6d
     ee0:	0031726d 	eorseq	r7, r1, sp, ror #4
     ee4:	63706d74 	cmnvs	r0, #116, 26	; 0x1d00
     ee8:	32726d63 	rsbscc	r6, r2, #6336	; 0x18c0
     eec:	706d7400 	rsbvc	r7, sp, r0, lsl #8
     ef0:	00317263 	eorseq	r7, r1, r3, ror #4
     ef4:	5f4d4954 	svcpl	0x004d4954
     ef8:	656c6553 	strbvs	r6, [ip, #-1363]!	; 0xfffffaad
     efc:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
     f00:	54747570 	ldrbtpl	r7, [r4], #-1392	; 0xfffffa90
     f04:	67676972 			; <UNDEFINED> instruction: 0x67676972
     f08:	54007265 	strpl	r7, [r0], #-613	; 0xfffffd9b
     f0c:	495f4d49 	ldmdbmi	pc, {r0, r3, r6, r8, sl, fp, lr}^	; <UNPREDICTABLE>
     f10:	6c694643 	stclvs	6, cr4, [r9], #-268	; 0xfffffef4
     f14:	00726574 	rsbseq	r6, r2, r4, ror r5
     f18:	5f4d4954 	svcpl	0x004d4954
     f1c:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xfffff1b7
     f20:	6c616e72 	stclvs	14, cr6, [r1], #-456	; 0xfffffe38
     f24:	636f6c43 	cmnvs	pc, #17152	; 0x4300
     f28:	6e6f436b 	cdpvs	3, 6, cr4, cr15, cr11, {3}
     f2c:	00676966 	rsbeq	r6, r7, r6, ror #18
     f30:	5f4d4954 	svcpl	0x004d4954
     f34:	5032434f 	eorspl	r4, r2, pc, asr #6
     f38:	72616c6f 	rsbvc	r6, r1, #28416	; 0x6f00
     f3c:	43797469 	cmnmi	r9, #1761607680	; 0x69000000
     f40:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     f44:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
     f48:	52415f4d 	subpl	r5, r1, #308	; 0x134
     f4c:	65725052 	ldrbvs	r5, [r2, #-82]!	; 0xffffffae
     f50:	64616f6c 	strbtvs	r6, [r1], #-3948	; 0xfffff094
     f54:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     f58:	54006769 	strpl	r6, [r0], #-1897	; 0xfffff897
     f5c:	495f4d49 	ldmdbmi	pc, {r0, r3, r6, r8, sl, fp, lr}^	; <UNPREDICTABLE>
     f60:	6c655343 	stclvs	3, cr5, [r5], #-268	; 0xfffffef4
     f64:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
     f68:	74006e6f 	strvc	r6, [r0], #-3695	; 0xfffff191
     f6c:	0031706d 	eorseq	r7, r1, sp, rrx
     f70:	5f4d4954 	svcpl	0x004d4954
     f74:	6f636e45 	svcvs	0x00636e45
     f78:	49726564 	ldmdbmi	r2!, {r2, r5, r6, r8, sl, sp, lr}^
     f7c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     f80:	65636166 	strbvs	r6, [r3, #-358]!	; 0xfffffe9a
     f84:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     f88:	54006769 	strpl	r6, [r0], #-1897	; 0xfffff897
     f8c:	4f5f4d49 	svcmi	0x005f4d49
     f90:	72503243 	subsvc	r3, r0, #805306372	; 0x30000004
     f94:	616f6c65 	cmnvs	pc, r5, ror #24
     f98:	6e6f4364 	cdpvs	3, 6, cr4, cr15, cr4, {3}
     f9c:	00676966 	rsbeq	r6, r7, r6, ror #18
     fa0:	5f4d4954 	svcpl	0x004d4954
     fa4:	656e6547 	strbvs	r6, [lr, #-1351]!	; 0xfffffab9
     fa8:	65746172 	ldrbvs	r6, [r4, #-370]!	; 0xfffffe8e
     fac:	6e657645 	cdpvs	6, 6, cr7, cr5, cr5, {2}
     fb0:	49540074 	ldmdbmi	r4, {r2, r4, r5, r6}^
     fb4:	43495f4d 	movtmi	r5, #40781	; 0x9f4d
     fb8:	6c6f5031 	stclvs	0, cr5, [pc], #-196	; efc <startup-0x1ffff104>
     fbc:	74697261 	strbtvc	r7, [r9], #-609	; 0xfffffd9f
     fc0:	49540079 	ldmdbmi	r4, {r0, r3, r4, r5, r6}^
     fc4:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
     fc8:	74736146 	ldrbtvc	r6, [r3], #-326	; 0xfffffeba
     fcc:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     fd0:	6168435f 	cmnvs	r8, pc, asr r3
     fd4:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
     fd8:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     fdc:	756f435f 	strbvc	r4, [pc, #-863]!	; c85 <startup-0x1ffff37b>
     fe0:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     fe4:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
     fe8:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     fec:	54006769 	strpl	r6, [r0], #-1897	; 0xfffff897
     ff0:	465f4d49 	ldrbmi	r4, [pc], -r9, asr #26
     ff4:	6563726f 	strbvs	r7, [r3, #-623]!	; 0xfffffd91
     ff8:	74634164 	strbtvc	r4, [r3], #-356	; 0xfffffe9c
     ffc:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    1000:	5f4d4954 	svcpl	0x004d4954
    1004:	43784343 	cmnmi	r8, #201326593	; 0xc000001
    1008:	5400646d 	strpl	r6, [r0], #-1133	; 0xfffffb93
    100c:	4f5f4d49 	svcmi	0x005f4d49
    1010:	65725043 	ldrbvs	r5, [r2, #-67]!	; 0xffffffbd
    1014:	64616f6c 	strbtvs	r6, [r1], #-3948	; 0xfffff094
    1018:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    101c:	0054495f 	subseq	r4, r4, pc, asr r9
    1020:	5f4d4954 	svcpl	0x004d4954
    1024:	43525445 	cmpmi	r2, #1157627904	; 0x45000000
    1028:	6b636f6c 	blvs	18dcde0 <startup-0x1e723220>
    102c:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    1030:	6e6f4331 	mcrvs	3, 3, r4, cr15, cr1, {1}
    1034:	00676966 	rsbeq	r6, r7, r6, ror #18
    1038:	5f4d4954 	svcpl	0x004d4954
    103c:	7074754f 	rsbsvc	r7, r4, pc, asr #10
    1040:	534e7475 	movtpl	r7, #58485	; 0xe475
    1044:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
    1048:	706d7400 	rsbvc	r7, sp, r0, lsl #8
    104c:	726d6363 	rsbvc	r6, sp, #-1946157055	; 0x8c000001
    1050:	49540078 	ldmdbmi	r4, {r3, r4, r5, r6}^
    1054:	4b435f4d 	blmi	10d8d90 <startup-0x1ef27270>
    1058:	49540044 	ldmdbmi	r4, {r2, r6}^
    105c:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    1060:	74754174 	ldrbtvc	r4, [r5], #-372	; 0xfffffe8c
    1064:	6c65726f 	sfmvs	f7, 2, [r5], #-444	; 0xfffffe44
    1068:	0064616f 	rsbeq	r6, r4, pc, ror #2
    106c:	5f4d4954 	svcpl	0x004d4954
    1070:	74534349 	ldrbvc	r4, [r3], #-841	; 0xfffffcb7
    1074:	74637572 	strbtvc	r7, [r3], #-1394	; 0xfffffa8e
    1078:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    107c:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    1080:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    1084:	74706143 	ldrbtvc	r6, [r0], #-323	; 0xfffffebd
    1088:	32657275 	rsbcc	r7, r5, #1342177287	; 0x50000007
    108c:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    1090:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    1094:	74706143 	ldrbtvc	r6, [r0], #-323	; 0xfffffebd
    1098:	33657275 	cmncc	r5, #1342177287	; 0x50000007
    109c:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    10a0:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    10a4:	74706143 	ldrbtvc	r6, [r0], #-323	; 0xfffffebd
    10a8:	34657275 	strbtcc	r7, [r5], #-629	; 0xfffffd8b
    10ac:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    10b0:	33434f5f 	movtcc	r4, #16223	; 0x3f5f
    10b4:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    10b8:	6f636900 	svcvs	0x00636900
    10bc:	736f7070 	cmnvc	pc, #112	; 0x70
    10c0:	70657469 	rsbvc	r7, r5, r9, ror #8
    10c4:	72616c6f 	rsbvc	r6, r1, #28416	; 0x6f00
    10c8:	00797469 	rsbseq	r7, r9, r9, ror #8
    10cc:	5f4d4954 	svcpl	0x004d4954
    10d0:	61647055 	qdsubvs	r7, r5, r4
    10d4:	6f536574 	svcvs	0x00536574
    10d8:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    10dc:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    10e0:	7843435f 	stmdavc	r3, {r0, r1, r2, r3, r4, r6, r8, r9, lr}^
    10e4:	4954004e 	ldmdbmi	r4, {r1, r2, r3, r6}^
    10e8:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    10ec:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
    10f0:	4d444343 	stclmi	3, cr4, [r4, #-268]	; 0xfffffef4
    10f4:	49540041 	ldmdbmi	r4, {r0, r6}^
    10f8:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
    10fc:	65725031 	ldrbvs	r5, [r2, #-49]!	; 0xffffffcf
    1100:	64616f6c 	strbtvs	r6, [r1], #-3948	; 0xfffff094
    1104:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1108:	54006769 	strpl	r6, [r0], #-1897	; 0xfffff897
    110c:	445f4d49 	ldrbmi	r4, [pc], #-3401	; 1114 <startup-0x1fffeeec>
    1110:	7542414d 	strbvc	r4, [r2, #-333]	; 0xfffffeb3
    1114:	4c747372 	ldclmi	3, cr7, [r4], #-456	; 0xfffffe38
    1118:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xfffff19b
    111c:	49540068 	ldmdbmi	r4, {r3, r5, r6}^
    1120:	6c435f4d 	mcrrvs	15, 4, r5, r3, cr13
    1124:	46726165 	ldrbtmi	r6, [r2], -r5, ror #2
    1128:	0067616c 	rsbeq	r6, r7, ip, ror #2
    112c:	5f4d4954 	svcpl	0x004d4954
    1130:	43746553 	cmnmi	r4, #348127232	; 0x14c00000
    1134:	61706d6f 	cmnvs	r0, pc, ror #26
    1138:	00326572 	eorseq	r6, r2, r2, ror r5
    113c:	5f4d4954 	svcpl	0x004d4954
    1140:	43746553 	cmnmi	r4, #348127232	; 0x14c00000
    1144:	61706d6f 	cmnvs	r0, pc, ror #26
    1148:	00336572 	eorseq	r6, r3, r2, ror r5
    114c:	5f4d4954 	svcpl	0x004d4954
    1150:	656c6553 	strbvs	r6, [ip, #-1363]!	; 0xfffffaad
    1154:	4f437463 	svcmi	0x00437463
    1158:	6d74004d 	ldclvs	0, cr0, [r4, #-308]!	; 0xfffffecc
    115c:	65636370 	strbvs	r6, [r3, #-880]!	; 0xfffffc90
    1160:	49540072 	ldmdbmi	r4, {r1, r4, r5, r6}^
    1164:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
    1168:	6f504e32 	svcvs	0x00504e32
    116c:	6972616c 	ldmdbvs	r2!, {r2, r3, r5, r6, r8, sp, lr}^
    1170:	6f437974 	svcvs	0x00437974
    1174:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1178:	34495400 	strbcc	r5, [r9], #-1024	; 0xfffffc00
    117c:	6e6f435f 	mcrvs	3, 3, r4, cr15, cr15, {2}
    1180:	00676966 	rsbeq	r6, r7, r6, ror #18
    1184:	5f4d4954 	svcpl	0x004d4954
    1188:	6f50434f 	svcvs	0x0050434f
    118c:	6972616c 	ldmdbvs	r2!, {r2, r3, r5, r6, r8, sp, lr}^
    1190:	54007974 	strpl	r7, [r0], #-2420	; 0xfffff68c
    1194:	475f4d49 	ldrbmi	r4, [pc, -r9, asr #26]
    1198:	72507465 	subsvc	r7, r0, #1694498816	; 0x65000000
    119c:	61637365 	cmnvs	r3, r5, ror #6
    11a0:	0072656c 	rsbseq	r6, r2, ip, ror #10
    11a4:	5f4d4954 	svcpl	0x004d4954
    11a8:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    11ac:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
    11b0:	54007265 	strpl	r7, [r0], #-613	; 0xfffffd9b
    11b4:	545f4d49 	ldrbpl	r4, [pc], #-3401	; 11bc <startup-0x1fffee44>
    11b8:	42656d69 	rsbmi	r6, r5, #6720	; 0x1a40
    11bc:	53657361 	cmnpl	r5, #-2080374783	; 0x84000001
    11c0:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    11c4:	696e4974 	stmdbvs	lr!, {r2, r4, r5, r6, r8, fp, lr}^
    11c8:	49540074 	ldmdbmi	r4, {r2, r4, r5, r6}^
    11cc:	65475f4d 	strbvs	r5, [r7, #-3917]	; 0xfffff0b3
    11d0:	70614374 	rsbvc	r4, r1, r4, ror r3
    11d4:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0xfffffa8c
    11d8:	49540031 	ldmdbmi	r4, {r0, r4, r5}^
    11dc:	614d5f4d 	cmpvs	sp, sp, asr #30
    11e0:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
    11e4:	76616c53 			; <UNDEFINED> instruction: 0x76616c53
    11e8:	646f4d65 	strbtvs	r4, [pc], #-3429	; 11f0 <startup-0x1fffee10>
    11ec:	49540065 	ldmdbmi	r4, {r0, r2, r5, r6}^
    11f0:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    11f4:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
    11f8:	76616c53 			; <UNDEFINED> instruction: 0x76616c53
    11fc:	646f4d65 	strbtvs	r4, [pc], #-3429	; 1204 <startup-0x1fffedfc>
    1200:	49540065 	ldmdbmi	r4, {r0, r2, r5, r6}^
    1204:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    1208:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
    120c:	7473614d 	ldrbtvc	r6, [r3], #-333	; 0xfffffeb3
    1210:	6c537265 	lfmvs	f7, 2, [r3], {101}	; 0x65
    1214:	4d657661 	stclmi	6, cr7, [r5, #-388]!	; 0xfffffe7c
    1218:	0065646f 	rsbeq	r6, r5, pc, ror #8
    121c:	5f4d4954 	svcpl	0x004d4954
    1220:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
    1224:	5367616c 	cmnpl	r7, #108, 2
    1228:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
    122c:	49540073 	ldmdbmi	r4, {r0, r1, r4, r5, r6}^
    1230:	44425f4d 	strbmi	r5, [r2], #-3917	; 0xfffff0b3
    1234:	6e495254 	mcrvs	2, 2, r5, cr9, cr4, {2}
    1238:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
    123c:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
    1240:	49540066 	ldmdbmi	r4, {r1, r2, r5, r6}^
    1244:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
    1248:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    124c:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0xfffffbad
    1250:	54007463 	strpl	r7, [r0], #-1123	; 0xfffffb9d
    1254:	4f5f4d49 	svcmi	0x005f4d49
    1258:	53525353 	cmppl	r2, #1275068417	; 0x4c000001
    125c:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
    1260:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    1264:	49540078 	ldmdbmi	r4, {r3, r4, r5, r6}^
    1268:	6e455f4d 	cdpvs	15, 4, cr5, cr5, cr13, {2}
    126c:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
    1270:	646f4d72 	strbtvs	r4, [pc], #-3442	; 1278 <startup-0x1fffed88>
    1274:	49540065 	ldmdbmi	r4, {r0, r2, r5, r6}^
    1278:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
    127c:	6c6f5034 	stclvs	0, cr5, [pc], #-208	; 11b4 <startup-0x1fffee4c>
    1280:	74697261 	strbtvc	r7, [r9], #-609	; 0xfffffd9f
    1284:	6e6f4379 	mcrvs	3, 3, r4, cr15, cr9, {3}
    1288:	00676966 	rsbeq	r6, r7, r6, ror #18
    128c:	5f4d4954 	svcpl	0x004d4954
    1290:	6f747541 	svcvs	0x00747541
    1294:	6974616d 	ldmdbvs	r4!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    1298:	74754f63 	ldrbtvc	r4, [r5], #-3939	; 0xfffff09d
    129c:	00747570 	rsbseq	r7, r4, r0, ror r5
    12a0:	5f4d4954 	svcpl	0x004d4954
    12a4:	656c6553 	strbvs	r6, [ip, #-1363]!	; 0xfffffaad
    12a8:	754f7463 	strbvc	r7, [pc, #-1123]	; e4d <startup-0x1ffff1b3>
    12ac:	74757074 	ldrbtvc	r7, [r5], #-116	; 0xffffff8c
    12b0:	67697254 			; <UNDEFINED> instruction: 0x67697254
    12b4:	00726567 	rsbseq	r6, r2, r7, ror #10
    12b8:	5f4d4954 	svcpl	0x004d4954
    12bc:	49746553 	ldmdbmi	r4!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    12c0:	72503143 	subsvc	r3, r0, #-1073741808	; 0xc0000010
    12c4:	61637365 	cmnvs	r3, r5, ror #6
    12c8:	0072656c 	rsbseq	r6, r2, ip, ror #10
    12cc:	5f4d4954 	svcpl	0x004d4954
    12d0:	494d5750 	stmdbmi	sp, {r4, r6, r8, r9, sl, ip, lr}^
    12d4:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    12d8:	54006769 	strpl	r6, [r0], #-1897	; 0xfffff897
    12dc:	435f3349 	cmpmi	pc, #603979777	; 0x24000001
    12e0:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    12e4:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    12e8:	4d445f4d 	stclmi	15, cr5, [r4, #-308]	; 0xfffffecc
    12ec:	756f5341 	strbvc	r5, [pc, #-833]!	; fb3 <startup-0x1ffff04d>
    12f0:	00656372 	rsbeq	r6, r5, r2, ror r3
    12f4:	5f4d4954 	svcpl	0x004d4954
    12f8:	7453434f 	ldrbvc	r4, [r3], #-847	; 0xfffffcb1
    12fc:	74637572 	strbtvc	r7, [r3], #-1394	; 0xfffffa8e
    1300:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    1304:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    1308:	4353505f 	cmpmi	r3, #95	; 0x5f
    130c:	6f6c6552 	svcvs	0x006c6552
    1310:	6f4d6461 	svcvs	0x004d6461
    1314:	54006564 	strpl	r6, [r0], #-1380	; 0xfffffa9c
    1318:	4f5f4d49 	svcmi	0x005f4d49
    131c:	656c4343 	strbvs	r4, [ip, #-835]!	; 0xfffffcbd
    1320:	74007261 	strvc	r7, [r0], #-609	; 0xfffffd9f
    1324:	6d73706d 	ldclvs	0, cr7, [r3, #-436]!	; 0xfffffe4c
    1328:	54007263 	strpl	r7, [r0], #-611	; 0xfffffd9d
    132c:	455f4d49 	ldrbmi	r4, [pc, #-3401]	; 5eb <startup-0x1ffffa15>
    1330:	52547478 	subspl	r7, r4, #120, 8	; 0x78000000
    1334:	6c6f5047 	stclvs	0, cr5, [pc], #-284	; 1220 <startup-0x1fffede0>
    1338:	74697261 	strbtvc	r7, [r9], #-609	; 0xfffffd9f
    133c:	49540079 	ldmdbmi	r4, {r0, r3, r4, r5, r6}^
    1340:	44425f4d 	strbmi	r5, [r2], #-3917	; 0xfffff0b3
    1344:	74535254 	ldrbvc	r5, [r3], #-596	; 0xfffffdac
    1348:	74637572 	strbtvc	r7, [r3], #-1394	; 0xfffffa8e
    134c:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    1350:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    1354:	4943495f 	stmdbmi	r3, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    1358:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    135c:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    1360:	6d740074 	ldclvs	0, cr0, [r4, #-464]!	; 0xfffffe30
    1364:	32726370 	rsbscc	r6, r2, #112, 6	; 0xc0000001
    1368:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    136c:	7478455f 	ldrbtvc	r4, [r8], #-1375	; 0xfffffaa1
    1370:	50475254 	subpl	r5, r7, r4, asr r2
    1374:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
    1378:	72656c61 	rsbvc	r6, r5, #24832	; 0x6100
    137c:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    1380:	6572425f 	ldrbvs	r4, [r2, #-607]!	; 0xfffffda1
    1384:	54006b61 	strpl	r6, [r0], #-2913	; 0xfffff49f
    1388:	445f4d49 	ldrbmi	r4, [pc], #-3401	; 1390 <startup-0x1fffec70>
    138c:	54646165 	strbtpl	r6, [r4], #-357	; 0xfffffe9b
    1390:	00656d69 	rsbeq	r6, r5, r9, ror #26
    1394:	5f4d4954 	svcpl	0x004d4954
    1398:	5031434f 	eorspl	r4, r1, pc, asr #6
    139c:	72616c6f 	rsbvc	r6, r1, #28416	; 0x6f00
    13a0:	43797469 	cmnmi	r9, #1761607680	; 0x69000000
    13a4:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    13a8:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    13ac:	6f465f4d 	svcvs	0x00465f4d
    13b0:	64656372 	strbtvs	r6, [r5], #-882	; 0xfffffc8e
    13b4:	4331434f 	teqmi	r1, #1006632961	; 0x3c000001
    13b8:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    13bc:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    13c0:	6f465f4d 	svcvs	0x00465f4d
    13c4:	64656372 	strbtvs	r6, [r5], #-882	; 0xfffffc8e
    13c8:	4333434f 	teqmi	r3, #1006632961	; 0x3c000001
    13cc:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    13d0:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    13d4:	43495f4d 	movtmi	r5, #40781	; 0x9f4d
    13d8:	73657250 	cmnvc	r5, #80, 4
    13dc:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
    13e0:	49540072 	ldmdbmi	r4, {r1, r4, r5, r6}^
    13e4:	43435f4d 	movtmi	r5, #16205	; 0x3f4d
    13e8:	6d434e78 	stclvs	14, cr4, [r3, #-480]	; 0xfffffe20
    13ec:	49540064 	ldmdbmi	r4, {r2, r5, r6}^
    13f0:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
    13f4:	6c64494e 			; <UNDEFINED> instruction: 0x6c64494e
    13f8:	61745365 	cmnvs	r4, r5, ror #6
    13fc:	54006574 	strpl	r6, [r0], #-1396	; 0xfffffa8c
    1400:	445f4d49 	ldrbmi	r4, [pc], #-3401	; 1408 <startup-0x1fffebf8>
    1404:	6142414d 	cmpvs	r2, sp, asr #2
    1408:	69006573 	stmdbvs	r0, {r0, r1, r4, r5, r6, r8, sl, sp, lr}
    140c:	70706f63 	rsbsvc	r6, r0, r3, ror #30
    1410:	7469736f 	strbtvc	r7, [r9], #-879	; 0xfffffc91
    1414:	6c657365 	stclvs	3, cr7, [r5], #-404	; 0xfffffe6c
    1418:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    141c:	54006e6f 	strpl	r6, [r0], #-3695	; 0xfffff191
    1420:	525f4d49 	subspl	r4, pc, #4672	; 0x1240
    1424:	70616d65 	rsbvc	r6, r1, r5, ror #26
    1428:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    142c:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    1430:	74535449 	ldrbvc	r5, [r3], #-1097	; 0xfffffbb7
    1434:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1438:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    143c:	6d69545f 	cfstrdvs	mvd5, [r9, #-380]!	; 0xfffffe84
    1440:	73614265 	cmnvc	r1, #1342177286	; 0x50000006
    1444:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
    1448:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
    144c:	00746375 	rsbseq	r6, r4, r5, ror r3
    1450:	5f4d4954 	svcpl	0x004d4954
    1454:	43414d44 	movtmi	r4, #7492	; 0x1d44
    1458:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    145c:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    1460:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    1464:	6f6c4374 	svcvs	0x006c4374
    1468:	69446b63 	stmdbvs	r4, {r0, r1, r5, r6, r8, r9, fp, sp, lr}^
    146c:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
    1470:	54006e6f 	strpl	r6, [r0], #-3695	; 0xfffff191
    1474:	435f4d49 	cmpmi	pc, #4672	; 0x1240
    1478:	54007843 	strpl	r7, [r0], #-2115	; 0xfffff7bd
    147c:	4f5f4d49 	svcmi	0x005f4d49
    1480:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0xfffffb8b
    1484:	61745374 	cmnvs	r4, r4, ror r3
    1488:	54006574 	strpl	r6, [r0], #-1396	; 0xfffffa8c
    148c:	455f4d49 	ldrbmi	r4, [pc, #-3401]	; 74b <startup-0x1ffff8b5>
    1490:	746e6576 	strbtvc	r6, [lr], #-1398	; 0xfffffa8a
    1494:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    1498:	54006563 	strpl	r6, [r0], #-1379	; 0xfffffa9d
    149c:	495f4d49 	ldmdbmi	pc, {r0, r3, r6, r8, sl, fp, lr}^	; <UNPREDICTABLE>
    14a0:	6c6f5043 	stclvs	0, cr5, [pc], #-268	; 139c <startup-0x1fffec64>
    14a4:	74697261 	strbtvc	r7, [r9], #-609	; 0xfffffd9f
    14a8:	49540079 	ldmdbmi	r4, {r0, r3, r4, r5, r6}^
    14ac:	49545f4d 	ldmdbmi	r4, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    14b0:	74784578 	ldrbtvc	r4, [r8], #-1400	; 0xfffffa88
    14b4:	616e7265 	cmnvs	lr, r5, ror #4
    14b8:	6f6c436c 	svcvs	0x006c436c
    14bc:	6f436b63 	svcvs	0x00436b63
    14c0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    14c4:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    14c8:	434f4c5f 	movtmi	r4, #64607	; 0xfc5f
    14cc:	76654c4b 	strbtvc	r4, [r5], -fp, asr #24
    14d0:	54006c65 	strpl	r6, [r0], #-3173	; 0xfffff39b
    14d4:	495f4d49 	ldmdbmi	pc, {r0, r3, r6, r8, sl, fp, lr}^	; <UNPREDICTABLE>
    14d8:	6e6f4354 	mcrvs	3, 3, r4, cr15, cr4, {2}
    14dc:	00676966 	rsbeq	r6, r7, r6, ror #18
    14e0:	5f4d4954 	svcpl	0x004d4954
    14e4:	52544442 	subspl	r4, r4, #1107296256	; 0x42000000
    14e8:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    14ec:	54006769 	strpl	r6, [r0], #-1897	; 0xfffff897
    14f0:	535f4d49 	cmppl	pc, #4672	; 0x1240
    14f4:	43497465 	movtmi	r7, #37989	; 0x9465
    14f8:	65725032 	ldrbvs	r5, [r2, #-50]!	; 0xffffffce
    14fc:	6c616373 	stclvs	3, cr6, [r1], #-460	; 0xfffffe34
    1500:	54007265 	strpl	r7, [r0], #-613	; 0xfffffd9b
    1504:	505f4d49 	subspl	r4, pc, r9, asr #26
    1508:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
    150c:	72656c61 	rsbvc	r6, r5, #24832	; 0x6100
    1510:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1514:	54006769 	strpl	r6, [r0], #-1897	; 0xfffff897
    1518:	495f4d49 	ldmdbmi	pc, {r0, r3, r6, r8, sl, fp, lr}^	; <UNPREDICTABLE>
    151c:	45785254 	ldrbmi	r5, [r8, #-596]!	; 0xfffffdac
    1520:	72657478 	rsbvc	r7, r5, #120, 8	; 0x78000000
    1524:	436c616e 	cmnmi	ip, #-2147483621	; 0x8000001b
    1528:	6b636f6c 	blvs	18dd2e0 <startup-0x1e722d20>
    152c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1530:	54006769 	strpl	r6, [r0], #-1897	; 0xfffff897
    1534:	4f5f4d49 	svcmi	0x005f4d49
    1538:	504e3343 	subpl	r3, lr, r3, asr #6
    153c:	72616c6f 	rsbvc	r6, r1, #28416	; 0x6f00
    1540:	43797469 	cmnmi	r9, #1761607680	; 0x69000000
    1544:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1548:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    154c:	534f5f4d 	movtpl	r5, #65357	; 0xff4d
    1550:	74534953 	ldrbvc	r4, [r3], #-2387	; 0xfffff6ad
    1554:	00657461 	rsbeq	r7, r5, r1, ror #8
    1558:	5f4d4954 	svcpl	0x004d4954
    155c:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    1560:	65736142 	ldrbvs	r6, [r3, #-322]!	; 0xfffffebe
    1564:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    1568:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    156c:	7849545f 	stmdavc	r9, {r0, r1, r2, r3, r4, r6, sl, ip, lr}^
    1570:	65747845 	ldrbvs	r7, [r4, #-2117]!	; 0xfffff7bb
    1574:	6c616e72 	stclvs	14, cr6, [r1], #-456	; 0xfffffe38
    1578:	534b4c43 	movtpl	r4, #48195	; 0xbc43
    157c:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    1580:	49540065 	ldmdbmi	r4, {r0, r2, r5, r6}^
    1584:	44425f4d 	strbmi	r5, [r2], #-3917	; 0xfffff0b3
    1588:	6e495254 	mcrvs	2, 2, r5, cr9, cr4, {2}
    158c:	74537469 	ldrbvc	r7, [r3], #-1129	; 0xfffffb97
    1590:	74637572 	strbtvc	r7, [r3], #-1394	; 0xfffffa8e
    1594:	32495400 	subcc	r5, r9, #0, 8
    1598:	6e6f435f 	mcrvs	3, 3, r4, cr15, cr15, {2}
    159c:	00676966 	rsbeq	r6, r7, r6, ror #18
    15a0:	5f4d4954 	svcpl	0x004d4954
    15a4:	4632434f 	ldrtmi	r4, [r2], -pc, asr #6
    15a8:	43747361 	cmnmi	r4, #-2080374783	; 0x84000001
    15ac:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    15b0:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    15b4:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
    15b8:	73614634 	cmnvc	r1, #52, 12	; 0x3400000
    15bc:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
    15c0:	00676966 	rsbeq	r6, r7, r6, ror #18
    15c4:	5f4d4954 	svcpl	0x004d4954
    15c8:	504e434f 	subpl	r4, lr, pc, asr #6
    15cc:	72616c6f 	rsbvc	r6, r1, #28416	; 0x6f00
    15d0:	00797469 	rsbseq	r7, r9, r9, ror #8
    15d4:	5f4d4954 	svcpl	0x004d4954
    15d8:	43525445 	cmpmi	r2, #1157627904	; 0x45000000
    15dc:	6b636f6c 	blvs	18dd394 <startup-0x1e722c6c>
    15e0:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    15e4:	6e6f4332 	mcrvs	3, 3, r4, cr15, cr2, {1}
    15e8:	00676966 	rsbeq	r6, r7, r6, ror #18
    15ec:	5f314954 	svcpl	0x00314954
    15f0:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    15f4:	54006769 	strpl	r6, [r0], #-1897	; 0xfffff897
    15f8:	435f4d49 	cmpmi	pc, #4672	; 0x1240
    15fc:	5400646d 	strpl	r6, [r0], #-1133	; 0xfffffb93
    1600:	535f4d49 	cmppl	pc, #4672	; 0x1240
    1604:	43497465 	movtmi	r7, #37989	; 0x9465
    1608:	65725033 	ldrbvs	r5, [r2, #-51]!	; 0xffffffcd
    160c:	6c616373 	stclvs	3, cr6, [r1], #-460	; 0xfffffe34
    1610:	54007265 	strpl	r7, [r0], #-613	; 0xfffffd9b
    1614:	4f5f4d49 	svcmi	0x005f4d49
    1618:	6e493243 	cdpvs	2, 4, cr3, cr9, cr3, {2}
    161c:	54007469 	strpl	r7, [r0], #-1129	; 0xfffffb97
    1620:	435f4d49 	cmpmi	pc, #4672	; 0x1240
    1624:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    1628:	65505449 	ldrbvs	r5, [r0, #-1097]	; 0xfffffbb7
    162c:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
    1630:	74694267 	strbtvc	r4, [r9], #-615	; 0xfffffd99
    1634:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    1638:	4943495f 	stmdbmi	r3, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    163c:	5474696e 	ldrbtpl	r6, [r4], #-2414	; 0xfffff692
    1640:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
    1644:	54006665 	strpl	r6, [r0], #-1637	; 0xfffff99b
    1648:	4f5f4d49 	svcmi	0x005f4d49
    164c:	6e493443 	cdpvs	4, 4, cr3, cr9, cr3, {2}
    1650:	54007469 	strpl	r7, [r0], #-1129	; 0xfffffb97
    1654:	495f4d49 	ldmdbmi	pc, {r0, r3, r6, r8, sl, fp, lr}^	; <UNPREDICTABLE>
    1658:	696e4943 	stmdbvs	lr!, {r0, r1, r6, r8, fp, lr}^
    165c:	49540074 	ldmdbmi	r4, {r2, r4, r5, r6}^
    1660:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    1664:	6d6f4374 	stclvs	3, cr4, [pc, #-464]!	; 149c <startup-0x1fffeb64>
    1668:	65726170 	ldrbvs	r6, [r2, #-368]!	; 0xfffffe90
    166c:	49540034 	ldmdbmi	r4, {r2, r4, r5}^
    1670:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    1674:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
    1678:	4d78434f 	ldclmi	3, cr4, [r8, #-316]!	; 0xfffffec4
    167c:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    1680:	6470555f 	ldrbtvs	r5, [r0], #-1375	; 0xfffffaa1
    1684:	52657461 	rsbpl	r7, r5, #1627389952	; 0x61000000
    1688:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
    168c:	6f437473 	svcvs	0x00437473
    1690:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1694:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    1698:	34434f5f 	strbcc	r4, [r3], #-3935	; 0xfffff0a1
    169c:	6c657250 	sfmvs	f7, 2, [r5], #-320	; 0xfffffec0
    16a0:	4364616f 	cmnmi	r4, #-1073741797	; 0xc000001b
    16a4:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    16a8:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    16ac:	6c435f4d 	mcrrvs	15, 4, r5, r3, cr13
    16b0:	4f726165 	svcmi	0x00726165
    16b4:	65523343 	ldrbvs	r3, [r2, #-835]	; 0xfffffcbd
    16b8:	49540066 	ldmdbmi	r4, {r1, r2, r5, r6}^
    16bc:	6c535f4d 	mrrcvs	15, 4, r5, r3, cr13
    16c0:	4d657661 	stclmi	6, cr7, [r5, #-388]!	; 0xfffffe7c
    16c4:	0065646f 	rsbeq	r6, r5, pc, ror #8
    16c8:	5f4d4954 	svcpl	0x004d4954
    16cc:	6f4d434f 	svcvs	0x004d434f
    16d0:	54006564 	strpl	r6, [r0], #-1380	; 0xfffffa9c
    16d4:	435f4d49 	cmpmi	pc, #4672	; 0x1240
    16d8:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    16dc:	5234434f 	eorspl	r4, r4, #1006632961	; 0x3c000001
    16e0:	54006665 	strpl	r6, [r0], #-1637	; 0xfffff99b
    16e4:	425f4d49 	subsmi	r4, pc, #4672	; 0x1240
    16e8:	6b616572 	blvs	185acb8 <startup-0x1e7a5348>
    16ec:	616c6f50 	cmnvs	ip, r0, asr pc
    16f0:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    16f4:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    16f8:	31434f5f 	cmpcc	r3, pc, asr pc
    16fc:	6c6f504e 	stclvs	0, cr5, [pc], #-312	; 15cc <startup-0x1fffea34>
    1700:	74697261 	strbtvc	r7, [r9], #-609	; 0xfffffd9f
    1704:	6e6f4379 	mcrvs	3, 3, r4, cr15, cr9, {3}
    1708:	00676966 	rsbeq	r6, r7, r6, ror #18
    170c:	5f4d4954 	svcpl	0x004d4954
    1710:	72504343 	subsvc	r4, r0, #201326593	; 0xc000001
    1714:	616f6c65 	cmnvs	pc, r5, ror #24
    1718:	6e6f4364 	cdpvs	3, 6, cr4, cr15, cr4, {3}
    171c:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 1554 <startup-0x1fffeaac>
    1720:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    1724:	49434f5f 	stmdbmi	r3, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, lr}^
    1728:	5474696e 	ldrbtpl	r6, [r4], #-2414	; 0xfffff692
    172c:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
    1730:	54006665 	strpl	r6, [r0], #-1637	; 0xfffff99b
    1734:	535f4d49 	cmppl	pc, #4672	; 0x1240
    1738:	6f437465 	svcvs	0x00437465
    173c:	65746e75 	ldrbvs	r6, [r4, #-3701]!	; 0xfffff18b
    1740:	74690072 	strbtvc	r0, [r9], #-114	; 0xffffff8e
    1744:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
    1748:	5400656c 	strpl	r6, [r0], #-1388	; 0xfffffa94
    174c:	4f5f4d49 	svcmi	0x005f4d49
    1750:	6f503343 	svcvs	0x00503343
    1754:	6972616c 	ldmdbvs	r2!, {r2, r3, r5, r6, r8, sp, lr}^
    1758:	6f437974 	svcvs	0x00437974
    175c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1760:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    1764:	6d65525f 	sfmvs	f5, 2, [r5, #-380]!	; 0xfffffe84
    1768:	6f437061 	svcvs	0x00437061
    176c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1770:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    1774:	31434f5f 	cmpcc	r3, pc, asr pc
    1778:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    177c:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    1780:	6c65535f 	stclvs	3, cr5, [r5], #-380	; 0xfffffe84
    1784:	48746365 	ldmdami	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    1788:	536c6c61 	cmnpl	ip, #24832	; 0x6100
    178c:	6f736e65 	svcvs	0x00736e65
    1790:	49540072 	ldmdbmi	r4, {r1, r4, r5, r6}^
    1794:	6c435f4d 	mcrrvs	15, 4, r5, r3, cr13
    1798:	4f726165 	svcmi	0x00726165
    179c:	65523243 	ldrbvs	r3, [r2, #-579]	; 0xfffffdbd
    17a0:	78450066 	stmdavc	r5, {r1, r2, r5, r6}^
    17a4:	47525474 			; <UNDEFINED> instruction: 0x47525474
    17a8:	746c6946 	strbtvc	r6, [ip], #-2374	; 0xfffff6ba
    17ac:	43007265 	movwmi	r7, #613	; 0x265
    17b0:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
    17b4:	2f737265 	svccs	0x00737265
    17b8:	6e696d61 	cdpvs	13, 6, cr6, cr9, cr1, {3}
    17bc:	65442f72 	strbvs	r2, [r4, #-3954]	; 0xfffff08e
    17c0:	6f746b73 	svcvs	0x00746b73
    17c4:	61642f70 	smcvs	17136	; 0x42f0
    17c8:	72706174 	rsbsvc	r6, r0, #116, 2
    17cc:	6b656a6f 	blvs	195c190 <startup-0x1e6a3e70>
    17d0:	54532f74 	ldrbpl	r2, [r3], #-3956	; 0xfffff08c
    17d4:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    17d8:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
    17dc:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
    17e0:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    17e4:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
    17e8:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
    17ec:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    17f0:	5f787834 	svcpl	0x00787834
    17f4:	50647453 	rsbpl	r7, r4, r3, asr r4
    17f8:	70697265 	rsbvc	r7, r9, r5, ror #4
    17fc:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
    1800:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    1804:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    1808:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!	; 0xffffff44
    180c:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
    1810:	745f7878 	ldrbvc	r7, [pc], #-2168	; 1818 <startup-0x1fffe7e8>
    1814:	632e6d69 			; <UNDEFINED> instruction: 0x632e6d69
    1818:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    181c:	49434f5f 	stmdbmi	r3, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, lr}^
    1820:	53656c64 	cmnpl	r5, #100, 24	; 0x6400
    1824:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
    1828:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    182c:	7274435f 	rsbsvc	r4, r4, #2080374785	; 0x7c000001
    1830:	4d57506c 	ldclmi	0, cr5, [r7, #-432]	; 0xfffffe50
    1834:	7074754f 	rsbsvc	r7, r4, pc, asr #10
    1838:	00737475 	rsbseq	r7, r3, r5, ror r4
    183c:	5f4d4954 	svcpl	0x004d4954
    1840:	53504349 	cmppl	r0, #603979777	; 0x24000001
    1844:	49540043 	ldmdbmi	r4, {r0, r1, r6}^
    1848:	54455f4d 	strbpl	r5, [r5], #-3917	; 0xfffff0b3
    184c:	6e6f4352 	mcrvs	3, 3, r4, cr15, cr2, {2}
    1850:	00676966 	rsbeq	r6, r7, r6, ror #18
    1854:	5f4d4954 	svcpl	0x004d4954
    1858:	6e496544 	cdpvs	5, 4, cr6, cr9, cr4, {2}
    185c:	54007469 	strpl	r7, [r0], #-1129	; 0xfffffb97
    1860:	4f5f4d49 	svcmi	0x005f4d49
    1864:	61463343 	cmpvs	r6, r3, asr #6
    1868:	6f437473 	svcvs	0x00437473
    186c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1870:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    1874:	33434f5f 	movtcc	r4, #16223	; 0x3f5f
    1878:	6c657250 	sfmvs	f7, 2, [r5], #-320	; 0xfffffec0
    187c:	4364616f 	cmnmi	r4, #-1073741797	; 0xc000001b
    1880:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1884:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    1888:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    188c:	34434974 	strbcc	r4, [r3], #-2420	; 0xfffff68c
    1890:	73657250 	cmnvc	r5, #80, 4
    1894:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
    1898:	49540072 	ldmdbmi	r4, {r1, r4, r5, r6}^
    189c:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
    18a0:	73614631 	cmnvc	r1, #51380224	; 0x3100000
    18a4:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
    18a8:	00676966 	rsbeq	r6, r7, r6, ror #18
    18ac:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
    18b0:	6e694c5f 	mcrvs	12, 3, r4, cr9, cr15, {2}
    18b4:	58450065 	stmdapl	r5, {r0, r2, r5, r6}^
    18b8:	4d5f4954 	vldrmi.16	s9, [pc, #-168]	; 1818 <startup-0x1fffe7e8>	; <UNPREDICTABLE>
    18bc:	0065646f 	rsbeq	r6, r5, pc, ror #8
    18c0:	552f3a43 	strpl	r3, [pc, #-2627]!	; e85 <startup-0x1ffff17b>
    18c4:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
    18c8:	696d612f 	stmdbvs	sp!, {r0, r1, r2, r3, r5, r8, sp, lr}^
    18cc:	442f726e 	strtmi	r7, [pc], #-622	; 18d4 <startup-0x1fffe72c>
    18d0:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    18d4:	642f706f 	strtvs	r7, [pc], #-111	; 18dc <startup-0x1fffe724>
    18d8:	70617461 	rsbvc	r7, r1, r1, ror #8
    18dc:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xfffff08e
    18e0:	532f746b 			; <UNDEFINED> instruction: 0x532f746b
    18e4:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    18e8:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
    18ec:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
    18f0:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    18f4:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
    18f8:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
    18fc:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    1900:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    1904:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0xfffffca1
    1908:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    190c:	445f6870 	ldrbmi	r6, [pc], #-2160	; 1914 <startup-0x1fffe6ec>
    1910:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    1914:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
    1918:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xfffff09d
    191c:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    1920:	5f787834 	svcpl	0x00787834
    1924:	69747865 	ldmdbvs	r4!, {r0, r2, r5, r6, fp, ip, sp, lr}^
    1928:	4500632e 	strmi	r6, [r0, #-814]	; 0xfffffcd2
    192c:	5f495458 	svcpl	0x00495458
    1930:	656e694c 	strbvs	r6, [lr, #-2380]!	; 0xfffff6b4
    1934:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1938:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
    193c:	6972545f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, ip, lr}^
    1940:	72656767 	rsbvc	r6, r5, #27000832	; 0x19c0000
    1944:	54584500 	ldrbpl	r4, [r8], #-1280	; 0xfffffb00
    1948:	6f4d5f49 	svcvs	0x004d5f49
    194c:	455f6564 	ldrbmi	r6, [pc, #-1380]	; 13f0 <startup-0x1fffec10>
    1950:	746e6576 	strbtvc	r6, [lr], #-1398	; 0xfffffa8a
    1954:	54584500 	ldrbpl	r4, [r8], #-1280	; 0xfffffb00
    1958:	6f4d5f49 	svcvs	0x004d5f49
    195c:	495f6564 	ldmdbmi	pc, {r2, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
    1960:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    1964:	74707572 	ldrbtvc	r7, [r0], #-1394	; 0xfffffa8e
    1968:	54584500 	ldrbpl	r4, [r8], #-1280	; 0xfffffb00
    196c:	65475f49 	strbvs	r5, [r7, #-3913]	; 0xfffff0b7
    1970:	6172656e 	cmnvs	r2, lr, ror #10
    1974:	57536574 			; <UNDEFINED> instruction: 0x57536574
    1978:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xfffff1b7
    197c:	70757272 	rsbsvc	r7, r5, r2, ror r2
    1980:	58450074 	stmdapl	r5, {r2, r4, r5, r6}^
    1984:	495f4954 	ldmdbmi	pc, {r2, r4, r6, r8, fp, lr}^	; <UNPREDICTABLE>
    1988:	5474696e 	ldrbtpl	r6, [r4], #-2414	; 0xfffff692
    198c:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
    1990:	45006665 	strmi	r6, [r0, #-1637]	; 0xfffff99b
    1994:	5f495458 	svcpl	0x00495458
    1998:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    199c:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0xfffffbad
    19a0:	45007463 	strmi	r7, [r0, #-1123]	; 0xfffffb9d
    19a4:	5f495458 	svcpl	0x00495458
    19a8:	61656c43 	cmnvs	r5, r3, asr #24
    19ac:	616c4672 	smcvs	50274	; 0xc462
    19b0:	58450067 	stmdapl	r5, {r0, r1, r2, r5, r6}^
    19b4:	6f4d4954 	svcvs	0x004d4954
    19b8:	545f6564 	ldrbpl	r6, [pc], #-1380	; 19c0 <startup-0x1fffe640>
    19bc:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
    19c0:	45006665 	strmi	r6, [r0, #-1637]	; 0xfffff99b
    19c4:	5f495458 	svcpl	0x00495458
    19c8:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    19cc:	00666544 	rsbeq	r6, r6, r4, asr #10
    19d0:	52535452 	subspl	r5, r3, #1375731712	; 0x52000000
    19d4:	54584500 	ldrbpl	r4, [r8], #-1280	; 0xfffffb00
    19d8:	72545f49 	subsvc	r5, r4, #292	; 0x124
    19dc:	65676769 	strbvs	r6, [r7, #-1897]!	; 0xfffff897
    19e0:	69525f72 	ldmdbvs	r2, {r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    19e4:	676e6973 			; <UNDEFINED> instruction: 0x676e6973
    19e8:	54584500 	ldrbpl	r4, [r8], #-1280	; 0xfffffb00
    19ec:	72545f49 	subsvc	r5, r4, #292	; 0x124
    19f0:	65676769 	strbvs	r6, [r7, #-1897]!	; 0xfffff897
    19f4:	69525f72 	ldmdbvs	r2, {r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    19f8:	676e6973 			; <UNDEFINED> instruction: 0x676e6973
    19fc:	6c61465f 	stclvs	6, cr4, [r1], #-380	; 0xfffffe84
    1a00:	676e696c 	strbvs	r6, [lr, -ip, ror #18]!
    1a04:	54584500 	ldrbpl	r4, [r8], #-1280	; 0xfffffb00
    1a08:	6e495f49 	cdpvs	15, 4, cr5, cr9, cr9, {2}
    1a0c:	45007469 	strmi	r7, [r0, #-1129]	; 0xfffffb97
    1a10:	5f495458 	svcpl	0x00495458
    1a14:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
    1a18:	5367616c 	cmnpl	r7, #108, 2
    1a1c:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
    1a20:	58450073 	stmdapl	r5, {r0, r1, r4, r5, r6}^
    1a24:	535f4954 	cmppl	pc, #84, 18	; 0x150000
    1a28:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    1a2c:	696e4974 	stmdbvs	lr!, {r2, r4, r5, r6, r8, fp, lr}^
    1a30:	58450074 	stmdapl	r5, {r2, r4, r5, r6}^
    1a34:	475f4954 			; <UNDEFINED> instruction: 0x475f4954
    1a38:	54497465 	strbpl	r7, [r9], #-1125	; 0xfffffb9b
    1a3c:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
    1a40:	45007375 	strmi	r7, [r0, #-885]	; 0xfffffc8b
    1a44:	5f495458 	svcpl	0x00495458
    1a48:	61656c43 	cmnvs	r5, r3, asr #24
    1a4c:	50544972 	subspl	r4, r4, r2, ror r9
    1a50:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    1a54:	6942676e 	stmdbvs	r2, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    1a58:	58450074 	stmdapl	r5, {r2, r4, r5, r6}^
    1a5c:	545f4954 	ldrbpl	r4, [pc], #-2388	; 1a64 <startup-0x1fffe59c>
    1a60:	67676972 			; <UNDEFINED> instruction: 0x67676972
    1a64:	465f7265 	ldrbmi	r7, [pc], -r5, ror #4
    1a68:	696c6c61 	stmdbvs	ip!, {r0, r5, r6, sl, fp, sp, lr}^
    1a6c:	4600676e 	strmi	r6, [r0], -lr, ror #14
    1a70:	00525354 	subseq	r5, r2, r4, asr r3
    1a74:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
    1a78:	67697254 			; <UNDEFINED> instruction: 0x67697254
    1a7c:	5f726567 	svcpl	0x00726567
    1a80:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    1a84:	00666544 	rsbeq	r6, r6, r4, asr #10
    1a88:	45495753 	strbmi	r5, [r9, #-1875]	; 0xfffff8ad
    1a8c:	58450052 	stmdapl	r5, {r1, r4, r6}^
    1a90:	445f4954 	ldrbmi	r4, [pc], #-2388	; 1a98 <startup-0x1fffe568>
    1a94:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
    1a98:	41490074 	hvcmi	36868	; 0x9004
    1a9c:	53005242 	movwpl	r5, #578	; 0x242
    1aa0:	69547379 	ldmdbvs	r4, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
    1aa4:	435f6b63 	cmpmi	pc, #101376	; 0x18c00
    1aa8:	6f534b4c 	svcvs	0x00534b4c
    1aac:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    1ab0:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1ab4:	6e495f43 	cdpvs	15, 4, cr5, cr9, cr3, {2}
    1ab8:	74537469 	ldrbvc	r7, [r3], #-1129	; 0xfffffb97
    1abc:	74637572 	strbtvc	r7, [r3], #-1394	; 0xfffffa8e
    1ac0:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1ac4:	72505f43 	subsvc	r5, r0, #268	; 0x10c
    1ac8:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    1acc:	72477974 	subvc	r7, r7, #116, 18	; 0x1d0000
    1ad0:	0070756f 	rsbseq	r7, r0, pc, ror #10
    1ad4:	41464d4d 	cmpmi	r6, sp, asr #26
    1ad8:	564e0052 			; <UNDEFINED> instruction: 0x564e0052
    1adc:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    1ae0:	0074696e 	rsbseq	r6, r4, lr, ror #18
    1ae4:	70706d74 	rsbsvc	r6, r0, r4, ror sp
    1ae8:	43006572 	movwmi	r6, #1394	; 0x572
    1aec:	44495550 	strbmi	r5, [r9], #-1360	; 0xfffffab0
    1af0:	45534900 	ldrbmi	r4, [r3, #-2304]	; 0xfffff700
    1af4:	43530052 	cmpmi	r3, #82	; 0x52
    1af8:	79545f42 	ldmdbvc	r4, {r1, r6, r8, r9, sl, fp, ip, lr}^
    1afc:	53006570 	movwpl	r6, #1392	; 0x570
    1b00:	00524954 	subseq	r4, r2, r4, asr r9
    1b04:	52534349 	subspl	r4, r3, #603979777	; 0x24000001
    1b08:	45535200 	ldrbmi	r5, [r3, #-512]	; 0xfffffe00
    1b0c:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
    1b10:	664f0031 			; <UNDEFINED> instruction: 0x664f0031
    1b14:	74657366 	strbtvc	r7, [r5], #-870	; 0xfffffc9a
    1b18:	41464200 	mrsmi	r4, (UNDEF: 102)
    1b1c:	46430052 			; <UNDEFINED> instruction: 0x46430052
    1b20:	41005253 	tstmi	r0, r3, asr r2
    1b24:	52435249 	subpl	r5, r3, #-1879048188	; 0x90000004
    1b28:	52544300 	subspl	r4, r4, #0, 6
    1b2c:	564e004c 	strbpl	r0, [lr], -ip, asr #32
    1b30:	535f4349 	cmppl	pc, #603979777	; 0x24000001
    1b34:	65567465 	ldrbvs	r7, [r6, #-1125]	; 0xfffffb9b
    1b38:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
    1b3c:	6c626154 	stfvse	f6, [r2], #-336	; 0xfffffeb0
    1b40:	43490065 	movtmi	r0, #36965	; 0x9065
    1b44:	43005250 	movwmi	r5, #592	; 0x250
    1b48:	42494c41 	submi	r4, r9, #16640	; 0x4100
    1b4c:	43485300 	movtmi	r5, #33536	; 0x8300
    1b50:	49005253 	stmdbmi	r0, {r0, r1, r4, r6, r9, ip, lr}
    1b54:	00524543 	subseq	r4, r2, r3, asr #10
    1b58:	73706d74 	cmnvc	r0, #116, 26	; 0x1d00
    1b5c:	4e006275 	mcrmi	2, 0, r6, cr0, cr5, {3}
    1b60:	5f434956 	svcpl	0x00434956
    1b64:	74737953 	ldrbtvc	r7, [r3], #-2387	; 0xfffff6ad
    1b68:	504c6d65 	subpl	r6, ip, r5, ror #26
    1b6c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1b70:	53006769 	movwpl	r6, #1897	; 0x769
    1b74:	69547379 	ldmdbvs	r4, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
    1b78:	435f6b63 	cmpmi	pc, #101376	; 0x18c00
    1b7c:	6f534b4c 	svcvs	0x00534b4c
    1b80:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    1b84:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1b88:	53006769 	movwpl	r6, #1897	; 0x769
    1b8c:	69547379 	ldmdbvs	r4, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
    1b90:	545f6b63 	ldrbpl	r6, [pc], #-2915	; 1b98 <startup-0x1fffe468>
    1b94:	00657079 	rsbeq	r7, r5, r9, ror r0
    1b98:	70706d74 	rsbsvc	r6, r0, r4, ror sp
    1b9c:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
    1ba0:	00797469 	rsbseq	r7, r9, r9, ror #8
    1ba4:	524f5456 	subpl	r5, pc, #1442840576	; 0x56000000
    1ba8:	41534900 	cmpmi	r3, r0, lsl #18
    1bac:	53490052 	movtpl	r0, #36946	; 0x9052
    1bb0:	44005250 	strmi	r5, [r0], #-592	; 0xfffffdb0
    1bb4:	00525346 	subseq	r5, r2, r6, asr #6
    1bb8:	52534648 	subspl	r4, r3, #72, 12	; 0x4800000
    1bbc:	464d4d00 	strbmi	r4, [sp], -r0, lsl #26
    1bc0:	564e0052 			; <UNDEFINED> instruction: 0x564e0052
    1bc4:	545f4349 	ldrbpl	r4, [pc], #-841	; 1bcc <startup-0x1fffe434>
    1bc8:	00657079 	rsbeq	r7, r5, r9, ror r0
    1bcc:	4349564e 	movtmi	r5, #38478	; 0x964e
    1bd0:	6365565f 	cmnvs	r5, #99614720	; 0x5f00000
    1bd4:	62615474 	rsbvs	r5, r1, #116, 8	; 0x74000000
    1bd8:	414f4c00 	cmpmi	pc, r0, lsl #24
    1bdc:	46410044 	strbmi	r0, [r1], -r4, asr #32
    1be0:	4c005253 	sfmmi	f5, 4, [r0], {83}	; 0x53
    1be4:	6f50776f 	svcvs	0x0050776f
    1be8:	4d726577 	cfldr64mi	mvdx6, [r2, #-476]!	; 0xfffffe24
    1bec:	0065646f 	rsbeq	r6, r5, pc, ror #8
    1bf0:	552f3a43 	strpl	r3, [pc, #-2627]!	; 11b5 <startup-0x1fffee4b>
    1bf4:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
    1bf8:	696d612f 	stmdbvs	sp!, {r0, r1, r2, r3, r5, r8, sp, lr}^
    1bfc:	442f726e 	strtmi	r7, [pc], #-622	; 1c04 <startup-0x1fffe3fc>
    1c00:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    1c04:	642f706f 	strtvs	r7, [pc], #-111	; 1c0c <startup-0x1fffe3f4>
    1c08:	70617461 	rsbvc	r7, r1, r1, ror #8
    1c0c:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xfffff08e
    1c10:	532f746b 			; <UNDEFINED> instruction: 0x532f746b
    1c14:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    1c18:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
    1c1c:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
    1c20:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    1c24:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
    1c28:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
    1c2c:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
    1c30:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
    1c34:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0xfffffca1
    1c38:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    1c3c:	445f6870 	ldrbmi	r6, [pc], #-2160	; 1c44 <startup-0x1fffe3bc>
    1c40:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    1c44:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
    1c48:	696d2f63 	stmdbvs	sp!, {r0, r1, r5, r6, r8, r9, sl, fp, sp}^
    1c4c:	632e6373 			; <UNDEFINED> instruction: 0x632e6373
    1c50:	41504300 	cmpmi	r0, r0, lsl #6
    1c54:	4e005243 	cdpmi	2, 0, cr5, cr0, cr3, {2}
    1c58:	5f434956 	svcpl	0x00434956
    1c5c:	6f697250 	svcvs	0x00697250
    1c60:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1c64:	756f7247 	strbvc	r7, [pc, #-583]!	; 1a25 <startup-0x1fffe5db>
    1c68:	6e6f4370 	mcrvs	3, 3, r4, cr15, cr0, {3}
    1c6c:	00676966 	rsbeq	r6, r7, r6, ror #18
    1c70:	5f74756f 	svcpl	0x0074756f
    1c74:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
    1c78:	69727000 	ldmdbvs	r2!, {ip, sp, lr}^
    1c7c:	5500746e 	strpl	r7, [r0, #-1134]	; 0xfffffb92
    1c80:	6573756e 	ldrbvs	r7, [r3, #-1390]!	; 0xfffffa92
    1c84:	5f003564 	svcpl	0x00003564
    1c88:	63746567 	cmnvs	r4, #432013312	; 0x19c00000
    1c8c:	00726168 	rsbseq	r6, r2, r8, ror #2
    1c90:	74736574 	ldrbtvc	r6, [r3], #-1396	; 0xfffffa8c
    1c94:	6168635f 	cmnvs	r8, pc, asr r3
    1c98:	74670072 	strbtvc	r0, [r7], #-114	; 0xffffff8e
    1c9c:	55007270 	strpl	r7, [r0, #-624]	; 0xfffffd90
    1ca0:	6573756e 	ldrbvs	r7, [r3, #-1390]!	; 0xfffffa92
    1ca4:	55003064 	strpl	r3, [r0, #-100]	; 0xffffff9c
    1ca8:	6573756e 	ldrbvs	r7, [r3, #-1390]!	; 0xfffffa92
    1cac:	55003164 	strpl	r3, [r0, #-356]	; 0xfffffe9c
    1cb0:	6573756e 	ldrbvs	r7, [r3, #-1390]!	; 0xfffffa92
    1cb4:	55003264 	strpl	r3, [r0, #-612]	; 0xfffffd9c
    1cb8:	6573756e 	ldrbvs	r7, [r3, #-1390]!	; 0xfffffa92
    1cbc:	55003364 	strpl	r3, [r0, #-868]	; 0xfffffc9c
    1cc0:	6573756e 	ldrbvs	r7, [r3, #-1390]!	; 0xfffffa92
    1cc4:	43003464 	movwmi	r3, #1124	; 0x464
    1cc8:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
    1ccc:	2f737265 	svccs	0x00737265
    1cd0:	6e696d61 	cdpvs	13, 6, cr6, cr9, cr1, {3}
    1cd4:	65442f72 	strbvs	r2, [r4, #-3954]	; 0xfffff08e
    1cd8:	6f746b73 	svcvs	0x00746b73
    1cdc:	68632f70 	stmdavs	r3!, {r4, r5, r6, r8, r9, sl, fp, sp}^
    1ce0:	615f7461 	cmpvs	pc, r1, ror #8
    1ce4:	752f7070 	strvc	r7, [pc, #-112]!	; 1c7c <startup-0x1fffe384>
    1ce8:	74726173 	ldrbtvc	r6, [r2], #-371	; 0xfffffe8d
    1cec:	5500632e 	strpl	r6, [r0, #-814]	; 0xfffffcd2
    1cf0:	54524153 	ldrbpl	r4, [r2], #-339	; 0xfffffead
    1cf4:	43435200 	movtmi	r5, #12800	; 0x3200
    1cf8:	4c43485f 	mcrrmi	8, 5, r4, r3, cr15
    1cfc:	4352004b 	cmpmi	r2, #75	; 0x4b
    1d00:	534c5f43 	movtpl	r5, #53059	; 0xcf43
    1d04:	50410045 	subpl	r0, r1, r5, asr #32
    1d08:	504c3142 	subpl	r3, ip, r2, asr #2
    1d0c:	00524e45 	subseq	r4, r2, r5, asr #28
    1d10:	5f434352 	svcpl	0x00434352
    1d14:	534c4c50 	movtpl	r4, #52304	; 0xcc50
    1d18:	6d434941 	vstrvs.16	s9, [r3, #-130]	; 0xffffff7e	; <UNPREDICTABLE>
    1d1c:	43520064 	cmpmi	r2, #100	; 0x64
    1d20:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
    1d24:	4941534c 	stmdbmi	r1, {r2, r3, r6, r8, r9, ip, lr}^
    1d28:	51766944 	cmnpl	r6, r4, asr #18
    1d2c:	43435200 	movtmi	r5, #12800	; 0x3200
    1d30:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
    1d34:	44494153 	strbmi	r4, [r9], #-339	; 0xfffffead
    1d38:	00527669 	subseq	r7, r2, r9, ror #12
    1d3c:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
    1d40:	65727375 	ldrbvs	r7, [r2, #-885]!	; 0xfffffc8b
    1d44:	59530067 	ldmdbpl	r3, {r0, r1, r2, r5, r6}^
    1d48:	4b4c4353 	blmi	1312a9c <startup-0x1eced564>
    1d4c:	6572465f 	ldrbvs	r4, [r2, #-1631]!	; 0xfffff9a1
    1d50:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
    1d54:	70007963 	andvc	r7, r0, r3, ror #18
    1d58:	006d6c6c 	rsbeq	r6, sp, ip, ror #24
    1d5c:	706c6c70 	rsbvc	r6, ip, r0, ror ip
    1d60:	43435200 	movtmi	r5, #12800	; 0x3200
    1d64:	4f434d5f 	svcmi	0x00434d5f
    1d68:	756f5331 	strbvc	r5, [pc, #-817]!	; 1a3f <startup-0x1fffe5c1>
    1d6c:	00656372 	rsbeq	r6, r5, r2, ror r3
    1d70:	5f434352 	svcpl	0x00434352
    1d74:	31425041 	cmpcc	r2, r1, asr #32
    1d78:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    1d7c:	65526870 	ldrbvs	r6, [r2, #-2160]	; 0xfffff790
    1d80:	43746573 	cmnmi	r4, #482344960	; 0x1cc00000
    1d84:	5000646d 	andpl	r6, r0, sp, ror #8
    1d88:	004e4c4c 	subeq	r4, lr, ip, asr #24
    1d8c:	5f434352 	svcpl	0x00434352
    1d90:	50494153 	subpl	r4, r9, r3, asr r1
    1d94:	41534c4c 	cmpmi	r3, ip, asr #24
    1d98:	6b6c4349 	blvs	1b12ac4 <startup-0x1e4ed53c>
    1d9c:	43766944 	cmnmi	r6, #68, 18	; 0x110000
    1da0:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1da4:	4c500067 	mrrcmi	0, 6, r0, r0, cr7	; <UNPREDICTABLE>
    1da8:	5000504c 	andpl	r5, r0, ip, asr #32
    1dac:	00514c4c 	subseq	r4, r1, ip, asr #24
    1db0:	5f434352 	svcpl	0x00434352
    1db4:	61656c43 	cmnvs	r5, r3, asr #24
    1db8:	50544972 	subspl	r4, r4, r2, ror r9
    1dbc:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    1dc0:	6942676e 	stmdbvs	r2, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    1dc4:	43520074 	cmpmi	r2, #116	; 0x74
    1dc8:	54495f43 	strbpl	r5, [r9], #-3907	; 0xfffff0bd
    1dcc:	4c4c5000 	marmi	acc0, r5, ip
    1dd0:	4352004d 	cmpmi	r2, #77	; 0x4d
    1dd4:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    1dd8:	65503142 	ldrbvs	r3, [r0, #-322]	; 0xfffffebe
    1ddc:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1de0:	42484100 	submi	r4, r8, #0, 2
    1de4:	45504c31 	ldrbmi	r4, [r0, #-3121]	; 0xfffff3cf
    1de8:	5200524e 	andpl	r5, r0, #-536870908	; 0xe0000004
    1dec:	435f4343 	cmpmi	pc, #201326593	; 0xc000001
    1df0:	6b636f6c 	blvs	18ddba8 <startup-0x1e722458>
    1df4:	43520073 	cmpmi	r2, #115	; 0x73
    1df8:	50415f43 	subpl	r5, r1, r3, asr #30
    1dfc:	65503242 	ldrbvs	r3, [r0, #-578]	; 0xfffffdbe
    1e00:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1e04:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    1e08:	4d504c6b 	ldclmi	12, cr4, [r0, #-428]	; 0xfffffe54
    1e0c:	4365646f 	cmnmi	r5, #1862270976	; 0x6f000000
    1e10:	4400646d 	strmi	r6, [r0], #-1133	; 0xfffffb93
    1e14:	46434b43 	strbmi	r4, [r3], -r3, asr #22
    1e18:	52005247 	andpl	r5, r0, #1879048196	; 0x70000004
    1e1c:	435f4343 	cmpmi	pc, #201326593	; 0xc000001
    1e20:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    1e24:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
    1e28:	42484100 	submi	r4, r8, #0, 2
    1e2c:	54535231 	ldrbpl	r5, [r3], #-561	; 0xfffffdcf
    1e30:	43440052 	movtmi	r0, #16466	; 0x4052
    1e34:	4746434b 	strbmi	r4, [r6, -fp, asr #6]
    1e38:	74003252 	strvc	r3, [r0], #-594	; 0xfffffdae
    1e3c:	6572706d 	ldrbvs	r7, [r2, #-109]!	; 0xffffff93
    1e40:	43500067 	cmpmi	r0, #103	; 0x67
    1e44:	5f324b4c 	svcpl	0x00324b4c
    1e48:	71657246 	cmnvc	r5, r6, asr #4
    1e4c:	636e6575 	cmnvs	lr, #490733568	; 0x1d400000
    1e50:	43520079 	cmpmi	r2, #121	; 0x79
    1e54:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    1e58:	65503242 	ldrbvs	r3, [r0, #-578]	; 0xfffffdbe
    1e5c:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1e60:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    1e64:	646d436b 	strbtvs	r4, [sp], #-875	; 0xfffffc95
    1e68:	42504100 	subsmi	r4, r0, #0, 2
    1e6c:	54535232 	ldrbpl	r5, [r3], #-562	; 0xfffffdce
    1e70:	43520052 	cmpmi	r2, #82	; 0x52
    1e74:	43505f43 	cmpmi	r0, #268	; 0x10c
    1e78:	43314b4c 	teqmi	r1, #76, 22	; 0x13000
    1e7c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1e80:	43520067 	cmpmi	r2, #103	; 0x67
    1e84:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    1e88:	65503342 	ldrbvs	r3, [r0, #-834]	; 0xfffffcbe
    1e8c:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1e90:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    1e94:	646d4374 	strbtvs	r4, [sp], #-884	; 0xfffffc8c
    1e98:	43435200 	movtmi	r5, #12800	; 0x3200
    1e9c:	4941535f 	stmdbmi	r1, {r0, r1, r2, r3, r4, r6, r8, r9, ip, lr}^
    1ea0:	636f6c42 	cmnvs	pc, #16896	; 0x4200
    1ea4:	4c43416b 	stfmie	f4, [r3], {107}	; 0x6b
    1ea8:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
    1eac:	00676966 	rsbeq	r6, r7, r6, ror #18
    1eb0:	5f434352 	svcpl	0x00434352
    1eb4:	31424841 	cmpcc	r2, r1, asr #16
    1eb8:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    1ebc:	65526870 	ldrbvs	r6, [r2, #-2160]	; 0xfffff790
    1ec0:	43746573 	cmnmi	r4, #482344960	; 0x1cc00000
    1ec4:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
    1ec8:	485f4343 	ldmdami	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    1ecc:	434b4c43 	movtmi	r4, #48195	; 0xbc43
    1ed0:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1ed4:	43520067 	cmpmi	r2, #103	; 0x67
    1ed8:	59535f43 	ldmdbpl	r3, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    1edc:	4b4c4353 	blmi	1312c30 <startup-0x1eced3d0>
    1ee0:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1ee4:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
    1ee8:	4c5f4343 	mrrcmi	3, 4, r4, pc, cr3	; <UNPREDICTABLE>
    1eec:	6f434553 	svcvs	0x00434553
    1ef0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1ef4:	43435200 	movtmi	r5, #12800	; 0x3200
    1ef8:	414c465f 	cmpmi	ip, pc, asr r6
    1efc:	4c500047 	mrrcmi	0, 4, r0, r0, cr7	; <UNPREDICTABLE>
    1f00:	4746434c 	strbmi	r4, [r6, -ip, asr #6]
    1f04:	43520052 	cmpmi	r2, #82	; 0x52
    1f08:	61425f43 	cmpvs	r2, r3, asr #30
    1f0c:	70756b63 	rsbsvc	r6, r5, r3, ror #22
    1f10:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    1f14:	646d4374 	strbtvs	r4, [sp], #-884	; 0xfffffc8c
    1f18:	72724500 	rsbsvc	r4, r2, #0, 10
    1f1c:	7453726f 	ldrbvc	r7, [r3], #-623	; 0xfffffd91
    1f20:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1f24:	43435200 	movtmi	r5, #12800	; 0x3200
    1f28:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
    1f2c:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    1f30:	52006563 	andpl	r6, r0, #415236096	; 0x18c00000
    1f34:	475f4343 	ldrbmi	r4, [pc, -r3, asr #6]
    1f38:	59537465 	ldmdbpl	r3, {r0, r2, r5, r6, sl, ip, sp, lr}^
    1f3c:	4b4c4353 	blmi	1312c90 <startup-0x1eced370>
    1f40:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    1f44:	52006563 	andpl	r6, r0, #415236096	; 0x18c00000
    1f48:	575f4343 	ldrbpl	r4, [pc, -r3, asr #6]
    1f4c:	46746961 	ldrbtmi	r6, [r4], -r1, ror #18
    1f50:	5348726f 	movtpl	r7, #33391	; 0x826f
    1f54:	61745345 	cmnvs	r4, r5, asr #6
    1f58:	70557472 	subsvc	r7, r5, r2, ror r4
    1f5c:	4c434800 	mcrrmi	8, 0, r4, r3, cr0
    1f60:	72465f4b 	subvc	r5, r6, #300	; 0x12c
    1f64:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
    1f68:	0079636e 	rsbseq	r6, r9, lr, ror #6
    1f6c:	5f434352 	svcpl	0x00434352
    1f70:	31425041 	cmpcc	r2, r1, asr #32
    1f74:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    1f78:	70006870 	andvc	r6, r0, r0, ror r8
    1f7c:	63766c6c 	cmnvs	r6, #108, 24	; 0x6c00
    1f80:	4352006f 	cmpmi	r2, #111	; 0x6f
    1f84:	434d5f43 	movtmi	r5, #57155	; 0xdf43
    1f88:	6f43314f 	svcvs	0x0043314f
    1f8c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1f90:	43435200 	movtmi	r5, #12800	; 0x3200
    1f94:	5359535f 	cmppl	r9, #2080374785	; 0x7c000001
    1f98:	004b4c43 	subeq	r4, fp, r3, asr #24
    1f9c:	5f434352 	svcpl	0x00434352
    1fa0:	494c4c50 	stmdbmi	ip, {r4, r6, sl, fp, lr}^
    1fa4:	6d435332 	stclvs	3, cr5, [r3, #-200]	; 0xffffff38
    1fa8:	43520064 	cmpmi	r2, #100	; 0x64
    1fac:	79545f43 	ldmdbvc	r4, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    1fb0:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
    1fb4:	72700066 	rsbsvc	r0, r0, #102	; 0x66
    1fb8:	00637365 	rsbeq	r7, r3, r5, ror #6
    1fbc:	5f434352 	svcpl	0x00434352
    1fc0:	43435452 	movtmi	r5, #13394	; 0x3452
    1fc4:	6f534b4c 	svcvs	0x00534b4c
    1fc8:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    1fcc:	43435200 	movtmi	r5, #12800	; 0x3200
    1fd0:	4941535f 	stmdbmi	r1, {r0, r1, r2, r3, r4, r6, r8, r9, ip, lr}^
    1fd4:	636f6c42 	cmnvs	pc, #16896	; 0x4200
    1fd8:	4c43416b 	stfmie	f4, [r3], {107}	; 0x6b
    1fdc:	756f534b 	strbvc	r5, [pc, #-843]!	; 1c99 <startup-0x1fffe367>
    1fe0:	00656372 	rsbeq	r6, r5, r2, ror r3
    1fe4:	5f434352 	svcpl	0x00434352
    1fe8:	42494153 	submi	r4, r9, #-1073741804	; 0xc0000014
    1fec:	6b636f6c 	blvs	18ddda4 <startup-0x1e72225c>
    1ff0:	4b4c4342 	blmi	1312d00 <startup-0x1eced300>
    1ff4:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    1ff8:	52006563 	andpl	r6, r0, #415236096	; 0x18c00000
    1ffc:	4c5f4343 	mrrcmi	3, 4, r4, pc, cr3	; <UNPREDICTABLE>
    2000:	43434454 	movtmi	r4, #13396	; 0x3454
    2004:	69444b4c 	stmdbvs	r4, {r2, r3, r6, r8, r9, fp, lr}^
    2008:	6e6f4376 	mcrvs	3, 3, r4, cr15, cr6, {3}
    200c:	00676966 	rsbeq	r6, r7, r6, ror #18
    2010:	494c4c50 	stmdbmi	ip, {r4, r6, sl, fp, lr}^
    2014:	46435332 			; <UNDEFINED> instruction: 0x46435332
    2018:	52005247 	andpl	r5, r0, #1879048196	; 0x70000004
    201c:	415f4343 	cmpmi	pc, r3, asr #6
    2020:	50324248 	eorspl	r4, r2, r8, asr #4
    2024:	70697265 	rsbvc	r7, r9, r5, ror #4
    2028:	6f6c4368 	svcvs	0x006c4368
    202c:	504c6b63 	subpl	r6, ip, r3, ror #22
    2030:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    2034:	00646d43 	rsbeq	r6, r4, r3, asr #26
    2038:	5f434352 	svcpl	0x00434352
    203c:	494c4c50 	stmdbmi	ip, {r4, r6, sl, fp, lr}^
    2040:	6f435332 	svcvs	0x00435332
    2044:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2048:	43435200 	movtmi	r5, #12800	; 0x3200
    204c:	4953485f 	ldmdbmi	r3, {r0, r1, r2, r3, r4, r6, fp, lr}^
    2050:	00646d43 	rsbeq	r6, r4, r3, asr #26
    2054:	5f434352 	svcpl	0x00434352
    2058:	32424841 	subcc	r4, r2, #4259840	; 0x410000
    205c:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    2060:	41006870 	tstmi	r0, r0, ror r8
    2064:	4c324250 	lfmmi	f4, 4, [r2], #-320	; 0xfffffec0
    2068:	524e4550 	subpl	r4, lr, #80, 10	; 0x14000000
    206c:	43435200 	movtmi	r5, #12800	; 0x3200
    2070:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
    2074:	72655033 	rsbvc	r5, r5, #51	; 0x33
    2078:	00687069 	rsbeq	r7, r8, r9, rrx
    207c:	5f434352 	svcpl	0x00434352
    2080:	324f434d 	subcc	r4, pc, #872415233	; 0x34000001
    2084:	00766944 	rsbseq	r6, r6, r4, asr #18
    2088:	5f434352 	svcpl	0x00434352
    208c:	50494153 	subpl	r4, r9, r3, asr r1
    2090:	32494c4c 	subcc	r4, r9, #76, 24	; 0x4c00
    2094:	6b6c4353 	blvs	1b12de8 <startup-0x1e4ed218>
    2098:	43766944 	cmnmi	r6, #68, 18	; 0x110000
    209c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    20a0:	43520067 	cmpmi	r2, #103	; 0x67
    20a4:	54525f43 	ldrbpl	r5, [r2], #-3907	; 0xfffff0bd
    20a8:	4b4c4343 	blmi	1312dbc <startup-0x1eced244>
    20ac:	00646d43 	rsbeq	r6, r4, r3, asr #26
    20b0:	4f525245 	svcmi	0x00525245
    20b4:	43520052 	cmpmi	r2, #82	; 0x52
    20b8:	6c435f43 	mcrrvs	15, 4, r5, r3, cr3
    20bc:	536b636f 	cmnpl	fp, #-1140850687	; 0xbc000001
    20c0:	72756365 	rsbsvc	r6, r5, #-1811939327	; 0x94000001
    20c4:	53797469 	cmnpl	r9, #1761607680	; 0x69000000
    20c8:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
    20cc:	646d436d 	strbtvs	r4, [sp], #-877	; 0xfffffc93
    20d0:	43435200 	movtmi	r5, #12800	; 0x3200
    20d4:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
    20d8:	44533249 	ldrbmi	r3, [r3], #-585	; 0xfffffdb7
    20dc:	00517669 	subseq	r7, r1, r9, ror #12
    20e0:	5f434352 	svcpl	0x00434352
    20e4:	534c4c50 	movtpl	r4, #52304	; 0xcc50
    20e8:	6f434941 	svcvs	0x00434941
    20ec:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    20f0:	42484100 	submi	r4, r8, #0, 2
    20f4:	524e4533 	subpl	r4, lr, #213909504	; 0xcc00000
    20f8:	43435200 	movtmi	r5, #12800	; 0x3200
    20fc:	45534c5f 	ldrbmi	r4, [r3, #-3167]	; 0xfffff3a1
    2100:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    2104:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2108:	41006769 	tstmi	r0, r9, ror #14
    210c:	4c324248 	lfmmi	f4, 4, [r2], #-288	; 0xfffffee0
    2110:	524e4550 	subpl	r4, lr, #80, 10	; 0x14000000
    2114:	43435200 	movtmi	r5, #12800	; 0x3200
    2118:	4f434d5f 	svcmi	0x00434d5f
    211c:	76694431 			; <UNDEFINED> instruction: 0x76694431
    2120:	43435200 	movtmi	r5, #12800	; 0x3200
    2124:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
    2128:	72655032 	rsbvc	r5, r5, #50	; 0x32
    212c:	52687069 	rsbpl	r7, r8, #105	; 0x69
    2130:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
    2134:	00646d43 	rsbeq	r6, r4, r3, asr #26
    2138:	5f434352 	svcpl	0x00434352
    213c:	324f434d 	subcc	r4, pc, #872415233	; 0x34000001
    2140:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    2144:	52006563 	andpl	r6, r0, #415236096	; 0x18c00000
    2148:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    214c:	4c435332 	mcrrmi	3, 3, r5, r3, cr2
    2150:	756f534b 	strbvc	r5, [pc, #-843]!	; 1e0d <startup-0x1fffe1f3>
    2154:	00656372 	rsbeq	r6, r5, r2, ror r3
    2158:	534c4c50 	movtpl	r4, #52304	; 0xcc50
    215c:	46434941 	strbmi	r4, [r3], -r1, asr #18
    2160:	52005247 	andpl	r5, r0, #1879048196	; 0x70000004
    2164:	475f4343 	ldrbmi	r4, [pc, -r3, asr #6]
    2168:	6c467465 	cfstrdvs	mvd7, [r6], {101}	; 0x65
    216c:	74536761 	ldrbvc	r6, [r3], #-1889	; 0xfffff89f
    2170:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    2174:	43435200 	movtmi	r5, #12800	; 0x3200
    2178:	4553485f 	ldrbmi	r4, [r3, #-2143]	; 0xfffff7a1
    217c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2180:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
    2184:	535f4343 	cmppl	pc, #201326593	; 0xc000001
    2188:	6c424941 	mcrrvs	9, 4, r4, r2, cr1	; <UNPREDICTABLE>
    218c:	426b636f 	rsbmi	r6, fp, #-1140850687	; 0xbc000001
    2190:	434b4c43 	movtmi	r4, #48195	; 0xbc43
    2194:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2198:	4c500067 	mrrcmi	0, 6, r0, r0, cr7	; <UNPREDICTABLE>
    219c:	4941534c 	stmdbmi	r1, {r2, r3, r6, r8, r9, ip, lr}^
    21a0:	4c50004e 	mrrcmi	0, 4, r0, r0, cr14	; <UNPREDICTABLE>
    21a4:	4941534c 	stmdbmi	r1, {r2, r3, r6, r8, r9, ip, lr}^
    21a8:	4c500051 	mrrcmi	0, 5, r0, r0, cr1	; <UNPREDICTABLE>
    21ac:	4941534c 	stmdbmi	r1, {r2, r3, r6, r8, r9, ip, lr}^
    21b0:	43520052 	cmpmi	r2, #82	; 0x52
    21b4:	49545f43 	ldmdbmi	r4, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    21b8:	4b4c434d 	blmi	1312ef4 <startup-0x1eced10c>
    21bc:	73657250 	cmnvc	r5, #80, 4
    21c0:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
    21c4:	43520072 	cmpmi	r2, #114	; 0x72
    21c8:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
    21cc:	646d434c 	strbtvs	r4, [sp], #-844	; 0xfffffcb4
    21d0:	43435200 	movtmi	r5, #12800	; 0x3200
    21d4:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
    21d8:	72655031 	rsbvc	r5, r5, #49	; 0x31
    21dc:	43687069 	cmnmi	r8, #105	; 0x69
    21e0:	6b636f6c 	blvs	18ddf98 <startup-0x1e722068>
    21e4:	00646d43 	rsbeq	r6, r4, r3, asr #26
    21e8:	32425041 	subcc	r5, r2, #65	; 0x41
    21ec:	00524e45 	subseq	r4, r2, r5, asr #28
    21f0:	33424841 	movtcc	r4, #10305	; 0x2841
    21f4:	52545352 	subspl	r5, r4, #1207959553	; 0x48000001
    21f8:	43435200 	movtmi	r5, #12800	; 0x3200
    21fc:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 2204 <startup-0x1fffddfc>
    2200:	43520065 	cmpmi	r2, #101	; 0x65
    2204:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    2208:	65503242 	ldrbvs	r3, [r0, #-578]	; 0xfffffdbe
    220c:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    2210:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    2214:	646d4374 	strbtvs	r4, [sp], #-884	; 0xfffffc8c
    2218:	43435200 	movtmi	r5, #12800	; 0x3200
    221c:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
    2220:	72655031 	rsbvc	r5, r5, #49	; 0x31
    2224:	43687069 	cmnmi	r8, #105	; 0x69
    2228:	6b636f6c 	blvs	18ddfe0 <startup-0x1e722020>
    222c:	6f4d504c 	svcvs	0x004d504c
    2230:	6d436564 	cfstr64vs	mvdx6, [r3, #-400]	; 0xfffffe70
    2234:	43520064 	cmpmi	r2, #100	; 0x64
    2238:	43505f43 	cmpmi	r0, #268	; 0x10c
    223c:	43324b4c 	teqmi	r2, #76, 22	; 0x13000
    2240:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2244:	43520067 	cmpmi	r2, #103	; 0x67
    2248:	59535f43 	ldmdbpl	r3, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    224c:	4b4c4353 	blmi	1312fa0 <startup-0x1eced060>
    2250:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    2254:	52006563 	andpl	r6, r0, #415236096	; 0x18c00000
    2258:	485f4343 	ldmdami	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    225c:	50004553 	andpl	r4, r0, r3, asr r5
    2260:	314b4c43 	cmpcc	fp, r3, asr #24
    2264:	6572465f 	ldrbvs	r4, [r2, #-1631]!	; 0xfffff9a1
    2268:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
    226c:	41007963 	tstmi	r0, r3, ror #18
    2270:	48414250 	stmdami	r1, {r4, r6, r9, lr}^
    2274:	65725042 	ldrbvs	r5, [r2, #-66]!	; 0xffffffbe
    2278:	61546373 	cmpvs	r4, r3, ror r3
    227c:	00656c62 	rsbeq	r6, r5, r2, ror #24
    2280:	5f434352 	svcpl	0x00434352
    2284:	756a6441 	strbvc	r6, [sl, #-1089]!	; 0xfffffbbf
    2288:	53487473 	movtpl	r7, #33907	; 0x8473
    228c:	6c614349 	stclvs	3, cr4, [r1], #-292	; 0xfffffedc
    2290:	61726269 	cmnvs	r2, r9, ror #4
    2294:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    2298:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    229c:	73680065 	cmnvc	r8, #101	; 0x65
    22a0:	61747365 	cmnvs	r4, r5, ror #6
    22a4:	00737574 	rsbseq	r7, r3, r4, ror r5
    22a8:	494c4c50 	stmdbmi	ip, {r4, r6, sl, fp, lr}^
    22ac:	004e5332 	subeq	r5, lr, r2, lsr r3
    22b0:	5f434352 	svcpl	0x00434352
    22b4:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    22b8:	6b636f6c 	blvs	18de070 <startup-0x1e721f90>
    22bc:	65724673 	ldrbvs	r4, [r2, #-1651]!	; 0xfffff98d
    22c0:	43520071 	cmpmi	r2, #113	; 0x71
    22c4:	50415f43 	subpl	r5, r1, r3, asr #30
    22c8:	65503242 	ldrbvs	r3, [r0, #-578]	; 0xfffffdbe
    22cc:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    22d0:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    22d4:	646d436b 	strbtvs	r4, [sp], #-875	; 0xfffffc95
    22d8:	42484100 	submi	r4, r8, #0, 2
    22dc:	54535232 	ldrbpl	r5, [r3], #-562	; 0xfffffdce
    22e0:	43520052 	cmpmi	r2, #82	; 0x52
    22e4:	65445f43 	strbvs	r5, [r4, #-3907]	; 0xfffff0bd
    22e8:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    22ec:	4c4c5000 	marmi	acc0, r5, ip
    22f0:	52533249 	subspl	r3, r3, #-1879048188	; 0x90000004
    22f4:	43435200 	movtmi	r5, #12800	; 0x3200
    22f8:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    22fc:	74535449 	ldrbvc	r5, [r3], #-1097	; 0xfffffbb7
    2300:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    2304:	42504100 	subsmi	r4, r0, #0, 2
    2308:	524e4531 	subpl	r4, lr, #205520896	; 0xc400000
    230c:	42484100 	submi	r4, r8, #0, 2
    2310:	524e4532 	subpl	r4, lr, #209715200	; 0xc800000
    2314:	43435200 	movtmi	r5, #12800	; 0x3200
    2318:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
    231c:	72655033 	rsbvc	r5, r5, #51	; 0x33
    2320:	43687069 	cmnmi	r8, #105	; 0x69
    2324:	6b636f6c 	blvs	18de0dc <startup-0x1e721f24>
    2328:	6f4d504c 	svcvs	0x004d504c
    232c:	6d436564 	cfstr64vs	mvdx6, [r3, #-400]	; 0xfffffe70
    2330:	74730064 	ldrbtvc	r0, [r3], #-100	; 0xffffff9c
    2334:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
    2338:	756f6370 	strbvc	r6, [pc, #-880]!	; 1fd0 <startup-0x1fffe030>
    233c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    2340:	43435200 	movtmi	r5, #12800	; 0x3200
    2344:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
    2348:	72655032 	rsbvc	r5, r5, #50	; 0x32
    234c:	00687069 	rsbeq	r7, r8, r9, rrx
    2350:	5f434352 	svcpl	0x00434352
    2354:	434d4954 	movtmi	r4, #55636	; 0xd954
    2358:	72504b4c 	subsvc	r4, r0, #76, 22	; 0x13000
    235c:	6f437365 	svcvs	0x00437365
    2360:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2364:	43435200 	movtmi	r5, #12800	; 0x3200
    2368:	5332495f 	teqpl	r2, #1556480	; 0x17c000
    236c:	434b4c43 	movtmi	r4, #48195	; 0xbc43
    2370:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2374:	43520067 	cmpmi	r2, #103	; 0x67
    2378:	434d5f43 	movtmi	r5, #57155	; 0xdf43
    237c:	6f43324f 	svcvs	0x0043324f
    2380:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2384:	43535300 	cmpmi	r3, #0, 6
    2388:	41005247 	tstmi	r0, r7, asr #4
    238c:	4c334248 	lfmmi	f4, 4, [r3], #-288	; 0xfffffee0
    2390:	524e4550 	subpl	r4, lr, #80, 10	; 0x14000000
    2394:	2f3a4300 	svccs	0x003a4300
    2398:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    239c:	6d612f73 	stclvs	15, cr2, [r1, #-460]!	; 0xfffffe34
    23a0:	2f726e69 	svccs	0x00726e69
    23a4:	6b736544 	blvs	1cdb8bc <startup-0x1e324744>
    23a8:	2f706f74 	svccs	0x00706f74
    23ac:	61746164 	cmnvs	r4, r4, ror #2
    23b0:	6a6f7270 	bvs	1bded78 <startup-0x1e421288>
    23b4:	2f746b65 	svccs	0x00746b65
    23b8:	334d5453 	movtcc	r5, #54355	; 0xd453
    23bc:	5f344632 	svcpl	0x00344632
    23c0:	2f62696c 	svccs	0x0062696c
    23c4:	334d5453 	movtcc	r5, #54355	; 0xd453
    23c8:	5f344632 	svcpl	0x00344632
    23cc:	2f62696c 	svccs	0x0062696c
    23d0:	334d5453 	movtcc	r5, #54355	; 0xd453
    23d4:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
    23d8:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xfffff088
    23dc:	72655064 	rsbvc	r5, r5, #100	; 0x64
    23e0:	5f687069 	svcpl	0x00687069
    23e4:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    23e8:	732f7265 			; <UNDEFINED> instruction: 0x732f7265
    23ec:	732f6372 			; <UNDEFINED> instruction: 0x732f6372
    23f0:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    23f4:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    23f8:	6363725f 	cmnvs	r3, #-268435451	; 0xf0000005
    23fc:	4100632e 	tstmi	r0, lr, lsr #6
    2400:	52314250 	eorspl	r4, r1, #80, 4
    2404:	00525453 	subseq	r5, r2, r3, asr r4
    2408:	5f434352 	svcpl	0x00434352
    240c:	4349534c 	movtmi	r5, #37708	; 0x934c
    2410:	4300646d 	movwmi	r6, #1133	; 0x46d
    2414:	5441474b 	strbpl	r4, [r1], #-1867	; 0xfffff8b5
    2418:	00524e45 	subseq	r4, r2, r5, asr #28
    241c:	52434442 	subpl	r4, r3, #1107296256	; 0x42000000
    2420:	43435200 	movtmi	r5, #12800	; 0x3200
    2424:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
    2428:	72655031 	rsbvc	r5, r5, #49	; 0x31
    242c:	43687069 	cmnmi	r8, #105	; 0x69
    2430:	6b636f6c 	blvs	18de1e8 <startup-0x1e721e18>
    2434:	00646d43 	rsbeq	r6, r4, r3, asr #26
    2438:	5f434352 	svcpl	0x00434352
    243c:	6f435449 	svcvs	0x00435449
    2440:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2444:	43555300 	cmpmi	r5, #0, 6
    2448:	53534543 	cmppl	r3, #281018368	; 0x10c00000
    244c:	43435200 	movtmi	r5, #12800	; 0x3200
    2450:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
    2454:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2458:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
    245c:	435f4343 	cmpmi	pc, #201326593	; 0xc000001
    2460:	6b636f6c 	blvs	18de218 <startup-0x1e721de8>
    2464:	70795473 	rsbsvc	r5, r9, r3, ror r4
    2468:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    246c:	42484100 	submi	r4, r8, #0, 2
    2470:	524e4531 	subpl	r4, lr, #205520896	; 0xc400000
    2474:	43435200 	movtmi	r5, #12800	; 0x3200
    2478:	4354525f 	cmpmi	r4, #-268435451	; 0xf0000005
    247c:	434b4c43 	movtmi	r4, #48195	; 0xbc43
    2480:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2484:	6c700067 	ldclvs	0, cr0, [r0], #-412	; 0xfffffe64
    2488:	756f736c 	strbvc	r7, [pc, #-876]!	; 2124 <startup-0x1fffdedc>
    248c:	00656372 	rsbeq	r6, r5, r2, ror r3
    2490:	5f434352 	svcpl	0x00434352
    2494:	31424841 	cmpcc	r2, r1, asr #16
    2498:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    249c:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
    24a0:	4c6b636f 	stclmi	3, cr6, [fp], #-444	; 0xfffffe44
    24a4:	646f4d50 	strbtvs	r4, [pc], #-3408	; 24ac <startup-0x1fffdb54>
    24a8:	646d4365 	strbtvs	r4, [sp], #-869	; 0xfffffc9b
    24ac:	43435200 	movtmi	r5, #12800	; 0x3200
    24b0:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
    24b4:	72655033 	rsbvc	r5, r5, #51	; 0x33
    24b8:	43687069 	cmnmi	r8, #105	; 0x69
    24bc:	6b636f6c 	blvs	18de274 <startup-0x1e721d8c>
    24c0:	00646d43 	rsbeq	r6, r4, r3, asr #26

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d39 	eorscc	r2, r2, r9, lsr sp
  30:	712d3931 			; <UNDEFINED> instruction: 0x712d3931
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	31393130 	teqcc	r9, r0, lsr r1
  48:	20353230 	eorscs	r3, r5, r0, lsr r2
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
  5c:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
  60:	6172622d 	cmnvs	r2, sp, lsr #4
  64:	2068636e 	rsbcs	r6, r8, lr, ror #6
  68:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  6c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  70:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  74:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
       0:	0000000c 	andeq	r0, r0, ip
       4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
       8:	7c020001 	stcvc	0, cr0, [r2], {1}
       c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
      10:	0000000c 	andeq	r0, r0, ip
      14:	00000000 	andeq	r0, r0, r0
      18:	20000000 	andcs	r0, r0, r0
      1c:	0000000c 	andeq	r0, r0, ip
      20:	0000001c 	andeq	r0, r0, ip, lsl r0
      24:	00000000 	andeq	r0, r0, r0
      28:	20000010 	andcs	r0, r0, r0, lsl r0
      2c:	00000058 	andeq	r0, r0, r8, asr r0
      30:	87080e41 	strhi	r0, [r8, -r1, asr #28]
      34:	41018e02 	tstmi	r1, r2, lsl #28
      38:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
      3c:	00000007 	andeq	r0, r0, r7
      40:	0000001c 	andeq	r0, r0, ip, lsl r0
      44:	00000000 	andeq	r0, r0, r0
      48:	20000068 	andcs	r0, r0, r8, rrx
      4c:	000000a4 	andeq	r0, r0, r4, lsr #1
      50:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
      54:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
      58:	300e4101 	andcc	r4, lr, r1, lsl #2
      5c:	00070d41 	andeq	r0, r7, r1, asr #26
      60:	0000001c 	andeq	r0, r0, ip, lsl r0
      64:	00000000 	andeq	r0, r0, r0
      68:	2000010c 	andcs	r0, r0, ip, lsl #2
      6c:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
      70:	87080e41 	strhi	r0, [r8, -r1, asr #28]
      74:	41018e02 	tstmi	r1, r2, lsl #28
      78:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
      7c:	00000007 	andeq	r0, r0, r7
      80:	0000001c 	andeq	r0, r0, ip, lsl r0
      84:	00000000 	andeq	r0, r0, r0
      88:	200001fc 	strdcs	r0, [r0], -ip
      8c:	00000130 	andeq	r0, r0, r0, lsr r1
      90:	87080e41 	strhi	r0, [r8, -r1, asr #28]
      94:	41018e02 	tstmi	r1, r2, lsl #28
      98:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
      9c:	00000007 	andeq	r0, r0, r7
      a0:	0000001c 	andeq	r0, r0, ip, lsl r0
      a4:	00000000 	andeq	r0, r0, r0
      a8:	2000032c 	andcs	r0, r0, ip, lsr #6
      ac:	00000098 	muleq	r0, r8, r0
      b0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
      b4:	41018e02 	tstmi	r1, r2, lsl #28
      b8:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
      bc:	00000007 	andeq	r0, r0, r7
      c0:	00000018 	andeq	r0, r0, r8, lsl r0
      c4:	00000000 	andeq	r0, r0, r0
      c8:	200003c4 	andcs	r0, r0, r4, asr #7
      cc:	00000024 	andeq	r0, r0, r4, lsr #32
      d0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
      d4:	41018e02 	tstmi	r1, r2, lsl #28
      d8:	0000070d 	andeq	r0, r0, sp, lsl #14
      dc:	0000000c 	andeq	r0, r0, ip
      e0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
      e4:	7c020001 	stcvc	0, cr0, [r2], {1}
      e8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
      ec:	0000001c 	andeq	r0, r0, ip, lsl r0
      f0:	000000dc 	ldrdeq	r0, [r0], -ip
      f4:	200003e8 	andcs	r0, r0, r8, ror #7
      f8:	00000170 	andeq	r0, r0, r0, ror r1
      fc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     100:	41018e02 	tstmi	r1, r2, lsl #28
     104:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     108:	00000007 	andeq	r0, r0, r7
     10c:	0000001c 	andeq	r0, r0, ip, lsl r0
     110:	000000dc 	ldrdeq	r0, [r0], -ip
     114:	20000558 	andcs	r0, r0, r8, asr r5
     118:	0000011a 	andeq	r0, r0, sl, lsl r1
     11c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     120:	41018e02 	tstmi	r1, r2, lsl #28
     124:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
     128:	00000007 	andeq	r0, r0, r7
     12c:	0000001c 	andeq	r0, r0, ip, lsl r0
     130:	000000dc 	ldrdeq	r0, [r0], -ip
     134:	20000672 	andcs	r0, r0, r2, ror r6
     138:	00000032 	andeq	r0, r0, r2, lsr r0
     13c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     140:	41018e02 	tstmi	r1, r2, lsl #28
     144:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     148:	00000007 	andeq	r0, r0, r7
     14c:	0000001c 	andeq	r0, r0, ip, lsl r0
     150:	000000dc 	ldrdeq	r0, [r0], -ip
     154:	200006a4 	andcs	r0, r0, r4, lsr #13
     158:	00000046 	andeq	r0, r0, r6, asr #32
     15c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     160:	41018e02 	tstmi	r1, r2, lsl #28
     164:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     168:	00000007 	andeq	r0, r0, r7
     16c:	0000001c 	andeq	r0, r0, ip, lsl r0
     170:	000000dc 	ldrdeq	r0, [r0], -ip
     174:	200006ea 	andcs	r0, r0, sl, ror #13
     178:	00000040 	andeq	r0, r0, r0, asr #32
     17c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     180:	41018e02 	tstmi	r1, r2, lsl #28
     184:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     188:	00000007 	andeq	r0, r0, r7
     18c:	0000001c 	andeq	r0, r0, ip, lsl r0
     190:	000000dc 	ldrdeq	r0, [r0], -ip
     194:	2000072a 	andcs	r0, r0, sl, lsr #14
     198:	00000016 	andeq	r0, r0, r6, lsl r0
     19c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     1a0:	41018e02 	tstmi	r1, r2, lsl #28
     1a4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     1a8:	00000007 	andeq	r0, r0, r7
     1ac:	0000001c 	andeq	r0, r0, ip, lsl r0
     1b0:	000000dc 	ldrdeq	r0, [r0], -ip
     1b4:	20000740 	andcs	r0, r0, r0, asr #14
     1b8:	00000040 	andeq	r0, r0, r0, asr #32
     1bc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     1c0:	41018e02 	tstmi	r1, r2, lsl #28
     1c4:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     1c8:	00000007 	andeq	r0, r0, r7
     1cc:	0000001c 	andeq	r0, r0, ip, lsl r0
     1d0:	000000dc 	ldrdeq	r0, [r0], -ip
     1d4:	20000780 	andcs	r0, r0, r0, lsl #15
     1d8:	00000016 	andeq	r0, r0, r6, lsl r0
     1dc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     1e0:	41018e02 	tstmi	r1, r2, lsl #28
     1e4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     1e8:	00000007 	andeq	r0, r0, r7
     1ec:	0000001c 	andeq	r0, r0, ip, lsl r0
     1f0:	000000dc 	ldrdeq	r0, [r0], -ip
     1f4:	20000796 	mulcs	r0, r6, r7
     1f8:	0000001e 	andeq	r0, r0, lr, lsl r0
     1fc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     200:	41018e02 	tstmi	r1, r2, lsl #28
     204:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     208:	00000007 	andeq	r0, r0, r7
     20c:	0000001c 	andeq	r0, r0, ip, lsl r0
     210:	000000dc 	ldrdeq	r0, [r0], -ip
     214:	200007b4 			; <UNDEFINED> instruction: 0x200007b4
     218:	0000001e 	andeq	r0, r0, lr, lsl r0
     21c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     220:	41018e02 	tstmi	r1, r2, lsl #28
     224:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     228:	00000007 	andeq	r0, r0, r7
     22c:	0000001c 	andeq	r0, r0, ip, lsl r0
     230:	000000dc 	ldrdeq	r0, [r0], -ip
     234:	200007d2 	ldrdcs	r0, [r0], -r2
     238:	0000003a 	andeq	r0, r0, sl, lsr r0
     23c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     240:	41018e02 	tstmi	r1, r2, lsl #28
     244:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     248:	00000007 	andeq	r0, r0, r7
     24c:	0000001c 	andeq	r0, r0, ip, lsl r0
     250:	000000dc 	ldrdeq	r0, [r0], -ip
     254:	2000080c 	andcs	r0, r0, ip, lsl #16
     258:	0000001e 	andeq	r0, r0, lr, lsl r0
     25c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     260:	41018e02 	tstmi	r1, r2, lsl #28
     264:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     268:	00000007 	andeq	r0, r0, r7
     26c:	0000001c 	andeq	r0, r0, ip, lsl r0
     270:	000000dc 	ldrdeq	r0, [r0], -ip
     274:	2000082a 	andcs	r0, r0, sl, lsr #16
     278:	00000024 	andeq	r0, r0, r4, lsr #32
     27c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     280:	41018e02 	tstmi	r1, r2, lsl #28
     284:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     288:	00000007 	andeq	r0, r0, r7
     28c:	0000001c 	andeq	r0, r0, ip, lsl r0
     290:	000000dc 	ldrdeq	r0, [r0], -ip
     294:	2000084e 	andcs	r0, r0, lr, asr #16
     298:	000000a4 	andeq	r0, r0, r4, lsr #1
     29c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     2a0:	41018e02 	tstmi	r1, r2, lsl #28
     2a4:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     2a8:	00000007 	andeq	r0, r0, r7
     2ac:	0000000c 	andeq	r0, r0, ip
     2b0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     2b4:	7c020001 	stcvc	0, cr0, [r2], {1}
     2b8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     2bc:	00000018 	andeq	r0, r0, r8, lsl r0
     2c0:	000002ac 	andeq	r0, r0, ip, lsr #5
     2c4:	200008f4 	strdcs	r0, [r0], -r4
     2c8:	00000022 	andeq	r0, r0, r2, lsr #32
     2cc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     2d0:	41018e02 	tstmi	r1, r2, lsl #28
     2d4:	0000070d 	andeq	r0, r0, sp, lsl #14
     2d8:	0000001c 	andeq	r0, r0, ip, lsl r0
     2dc:	000002ac 	andeq	r0, r0, ip, lsr #5
     2e0:	20000916 	andcs	r0, r0, r6, lsl r9
     2e4:	00000022 	andeq	r0, r0, r2, lsr #32
     2e8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     2ec:	41018e02 	tstmi	r1, r2, lsl #28
     2f0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     2f4:	00000007 	andeq	r0, r0, r7
     2f8:	0000001c 	andeq	r0, r0, ip, lsl r0
     2fc:	000002ac 	andeq	r0, r0, ip, lsr #5
     300:	20000938 	andcs	r0, r0, r8, lsr r9
     304:	00000020 	andeq	r0, r0, r0, lsr #32
     308:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     30c:	41018e02 	tstmi	r1, r2, lsl #28
     310:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     314:	00000007 	andeq	r0, r0, r7
     318:	0000001c 	andeq	r0, r0, ip, lsl r0
     31c:	000002ac 	andeq	r0, r0, ip, lsr #5
     320:	20000958 	andcs	r0, r0, r8, asr r9
     324:	00000090 	muleq	r0, r0, r0
     328:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     32c:	41018e02 	tstmi	r1, r2, lsl #28
     330:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     334:	00000007 	andeq	r0, r0, r7
     338:	0000001c 	andeq	r0, r0, ip, lsl r0
     33c:	000002ac 	andeq	r0, r0, ip, lsr #5
     340:	200009e8 	andcs	r0, r0, r8, ror #19
     344:	0000001c 	andeq	r0, r0, ip, lsl r0
     348:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     34c:	41018e02 	tstmi	r1, r2, lsl #28
     350:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     354:	00000007 	andeq	r0, r0, r7
     358:	0000001c 	andeq	r0, r0, ip, lsl r0
     35c:	000002ac 	andeq	r0, r0, ip, lsr #5
     360:	20000a04 	andcs	r0, r0, r4, lsl #20
     364:	00000020 	andeq	r0, r0, r0, lsr #32
     368:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     36c:	41018e02 	tstmi	r1, r2, lsl #28
     370:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     374:	00000007 	andeq	r0, r0, r7
     378:	0000001c 	andeq	r0, r0, ip, lsl r0
     37c:	000002ac 	andeq	r0, r0, ip, lsr #5
     380:	20000a24 	andcs	r0, r0, r4, lsr #20
     384:	00000038 	andeq	r0, r0, r8, lsr r0
     388:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     38c:	41018e02 	tstmi	r1, r2, lsl #28
     390:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     394:	00000007 	andeq	r0, r0, r7
     398:	0000000c 	andeq	r0, r0, ip
     39c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     3a0:	7c020001 	stcvc	0, cr0, [r2], {1}
     3a4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     3a8:	0000001c 	andeq	r0, r0, ip, lsl r0
     3ac:	00000398 	muleq	r0, r8, r3
     3b0:	20000a5c 	andcs	r0, r0, ip, asr sl
     3b4:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     3b8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     3bc:	41018e02 	tstmi	r1, r2, lsl #28
     3c0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     3c4:	00000007 	andeq	r0, r0, r7
     3c8:	0000001c 	andeq	r0, r0, ip, lsl r0
     3cc:	00000398 	muleq	r0, r8, r3
     3d0:	20000c2c 	andcs	r0, r0, ip, lsr #24
     3d4:	000000f8 	strdeq	r0, [r0], -r8
     3d8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     3dc:	41018e02 	tstmi	r1, r2, lsl #28
     3e0:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     3e4:	00000007 	andeq	r0, r0, r7
     3e8:	0000001c 	andeq	r0, r0, ip, lsl r0
     3ec:	00000398 	muleq	r0, r8, r3
     3f0:	20000d24 	andcs	r0, r0, r4, lsr #26
     3f4:	00000030 	andeq	r0, r0, r0, lsr r0
     3f8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     3fc:	41018e02 	tstmi	r1, r2, lsl #28
     400:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     404:	00000007 	andeq	r0, r0, r7
     408:	0000001c 	andeq	r0, r0, ip, lsl r0
     40c:	00000398 	muleq	r0, r8, r3
     410:	20000d54 	andcs	r0, r0, r4, asr sp
     414:	00000030 	andeq	r0, r0, r0, lsr r0
     418:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     41c:	41018e02 	tstmi	r1, r2, lsl #28
     420:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     424:	00000007 	andeq	r0, r0, r7
     428:	0000001c 	andeq	r0, r0, ip, lsl r0
     42c:	00000398 	muleq	r0, r8, r3
     430:	20000d84 	andcs	r0, r0, r4, lsl #27
     434:	00000048 	andeq	r0, r0, r8, asr #32
     438:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     43c:	41018e02 	tstmi	r1, r2, lsl #28
     440:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     444:	00000007 	andeq	r0, r0, r7
     448:	0000001c 	andeq	r0, r0, ip, lsl r0
     44c:	00000398 	muleq	r0, r8, r3
     450:	20000dcc 	andcs	r0, r0, ip, asr #27
     454:	00000018 	andeq	r0, r0, r8, lsl r0
     458:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     45c:	41018e02 	tstmi	r1, r2, lsl #28
     460:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     464:	00000007 	andeq	r0, r0, r7
     468:	0000001c 	andeq	r0, r0, ip, lsl r0
     46c:	00000398 	muleq	r0, r8, r3
     470:	20000de4 	andcs	r0, r0, r4, ror #27
     474:	00000018 	andeq	r0, r0, r8, lsl r0
     478:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     47c:	41018e02 	tstmi	r1, r2, lsl #28
     480:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     484:	00000007 	andeq	r0, r0, r7
     488:	0000001c 	andeq	r0, r0, ip, lsl r0
     48c:	00000398 	muleq	r0, r8, r3
     490:	20000dfc 	strdcs	r0, [r0], -ip
     494:	00000014 	andeq	r0, r0, r4, lsl r0
     498:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     49c:	41018e02 	tstmi	r1, r2, lsl #28
     4a0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     4a4:	00000007 	andeq	r0, r0, r7
     4a8:	0000001c 	andeq	r0, r0, ip, lsl r0
     4ac:	00000398 	muleq	r0, r8, r3
     4b0:	20000e10 	andcs	r0, r0, r0, lsl lr
     4b4:	00000016 	andeq	r0, r0, r6, lsl r0
     4b8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     4bc:	41018e02 	tstmi	r1, r2, lsl #28
     4c0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     4c4:	00000007 	andeq	r0, r0, r7
     4c8:	0000001c 	andeq	r0, r0, ip, lsl r0
     4cc:	00000398 	muleq	r0, r8, r3
     4d0:	20000e26 	andcs	r0, r0, r6, lsr #28
     4d4:	00000040 	andeq	r0, r0, r0, asr #32
     4d8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     4dc:	41018e02 	tstmi	r1, r2, lsl #28
     4e0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     4e4:	00000007 	andeq	r0, r0, r7
     4e8:	0000001c 	andeq	r0, r0, ip, lsl r0
     4ec:	00000398 	muleq	r0, r8, r3
     4f0:	20000e66 	andcs	r0, r0, r6, ror #28
     4f4:	00000040 	andeq	r0, r0, r0, asr #32
     4f8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     4fc:	41018e02 	tstmi	r1, r2, lsl #28
     500:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     504:	00000007 	andeq	r0, r0, r7
     508:	0000001c 	andeq	r0, r0, ip, lsl r0
     50c:	00000398 	muleq	r0, r8, r3
     510:	20000ea6 	andcs	r0, r0, r6, lsr #29
     514:	00000040 	andeq	r0, r0, r0, asr #32
     518:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     51c:	41018e02 	tstmi	r1, r2, lsl #28
     520:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     524:	00000007 	andeq	r0, r0, r7
     528:	0000001c 	andeq	r0, r0, ip, lsl r0
     52c:	00000398 	muleq	r0, r8, r3
     530:	20000ee6 	andcs	r0, r0, r6, ror #29
     534:	00000038 	andeq	r0, r0, r8, lsr r0
     538:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     53c:	41018e02 	tstmi	r1, r2, lsl #28
     540:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     544:	00000007 	andeq	r0, r0, r7
     548:	0000001c 	andeq	r0, r0, ip, lsl r0
     54c:	00000398 	muleq	r0, r8, r3
     550:	20000f1e 	andcs	r0, r0, lr, lsl pc
     554:	0000003e 	andeq	r0, r0, lr, lsr r0
     558:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     55c:	41018e02 	tstmi	r1, r2, lsl #28
     560:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     564:	00000007 	andeq	r0, r0, r7
     568:	0000001c 	andeq	r0, r0, ip, lsl r0
     56c:	00000398 	muleq	r0, r8, r3
     570:	20000f5c 	andcs	r0, r0, ip, asr pc
     574:	00000040 	andeq	r0, r0, r0, asr #32
     578:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     57c:	41018e02 	tstmi	r1, r2, lsl #28
     580:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     584:	00000007 	andeq	r0, r0, r7
     588:	0000001c 	andeq	r0, r0, ip, lsl r0
     58c:	00000398 	muleq	r0, r8, r3
     590:	20000f9c 	mulcs	r0, ip, pc	; <UNPREDICTABLE>
     594:	00000158 	andeq	r0, r0, r8, asr r1
     598:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
     59c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     5a0:	200e4101 	andcs	r4, lr, r1, lsl #2
     5a4:	00070d41 	andeq	r0, r7, r1, asr #26
     5a8:	0000001c 	andeq	r0, r0, ip, lsl r0
     5ac:	00000398 	muleq	r0, r8, r3
     5b0:	200010f4 	strdcs	r1, [r0], -r4
     5b4:	0000017c 	andeq	r0, r0, ip, ror r1
     5b8:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
     5bc:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     5c0:	200e4101 	andcs	r4, lr, r1, lsl #2
     5c4:	00070d41 	andeq	r0, r7, r1, asr #26
     5c8:	0000001c 	andeq	r0, r0, ip, lsl r0
     5cc:	00000398 	muleq	r0, r8, r3
     5d0:	20001270 	andcs	r1, r0, r0, ror r2
     5d4:	00000180 	andeq	r0, r0, r0, lsl #3
     5d8:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
     5dc:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     5e0:	200e4101 	andcs	r4, lr, r1, lsl #2
     5e4:	00070d41 	andeq	r0, r7, r1, asr #26
     5e8:	0000001c 	andeq	r0, r0, ip, lsl r0
     5ec:	00000398 	muleq	r0, r8, r3
     5f0:	200013f0 	strdcs	r1, [r0], -r0
     5f4:	00000124 	andeq	r0, r0, r4, lsr #2
     5f8:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
     5fc:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     600:	200e4101 	andcs	r4, lr, r1, lsl #2
     604:	00070d41 	andeq	r0, r7, r1, asr #26
     608:	0000001c 	andeq	r0, r0, ip, lsl r0
     60c:	00000398 	muleq	r0, r8, r3
     610:	20001514 	andcs	r1, r0, r4, lsl r5
     614:	00000040 	andeq	r0, r0, r0, asr #32
     618:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     61c:	41018e02 	tstmi	r1, r2, lsl #28
     620:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     624:	00000007 	andeq	r0, r0, r7
     628:	0000001c 	andeq	r0, r0, ip, lsl r0
     62c:	00000398 	muleq	r0, r8, r3
     630:	20001554 	andcs	r1, r0, r4, asr r5
     634:	000000d4 	ldrdeq	r0, [r0], -r4
     638:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     63c:	41018e02 	tstmi	r1, r2, lsl #28
     640:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     644:	00000007 	andeq	r0, r0, r7
     648:	0000001c 	andeq	r0, r0, ip, lsl r0
     64c:	00000398 	muleq	r0, r8, r3
     650:	20001628 	andcs	r1, r0, r8, lsr #12
     654:	00000018 	andeq	r0, r0, r8, lsl r0
     658:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     65c:	41018e02 	tstmi	r1, r2, lsl #28
     660:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     664:	00000007 	andeq	r0, r0, r7
     668:	0000001c 	andeq	r0, r0, ip, lsl r0
     66c:	00000398 	muleq	r0, r8, r3
     670:	20001640 	andcs	r1, r0, r0, asr #12
     674:	00000018 	andeq	r0, r0, r8, lsl r0
     678:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     67c:	41018e02 	tstmi	r1, r2, lsl #28
     680:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     684:	00000007 	andeq	r0, r0, r7
     688:	0000001c 	andeq	r0, r0, ip, lsl r0
     68c:	00000398 	muleq	r0, r8, r3
     690:	20001658 	andcs	r1, r0, r8, asr r6
     694:	00000018 	andeq	r0, r0, r8, lsl r0
     698:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     69c:	41018e02 	tstmi	r1, r2, lsl #28
     6a0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     6a4:	00000007 	andeq	r0, r0, r7
     6a8:	0000001c 	andeq	r0, r0, ip, lsl r0
     6ac:	00000398 	muleq	r0, r8, r3
     6b0:	20001670 	andcs	r1, r0, r0, ror r6
     6b4:	00000018 	andeq	r0, r0, r8, lsl r0
     6b8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     6bc:	41018e02 	tstmi	r1, r2, lsl #28
     6c0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     6c4:	00000007 	andeq	r0, r0, r7
     6c8:	0000001c 	andeq	r0, r0, ip, lsl r0
     6cc:	00000398 	muleq	r0, r8, r3
     6d0:	20001688 	andcs	r1, r0, r8, lsl #13
     6d4:	00000048 	andeq	r0, r0, r8, asr #32
     6d8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     6dc:	41018e02 	tstmi	r1, r2, lsl #28
     6e0:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     6e4:	00000007 	andeq	r0, r0, r7
     6e8:	0000001c 	andeq	r0, r0, ip, lsl r0
     6ec:	00000398 	muleq	r0, r8, r3
     6f0:	200016d0 	ldrdcs	r1, [r0], -r0
     6f4:	00000050 	andeq	r0, r0, r0, asr r0
     6f8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     6fc:	41018e02 	tstmi	r1, r2, lsl #28
     700:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     704:	00000007 	andeq	r0, r0, r7
     708:	0000001c 	andeq	r0, r0, ip, lsl r0
     70c:	00000398 	muleq	r0, r8, r3
     710:	20001720 	andcs	r1, r0, r0, lsr #14
     714:	00000048 	andeq	r0, r0, r8, asr #32
     718:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     71c:	41018e02 	tstmi	r1, r2, lsl #28
     720:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     724:	00000007 	andeq	r0, r0, r7
     728:	0000001c 	andeq	r0, r0, ip, lsl r0
     72c:	00000398 	muleq	r0, r8, r3
     730:	20001768 	andcs	r1, r0, r8, ror #14
     734:	00000050 	andeq	r0, r0, r0, asr r0
     738:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     73c:	41018e02 	tstmi	r1, r2, lsl #28
     740:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     744:	00000007 	andeq	r0, r0, r7
     748:	0000001c 	andeq	r0, r0, ip, lsl r0
     74c:	00000398 	muleq	r0, r8, r3
     750:	200017b8 			; <UNDEFINED> instruction: 0x200017b8
     754:	00000048 	andeq	r0, r0, r8, asr #32
     758:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     75c:	41018e02 	tstmi	r1, r2, lsl #28
     760:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     764:	00000007 	andeq	r0, r0, r7
     768:	0000001c 	andeq	r0, r0, ip, lsl r0
     76c:	00000398 	muleq	r0, r8, r3
     770:	20001800 	andcs	r1, r0, r0, lsl #16
     774:	00000050 	andeq	r0, r0, r0, asr r0
     778:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     77c:	41018e02 	tstmi	r1, r2, lsl #28
     780:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     784:	00000007 	andeq	r0, r0, r7
     788:	0000001c 	andeq	r0, r0, ip, lsl r0
     78c:	00000398 	muleq	r0, r8, r3
     790:	20001850 	andcs	r1, r0, r0, asr r8
     794:	00000048 	andeq	r0, r0, r8, asr #32
     798:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     79c:	41018e02 	tstmi	r1, r2, lsl #28
     7a0:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     7a4:	00000007 	andeq	r0, r0, r7
     7a8:	0000001c 	andeq	r0, r0, ip, lsl r0
     7ac:	00000398 	muleq	r0, r8, r3
     7b0:	20001898 	mulcs	r0, r8, r8
     7b4:	00000050 	andeq	r0, r0, r0, asr r0
     7b8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     7bc:	41018e02 	tstmi	r1, r2, lsl #28
     7c0:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     7c4:	00000007 	andeq	r0, r0, r7
     7c8:	0000001c 	andeq	r0, r0, ip, lsl r0
     7cc:	00000398 	muleq	r0, r8, r3
     7d0:	200018e8 	andcs	r1, r0, r8, ror #17
     7d4:	00000048 	andeq	r0, r0, r8, asr #32
     7d8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     7dc:	41018e02 	tstmi	r1, r2, lsl #28
     7e0:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     7e4:	00000007 	andeq	r0, r0, r7
     7e8:	0000001c 	andeq	r0, r0, ip, lsl r0
     7ec:	00000398 	muleq	r0, r8, r3
     7f0:	20001930 	andcs	r1, r0, r0, lsr r9
     7f4:	00000050 	andeq	r0, r0, r0, asr r0
     7f8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     7fc:	41018e02 	tstmi	r1, r2, lsl #28
     800:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     804:	00000007 	andeq	r0, r0, r7
     808:	0000001c 	andeq	r0, r0, ip, lsl r0
     80c:	00000398 	muleq	r0, r8, r3
     810:	20001980 	andcs	r1, r0, r0, lsl #19
     814:	00000048 	andeq	r0, r0, r8, asr #32
     818:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     81c:	41018e02 	tstmi	r1, r2, lsl #28
     820:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     824:	00000007 	andeq	r0, r0, r7
     828:	0000001c 	andeq	r0, r0, ip, lsl r0
     82c:	00000398 	muleq	r0, r8, r3
     830:	200019c8 	andcs	r1, r0, r8, asr #19
     834:	00000050 	andeq	r0, r0, r0, asr r0
     838:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     83c:	41018e02 	tstmi	r1, r2, lsl #28
     840:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     844:	00000007 	andeq	r0, r0, r7
     848:	0000001c 	andeq	r0, r0, ip, lsl r0
     84c:	00000398 	muleq	r0, r8, r3
     850:	20001a18 	andcs	r1, r0, r8, lsl sl
     854:	00000048 	andeq	r0, r0, r8, asr #32
     858:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     85c:	41018e02 	tstmi	r1, r2, lsl #28
     860:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     864:	00000007 	andeq	r0, r0, r7
     868:	0000001c 	andeq	r0, r0, ip, lsl r0
     86c:	00000398 	muleq	r0, r8, r3
     870:	20001a60 	andcs	r1, r0, r0, ror #20
     874:	0000004c 	andeq	r0, r0, ip, asr #32
     878:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     87c:	41018e02 	tstmi	r1, r2, lsl #28
     880:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     884:	00000007 	andeq	r0, r0, r7
     888:	0000001c 	andeq	r0, r0, ip, lsl r0
     88c:	00000398 	muleq	r0, r8, r3
     890:	20001aac 	andcs	r1, r0, ip, lsr #21
     894:	00000048 	andeq	r0, r0, r8, asr #32
     898:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     89c:	41018e02 	tstmi	r1, r2, lsl #28
     8a0:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     8a4:	00000007 	andeq	r0, r0, r7
     8a8:	0000001c 	andeq	r0, r0, ip, lsl r0
     8ac:	00000398 	muleq	r0, r8, r3
     8b0:	20001af4 	strdcs	r1, [r0], -r4
     8b4:	0000004c 	andeq	r0, r0, ip, asr #32
     8b8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     8bc:	41018e02 	tstmi	r1, r2, lsl #28
     8c0:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     8c4:	00000007 	andeq	r0, r0, r7
     8c8:	0000001c 	andeq	r0, r0, ip, lsl r0
     8cc:	00000398 	muleq	r0, r8, r3
     8d0:	20001b40 	andcs	r1, r0, r0, asr #22
     8d4:	00000048 	andeq	r0, r0, r8, asr #32
     8d8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     8dc:	41018e02 	tstmi	r1, r2, lsl #28
     8e0:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     8e4:	00000007 	andeq	r0, r0, r7
     8e8:	0000001c 	andeq	r0, r0, ip, lsl r0
     8ec:	00000398 	muleq	r0, r8, r3
     8f0:	20001b88 	andcs	r1, r0, r8, lsl #23
     8f4:	00000048 	andeq	r0, r0, r8, asr #32
     8f8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     8fc:	41018e02 	tstmi	r1, r2, lsl #28
     900:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     904:	00000007 	andeq	r0, r0, r7
     908:	0000001c 	andeq	r0, r0, ip, lsl r0
     90c:	00000398 	muleq	r0, r8, r3
     910:	20001bd0 	ldrdcs	r1, [r0], -r0
     914:	0000004c 	andeq	r0, r0, ip, asr #32
     918:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     91c:	41018e02 	tstmi	r1, r2, lsl #28
     920:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     924:	00000007 	andeq	r0, r0, r7
     928:	0000001c 	andeq	r0, r0, ip, lsl r0
     92c:	00000398 	muleq	r0, r8, r3
     930:	20001c1c 	andcs	r1, r0, ip, lsl ip
     934:	0000004c 	andeq	r0, r0, ip, asr #32
     938:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     93c:	41018e02 	tstmi	r1, r2, lsl #28
     940:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     944:	00000007 	andeq	r0, r0, r7
     948:	0000001c 	andeq	r0, r0, ip, lsl r0
     94c:	00000398 	muleq	r0, r8, r3
     950:	20001c68 	andcs	r1, r0, r8, ror #24
     954:	00000050 	andeq	r0, r0, r0, asr r0
     958:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     95c:	41018e02 	tstmi	r1, r2, lsl #28
     960:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     964:	00000007 	andeq	r0, r0, r7
     968:	0000001c 	andeq	r0, r0, ip, lsl r0
     96c:	00000398 	muleq	r0, r8, r3
     970:	20001cb8 			; <UNDEFINED> instruction: 0x20001cb8
     974:	00000050 	andeq	r0, r0, r0, asr r0
     978:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     97c:	41018e02 	tstmi	r1, r2, lsl #28
     980:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     984:	00000007 	andeq	r0, r0, r7
     988:	0000001c 	andeq	r0, r0, ip, lsl r0
     98c:	00000398 	muleq	r0, r8, r3
     990:	20001d08 	andcs	r1, r0, r8, lsl #26
     994:	00000050 	andeq	r0, r0, r0, asr r0
     998:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     99c:	41018e02 	tstmi	r1, r2, lsl #28
     9a0:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     9a4:	00000007 	andeq	r0, r0, r7
     9a8:	0000001c 	andeq	r0, r0, ip, lsl r0
     9ac:	00000398 	muleq	r0, r8, r3
     9b0:	20001d58 	andcs	r1, r0, r8, asr sp
     9b4:	00000066 	andeq	r0, r0, r6, rrx
     9b8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     9bc:	41018e02 	tstmi	r1, r2, lsl #28
     9c0:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     9c4:	00000007 	andeq	r0, r0, r7
     9c8:	0000001c 	andeq	r0, r0, ip, lsl r0
     9cc:	00000398 	muleq	r0, r8, r3
     9d0:	20001dbe 			; <UNDEFINED> instruction: 0x20001dbe
     9d4:	00000066 	andeq	r0, r0, r6, rrx
     9d8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     9dc:	41018e02 	tstmi	r1, r2, lsl #28
     9e0:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     9e4:	00000007 	andeq	r0, r0, r7
     9e8:	0000001c 	andeq	r0, r0, ip, lsl r0
     9ec:	00000398 	muleq	r0, r8, r3
     9f0:	20001e24 	andcs	r1, r0, r4, lsr #28
     9f4:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
     9f8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     9fc:	41018e02 	tstmi	r1, r2, lsl #28
     a00:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     a04:	00000007 	andeq	r0, r0, r7
     a08:	0000001c 	andeq	r0, r0, ip, lsl r0
     a0c:	00000398 	muleq	r0, r8, r3
     a10:	20001ed4 	ldrdcs	r1, [r0], -r4
     a14:	0000002e 	andeq	r0, r0, lr, lsr #32
     a18:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     a1c:	41018e02 	tstmi	r1, r2, lsl #28
     a20:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     a24:	00000007 	andeq	r0, r0, r7
     a28:	0000001c 	andeq	r0, r0, ip, lsl r0
     a2c:	00000398 	muleq	r0, r8, r3
     a30:	20001f02 	andcs	r1, r0, r2, lsl #30
     a34:	000000ea 	andeq	r0, r0, sl, ror #1
     a38:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
     a3c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     a40:	200e4101 	andcs	r4, lr, r1, lsl #2
     a44:	00070d41 	andeq	r0, r7, r1, asr #26
     a48:	0000001c 	andeq	r0, r0, ip, lsl r0
     a4c:	00000398 	muleq	r0, r8, r3
     a50:	20001fec 	andcs	r1, r0, ip, ror #31
     a54:	00000014 	andeq	r0, r0, r4, lsl r0
     a58:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     a5c:	41018e02 	tstmi	r1, r2, lsl #28
     a60:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     a64:	00000007 	andeq	r0, r0, r7
     a68:	0000001c 	andeq	r0, r0, ip, lsl r0
     a6c:	00000398 	muleq	r0, r8, r3
     a70:	20002000 	andcs	r2, r0, r0
     a74:	00000014 	andeq	r0, r0, r4, lsl r0
     a78:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     a7c:	41018e02 	tstmi	r1, r2, lsl #28
     a80:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     a84:	00000007 	andeq	r0, r0, r7
     a88:	0000001c 	andeq	r0, r0, ip, lsl r0
     a8c:	00000398 	muleq	r0, r8, r3
     a90:	20002014 	andcs	r2, r0, r4, lsl r0
     a94:	00000014 	andeq	r0, r0, r4, lsl r0
     a98:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     a9c:	41018e02 	tstmi	r1, r2, lsl #28
     aa0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     aa4:	00000007 	andeq	r0, r0, r7
     aa8:	0000001c 	andeq	r0, r0, ip, lsl r0
     aac:	00000398 	muleq	r0, r8, r3
     ab0:	20002028 	andcs	r2, r0, r8, lsr #32
     ab4:	00000014 	andeq	r0, r0, r4, lsl r0
     ab8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     abc:	41018e02 	tstmi	r1, r2, lsl #28
     ac0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     ac4:	00000007 	andeq	r0, r0, r7
     ac8:	0000001c 	andeq	r0, r0, ip, lsl r0
     acc:	00000398 	muleq	r0, r8, r3
     ad0:	2000203c 	andcs	r2, r0, ip, lsr r0
     ad4:	00000038 	andeq	r0, r0, r8, lsr r0
     ad8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     adc:	41018e02 	tstmi	r1, r2, lsl #28
     ae0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     ae4:	00000007 	andeq	r0, r0, r7
     ae8:	0000001c 	andeq	r0, r0, ip, lsl r0
     aec:	00000398 	muleq	r0, r8, r3
     af0:	20002074 	andcs	r2, r0, r4, ror r0
     af4:	00000040 	andeq	r0, r0, r0, asr #32
     af8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     afc:	41018e02 	tstmi	r1, r2, lsl #28
     b00:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     b04:	00000007 	andeq	r0, r0, r7
     b08:	0000001c 	andeq	r0, r0, ip, lsl r0
     b0c:	00000398 	muleq	r0, r8, r3
     b10:	200020b4 	strhcs	r2, [r0], -r4
     b14:	00000038 	andeq	r0, r0, r8, lsr r0
     b18:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     b1c:	41018e02 	tstmi	r1, r2, lsl #28
     b20:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     b24:	00000007 	andeq	r0, r0, r7
     b28:	0000001c 	andeq	r0, r0, ip, lsl r0
     b2c:	00000398 	muleq	r0, r8, r3
     b30:	200020ec 	andcs	r2, r0, ip, ror #1
     b34:	00000040 	andeq	r0, r0, r0, asr #32
     b38:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     b3c:	41018e02 	tstmi	r1, r2, lsl #28
     b40:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     b44:	00000007 	andeq	r0, r0, r7
     b48:	0000001c 	andeq	r0, r0, ip, lsl r0
     b4c:	00000398 	muleq	r0, r8, r3
     b50:	2000212c 	andcs	r2, r0, ip, lsr #2
     b54:	0000004c 	andeq	r0, r0, ip, asr #32
     b58:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     b5c:	41018e02 	tstmi	r1, r2, lsl #28
     b60:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     b64:	00000007 	andeq	r0, r0, r7
     b68:	0000001c 	andeq	r0, r0, ip, lsl r0
     b6c:	00000398 	muleq	r0, r8, r3
     b70:	20002178 	andcs	r2, r0, r8, ror r1
     b74:	0000003a 	andeq	r0, r0, sl, lsr r0
     b78:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     b7c:	41018e02 	tstmi	r1, r2, lsl #28
     b80:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     b84:	00000007 	andeq	r0, r0, r7
     b88:	0000001c 	andeq	r0, r0, ip, lsl r0
     b8c:	00000398 	muleq	r0, r8, r3
     b90:	200021b2 			; <UNDEFINED> instruction: 0x200021b2
     b94:	0000004e 	andeq	r0, r0, lr, asr #32
     b98:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     b9c:	41018e02 	tstmi	r1, r2, lsl #28
     ba0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     ba4:	00000007 	andeq	r0, r0, r7
     ba8:	0000001c 	andeq	r0, r0, ip, lsl r0
     bac:	00000398 	muleq	r0, r8, r3
     bb0:	20002200 	andcs	r2, r0, r0, lsl #4
     bb4:	00000040 	andeq	r0, r0, r0, asr #32
     bb8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     bbc:	41018e02 	tstmi	r1, r2, lsl #28
     bc0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     bc4:	00000007 	andeq	r0, r0, r7
     bc8:	0000001c 	andeq	r0, r0, ip, lsl r0
     bcc:	00000398 	muleq	r0, r8, r3
     bd0:	20002240 	andcs	r2, r0, r0, asr #4
     bd4:	00000040 	andeq	r0, r0, r0, asr #32
     bd8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     bdc:	41018e02 	tstmi	r1, r2, lsl #28
     be0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     be4:	00000007 	andeq	r0, r0, r7
     be8:	0000001c 	andeq	r0, r0, ip, lsl r0
     bec:	00000398 	muleq	r0, r8, r3
     bf0:	20002280 	andcs	r2, r0, r0, lsl #5
     bf4:	00000052 	andeq	r0, r0, r2, asr r0
     bf8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     bfc:	41018e02 	tstmi	r1, r2, lsl #28
     c00:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     c04:	00000007 	andeq	r0, r0, r7
     c08:	0000001c 	andeq	r0, r0, ip, lsl r0
     c0c:	00000398 	muleq	r0, r8, r3
     c10:	200022d2 	ldrdcs	r2, [r0], -r2	; <UNPREDICTABLE>
     c14:	0000001e 	andeq	r0, r0, lr, lsl r0
     c18:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     c1c:	41018e02 	tstmi	r1, r2, lsl #28
     c20:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     c24:	00000007 	andeq	r0, r0, r7
     c28:	0000001c 	andeq	r0, r0, ip, lsl r0
     c2c:	00000398 	muleq	r0, r8, r3
     c30:	200022f0 	strdcs	r2, [r0], -r0
     c34:	00000046 	andeq	r0, r0, r6, asr #32
     c38:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     c3c:	41018e02 	tstmi	r1, r2, lsl #28
     c40:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     c44:	00000007 	andeq	r0, r0, r7
     c48:	0000001c 	andeq	r0, r0, ip, lsl r0
     c4c:	00000398 	muleq	r0, r8, r3
     c50:	20002336 	andcs	r2, r0, r6, lsr r3
     c54:	00000022 	andeq	r0, r0, r2, lsr #32
     c58:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     c5c:	41018e02 	tstmi	r1, r2, lsl #28
     c60:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     c64:	00000007 	andeq	r0, r0, r7
     c68:	00000020 	andeq	r0, r0, r0, lsr #32
     c6c:	00000398 	muleq	r0, r8, r3
     c70:	20002358 	andcs	r2, r0, r8, asr r3
     c74:	00000074 	andeq	r0, r0, r4, ror r0
     c78:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     c7c:	87038504 	strhi	r8, [r3, -r4, lsl #10]
     c80:	41018e02 	tstmi	r1, r2, lsl #28
     c84:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
     c88:	00000007 	andeq	r0, r0, r7
     c8c:	0000001c 	andeq	r0, r0, ip, lsl r0
     c90:	00000398 	muleq	r0, r8, r3
     c94:	200023cc 	andcs	r2, r0, ip, asr #7
     c98:	00000022 	andeq	r0, r0, r2, lsr #32
     c9c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     ca0:	41018e02 	tstmi	r1, r2, lsl #28
     ca4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     ca8:	00000007 	andeq	r0, r0, r7
     cac:	0000001c 	andeq	r0, r0, ip, lsl r0
     cb0:	00000398 	muleq	r0, r8, r3
     cb4:	200023ee 	andcs	r2, r0, lr, ror #7
     cb8:	00000032 	andeq	r0, r0, r2, lsr r0
     cbc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     cc0:	41018e02 	tstmi	r1, r2, lsl #28
     cc4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     cc8:	00000007 	andeq	r0, r0, r7
     ccc:	0000001c 	andeq	r0, r0, ip, lsl r0
     cd0:	00000398 	muleq	r0, r8, r3
     cd4:	20002420 	andcs	r2, r0, r0, lsr #8
     cd8:	00000052 	andeq	r0, r0, r2, asr r0
     cdc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     ce0:	41018e02 	tstmi	r1, r2, lsl #28
     ce4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     ce8:	00000007 	andeq	r0, r0, r7
     cec:	0000001c 	andeq	r0, r0, ip, lsl r0
     cf0:	00000398 	muleq	r0, r8, r3
     cf4:	20002472 	andcs	r2, r0, r2, ror r4
     cf8:	00000040 	andeq	r0, r0, r0, asr #32
     cfc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     d00:	41018e02 	tstmi	r1, r2, lsl #28
     d04:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     d08:	00000007 	andeq	r0, r0, r7
     d0c:	0000001c 	andeq	r0, r0, ip, lsl r0
     d10:	00000398 	muleq	r0, r8, r3
     d14:	200024b2 			; <UNDEFINED> instruction: 0x200024b2
     d18:	00000020 	andeq	r0, r0, r0, lsr #32
     d1c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     d20:	41018e02 	tstmi	r1, r2, lsl #28
     d24:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     d28:	00000007 	andeq	r0, r0, r7
     d2c:	0000001c 	andeq	r0, r0, ip, lsl r0
     d30:	00000398 	muleq	r0, r8, r3
     d34:	200024d2 	ldrdcs	r2, [r0], -r2	; <UNPREDICTABLE>
     d38:	00000034 	andeq	r0, r0, r4, lsr r0
     d3c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     d40:	41018e02 	tstmi	r1, r2, lsl #28
     d44:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     d48:	00000007 	andeq	r0, r0, r7
     d4c:	00000020 	andeq	r0, r0, r0, lsr #32
     d50:	00000398 	muleq	r0, r8, r3
     d54:	20002506 	andcs	r2, r0, r6, lsl #10
     d58:	0000007c 	andeq	r0, r0, ip, ror r0
     d5c:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     d60:	87038504 	strhi	r8, [r3, -r4, lsl #10]
     d64:	41018e02 	tstmi	r1, r2, lsl #28
     d68:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
     d6c:	00000007 	andeq	r0, r0, r7
     d70:	00000020 	andeq	r0, r0, r0, lsr #32
     d74:	00000398 	muleq	r0, r8, r3
     d78:	20002582 	andcs	r2, r0, r2, lsl #11
     d7c:	0000008c 	andeq	r0, r0, ip, lsl #1
     d80:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
     d84:	86048505 	strhi	r8, [r4], -r5, lsl #10
     d88:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     d8c:	300e4101 	andcc	r4, lr, r1, lsl #2
     d90:	00070d41 	andeq	r0, r7, r1, asr #26
     d94:	00000020 	andeq	r0, r0, r0, lsr #32
     d98:	00000398 	muleq	r0, r8, r3
     d9c:	2000260e 	andcs	r2, r0, lr, lsl #12
     da0:	00000052 	andeq	r0, r0, r2, asr r0
     da4:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
     da8:	86048505 	strhi	r8, [r4], -r5, lsl #10
     dac:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     db0:	280e4101 	stmdacs	lr, {r0, r8, lr}
     db4:	00070d41 	andeq	r0, r7, r1, asr #26
     db8:	0000001c 	andeq	r0, r0, ip, lsl r0
     dbc:	00000398 	muleq	r0, r8, r3
     dc0:	20002660 	andcs	r2, r0, r0, ror #12
     dc4:	00000048 	andeq	r0, r0, r8, asr #32
     dc8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     dcc:	41018e02 	tstmi	r1, r2, lsl #28
     dd0:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     dd4:	00000007 	andeq	r0, r0, r7
     dd8:	0000001c 	andeq	r0, r0, ip, lsl r0
     ddc:	00000398 	muleq	r0, r8, r3
     de0:	200026a8 	andcs	r2, r0, r8, lsr #13
     de4:	00000038 	andeq	r0, r0, r8, lsr r0
     de8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     dec:	41018e02 	tstmi	r1, r2, lsl #28
     df0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     df4:	00000007 	andeq	r0, r0, r7
     df8:	0000001c 	andeq	r0, r0, ip, lsl r0
     dfc:	00000398 	muleq	r0, r8, r3
     e00:	200026e0 	andcs	r2, r0, r0, ror #13
     e04:	00000038 	andeq	r0, r0, r8, lsr r0
     e08:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     e0c:	41018e02 	tstmi	r1, r2, lsl #28
     e10:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     e14:	00000007 	andeq	r0, r0, r7
     e18:	0000001c 	andeq	r0, r0, ip, lsl r0
     e1c:	00000398 	muleq	r0, r8, r3
     e20:	20002718 	andcs	r2, r0, r8, lsl r7
     e24:	00000038 	andeq	r0, r0, r8, lsr r0
     e28:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     e2c:	41018e02 	tstmi	r1, r2, lsl #28
     e30:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     e34:	00000007 	andeq	r0, r0, r7
     e38:	00000020 	andeq	r0, r0, r0, lsr #32
     e3c:	00000398 	muleq	r0, r8, r3
     e40:	20002750 	andcs	r2, r0, r0, asr r7
     e44:	00000072 	andeq	r0, r0, r2, ror r0
     e48:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     e4c:	87038504 	strhi	r8, [r3, -r4, lsl #10]
     e50:	41018e02 	tstmi	r1, r2, lsl #28
     e54:	0d41280e 	stcleq	8, cr2, [r1, #-56]	; 0xffffffc8
     e58:	00000007 	andeq	r0, r0, r7
     e5c:	00000020 	andeq	r0, r0, r0, lsr #32
     e60:	00000398 	muleq	r0, r8, r3
     e64:	200027c2 	andcs	r2, r0, r2, asr #15
     e68:	000000d6 	ldrdeq	r0, [r0], -r6
     e6c:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
     e70:	86048505 	strhi	r8, [r4], -r5, lsl #10
     e74:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     e78:	300e4101 	andcc	r4, lr, r1, lsl #2
     e7c:	00070d41 	andeq	r0, r7, r1, asr #26
     e80:	0000001c 	andeq	r0, r0, ip, lsl r0
     e84:	00000398 	muleq	r0, r8, r3
     e88:	20002898 	mulcs	r0, r8, r8
     e8c:	00000040 	andeq	r0, r0, r0, asr #32
     e90:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     e94:	41018e02 	tstmi	r1, r2, lsl #28
     e98:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     e9c:	00000007 	andeq	r0, r0, r7
     ea0:	0000001c 	andeq	r0, r0, ip, lsl r0
     ea4:	00000398 	muleq	r0, r8, r3
     ea8:	200028d8 	ldrdcs	r2, [r0], -r8
     eac:	00000020 	andeq	r0, r0, r0, lsr #32
     eb0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     eb4:	41018e02 	tstmi	r1, r2, lsl #28
     eb8:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     ebc:	00000007 	andeq	r0, r0, r7
     ec0:	00000020 	andeq	r0, r0, r0, lsr #32
     ec4:	00000398 	muleq	r0, r8, r3
     ec8:	200028f8 	strdcs	r2, [r0], -r8
     ecc:	000000b2 	strheq	r0, [r0], -r2
     ed0:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
     ed4:	86048505 	strhi	r8, [r4], -r5, lsl #10
     ed8:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     edc:	300e4101 	andcc	r4, lr, r1, lsl #2
     ee0:	00070d41 	andeq	r0, r7, r1, asr #26
     ee4:	00000020 	andeq	r0, r0, r0, lsr #32
     ee8:	00000398 	muleq	r0, r8, r3
     eec:	200029aa 	andcs	r2, r0, sl, lsr #19
     ef0:	000000d6 	ldrdeq	r0, [r0], -r6
     ef4:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
     ef8:	86048505 	strhi	r8, [r4], -r5, lsl #10
     efc:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     f00:	300e4101 	andcc	r4, lr, r1, lsl #2
     f04:	00070d41 	andeq	r0, r7, r1, asr #26
     f08:	00000020 	andeq	r0, r0, r0, lsr #32
     f0c:	00000398 	muleq	r0, r8, r3
     f10:	20002a80 	andcs	r2, r0, r0, lsl #21
     f14:	000000d4 	ldrdeq	r0, [r0], -r4
     f18:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
     f1c:	86048505 	strhi	r8, [r4], -r5, lsl #10
     f20:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     f24:	300e4101 	andcc	r4, lr, r1, lsl #2
     f28:	00070d41 	andeq	r0, r7, r1, asr #26
     f2c:	00000020 	andeq	r0, r0, r0, lsr #32
     f30:	00000398 	muleq	r0, r8, r3
     f34:	20002b54 	andcs	r2, r0, r4, asr fp
     f38:	000000e0 	andeq	r0, r0, r0, ror #1
     f3c:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
     f40:	86048505 	strhi	r8, [r4], -r5, lsl #10
     f44:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     f48:	300e4101 	andcc	r4, lr, r1, lsl #2
     f4c:	00070d41 	andeq	r0, r7, r1, asr #26
     f50:	0000000c 	andeq	r0, r0, ip
     f54:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     f58:	7c020001 	stcvc	0, cr0, [r2], {1}
     f5c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     f60:	00000018 	andeq	r0, r0, r8, lsl r0
     f64:	00000f50 	andeq	r0, r0, r0, asr pc
     f68:	20002c34 	andcs	r2, r0, r4, lsr ip
     f6c:	00000030 	andeq	r0, r0, r0, lsr r0
     f70:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     f74:	41018e02 	tstmi	r1, r2, lsl #28
     f78:	0000070d 	andeq	r0, r0, sp, lsl #14
     f7c:	0000001c 	andeq	r0, r0, ip, lsl r0
     f80:	00000f50 	andeq	r0, r0, r0, asr pc
     f84:	20002c64 	andcs	r2, r0, r4, ror #24
     f88:	000000e0 	andeq	r0, r0, r0, ror #1
     f8c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     f90:	41018e02 	tstmi	r1, r2, lsl #28
     f94:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     f98:	00000007 	andeq	r0, r0, r7
     f9c:	0000001c 	andeq	r0, r0, ip, lsl r0
     fa0:	00000f50 	andeq	r0, r0, r0, asr pc
     fa4:	20002d44 	andcs	r2, r0, r4, asr #26
     fa8:	00000028 	andeq	r0, r0, r8, lsr #32
     fac:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     fb0:	41018e02 	tstmi	r1, r2, lsl #28
     fb4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     fb8:	00000007 	andeq	r0, r0, r7
     fbc:	0000001c 	andeq	r0, r0, ip, lsl r0
     fc0:	00000f50 	andeq	r0, r0, r0, asr pc
     fc4:	20002d6c 	andcs	r2, r0, ip, ror #26
     fc8:	00000020 	andeq	r0, r0, r0, lsr #32
     fcc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     fd0:	41018e02 	tstmi	r1, r2, lsl #28
     fd4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     fd8:	00000007 	andeq	r0, r0, r7
     fdc:	0000001c 	andeq	r0, r0, ip, lsl r0
     fe0:	00000f50 	andeq	r0, r0, r0, asr pc
     fe4:	20002d8c 	andcs	r2, r0, ip, lsl #27
     fe8:	0000003c 	andeq	r0, r0, ip, lsr r0
     fec:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     ff0:	41018e02 	tstmi	r1, r2, lsl #28
     ff4:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     ff8:	00000007 	andeq	r0, r0, r7
     ffc:	0000001c 	andeq	r0, r0, ip, lsl r0
    1000:	00000f50 	andeq	r0, r0, r0, asr pc
    1004:	20002dc8 	andcs	r2, r0, r8, asr #27
    1008:	0000001c 	andeq	r0, r0, ip, lsl r0
    100c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1010:	41018e02 	tstmi	r1, r2, lsl #28
    1014:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    1018:	00000007 	andeq	r0, r0, r7
    101c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1020:	00000f50 	andeq	r0, r0, r0, asr pc
    1024:	20002de4 	andcs	r2, r0, r4, ror #27
    1028:	0000003c 	andeq	r0, r0, ip, lsr r0
    102c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1030:	41018e02 	tstmi	r1, r2, lsl #28
    1034:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    1038:	00000007 	andeq	r0, r0, r7
    103c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1040:	00000f50 	andeq	r0, r0, r0, asr pc
    1044:	20002e20 	andcs	r2, r0, r0, lsr #28
    1048:	0000001c 	andeq	r0, r0, ip, lsl r0
    104c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1050:	41018e02 	tstmi	r1, r2, lsl #28
    1054:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    1058:	00000007 	andeq	r0, r0, r7
    105c:	0000000c 	andeq	r0, r0, ip
    1060:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1064:	7c020001 	stcvc	0, cr0, [r2], {1}
    1068:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    106c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1070:	0000105c 	andeq	r1, r0, ip, asr r0
    1074:	20002e3c 	andcs	r2, r0, ip, lsr lr
    1078:	00000024 	andeq	r0, r0, r4, lsr #32
    107c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1080:	41018e02 	tstmi	r1, r2, lsl #28
    1084:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    1088:	00000007 	andeq	r0, r0, r7
    108c:	00000020 	andeq	r0, r0, r0, lsr #32
    1090:	0000105c 	andeq	r1, r0, ip, asr r0
    1094:	20002e60 	andcs	r2, r0, r0, ror #28
    1098:	000000f4 	strdeq	r0, [r0], -r4
    109c:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    10a0:	87038504 	strhi	r8, [r3, -r4, lsl #10]
    10a4:	41018e02 	tstmi	r1, r2, lsl #28
    10a8:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
    10ac:	00000007 	andeq	r0, r0, r7
    10b0:	0000001c 	andeq	r0, r0, ip, lsl r0
    10b4:	0000105c 	andeq	r1, r0, ip, asr r0
    10b8:	20002f54 	andcs	r2, r0, r4, asr pc
    10bc:	0000002c 	andeq	r0, r0, ip, lsr #32
    10c0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    10c4:	41018e02 	tstmi	r1, r2, lsl #28
    10c8:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    10cc:	00000007 	andeq	r0, r0, r7
    10d0:	0000001c 	andeq	r0, r0, ip, lsl r0
    10d4:	0000105c 	andeq	r1, r0, ip, asr r0
    10d8:	20002f80 	andcs	r2, r0, r0, lsl #31
    10dc:	00000048 	andeq	r0, r0, r8, asr #32
    10e0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    10e4:	41018e02 	tstmi	r1, r2, lsl #28
    10e8:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    10ec:	00000007 	andeq	r0, r0, r7
    10f0:	0000001c 	andeq	r0, r0, ip, lsl r0
    10f4:	0000105c 	andeq	r1, r0, ip, asr r0
    10f8:	20002fc8 	andcs	r2, r0, r8, asr #31
    10fc:	00000034 	andeq	r0, r0, r4, lsr r0
    1100:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1104:	41018e02 	tstmi	r1, r2, lsl #28
    1108:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    110c:	00000007 	andeq	r0, r0, r7
    1110:	0000000c 	andeq	r0, r0, ip
    1114:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1118:	7c020001 	stcvc	0, cr0, [r2], {1}
    111c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1120:	0000001c 	andeq	r0, r0, ip, lsl r0
    1124:	00001110 	andeq	r1, r0, r0, lsl r1
    1128:	20002ffc 	strdcs	r2, [r0], -ip
    112c:	00000040 	andeq	r0, r0, r0, asr #32
    1130:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1134:	41018e02 	tstmi	r1, r2, lsl #28
    1138:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    113c:	00000007 	andeq	r0, r0, r7
    1140:	00000018 	andeq	r0, r0, r8, lsl r0
    1144:	00001110 	andeq	r1, r0, r0, lsl r1
    1148:	2000303c 	andcs	r3, r0, ip, lsr r0
    114c:	00000028 	andeq	r0, r0, r8, lsr #32
    1150:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1154:	41018e02 	tstmi	r1, r2, lsl #28
    1158:	0000070d 	andeq	r0, r0, sp, lsl #14
    115c:	00000018 	andeq	r0, r0, r8, lsl r0
    1160:	00001110 	andeq	r1, r0, r0, lsl r1
    1164:	20003064 	andcs	r3, r0, r4, rrx
    1168:	00000028 	andeq	r0, r0, r8, lsr #32
    116c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1170:	41018e02 	tstmi	r1, r2, lsl #28
    1174:	0000070d 	andeq	r0, r0, sp, lsl #14
    1178:	0000001c 	andeq	r0, r0, ip, lsl r0
    117c:	00001110 	andeq	r1, r0, r0, lsl r1
    1180:	2000308c 	andcs	r3, r0, ip, lsl #1
    1184:	0000002a 	andeq	r0, r0, sl, lsr #32
    1188:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    118c:	41018e02 	tstmi	r1, r2, lsl #28
    1190:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    1194:	00000007 	andeq	r0, r0, r7
    1198:	0000000c 	andeq	r0, r0, ip
    119c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    11a0:	7c020001 	stcvc	0, cr0, [r2], {1}
    11a4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    11a8:	00000018 	andeq	r0, r0, r8, lsl r0
    11ac:	00001198 	muleq	r0, r8, r1
    11b0:	200030b8 	strhcs	r3, [r0], -r8
    11b4:	00000070 	andeq	r0, r0, r0, ror r0
    11b8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    11bc:	41018e02 	tstmi	r1, r2, lsl #28
    11c0:	0000070d 	andeq	r0, r0, sp, lsl #14
    11c4:	0000001c 	andeq	r0, r0, ip, lsl r0
    11c8:	00001198 	muleq	r0, r8, r1
    11cc:	20003128 	andcs	r3, r0, r8, lsr #2
    11d0:	00000028 	andeq	r0, r0, r8, lsr #32
    11d4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    11d8:	41018e02 	tstmi	r1, r2, lsl #28
    11dc:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    11e0:	00000007 	andeq	r0, r0, r7
    11e4:	0000001c 	andeq	r0, r0, ip, lsl r0
    11e8:	00001198 	muleq	r0, r8, r1
    11ec:	20003150 	andcs	r3, r0, r0, asr r1
    11f0:	0000005e 	andeq	r0, r0, lr, asr r0
    11f4:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
    11f8:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    11fc:	180e4101 	stmdane	lr, {r0, r8, lr}
    1200:	00070d41 	andeq	r0, r7, r1, asr #26
    1204:	0000001c 	andeq	r0, r0, ip, lsl r0
    1208:	00001198 	muleq	r0, r8, r1
    120c:	200031ae 	andcs	r3, r0, lr, lsr #3
    1210:	0000003e 	andeq	r0, r0, lr, lsr r0
    1214:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1218:	41018e02 	tstmi	r1, r2, lsl #28
    121c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    1220:	00000007 	andeq	r0, r0, r7
    1224:	0000001c 	andeq	r0, r0, ip, lsl r0
    1228:	00001198 	muleq	r0, r8, r1
    122c:	200031ec 	andcs	r3, r0, ip, ror #3
    1230:	00000020 	andeq	r0, r0, r0, lsr #32
    1234:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1238:	41018e02 	tstmi	r1, r2, lsl #28
    123c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    1240:	00000007 	andeq	r0, r0, r7
    1244:	0000001c 	andeq	r0, r0, ip, lsl r0
    1248:	00001198 	muleq	r0, r8, r1
    124c:	2000320c 	andcs	r3, r0, ip, lsl #4
    1250:	00000044 	andeq	r0, r0, r4, asr #32
    1254:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1258:	41018e02 	tstmi	r1, r2, lsl #28
    125c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    1260:	00000007 	andeq	r0, r0, r7
    1264:	0000001c 	andeq	r0, r0, ip, lsl r0
    1268:	00001198 	muleq	r0, r8, r1
    126c:	20003250 	andcs	r3, r0, r0, asr r2
    1270:	00000020 	andeq	r0, r0, r0, lsr #32
    1274:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1278:	41018e02 	tstmi	r1, r2, lsl #28
    127c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    1280:	00000007 	andeq	r0, r0, r7
    1284:	0000001c 	andeq	r0, r0, ip, lsl r0
    1288:	00001198 	muleq	r0, r8, r1
    128c:	20003270 	andcs	r3, r0, r0, ror r2
    1290:	0000003c 	andeq	r0, r0, ip, lsr r0
    1294:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1298:	41018e02 	tstmi	r1, r2, lsl #28
    129c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    12a0:	00000007 	andeq	r0, r0, r7
    12a4:	0000001c 	andeq	r0, r0, ip, lsl r0
    12a8:	00001198 	muleq	r0, r8, r1
    12ac:	200032ac 	andcs	r3, r0, ip, lsr #5
    12b0:	00000020 	andeq	r0, r0, r0, lsr #32
    12b4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    12b8:	41018e02 	tstmi	r1, r2, lsl #28
    12bc:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    12c0:	00000007 	andeq	r0, r0, r7
    12c4:	0000001c 	andeq	r0, r0, ip, lsl r0
    12c8:	00001198 	muleq	r0, r8, r1
    12cc:	200032cc 	andcs	r3, r0, ip, asr #5
    12d0:	00000028 	andeq	r0, r0, r8, lsr #32
    12d4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    12d8:	41018e02 	tstmi	r1, r2, lsl #28
    12dc:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    12e0:	00000007 	andeq	r0, r0, r7
    12e4:	0000001c 	andeq	r0, r0, ip, lsl r0
    12e8:	00001198 	muleq	r0, r8, r1
    12ec:	200032f4 	strdcs	r3, [r0], -r4
    12f0:	00000020 	andeq	r0, r0, r0, lsr #32
    12f4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    12f8:	41018e02 	tstmi	r1, r2, lsl #28
    12fc:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    1300:	00000007 	andeq	r0, r0, r7
    1304:	0000001c 	andeq	r0, r0, ip, lsl r0
    1308:	00001198 	muleq	r0, r8, r1
    130c:	20003314 	andcs	r3, r0, r4, lsl r3
    1310:	00000030 	andeq	r0, r0, r0, lsr r0
    1314:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1318:	41018e02 	tstmi	r1, r2, lsl #28
    131c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    1320:	00000007 	andeq	r0, r0, r7
    1324:	0000001c 	andeq	r0, r0, ip, lsl r0
    1328:	00001198 	muleq	r0, r8, r1
    132c:	20003344 	andcs	r3, r0, r4, asr #6
    1330:	00000020 	andeq	r0, r0, r0, lsr #32
    1334:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1338:	41018e02 	tstmi	r1, r2, lsl #28
    133c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    1340:	00000007 	andeq	r0, r0, r7
    1344:	0000001c 	andeq	r0, r0, ip, lsl r0
    1348:	00001198 	muleq	r0, r8, r1
    134c:	20003364 	andcs	r3, r0, r4, ror #6
    1350:	00000020 	andeq	r0, r0, r0, lsr #32
    1354:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1358:	41018e02 	tstmi	r1, r2, lsl #28
    135c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    1360:	00000007 	andeq	r0, r0, r7
    1364:	0000001c 	andeq	r0, r0, ip, lsl r0
    1368:	00001198 	muleq	r0, r8, r1
    136c:	20003384 	andcs	r3, r0, r4, lsl #7
    1370:	00000040 	andeq	r0, r0, r0, asr #32
    1374:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1378:	41018e02 	tstmi	r1, r2, lsl #28
    137c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    1380:	00000007 	andeq	r0, r0, r7
    1384:	0000001c 	andeq	r0, r0, ip, lsl r0
    1388:	00001198 	muleq	r0, r8, r1
    138c:	200033c4 	andcs	r3, r0, r4, asr #7
    1390:	0000003c 	andeq	r0, r0, ip, lsr r0
    1394:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1398:	41018e02 	tstmi	r1, r2, lsl #28
    139c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    13a0:	00000007 	andeq	r0, r0, r7
    13a4:	0000001c 	andeq	r0, r0, ip, lsl r0
    13a8:	00001198 	muleq	r0, r8, r1
    13ac:	20003400 	andcs	r3, r0, r0, lsl #8
    13b0:	00000034 	andeq	r0, r0, r4, lsr r0
    13b4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    13b8:	41018e02 	tstmi	r1, r2, lsl #28
    13bc:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    13c0:	00000007 	andeq	r0, r0, r7
    13c4:	00000018 	andeq	r0, r0, r8, lsl r0
    13c8:	00001198 	muleq	r0, r8, r1
    13cc:	20003434 	andcs	r3, r0, r4, lsr r4
    13d0:	0000001c 	andeq	r0, r0, ip, lsl r0
    13d4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    13d8:	41018e02 	tstmi	r1, r2, lsl #28
    13dc:	0000070d 	andeq	r0, r0, sp, lsl #14
    13e0:	0000001c 	andeq	r0, r0, ip, lsl r0
    13e4:	00001198 	muleq	r0, r8, r1
    13e8:	20003450 	andcs	r3, r0, r0, asr r4
    13ec:	00000034 	andeq	r0, r0, r4, lsr r0
    13f0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    13f4:	41018e02 	tstmi	r1, r2, lsl #28
    13f8:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    13fc:	00000007 	andeq	r0, r0, r7
    1400:	0000001c 	andeq	r0, r0, ip, lsl r0
    1404:	00001198 	muleq	r0, r8, r1
    1408:	20003484 	andcs	r3, r0, r4, lsl #9
    140c:	00000038 	andeq	r0, r0, r8, lsr r0
    1410:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1414:	41018e02 	tstmi	r1, r2, lsl #28
    1418:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    141c:	00000007 	andeq	r0, r0, r7
    1420:	0000001c 	andeq	r0, r0, ip, lsl r0
    1424:	00001198 	muleq	r0, r8, r1
    1428:	200034bc 			; <UNDEFINED> instruction: 0x200034bc
    142c:	0000003c 	andeq	r0, r0, ip, lsr r0
    1430:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1434:	41018e02 	tstmi	r1, r2, lsl #28
    1438:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    143c:	00000007 	andeq	r0, r0, r7
    1440:	0000001c 	andeq	r0, r0, ip, lsl r0
    1444:	00001198 	muleq	r0, r8, r1
    1448:	200034f8 	strdcs	r3, [r0], -r8
    144c:	00000164 	andeq	r0, r0, r4, ror #2
    1450:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1454:	41018e02 	tstmi	r1, r2, lsl #28
    1458:	0d41280e 	stcleq	8, cr2, [r1, #-56]	; 0xffffffc8
    145c:	00000007 	andeq	r0, r0, r7
    1460:	0000001c 	andeq	r0, r0, ip, lsl r0
    1464:	00001198 	muleq	r0, r8, r1
    1468:	2000365c 	andcs	r3, r0, ip, asr r6
    146c:	00000060 	andeq	r0, r0, r0, rrx
    1470:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1474:	41018e02 	tstmi	r1, r2, lsl #28
    1478:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    147c:	00000007 	andeq	r0, r0, r7
    1480:	0000001c 	andeq	r0, r0, ip, lsl r0
    1484:	00001198 	muleq	r0, r8, r1
    1488:	200036bc 			; <UNDEFINED> instruction: 0x200036bc
    148c:	00000020 	andeq	r0, r0, r0, lsr #32
    1490:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1494:	41018e02 	tstmi	r1, r2, lsl #28
    1498:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    149c:	00000007 	andeq	r0, r0, r7
    14a0:	0000001c 	andeq	r0, r0, ip, lsl r0
    14a4:	00001198 	muleq	r0, r8, r1
    14a8:	200036dc 	ldrdcs	r3, [r0], -ip
    14ac:	00000020 	andeq	r0, r0, r0, lsr #32
    14b0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    14b4:	41018e02 	tstmi	r1, r2, lsl #28
    14b8:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    14bc:	00000007 	andeq	r0, r0, r7
    14c0:	0000001c 	andeq	r0, r0, ip, lsl r0
    14c4:	00001198 	muleq	r0, r8, r1
    14c8:	200036fc 	strdcs	r3, [r0], -ip
    14cc:	0000001c 	andeq	r0, r0, ip, lsl r0
    14d0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    14d4:	41018e02 	tstmi	r1, r2, lsl #28
    14d8:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    14dc:	00000007 	andeq	r0, r0, r7
    14e0:	0000001c 	andeq	r0, r0, ip, lsl r0
    14e4:	00001198 	muleq	r0, r8, r1
    14e8:	20003718 	andcs	r3, r0, r8, lsl r7
    14ec:	0000003c 	andeq	r0, r0, ip, lsr r0
    14f0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    14f4:	41018e02 	tstmi	r1, r2, lsl #28
    14f8:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    14fc:	00000007 	andeq	r0, r0, r7
    1500:	0000001c 	andeq	r0, r0, ip, lsl r0
    1504:	00001198 	muleq	r0, r8, r1
    1508:	20003754 	andcs	r3, r0, r4, asr r7
    150c:	0000003c 	andeq	r0, r0, ip, lsr r0
    1510:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1514:	41018e02 	tstmi	r1, r2, lsl #28
    1518:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    151c:	00000007 	andeq	r0, r0, r7
    1520:	0000001c 	andeq	r0, r0, ip, lsl r0
    1524:	00001198 	muleq	r0, r8, r1
    1528:	20003790 	mulcs	r0, r0, r7
    152c:	0000003c 	andeq	r0, r0, ip, lsr r0
    1530:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1534:	41018e02 	tstmi	r1, r2, lsl #28
    1538:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    153c:	00000007 	andeq	r0, r0, r7
    1540:	0000001c 	andeq	r0, r0, ip, lsl r0
    1544:	00001198 	muleq	r0, r8, r1
    1548:	200037cc 	andcs	r3, r0, ip, asr #15
    154c:	00000040 	andeq	r0, r0, r0, asr #32
    1550:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1554:	41018e02 	tstmi	r1, r2, lsl #28
    1558:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    155c:	00000007 	andeq	r0, r0, r7
    1560:	0000001c 	andeq	r0, r0, ip, lsl r0
    1564:	00001198 	muleq	r0, r8, r1
    1568:	2000380c 	andcs	r3, r0, ip, lsl #16
    156c:	0000003c 	andeq	r0, r0, ip, lsr r0
    1570:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1574:	41018e02 	tstmi	r1, r2, lsl #28
    1578:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    157c:	00000007 	andeq	r0, r0, r7
    1580:	0000001c 	andeq	r0, r0, ip, lsl r0
    1584:	00001198 	muleq	r0, r8, r1
    1588:	20003848 	andcs	r3, r0, r8, asr #16
    158c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1590:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1594:	41018e02 	tstmi	r1, r2, lsl #28
    1598:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    159c:	00000007 	andeq	r0, r0, r7
    15a0:	0000001c 	andeq	r0, r0, ip, lsl r0
    15a4:	00001198 	muleq	r0, r8, r1
    15a8:	20003864 	andcs	r3, r0, r4, ror #16
    15ac:	00000040 	andeq	r0, r0, r0, asr #32
    15b0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    15b4:	41018e02 	tstmi	r1, r2, lsl #28
    15b8:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    15bc:	00000007 	andeq	r0, r0, r7
    15c0:	0000001c 	andeq	r0, r0, ip, lsl r0
    15c4:	00001198 	muleq	r0, r8, r1
    15c8:	200038a4 	andcs	r3, r0, r4, lsr #17
    15cc:	00000040 	andeq	r0, r0, r0, asr #32
    15d0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    15d4:	41018e02 	tstmi	r1, r2, lsl #28
    15d8:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    15dc:	00000007 	andeq	r0, r0, r7
    15e0:	0000001c 	andeq	r0, r0, ip, lsl r0
    15e4:	00001198 	muleq	r0, r8, r1
    15e8:	200038e4 	andcs	r3, r0, r4, ror #17
    15ec:	00000040 	andeq	r0, r0, r0, asr #32
    15f0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    15f4:	41018e02 	tstmi	r1, r2, lsl #28
    15f8:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    15fc:	00000007 	andeq	r0, r0, r7
    1600:	0000001c 	andeq	r0, r0, ip, lsl r0
    1604:	00001198 	muleq	r0, r8, r1
    1608:	20003924 	andcs	r3, r0, r4, lsr #18
    160c:	00000040 	andeq	r0, r0, r0, asr #32
    1610:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1614:	41018e02 	tstmi	r1, r2, lsl #28
    1618:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    161c:	00000007 	andeq	r0, r0, r7
    1620:	0000001c 	andeq	r0, r0, ip, lsl r0
    1624:	00001198 	muleq	r0, r8, r1
    1628:	20003964 	andcs	r3, r0, r4, ror #18
    162c:	00000040 	andeq	r0, r0, r0, asr #32
    1630:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1634:	41018e02 	tstmi	r1, r2, lsl #28
    1638:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    163c:	00000007 	andeq	r0, r0, r7
    1640:	0000001c 	andeq	r0, r0, ip, lsl r0
    1644:	00001198 	muleq	r0, r8, r1
    1648:	200039a4 	andcs	r3, r0, r4, lsr #19
    164c:	00000040 	andeq	r0, r0, r0, asr #32
    1650:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1654:	41018e02 	tstmi	r1, r2, lsl #28
    1658:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    165c:	00000007 	andeq	r0, r0, r7
    1660:	0000001c 	andeq	r0, r0, ip, lsl r0
    1664:	00001198 	muleq	r0, r8, r1
    1668:	200039e4 	andcs	r3, r0, r4, ror #19
    166c:	00000040 	andeq	r0, r0, r0, asr #32
    1670:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1674:	41018e02 	tstmi	r1, r2, lsl #28
    1678:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    167c:	00000007 	andeq	r0, r0, r7
    1680:	0000001c 	andeq	r0, r0, ip, lsl r0
    1684:	00001198 	muleq	r0, r8, r1
    1688:	20003a24 	andcs	r3, r0, r4, lsr #20
    168c:	00000040 	andeq	r0, r0, r0, asr #32
    1690:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1694:	41018e02 	tstmi	r1, r2, lsl #28
    1698:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    169c:	00000007 	andeq	r0, r0, r7
    16a0:	0000001c 	andeq	r0, r0, ip, lsl r0
    16a4:	00001198 	muleq	r0, r8, r1
    16a8:	20003a64 	andcs	r3, r0, r4, ror #20
    16ac:	00000040 	andeq	r0, r0, r0, asr #32
    16b0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    16b4:	41018e02 	tstmi	r1, r2, lsl #28
    16b8:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    16bc:	00000007 	andeq	r0, r0, r7
    16c0:	0000001c 	andeq	r0, r0, ip, lsl r0
    16c4:	00001198 	muleq	r0, r8, r1
    16c8:	20003aa4 	andcs	r3, r0, r4, lsr #21
    16cc:	00000040 	andeq	r0, r0, r0, asr #32
    16d0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    16d4:	41018e02 	tstmi	r1, r2, lsl #28
    16d8:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    16dc:	00000007 	andeq	r0, r0, r7
    16e0:	0000001c 	andeq	r0, r0, ip, lsl r0
    16e4:	00001198 	muleq	r0, r8, r1
    16e8:	20003ae4 	andcs	r3, r0, r4, ror #21
    16ec:	00000040 	andeq	r0, r0, r0, asr #32
    16f0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    16f4:	41018e02 	tstmi	r1, r2, lsl #28
    16f8:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    16fc:	00000007 	andeq	r0, r0, r7
    1700:	0000001c 	andeq	r0, r0, ip, lsl r0
    1704:	00001198 	muleq	r0, r8, r1
    1708:	20003b24 	andcs	r3, r0, r4, lsr #22
    170c:	00000040 	andeq	r0, r0, r0, asr #32
    1710:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1714:	41018e02 	tstmi	r1, r2, lsl #28
    1718:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    171c:	00000007 	andeq	r0, r0, r7
    1720:	0000001c 	andeq	r0, r0, ip, lsl r0
    1724:	00001198 	muleq	r0, r8, r1
    1728:	20003b64 	andcs	r3, r0, r4, ror #22
    172c:	00000040 	andeq	r0, r0, r0, asr #32
    1730:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1734:	41018e02 	tstmi	r1, r2, lsl #28
    1738:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    173c:	00000007 	andeq	r0, r0, r7
    1740:	0000001c 	andeq	r0, r0, ip, lsl r0
    1744:	00001198 	muleq	r0, r8, r1
    1748:	20003ba4 	andcs	r3, r0, r4, lsr #23
    174c:	00000040 	andeq	r0, r0, r0, asr #32
    1750:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1754:	41018e02 	tstmi	r1, r2, lsl #28
    1758:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    175c:	00000007 	andeq	r0, r0, r7
    1760:	0000001c 	andeq	r0, r0, ip, lsl r0
    1764:	00001198 	muleq	r0, r8, r1
    1768:	20003be4 	andcs	r3, r0, r4, ror #23
    176c:	00000040 	andeq	r0, r0, r0, asr #32
    1770:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1774:	41018e02 	tstmi	r1, r2, lsl #28
    1778:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    177c:	00000007 	andeq	r0, r0, r7
    1780:	0000001c 	andeq	r0, r0, ip, lsl r0
    1784:	00001198 	muleq	r0, r8, r1
    1788:	20003c24 	andcs	r3, r0, r4, lsr #24
    178c:	0000003c 	andeq	r0, r0, ip, lsr r0
    1790:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1794:	41018e02 	tstmi	r1, r2, lsl #28
    1798:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    179c:	00000007 	andeq	r0, r0, r7
    17a0:	0000001c 	andeq	r0, r0, ip, lsl r0
    17a4:	00001198 	muleq	r0, r8, r1
    17a8:	20003c60 	andcs	r3, r0, r0, ror #24
    17ac:	00000050 	andeq	r0, r0, r0, asr r0
    17b0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    17b4:	41018e02 	tstmi	r1, r2, lsl #28
    17b8:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    17bc:	00000007 	andeq	r0, r0, r7
    17c0:	0000001c 	andeq	r0, r0, ip, lsl r0
    17c4:	00001198 	muleq	r0, r8, r1
    17c8:	20003cb0 			; <UNDEFINED> instruction: 0x20003cb0
    17cc:	00000084 	andeq	r0, r0, r4, lsl #1
    17d0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    17d4:	41018e02 	tstmi	r1, r2, lsl #28
    17d8:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
    17dc:	00000007 	andeq	r0, r0, r7
    17e0:	00000018 	andeq	r0, r0, r8, lsl r0
    17e4:	00001198 	muleq	r0, r8, r1
    17e8:	20003d34 	andcs	r3, r0, r4, lsr sp
    17ec:	0000001c 	andeq	r0, r0, ip, lsl r0
    17f0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    17f4:	41018e02 	tstmi	r1, r2, lsl #28
    17f8:	0000070d 	andeq	r0, r0, sp, lsl #14
    17fc:	0000001c 	andeq	r0, r0, ip, lsl r0
    1800:	00001198 	muleq	r0, r8, r1
    1804:	20003d50 	andcs	r3, r0, r0, asr sp
    1808:	00000044 	andeq	r0, r0, r4, asr #32
    180c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1810:	41018e02 	tstmi	r1, r2, lsl #28
    1814:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    1818:	00000007 	andeq	r0, r0, r7
    181c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1820:	00001198 	muleq	r0, r8, r1
    1824:	20003d94 	mulcs	r0, r4, sp
    1828:	00000020 	andeq	r0, r0, r0, lsr #32
    182c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1830:	41018e02 	tstmi	r1, r2, lsl #28
    1834:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    1838:	00000007 	andeq	r0, r0, r7
    183c:	0000000c 	andeq	r0, r0, ip
    1840:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1844:	7c010001 	stcvc	0, cr0, [r1], {1}
    1848:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    184c:	0000000c 	andeq	r0, r0, ip
    1850:	0000183c 	andeq	r1, r0, ip, lsr r8
    1854:	20003db5 			; <UNDEFINED> instruction: 0x20003db5
    1858:	0000010a 	andeq	r0, r0, sl, lsl #2
