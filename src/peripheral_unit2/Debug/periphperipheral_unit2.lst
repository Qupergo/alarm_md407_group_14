
Debug/periphperipheral_unit2:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:


__attribute__((naked)) __attribute__((section (".start_section")) )
void startup ( void )
{
__asm__ volatile(" LDR R0,=0x2001C000\n");		/* set stack */
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <startup+0xc>)
__asm__ volatile(" MOV SP,R0\n");
20000002:	4685      	mov	sp, r0
__asm__ volatile(" BL main\n");					/* call main */
20000004:	f000 fbe0 	bl	200007c8 <main>
__asm__ volatile(".L1: B .L1\n");				/* never return */
20000008:	e7fe      	b.n	20000008 <startup+0x8>
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
20000010:	b580      	push	{r7, lr}
20000012:	b082      	sub	sp, #8
20000014:	af00      	add	r7, sp, #0
20000016:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
20000018:	4b04      	ldr	r3, [pc, #16]	; (2000002c <NVIC_PriorityGroupConfig+0x1c>)
2000001a:	687a      	ldr	r2, [r7, #4]
2000001c:	4904      	ldr	r1, [pc, #16]	; (20000030 <NVIC_PriorityGroupConfig+0x20>)
2000001e:	430a      	orrs	r2, r1
20000020:	60da      	str	r2, [r3, #12]
}
20000022:	46c0      	nop			; (mov r8, r8)
20000024:	46bd      	mov	sp, r7
20000026:	b002      	add	sp, #8
20000028:	bd80      	pop	{r7, pc}
2000002a:	46c0      	nop			; (mov r8, r8)
2000002c:	e000ed00 	and	lr, r0, r0, lsl #26
20000030:	05fa0000 	ldrbeq	r0, [sl, #0]!

20000034 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
20000034:	b5b0      	push	{r4, r5, r7, lr}
20000036:	b084      	sub	sp, #16
20000038:	af00      	add	r7, sp, #0
2000003a:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
2000003c:	210f      	movs	r1, #15
2000003e:	187b      	adds	r3, r7, r1
20000040:	2200      	movs	r2, #0
20000042:	701a      	strb	r2, [r3, #0]
20000044:	250e      	movs	r5, #14
20000046:	197b      	adds	r3, r7, r5
20000048:	2200      	movs	r2, #0
2000004a:	701a      	strb	r2, [r3, #0]
2000004c:	240d      	movs	r4, #13
2000004e:	193b      	adds	r3, r7, r4
20000050:	220f      	movs	r2, #15
20000052:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
20000054:	687b      	ldr	r3, [r7, #4]
20000056:	78db      	ldrb	r3, [r3, #3]
20000058:	2b00      	cmp	r3, #0
2000005a:	d04b      	beq.n	200000f4 <NVIC_Init+0xc0>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
2000005c:	4b30      	ldr	r3, [pc, #192]	; (20000120 <NVIC_Init+0xec>)
2000005e:	68db      	ldr	r3, [r3, #12]
20000060:	43db      	mvns	r3, r3
20000062:	0a1b      	lsrs	r3, r3, #8
20000064:	b2da      	uxtb	r2, r3
20000066:	0008      	movs	r0, r1
20000068:	183b      	adds	r3, r7, r0
2000006a:	2107      	movs	r1, #7
2000006c:	400a      	ands	r2, r1
2000006e:	701a      	strb	r2, [r3, #0]
    tmppre = (0x4 - tmppriority);
20000070:	197b      	adds	r3, r7, r5
20000072:	183a      	adds	r2, r7, r0
20000074:	7812      	ldrb	r2, [r2, #0]
20000076:	2104      	movs	r1, #4
20000078:	1a8a      	subs	r2, r1, r2
2000007a:	701a      	strb	r2, [r3, #0]
    tmpsub = tmpsub >> tmppriority;
2000007c:	193b      	adds	r3, r7, r4
2000007e:	781a      	ldrb	r2, [r3, #0]
20000080:	0001      	movs	r1, r0
20000082:	187b      	adds	r3, r7, r1
20000084:	781b      	ldrb	r3, [r3, #0]
20000086:	411a      	asrs	r2, r3
20000088:	193b      	adds	r3, r7, r4
2000008a:	701a      	strb	r2, [r3, #0]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
2000008c:	687b      	ldr	r3, [r7, #4]
2000008e:	785b      	ldrb	r3, [r3, #1]
20000090:	001a      	movs	r2, r3
20000092:	197b      	adds	r3, r7, r5
20000094:	781b      	ldrb	r3, [r3, #0]
20000096:	409a      	lsls	r2, r3
20000098:	0008      	movs	r0, r1
2000009a:	187b      	adds	r3, r7, r1
2000009c:	701a      	strb	r2, [r3, #0]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
2000009e:	687b      	ldr	r3, [r7, #4]
200000a0:	789b      	ldrb	r3, [r3, #2]
200000a2:	193a      	adds	r2, r7, r4
200000a4:	7812      	ldrb	r2, [r2, #0]
200000a6:	4013      	ands	r3, r2
200000a8:	b2d9      	uxtb	r1, r3
200000aa:	183b      	adds	r3, r7, r0
200000ac:	183a      	adds	r2, r7, r0
200000ae:	7812      	ldrb	r2, [r2, #0]
200000b0:	430a      	orrs	r2, r1
200000b2:	701a      	strb	r2, [r3, #0]
        
    tmppriority = tmppriority << 0x04;
200000b4:	183b      	adds	r3, r7, r0
200000b6:	183a      	adds	r2, r7, r0
200000b8:	7812      	ldrb	r2, [r2, #0]
200000ba:	0112      	lsls	r2, r2, #4
200000bc:	701a      	strb	r2, [r3, #0]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
200000be:	4a19      	ldr	r2, [pc, #100]	; (20000124 <NVIC_Init+0xf0>)
200000c0:	687b      	ldr	r3, [r7, #4]
200000c2:	781b      	ldrb	r3, [r3, #0]
200000c4:	0019      	movs	r1, r3
200000c6:	23c0      	movs	r3, #192	; 0xc0
200000c8:	009b      	lsls	r3, r3, #2
200000ca:	1852      	adds	r2, r2, r1
200000cc:	18d3      	adds	r3, r2, r3
200000ce:	183a      	adds	r2, r7, r0
200000d0:	7812      	ldrb	r2, [r2, #0]
200000d2:	701a      	strb	r2, [r3, #0]
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
200000d4:	687b      	ldr	r3, [r7, #4]
200000d6:	781b      	ldrb	r3, [r3, #0]
200000d8:	001a      	movs	r2, r3
200000da:	231f      	movs	r3, #31
200000dc:	4013      	ands	r3, r2
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
200000de:	4911      	ldr	r1, [pc, #68]	; (20000124 <NVIC_Init+0xf0>)
200000e0:	687a      	ldr	r2, [r7, #4]
200000e2:	7812      	ldrb	r2, [r2, #0]
200000e4:	0952      	lsrs	r2, r2, #5
200000e6:	b2d2      	uxtb	r2, r2
200000e8:	0010      	movs	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
200000ea:	2201      	movs	r2, #1
200000ec:	409a      	lsls	r2, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
200000ee:	0083      	lsls	r3, r0, #2
200000f0:	505a      	str	r2, [r3, r1]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
200000f2:	e010      	b.n	20000116 <NVIC_Init+0xe2>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
200000f4:	687b      	ldr	r3, [r7, #4]
200000f6:	781b      	ldrb	r3, [r3, #0]
200000f8:	001a      	movs	r2, r3
200000fa:	231f      	movs	r3, #31
200000fc:	4013      	ands	r3, r2
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
200000fe:	4909      	ldr	r1, [pc, #36]	; (20000124 <NVIC_Init+0xf0>)
20000100:	687a      	ldr	r2, [r7, #4]
20000102:	7812      	ldrb	r2, [r2, #0]
20000104:	0952      	lsrs	r2, r2, #5
20000106:	b2d2      	uxtb	r2, r2
20000108:	0010      	movs	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
2000010a:	2201      	movs	r2, #1
2000010c:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
2000010e:	0003      	movs	r3, r0
20000110:	3320      	adds	r3, #32
20000112:	009b      	lsls	r3, r3, #2
20000114:	505a      	str	r2, [r3, r1]
}
20000116:	46c0      	nop			; (mov r8, r8)
20000118:	46bd      	mov	sp, r7
2000011a:	b004      	add	sp, #16
2000011c:	bdb0      	pop	{r4, r5, r7, pc}
2000011e:	46c0      	nop			; (mov r8, r8)
20000120:	e000ed00 	and	lr, r0, r0, lsl #26
20000124:	e000e100 	and	lr, r0, r0, lsl #2

20000128 <NVIC_SetVectorTable>:
  *     @arg NVIC_VectTab_FLASH: Vector Table in internal FLASH.
  * @param  Offset: Vector Table base offset field. This value must be a multiple of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
20000128:	b580      	push	{r7, lr}
2000012a:	b082      	sub	sp, #8
2000012c:	af00      	add	r7, sp, #0
2000012e:	6078      	str	r0, [r7, #4]
20000130:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
20000132:	683b      	ldr	r3, [r7, #0]
20000134:	4a05      	ldr	r2, [pc, #20]	; (2000014c <NVIC_SetVectorTable+0x24>)
20000136:	4013      	ands	r3, r2
20000138:	0019      	movs	r1, r3
2000013a:	4b05      	ldr	r3, [pc, #20]	; (20000150 <NVIC_SetVectorTable+0x28>)
2000013c:	687a      	ldr	r2, [r7, #4]
2000013e:	430a      	orrs	r2, r1
20000140:	609a      	str	r2, [r3, #8]
}
20000142:	46c0      	nop			; (mov r8, r8)
20000144:	46bd      	mov	sp, r7
20000146:	b002      	add	sp, #8
20000148:	bd80      	pop	{r7, pc}
2000014a:	46c0      	nop			; (mov r8, r8)
2000014c:	1fffff80 	svcne	0x00ffff80
20000150:	e000ed00 	and	lr, r0, r0, lsl #26

20000154 <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT: Low Power Sleep on Exit.
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
20000154:	b580      	push	{r7, lr}
20000156:	b082      	sub	sp, #8
20000158:	af00      	add	r7, sp, #0
2000015a:	0002      	movs	r2, r0
2000015c:	1dfb      	adds	r3, r7, #7
2000015e:	701a      	strb	r2, [r3, #0]
20000160:	1dbb      	adds	r3, r7, #6
20000162:	1c0a      	adds	r2, r1, #0
20000164:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
20000166:	1dbb      	adds	r3, r7, #6
20000168:	781b      	ldrb	r3, [r3, #0]
2000016a:	2b00      	cmp	r3, #0
2000016c:	d007      	beq.n	2000017e <NVIC_SystemLPConfig+0x2a>
  {
    SCB->SCR |= LowPowerMode;
2000016e:	4b0a      	ldr	r3, [pc, #40]	; (20000198 <NVIC_SystemLPConfig+0x44>)
20000170:	6919      	ldr	r1, [r3, #16]
20000172:	1dfb      	adds	r3, r7, #7
20000174:	781a      	ldrb	r2, [r3, #0]
20000176:	4b08      	ldr	r3, [pc, #32]	; (20000198 <NVIC_SystemLPConfig+0x44>)
20000178:	430a      	orrs	r2, r1
2000017a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
  }
}
2000017c:	e007      	b.n	2000018e <NVIC_SystemLPConfig+0x3a>
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
2000017e:	4b06      	ldr	r3, [pc, #24]	; (20000198 <NVIC_SystemLPConfig+0x44>)
20000180:	691a      	ldr	r2, [r3, #16]
20000182:	1dfb      	adds	r3, r7, #7
20000184:	781b      	ldrb	r3, [r3, #0]
20000186:	43d9      	mvns	r1, r3
20000188:	4b03      	ldr	r3, [pc, #12]	; (20000198 <NVIC_SystemLPConfig+0x44>)
2000018a:	400a      	ands	r2, r1
2000018c:	611a      	str	r2, [r3, #16]
}
2000018e:	46c0      	nop			; (mov r8, r8)
20000190:	46bd      	mov	sp, r7
20000192:	b002      	add	sp, #8
20000194:	bd80      	pop	{r7, pc}
20000196:	46c0      	nop			; (mov r8, r8)
20000198:	e000ed00 	and	lr, r0, r0, lsl #26

2000019c <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
2000019c:	b580      	push	{r7, lr}
2000019e:	b082      	sub	sp, #8
200001a0:	af00      	add	r7, sp, #0
200001a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
200001a4:	687b      	ldr	r3, [r7, #4]
200001a6:	2b04      	cmp	r3, #4
200001a8:	d106      	bne.n	200001b8 <SysTick_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
200001aa:	4b08      	ldr	r3, [pc, #32]	; (200001cc <SysTick_CLKSourceConfig+0x30>)
200001ac:	681a      	ldr	r2, [r3, #0]
200001ae:	4b07      	ldr	r3, [pc, #28]	; (200001cc <SysTick_CLKSourceConfig+0x30>)
200001b0:	2104      	movs	r1, #4
200001b2:	430a      	orrs	r2, r1
200001b4:	601a      	str	r2, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
  }
}
200001b6:	e005      	b.n	200001c4 <SysTick_CLKSourceConfig+0x28>
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
200001b8:	4b04      	ldr	r3, [pc, #16]	; (200001cc <SysTick_CLKSourceConfig+0x30>)
200001ba:	681a      	ldr	r2, [r3, #0]
200001bc:	4b03      	ldr	r3, [pc, #12]	; (200001cc <SysTick_CLKSourceConfig+0x30>)
200001be:	2104      	movs	r1, #4
200001c0:	438a      	bics	r2, r1
200001c2:	601a      	str	r2, [r3, #0]
}
200001c4:	46c0      	nop			; (mov r8, r8)
200001c6:	46bd      	mov	sp, r7
200001c8:	b002      	add	sp, #8
200001ca:	bd80      	pop	{r7, pc}
200001cc:	e000e010 	and	lr, r0, r0, lsl r0

200001d0 <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
200001d0:	b580      	push	{r7, lr}
200001d2:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
200001d4:	4b08      	ldr	r3, [pc, #32]	; (200001f8 <EXTI_DeInit+0x28>)
200001d6:	2200      	movs	r2, #0
200001d8:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
200001da:	4b07      	ldr	r3, [pc, #28]	; (200001f8 <EXTI_DeInit+0x28>)
200001dc:	2200      	movs	r2, #0
200001de:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000;
200001e0:	4b05      	ldr	r3, [pc, #20]	; (200001f8 <EXTI_DeInit+0x28>)
200001e2:	2200      	movs	r2, #0
200001e4:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000;
200001e6:	4b04      	ldr	r3, [pc, #16]	; (200001f8 <EXTI_DeInit+0x28>)
200001e8:	2200      	movs	r2, #0
200001ea:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x007FFFFF;
200001ec:	4b02      	ldr	r3, [pc, #8]	; (200001f8 <EXTI_DeInit+0x28>)
200001ee:	4a03      	ldr	r2, [pc, #12]	; (200001fc <EXTI_DeInit+0x2c>)
200001f0:	615a      	str	r2, [r3, #20]
}
200001f2:	46c0      	nop			; (mov r8, r8)
200001f4:	46bd      	mov	sp, r7
200001f6:	bd80      	pop	{r7, pc}
200001f8:	40013c00 	andmi	r3, r1, r0, lsl #24
200001fc:	007fffff 	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>

20000200 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
20000200:	b580      	push	{r7, lr}
20000202:	b084      	sub	sp, #16
20000204:	af00      	add	r7, sp, #0
20000206:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
20000208:	2300      	movs	r3, #0
2000020a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
2000020c:	4b33      	ldr	r3, [pc, #204]	; (200002dc <EXTI_Init+0xdc>)
2000020e:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
20000210:	687b      	ldr	r3, [r7, #4]
20000212:	799b      	ldrb	r3, [r3, #6]
20000214:	2b00      	cmp	r3, #0
20000216:	d04f      	beq.n	200002b8 <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
20000218:	4b30      	ldr	r3, [pc, #192]	; (200002dc <EXTI_Init+0xdc>)
2000021a:	681a      	ldr	r2, [r3, #0]
2000021c:	687b      	ldr	r3, [r7, #4]
2000021e:	681b      	ldr	r3, [r3, #0]
20000220:	43d9      	mvns	r1, r3
20000222:	4b2e      	ldr	r3, [pc, #184]	; (200002dc <EXTI_Init+0xdc>)
20000224:	400a      	ands	r2, r1
20000226:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
20000228:	4b2c      	ldr	r3, [pc, #176]	; (200002dc <EXTI_Init+0xdc>)
2000022a:	685a      	ldr	r2, [r3, #4]
2000022c:	687b      	ldr	r3, [r7, #4]
2000022e:	681b      	ldr	r3, [r3, #0]
20000230:	43d9      	mvns	r1, r3
20000232:	4b2a      	ldr	r3, [pc, #168]	; (200002dc <EXTI_Init+0xdc>)
20000234:	400a      	ands	r2, r1
20000236:	605a      	str	r2, [r3, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
20000238:	687b      	ldr	r3, [r7, #4]
2000023a:	791b      	ldrb	r3, [r3, #4]
2000023c:	001a      	movs	r2, r3
2000023e:	68fb      	ldr	r3, [r7, #12]
20000240:	189b      	adds	r3, r3, r2
20000242:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
20000244:	68fb      	ldr	r3, [r7, #12]
20000246:	6819      	ldr	r1, [r3, #0]
20000248:	687b      	ldr	r3, [r7, #4]
2000024a:	681a      	ldr	r2, [r3, #0]
2000024c:	68fb      	ldr	r3, [r7, #12]
2000024e:	430a      	orrs	r2, r1
20000250:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
20000252:	4b22      	ldr	r3, [pc, #136]	; (200002dc <EXTI_Init+0xdc>)
20000254:	689a      	ldr	r2, [r3, #8]
20000256:	687b      	ldr	r3, [r7, #4]
20000258:	681b      	ldr	r3, [r3, #0]
2000025a:	43d9      	mvns	r1, r3
2000025c:	4b1f      	ldr	r3, [pc, #124]	; (200002dc <EXTI_Init+0xdc>)
2000025e:	400a      	ands	r2, r1
20000260:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
20000262:	4b1e      	ldr	r3, [pc, #120]	; (200002dc <EXTI_Init+0xdc>)
20000264:	68da      	ldr	r2, [r3, #12]
20000266:	687b      	ldr	r3, [r7, #4]
20000268:	681b      	ldr	r3, [r3, #0]
2000026a:	43d9      	mvns	r1, r3
2000026c:	4b1b      	ldr	r3, [pc, #108]	; (200002dc <EXTI_Init+0xdc>)
2000026e:	400a      	ands	r2, r1
20000270:	60da      	str	r2, [r3, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
20000272:	687b      	ldr	r3, [r7, #4]
20000274:	795b      	ldrb	r3, [r3, #5]
20000276:	2b10      	cmp	r3, #16
20000278:	d10e      	bne.n	20000298 <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
2000027a:	4b18      	ldr	r3, [pc, #96]	; (200002dc <EXTI_Init+0xdc>)
2000027c:	6899      	ldr	r1, [r3, #8]
2000027e:	687b      	ldr	r3, [r7, #4]
20000280:	681a      	ldr	r2, [r3, #0]
20000282:	4b16      	ldr	r3, [pc, #88]	; (200002dc <EXTI_Init+0xdc>)
20000284:	430a      	orrs	r2, r1
20000286:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
20000288:	4b14      	ldr	r3, [pc, #80]	; (200002dc <EXTI_Init+0xdc>)
2000028a:	68d9      	ldr	r1, [r3, #12]
2000028c:	687b      	ldr	r3, [r7, #4]
2000028e:	681a      	ldr	r2, [r3, #0]
20000290:	4b12      	ldr	r3, [pc, #72]	; (200002dc <EXTI_Init+0xdc>)
20000292:	430a      	orrs	r2, r1
20000294:	60da      	str	r2, [r3, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
20000296:	e01d      	b.n	200002d4 <EXTI_Init+0xd4>
      tmp = (uint32_t)EXTI_BASE;
20000298:	4b10      	ldr	r3, [pc, #64]	; (200002dc <EXTI_Init+0xdc>)
2000029a:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
2000029c:	687b      	ldr	r3, [r7, #4]
2000029e:	795b      	ldrb	r3, [r3, #5]
200002a0:	001a      	movs	r2, r3
200002a2:	68fb      	ldr	r3, [r7, #12]
200002a4:	189b      	adds	r3, r3, r2
200002a6:	60fb      	str	r3, [r7, #12]
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
200002a8:	68fb      	ldr	r3, [r7, #12]
200002aa:	6819      	ldr	r1, [r3, #0]
200002ac:	687b      	ldr	r3, [r7, #4]
200002ae:	681a      	ldr	r2, [r3, #0]
200002b0:	68fb      	ldr	r3, [r7, #12]
200002b2:	430a      	orrs	r2, r1
200002b4:	601a      	str	r2, [r3, #0]
}
200002b6:	e00d      	b.n	200002d4 <EXTI_Init+0xd4>
    tmp += EXTI_InitStruct->EXTI_Mode;
200002b8:	687b      	ldr	r3, [r7, #4]
200002ba:	791b      	ldrb	r3, [r3, #4]
200002bc:	001a      	movs	r2, r3
200002be:	68fb      	ldr	r3, [r7, #12]
200002c0:	189b      	adds	r3, r3, r2
200002c2:	60fb      	str	r3, [r7, #12]
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
200002c4:	68fb      	ldr	r3, [r7, #12]
200002c6:	681a      	ldr	r2, [r3, #0]
200002c8:	687b      	ldr	r3, [r7, #4]
200002ca:	681b      	ldr	r3, [r3, #0]
200002cc:	43d9      	mvns	r1, r3
200002ce:	68fb      	ldr	r3, [r7, #12]
200002d0:	400a      	ands	r2, r1
200002d2:	601a      	str	r2, [r3, #0]
}
200002d4:	46c0      	nop			; (mov r8, r8)
200002d6:	46bd      	mov	sp, r7
200002d8:	b004      	add	sp, #16
200002da:	bd80      	pop	{r7, pc}
200002dc:	40013c00 	andmi	r3, r1, r0, lsl #24

200002e0 <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
200002e0:	b580      	push	{r7, lr}
200002e2:	b082      	sub	sp, #8
200002e4:	af00      	add	r7, sp, #0
200002e6:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
200002e8:	687b      	ldr	r3, [r7, #4]
200002ea:	2200      	movs	r2, #0
200002ec:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
200002ee:	687b      	ldr	r3, [r7, #4]
200002f0:	2200      	movs	r2, #0
200002f2:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
200002f4:	687b      	ldr	r3, [r7, #4]
200002f6:	220c      	movs	r2, #12
200002f8:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
200002fa:	687b      	ldr	r3, [r7, #4]
200002fc:	2200      	movs	r2, #0
200002fe:	719a      	strb	r2, [r3, #6]
}
20000300:	46c0      	nop			; (mov r8, r8)
20000302:	46bd      	mov	sp, r7
20000304:	b002      	add	sp, #8
20000306:	bd80      	pop	{r7, pc}

20000308 <EXTI_GenerateSWInterrupt>:
  *         will be generated.
  *         This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
20000308:	b580      	push	{r7, lr}
2000030a:	b082      	sub	sp, #8
2000030c:	af00      	add	r7, sp, #0
2000030e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->SWIER |= EXTI_Line;
20000310:	4b04      	ldr	r3, [pc, #16]	; (20000324 <EXTI_GenerateSWInterrupt+0x1c>)
20000312:	6919      	ldr	r1, [r3, #16]
20000314:	4b03      	ldr	r3, [pc, #12]	; (20000324 <EXTI_GenerateSWInterrupt+0x1c>)
20000316:	687a      	ldr	r2, [r7, #4]
20000318:	430a      	orrs	r2, r1
2000031a:	611a      	str	r2, [r3, #16]
}
2000031c:	46c0      	nop			; (mov r8, r8)
2000031e:	46bd      	mov	sp, r7
20000320:	b002      	add	sp, #8
20000322:	bd80      	pop	{r7, pc}
20000324:	40013c00 	andmi	r3, r1, r0, lsl #24

20000328 <EXTI_GetFlagStatus>:
  * @param  EXTI_Line: specifies the EXTI line flag to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
20000328:	b580      	push	{r7, lr}
2000032a:	b084      	sub	sp, #16
2000032c:	af00      	add	r7, sp, #0
2000032e:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
20000330:	210f      	movs	r1, #15
20000332:	187b      	adds	r3, r7, r1
20000334:	2200      	movs	r2, #0
20000336:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
20000338:	4b09      	ldr	r3, [pc, #36]	; (20000360 <EXTI_GetFlagStatus+0x38>)
2000033a:	695b      	ldr	r3, [r3, #20]
2000033c:	687a      	ldr	r2, [r7, #4]
2000033e:	4013      	ands	r3, r2
20000340:	d003      	beq.n	2000034a <EXTI_GetFlagStatus+0x22>
  {
    bitstatus = SET;
20000342:	187b      	adds	r3, r7, r1
20000344:	2201      	movs	r2, #1
20000346:	701a      	strb	r2, [r3, #0]
20000348:	e003      	b.n	20000352 <EXTI_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
2000034a:	230f      	movs	r3, #15
2000034c:	18fb      	adds	r3, r7, r3
2000034e:	2200      	movs	r2, #0
20000350:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
20000352:	230f      	movs	r3, #15
20000354:	18fb      	adds	r3, r7, r3
20000356:	781b      	ldrb	r3, [r3, #0]
}
20000358:	0018      	movs	r0, r3
2000035a:	46bd      	mov	sp, r7
2000035c:	b004      	add	sp, #16
2000035e:	bd80      	pop	{r7, pc}
20000360:	40013c00 	andmi	r3, r1, r0, lsl #24

20000364 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
20000364:	b580      	push	{r7, lr}
20000366:	b082      	sub	sp, #8
20000368:	af00      	add	r7, sp, #0
2000036a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
2000036c:	4b03      	ldr	r3, [pc, #12]	; (2000037c <EXTI_ClearFlag+0x18>)
2000036e:	687a      	ldr	r2, [r7, #4]
20000370:	615a      	str	r2, [r3, #20]
}
20000372:	46c0      	nop			; (mov r8, r8)
20000374:	46bd      	mov	sp, r7
20000376:	b002      	add	sp, #8
20000378:	bd80      	pop	{r7, pc}
2000037a:	46c0      	nop			; (mov r8, r8)
2000037c:	40013c00 	andmi	r3, r1, r0, lsl #24

20000380 <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
20000380:	b580      	push	{r7, lr}
20000382:	b084      	sub	sp, #16
20000384:	af00      	add	r7, sp, #0
20000386:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
20000388:	210f      	movs	r1, #15
2000038a:	187b      	adds	r3, r7, r1
2000038c:	2200      	movs	r2, #0
2000038e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
20000390:	4b09      	ldr	r3, [pc, #36]	; (200003b8 <EXTI_GetITStatus+0x38>)
20000392:	695b      	ldr	r3, [r3, #20]
20000394:	687a      	ldr	r2, [r7, #4]
20000396:	4013      	ands	r3, r2
20000398:	d003      	beq.n	200003a2 <EXTI_GetITStatus+0x22>
  {
    bitstatus = SET;
2000039a:	187b      	adds	r3, r7, r1
2000039c:	2201      	movs	r2, #1
2000039e:	701a      	strb	r2, [r3, #0]
200003a0:	e003      	b.n	200003aa <EXTI_GetITStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
200003a2:	230f      	movs	r3, #15
200003a4:	18fb      	adds	r3, r7, r3
200003a6:	2200      	movs	r2, #0
200003a8:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
200003aa:	230f      	movs	r3, #15
200003ac:	18fb      	adds	r3, r7, r3
200003ae:	781b      	ldrb	r3, [r3, #0]
  
}
200003b0:	0018      	movs	r0, r3
200003b2:	46bd      	mov	sp, r7
200003b4:	b004      	add	sp, #16
200003b6:	bd80      	pop	{r7, pc}
200003b8:	40013c00 	andmi	r3, r1, r0, lsl #24

200003bc <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
200003bc:	b580      	push	{r7, lr}
200003be:	b082      	sub	sp, #8
200003c0:	af00      	add	r7, sp, #0
200003c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
200003c4:	4b03      	ldr	r3, [pc, #12]	; (200003d4 <EXTI_ClearITPendingBit+0x18>)
200003c6:	687a      	ldr	r2, [r7, #4]
200003c8:	615a      	str	r2, [r3, #20]
}
200003ca:	46c0      	nop			; (mov r8, r8)
200003cc:	46bd      	mov	sp, r7
200003ce:	b002      	add	sp, #8
200003d0:	bd80      	pop	{r7, pc}
200003d2:	46c0      	nop			; (mov r8, r8)
200003d4:	40013c00 	andmi	r3, r1, r0, lsl #24

200003d8 <out_char>:
    volatile unsigned short gtpr;
} USART;

#define USART1  ((USART *) 0x40011000) 

void out_char( char c ) {
200003d8:	b580      	push	{r7, lr}
200003da:	b082      	sub	sp, #8
200003dc:	af00      	add	r7, sp, #0
200003de:	0002      	movs	r2, r0
200003e0:	1dfb      	adds	r3, r7, #7
200003e2:	701a      	strb	r2, [r3, #0]
    // wait until usart1 is ready
    while (( USART1->sr & 0x80) == 0);
200003e4:	46c0      	nop			; (mov r8, r8)
200003e6:	4b0b      	ldr	r3, [pc, #44]	; (20000414 <out_char+0x3c>)
200003e8:	881b      	ldrh	r3, [r3, #0]
200003ea:	b29b      	uxth	r3, r3
200003ec:	001a      	movs	r2, r3
200003ee:	2380      	movs	r3, #128	; 0x80
200003f0:	4013      	ands	r3, r2
200003f2:	d0f8      	beq.n	200003e6 <out_char+0xe>
    // write character to usart1 
    USART1->dr = (unsigned short) c;
200003f4:	4a07      	ldr	r2, [pc, #28]	; (20000414 <out_char+0x3c>)
200003f6:	1dfb      	adds	r3, r7, #7
200003f8:	781b      	ldrb	r3, [r3, #0]
200003fa:	b29b      	uxth	r3, r3
200003fc:	8093      	strh	r3, [r2, #4]
    if( c == '\n')
200003fe:	1dfb      	adds	r3, r7, #7
20000400:	781b      	ldrb	r3, [r3, #0]
20000402:	2b0a      	cmp	r3, #10
20000404:	d102      	bne.n	2000040c <out_char+0x34>
        out_char('\r');
20000406:	200d      	movs	r0, #13
20000408:	f7ff ffe6 	bl	200003d8 <out_char>
}
2000040c:	46c0      	nop			; (mov r8, r8)
2000040e:	46bd      	mov	sp, r7
20000410:	b002      	add	sp, #8
20000412:	bd80      	pop	{r7, pc}
20000414:	40011000 	andmi	r1, r1, r0

20000418 <test_char>:

char test_char(void) {
20000418:	b580      	push	{r7, lr}
2000041a:	af00      	add	r7, sp, #0
    // if character arrived at usart1, return it
    if( (USART1->sr & 0x20)==0)
2000041c:	4b07      	ldr	r3, [pc, #28]	; (2000043c <test_char+0x24>)
2000041e:	881b      	ldrh	r3, [r3, #0]
20000420:	b29b      	uxth	r3, r3
20000422:	001a      	movs	r2, r3
20000424:	2320      	movs	r3, #32
20000426:	4013      	ands	r3, r2
20000428:	d101      	bne.n	2000042e <test_char+0x16>
        return 0;
2000042a:	2300      	movs	r3, #0
2000042c:	e003      	b.n	20000436 <test_char+0x1e>
    return (char) USART1->dr;
2000042e:	4b03      	ldr	r3, [pc, #12]	; (2000043c <test_char+0x24>)
20000430:	889b      	ldrh	r3, [r3, #4]
20000432:	b29b      	uxth	r3, r3
20000434:	b2db      	uxtb	r3, r3
}
20000436:	0018      	movs	r0, r3
20000438:	46bd      	mov	sp, r7
2000043a:	bd80      	pop	{r7, pc}
2000043c:	40011000 	andmi	r1, r1, r0

20000440 <_getchar>:

char _getchar(void) {
20000440:	b580      	push	{r7, lr}
20000442:	af00      	add	r7, sp, #0
    // wait until character arrived at usart1, then return it
    while( (USART1->sr & 0x20)==0);
20000444:	46c0      	nop			; (mov r8, r8)
20000446:	4b07      	ldr	r3, [pc, #28]	; (20000464 <_getchar+0x24>)
20000448:	881b      	ldrh	r3, [r3, #0]
2000044a:	b29b      	uxth	r3, r3
2000044c:	001a      	movs	r2, r3
2000044e:	2320      	movs	r3, #32
20000450:	4013      	ands	r3, r2
20000452:	d0f8      	beq.n	20000446 <_getchar+0x6>
    return (char) USART1->dr;
20000454:	4b03      	ldr	r3, [pc, #12]	; (20000464 <_getchar+0x24>)
20000456:	889b      	ldrh	r3, [r3, #4]
20000458:	b29b      	uxth	r3, r3
2000045a:	b2db      	uxtb	r3, r3
}
2000045c:	0018      	movs	r0, r3
2000045e:	46bd      	mov	sp, r7
20000460:	bd80      	pop	{r7, pc}
20000462:	46c0      	nop			; (mov r8, r8)
20000464:	40011000 	andmi	r1, r1, r0

20000468 <print>:

void print(char* s){
20000468:	b580      	push	{r7, lr}
2000046a:	b082      	sub	sp, #8
2000046c:	af00      	add	r7, sp, #0
2000046e:	6078      	str	r0, [r7, #4]
    while (*s != '\0')
20000470:	e006      	b.n	20000480 <print+0x18>
        out_char(*(s++));
20000472:	687b      	ldr	r3, [r7, #4]
20000474:	1c5a      	adds	r2, r3, #1
20000476:	607a      	str	r2, [r7, #4]
20000478:	781b      	ldrb	r3, [r3, #0]
2000047a:	0018      	movs	r0, r3
2000047c:	f7ff ffac 	bl	200003d8 <out_char>
    while (*s != '\0')
20000480:	687b      	ldr	r3, [r7, #4]
20000482:	781b      	ldrb	r3, [r3, #0]
20000484:	2b00      	cmp	r3, #0
20000486:	d1f4      	bne.n	20000472 <print+0xa>
20000488:	46c0      	nop			; (mov r8, r8)
2000048a:	46c0      	nop			; (mov r8, r8)
2000048c:	46bd      	mov	sp, r7
2000048e:	b002      	add	sp, #8
20000490:	bd80      	pop	{r7, pc}
20000492:	46c0      	nop			; (mov r8, r8)

20000494 <Init_GPIO>:
UltraSonicSensor ultraSonicSensor = {1, GPIOD, GPIO_Pin_0, GPIO_Pin_1,0, 50};


// Configration of GPIO pins and ports

void Init_GPIO(void){
20000494:	b580      	push	{r7, lr}
20000496:	b082      	sub	sp, #8
20000498:	af00      	add	r7, sp, #0
	 
	 GPIO_InitTypeDef GPIOInit;
	 GPIO_StructInit(&GPIOInit);
2000049a:	003b      	movs	r3, r7
2000049c:	0018      	movs	r0, r3
2000049e:	f003 fa5e 	bl	2000395e <GPIO_StructInit>
	 GPIOInit.GPIO_Pin = ultraSonicSensor.Trig_Pin;
200004a2:	4b1a      	ldr	r3, [pc, #104]	; (2000050c <Init_GPIO+0x78>)
200004a4:	891b      	ldrh	r3, [r3, #8]
200004a6:	001a      	movs	r2, r3
200004a8:	003b      	movs	r3, r7
200004aa:	601a      	str	r2, [r3, #0]
	 GPIOInit.GPIO_PuPd = GPIO_PuPd_DOWN;
200004ac:	003b      	movs	r3, r7
200004ae:	2202      	movs	r2, #2
200004b0:	71da      	strb	r2, [r3, #7]
	 GPIOInit.GPIO_OType = GPIO_OType_PP;
200004b2:	003b      	movs	r3, r7
200004b4:	2200      	movs	r2, #0
200004b6:	719a      	strb	r2, [r3, #6]
	 GPIOInit.GPIO_Mode = GPIO_Mode_OUT;
200004b8:	003b      	movs	r3, r7
200004ba:	2201      	movs	r2, #1
200004bc:	711a      	strb	r2, [r3, #4]
	 GPIO_Init(ultraSonicSensor.GPIOUnit,&GPIOInit);
200004be:	4b13      	ldr	r3, [pc, #76]	; (2000050c <Init_GPIO+0x78>)
200004c0:	685b      	ldr	r3, [r3, #4]
200004c2:	003a      	movs	r2, r7
200004c4:	0011      	movs	r1, r2
200004c6:	0018      	movs	r0, r3
200004c8:	f003 f9bc 	bl	20003844 <GPIO_Init>
	 
	 GPIO_StructInit(&GPIOInit);
200004cc:	003b      	movs	r3, r7
200004ce:	0018      	movs	r0, r3
200004d0:	f003 fa45 	bl	2000395e <GPIO_StructInit>
	 GPIOInit.GPIO_Pin = ultraSonicSensor.Echo_Pin | vibrationSensor.Vibration_Pin;
200004d4:	4b0d      	ldr	r3, [pc, #52]	; (2000050c <Init_GPIO+0x78>)
200004d6:	895a      	ldrh	r2, [r3, #10]
200004d8:	4b0d      	ldr	r3, [pc, #52]	; (20000510 <Init_GPIO+0x7c>)
200004da:	891b      	ldrh	r3, [r3, #8]
200004dc:	4313      	orrs	r3, r2
200004de:	b29b      	uxth	r3, r3
200004e0:	001a      	movs	r2, r3
200004e2:	003b      	movs	r3, r7
200004e4:	601a      	str	r2, [r3, #0]
	 GPIOInit.GPIO_PuPd = GPIO_PuPd_DOWN;
200004e6:	003b      	movs	r3, r7
200004e8:	2202      	movs	r2, #2
200004ea:	71da      	strb	r2, [r3, #7]
	 GPIOInit.GPIO_OType = GPIO_OType_PP;
200004ec:	003b      	movs	r3, r7
200004ee:	2200      	movs	r2, #0
200004f0:	719a      	strb	r2, [r3, #6]
	 GPIOInit.GPIO_Mode = GPIO_Mode_IN;
200004f2:	003b      	movs	r3, r7
200004f4:	2200      	movs	r2, #0
200004f6:	711a      	strb	r2, [r3, #4]
	 GPIO_Init(GPIOD,&GPIOInit);
200004f8:	003b      	movs	r3, r7
200004fa:	4a06      	ldr	r2, [pc, #24]	; (20000514 <Init_GPIO+0x80>)
200004fc:	0019      	movs	r1, r3
200004fe:	0010      	movs	r0, r2
20000500:	f003 f9a0 	bl	20003844 <GPIO_Init>
	 
} 
20000504:	46c0      	nop			; (mov r8, r8)
20000506:	46bd      	mov	sp, r7
20000508:	b002      	add	sp, #8
2000050a:	bd80      	pop	{r7, pc}
2000050c:	20003f2c 	andcs	r3, r0, ip, lsr #30
20000510:	20003f20 	andcs	r3, r0, r0, lsr #30
20000514:	40020c00 	andmi	r0, r2, r0, lsl #24

20000518 <TIM_Configration>:

// Configration of timer on TIM2

void TIM_Configration(void){
20000518:	b580      	push	{r7, lr}
2000051a:	b084      	sub	sp, #16
2000051c:	af00      	add	r7, sp, #0
	 
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
2000051e:	2101      	movs	r1, #1
20000520:	2001      	movs	r0, #1
20000522:	f000 fda3 	bl	2000106c <RCC_APB1PeriphClockCmd>
	TIM_TimeBaseInitTypeDef TIM_timer;
	TIM_timer.TIM_Prescaler = 0x0;
20000526:	1d3b      	adds	r3, r7, #4
20000528:	2200      	movs	r2, #0
2000052a:	801a      	strh	r2, [r3, #0]
	TIM_timer.TIM_Period = 0xFFFFFFFF;
2000052c:	1d3b      	adds	r3, r7, #4
2000052e:	2201      	movs	r2, #1
20000530:	4252      	negs	r2, r2
20000532:	605a      	str	r2, [r3, #4]
	TIM_timer.TIM_ClockDivision = TIM_CKD_DIV1;
20000534:	1d3b      	adds	r3, r7, #4
20000536:	2200      	movs	r2, #0
20000538:	811a      	strh	r2, [r3, #8]
	TIM_timer.TIM_CounterMode = TIM_CounterMode_Up;
2000053a:	1d3b      	adds	r3, r7, #4
2000053c:	2200      	movs	r2, #0
2000053e:	805a      	strh	r2, [r3, #2]
	TIM_TimeBaseInit(TIM2, &TIM_timer);
20000540:	1d3a      	adds	r2, r7, #4
20000542:	2380      	movs	r3, #128	; 0x80
20000544:	05db      	lsls	r3, r3, #23
20000546:	0011      	movs	r1, r2
20000548:	0018      	movs	r0, r3
2000054a:	f001 f8bf 	bl	200016cc <TIM_TimeBaseInit>
	TIM_Cmd(TIM2, ENABLE);
2000054e:	2380      	movs	r3, #128	; 0x80
20000550:	05db      	lsls	r3, r3, #23
20000552:	2101      	movs	r1, #1
20000554:	0018      	movs	r0, r3
20000556:	f001 fa51 	bl	200019fc <TIM_Cmd>
}
2000055a:	46c0      	nop			; (mov r8, r8)
2000055c:	46bd      	mov	sp, r7
2000055e:	b004      	add	sp, #16
20000560:	bd80      	pop	{r7, pc}

20000562 <vibration_irq_handler>:
 

void vibration_irq_handler (void){
20000562:	b580      	push	{r7, lr}
20000564:	af00      	add	r7, sp, #0
	 if (!GPIO_ReadInputDataBit(vibrationSensor.GPIOUnit, vibrationSensor.Vibration_Pin)){
20000566:	4b0a      	ldr	r3, [pc, #40]	; (20000590 <vibration_irq_handler+0x2e>)
20000568:	685a      	ldr	r2, [r3, #4]
2000056a:	4b09      	ldr	r3, [pc, #36]	; (20000590 <vibration_irq_handler+0x2e>)
2000056c:	891b      	ldrh	r3, [r3, #8]
2000056e:	0019      	movs	r1, r3
20000570:	0010      	movs	r0, r2
20000572:	f003 fa30 	bl	200039d6 <GPIO_ReadInputDataBit>
20000576:	1e03      	subs	r3, r0, #0
20000578:	d103      	bne.n	20000582 <vibration_irq_handler+0x20>
		 print("vib");
2000057a:	4b06      	ldr	r3, [pc, #24]	; (20000594 <vibration_irq_handler+0x32>)
2000057c:	0018      	movs	r0, r3
2000057e:	f7ff ff73 	bl	20000468 <print>
		 }
		 
	 EXTI_ClearFlag(EXTI_Line4);
20000582:	2010      	movs	r0, #16
20000584:	f7ff feee 	bl	20000364 <EXTI_ClearFlag>
}
20000588:	46c0      	nop			; (mov r8, r8)
2000058a:	46bd      	mov	sp, r7
2000058c:	bd80      	pop	{r7, pc}
2000058e:	46c0      	nop			; (mov r8, r8)
20000590:	20003f20 	andcs	r3, r0, r0, lsr #30
20000594:	20003f50 	andcs	r3, r0, r0, asr pc

20000598 <UltraSonic_irq_handler>:
 
 
 
void UltraSonic_irq_handler(void){
20000598:	b580      	push	{r7, lr}
2000059a:	af00      	add	r7, sp, #0
	 print("\n");
2000059c:	4b0a      	ldr	r3, [pc, #40]	; (200005c8 <UltraSonic_irq_handler+0x30>)
2000059e:	0018      	movs	r0, r3
200005a0:	f7ff ff62 	bl	20000468 <print>
	 print(itoa (ultraSonicSensor.Distance,a,10));
200005a4:	4b09      	ldr	r3, [pc, #36]	; (200005cc <UltraSonic_irq_handler+0x34>)
200005a6:	68db      	ldr	r3, [r3, #12]
200005a8:	4909      	ldr	r1, [pc, #36]	; (200005d0 <UltraSonic_irq_handler+0x38>)
200005aa:	220a      	movs	r2, #10
200005ac:	0018      	movs	r0, r3
200005ae:	f003 fc6f 	bl	20003e90 <itoa>
200005b2:	0003      	movs	r3, r0
200005b4:	0018      	movs	r0, r3
200005b6:	f7ff ff57 	bl	20000468 <print>
	 if (ultraSonicSensor.Distance <ultraSonicSensor.Threshold){
		 //print("alarm");
		 //print("\n");
		 }
		 
	  EXTI_ClearFlag(EXTI_Line1);
200005ba:	2002      	movs	r0, #2
200005bc:	f7ff fed2 	bl	20000364 <EXTI_ClearFlag>
}
200005c0:	46c0      	nop			; (mov r8, r8)
200005c2:	46bd      	mov	sp, r7
200005c4:	bd80      	pop	{r7, pc}
200005c6:	46c0      	nop			; (mov r8, r8)
200005c8:	20003f54 	andcs	r3, r0, r4, asr pc
200005cc:	20003f2c 	andcs	r3, r0, ip, lsr #30
200005d0:	20003f94 	mulcs	r0, r4, pc	; <UNPREDICTABLE>

200005d4 <EXTIInit>:
 
 
void EXTIInit(void){
200005d4:	b590      	push	{r4, r7, lr}
200005d6:	b085      	sub	sp, #20
200005d8:	af00      	add	r7, sp, #0
	  
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
200005da:	2380      	movs	r3, #128	; 0x80
200005dc:	01db      	lsls	r3, r3, #7
200005de:	2101      	movs	r1, #1
200005e0:	0018      	movs	r0, r3
200005e2:	f000 fd63 	bl	200010ac <RCC_APB2PeriphClockCmd>
	EXTI_InitTypeDef exti_init;
	 
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOD, EXTI_PinSource4);
200005e6:	2104      	movs	r1, #4
200005e8:	2003      	movs	r0, #3
200005ea:	f003 fb2b 	bl	20003c44 <SYSCFG_EXTILineConfig>
    SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOD, EXTI_PinSource1);
200005ee:	2101      	movs	r1, #1
200005f0:	2003      	movs	r0, #3
200005f2:	f003 fb27 	bl	20003c44 <SYSCFG_EXTILineConfig>
	 
	exti_init.EXTI_Line =  EXTI_Line1;      //Configration of EXTI for Trig pin
200005f6:	2108      	movs	r1, #8
200005f8:	187b      	adds	r3, r7, r1
200005fa:	2202      	movs	r2, #2
200005fc:	601a      	str	r2, [r3, #0]
    exti_init.EXTI_Mode = EXTI_Mode_Interrupt;
200005fe:	187b      	adds	r3, r7, r1
20000600:	2200      	movs	r2, #0
20000602:	711a      	strb	r2, [r3, #4]
    exti_init.EXTI_Trigger = EXTI_Trigger_Falling;
20000604:	187b      	adds	r3, r7, r1
20000606:	220c      	movs	r2, #12
20000608:	715a      	strb	r2, [r3, #5]
    exti_init.EXTI_LineCmd = ENABLE;
2000060a:	187b      	adds	r3, r7, r1
2000060c:	2201      	movs	r2, #1
2000060e:	719a      	strb	r2, [r3, #6]
    EXTI_Init(&exti_init);
20000610:	000c      	movs	r4, r1
20000612:	187b      	adds	r3, r7, r1
20000614:	0018      	movs	r0, r3
20000616:	f7ff fdf3 	bl	20000200 <EXTI_Init>
	
	exti_init.EXTI_Line = EXTI_Line4 ;      //Configration of EXTI for Vibration pin
2000061a:	0021      	movs	r1, r4
2000061c:	187b      	adds	r3, r7, r1
2000061e:	2210      	movs	r2, #16
20000620:	601a      	str	r2, [r3, #0]
    exti_init.EXTI_Mode = EXTI_Mode_Interrupt;
20000622:	187b      	adds	r3, r7, r1
20000624:	2200      	movs	r2, #0
20000626:	711a      	strb	r2, [r3, #4]
    exti_init.EXTI_Trigger = EXTI_Trigger_Falling;
20000628:	187b      	adds	r3, r7, r1
2000062a:	220c      	movs	r2, #12
2000062c:	715a      	strb	r2, [r3, #5]
    exti_init.EXTI_LineCmd = ENABLE;
2000062e:	187b      	adds	r3, r7, r1
20000630:	2201      	movs	r2, #1
20000632:	719a      	strb	r2, [r3, #6]
    EXTI_Init(&exti_init);
20000634:	187b      	adds	r3, r7, r1
20000636:	0018      	movs	r0, r3
20000638:	f7ff fde2 	bl	20000200 <EXTI_Init>
	
	NVIC_InitTypeDef nvic_init;
    NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
2000063c:	23a0      	movs	r3, #160	; 0xa0
2000063e:	00db      	lsls	r3, r3, #3
20000640:	0018      	movs	r0, r3
20000642:	f7ff fce5 	bl	20000010 <NVIC_PriorityGroupConfig>
    
    nvic_init.NVIC_IRQChannel = EXTI1_IRQn;        //Configration of NVIC for UltraSonic_irq_handler
20000646:	1d3b      	adds	r3, r7, #4
20000648:	2207      	movs	r2, #7
2000064a:	701a      	strb	r2, [r3, #0]
    nvic_init.NVIC_IRQChannelPreemptionPriority = 0x00;
2000064c:	1d3b      	adds	r3, r7, #4
2000064e:	2200      	movs	r2, #0
20000650:	705a      	strb	r2, [r3, #1]
    nvic_init.NVIC_IRQChannelSubPriority = 0x00;
20000652:	1d3b      	adds	r3, r7, #4
20000654:	2200      	movs	r2, #0
20000656:	709a      	strb	r2, [r3, #2]
    nvic_init.NVIC_IRQChannelCmd = ENABLE;
20000658:	1d3b      	adds	r3, r7, #4
2000065a:	2201      	movs	r2, #1
2000065c:	70da      	strb	r2, [r3, #3]
    NVIC_Init(&nvic_init);
2000065e:	1d3b      	adds	r3, r7, #4
20000660:	0018      	movs	r0, r3
20000662:	f7ff fce7 	bl	20000034 <NVIC_Init>
	
	*((void (**) (void)) 0x2001C05C) = UltraSonic_irq_handler;
20000666:	4b0d      	ldr	r3, [pc, #52]	; (2000069c <EXTIInit+0xc8>)
20000668:	4a0d      	ldr	r2, [pc, #52]	; (200006a0 <EXTIInit+0xcc>)
2000066a:	601a      	str	r2, [r3, #0]
    
	nvic_init.NVIC_IRQChannel = EXTI4_IRQn;          //Configration of NVIC for vibration_irq_handler
2000066c:	1d3b      	adds	r3, r7, #4
2000066e:	220a      	movs	r2, #10
20000670:	701a      	strb	r2, [r3, #0]
    nvic_init.NVIC_IRQChannelPreemptionPriority = 0x00;
20000672:	1d3b      	adds	r3, r7, #4
20000674:	2200      	movs	r2, #0
20000676:	705a      	strb	r2, [r3, #1]
    nvic_init.NVIC_IRQChannelSubPriority = 0x00;
20000678:	1d3b      	adds	r3, r7, #4
2000067a:	2200      	movs	r2, #0
2000067c:	709a      	strb	r2, [r3, #2]
    nvic_init.NVIC_IRQChannelCmd = ENABLE;
2000067e:	1d3b      	adds	r3, r7, #4
20000680:	2201      	movs	r2, #1
20000682:	70da      	strb	r2, [r3, #3]
    NVIC_Init(&nvic_init);
20000684:	1d3b      	adds	r3, r7, #4
20000686:	0018      	movs	r0, r3
20000688:	f7ff fcd4 	bl	20000034 <NVIC_Init>
	
   *((void (**) (void)) 0x2001C068) = vibration_irq_handler;
2000068c:	4b05      	ldr	r3, [pc, #20]	; (200006a4 <EXTIInit+0xd0>)
2000068e:	4a06      	ldr	r2, [pc, #24]	; (200006a8 <EXTIInit+0xd4>)
20000690:	601a      	str	r2, [r3, #0]
	
 
   
	 
}
20000692:	46c0      	nop			; (mov r8, r8)
20000694:	46bd      	mov	sp, r7
20000696:	b005      	add	sp, #20
20000698:	bd90      	pop	{r4, r7, pc}
2000069a:	46c0      	nop			; (mov r8, r8)
2000069c:	2001c05c 	andcs	ip, r1, ip, asr r0
200006a0:	20000599 	mulcs	r0, r9, r5
200006a4:	2001c068 	andcs	ip, r1, r8, rrx
200006a8:	20000563 	andcs	r0, r0, r3, ror #10

200006ac <check_distance>:
 
 void check_distance(void){
200006ac:	b580      	push	{r7, lr}
200006ae:	af00      	add	r7, sp, #0
	 TIM_SetCounter(TIM2,0);				// 65 mikroseconds delay between measurments 
200006b0:	2380      	movs	r3, #128	; 0x80
200006b2:	05db      	lsls	r3, r3, #23
200006b4:	2100      	movs	r1, #0
200006b6:	0018      	movs	r0, r3
200006b8:	f001 f8d8 	bl	2000186c <TIM_SetCounter>
	while(TIM_GetCounter(TIM2) < 84 * 60000);
200006bc:	46c0      	nop			; (mov r8, r8)
200006be:	2380      	movs	r3, #128	; 0x80
200006c0:	05db      	lsls	r3, r3, #23
200006c2:	0018      	movs	r0, r3
200006c4:	f001 f8ea 	bl	2000189c <TIM_GetCounter>
200006c8:	0003      	movs	r3, r0
200006ca:	4a39      	ldr	r2, [pc, #228]	; (200007b0 <check_distance+0x104>)
200006cc:	4293      	cmp	r3, r2
200006ce:	d9f6      	bls.n	200006be <check_distance+0x12>
	
	GPIO_SetBits(GPIOD, GPIO_Pin_0); // Set trigger pin	
200006d0:	4b38      	ldr	r3, [pc, #224]	; (200007b4 <check_distance+0x108>)
200006d2:	2101      	movs	r1, #1
200006d4:	0018      	movs	r0, r3
200006d6:	f003 f9d4 	bl	20003a82 <GPIO_SetBits>

	TIM_SetCounter(TIM2,0);				// 10 mikroseconds delay
200006da:	2380      	movs	r3, #128	; 0x80
200006dc:	05db      	lsls	r3, r3, #23
200006de:	2100      	movs	r1, #0
200006e0:	0018      	movs	r0, r3
200006e2:	f001 f8c3 	bl	2000186c <TIM_SetCounter>
	while(TIM_GetCounter(TIM2) < 84 * 10);
200006e6:	46c0      	nop			; (mov r8, r8)
200006e8:	2380      	movs	r3, #128	; 0x80
200006ea:	05db      	lsls	r3, r3, #23
200006ec:	0018      	movs	r0, r3
200006ee:	f001 f8d5 	bl	2000189c <TIM_GetCounter>
200006f2:	0002      	movs	r2, r0
200006f4:	23d2      	movs	r3, #210	; 0xd2
200006f6:	009b      	lsls	r3, r3, #2
200006f8:	429a      	cmp	r2, r3
200006fa:	d3f5      	bcc.n	200006e8 <check_distance+0x3c>
	
	GPIO_ResetBits(GPIOD, GPIO_Pin_0);	// Reset trigger pin
200006fc:	4b2d      	ldr	r3, [pc, #180]	; (200007b4 <check_distance+0x108>)
200006fe:	2101      	movs	r1, #1
20000700:	0018      	movs	r0, r3
20000702:	f003 f9cd 	bl	20003aa0 <GPIO_ResetBits>
	
	// wait for echo 
	
	while(!(GPIO_ReadInputDataBit(ultraSonicSensor.GPIOUnit, ultraSonicSensor.Echo_Pin))) {
20000706:	e007      	b.n	20000718 <check_distance+0x6c>
		echo_start = TIM_GetCounter(TIM2);
20000708:	2380      	movs	r3, #128	; 0x80
2000070a:	05db      	lsls	r3, r3, #23
2000070c:	0018      	movs	r0, r3
2000070e:	f001 f8c5 	bl	2000189c <TIM_GetCounter>
20000712:	0002      	movs	r2, r0
20000714:	4b28      	ldr	r3, [pc, #160]	; (200007b8 <check_distance+0x10c>)
20000716:	601a      	str	r2, [r3, #0]
	while(!(GPIO_ReadInputDataBit(ultraSonicSensor.GPIOUnit, ultraSonicSensor.Echo_Pin))) {
20000718:	4b28      	ldr	r3, [pc, #160]	; (200007bc <check_distance+0x110>)
2000071a:	685a      	ldr	r2, [r3, #4]
2000071c:	4b27      	ldr	r3, [pc, #156]	; (200007bc <check_distance+0x110>)
2000071e:	895b      	ldrh	r3, [r3, #10]
20000720:	0019      	movs	r1, r3
20000722:	0010      	movs	r0, r2
20000724:	f003 f957 	bl	200039d6 <GPIO_ReadInputDataBit>
20000728:	1e03      	subs	r3, r0, #0
2000072a:	d0ed      	beq.n	20000708 <check_distance+0x5c>
	}
	
	while(GPIO_ReadInputDataBit(ultraSonicSensor.GPIOUnit, ultraSonicSensor.Echo_Pin)) {
2000072c:	e007      	b.n	2000073e <check_distance+0x92>
		echo_end = TIM_GetCounter(TIM2);
2000072e:	2380      	movs	r3, #128	; 0x80
20000730:	05db      	lsls	r3, r3, #23
20000732:	0018      	movs	r0, r3
20000734:	f001 f8b2 	bl	2000189c <TIM_GetCounter>
20000738:	0002      	movs	r2, r0
2000073a:	4b21      	ldr	r3, [pc, #132]	; (200007c0 <check_distance+0x114>)
2000073c:	601a      	str	r2, [r3, #0]
	while(GPIO_ReadInputDataBit(ultraSonicSensor.GPIOUnit, ultraSonicSensor.Echo_Pin)) {
2000073e:	4b1f      	ldr	r3, [pc, #124]	; (200007bc <check_distance+0x110>)
20000740:	685a      	ldr	r2, [r3, #4]
20000742:	4b1e      	ldr	r3, [pc, #120]	; (200007bc <check_distance+0x110>)
20000744:	895b      	ldrh	r3, [r3, #10]
20000746:	0019      	movs	r1, r3
20000748:	0010      	movs	r0, r2
2000074a:	f003 f944 	bl	200039d6 <GPIO_ReadInputDataBit>
2000074e:	1e03      	subs	r3, r0, #0
20000750:	d1ed      	bne.n	2000072e <check_distance+0x82>
		
	}
	
	// Correction for clock during measurment.
	if(echo_start >= echo_end){	
20000752:	4b19      	ldr	r3, [pc, #100]	; (200007b8 <check_distance+0x10c>)
20000754:	681a      	ldr	r2, [r3, #0]
20000756:	4b1a      	ldr	r3, [pc, #104]	; (200007c0 <check_distance+0x114>)
20000758:	681b      	ldr	r3, [r3, #0]
2000075a:	429a      	cmp	r2, r3
2000075c:	d30e      	bcc.n	2000077c <check_distance+0xd0>
		echo_time = (echo_end + (0xFFFFFFFF - echo_start)) / 84;
2000075e:	4b18      	ldr	r3, [pc, #96]	; (200007c0 <check_distance+0x114>)
20000760:	681a      	ldr	r2, [r3, #0]
20000762:	4b15      	ldr	r3, [pc, #84]	; (200007b8 <check_distance+0x10c>)
20000764:	681b      	ldr	r3, [r3, #0]
20000766:	1ad3      	subs	r3, r2, r3
20000768:	3b01      	subs	r3, #1
2000076a:	2154      	movs	r1, #84	; 0x54
2000076c:	0018      	movs	r0, r3
2000076e:	f003 faeb 	bl	20003d48 <__udivsi3>
20000772:	0003      	movs	r3, r0
20000774:	001a      	movs	r2, r3
20000776:	4b13      	ldr	r3, [pc, #76]	; (200007c4 <check_distance+0x118>)
20000778:	601a      	str	r2, [r3, #0]
2000077a:	e00c      	b.n	20000796 <check_distance+0xea>
	} else{
		echo_time = (echo_end - echo_start) / 84;
2000077c:	4b10      	ldr	r3, [pc, #64]	; (200007c0 <check_distance+0x114>)
2000077e:	681a      	ldr	r2, [r3, #0]
20000780:	4b0d      	ldr	r3, [pc, #52]	; (200007b8 <check_distance+0x10c>)
20000782:	681b      	ldr	r3, [r3, #0]
20000784:	1ad3      	subs	r3, r2, r3
20000786:	2154      	movs	r1, #84	; 0x54
20000788:	0018      	movs	r0, r3
2000078a:	f003 fadd 	bl	20003d48 <__udivsi3>
2000078e:	0003      	movs	r3, r0
20000790:	001a      	movs	r2, r3
20000792:	4b0c      	ldr	r3, [pc, #48]	; (200007c4 <check_distance+0x118>)
20000794:	601a      	str	r2, [r3, #0]
	}
	ultraSonicSensor.Distance = echo_time / 58;
20000796:	4b0b      	ldr	r3, [pc, #44]	; (200007c4 <check_distance+0x118>)
20000798:	681b      	ldr	r3, [r3, #0]
2000079a:	213a      	movs	r1, #58	; 0x3a
2000079c:	0018      	movs	r0, r3
2000079e:	f003 fad3 	bl	20003d48 <__udivsi3>
200007a2:	0003      	movs	r3, r0
200007a4:	001a      	movs	r2, r3
200007a6:	4b05      	ldr	r3, [pc, #20]	; (200007bc <check_distance+0x110>)
200007a8:	60da      	str	r2, [r3, #12]
 }
200007aa:	46c0      	nop			; (mov r8, r8)
200007ac:	46bd      	mov	sp, r7
200007ae:	bd80      	pop	{r7, pc}
200007b0:	004ce77f 	subeq	lr, ip, pc, ror r7
200007b4:	40020c00 	andmi	r0, r2, r0, lsl #24
200007b8:	20003f90 	mulcs	r0, r0, pc	; <UNPREDICTABLE>
200007bc:	20003f2c 	andcs	r3, r0, ip, lsr #30
200007c0:	20003f8c 	andcs	r3, r0, ip, lsl #31
200007c4:	20003f88 	andcs	r3, r0, r8, lsl #31

200007c8 <main>:
 
 


void main(void)
{
200007c8:	b580      	push	{r7, lr}
200007ca:	af00      	add	r7, sp, #0
	
	print("\nwelcome");
200007cc:	4b0a      	ldr	r3, [pc, #40]	; (200007f8 <main+0x30>)
200007ce:	0018      	movs	r0, r3
200007d0:	f7ff fe4a 	bl	20000468 <print>
	
	Init_GPIO();
200007d4:	f7ff fe5e 	bl	20000494 <Init_GPIO>
	TIM_Configration();
200007d8:	f7ff fe9e 	bl	20000518 <TIM_Configration>
	EXTIInit();
200007dc:	f7ff fefa 	bl	200005d4 <EXTIInit>
	GPIO_ResetBits(ultraSonicSensor.GPIOUnit, ultraSonicSensor.Trig_Pin);      //Reset trig pin
200007e0:	4b06      	ldr	r3, [pc, #24]	; (200007fc <main+0x34>)
200007e2:	685a      	ldr	r2, [r3, #4]
200007e4:	4b05      	ldr	r3, [pc, #20]	; (200007fc <main+0x34>)
200007e6:	891b      	ldrh	r3, [r3, #8]
200007e8:	0019      	movs	r1, r3
200007ea:	0010      	movs	r0, r2
200007ec:	f003 f958 	bl	20003aa0 <GPIO_ResetBits>
	
	
	while(1){
	
	check_distance();
200007f0:	f7ff ff5c 	bl	200006ac <check_distance>
200007f4:	e7fc      	b.n	200007f0 <main+0x28>
200007f6:	46c0      	nop			; (mov r8, r8)
200007f8:	20003f58 	andcs	r3, r0, r8, asr pc
200007fc:	20003f2c 	andcs	r3, r0, ip, lsr #30

20000800 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
20000800:	b580      	push	{r7, lr}
20000802:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
20000804:	4b14      	ldr	r3, [pc, #80]	; (20000858 <RCC_DeInit+0x58>)
20000806:	681a      	ldr	r2, [r3, #0]
20000808:	4b13      	ldr	r3, [pc, #76]	; (20000858 <RCC_DeInit+0x58>)
2000080a:	2101      	movs	r1, #1
2000080c:	430a      	orrs	r2, r1
2000080e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
20000810:	4b11      	ldr	r3, [pc, #68]	; (20000858 <RCC_DeInit+0x58>)
20000812:	2200      	movs	r2, #0
20000814:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42xxx/43xxx/446xx/469xx/479xx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
20000816:	4b10      	ldr	r3, [pc, #64]	; (20000858 <RCC_DeInit+0x58>)
20000818:	681a      	ldr	r2, [r3, #0]
2000081a:	4b0f      	ldr	r3, [pc, #60]	; (20000858 <RCC_DeInit+0x58>)
2000081c:	490f      	ldr	r1, [pc, #60]	; (2000085c <RCC_DeInit+0x5c>)
2000081e:	400a      	ands	r2, r1
20000820:	601a      	str	r2, [r3, #0]
  
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
20000822:	4b0d      	ldr	r3, [pc, #52]	; (20000858 <RCC_DeInit+0x58>)
20000824:	4a0e      	ldr	r2, [pc, #56]	; (20000860 <RCC_DeInit+0x60>)
20000826:	605a      	str	r2, [r3, #4]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F413_423xx) || defined(STM32F469_479xx)  
  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
20000828:	4a0b      	ldr	r2, [pc, #44]	; (20000858 <RCC_DeInit+0x58>)
2000082a:	2384      	movs	r3, #132	; 0x84
2000082c:	490d      	ldr	r1, [pc, #52]	; (20000864 <RCC_DeInit+0x64>)
2000082e:	50d1      	str	r1, [r2, r3]
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE || STM32F446xx || STM32F413_423xx || STM32F469_479xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx) 
  /* Reset PLLSAICFGR register, only available for STM32F42xxx/43xxx/446xx/469xx/479xx devices */
  RCC->PLLSAICFGR = 0x24003000;
20000830:	4a09      	ldr	r2, [pc, #36]	; (20000858 <RCC_DeInit+0x58>)
20000832:	2388      	movs	r3, #136	; 0x88
20000834:	490c      	ldr	r1, [pc, #48]	; (20000868 <RCC_DeInit+0x68>)
20000836:	50d1      	str	r1, [r2, r3]
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F446xx || STM32F469_479xx */
  
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
20000838:	4b07      	ldr	r3, [pc, #28]	; (20000858 <RCC_DeInit+0x58>)
2000083a:	681a      	ldr	r2, [r3, #0]
2000083c:	4b06      	ldr	r3, [pc, #24]	; (20000858 <RCC_DeInit+0x58>)
2000083e:	490b      	ldr	r1, [pc, #44]	; (2000086c <RCC_DeInit+0x6c>)
20000840:	400a      	ands	r2, r1
20000842:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
20000844:	4b04      	ldr	r3, [pc, #16]	; (20000858 <RCC_DeInit+0x58>)
20000846:	2200      	movs	r2, #0
20000848:	60da      	str	r2, [r3, #12]

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx and STM32F413_423xx devices */
  RCC->DCKCFGR = 0x00000000;
2000084a:	4a03      	ldr	r2, [pc, #12]	; (20000858 <RCC_DeInit+0x58>)
2000084c:	238c      	movs	r3, #140	; 0x8c
2000084e:	2100      	movs	r1, #0
20000850:	50d1      	str	r1, [r2, r3]
  
#if defined(STM32F410xx) || defined(STM32F413_423xx)
  /* Disable LPTIM and FMPI2C clock prescalers selection, only available for STM32F410xx and STM32F413_423xx devices */
  RCC->DCKCFGR2 = 0x00000000;
#endif /* STM32F410xx || STM32F413_423xx */  
}
20000852:	46c0      	nop			; (mov r8, r8)
20000854:	46bd      	mov	sp, r7
20000856:	bd80      	pop	{r7, pc}
20000858:	40023800 	andmi	r3, r2, r0, lsl #16
2000085c:	eaf6ffff 	b	1fdc0860 <startup-0x23f7a0>
20000860:	24003010 	strcs	r3, [r0], #-16
20000864:	20003000 	andcs	r3, r0, r0
20000868:	24003000 	strcs	r3, [r0], #-0
2000086c:	fffbffff 			; <UNDEFINED> instruction: 0xfffbffff

20000870 <RCC_HSEConfig>:
  *            @arg RCC_HSE_ON: turn ON the HSE oscillator
  *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint8_t RCC_HSE)
{
20000870:	b580      	push	{r7, lr}
20000872:	b082      	sub	sp, #8
20000874:	af00      	add	r7, sp, #0
20000876:	0002      	movs	r2, r0
20000878:	1dfb      	adds	r3, r7, #7
2000087a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
2000087c:	4b05      	ldr	r3, [pc, #20]	; (20000894 <RCC_HSEConfig+0x24>)
2000087e:	2200      	movs	r2, #0
20000880:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
20000882:	4a04      	ldr	r2, [pc, #16]	; (20000894 <RCC_HSEConfig+0x24>)
20000884:	1dfb      	adds	r3, r7, #7
20000886:	781b      	ldrb	r3, [r3, #0]
20000888:	7013      	strb	r3, [r2, #0]
}
2000088a:	46c0      	nop			; (mov r8, r8)
2000088c:	46bd      	mov	sp, r7
2000088e:	b002      	add	sp, #8
20000890:	bd80      	pop	{r7, pc}
20000892:	46c0      	nop			; (mov r8, r8)
20000894:	40023802 	andmi	r3, r2, r2, lsl #16

20000898 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
20000898:	b590      	push	{r4, r7, lr}
2000089a:	b083      	sub	sp, #12
2000089c:	af00      	add	r7, sp, #0
  __IO uint32_t startupcounter = 0;
2000089e:	2300      	movs	r3, #0
200008a0:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
200008a2:	1dfb      	adds	r3, r7, #7
200008a4:	2200      	movs	r2, #0
200008a6:	701a      	strb	r2, [r3, #0]
  FlagStatus hsestatus = RESET;
200008a8:	1dbb      	adds	r3, r7, #6
200008aa:	2200      	movs	r2, #0
200008ac:	701a      	strb	r2, [r3, #0]
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
200008ae:	1dbc      	adds	r4, r7, #6
200008b0:	2031      	movs	r0, #49	; 0x31
200008b2:	f000 fda1 	bl	200013f8 <RCC_GetFlagStatus>
200008b6:	0003      	movs	r3, r0
200008b8:	7023      	strb	r3, [r4, #0]
    startupcounter++;
200008ba:	683b      	ldr	r3, [r7, #0]
200008bc:	3301      	adds	r3, #1
200008be:	603b      	str	r3, [r7, #0]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
200008c0:	683a      	ldr	r2, [r7, #0]
200008c2:	23a0      	movs	r3, #160	; 0xa0
200008c4:	01db      	lsls	r3, r3, #7
200008c6:	429a      	cmp	r2, r3
200008c8:	d003      	beq.n	200008d2 <RCC_WaitForHSEStartUp+0x3a>
200008ca:	1dbb      	adds	r3, r7, #6
200008cc:	781b      	ldrb	r3, [r3, #0]
200008ce:	2b00      	cmp	r3, #0
200008d0:	d0ed      	beq.n	200008ae <RCC_WaitForHSEStartUp+0x16>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
200008d2:	2031      	movs	r0, #49	; 0x31
200008d4:	f000 fd90 	bl	200013f8 <RCC_GetFlagStatus>
200008d8:	1e03      	subs	r3, r0, #0
200008da:	d003      	beq.n	200008e4 <RCC_WaitForHSEStartUp+0x4c>
  {
    status = SUCCESS;
200008dc:	1dfb      	adds	r3, r7, #7
200008de:	2201      	movs	r2, #1
200008e0:	701a      	strb	r2, [r3, #0]
200008e2:	e002      	b.n	200008ea <RCC_WaitForHSEStartUp+0x52>
  }
  else
  {
    status = ERROR;
200008e4:	1dfb      	adds	r3, r7, #7
200008e6:	2200      	movs	r2, #0
200008e8:	701a      	strb	r2, [r3, #0]
  }
  return (status);
200008ea:	1dfb      	adds	r3, r7, #7
200008ec:	781b      	ldrb	r3, [r3, #0]
}
200008ee:	0018      	movs	r0, r3
200008f0:	46bd      	mov	sp, r7
200008f2:	b003      	add	sp, #12
200008f4:	bd90      	pop	{r4, r7, pc}

200008f6 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *         This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
200008f6:	b580      	push	{r7, lr}
200008f8:	b084      	sub	sp, #16
200008fa:	af00      	add	r7, sp, #0
200008fc:	0002      	movs	r2, r0
200008fe:	1dfb      	adds	r3, r7, #7
20000900:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0;
20000902:	2300      	movs	r3, #0
20000904:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
20000906:	4b0a      	ldr	r3, [pc, #40]	; (20000930 <RCC_AdjustHSICalibrationValue+0x3a>)
20000908:	681b      	ldr	r3, [r3, #0]
2000090a:	60fb      	str	r3, [r7, #12]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
2000090c:	68fb      	ldr	r3, [r7, #12]
2000090e:	22f8      	movs	r2, #248	; 0xf8
20000910:	4393      	bics	r3, r2
20000912:	60fb      	str	r3, [r7, #12]

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
20000914:	1dfb      	adds	r3, r7, #7
20000916:	781b      	ldrb	r3, [r3, #0]
20000918:	00db      	lsls	r3, r3, #3
2000091a:	68fa      	ldr	r2, [r7, #12]
2000091c:	4313      	orrs	r3, r2
2000091e:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CR = tmpreg;
20000920:	4b03      	ldr	r3, [pc, #12]	; (20000930 <RCC_AdjustHSICalibrationValue+0x3a>)
20000922:	68fa      	ldr	r2, [r7, #12]
20000924:	601a      	str	r2, [r3, #0]
}
20000926:	46c0      	nop			; (mov r8, r8)
20000928:	46bd      	mov	sp, r7
2000092a:	b004      	add	sp, #16
2000092c:	bd80      	pop	{r7, pc}
2000092e:	46c0      	nop			; (mov r8, r8)
20000930:	40023800 	andmi	r3, r2, r0, lsl #16

20000934 <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.  
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
20000934:	b580      	push	{r7, lr}
20000936:	b082      	sub	sp, #8
20000938:	af00      	add	r7, sp, #0
2000093a:	0002      	movs	r2, r0
2000093c:	1dfb      	adds	r3, r7, #7
2000093e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
20000940:	4b03      	ldr	r3, [pc, #12]	; (20000950 <RCC_HSICmd+0x1c>)
20000942:	1dfa      	adds	r2, r7, #7
20000944:	7812      	ldrb	r2, [r2, #0]
20000946:	601a      	str	r2, [r3, #0]
}
20000948:	46c0      	nop			; (mov r8, r8)
2000094a:	46bd      	mov	sp, r7
2000094c:	b002      	add	sp, #8
2000094e:	bd80      	pop	{r7, pc}
20000950:	42470000 	submi	r0, r7, #0

20000954 <RCC_LSEConfig>:
  *            @arg RCC_LSE_ON: turn ON the LSE oscillator
  *            @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
20000954:	b580      	push	{r7, lr}
20000956:	b082      	sub	sp, #8
20000958:	af00      	add	r7, sp, #0
2000095a:	0002      	movs	r2, r0
2000095c:	1dfb      	adds	r3, r7, #7
2000095e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
20000960:	4b0c      	ldr	r3, [pc, #48]	; (20000994 <RCC_LSEConfig+0x40>)
20000962:	2200      	movs	r2, #0
20000964:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
20000966:	4b0b      	ldr	r3, [pc, #44]	; (20000994 <RCC_LSEConfig+0x40>)
20000968:	2200      	movs	r2, #0
2000096a:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
2000096c:	1dfb      	adds	r3, r7, #7
2000096e:	781b      	ldrb	r3, [r3, #0]
20000970:	2b01      	cmp	r3, #1
20000972:	d002      	beq.n	2000097a <RCC_LSEConfig+0x26>
20000974:	2b04      	cmp	r3, #4
20000976:	d004      	beq.n	20000982 <RCC_LSEConfig+0x2e>
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;
    default:
      break;
20000978:	e007      	b.n	2000098a <RCC_LSEConfig+0x36>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
2000097a:	4b06      	ldr	r3, [pc, #24]	; (20000994 <RCC_LSEConfig+0x40>)
2000097c:	2201      	movs	r2, #1
2000097e:	701a      	strb	r2, [r3, #0]
      break;
20000980:	e003      	b.n	2000098a <RCC_LSEConfig+0x36>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
20000982:	4b04      	ldr	r3, [pc, #16]	; (20000994 <RCC_LSEConfig+0x40>)
20000984:	2205      	movs	r2, #5
20000986:	701a      	strb	r2, [r3, #0]
      break;
20000988:	46c0      	nop			; (mov r8, r8)
  }
}
2000098a:	46c0      	nop			; (mov r8, r8)
2000098c:	46bd      	mov	sp, r7
2000098e:	b002      	add	sp, #8
20000990:	bd80      	pop	{r7, pc}
20000992:	46c0      	nop			; (mov r8, r8)
20000994:	40023870 	andmi	r3, r2, r0, ror r8

20000998 <RCC_LSICmd>:
  * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
  *         clock cycles. 
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
20000998:	b580      	push	{r7, lr}
2000099a:	b082      	sub	sp, #8
2000099c:	af00      	add	r7, sp, #0
2000099e:	0002      	movs	r2, r0
200009a0:	1dfb      	adds	r3, r7, #7
200009a2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
200009a4:	4b03      	ldr	r3, [pc, #12]	; (200009b4 <RCC_LSICmd+0x1c>)
200009a6:	1dfa      	adds	r2, r7, #7
200009a8:	7812      	ldrb	r2, [r2, #0]
200009aa:	601a      	str	r2, [r3, #0]
}
200009ac:	46c0      	nop			; (mov r8, r8)
200009ae:	46bd      	mov	sp, r7
200009b0:	b002      	add	sp, #8
200009b2:	bd80      	pop	{r7, pc}
200009b4:	42470e80 	submi	r0, r7, #128, 28	; 0x800

200009b8 <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
200009b8:	b580      	push	{r7, lr}
200009ba:	b084      	sub	sp, #16
200009bc:	af00      	add	r7, sp, #0
200009be:	60f8      	str	r0, [r7, #12]
200009c0:	60b9      	str	r1, [r7, #8]
200009c2:	607a      	str	r2, [r7, #4]
200009c4:	603b      	str	r3, [r7, #0]
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
200009c6:	687b      	ldr	r3, [r7, #4]
200009c8:	019a      	lsls	r2, r3, #6
200009ca:	68bb      	ldr	r3, [r7, #8]
200009cc:	431a      	orrs	r2, r3
200009ce:	683b      	ldr	r3, [r7, #0]
200009d0:	085b      	lsrs	r3, r3, #1
200009d2:	3b01      	subs	r3, #1
200009d4:	041b      	lsls	r3, r3, #16
200009d6:	431a      	orrs	r2, r3
200009d8:	68fb      	ldr	r3, [r7, #12]
200009da:	431a      	orrs	r2, r3
200009dc:	0011      	movs	r1, r2
                 (PLLQ << 24);
200009de:	69bb      	ldr	r3, [r7, #24]
200009e0:	061a      	lsls	r2, r3, #24
  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
200009e2:	4b03      	ldr	r3, [pc, #12]	; (200009f0 <RCC_PLLConfig+0x38>)
200009e4:	430a      	orrs	r2, r1
200009e6:	605a      	str	r2, [r3, #4]
}
200009e8:	46c0      	nop			; (mov r8, r8)
200009ea:	46bd      	mov	sp, r7
200009ec:	b004      	add	sp, #16
200009ee:	bd80      	pop	{r7, pc}
200009f0:	40023800 	andmi	r3, r2, r0, lsl #16

200009f4 <RCC_PLLCmd>:
  * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
  * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
200009f4:	b580      	push	{r7, lr}
200009f6:	b082      	sub	sp, #8
200009f8:	af00      	add	r7, sp, #0
200009fa:	0002      	movs	r2, r0
200009fc:	1dfb      	adds	r3, r7, #7
200009fe:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
20000a00:	4b03      	ldr	r3, [pc, #12]	; (20000a10 <RCC_PLLCmd+0x1c>)
20000a02:	1dfa      	adds	r2, r7, #7
20000a04:	7812      	ldrb	r2, [r2, #0]
20000a06:	601a      	str	r2, [r3, #0]
}
20000a08:	46c0      	nop			; (mov r8, r8)
20000a0a:	46bd      	mov	sp, r7
20000a0c:	b002      	add	sp, #8
20000a0e:	bd80      	pop	{r7, pc}
20000a10:	42470060 	submi	r0, r7, #96	; 0x60

20000a14 <RCC_PLLI2SConfig>:
  *         on the I2S clock frequency.
  *   
  * @retval None
  */
void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR)
{
20000a14:	b580      	push	{r7, lr}
20000a16:	b082      	sub	sp, #8
20000a18:	af00      	add	r7, sp, #0
20000a1a:	6078      	str	r0, [r7, #4]
20000a1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
20000a1e:	687b      	ldr	r3, [r7, #4]
20000a20:	019a      	lsls	r2, r3, #6
20000a22:	683b      	ldr	r3, [r7, #0]
20000a24:	071b      	lsls	r3, r3, #28
20000a26:	4904      	ldr	r1, [pc, #16]	; (20000a38 <RCC_PLLI2SConfig+0x24>)
20000a28:	4313      	orrs	r3, r2
20000a2a:	2284      	movs	r2, #132	; 0x84
20000a2c:	508b      	str	r3, [r1, r2]
}
20000a2e:	46c0      	nop			; (mov r8, r8)
20000a30:	46bd      	mov	sp, r7
20000a32:	b002      	add	sp, #8
20000a34:	bd80      	pop	{r7, pc}
20000a36:	46c0      	nop			; (mov r8, r8)
20000a38:	40023800 	andmi	r3, r2, r0, lsl #16

20000a3c <RCC_PLLI2SCmd>:
  * @note   The PLLI2S is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLI2S. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
20000a3c:	b580      	push	{r7, lr}
20000a3e:	b082      	sub	sp, #8
20000a40:	af00      	add	r7, sp, #0
20000a42:	0002      	movs	r2, r0
20000a44:	1dfb      	adds	r3, r7, #7
20000a46:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
20000a48:	4b03      	ldr	r3, [pc, #12]	; (20000a58 <RCC_PLLI2SCmd+0x1c>)
20000a4a:	1dfa      	adds	r2, r7, #7
20000a4c:	7812      	ldrb	r2, [r2, #0]
20000a4e:	601a      	str	r2, [r3, #0]
}
20000a50:	46c0      	nop			; (mov r8, r8)
20000a52:	46bd      	mov	sp, r7
20000a54:	b002      	add	sp, #8
20000a56:	bd80      	pop	{r7, pc}
20000a58:	42470068 	submi	r0, r7, #104	; 0x68

20000a5c <RCC_PLLSAIConfig>:
  *          This parameter must be a number between 2 and 7.
  *   
  * @retval None
  */
void RCC_PLLSAIConfig(uint32_t PLLSAIN, uint32_t PLLSAIQ, uint32_t PLLSAIR)
{
20000a5c:	b580      	push	{r7, lr}
20000a5e:	b084      	sub	sp, #16
20000a60:	af00      	add	r7, sp, #0
20000a62:	60f8      	str	r0, [r7, #12]
20000a64:	60b9      	str	r1, [r7, #8]
20000a66:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIN));
  assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIR));
  assert_param(IS_RCC_PLLSAIQ_VALUE(PLLSAIQ));
  
  RCC->PLLSAICFGR = (PLLSAIN << 6) | (PLLSAIQ << 24) | (PLLSAIR << 28);
20000a68:	68fb      	ldr	r3, [r7, #12]
20000a6a:	019a      	lsls	r2, r3, #6
20000a6c:	68bb      	ldr	r3, [r7, #8]
20000a6e:	061b      	lsls	r3, r3, #24
20000a70:	431a      	orrs	r2, r3
20000a72:	687b      	ldr	r3, [r7, #4]
20000a74:	071b      	lsls	r3, r3, #28
20000a76:	4904      	ldr	r1, [pc, #16]	; (20000a88 <RCC_PLLSAIConfig+0x2c>)
20000a78:	4313      	orrs	r3, r2
20000a7a:	2288      	movs	r2, #136	; 0x88
20000a7c:	508b      	str	r3, [r1, r2]
}
20000a7e:	46c0      	nop			; (mov r8, r8)
20000a80:	46bd      	mov	sp, r7
20000a82:	b004      	add	sp, #16
20000a84:	bd80      	pop	{r7, pc}
20000a86:	46c0      	nop			; (mov r8, r8)
20000a88:	40023800 	andmi	r3, r2, r0, lsl #16

20000a8c <RCC_PLLSAICmd>:
  * @note   The PLLSAI is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLSAI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLSAICmd(FunctionalState NewState)
{
20000a8c:	b580      	push	{r7, lr}
20000a8e:	b082      	sub	sp, #8
20000a90:	af00      	add	r7, sp, #0
20000a92:	0002      	movs	r2, r0
20000a94:	1dfb      	adds	r3, r7, #7
20000a96:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLSAION_BB = (uint32_t)NewState;
20000a98:	4b03      	ldr	r3, [pc, #12]	; (20000aa8 <RCC_PLLSAICmd+0x1c>)
20000a9a:	1dfa      	adds	r2, r7, #7
20000a9c:	7812      	ldrb	r2, [r2, #0]
20000a9e:	601a      	str	r2, [r3, #0]
}
20000aa0:	46c0      	nop			; (mov r8, r8)
20000aa2:	46bd      	mov	sp, r7
20000aa4:	b002      	add	sp, #8
20000aa6:	bd80      	pop	{r7, pc}
20000aa8:	42470070 	submi	r0, r7, #112	; 0x70

20000aac <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
20000aac:	b580      	push	{r7, lr}
20000aae:	b082      	sub	sp, #8
20000ab0:	af00      	add	r7, sp, #0
20000ab2:	0002      	movs	r2, r0
20000ab4:	1dfb      	adds	r3, r7, #7
20000ab6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
20000ab8:	4b03      	ldr	r3, [pc, #12]	; (20000ac8 <RCC_ClockSecuritySystemCmd+0x1c>)
20000aba:	1dfa      	adds	r2, r7, #7
20000abc:	7812      	ldrb	r2, [r2, #0]
20000abe:	601a      	str	r2, [r3, #0]
}
20000ac0:	46c0      	nop			; (mov r8, r8)
20000ac2:	46bd      	mov	sp, r7
20000ac4:	b002      	add	sp, #8
20000ac6:	bd80      	pop	{r7, pc}
20000ac8:	4247004c 	submi	r0, r7, #76	; 0x4c

20000acc <RCC_MCO1Config>:
  *            @arg RCC_MCO1Div_4: division by 4 applied to MCO1 clock
  *            @arg RCC_MCO1Div_5: division by 5 applied to MCO1 clock
  * @retval None
  */
void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
{
20000acc:	b580      	push	{r7, lr}
20000ace:	b084      	sub	sp, #16
20000ad0:	af00      	add	r7, sp, #0
20000ad2:	6078      	str	r0, [r7, #4]
20000ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
20000ad6:	2300      	movs	r3, #0
20000ad8:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
20000ada:	4b0a      	ldr	r3, [pc, #40]	; (20000b04 <RCC_MCO1Config+0x38>)
20000adc:	689b      	ldr	r3, [r3, #8]
20000ade:	60fb      	str	r3, [r7, #12]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
20000ae0:	68fb      	ldr	r3, [r7, #12]
20000ae2:	4a09      	ldr	r2, [pc, #36]	; (20000b08 <RCC_MCO1Config+0x3c>)
20000ae4:	4013      	ands	r3, r2
20000ae6:	60fb      	str	r3, [r7, #12]

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
20000ae8:	687a      	ldr	r2, [r7, #4]
20000aea:	683b      	ldr	r3, [r7, #0]
20000aec:	4313      	orrs	r3, r2
20000aee:	68fa      	ldr	r2, [r7, #12]
20000af0:	4313      	orrs	r3, r2
20000af2:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
20000af4:	4b03      	ldr	r3, [pc, #12]	; (20000b04 <RCC_MCO1Config+0x38>)
20000af6:	68fa      	ldr	r2, [r7, #12]
20000af8:	609a      	str	r2, [r3, #8]

#if defined(STM32F410xx)
  RCC_MCO1Cmd(ENABLE);
#endif /* STM32F410xx */   
}
20000afa:	46c0      	nop			; (mov r8, r8)
20000afc:	46bd      	mov	sp, r7
20000afe:	b004      	add	sp, #16
20000b00:	bd80      	pop	{r7, pc}
20000b02:	46c0      	nop			; (mov r8, r8)
20000b04:	40023800 	andmi	r3, r2, r0, lsl #16
20000b08:	f89fffff 			; <UNDEFINED> instruction: 0xf89fffff

20000b0c <RCC_MCO2Config>:
  * @note  For STM32F410xx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)
{
20000b0c:	b580      	push	{r7, lr}
20000b0e:	b084      	sub	sp, #16
20000b10:	af00      	add	r7, sp, #0
20000b12:	6078      	str	r0, [r7, #4]
20000b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
20000b16:	2300      	movs	r3, #0
20000b18:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
20000b1a:	4b0a      	ldr	r3, [pc, #40]	; (20000b44 <RCC_MCO2Config+0x38>)
20000b1c:	689b      	ldr	r3, [r3, #8]
20000b1e:	60fb      	str	r3, [r7, #12]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
20000b20:	68fb      	ldr	r3, [r7, #12]
20000b22:	015b      	lsls	r3, r3, #5
20000b24:	095b      	lsrs	r3, r3, #5
20000b26:	60fb      	str	r3, [r7, #12]

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
20000b28:	687a      	ldr	r2, [r7, #4]
20000b2a:	683b      	ldr	r3, [r7, #0]
20000b2c:	4313      	orrs	r3, r2
20000b2e:	68fa      	ldr	r2, [r7, #12]
20000b30:	4313      	orrs	r3, r2
20000b32:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
20000b34:	4b03      	ldr	r3, [pc, #12]	; (20000b44 <RCC_MCO2Config+0x38>)
20000b36:	68fa      	ldr	r2, [r7, #12]
20000b38:	609a      	str	r2, [r3, #8]

#if defined(STM32F410xx)
  RCC_MCO2Cmd(ENABLE);
#endif /* STM32F410xx */   
}
20000b3a:	46c0      	nop			; (mov r8, r8)
20000b3c:	46bd      	mov	sp, r7
20000b3e:	b004      	add	sp, #16
20000b40:	bd80      	pop	{r7, pc}
20000b42:	46c0      	nop			; (mov r8, r8)
20000b44:	40023800 	andmi	r3, r2, r0, lsl #16

20000b48 <RCC_SYSCLKConfig>:
  *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source (RCC_SYSCLKSource_PLLPCLK for STM32F446xx devices)
  *            @arg RCC_SYSCLKSource_PLLRCLK: PLL R selected as system clock source only for STM32F412xG, STM32F413_423xx and STM32F446xx devices
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
20000b48:	b580      	push	{r7, lr}
20000b4a:	b084      	sub	sp, #16
20000b4c:	af00      	add	r7, sp, #0
20000b4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000b50:	2300      	movs	r3, #0
20000b52:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
20000b54:	4b08      	ldr	r3, [pc, #32]	; (20000b78 <RCC_SYSCLKConfig+0x30>)
20000b56:	689b      	ldr	r3, [r3, #8]
20000b58:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
20000b5a:	68fb      	ldr	r3, [r7, #12]
20000b5c:	2203      	movs	r2, #3
20000b5e:	4393      	bics	r3, r2
20000b60:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
20000b62:	68fa      	ldr	r2, [r7, #12]
20000b64:	687b      	ldr	r3, [r7, #4]
20000b66:	4313      	orrs	r3, r2
20000b68:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
20000b6a:	4b03      	ldr	r3, [pc, #12]	; (20000b78 <RCC_SYSCLKConfig+0x30>)
20000b6c:	68fa      	ldr	r2, [r7, #12]
20000b6e:	609a      	str	r2, [r3, #8]
}
20000b70:	46c0      	nop			; (mov r8, r8)
20000b72:	46bd      	mov	sp, r7
20000b74:	b004      	add	sp, #16
20000b76:	bd80      	pop	{r7, pc}
20000b78:	40023800 	andmi	r3, r2, r0, lsl #16

20000b7c <RCC_GetSYSCLKSource>:
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock (PLL P for STM32F446xx devices)
  *              - 0x0C: PLL R used as system clock (only for STM32F412xG, STM32F413_423xx and STM32F446xx devices)
  */
uint8_t RCC_GetSYSCLKSource(void)
{
20000b7c:	b580      	push	{r7, lr}
20000b7e:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
20000b80:	4b04      	ldr	r3, [pc, #16]	; (20000b94 <RCC_GetSYSCLKSource+0x18>)
20000b82:	689b      	ldr	r3, [r3, #8]
20000b84:	b2db      	uxtb	r3, r3
20000b86:	220c      	movs	r2, #12
20000b88:	4013      	ands	r3, r2
20000b8a:	b2db      	uxtb	r3, r3
}
20000b8c:	0018      	movs	r0, r3
20000b8e:	46bd      	mov	sp, r7
20000b90:	bd80      	pop	{r7, pc}
20000b92:	46c0      	nop			; (mov r8, r8)
20000b94:	40023800 	andmi	r3, r2, r0, lsl #16

20000b98 <RCC_HCLKConfig>:
  *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
20000b98:	b580      	push	{r7, lr}
20000b9a:	b084      	sub	sp, #16
20000b9c:	af00      	add	r7, sp, #0
20000b9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000ba0:	2300      	movs	r3, #0
20000ba2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
20000ba4:	4b08      	ldr	r3, [pc, #32]	; (20000bc8 <RCC_HCLKConfig+0x30>)
20000ba6:	689b      	ldr	r3, [r3, #8]
20000ba8:	60fb      	str	r3, [r7, #12]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
20000baa:	68fb      	ldr	r3, [r7, #12]
20000bac:	22f0      	movs	r2, #240	; 0xf0
20000bae:	4393      	bics	r3, r2
20000bb0:	60fb      	str	r3, [r7, #12]

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
20000bb2:	68fa      	ldr	r2, [r7, #12]
20000bb4:	687b      	ldr	r3, [r7, #4]
20000bb6:	4313      	orrs	r3, r2
20000bb8:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
20000bba:	4b03      	ldr	r3, [pc, #12]	; (20000bc8 <RCC_HCLKConfig+0x30>)
20000bbc:	68fa      	ldr	r2, [r7, #12]
20000bbe:	609a      	str	r2, [r3, #8]
}
20000bc0:	46c0      	nop			; (mov r8, r8)
20000bc2:	46bd      	mov	sp, r7
20000bc4:	b004      	add	sp, #16
20000bc6:	bd80      	pop	{r7, pc}
20000bc8:	40023800 	andmi	r3, r2, r0, lsl #16

20000bcc <RCC_PCLK1Config>:
  *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
20000bcc:	b580      	push	{r7, lr}
20000bce:	b084      	sub	sp, #16
20000bd0:	af00      	add	r7, sp, #0
20000bd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000bd4:	2300      	movs	r3, #0
20000bd6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
20000bd8:	4b08      	ldr	r3, [pc, #32]	; (20000bfc <RCC_PCLK1Config+0x30>)
20000bda:	689b      	ldr	r3, [r3, #8]
20000bdc:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
20000bde:	68fb      	ldr	r3, [r7, #12]
20000be0:	4a07      	ldr	r2, [pc, #28]	; (20000c00 <RCC_PCLK1Config+0x34>)
20000be2:	4013      	ands	r3, r2
20000be4:	60fb      	str	r3, [r7, #12]

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
20000be6:	68fa      	ldr	r2, [r7, #12]
20000be8:	687b      	ldr	r3, [r7, #4]
20000bea:	4313      	orrs	r3, r2
20000bec:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
20000bee:	4b03      	ldr	r3, [pc, #12]	; (20000bfc <RCC_PCLK1Config+0x30>)
20000bf0:	68fa      	ldr	r2, [r7, #12]
20000bf2:	609a      	str	r2, [r3, #8]
}
20000bf4:	46c0      	nop			; (mov r8, r8)
20000bf6:	46bd      	mov	sp, r7
20000bf8:	b004      	add	sp, #16
20000bfa:	bd80      	pop	{r7, pc}
20000bfc:	40023800 	andmi	r3, r2, r0, lsl #16
20000c00:	ffffe3ff 			; <UNDEFINED> instruction: 0xffffe3ff

20000c04 <RCC_PCLK2Config>:
  *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
20000c04:	b580      	push	{r7, lr}
20000c06:	b084      	sub	sp, #16
20000c08:	af00      	add	r7, sp, #0
20000c0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000c0c:	2300      	movs	r3, #0
20000c0e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
20000c10:	4b09      	ldr	r3, [pc, #36]	; (20000c38 <RCC_PCLK2Config+0x34>)
20000c12:	689b      	ldr	r3, [r3, #8]
20000c14:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
20000c16:	68fb      	ldr	r3, [r7, #12]
20000c18:	4a08      	ldr	r2, [pc, #32]	; (20000c3c <RCC_PCLK2Config+0x38>)
20000c1a:	4013      	ands	r3, r2
20000c1c:	60fb      	str	r3, [r7, #12]

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
20000c1e:	687b      	ldr	r3, [r7, #4]
20000c20:	00db      	lsls	r3, r3, #3
20000c22:	68fa      	ldr	r2, [r7, #12]
20000c24:	4313      	orrs	r3, r2
20000c26:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
20000c28:	4b03      	ldr	r3, [pc, #12]	; (20000c38 <RCC_PCLK2Config+0x34>)
20000c2a:	68fa      	ldr	r2, [r7, #12]
20000c2c:	609a      	str	r2, [r3, #8]
}
20000c2e:	46c0      	nop			; (mov r8, r8)
20000c30:	46bd      	mov	sp, r7
20000c32:	b004      	add	sp, #16
20000c34:	bd80      	pop	{r7, pc}
20000c36:	46c0      	nop			; (mov r8, r8)
20000c38:	40023800 	andmi	r3, r2, r0, lsl #16
20000c3c:	ffff1fff 			; <UNDEFINED> instruction: 0xffff1fff

20000c40 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
20000c40:	b580      	push	{r7, lr}
20000c42:	b088      	sub	sp, #32
20000c44:	af00      	add	r7, sp, #0
20000c46:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
20000c48:	2300      	movs	r3, #0
20000c4a:	61bb      	str	r3, [r7, #24]
20000c4c:	2300      	movs	r3, #0
20000c4e:	617b      	str	r3, [r7, #20]
20000c50:	2300      	movs	r3, #0
20000c52:	61fb      	str	r3, [r7, #28]
20000c54:	2302      	movs	r3, #2
20000c56:	613b      	str	r3, [r7, #16]
20000c58:	2300      	movs	r3, #0
20000c5a:	60fb      	str	r3, [r7, #12]
20000c5c:	2302      	movs	r3, #2
20000c5e:	60bb      	str	r3, [r7, #8]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
20000c60:	4b4c      	ldr	r3, [pc, #304]	; (20000d94 <RCC_GetClocksFreq+0x154>)
20000c62:	689b      	ldr	r3, [r3, #8]
20000c64:	220c      	movs	r2, #12
20000c66:	4013      	ands	r3, r2
20000c68:	61bb      	str	r3, [r7, #24]
  
  switch (tmp)
20000c6a:	69bb      	ldr	r3, [r7, #24]
20000c6c:	2b08      	cmp	r3, #8
20000c6e:	d011      	beq.n	20000c94 <RCC_GetClocksFreq+0x54>
20000c70:	69bb      	ldr	r3, [r7, #24]
20000c72:	2b08      	cmp	r3, #8
20000c74:	d848      	bhi.n	20000d08 <RCC_GetClocksFreq+0xc8>
20000c76:	69bb      	ldr	r3, [r7, #24]
20000c78:	2b00      	cmp	r3, #0
20000c7a:	d003      	beq.n	20000c84 <RCC_GetClocksFreq+0x44>
20000c7c:	69bb      	ldr	r3, [r7, #24]
20000c7e:	2b04      	cmp	r3, #4
20000c80:	d004      	beq.n	20000c8c <RCC_GetClocksFreq+0x4c>
20000c82:	e041      	b.n	20000d08 <RCC_GetClocksFreq+0xc8>
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
20000c84:	687b      	ldr	r3, [r7, #4]
20000c86:	4a44      	ldr	r2, [pc, #272]	; (20000d98 <RCC_GetClocksFreq+0x158>)
20000c88:	601a      	str	r2, [r3, #0]
    break;
20000c8a:	e041      	b.n	20000d10 <RCC_GetClocksFreq+0xd0>
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
20000c8c:	687b      	ldr	r3, [r7, #4]
20000c8e:	4a43      	ldr	r2, [pc, #268]	; (20000d9c <RCC_GetClocksFreq+0x15c>)
20000c90:	601a      	str	r2, [r3, #0]
    break;
20000c92:	e03d      	b.n	20000d10 <RCC_GetClocksFreq+0xd0>
  case 0x08:  /* PLL P used as system clock  source */
    
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
20000c94:	4b3f      	ldr	r3, [pc, #252]	; (20000d94 <RCC_GetClocksFreq+0x154>)
20000c96:	685b      	ldr	r3, [r3, #4]
20000c98:	0d9b      	lsrs	r3, r3, #22
20000c9a:	2201      	movs	r2, #1
20000c9c:	4013      	ands	r3, r2
20000c9e:	60fb      	str	r3, [r7, #12]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
20000ca0:	4b3c      	ldr	r3, [pc, #240]	; (20000d94 <RCC_GetClocksFreq+0x154>)
20000ca2:	685b      	ldr	r3, [r3, #4]
20000ca4:	223f      	movs	r2, #63	; 0x3f
20000ca6:	4013      	ands	r3, r2
20000ca8:	60bb      	str	r3, [r7, #8]
    
    if (pllsource != 0)
20000caa:	68fb      	ldr	r3, [r7, #12]
20000cac:	2b00      	cmp	r3, #0
20000cae:	d00d      	beq.n	20000ccc <RCC_GetClocksFreq+0x8c>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
20000cb0:	68b9      	ldr	r1, [r7, #8]
20000cb2:	483a      	ldr	r0, [pc, #232]	; (20000d9c <RCC_GetClocksFreq+0x15c>)
20000cb4:	f003 f848 	bl	20003d48 <__udivsi3>
20000cb8:	0003      	movs	r3, r0
20000cba:	001a      	movs	r2, r3
20000cbc:	4b35      	ldr	r3, [pc, #212]	; (20000d94 <RCC_GetClocksFreq+0x154>)
20000cbe:	685b      	ldr	r3, [r3, #4]
20000cc0:	099b      	lsrs	r3, r3, #6
20000cc2:	05db      	lsls	r3, r3, #23
20000cc4:	0ddb      	lsrs	r3, r3, #23
20000cc6:	4353      	muls	r3, r2
20000cc8:	61fb      	str	r3, [r7, #28]
20000cca:	e00c      	b.n	20000ce6 <RCC_GetClocksFreq+0xa6>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
20000ccc:	68b9      	ldr	r1, [r7, #8]
20000cce:	4832      	ldr	r0, [pc, #200]	; (20000d98 <RCC_GetClocksFreq+0x158>)
20000cd0:	f003 f83a 	bl	20003d48 <__udivsi3>
20000cd4:	0003      	movs	r3, r0
20000cd6:	001a      	movs	r2, r3
20000cd8:	4b2e      	ldr	r3, [pc, #184]	; (20000d94 <RCC_GetClocksFreq+0x154>)
20000cda:	685b      	ldr	r3, [r3, #4]
20000cdc:	099b      	lsrs	r3, r3, #6
20000cde:	05db      	lsls	r3, r3, #23
20000ce0:	0ddb      	lsrs	r3, r3, #23
20000ce2:	4353      	muls	r3, r2
20000ce4:	61fb      	str	r3, [r7, #28]
    }
    
    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
20000ce6:	4b2b      	ldr	r3, [pc, #172]	; (20000d94 <RCC_GetClocksFreq+0x154>)
20000ce8:	685b      	ldr	r3, [r3, #4]
20000cea:	0c1b      	lsrs	r3, r3, #16
20000cec:	2203      	movs	r2, #3
20000cee:	4013      	ands	r3, r2
20000cf0:	3301      	adds	r3, #1
20000cf2:	005b      	lsls	r3, r3, #1
20000cf4:	613b      	str	r3, [r7, #16]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
20000cf6:	6939      	ldr	r1, [r7, #16]
20000cf8:	69f8      	ldr	r0, [r7, #28]
20000cfa:	f003 f825 	bl	20003d48 <__udivsi3>
20000cfe:	0003      	movs	r3, r0
20000d00:	001a      	movs	r2, r3
20000d02:	687b      	ldr	r3, [r7, #4]
20000d04:	601a      	str	r2, [r3, #0]
    break;
20000d06:	e003      	b.n	20000d10 <RCC_GetClocksFreq+0xd0>
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;    
    break;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    
  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
20000d08:	687b      	ldr	r3, [r7, #4]
20000d0a:	4a23      	ldr	r2, [pc, #140]	; (20000d98 <RCC_GetClocksFreq+0x158>)
20000d0c:	601a      	str	r2, [r3, #0]
    break;
20000d0e:	46c0      	nop			; (mov r8, r8)
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
  
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
20000d10:	4b20      	ldr	r3, [pc, #128]	; (20000d94 <RCC_GetClocksFreq+0x154>)
20000d12:	689b      	ldr	r3, [r3, #8]
20000d14:	22f0      	movs	r2, #240	; 0xf0
20000d16:	4013      	ands	r3, r2
20000d18:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
20000d1a:	69bb      	ldr	r3, [r7, #24]
20000d1c:	091b      	lsrs	r3, r3, #4
20000d1e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
20000d20:	4a1f      	ldr	r2, [pc, #124]	; (20000da0 <RCC_GetClocksFreq+0x160>)
20000d22:	69bb      	ldr	r3, [r7, #24]
20000d24:	18d3      	adds	r3, r2, r3
20000d26:	781b      	ldrb	r3, [r3, #0]
20000d28:	b2db      	uxtb	r3, r3
20000d2a:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
20000d2c:	687b      	ldr	r3, [r7, #4]
20000d2e:	681a      	ldr	r2, [r3, #0]
20000d30:	697b      	ldr	r3, [r7, #20]
20000d32:	40da      	lsrs	r2, r3
20000d34:	687b      	ldr	r3, [r7, #4]
20000d36:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
20000d38:	4b16      	ldr	r3, [pc, #88]	; (20000d94 <RCC_GetClocksFreq+0x154>)
20000d3a:	689a      	ldr	r2, [r3, #8]
20000d3c:	23e0      	movs	r3, #224	; 0xe0
20000d3e:	015b      	lsls	r3, r3, #5
20000d40:	4013      	ands	r3, r2
20000d42:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
20000d44:	69bb      	ldr	r3, [r7, #24]
20000d46:	0a9b      	lsrs	r3, r3, #10
20000d48:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
20000d4a:	4a15      	ldr	r2, [pc, #84]	; (20000da0 <RCC_GetClocksFreq+0x160>)
20000d4c:	69bb      	ldr	r3, [r7, #24]
20000d4e:	18d3      	adds	r3, r2, r3
20000d50:	781b      	ldrb	r3, [r3, #0]
20000d52:	b2db      	uxtb	r3, r3
20000d54:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
20000d56:	687b      	ldr	r3, [r7, #4]
20000d58:	685a      	ldr	r2, [r3, #4]
20000d5a:	697b      	ldr	r3, [r7, #20]
20000d5c:	40da      	lsrs	r2, r3
20000d5e:	687b      	ldr	r3, [r7, #4]
20000d60:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
20000d62:	4b0c      	ldr	r3, [pc, #48]	; (20000d94 <RCC_GetClocksFreq+0x154>)
20000d64:	689a      	ldr	r2, [r3, #8]
20000d66:	23e0      	movs	r3, #224	; 0xe0
20000d68:	021b      	lsls	r3, r3, #8
20000d6a:	4013      	ands	r3, r2
20000d6c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
20000d6e:	69bb      	ldr	r3, [r7, #24]
20000d70:	0b5b      	lsrs	r3, r3, #13
20000d72:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
20000d74:	4a0a      	ldr	r2, [pc, #40]	; (20000da0 <RCC_GetClocksFreq+0x160>)
20000d76:	69bb      	ldr	r3, [r7, #24]
20000d78:	18d3      	adds	r3, r2, r3
20000d7a:	781b      	ldrb	r3, [r3, #0]
20000d7c:	b2db      	uxtb	r3, r3
20000d7e:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
20000d80:	687b      	ldr	r3, [r7, #4]
20000d82:	685a      	ldr	r2, [r3, #4]
20000d84:	697b      	ldr	r3, [r7, #20]
20000d86:	40da      	lsrs	r2, r3
20000d88:	687b      	ldr	r3, [r7, #4]
20000d8a:	60da      	str	r2, [r3, #12]
}
20000d8c:	46c0      	nop			; (mov r8, r8)
20000d8e:	46bd      	mov	sp, r7
20000d90:	b008      	add	sp, #32
20000d92:	bd80      	pop	{r7, pc}
20000d94:	40023800 	andmi	r3, r2, r0, lsl #16
20000d98:	00f42400 	rscseq	r2, r4, r0, lsl #8
20000d9c:	017d7840 	cmneq	sp, r0, asr #16
20000da0:	20003f40 	andcs	r3, r0, r0, asr #30

20000da4 <RCC_RTCCLKConfig>:
  *         RTC clock source).
  *  
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
20000da4:	b580      	push	{r7, lr}
20000da6:	b084      	sub	sp, #16
20000da8:	af00      	add	r7, sp, #0
20000daa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000dac:	2300      	movs	r3, #0
20000dae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
20000db0:	687a      	ldr	r2, [r7, #4]
20000db2:	23c0      	movs	r3, #192	; 0xc0
20000db4:	009b      	lsls	r3, r3, #2
20000db6:	401a      	ands	r2, r3
20000db8:	23c0      	movs	r3, #192	; 0xc0
20000dba:	009b      	lsls	r3, r3, #2
20000dbc:	429a      	cmp	r2, r3
20000dbe:	d10f      	bne.n	20000de0 <RCC_RTCCLKConfig+0x3c>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
20000dc0:	4b0d      	ldr	r3, [pc, #52]	; (20000df8 <RCC_RTCCLKConfig+0x54>)
20000dc2:	689b      	ldr	r3, [r3, #8]
20000dc4:	60fb      	str	r3, [r7, #12]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
20000dc6:	68fb      	ldr	r3, [r7, #12]
20000dc8:	4a0c      	ldr	r2, [pc, #48]	; (20000dfc <RCC_RTCCLKConfig+0x58>)
20000dca:	4013      	ands	r3, r2
20000dcc:	60fb      	str	r3, [r7, #12]

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
20000dce:	687b      	ldr	r3, [r7, #4]
20000dd0:	4a0b      	ldr	r2, [pc, #44]	; (20000e00 <RCC_RTCCLKConfig+0x5c>)
20000dd2:	4013      	ands	r3, r2
20000dd4:	68fa      	ldr	r2, [r7, #12]
20000dd6:	4313      	orrs	r3, r2
20000dd8:	60fb      	str	r3, [r7, #12]

    /* Store the new value */
    RCC->CFGR = tmpreg;
20000dda:	4b07      	ldr	r3, [pc, #28]	; (20000df8 <RCC_RTCCLKConfig+0x54>)
20000ddc:	68fa      	ldr	r2, [r7, #12]
20000dde:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
20000de0:	4b05      	ldr	r3, [pc, #20]	; (20000df8 <RCC_RTCCLKConfig+0x54>)
20000de2:	6f19      	ldr	r1, [r3, #112]	; 0x70
20000de4:	687b      	ldr	r3, [r7, #4]
20000de6:	051b      	lsls	r3, r3, #20
20000de8:	0d1a      	lsrs	r2, r3, #20
20000dea:	4b03      	ldr	r3, [pc, #12]	; (20000df8 <RCC_RTCCLKConfig+0x54>)
20000dec:	430a      	orrs	r2, r1
20000dee:	671a      	str	r2, [r3, #112]	; 0x70
}
20000df0:	46c0      	nop			; (mov r8, r8)
20000df2:	46bd      	mov	sp, r7
20000df4:	b004      	add	sp, #16
20000df6:	bd80      	pop	{r7, pc}
20000df8:	40023800 	andmi	r3, r2, r0, lsl #16
20000dfc:	ffe0ffff 			; <UNDEFINED> instruction: 0xffe0ffff
20000e00:	0ffffcff 	svceq	0x00fffcff

20000e04 <RCC_RTCCLKCmd>:
  *         using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
20000e04:	b580      	push	{r7, lr}
20000e06:	b082      	sub	sp, #8
20000e08:	af00      	add	r7, sp, #0
20000e0a:	0002      	movs	r2, r0
20000e0c:	1dfb      	adds	r3, r7, #7
20000e0e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
20000e10:	4b03      	ldr	r3, [pc, #12]	; (20000e20 <RCC_RTCCLKCmd+0x1c>)
20000e12:	1dfa      	adds	r2, r7, #7
20000e14:	7812      	ldrb	r2, [r2, #0]
20000e16:	601a      	str	r2, [r3, #0]
}
20000e18:	46c0      	nop			; (mov r8, r8)
20000e1a:	46bd      	mov	sp, r7
20000e1c:	b002      	add	sp, #8
20000e1e:	bd80      	pop	{r7, pc}
20000e20:	42470e3c 	submi	r0, r7, #60, 28	; 0x3c0

20000e24 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
20000e24:	b580      	push	{r7, lr}
20000e26:	b082      	sub	sp, #8
20000e28:	af00      	add	r7, sp, #0
20000e2a:	0002      	movs	r2, r0
20000e2c:	1dfb      	adds	r3, r7, #7
20000e2e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
20000e30:	4b03      	ldr	r3, [pc, #12]	; (20000e40 <RCC_BackupResetCmd+0x1c>)
20000e32:	1dfa      	adds	r2, r7, #7
20000e34:	7812      	ldrb	r2, [r2, #0]
20000e36:	601a      	str	r2, [r3, #0]
}
20000e38:	46c0      	nop			; (mov r8, r8)
20000e3a:	46bd      	mov	sp, r7
20000e3c:	b002      	add	sp, #8
20000e3e:	bd80      	pop	{r7, pc}
20000e40:	42470e40 	submi	r0, r7, #64, 28	; 0x400

20000e44 <RCC_I2SCLKConfig>:
  *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as I2S clock source
  * @retval None
  */
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
20000e44:	b580      	push	{r7, lr}
20000e46:	b082      	sub	sp, #8
20000e48:	af00      	add	r7, sp, #0
20000e4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;  
20000e4c:	4b03      	ldr	r3, [pc, #12]	; (20000e5c <RCC_I2SCLKConfig+0x18>)
20000e4e:	687a      	ldr	r2, [r7, #4]
20000e50:	601a      	str	r2, [r3, #0]
}
20000e52:	46c0      	nop			; (mov r8, r8)
20000e54:	46bd      	mov	sp, r7
20000e56:	b002      	add	sp, #8
20000e58:	bd80      	pop	{r7, pc}
20000e5a:	46c0      	nop			; (mov r8, r8)
20000e5c:	4247015c 	submi	r0, r7, #92, 2

20000e60 <RCC_SAIBlockACLKConfig>:
  *            @arg RCC_SAIACLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as SAI1 Block A clock
  * @retval None
  */
void RCC_SAIBlockACLKConfig(uint32_t RCC_SAIBlockACLKSource)
{
20000e60:	b580      	push	{r7, lr}
20000e62:	b084      	sub	sp, #16
20000e64:	af00      	add	r7, sp, #0
20000e66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000e68:	2300      	movs	r3, #0
20000e6a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIACLK_SOURCE(RCC_SAIBlockACLKSource));
  
  tmpreg = RCC->DCKCFGR;
20000e6c:	4a09      	ldr	r2, [pc, #36]	; (20000e94 <RCC_SAIBlockACLKConfig+0x34>)
20000e6e:	238c      	movs	r3, #140	; 0x8c
20000e70:	58d3      	ldr	r3, [r2, r3]
20000e72:	60fb      	str	r3, [r7, #12]

  /* Clear RCC_DCKCFGR_SAI1ASRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1ASRC;
20000e74:	68fb      	ldr	r3, [r7, #12]
20000e76:	4a08      	ldr	r2, [pc, #32]	; (20000e98 <RCC_SAIBlockACLKConfig+0x38>)
20000e78:	4013      	ands	r3, r2
20000e7a:	60fb      	str	r3, [r7, #12]

  /* Set SAI Block A source selection value */
  tmpreg |= RCC_SAIBlockACLKSource;
20000e7c:	68fa      	ldr	r2, [r7, #12]
20000e7e:	687b      	ldr	r3, [r7, #4]
20000e80:	4313      	orrs	r3, r2
20000e82:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
20000e84:	4903      	ldr	r1, [pc, #12]	; (20000e94 <RCC_SAIBlockACLKConfig+0x34>)
20000e86:	228c      	movs	r2, #140	; 0x8c
20000e88:	68fb      	ldr	r3, [r7, #12]
20000e8a:	508b      	str	r3, [r1, r2]
}
20000e8c:	46c0      	nop			; (mov r8, r8)
20000e8e:	46bd      	mov	sp, r7
20000e90:	b004      	add	sp, #16
20000e92:	bd80      	pop	{r7, pc}
20000e94:	40023800 	andmi	r3, r2, r0, lsl #16
20000e98:	ffcfffff 			; <UNDEFINED> instruction: 0xffcfffff

20000e9c <RCC_SAIBlockBCLKConfig>:
  *            @arg RCC_SAIBCLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as SAI1 Block B clock
  * @retval None
  */
void RCC_SAIBlockBCLKConfig(uint32_t RCC_SAIBlockBCLKSource)
{
20000e9c:	b580      	push	{r7, lr}
20000e9e:	b084      	sub	sp, #16
20000ea0:	af00      	add	r7, sp, #0
20000ea2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000ea4:	2300      	movs	r3, #0
20000ea6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIBCLK_SOURCE(RCC_SAIBlockBCLKSource));
  
  tmpreg = RCC->DCKCFGR;
20000ea8:	4a09      	ldr	r2, [pc, #36]	; (20000ed0 <RCC_SAIBlockBCLKConfig+0x34>)
20000eaa:	238c      	movs	r3, #140	; 0x8c
20000eac:	58d3      	ldr	r3, [r2, r3]
20000eae:	60fb      	str	r3, [r7, #12]

  /* Clear RCC_DCKCFGR_SAI1BSRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1BSRC;
20000eb0:	68fb      	ldr	r3, [r7, #12]
20000eb2:	4a08      	ldr	r2, [pc, #32]	; (20000ed4 <RCC_SAIBlockBCLKConfig+0x38>)
20000eb4:	4013      	ands	r3, r2
20000eb6:	60fb      	str	r3, [r7, #12]

  /* Set SAI Block B source selection value */
  tmpreg |= RCC_SAIBlockBCLKSource;
20000eb8:	68fa      	ldr	r2, [r7, #12]
20000eba:	687b      	ldr	r3, [r7, #4]
20000ebc:	4313      	orrs	r3, r2
20000ebe:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
20000ec0:	4903      	ldr	r1, [pc, #12]	; (20000ed0 <RCC_SAIBlockBCLKConfig+0x34>)
20000ec2:	228c      	movs	r2, #140	; 0x8c
20000ec4:	68fb      	ldr	r3, [r7, #12]
20000ec6:	508b      	str	r3, [r1, r2]
}
20000ec8:	46c0      	nop			; (mov r8, r8)
20000eca:	46bd      	mov	sp, r7
20000ecc:	b004      	add	sp, #16
20000ece:	bd80      	pop	{r7, pc}
20000ed0:	40023800 	andmi	r3, r2, r0, lsl #16
20000ed4:	ff3fffff 			; <UNDEFINED> instruction: 0xff3fffff

20000ed8 <RCC_SAIPLLI2SClkDivConfig>:
  *          SAI1 clock frequency = f(PLLI2S_Q) / RCC_PLLI2SDivQ 
  *              
  * @retval None
  */
void RCC_SAIPLLI2SClkDivConfig(uint32_t RCC_PLLI2SDivQ)  
{
20000ed8:	b580      	push	{r7, lr}
20000eda:	b084      	sub	sp, #16
20000edc:	af00      	add	r7, sp, #0
20000ede:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000ee0:	2300      	movs	r3, #0
20000ee2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(RCC_PLLI2SDivQ));
  
  tmpreg = RCC->DCKCFGR;
20000ee4:	4a0a      	ldr	r2, [pc, #40]	; (20000f10 <RCC_SAIPLLI2SClkDivConfig+0x38>)
20000ee6:	238c      	movs	r3, #140	; 0x8c
20000ee8:	58d3      	ldr	r3, [r2, r3]
20000eea:	60fb      	str	r3, [r7, #12]

  /* Clear PLLI2SDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLI2SDIVQ);
20000eec:	68fb      	ldr	r3, [r7, #12]
20000eee:	221f      	movs	r2, #31
20000ef0:	4393      	bics	r3, r2
20000ef2:	60fb      	str	r3, [r7, #12]

  /* Set PLLI2SDIVQ values */
  tmpreg |= (RCC_PLLI2SDivQ - 1);
20000ef4:	687b      	ldr	r3, [r7, #4]
20000ef6:	3b01      	subs	r3, #1
20000ef8:	68fa      	ldr	r2, [r7, #12]
20000efa:	4313      	orrs	r3, r2
20000efc:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
20000efe:	4904      	ldr	r1, [pc, #16]	; (20000f10 <RCC_SAIPLLI2SClkDivConfig+0x38>)
20000f00:	228c      	movs	r2, #140	; 0x8c
20000f02:	68fb      	ldr	r3, [r7, #12]
20000f04:	508b      	str	r3, [r1, r2]
}
20000f06:	46c0      	nop			; (mov r8, r8)
20000f08:	46bd      	mov	sp, r7
20000f0a:	b004      	add	sp, #16
20000f0c:	bd80      	pop	{r7, pc}
20000f0e:	46c0      	nop			; (mov r8, r8)
20000f10:	40023800 	andmi	r3, r2, r0, lsl #16

20000f14 <RCC_SAIPLLSAIClkDivConfig>:
  *          SAI1 clock frequency = f(PLLSAI_Q) / RCC_PLLSAIDivQ  
  *              
  * @retval None
  */
void RCC_SAIPLLSAIClkDivConfig(uint32_t RCC_PLLSAIDivQ)  
{
20000f14:	b580      	push	{r7, lr}
20000f16:	b084      	sub	sp, #16
20000f18:	af00      	add	r7, sp, #0
20000f1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000f1c:	2300      	movs	r3, #0
20000f1e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(RCC_PLLSAIDivQ));
  
  tmpreg = RCC->DCKCFGR;
20000f20:	4a0a      	ldr	r2, [pc, #40]	; (20000f4c <RCC_SAIPLLSAIClkDivConfig+0x38>)
20000f22:	238c      	movs	r3, #140	; 0x8c
20000f24:	58d3      	ldr	r3, [r2, r3]
20000f26:	60fb      	str	r3, [r7, #12]

  /* Clear PLLI2SDIVQ[4:0] and PLLSAIDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLSAIDIVQ);
20000f28:	68fb      	ldr	r3, [r7, #12]
20000f2a:	4a09      	ldr	r2, [pc, #36]	; (20000f50 <RCC_SAIPLLSAIClkDivConfig+0x3c>)
20000f2c:	4013      	ands	r3, r2
20000f2e:	60fb      	str	r3, [r7, #12]

  /* Set PLLSAIDIVQ values */
  tmpreg |= ((RCC_PLLSAIDivQ - 1) << 8);
20000f30:	687b      	ldr	r3, [r7, #4]
20000f32:	3b01      	subs	r3, #1
20000f34:	021b      	lsls	r3, r3, #8
20000f36:	68fa      	ldr	r2, [r7, #12]
20000f38:	4313      	orrs	r3, r2
20000f3a:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
20000f3c:	4903      	ldr	r1, [pc, #12]	; (20000f4c <RCC_SAIPLLSAIClkDivConfig+0x38>)
20000f3e:	228c      	movs	r2, #140	; 0x8c
20000f40:	68fb      	ldr	r3, [r7, #12]
20000f42:	508b      	str	r3, [r1, r2]
}
20000f44:	46c0      	nop			; (mov r8, r8)
20000f46:	46bd      	mov	sp, r7
20000f48:	b004      	add	sp, #16
20000f4a:	bd80      	pop	{r7, pc}
20000f4c:	40023800 	andmi	r3, r2, r0, lsl #16
20000f50:	ffffe0ff 			; <UNDEFINED> instruction: 0xffffe0ff

20000f54 <RCC_LTDCCLKDivConfig>:
  *            @arg RCC_PLLSAIDivR_Div16: LTDC clock = f(PLLSAI_R)/16
  *            
  * @retval None
  */
void RCC_LTDCCLKDivConfig(uint32_t RCC_PLLSAIDivR)
{
20000f54:	b580      	push	{r7, lr}
20000f56:	b084      	sub	sp, #16
20000f58:	af00      	add	r7, sp, #0
20000f5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000f5c:	2300      	movs	r3, #0
20000f5e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVR_VALUE(RCC_PLLSAIDivR));
  
  tmpreg = RCC->DCKCFGR;
20000f60:	4a09      	ldr	r2, [pc, #36]	; (20000f88 <RCC_LTDCCLKDivConfig+0x34>)
20000f62:	238c      	movs	r3, #140	; 0x8c
20000f64:	58d3      	ldr	r3, [r2, r3]
20000f66:	60fb      	str	r3, [r7, #12]

  /* Clear PLLSAIDIVR[2:0] bits */
  tmpreg &= ~RCC_DCKCFGR_PLLSAIDIVR;
20000f68:	68fb      	ldr	r3, [r7, #12]
20000f6a:	4a08      	ldr	r2, [pc, #32]	; (20000f8c <RCC_LTDCCLKDivConfig+0x38>)
20000f6c:	4013      	ands	r3, r2
20000f6e:	60fb      	str	r3, [r7, #12]

  /* Set PLLSAIDIVR values */
  tmpreg |= RCC_PLLSAIDivR;
20000f70:	68fa      	ldr	r2, [r7, #12]
20000f72:	687b      	ldr	r3, [r7, #4]
20000f74:	4313      	orrs	r3, r2
20000f76:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
20000f78:	4903      	ldr	r1, [pc, #12]	; (20000f88 <RCC_LTDCCLKDivConfig+0x34>)
20000f7a:	228c      	movs	r2, #140	; 0x8c
20000f7c:	68fb      	ldr	r3, [r7, #12]
20000f7e:	508b      	str	r3, [r1, r2]
}
20000f80:	46c0      	nop			; (mov r8, r8)
20000f82:	46bd      	mov	sp, r7
20000f84:	b004      	add	sp, #16
20000f86:	bd80      	pop	{r7, pc}
20000f88:	40023800 	andmi	r3, r2, r0, lsl #16
20000f8c:	fffcffff 			; <UNDEFINED> instruction: 0xfffcffff

20000f90 <RCC_TIMCLKPresConfig>:
  *                 else it is equal to [(HPRE * PPREx) / 4] if PPREx is corresponding 
  *                 to division by 8 or more.
  * @retval None
  */
void RCC_TIMCLKPresConfig(uint32_t RCC_TIMCLKPrescaler)
{
20000f90:	b580      	push	{r7, lr}
20000f92:	b082      	sub	sp, #8
20000f94:	af00      	add	r7, sp, #0
20000f96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_TIMCLK_PRESCALER(RCC_TIMCLKPrescaler));

  *(__IO uint32_t *) DCKCFGR_TIMPRE_BB = RCC_TIMCLKPrescaler;
20000f98:	4b03      	ldr	r3, [pc, #12]	; (20000fa8 <RCC_TIMCLKPresConfig+0x18>)
20000f9a:	687a      	ldr	r2, [r7, #4]
20000f9c:	601a      	str	r2, [r3, #0]
}
20000f9e:	46c0      	nop			; (mov r8, r8)
20000fa0:	46bd      	mov	sp, r7
20000fa2:	b002      	add	sp, #8
20000fa4:	bd80      	pop	{r7, pc}
20000fa6:	46c0      	nop			; (mov r8, r8)
20000fa8:	424711e0 	submi	r1, r7, #224, 2	; 0x38

20000fac <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
20000fac:	b580      	push	{r7, lr}
20000fae:	b082      	sub	sp, #8
20000fb0:	af00      	add	r7, sp, #0
20000fb2:	6078      	str	r0, [r7, #4]
20000fb4:	000a      	movs	r2, r1
20000fb6:	1cfb      	adds	r3, r7, #3
20000fb8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000fba:	1cfb      	adds	r3, r7, #3
20000fbc:	781b      	ldrb	r3, [r3, #0]
20000fbe:	2b00      	cmp	r3, #0
20000fc0:	d006      	beq.n	20000fd0 <RCC_AHB1PeriphClockCmd+0x24>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
20000fc2:	4b09      	ldr	r3, [pc, #36]	; (20000fe8 <RCC_AHB1PeriphClockCmd+0x3c>)
20000fc4:	6b19      	ldr	r1, [r3, #48]	; 0x30
20000fc6:	4b08      	ldr	r3, [pc, #32]	; (20000fe8 <RCC_AHB1PeriphClockCmd+0x3c>)
20000fc8:	687a      	ldr	r2, [r7, #4]
20000fca:	430a      	orrs	r2, r1
20000fcc:	631a      	str	r2, [r3, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
20000fce:	e006      	b.n	20000fde <RCC_AHB1PeriphClockCmd+0x32>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
20000fd0:	4b05      	ldr	r3, [pc, #20]	; (20000fe8 <RCC_AHB1PeriphClockCmd+0x3c>)
20000fd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20000fd4:	687b      	ldr	r3, [r7, #4]
20000fd6:	43d9      	mvns	r1, r3
20000fd8:	4b03      	ldr	r3, [pc, #12]	; (20000fe8 <RCC_AHB1PeriphClockCmd+0x3c>)
20000fda:	400a      	ands	r2, r1
20000fdc:	631a      	str	r2, [r3, #48]	; 0x30
}
20000fde:	46c0      	nop			; (mov r8, r8)
20000fe0:	46bd      	mov	sp, r7
20000fe2:	b002      	add	sp, #8
20000fe4:	bd80      	pop	{r7, pc}
20000fe6:	46c0      	nop			; (mov r8, r8)
20000fe8:	40023800 	andmi	r3, r2, r0, lsl #16

20000fec <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
20000fec:	b580      	push	{r7, lr}
20000fee:	b082      	sub	sp, #8
20000ff0:	af00      	add	r7, sp, #0
20000ff2:	6078      	str	r0, [r7, #4]
20000ff4:	000a      	movs	r2, r1
20000ff6:	1cfb      	adds	r3, r7, #3
20000ff8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20000ffa:	1cfb      	adds	r3, r7, #3
20000ffc:	781b      	ldrb	r3, [r3, #0]
20000ffe:	2b00      	cmp	r3, #0
20001000:	d006      	beq.n	20001010 <RCC_AHB2PeriphClockCmd+0x24>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
20001002:	4b09      	ldr	r3, [pc, #36]	; (20001028 <RCC_AHB2PeriphClockCmd+0x3c>)
20001004:	6b59      	ldr	r1, [r3, #52]	; 0x34
20001006:	4b08      	ldr	r3, [pc, #32]	; (20001028 <RCC_AHB2PeriphClockCmd+0x3c>)
20001008:	687a      	ldr	r2, [r7, #4]
2000100a:	430a      	orrs	r2, r1
2000100c:	635a      	str	r2, [r3, #52]	; 0x34
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
  }
}
2000100e:	e006      	b.n	2000101e <RCC_AHB2PeriphClockCmd+0x32>
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
20001010:	4b05      	ldr	r3, [pc, #20]	; (20001028 <RCC_AHB2PeriphClockCmd+0x3c>)
20001012:	6b5a      	ldr	r2, [r3, #52]	; 0x34
20001014:	687b      	ldr	r3, [r7, #4]
20001016:	43d9      	mvns	r1, r3
20001018:	4b03      	ldr	r3, [pc, #12]	; (20001028 <RCC_AHB2PeriphClockCmd+0x3c>)
2000101a:	400a      	ands	r2, r1
2000101c:	635a      	str	r2, [r3, #52]	; 0x34
}
2000101e:	46c0      	nop			; (mov r8, r8)
20001020:	46bd      	mov	sp, r7
20001022:	b002      	add	sp, #8
20001024:	bd80      	pop	{r7, pc}
20001026:	46c0      	nop			; (mov r8, r8)
20001028:	40023800 	andmi	r3, r2, r0, lsl #16

2000102c <RCC_AHB3PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
2000102c:	b580      	push	{r7, lr}
2000102e:	b082      	sub	sp, #8
20001030:	af00      	add	r7, sp, #0
20001032:	6078      	str	r0, [r7, #4]
20001034:	000a      	movs	r2, r1
20001036:	1cfb      	adds	r3, r7, #3
20001038:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
2000103a:	1cfb      	adds	r3, r7, #3
2000103c:	781b      	ldrb	r3, [r3, #0]
2000103e:	2b00      	cmp	r3, #0
20001040:	d006      	beq.n	20001050 <RCC_AHB3PeriphClockCmd+0x24>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
20001042:	4b09      	ldr	r3, [pc, #36]	; (20001068 <RCC_AHB3PeriphClockCmd+0x3c>)
20001044:	6b99      	ldr	r1, [r3, #56]	; 0x38
20001046:	4b08      	ldr	r3, [pc, #32]	; (20001068 <RCC_AHB3PeriphClockCmd+0x3c>)
20001048:	687a      	ldr	r2, [r7, #4]
2000104a:	430a      	orrs	r2, r1
2000104c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
  }
}
2000104e:	e006      	b.n	2000105e <RCC_AHB3PeriphClockCmd+0x32>
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
20001050:	4b05      	ldr	r3, [pc, #20]	; (20001068 <RCC_AHB3PeriphClockCmd+0x3c>)
20001052:	6b9a      	ldr	r2, [r3, #56]	; 0x38
20001054:	687b      	ldr	r3, [r7, #4]
20001056:	43d9      	mvns	r1, r3
20001058:	4b03      	ldr	r3, [pc, #12]	; (20001068 <RCC_AHB3PeriphClockCmd+0x3c>)
2000105a:	400a      	ands	r2, r1
2000105c:	639a      	str	r2, [r3, #56]	; 0x38
}
2000105e:	46c0      	nop			; (mov r8, r8)
20001060:	46bd      	mov	sp, r7
20001062:	b002      	add	sp, #8
20001064:	bd80      	pop	{r7, pc}
20001066:	46c0      	nop			; (mov r8, r8)
20001068:	40023800 	andmi	r3, r2, r0, lsl #16

2000106c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
2000106c:	b580      	push	{r7, lr}
2000106e:	b082      	sub	sp, #8
20001070:	af00      	add	r7, sp, #0
20001072:	6078      	str	r0, [r7, #4]
20001074:	000a      	movs	r2, r1
20001076:	1cfb      	adds	r3, r7, #3
20001078:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
2000107a:	1cfb      	adds	r3, r7, #3
2000107c:	781b      	ldrb	r3, [r3, #0]
2000107e:	2b00      	cmp	r3, #0
20001080:	d006      	beq.n	20001090 <RCC_APB1PeriphClockCmd+0x24>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
20001082:	4b09      	ldr	r3, [pc, #36]	; (200010a8 <RCC_APB1PeriphClockCmd+0x3c>)
20001084:	6c19      	ldr	r1, [r3, #64]	; 0x40
20001086:	4b08      	ldr	r3, [pc, #32]	; (200010a8 <RCC_APB1PeriphClockCmd+0x3c>)
20001088:	687a      	ldr	r2, [r7, #4]
2000108a:	430a      	orrs	r2, r1
2000108c:	641a      	str	r2, [r3, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
2000108e:	e006      	b.n	2000109e <RCC_APB1PeriphClockCmd+0x32>
    RCC->APB1ENR &= ~RCC_APB1Periph;
20001090:	4b05      	ldr	r3, [pc, #20]	; (200010a8 <RCC_APB1PeriphClockCmd+0x3c>)
20001092:	6c1a      	ldr	r2, [r3, #64]	; 0x40
20001094:	687b      	ldr	r3, [r7, #4]
20001096:	43d9      	mvns	r1, r3
20001098:	4b03      	ldr	r3, [pc, #12]	; (200010a8 <RCC_APB1PeriphClockCmd+0x3c>)
2000109a:	400a      	ands	r2, r1
2000109c:	641a      	str	r2, [r3, #64]	; 0x40
}
2000109e:	46c0      	nop			; (mov r8, r8)
200010a0:	46bd      	mov	sp, r7
200010a2:	b002      	add	sp, #8
200010a4:	bd80      	pop	{r7, pc}
200010a6:	46c0      	nop			; (mov r8, r8)
200010a8:	40023800 	andmi	r3, r2, r0, lsl #16

200010ac <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
200010ac:	b580      	push	{r7, lr}
200010ae:	b082      	sub	sp, #8
200010b0:	af00      	add	r7, sp, #0
200010b2:	6078      	str	r0, [r7, #4]
200010b4:	000a      	movs	r2, r1
200010b6:	1cfb      	adds	r3, r7, #3
200010b8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
200010ba:	1cfb      	adds	r3, r7, #3
200010bc:	781b      	ldrb	r3, [r3, #0]
200010be:	2b00      	cmp	r3, #0
200010c0:	d006      	beq.n	200010d0 <RCC_APB2PeriphClockCmd+0x24>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
200010c2:	4b09      	ldr	r3, [pc, #36]	; (200010e8 <RCC_APB2PeriphClockCmd+0x3c>)
200010c4:	6c59      	ldr	r1, [r3, #68]	; 0x44
200010c6:	4b08      	ldr	r3, [pc, #32]	; (200010e8 <RCC_APB2PeriphClockCmd+0x3c>)
200010c8:	687a      	ldr	r2, [r7, #4]
200010ca:	430a      	orrs	r2, r1
200010cc:	645a      	str	r2, [r3, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
200010ce:	e006      	b.n	200010de <RCC_APB2PeriphClockCmd+0x32>
    RCC->APB2ENR &= ~RCC_APB2Periph;
200010d0:	4b05      	ldr	r3, [pc, #20]	; (200010e8 <RCC_APB2PeriphClockCmd+0x3c>)
200010d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
200010d4:	687b      	ldr	r3, [r7, #4]
200010d6:	43d9      	mvns	r1, r3
200010d8:	4b03      	ldr	r3, [pc, #12]	; (200010e8 <RCC_APB2PeriphClockCmd+0x3c>)
200010da:	400a      	ands	r2, r1
200010dc:	645a      	str	r2, [r3, #68]	; 0x44
}
200010de:	46c0      	nop			; (mov r8, r8)
200010e0:	46bd      	mov	sp, r7
200010e2:	b002      	add	sp, #8
200010e4:	bd80      	pop	{r7, pc}
200010e6:	46c0      	nop			; (mov r8, r8)
200010e8:	40023800 	andmi	r3, r2, r0, lsl #16

200010ec <RCC_AHB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
200010ec:	b580      	push	{r7, lr}
200010ee:	b082      	sub	sp, #8
200010f0:	af00      	add	r7, sp, #0
200010f2:	6078      	str	r0, [r7, #4]
200010f4:	000a      	movs	r2, r1
200010f6:	1cfb      	adds	r3, r7, #3
200010f8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
200010fa:	1cfb      	adds	r3, r7, #3
200010fc:	781b      	ldrb	r3, [r3, #0]
200010fe:	2b00      	cmp	r3, #0
20001100:	d006      	beq.n	20001110 <RCC_AHB1PeriphResetCmd+0x24>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
20001102:	4b09      	ldr	r3, [pc, #36]	; (20001128 <RCC_AHB1PeriphResetCmd+0x3c>)
20001104:	6919      	ldr	r1, [r3, #16]
20001106:	4b08      	ldr	r3, [pc, #32]	; (20001128 <RCC_AHB1PeriphResetCmd+0x3c>)
20001108:	687a      	ldr	r2, [r7, #4]
2000110a:	430a      	orrs	r2, r1
2000110c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
  }
}
2000110e:	e006      	b.n	2000111e <RCC_AHB1PeriphResetCmd+0x32>
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
20001110:	4b05      	ldr	r3, [pc, #20]	; (20001128 <RCC_AHB1PeriphResetCmd+0x3c>)
20001112:	691a      	ldr	r2, [r3, #16]
20001114:	687b      	ldr	r3, [r7, #4]
20001116:	43d9      	mvns	r1, r3
20001118:	4b03      	ldr	r3, [pc, #12]	; (20001128 <RCC_AHB1PeriphResetCmd+0x3c>)
2000111a:	400a      	ands	r2, r1
2000111c:	611a      	str	r2, [r3, #16]
}
2000111e:	46c0      	nop			; (mov r8, r8)
20001120:	46bd      	mov	sp, r7
20001122:	b002      	add	sp, #8
20001124:	bd80      	pop	{r7, pc}
20001126:	46c0      	nop			; (mov r8, r8)
20001128:	40023800 	andmi	r3, r2, r0, lsl #16

2000112c <RCC_AHB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
2000112c:	b580      	push	{r7, lr}
2000112e:	b082      	sub	sp, #8
20001130:	af00      	add	r7, sp, #0
20001132:	6078      	str	r0, [r7, #4]
20001134:	000a      	movs	r2, r1
20001136:	1cfb      	adds	r3, r7, #3
20001138:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
2000113a:	1cfb      	adds	r3, r7, #3
2000113c:	781b      	ldrb	r3, [r3, #0]
2000113e:	2b00      	cmp	r3, #0
20001140:	d006      	beq.n	20001150 <RCC_AHB2PeriphResetCmd+0x24>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
20001142:	4b09      	ldr	r3, [pc, #36]	; (20001168 <RCC_AHB2PeriphResetCmd+0x3c>)
20001144:	6959      	ldr	r1, [r3, #20]
20001146:	4b08      	ldr	r3, [pc, #32]	; (20001168 <RCC_AHB2PeriphResetCmd+0x3c>)
20001148:	687a      	ldr	r2, [r7, #4]
2000114a:	430a      	orrs	r2, r1
2000114c:	615a      	str	r2, [r3, #20]
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
  }
}
2000114e:	e006      	b.n	2000115e <RCC_AHB2PeriphResetCmd+0x32>
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
20001150:	4b05      	ldr	r3, [pc, #20]	; (20001168 <RCC_AHB2PeriphResetCmd+0x3c>)
20001152:	695a      	ldr	r2, [r3, #20]
20001154:	687b      	ldr	r3, [r7, #4]
20001156:	43d9      	mvns	r1, r3
20001158:	4b03      	ldr	r3, [pc, #12]	; (20001168 <RCC_AHB2PeriphResetCmd+0x3c>)
2000115a:	400a      	ands	r2, r1
2000115c:	615a      	str	r2, [r3, #20]
}
2000115e:	46c0      	nop			; (mov r8, r8)
20001160:	46bd      	mov	sp, r7
20001162:	b002      	add	sp, #8
20001164:	bd80      	pop	{r7, pc}
20001166:	46c0      	nop			; (mov r8, r8)
20001168:	40023800 	andmi	r3, r2, r0, lsl #16

2000116c <RCC_AHB3PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
2000116c:	b580      	push	{r7, lr}
2000116e:	b082      	sub	sp, #8
20001170:	af00      	add	r7, sp, #0
20001172:	6078      	str	r0, [r7, #4]
20001174:	000a      	movs	r2, r1
20001176:	1cfb      	adds	r3, r7, #3
20001178:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
2000117a:	1cfb      	adds	r3, r7, #3
2000117c:	781b      	ldrb	r3, [r3, #0]
2000117e:	2b00      	cmp	r3, #0
20001180:	d006      	beq.n	20001190 <RCC_AHB3PeriphResetCmd+0x24>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
20001182:	4b09      	ldr	r3, [pc, #36]	; (200011a8 <RCC_AHB3PeriphResetCmd+0x3c>)
20001184:	6999      	ldr	r1, [r3, #24]
20001186:	4b08      	ldr	r3, [pc, #32]	; (200011a8 <RCC_AHB3PeriphResetCmd+0x3c>)
20001188:	687a      	ldr	r2, [r7, #4]
2000118a:	430a      	orrs	r2, r1
2000118c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
  }
}
2000118e:	e006      	b.n	2000119e <RCC_AHB3PeriphResetCmd+0x32>
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
20001190:	4b05      	ldr	r3, [pc, #20]	; (200011a8 <RCC_AHB3PeriphResetCmd+0x3c>)
20001192:	699a      	ldr	r2, [r3, #24]
20001194:	687b      	ldr	r3, [r7, #4]
20001196:	43d9      	mvns	r1, r3
20001198:	4b03      	ldr	r3, [pc, #12]	; (200011a8 <RCC_AHB3PeriphResetCmd+0x3c>)
2000119a:	400a      	ands	r2, r1
2000119c:	619a      	str	r2, [r3, #24]
}
2000119e:	46c0      	nop			; (mov r8, r8)
200011a0:	46bd      	mov	sp, r7
200011a2:	b002      	add	sp, #8
200011a4:	bd80      	pop	{r7, pc}
200011a6:	46c0      	nop			; (mov r8, r8)
200011a8:	40023800 	andmi	r3, r2, r0, lsl #16

200011ac <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
200011ac:	b580      	push	{r7, lr}
200011ae:	b082      	sub	sp, #8
200011b0:	af00      	add	r7, sp, #0
200011b2:	6078      	str	r0, [r7, #4]
200011b4:	000a      	movs	r2, r1
200011b6:	1cfb      	adds	r3, r7, #3
200011b8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
200011ba:	1cfb      	adds	r3, r7, #3
200011bc:	781b      	ldrb	r3, [r3, #0]
200011be:	2b00      	cmp	r3, #0
200011c0:	d006      	beq.n	200011d0 <RCC_APB1PeriphResetCmd+0x24>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
200011c2:	4b09      	ldr	r3, [pc, #36]	; (200011e8 <RCC_APB1PeriphResetCmd+0x3c>)
200011c4:	6a19      	ldr	r1, [r3, #32]
200011c6:	4b08      	ldr	r3, [pc, #32]	; (200011e8 <RCC_APB1PeriphResetCmd+0x3c>)
200011c8:	687a      	ldr	r2, [r7, #4]
200011ca:	430a      	orrs	r2, r1
200011cc:	621a      	str	r2, [r3, #32]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
200011ce:	e006      	b.n	200011de <RCC_APB1PeriphResetCmd+0x32>
    RCC->APB1RSTR &= ~RCC_APB1Periph;
200011d0:	4b05      	ldr	r3, [pc, #20]	; (200011e8 <RCC_APB1PeriphResetCmd+0x3c>)
200011d2:	6a1a      	ldr	r2, [r3, #32]
200011d4:	687b      	ldr	r3, [r7, #4]
200011d6:	43d9      	mvns	r1, r3
200011d8:	4b03      	ldr	r3, [pc, #12]	; (200011e8 <RCC_APB1PeriphResetCmd+0x3c>)
200011da:	400a      	ands	r2, r1
200011dc:	621a      	str	r2, [r3, #32]
}
200011de:	46c0      	nop			; (mov r8, r8)
200011e0:	46bd      	mov	sp, r7
200011e2:	b002      	add	sp, #8
200011e4:	bd80      	pop	{r7, pc}
200011e6:	46c0      	nop			; (mov r8, r8)
200011e8:	40023800 	andmi	r3, r2, r0, lsl #16

200011ec <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
200011ec:	b580      	push	{r7, lr}
200011ee:	b082      	sub	sp, #8
200011f0:	af00      	add	r7, sp, #0
200011f2:	6078      	str	r0, [r7, #4]
200011f4:	000a      	movs	r2, r1
200011f6:	1cfb      	adds	r3, r7, #3
200011f8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
200011fa:	1cfb      	adds	r3, r7, #3
200011fc:	781b      	ldrb	r3, [r3, #0]
200011fe:	2b00      	cmp	r3, #0
20001200:	d006      	beq.n	20001210 <RCC_APB2PeriphResetCmd+0x24>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
20001202:	4b09      	ldr	r3, [pc, #36]	; (20001228 <RCC_APB2PeriphResetCmd+0x3c>)
20001204:	6a59      	ldr	r1, [r3, #36]	; 0x24
20001206:	4b08      	ldr	r3, [pc, #32]	; (20001228 <RCC_APB2PeriphResetCmd+0x3c>)
20001208:	687a      	ldr	r2, [r7, #4]
2000120a:	430a      	orrs	r2, r1
2000120c:	625a      	str	r2, [r3, #36]	; 0x24
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
2000120e:	e006      	b.n	2000121e <RCC_APB2PeriphResetCmd+0x32>
    RCC->APB2RSTR &= ~RCC_APB2Periph;
20001210:	4b05      	ldr	r3, [pc, #20]	; (20001228 <RCC_APB2PeriphResetCmd+0x3c>)
20001212:	6a5a      	ldr	r2, [r3, #36]	; 0x24
20001214:	687b      	ldr	r3, [r7, #4]
20001216:	43d9      	mvns	r1, r3
20001218:	4b03      	ldr	r3, [pc, #12]	; (20001228 <RCC_APB2PeriphResetCmd+0x3c>)
2000121a:	400a      	ands	r2, r1
2000121c:	625a      	str	r2, [r3, #36]	; 0x24
}
2000121e:	46c0      	nop			; (mov r8, r8)
20001220:	46bd      	mov	sp, r7
20001222:	b002      	add	sp, #8
20001224:	bd80      	pop	{r7, pc}
20001226:	46c0      	nop			; (mov r8, r8)
20001228:	40023800 	andmi	r3, r2, r0, lsl #16

2000122c <RCC_AHB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
2000122c:	b580      	push	{r7, lr}
2000122e:	b082      	sub	sp, #8
20001230:	af00      	add	r7, sp, #0
20001232:	6078      	str	r0, [r7, #4]
20001234:	000a      	movs	r2, r1
20001236:	1cfb      	adds	r3, r7, #3
20001238:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
2000123a:	1cfb      	adds	r3, r7, #3
2000123c:	781b      	ldrb	r3, [r3, #0]
2000123e:	2b00      	cmp	r3, #0
20001240:	d006      	beq.n	20001250 <RCC_AHB1PeriphClockLPModeCmd+0x24>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
20001242:	4b09      	ldr	r3, [pc, #36]	; (20001268 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
20001244:	6d19      	ldr	r1, [r3, #80]	; 0x50
20001246:	4b08      	ldr	r3, [pc, #32]	; (20001268 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
20001248:	687a      	ldr	r2, [r7, #4]
2000124a:	430a      	orrs	r2, r1
2000124c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
  }
}
2000124e:	e006      	b.n	2000125e <RCC_AHB1PeriphClockLPModeCmd+0x32>
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
20001250:	4b05      	ldr	r3, [pc, #20]	; (20001268 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
20001252:	6d1a      	ldr	r2, [r3, #80]	; 0x50
20001254:	687b      	ldr	r3, [r7, #4]
20001256:	43d9      	mvns	r1, r3
20001258:	4b03      	ldr	r3, [pc, #12]	; (20001268 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
2000125a:	400a      	ands	r2, r1
2000125c:	651a      	str	r2, [r3, #80]	; 0x50
}
2000125e:	46c0      	nop			; (mov r8, r8)
20001260:	46bd      	mov	sp, r7
20001262:	b002      	add	sp, #8
20001264:	bd80      	pop	{r7, pc}
20001266:	46c0      	nop			; (mov r8, r8)
20001268:	40023800 	andmi	r3, r2, r0, lsl #16

2000126c <RCC_AHB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
2000126c:	b580      	push	{r7, lr}
2000126e:	b082      	sub	sp, #8
20001270:	af00      	add	r7, sp, #0
20001272:	6078      	str	r0, [r7, #4]
20001274:	000a      	movs	r2, r1
20001276:	1cfb      	adds	r3, r7, #3
20001278:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
2000127a:	1cfb      	adds	r3, r7, #3
2000127c:	781b      	ldrb	r3, [r3, #0]
2000127e:	2b00      	cmp	r3, #0
20001280:	d006      	beq.n	20001290 <RCC_AHB2PeriphClockLPModeCmd+0x24>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
20001282:	4b09      	ldr	r3, [pc, #36]	; (200012a8 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
20001284:	6d59      	ldr	r1, [r3, #84]	; 0x54
20001286:	4b08      	ldr	r3, [pc, #32]	; (200012a8 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
20001288:	687a      	ldr	r2, [r7, #4]
2000128a:	430a      	orrs	r2, r1
2000128c:	655a      	str	r2, [r3, #84]	; 0x54
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
  }
}
2000128e:	e006      	b.n	2000129e <RCC_AHB2PeriphClockLPModeCmd+0x32>
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
20001290:	4b05      	ldr	r3, [pc, #20]	; (200012a8 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
20001292:	6d5a      	ldr	r2, [r3, #84]	; 0x54
20001294:	687b      	ldr	r3, [r7, #4]
20001296:	43d9      	mvns	r1, r3
20001298:	4b03      	ldr	r3, [pc, #12]	; (200012a8 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
2000129a:	400a      	ands	r2, r1
2000129c:	655a      	str	r2, [r3, #84]	; 0x54
}
2000129e:	46c0      	nop			; (mov r8, r8)
200012a0:	46bd      	mov	sp, r7
200012a2:	b002      	add	sp, #8
200012a4:	bd80      	pop	{r7, pc}
200012a6:	46c0      	nop			; (mov r8, r8)
200012a8:	40023800 	andmi	r3, r2, r0, lsl #16

200012ac <RCC_AHB3PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
200012ac:	b580      	push	{r7, lr}
200012ae:	b082      	sub	sp, #8
200012b0:	af00      	add	r7, sp, #0
200012b2:	6078      	str	r0, [r7, #4]
200012b4:	000a      	movs	r2, r1
200012b6:	1cfb      	adds	r3, r7, #3
200012b8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
200012ba:	1cfb      	adds	r3, r7, #3
200012bc:	781b      	ldrb	r3, [r3, #0]
200012be:	2b00      	cmp	r3, #0
200012c0:	d006      	beq.n	200012d0 <RCC_AHB3PeriphClockLPModeCmd+0x24>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
200012c2:	4b09      	ldr	r3, [pc, #36]	; (200012e8 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
200012c4:	6d99      	ldr	r1, [r3, #88]	; 0x58
200012c6:	4b08      	ldr	r3, [pc, #32]	; (200012e8 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
200012c8:	687a      	ldr	r2, [r7, #4]
200012ca:	430a      	orrs	r2, r1
200012cc:	659a      	str	r2, [r3, #88]	; 0x58
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
  }
}
200012ce:	e006      	b.n	200012de <RCC_AHB3PeriphClockLPModeCmd+0x32>
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
200012d0:	4b05      	ldr	r3, [pc, #20]	; (200012e8 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
200012d2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
200012d4:	687b      	ldr	r3, [r7, #4]
200012d6:	43d9      	mvns	r1, r3
200012d8:	4b03      	ldr	r3, [pc, #12]	; (200012e8 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
200012da:	400a      	ands	r2, r1
200012dc:	659a      	str	r2, [r3, #88]	; 0x58
}
200012de:	46c0      	nop			; (mov r8, r8)
200012e0:	46bd      	mov	sp, r7
200012e2:	b002      	add	sp, #8
200012e4:	bd80      	pop	{r7, pc}
200012e6:	46c0      	nop			; (mov r8, r8)
200012e8:	40023800 	andmi	r3, r2, r0, lsl #16

200012ec <RCC_APB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
200012ec:	b580      	push	{r7, lr}
200012ee:	b082      	sub	sp, #8
200012f0:	af00      	add	r7, sp, #0
200012f2:	6078      	str	r0, [r7, #4]
200012f4:	000a      	movs	r2, r1
200012f6:	1cfb      	adds	r3, r7, #3
200012f8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
200012fa:	1cfb      	adds	r3, r7, #3
200012fc:	781b      	ldrb	r3, [r3, #0]
200012fe:	2b00      	cmp	r3, #0
20001300:	d006      	beq.n	20001310 <RCC_APB1PeriphClockLPModeCmd+0x24>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
20001302:	4b09      	ldr	r3, [pc, #36]	; (20001328 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
20001304:	6e19      	ldr	r1, [r3, #96]	; 0x60
20001306:	4b08      	ldr	r3, [pc, #32]	; (20001328 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
20001308:	687a      	ldr	r2, [r7, #4]
2000130a:	430a      	orrs	r2, r1
2000130c:	661a      	str	r2, [r3, #96]	; 0x60
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
  }
}
2000130e:	e006      	b.n	2000131e <RCC_APB1PeriphClockLPModeCmd+0x32>
    RCC->APB1LPENR &= ~RCC_APB1Periph;
20001310:	4b05      	ldr	r3, [pc, #20]	; (20001328 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
20001312:	6e1a      	ldr	r2, [r3, #96]	; 0x60
20001314:	687b      	ldr	r3, [r7, #4]
20001316:	43d9      	mvns	r1, r3
20001318:	4b03      	ldr	r3, [pc, #12]	; (20001328 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
2000131a:	400a      	ands	r2, r1
2000131c:	661a      	str	r2, [r3, #96]	; 0x60
}
2000131e:	46c0      	nop			; (mov r8, r8)
20001320:	46bd      	mov	sp, r7
20001322:	b002      	add	sp, #8
20001324:	bd80      	pop	{r7, pc}
20001326:	46c0      	nop			; (mov r8, r8)
20001328:	40023800 	andmi	r3, r2, r0, lsl #16

2000132c <RCC_APB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
2000132c:	b580      	push	{r7, lr}
2000132e:	b082      	sub	sp, #8
20001330:	af00      	add	r7, sp, #0
20001332:	6078      	str	r0, [r7, #4]
20001334:	000a      	movs	r2, r1
20001336:	1cfb      	adds	r3, r7, #3
20001338:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
2000133a:	1cfb      	adds	r3, r7, #3
2000133c:	781b      	ldrb	r3, [r3, #0]
2000133e:	2b00      	cmp	r3, #0
20001340:	d006      	beq.n	20001350 <RCC_APB2PeriphClockLPModeCmd+0x24>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
20001342:	4b09      	ldr	r3, [pc, #36]	; (20001368 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
20001344:	6e59      	ldr	r1, [r3, #100]	; 0x64
20001346:	4b08      	ldr	r3, [pc, #32]	; (20001368 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
20001348:	687a      	ldr	r2, [r7, #4]
2000134a:	430a      	orrs	r2, r1
2000134c:	665a      	str	r2, [r3, #100]	; 0x64
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
  }
}
2000134e:	e006      	b.n	2000135e <RCC_APB2PeriphClockLPModeCmd+0x32>
    RCC->APB2LPENR &= ~RCC_APB2Periph;
20001350:	4b05      	ldr	r3, [pc, #20]	; (20001368 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
20001352:	6e5a      	ldr	r2, [r3, #100]	; 0x64
20001354:	687b      	ldr	r3, [r7, #4]
20001356:	43d9      	mvns	r1, r3
20001358:	4b03      	ldr	r3, [pc, #12]	; (20001368 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
2000135a:	400a      	ands	r2, r1
2000135c:	665a      	str	r2, [r3, #100]	; 0x64
}
2000135e:	46c0      	nop			; (mov r8, r8)
20001360:	46bd      	mov	sp, r7
20001362:	b002      	add	sp, #8
20001364:	bd80      	pop	{r7, pc}
20001366:	46c0      	nop			; (mov r8, r8)
20001368:	40023800 	andmi	r3, r2, r0, lsl #16

2000136c <RCC_LSEModeConfig>:
  *            @arg RCC_LSE_LOWPOWER_MODE:  LSE oscillator in low power mode.
  *            @arg RCC_LSE_HIGHDRIVE_MODE: LSE oscillator in High Drive mode.
  * @retval None
  */
void RCC_LSEModeConfig(uint8_t RCC_Mode)
{
2000136c:	b580      	push	{r7, lr}
2000136e:	b082      	sub	sp, #8
20001370:	af00      	add	r7, sp, #0
20001372:	0002      	movs	r2, r0
20001374:	1dfb      	adds	r3, r7, #7
20001376:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_LSE_MODE(RCC_Mode));
  
  if(RCC_Mode == RCC_LSE_HIGHDRIVE_MODE)
20001378:	1dfb      	adds	r3, r7, #7
2000137a:	781b      	ldrb	r3, [r3, #0]
2000137c:	2b01      	cmp	r3, #1
2000137e:	d106      	bne.n	2000138e <RCC_LSEModeConfig+0x22>
  {
    SET_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
20001380:	4b08      	ldr	r3, [pc, #32]	; (200013a4 <RCC_LSEModeConfig+0x38>)
20001382:	6f1a      	ldr	r2, [r3, #112]	; 0x70
20001384:	4b07      	ldr	r3, [pc, #28]	; (200013a4 <RCC_LSEModeConfig+0x38>)
20001386:	2108      	movs	r1, #8
20001388:	430a      	orrs	r2, r1
2000138a:	671a      	str	r2, [r3, #112]	; 0x70
  }
  else
  {
    CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
  }
}
2000138c:	e005      	b.n	2000139a <RCC_LSEModeConfig+0x2e>
    CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
2000138e:	4b05      	ldr	r3, [pc, #20]	; (200013a4 <RCC_LSEModeConfig+0x38>)
20001390:	6f1a      	ldr	r2, [r3, #112]	; 0x70
20001392:	4b04      	ldr	r3, [pc, #16]	; (200013a4 <RCC_LSEModeConfig+0x38>)
20001394:	2108      	movs	r1, #8
20001396:	438a      	bics	r2, r1
20001398:	671a      	str	r2, [r3, #112]	; 0x70
}
2000139a:	46c0      	nop			; (mov r8, r8)
2000139c:	46bd      	mov	sp, r7
2000139e:	b002      	add	sp, #8
200013a0:	bd80      	pop	{r7, pc}
200013a2:	46c0      	nop			; (mov r8, r8)
200013a4:	40023800 	andmi	r3, r2, r0, lsl #16

200013a8 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
200013a8:	b580      	push	{r7, lr}
200013aa:	b082      	sub	sp, #8
200013ac:	af00      	add	r7, sp, #0
200013ae:	0002      	movs	r2, r0
200013b0:	1dfb      	adds	r3, r7, #7
200013b2:	701a      	strb	r2, [r3, #0]
200013b4:	1dbb      	adds	r3, r7, #6
200013b6:	1c0a      	adds	r2, r1, #0
200013b8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
200013ba:	1dbb      	adds	r3, r7, #6
200013bc:	781b      	ldrb	r3, [r3, #0]
200013be:	2b00      	cmp	r3, #0
200013c0:	d009      	beq.n	200013d6 <RCC_ITConfig+0x2e>
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
200013c2:	4b0c      	ldr	r3, [pc, #48]	; (200013f4 <RCC_ITConfig+0x4c>)
200013c4:	781b      	ldrb	r3, [r3, #0]
200013c6:	b2da      	uxtb	r2, r3
200013c8:	490a      	ldr	r1, [pc, #40]	; (200013f4 <RCC_ITConfig+0x4c>)
200013ca:	1dfb      	adds	r3, r7, #7
200013cc:	781b      	ldrb	r3, [r3, #0]
200013ce:	4313      	orrs	r3, r2
200013d0:	b2db      	uxtb	r3, r3
200013d2:	700b      	strb	r3, [r1, #0]
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
  }
}
200013d4:	e00a      	b.n	200013ec <RCC_ITConfig+0x44>
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
200013d6:	4b07      	ldr	r3, [pc, #28]	; (200013f4 <RCC_ITConfig+0x4c>)
200013d8:	781b      	ldrb	r3, [r3, #0]
200013da:	b2db      	uxtb	r3, r3
200013dc:	1dfa      	adds	r2, r7, #7
200013de:	7812      	ldrb	r2, [r2, #0]
200013e0:	43d2      	mvns	r2, r2
200013e2:	b2d2      	uxtb	r2, r2
200013e4:	4903      	ldr	r1, [pc, #12]	; (200013f4 <RCC_ITConfig+0x4c>)
200013e6:	4013      	ands	r3, r2
200013e8:	b2db      	uxtb	r3, r3
200013ea:	700b      	strb	r3, [r1, #0]
}
200013ec:	46c0      	nop			; (mov r8, r8)
200013ee:	46bd      	mov	sp, r7
200013f0:	b002      	add	sp, #8
200013f2:	bd80      	pop	{r7, pc}
200013f4:	4002380d 	andmi	r3, r2, sp, lsl #16

200013f8 <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
200013f8:	b580      	push	{r7, lr}
200013fa:	b086      	sub	sp, #24
200013fc:	af00      	add	r7, sp, #0
200013fe:	0002      	movs	r2, r0
20001400:	1dfb      	adds	r3, r7, #7
20001402:	701a      	strb	r2, [r3, #0]
  uint32_t tmp = 0;
20001404:	2300      	movs	r3, #0
20001406:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
20001408:	2300      	movs	r3, #0
2000140a:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
2000140c:	2313      	movs	r3, #19
2000140e:	18fb      	adds	r3, r7, r3
20001410:	2200      	movs	r2, #0
20001412:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
20001414:	1dfb      	adds	r3, r7, #7
20001416:	781b      	ldrb	r3, [r3, #0]
20001418:	095b      	lsrs	r3, r3, #5
2000141a:	b2db      	uxtb	r3, r3
2000141c:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
2000141e:	68fb      	ldr	r3, [r7, #12]
20001420:	2b01      	cmp	r3, #1
20001422:	d103      	bne.n	2000142c <RCC_GetFlagStatus+0x34>
  {
    statusreg = RCC->CR;
20001424:	4b14      	ldr	r3, [pc, #80]	; (20001478 <RCC_GetFlagStatus+0x80>)
20001426:	681b      	ldr	r3, [r3, #0]
20001428:	617b      	str	r3, [r7, #20]
2000142a:	e009      	b.n	20001440 <RCC_GetFlagStatus+0x48>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
2000142c:	68fb      	ldr	r3, [r7, #12]
2000142e:	2b02      	cmp	r3, #2
20001430:	d103      	bne.n	2000143a <RCC_GetFlagStatus+0x42>
  {
    statusreg = RCC->BDCR;
20001432:	4b11      	ldr	r3, [pc, #68]	; (20001478 <RCC_GetFlagStatus+0x80>)
20001434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
20001436:	617b      	str	r3, [r7, #20]
20001438:	e002      	b.n	20001440 <RCC_GetFlagStatus+0x48>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
2000143a:	4b0f      	ldr	r3, [pc, #60]	; (20001478 <RCC_GetFlagStatus+0x80>)
2000143c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
2000143e:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
20001440:	1dfb      	adds	r3, r7, #7
20001442:	781b      	ldrb	r3, [r3, #0]
20001444:	221f      	movs	r2, #31
20001446:	4013      	ands	r3, r2
20001448:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
2000144a:	697a      	ldr	r2, [r7, #20]
2000144c:	68fb      	ldr	r3, [r7, #12]
2000144e:	40da      	lsrs	r2, r3
20001450:	0013      	movs	r3, r2
20001452:	2201      	movs	r2, #1
20001454:	4013      	ands	r3, r2
20001456:	d004      	beq.n	20001462 <RCC_GetFlagStatus+0x6a>
  {
    bitstatus = SET;
20001458:	2313      	movs	r3, #19
2000145a:	18fb      	adds	r3, r7, r3
2000145c:	2201      	movs	r2, #1
2000145e:	701a      	strb	r2, [r3, #0]
20001460:	e003      	b.n	2000146a <RCC_GetFlagStatus+0x72>
  }
  else
  {
    bitstatus = RESET;
20001462:	2313      	movs	r3, #19
20001464:	18fb      	adds	r3, r7, r3
20001466:	2200      	movs	r2, #0
20001468:	701a      	strb	r2, [r3, #0]
  }
  /* Return the flag status */
  return bitstatus;
2000146a:	2313      	movs	r3, #19
2000146c:	18fb      	adds	r3, r7, r3
2000146e:	781b      	ldrb	r3, [r3, #0]
}
20001470:	0018      	movs	r0, r3
20001472:	46bd      	mov	sp, r7
20001474:	b006      	add	sp, #24
20001476:	bd80      	pop	{r7, pc}
20001478:	40023800 	andmi	r3, r2, r0, lsl #16

2000147c <RCC_ClearFlag>:
  *         RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
2000147c:	b580      	push	{r7, lr}
2000147e:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
20001480:	4b04      	ldr	r3, [pc, #16]	; (20001494 <RCC_ClearFlag+0x18>)
20001482:	6f5a      	ldr	r2, [r3, #116]	; 0x74
20001484:	4b03      	ldr	r3, [pc, #12]	; (20001494 <RCC_ClearFlag+0x18>)
20001486:	2180      	movs	r1, #128	; 0x80
20001488:	0449      	lsls	r1, r1, #17
2000148a:	430a      	orrs	r2, r1
2000148c:	675a      	str	r2, [r3, #116]	; 0x74
}
2000148e:	46c0      	nop			; (mov r8, r8)
20001490:	46bd      	mov	sp, r7
20001492:	bd80      	pop	{r7, pc}
20001494:	40023800 	andmi	r3, r2, r0, lsl #16

20001498 <RCC_GetITStatus>:
  *            @arg RCC_IT_PLLSAIRDY: PLLSAI clock ready interrupt (only for STM32F42xxx/43xxx/446xx/469xx/479xx devices)
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
20001498:	b580      	push	{r7, lr}
2000149a:	b084      	sub	sp, #16
2000149c:	af00      	add	r7, sp, #0
2000149e:	0002      	movs	r2, r0
200014a0:	1dfb      	adds	r3, r7, #7
200014a2:	701a      	strb	r2, [r3, #0]
  ITStatus bitstatus = RESET;
200014a4:	210f      	movs	r1, #15
200014a6:	187b      	adds	r3, r7, r1
200014a8:	2200      	movs	r2, #0
200014aa:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
200014ac:	4b0a      	ldr	r3, [pc, #40]	; (200014d8 <RCC_GetITStatus+0x40>)
200014ae:	68db      	ldr	r3, [r3, #12]
200014b0:	1dfa      	adds	r2, r7, #7
200014b2:	7812      	ldrb	r2, [r2, #0]
200014b4:	4013      	ands	r3, r2
200014b6:	d003      	beq.n	200014c0 <RCC_GetITStatus+0x28>
  {
    bitstatus = SET;
200014b8:	187b      	adds	r3, r7, r1
200014ba:	2201      	movs	r2, #1
200014bc:	701a      	strb	r2, [r3, #0]
200014be:	e003      	b.n	200014c8 <RCC_GetITStatus+0x30>
  }
  else
  {
    bitstatus = RESET;
200014c0:	230f      	movs	r3, #15
200014c2:	18fb      	adds	r3, r7, r3
200014c4:	2200      	movs	r2, #0
200014c6:	701a      	strb	r2, [r3, #0]
  }
  /* Return the RCC_IT status */
  return  bitstatus;
200014c8:	230f      	movs	r3, #15
200014ca:	18fb      	adds	r3, r7, r3
200014cc:	781b      	ldrb	r3, [r3, #0]
}
200014ce:	0018      	movs	r0, r3
200014d0:	46bd      	mov	sp, r7
200014d2:	b004      	add	sp, #16
200014d4:	bd80      	pop	{r7, pc}
200014d6:	46c0      	nop			; (mov r8, r8)
200014d8:	40023800 	andmi	r3, r2, r0, lsl #16

200014dc <RCC_ClearITPendingBit>:
  *            @arg RCC_IT_PLLSAIRDY: PLLSAI ready interrupt (only for STM32F42xxx/43xxx/446xx/469xx/479xx devices) 
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
200014dc:	b580      	push	{r7, lr}
200014de:	b082      	sub	sp, #8
200014e0:	af00      	add	r7, sp, #0
200014e2:	0002      	movs	r2, r0
200014e4:	1dfb      	adds	r3, r7, #7
200014e6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
200014e8:	4a03      	ldr	r2, [pc, #12]	; (200014f8 <RCC_ClearITPendingBit+0x1c>)
200014ea:	1dfb      	adds	r3, r7, #7
200014ec:	781b      	ldrb	r3, [r3, #0]
200014ee:	7013      	strb	r3, [r2, #0]
}
200014f0:	46c0      	nop			; (mov r8, r8)
200014f2:	46bd      	mov	sp, r7
200014f4:	b002      	add	sp, #8
200014f6:	bd80      	pop	{r7, pc}
200014f8:	4002380e 	andmi	r3, r2, lr, lsl #16

200014fc <TIM_DeInit>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval None

  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
200014fc:	b580      	push	{r7, lr}
200014fe:	b082      	sub	sp, #8
20001500:	af00      	add	r7, sp, #0
20001502:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
20001504:	687b      	ldr	r3, [r7, #4]
20001506:	4a64      	ldr	r2, [pc, #400]	; (20001698 <TIM_DeInit+0x19c>)
20001508:	4293      	cmp	r3, r2
2000150a:	d108      	bne.n	2000151e <TIM_DeInit+0x22>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
2000150c:	2101      	movs	r1, #1
2000150e:	2001      	movs	r0, #1
20001510:	f7ff fe6c 	bl	200011ec <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
20001514:	2100      	movs	r1, #0
20001516:	2001      	movs	r0, #1
20001518:	f7ff fe68 	bl	200011ec <RCC_APB2PeriphResetCmd>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
2000151c:	e0b8      	b.n	20001690 <TIM_DeInit+0x194>
  else if (TIMx == TIM2) 
2000151e:	687a      	ldr	r2, [r7, #4]
20001520:	2380      	movs	r3, #128	; 0x80
20001522:	05db      	lsls	r3, r3, #23
20001524:	429a      	cmp	r2, r3
20001526:	d108      	bne.n	2000153a <TIM_DeInit+0x3e>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
20001528:	2101      	movs	r1, #1
2000152a:	2001      	movs	r0, #1
2000152c:	f7ff fe3e 	bl	200011ac <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
20001530:	2100      	movs	r1, #0
20001532:	2001      	movs	r0, #1
20001534:	f7ff fe3a 	bl	200011ac <RCC_APB1PeriphResetCmd>
}
20001538:	e0aa      	b.n	20001690 <TIM_DeInit+0x194>
  else if (TIMx == TIM3)
2000153a:	687b      	ldr	r3, [r7, #4]
2000153c:	4a57      	ldr	r2, [pc, #348]	; (2000169c <TIM_DeInit+0x1a0>)
2000153e:	4293      	cmp	r3, r2
20001540:	d108      	bne.n	20001554 <TIM_DeInit+0x58>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
20001542:	2101      	movs	r1, #1
20001544:	2002      	movs	r0, #2
20001546:	f7ff fe31 	bl	200011ac <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
2000154a:	2100      	movs	r1, #0
2000154c:	2002      	movs	r0, #2
2000154e:	f7ff fe2d 	bl	200011ac <RCC_APB1PeriphResetCmd>
}
20001552:	e09d      	b.n	20001690 <TIM_DeInit+0x194>
  else if (TIMx == TIM4)
20001554:	687b      	ldr	r3, [r7, #4]
20001556:	4a52      	ldr	r2, [pc, #328]	; (200016a0 <TIM_DeInit+0x1a4>)
20001558:	4293      	cmp	r3, r2
2000155a:	d108      	bne.n	2000156e <TIM_DeInit+0x72>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
2000155c:	2101      	movs	r1, #1
2000155e:	2004      	movs	r0, #4
20001560:	f7ff fe24 	bl	200011ac <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
20001564:	2100      	movs	r1, #0
20001566:	2004      	movs	r0, #4
20001568:	f7ff fe20 	bl	200011ac <RCC_APB1PeriphResetCmd>
}
2000156c:	e090      	b.n	20001690 <TIM_DeInit+0x194>
  else if (TIMx == TIM5)
2000156e:	687b      	ldr	r3, [r7, #4]
20001570:	4a4c      	ldr	r2, [pc, #304]	; (200016a4 <TIM_DeInit+0x1a8>)
20001572:	4293      	cmp	r3, r2
20001574:	d108      	bne.n	20001588 <TIM_DeInit+0x8c>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
20001576:	2101      	movs	r1, #1
20001578:	2008      	movs	r0, #8
2000157a:	f7ff fe17 	bl	200011ac <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
2000157e:	2100      	movs	r1, #0
20001580:	2008      	movs	r0, #8
20001582:	f7ff fe13 	bl	200011ac <RCC_APB1PeriphResetCmd>
}
20001586:	e083      	b.n	20001690 <TIM_DeInit+0x194>
  else if (TIMx == TIM6)  
20001588:	687b      	ldr	r3, [r7, #4]
2000158a:	4a47      	ldr	r2, [pc, #284]	; (200016a8 <TIM_DeInit+0x1ac>)
2000158c:	4293      	cmp	r3, r2
2000158e:	d108      	bne.n	200015a2 <TIM_DeInit+0xa6>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
20001590:	2101      	movs	r1, #1
20001592:	2010      	movs	r0, #16
20001594:	f7ff fe0a 	bl	200011ac <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
20001598:	2100      	movs	r1, #0
2000159a:	2010      	movs	r0, #16
2000159c:	f7ff fe06 	bl	200011ac <RCC_APB1PeriphResetCmd>
}
200015a0:	e076      	b.n	20001690 <TIM_DeInit+0x194>
  else if (TIMx == TIM7)
200015a2:	687b      	ldr	r3, [r7, #4]
200015a4:	4a41      	ldr	r2, [pc, #260]	; (200016ac <TIM_DeInit+0x1b0>)
200015a6:	4293      	cmp	r3, r2
200015a8:	d108      	bne.n	200015bc <TIM_DeInit+0xc0>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
200015aa:	2101      	movs	r1, #1
200015ac:	2020      	movs	r0, #32
200015ae:	f7ff fdfd 	bl	200011ac <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
200015b2:	2100      	movs	r1, #0
200015b4:	2020      	movs	r0, #32
200015b6:	f7ff fdf9 	bl	200011ac <RCC_APB1PeriphResetCmd>
}
200015ba:	e069      	b.n	20001690 <TIM_DeInit+0x194>
  else if (TIMx == TIM8)
200015bc:	687b      	ldr	r3, [r7, #4]
200015be:	4a3c      	ldr	r2, [pc, #240]	; (200016b0 <TIM_DeInit+0x1b4>)
200015c0:	4293      	cmp	r3, r2
200015c2:	d108      	bne.n	200015d6 <TIM_DeInit+0xda>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
200015c4:	2101      	movs	r1, #1
200015c6:	2002      	movs	r0, #2
200015c8:	f7ff fe10 	bl	200011ec <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
200015cc:	2100      	movs	r1, #0
200015ce:	2002      	movs	r0, #2
200015d0:	f7ff fe0c 	bl	200011ec <RCC_APB2PeriphResetCmd>
}
200015d4:	e05c      	b.n	20001690 <TIM_DeInit+0x194>
  else if (TIMx == TIM9)
200015d6:	687b      	ldr	r3, [r7, #4]
200015d8:	4a36      	ldr	r2, [pc, #216]	; (200016b4 <TIM_DeInit+0x1b8>)
200015da:	4293      	cmp	r3, r2
200015dc:	d10c      	bne.n	200015f8 <TIM_DeInit+0xfc>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
200015de:	2380      	movs	r3, #128	; 0x80
200015e0:	025b      	lsls	r3, r3, #9
200015e2:	2101      	movs	r1, #1
200015e4:	0018      	movs	r0, r3
200015e6:	f7ff fe01 	bl	200011ec <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
200015ea:	2380      	movs	r3, #128	; 0x80
200015ec:	025b      	lsls	r3, r3, #9
200015ee:	2100      	movs	r1, #0
200015f0:	0018      	movs	r0, r3
200015f2:	f7ff fdfb 	bl	200011ec <RCC_APB2PeriphResetCmd>
}
200015f6:	e04b      	b.n	20001690 <TIM_DeInit+0x194>
  else if (TIMx == TIM10)
200015f8:	687b      	ldr	r3, [r7, #4]
200015fa:	4a2f      	ldr	r2, [pc, #188]	; (200016b8 <TIM_DeInit+0x1bc>)
200015fc:	4293      	cmp	r3, r2
200015fe:	d10c      	bne.n	2000161a <TIM_DeInit+0x11e>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
20001600:	2380      	movs	r3, #128	; 0x80
20001602:	029b      	lsls	r3, r3, #10
20001604:	2101      	movs	r1, #1
20001606:	0018      	movs	r0, r3
20001608:	f7ff fdf0 	bl	200011ec <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
2000160c:	2380      	movs	r3, #128	; 0x80
2000160e:	029b      	lsls	r3, r3, #10
20001610:	2100      	movs	r1, #0
20001612:	0018      	movs	r0, r3
20001614:	f7ff fdea 	bl	200011ec <RCC_APB2PeriphResetCmd>
}
20001618:	e03a      	b.n	20001690 <TIM_DeInit+0x194>
  else if (TIMx == TIM11) 
2000161a:	687b      	ldr	r3, [r7, #4]
2000161c:	4a27      	ldr	r2, [pc, #156]	; (200016bc <TIM_DeInit+0x1c0>)
2000161e:	4293      	cmp	r3, r2
20001620:	d10c      	bne.n	2000163c <TIM_DeInit+0x140>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
20001622:	2380      	movs	r3, #128	; 0x80
20001624:	02db      	lsls	r3, r3, #11
20001626:	2101      	movs	r1, #1
20001628:	0018      	movs	r0, r3
2000162a:	f7ff fddf 	bl	200011ec <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
2000162e:	2380      	movs	r3, #128	; 0x80
20001630:	02db      	lsls	r3, r3, #11
20001632:	2100      	movs	r1, #0
20001634:	0018      	movs	r0, r3
20001636:	f7ff fdd9 	bl	200011ec <RCC_APB2PeriphResetCmd>
}
2000163a:	e029      	b.n	20001690 <TIM_DeInit+0x194>
  else if (TIMx == TIM12)
2000163c:	687b      	ldr	r3, [r7, #4]
2000163e:	4a20      	ldr	r2, [pc, #128]	; (200016c0 <TIM_DeInit+0x1c4>)
20001640:	4293      	cmp	r3, r2
20001642:	d108      	bne.n	20001656 <TIM_DeInit+0x15a>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
20001644:	2101      	movs	r1, #1
20001646:	2040      	movs	r0, #64	; 0x40
20001648:	f7ff fdb0 	bl	200011ac <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
2000164c:	2100      	movs	r1, #0
2000164e:	2040      	movs	r0, #64	; 0x40
20001650:	f7ff fdac 	bl	200011ac <RCC_APB1PeriphResetCmd>
}
20001654:	e01c      	b.n	20001690 <TIM_DeInit+0x194>
  else if (TIMx == TIM13) 
20001656:	687b      	ldr	r3, [r7, #4]
20001658:	4a1a      	ldr	r2, [pc, #104]	; (200016c4 <TIM_DeInit+0x1c8>)
2000165a:	4293      	cmp	r3, r2
2000165c:	d108      	bne.n	20001670 <TIM_DeInit+0x174>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
2000165e:	2101      	movs	r1, #1
20001660:	2080      	movs	r0, #128	; 0x80
20001662:	f7ff fda3 	bl	200011ac <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
20001666:	2100      	movs	r1, #0
20001668:	2080      	movs	r0, #128	; 0x80
2000166a:	f7ff fd9f 	bl	200011ac <RCC_APB1PeriphResetCmd>
}
2000166e:	e00f      	b.n	20001690 <TIM_DeInit+0x194>
    if (TIMx == TIM14) 
20001670:	687b      	ldr	r3, [r7, #4]
20001672:	4a15      	ldr	r2, [pc, #84]	; (200016c8 <TIM_DeInit+0x1cc>)
20001674:	4293      	cmp	r3, r2
20001676:	d10b      	bne.n	20001690 <TIM_DeInit+0x194>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
20001678:	2380      	movs	r3, #128	; 0x80
2000167a:	005b      	lsls	r3, r3, #1
2000167c:	2101      	movs	r1, #1
2000167e:	0018      	movs	r0, r3
20001680:	f7ff fd94 	bl	200011ac <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
20001684:	2380      	movs	r3, #128	; 0x80
20001686:	005b      	lsls	r3, r3, #1
20001688:	2100      	movs	r1, #0
2000168a:	0018      	movs	r0, r3
2000168c:	f7ff fd8e 	bl	200011ac <RCC_APB1PeriphResetCmd>
}
20001690:	46c0      	nop			; (mov r8, r8)
20001692:	46bd      	mov	sp, r7
20001694:	b002      	add	sp, #8
20001696:	bd80      	pop	{r7, pc}
20001698:	40010000 	andmi	r0, r1, r0
2000169c:	40000400 	andmi	r0, r0, r0, lsl #8
200016a0:	40000800 	andmi	r0, r0, r0, lsl #16
200016a4:	40000c00 	andmi	r0, r0, r0, lsl #24
200016a8:	40001000 	andmi	r1, r0, r0
200016ac:	40001400 	andmi	r1, r0, r0, lsl #8
200016b0:	40010400 	andmi	r0, r1, r0, lsl #8
200016b4:	40014000 	andmi	r4, r1, r0
200016b8:	40014400 	andmi	r4, r1, r0, lsl #8
200016bc:	40014800 	andmi	r4, r1, r0, lsl #16
200016c0:	40001800 	andmi	r1, r0, r0, lsl #16
200016c4:	40001c00 	andmi	r1, r0, r0, lsl #24
200016c8:	40002000 	andmi	r2, r0, r0

200016cc <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
200016cc:	b580      	push	{r7, lr}
200016ce:	b084      	sub	sp, #16
200016d0:	af00      	add	r7, sp, #0
200016d2:	6078      	str	r0, [r7, #4]
200016d4:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
200016d6:	210e      	movs	r1, #14
200016d8:	187b      	adds	r3, r7, r1
200016da:	2200      	movs	r2, #0
200016dc:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
200016de:	187b      	adds	r3, r7, r1
200016e0:	687a      	ldr	r2, [r7, #4]
200016e2:	8812      	ldrh	r2, [r2, #0]
200016e4:	801a      	strh	r2, [r3, #0]

  if((TIMx == TIM1) || (TIMx == TIM8)||
200016e6:	687b      	ldr	r3, [r7, #4]
200016e8:	4a2e      	ldr	r2, [pc, #184]	; (200017a4 <TIM_TimeBaseInit+0xd8>)
200016ea:	4293      	cmp	r3, r2
200016ec:	d014      	beq.n	20001718 <TIM_TimeBaseInit+0x4c>
200016ee:	687b      	ldr	r3, [r7, #4]
200016f0:	4a2d      	ldr	r2, [pc, #180]	; (200017a8 <TIM_TimeBaseInit+0xdc>)
200016f2:	4293      	cmp	r3, r2
200016f4:	d010      	beq.n	20001718 <TIM_TimeBaseInit+0x4c>
200016f6:	687a      	ldr	r2, [r7, #4]
200016f8:	2380      	movs	r3, #128	; 0x80
200016fa:	05db      	lsls	r3, r3, #23
200016fc:	429a      	cmp	r2, r3
200016fe:	d00b      	beq.n	20001718 <TIM_TimeBaseInit+0x4c>
     (TIMx == TIM2) || (TIMx == TIM3)||
20001700:	687b      	ldr	r3, [r7, #4]
20001702:	4a2a      	ldr	r2, [pc, #168]	; (200017ac <TIM_TimeBaseInit+0xe0>)
20001704:	4293      	cmp	r3, r2
20001706:	d007      	beq.n	20001718 <TIM_TimeBaseInit+0x4c>
20001708:	687b      	ldr	r3, [r7, #4]
2000170a:	4a29      	ldr	r2, [pc, #164]	; (200017b0 <TIM_TimeBaseInit+0xe4>)
2000170c:	4293      	cmp	r3, r2
2000170e:	d003      	beq.n	20001718 <TIM_TimeBaseInit+0x4c>
     (TIMx == TIM4) || (TIMx == TIM5)) 
20001710:	687b      	ldr	r3, [r7, #4]
20001712:	4a28      	ldr	r2, [pc, #160]	; (200017b4 <TIM_TimeBaseInit+0xe8>)
20001714:	4293      	cmp	r3, r2
20001716:	d10d      	bne.n	20001734 <TIM_TimeBaseInit+0x68>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
20001718:	200e      	movs	r0, #14
2000171a:	183b      	adds	r3, r7, r0
2000171c:	183a      	adds	r2, r7, r0
2000171e:	8812      	ldrh	r2, [r2, #0]
20001720:	2170      	movs	r1, #112	; 0x70
20001722:	438a      	bics	r2, r1
20001724:	801a      	strh	r2, [r3, #0]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
20001726:	683b      	ldr	r3, [r7, #0]
20001728:	8859      	ldrh	r1, [r3, #2]
2000172a:	183b      	adds	r3, r7, r0
2000172c:	183a      	adds	r2, r7, r0
2000172e:	8812      	ldrh	r2, [r2, #0]
20001730:	430a      	orrs	r2, r1
20001732:	801a      	strh	r2, [r3, #0]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
20001734:	687b      	ldr	r3, [r7, #4]
20001736:	4a20      	ldr	r2, [pc, #128]	; (200017b8 <TIM_TimeBaseInit+0xec>)
20001738:	4293      	cmp	r3, r2
2000173a:	d011      	beq.n	20001760 <TIM_TimeBaseInit+0x94>
2000173c:	687b      	ldr	r3, [r7, #4]
2000173e:	4a1f      	ldr	r2, [pc, #124]	; (200017bc <TIM_TimeBaseInit+0xf0>)
20001740:	4293      	cmp	r3, r2
20001742:	d00d      	beq.n	20001760 <TIM_TimeBaseInit+0x94>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
20001744:	200e      	movs	r0, #14
20001746:	183b      	adds	r3, r7, r0
20001748:	183a      	adds	r2, r7, r0
2000174a:	8812      	ldrh	r2, [r2, #0]
2000174c:	491c      	ldr	r1, [pc, #112]	; (200017c0 <TIM_TimeBaseInit+0xf4>)
2000174e:	400a      	ands	r2, r1
20001750:	801a      	strh	r2, [r3, #0]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
20001752:	683b      	ldr	r3, [r7, #0]
20001754:	8919      	ldrh	r1, [r3, #8]
20001756:	183b      	adds	r3, r7, r0
20001758:	183a      	adds	r2, r7, r0
2000175a:	8812      	ldrh	r2, [r2, #0]
2000175c:	430a      	orrs	r2, r1
2000175e:	801a      	strh	r2, [r3, #0]
  }

  TIMx->CR1 = tmpcr1;
20001760:	687b      	ldr	r3, [r7, #4]
20001762:	220e      	movs	r2, #14
20001764:	18ba      	adds	r2, r7, r2
20001766:	8812      	ldrh	r2, [r2, #0]
20001768:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
2000176a:	683b      	ldr	r3, [r7, #0]
2000176c:	685a      	ldr	r2, [r3, #4]
2000176e:	687b      	ldr	r3, [r7, #4]
20001770:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
20001772:	683b      	ldr	r3, [r7, #0]
20001774:	881a      	ldrh	r2, [r3, #0]
20001776:	687b      	ldr	r3, [r7, #4]
20001778:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
2000177a:	687b      	ldr	r3, [r7, #4]
2000177c:	4a09      	ldr	r2, [pc, #36]	; (200017a4 <TIM_TimeBaseInit+0xd8>)
2000177e:	4293      	cmp	r3, r2
20001780:	d003      	beq.n	2000178a <TIM_TimeBaseInit+0xbe>
20001782:	687b      	ldr	r3, [r7, #4]
20001784:	4a08      	ldr	r2, [pc, #32]	; (200017a8 <TIM_TimeBaseInit+0xdc>)
20001786:	4293      	cmp	r3, r2
20001788:	d104      	bne.n	20001794 <TIM_TimeBaseInit+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
2000178a:	683b      	ldr	r3, [r7, #0]
2000178c:	7a9b      	ldrb	r3, [r3, #10]
2000178e:	b29a      	uxth	r2, r3
20001790:	687b      	ldr	r3, [r7, #4]
20001792:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
20001794:	687b      	ldr	r3, [r7, #4]
20001796:	2201      	movs	r2, #1
20001798:	829a      	strh	r2, [r3, #20]
}
2000179a:	46c0      	nop			; (mov r8, r8)
2000179c:	46bd      	mov	sp, r7
2000179e:	b004      	add	sp, #16
200017a0:	bd80      	pop	{r7, pc}
200017a2:	46c0      	nop			; (mov r8, r8)
200017a4:	40010000 	andmi	r0, r1, r0
200017a8:	40010400 	andmi	r0, r1, r0, lsl #8
200017ac:	40000400 	andmi	r0, r0, r0, lsl #8
200017b0:	40000800 	andmi	r0, r0, r0, lsl #16
200017b4:	40000c00 	andmi	r0, r0, r0, lsl #24
200017b8:	40001000 	andmi	r1, r0, r0
200017bc:	40001400 	andmi	r1, r0, r0, lsl #8
200017c0:	fffffcff 			; <UNDEFINED> instruction: 0xfffffcff

200017c4 <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
200017c4:	b580      	push	{r7, lr}
200017c6:	b082      	sub	sp, #8
200017c8:	af00      	add	r7, sp, #0
200017ca:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
200017cc:	687b      	ldr	r3, [r7, #4]
200017ce:	2201      	movs	r2, #1
200017d0:	4252      	negs	r2, r2
200017d2:	605a      	str	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
200017d4:	687b      	ldr	r3, [r7, #4]
200017d6:	2200      	movs	r2, #0
200017d8:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
200017da:	687b      	ldr	r3, [r7, #4]
200017dc:	2200      	movs	r2, #0
200017de:	811a      	strh	r2, [r3, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
200017e0:	687b      	ldr	r3, [r7, #4]
200017e2:	2200      	movs	r2, #0
200017e4:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
200017e6:	687b      	ldr	r3, [r7, #4]
200017e8:	2200      	movs	r2, #0
200017ea:	729a      	strb	r2, [r3, #10]
}
200017ec:	46c0      	nop			; (mov r8, r8)
200017ee:	46bd      	mov	sp, r7
200017f0:	b002      	add	sp, #8
200017f2:	bd80      	pop	{r7, pc}

200017f4 <TIM_PrescalerConfig>:
  *            @arg TIM_PSCReloadMode_Update: The Prescaler is loaded at the update event.
  *            @arg TIM_PSCReloadMode_Immediate: The Prescaler is loaded immediately.
  * @retval None
  */
void TIM_PrescalerConfig(TIM_TypeDef* TIMx, uint16_t Prescaler, uint16_t TIM_PSCReloadMode)
{
200017f4:	b580      	push	{r7, lr}
200017f6:	b082      	sub	sp, #8
200017f8:	af00      	add	r7, sp, #0
200017fa:	6078      	str	r0, [r7, #4]
200017fc:	0008      	movs	r0, r1
200017fe:	0011      	movs	r1, r2
20001800:	1cbb      	adds	r3, r7, #2
20001802:	1c02      	adds	r2, r0, #0
20001804:	801a      	strh	r2, [r3, #0]
20001806:	003b      	movs	r3, r7
20001808:	1c0a      	adds	r2, r1, #0
2000180a:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
2000180c:	687b      	ldr	r3, [r7, #4]
2000180e:	1cba      	adds	r2, r7, #2
20001810:	8812      	ldrh	r2, [r2, #0]
20001812:	851a      	strh	r2, [r3, #40]	; 0x28
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
20001814:	687b      	ldr	r3, [r7, #4]
20001816:	003a      	movs	r2, r7
20001818:	8812      	ldrh	r2, [r2, #0]
2000181a:	829a      	strh	r2, [r3, #20]
}
2000181c:	46c0      	nop			; (mov r8, r8)
2000181e:	46bd      	mov	sp, r7
20001820:	b002      	add	sp, #8
20001822:	bd80      	pop	{r7, pc}

20001824 <TIM_CounterModeConfig>:
  *            @arg TIM_CounterMode_CenterAligned2: TIM Center Aligned Mode2
  *            @arg TIM_CounterMode_CenterAligned3: TIM Center Aligned Mode3
  * @retval None
  */
void TIM_CounterModeConfig(TIM_TypeDef* TIMx, uint16_t TIM_CounterMode)
{
20001824:	b580      	push	{r7, lr}
20001826:	b084      	sub	sp, #16
20001828:	af00      	add	r7, sp, #0
2000182a:	6078      	str	r0, [r7, #4]
2000182c:	000a      	movs	r2, r1
2000182e:	1cbb      	adds	r3, r7, #2
20001830:	801a      	strh	r2, [r3, #0]
  uint16_t tmpcr1 = 0;
20001832:	200e      	movs	r0, #14
20001834:	183b      	adds	r3, r7, r0
20001836:	2200      	movs	r2, #0
20001838:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));

  tmpcr1 = TIMx->CR1;
2000183a:	183b      	adds	r3, r7, r0
2000183c:	687a      	ldr	r2, [r7, #4]
2000183e:	8812      	ldrh	r2, [r2, #0]
20001840:	801a      	strh	r2, [r3, #0]

  /* Reset the CMS and DIR Bits */
  tmpcr1 &= (uint16_t)~(TIM_CR1_DIR | TIM_CR1_CMS);
20001842:	183b      	adds	r3, r7, r0
20001844:	183a      	adds	r2, r7, r0
20001846:	8812      	ldrh	r2, [r2, #0]
20001848:	2170      	movs	r1, #112	; 0x70
2000184a:	438a      	bics	r2, r1
2000184c:	801a      	strh	r2, [r3, #0]

  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
2000184e:	183b      	adds	r3, r7, r0
20001850:	1839      	adds	r1, r7, r0
20001852:	1cba      	adds	r2, r7, #2
20001854:	8809      	ldrh	r1, [r1, #0]
20001856:	8812      	ldrh	r2, [r2, #0]
20001858:	430a      	orrs	r2, r1
2000185a:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
2000185c:	687b      	ldr	r3, [r7, #4]
2000185e:	183a      	adds	r2, r7, r0
20001860:	8812      	ldrh	r2, [r2, #0]
20001862:	801a      	strh	r2, [r3, #0]
}
20001864:	46c0      	nop			; (mov r8, r8)
20001866:	46bd      	mov	sp, r7
20001868:	b004      	add	sp, #16
2000186a:	bd80      	pop	{r7, pc}

2000186c <TIM_SetCounter>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @param  Counter: specifies the Counter register new value.
  * @retval None
  */
void TIM_SetCounter(TIM_TypeDef* TIMx, uint32_t Counter)
{
2000186c:	b580      	push	{r7, lr}
2000186e:	b082      	sub	sp, #8
20001870:	af00      	add	r7, sp, #0
20001872:	6078      	str	r0, [r7, #4]
20001874:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Counter Register value */
  TIMx->CNT = Counter;
20001876:	687b      	ldr	r3, [r7, #4]
20001878:	683a      	ldr	r2, [r7, #0]
2000187a:	625a      	str	r2, [r3, #36]	; 0x24
}
2000187c:	46c0      	nop			; (mov r8, r8)
2000187e:	46bd      	mov	sp, r7
20001880:	b002      	add	sp, #8
20001882:	bd80      	pop	{r7, pc}

20001884 <TIM_SetAutoreload>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @param  Autoreload: specifies the Autoreload register new value.
  * @retval None
  */
void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint32_t Autoreload)
{
20001884:	b580      	push	{r7, lr}
20001886:	b082      	sub	sp, #8
20001888:	af00      	add	r7, sp, #0
2000188a:	6078      	str	r0, [r7, #4]
2000188c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
2000188e:	687b      	ldr	r3, [r7, #4]
20001890:	683a      	ldr	r2, [r7, #0]
20001892:	62da      	str	r2, [r3, #44]	; 0x2c
}
20001894:	46c0      	nop			; (mov r8, r8)
20001896:	46bd      	mov	sp, r7
20001898:	b002      	add	sp, #8
2000189a:	bd80      	pop	{r7, pc}

2000189c <TIM_GetCounter>:
  * @brief  Gets the TIMx Counter value.
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval Counter Register value
  */
uint32_t TIM_GetCounter(TIM_TypeDef* TIMx)
{
2000189c:	b580      	push	{r7, lr}
2000189e:	b082      	sub	sp, #8
200018a0:	af00      	add	r7, sp, #0
200018a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Counter Register value */
  return TIMx->CNT;
200018a4:	687b      	ldr	r3, [r7, #4]
200018a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
200018a8:	0018      	movs	r0, r3
200018aa:	46bd      	mov	sp, r7
200018ac:	b002      	add	sp, #8
200018ae:	bd80      	pop	{r7, pc}

200018b0 <TIM_GetPrescaler>:
  * @brief  Gets the TIMx Prescaler value.
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval Prescaler Register value.
  */
uint16_t TIM_GetPrescaler(TIM_TypeDef* TIMx)
{
200018b0:	b580      	push	{r7, lr}
200018b2:	b082      	sub	sp, #8
200018b4:	af00      	add	r7, sp, #0
200018b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Prescaler Register value */
  return TIMx->PSC;
200018b8:	687b      	ldr	r3, [r7, #4]
200018ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
200018bc:	b29b      	uxth	r3, r3
}
200018be:	0018      	movs	r0, r3
200018c0:	46bd      	mov	sp, r7
200018c2:	b002      	add	sp, #8
200018c4:	bd80      	pop	{r7, pc}

200018c6 <TIM_UpdateDisableConfig>:
  * @param  NewState: new state of the TIMx UDIS bit
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_UpdateDisableConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
200018c6:	b580      	push	{r7, lr}
200018c8:	b082      	sub	sp, #8
200018ca:	af00      	add	r7, sp, #0
200018cc:	6078      	str	r0, [r7, #4]
200018ce:	000a      	movs	r2, r1
200018d0:	1cfb      	adds	r3, r7, #3
200018d2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
200018d4:	1cfb      	adds	r3, r7, #3
200018d6:	781b      	ldrb	r3, [r3, #0]
200018d8:	2b00      	cmp	r3, #0
200018da:	d008      	beq.n	200018ee <TIM_UpdateDisableConfig+0x28>
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
200018dc:	687b      	ldr	r3, [r7, #4]
200018de:	881b      	ldrh	r3, [r3, #0]
200018e0:	b29b      	uxth	r3, r3
200018e2:	2202      	movs	r2, #2
200018e4:	4313      	orrs	r3, r2
200018e6:	b29a      	uxth	r2, r3
200018e8:	687b      	ldr	r3, [r7, #4]
200018ea:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_UDIS;
  }
}
200018ec:	e007      	b.n	200018fe <TIM_UpdateDisableConfig+0x38>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_UDIS;
200018ee:	687b      	ldr	r3, [r7, #4]
200018f0:	881b      	ldrh	r3, [r3, #0]
200018f2:	b29b      	uxth	r3, r3
200018f4:	2202      	movs	r2, #2
200018f6:	4393      	bics	r3, r2
200018f8:	b29a      	uxth	r2, r3
200018fa:	687b      	ldr	r3, [r7, #4]
200018fc:	801a      	strh	r2, [r3, #0]
}
200018fe:	46c0      	nop			; (mov r8, r8)
20001900:	46bd      	mov	sp, r7
20001902:	b002      	add	sp, #8
20001904:	bd80      	pop	{r7, pc}

20001906 <TIM_UpdateRequestConfig>:
  *                 generation through the slave mode controller.
  *            @arg TIM_UpdateSource_Regular: Source of update is counter overflow/underflow.
  * @retval None
  */
void TIM_UpdateRequestConfig(TIM_TypeDef* TIMx, uint16_t TIM_UpdateSource)
{
20001906:	b580      	push	{r7, lr}
20001908:	b082      	sub	sp, #8
2000190a:	af00      	add	r7, sp, #0
2000190c:	6078      	str	r0, [r7, #4]
2000190e:	000a      	movs	r2, r1
20001910:	1cbb      	adds	r3, r7, #2
20001912:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
20001914:	1cbb      	adds	r3, r7, #2
20001916:	881b      	ldrh	r3, [r3, #0]
20001918:	2b00      	cmp	r3, #0
2000191a:	d008      	beq.n	2000192e <TIM_UpdateRequestConfig+0x28>
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
2000191c:	687b      	ldr	r3, [r7, #4]
2000191e:	881b      	ldrh	r3, [r3, #0]
20001920:	b29b      	uxth	r3, r3
20001922:	2204      	movs	r2, #4
20001924:	4313      	orrs	r3, r2
20001926:	b29a      	uxth	r2, r3
20001928:	687b      	ldr	r3, [r7, #4]
2000192a:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_URS;
  }
}
2000192c:	e007      	b.n	2000193e <TIM_UpdateRequestConfig+0x38>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_URS;
2000192e:	687b      	ldr	r3, [r7, #4]
20001930:	881b      	ldrh	r3, [r3, #0]
20001932:	b29b      	uxth	r3, r3
20001934:	2204      	movs	r2, #4
20001936:	4393      	bics	r3, r2
20001938:	b29a      	uxth	r2, r3
2000193a:	687b      	ldr	r3, [r7, #4]
2000193c:	801a      	strh	r2, [r3, #0]
}
2000193e:	46c0      	nop			; (mov r8, r8)
20001940:	46bd      	mov	sp, r7
20001942:	b002      	add	sp, #8
20001944:	bd80      	pop	{r7, pc}

20001946 <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
20001946:	b580      	push	{r7, lr}
20001948:	b082      	sub	sp, #8
2000194a:	af00      	add	r7, sp, #0
2000194c:	6078      	str	r0, [r7, #4]
2000194e:	000a      	movs	r2, r1
20001950:	1cfb      	adds	r3, r7, #3
20001952:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20001954:	1cfb      	adds	r3, r7, #3
20001956:	781b      	ldrb	r3, [r3, #0]
20001958:	2b00      	cmp	r3, #0
2000195a:	d008      	beq.n	2000196e <TIM_ARRPreloadConfig+0x28>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
2000195c:	687b      	ldr	r3, [r7, #4]
2000195e:	881b      	ldrh	r3, [r3, #0]
20001960:	b29b      	uxth	r3, r3
20001962:	2280      	movs	r2, #128	; 0x80
20001964:	4313      	orrs	r3, r2
20001966:	b29a      	uxth	r2, r3
20001968:	687b      	ldr	r3, [r7, #4]
2000196a:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
  }
}
2000196c:	e007      	b.n	2000197e <TIM_ARRPreloadConfig+0x38>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
2000196e:	687b      	ldr	r3, [r7, #4]
20001970:	881b      	ldrh	r3, [r3, #0]
20001972:	b29b      	uxth	r3, r3
20001974:	2280      	movs	r2, #128	; 0x80
20001976:	4393      	bics	r3, r2
20001978:	b29a      	uxth	r2, r3
2000197a:	687b      	ldr	r3, [r7, #4]
2000197c:	801a      	strh	r2, [r3, #0]
}
2000197e:	46c0      	nop			; (mov r8, r8)
20001980:	46bd      	mov	sp, r7
20001982:	b002      	add	sp, #8
20001984:	bd80      	pop	{r7, pc}

20001986 <TIM_SelectOnePulseMode>:
  *            @arg TIM_OPMode_Single
  *            @arg TIM_OPMode_Repetitive
  * @retval None
  */
void TIM_SelectOnePulseMode(TIM_TypeDef* TIMx, uint16_t TIM_OPMode)
{
20001986:	b580      	push	{r7, lr}
20001988:	b082      	sub	sp, #8
2000198a:	af00      	add	r7, sp, #0
2000198c:	6078      	str	r0, [r7, #4]
2000198e:	000a      	movs	r2, r1
20001990:	1cbb      	adds	r3, r7, #2
20001992:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));

  /* Reset the OPM Bit */
  TIMx->CR1 &= (uint16_t)~TIM_CR1_OPM;
20001994:	687b      	ldr	r3, [r7, #4]
20001996:	881b      	ldrh	r3, [r3, #0]
20001998:	b29b      	uxth	r3, r3
2000199a:	2208      	movs	r2, #8
2000199c:	4393      	bics	r3, r2
2000199e:	b29a      	uxth	r2, r3
200019a0:	687b      	ldr	r3, [r7, #4]
200019a2:	801a      	strh	r2, [r3, #0]

  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
200019a4:	687b      	ldr	r3, [r7, #4]
200019a6:	881b      	ldrh	r3, [r3, #0]
200019a8:	b29a      	uxth	r2, r3
200019aa:	1cbb      	adds	r3, r7, #2
200019ac:	881b      	ldrh	r3, [r3, #0]
200019ae:	4313      	orrs	r3, r2
200019b0:	b29a      	uxth	r2, r3
200019b2:	687b      	ldr	r3, [r7, #4]
200019b4:	801a      	strh	r2, [r3, #0]
}
200019b6:	46c0      	nop			; (mov r8, r8)
200019b8:	46bd      	mov	sp, r7
200019ba:	b002      	add	sp, #8
200019bc:	bd80      	pop	{r7, pc}

200019be <TIM_SetClockDivision>:
  *            @arg TIM_CKD_DIV2: TDTS = 2*Tck_tim
  *            @arg TIM_CKD_DIV4: TDTS = 4*Tck_tim
  * @retval None
  */
void TIM_SetClockDivision(TIM_TypeDef* TIMx, uint16_t TIM_CKD)
{
200019be:	b580      	push	{r7, lr}
200019c0:	b082      	sub	sp, #8
200019c2:	af00      	add	r7, sp, #0
200019c4:	6078      	str	r0, [r7, #4]
200019c6:	000a      	movs	r2, r1
200019c8:	1cbb      	adds	r3, r7, #2
200019ca:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));

  /* Reset the CKD Bits */
  TIMx->CR1 &= (uint16_t)(~TIM_CR1_CKD);
200019cc:	687b      	ldr	r3, [r7, #4]
200019ce:	881b      	ldrh	r3, [r3, #0]
200019d0:	b29b      	uxth	r3, r3
200019d2:	4a09      	ldr	r2, [pc, #36]	; (200019f8 <TIM_SetClockDivision+0x3a>)
200019d4:	4013      	ands	r3, r2
200019d6:	b29a      	uxth	r2, r3
200019d8:	687b      	ldr	r3, [r7, #4]
200019da:	801a      	strh	r2, [r3, #0]

  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
200019dc:	687b      	ldr	r3, [r7, #4]
200019de:	881b      	ldrh	r3, [r3, #0]
200019e0:	b29a      	uxth	r2, r3
200019e2:	1cbb      	adds	r3, r7, #2
200019e4:	881b      	ldrh	r3, [r3, #0]
200019e6:	4313      	orrs	r3, r2
200019e8:	b29a      	uxth	r2, r3
200019ea:	687b      	ldr	r3, [r7, #4]
200019ec:	801a      	strh	r2, [r3, #0]
}
200019ee:	46c0      	nop			; (mov r8, r8)
200019f0:	46bd      	mov	sp, r7
200019f2:	b002      	add	sp, #8
200019f4:	bd80      	pop	{r7, pc}
200019f6:	46c0      	nop			; (mov r8, r8)
200019f8:	fffffcff 			; <UNDEFINED> instruction: 0xfffffcff

200019fc <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
200019fc:	b580      	push	{r7, lr}
200019fe:	b082      	sub	sp, #8
20001a00:	af00      	add	r7, sp, #0
20001a02:	6078      	str	r0, [r7, #4]
20001a04:	000a      	movs	r2, r1
20001a06:	1cfb      	adds	r3, r7, #3
20001a08:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
20001a0a:	1cfb      	adds	r3, r7, #3
20001a0c:	781b      	ldrb	r3, [r3, #0]
20001a0e:	2b00      	cmp	r3, #0
20001a10:	d008      	beq.n	20001a24 <TIM_Cmd+0x28>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
20001a12:	687b      	ldr	r3, [r7, #4]
20001a14:	881b      	ldrh	r3, [r3, #0]
20001a16:	b29b      	uxth	r3, r3
20001a18:	2201      	movs	r2, #1
20001a1a:	4313      	orrs	r3, r2
20001a1c:	b29a      	uxth	r2, r3
20001a1e:	687b      	ldr	r3, [r7, #4]
20001a20:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
20001a22:	e007      	b.n	20001a34 <TIM_Cmd+0x38>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
20001a24:	687b      	ldr	r3, [r7, #4]
20001a26:	881b      	ldrh	r3, [r3, #0]
20001a28:	b29b      	uxth	r3, r3
20001a2a:	2201      	movs	r2, #1
20001a2c:	4393      	bics	r3, r2
20001a2e:	b29a      	uxth	r2, r3
20001a30:	687b      	ldr	r3, [r7, #4]
20001a32:	801a      	strh	r2, [r3, #0]
}
20001a34:	46c0      	nop			; (mov r8, r8)
20001a36:	46bd      	mov	sp, r7
20001a38:	b002      	add	sp, #8
20001a3a:	bd80      	pop	{r7, pc}

20001a3c <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
20001a3c:	b590      	push	{r4, r7, lr}
20001a3e:	b085      	sub	sp, #20
20001a40:	af00      	add	r7, sp, #0
20001a42:	6078      	str	r0, [r7, #4]
20001a44:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
20001a46:	210a      	movs	r1, #10
20001a48:	187b      	adds	r3, r7, r1
20001a4a:	2200      	movs	r2, #0
20001a4c:	801a      	strh	r2, [r3, #0]
20001a4e:	240e      	movs	r4, #14
20001a50:	193b      	adds	r3, r7, r4
20001a52:	2200      	movs	r2, #0
20001a54:	801a      	strh	r2, [r3, #0]
20001a56:	200c      	movs	r0, #12
20001a58:	183b      	adds	r3, r7, r0
20001a5a:	2200      	movs	r2, #0
20001a5c:	801a      	strh	r2, [r3, #0]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
20001a5e:	687b      	ldr	r3, [r7, #4]
20001a60:	8c1b      	ldrh	r3, [r3, #32]
20001a62:	b29b      	uxth	r3, r3
20001a64:	2201      	movs	r2, #1
20001a66:	4393      	bics	r3, r2
20001a68:	b29a      	uxth	r2, r3
20001a6a:	687b      	ldr	r3, [r7, #4]
20001a6c:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
20001a6e:	193b      	adds	r3, r7, r4
20001a70:	687a      	ldr	r2, [r7, #4]
20001a72:	8c12      	ldrh	r2, [r2, #32]
20001a74:	801a      	strh	r2, [r3, #0]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
20001a76:	183b      	adds	r3, r7, r0
20001a78:	687a      	ldr	r2, [r7, #4]
20001a7a:	8892      	ldrh	r2, [r2, #4]
20001a7c:	801a      	strh	r2, [r3, #0]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
20001a7e:	187b      	adds	r3, r7, r1
20001a80:	687a      	ldr	r2, [r7, #4]
20001a82:	8b12      	ldrh	r2, [r2, #24]
20001a84:	801a      	strh	r2, [r3, #0]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
20001a86:	187b      	adds	r3, r7, r1
20001a88:	0008      	movs	r0, r1
20001a8a:	187a      	adds	r2, r7, r1
20001a8c:	8812      	ldrh	r2, [r2, #0]
20001a8e:	2170      	movs	r1, #112	; 0x70
20001a90:	438a      	bics	r2, r1
20001a92:	801a      	strh	r2, [r3, #0]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
20001a94:	183b      	adds	r3, r7, r0
20001a96:	183a      	adds	r2, r7, r0
20001a98:	8812      	ldrh	r2, [r2, #0]
20001a9a:	2103      	movs	r1, #3
20001a9c:	438a      	bics	r2, r1
20001a9e:	801a      	strh	r2, [r3, #0]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
20001aa0:	683b      	ldr	r3, [r7, #0]
20001aa2:	8819      	ldrh	r1, [r3, #0]
20001aa4:	183b      	adds	r3, r7, r0
20001aa6:	183a      	adds	r2, r7, r0
20001aa8:	8812      	ldrh	r2, [r2, #0]
20001aaa:	430a      	orrs	r2, r1
20001aac:	801a      	strh	r2, [r3, #0]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
20001aae:	0020      	movs	r0, r4
20001ab0:	183b      	adds	r3, r7, r0
20001ab2:	183a      	adds	r2, r7, r0
20001ab4:	8812      	ldrh	r2, [r2, #0]
20001ab6:	2102      	movs	r1, #2
20001ab8:	438a      	bics	r2, r1
20001aba:	801a      	strh	r2, [r3, #0]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
20001abc:	683b      	ldr	r3, [r7, #0]
20001abe:	8999      	ldrh	r1, [r3, #12]
20001ac0:	183b      	adds	r3, r7, r0
20001ac2:	183a      	adds	r2, r7, r0
20001ac4:	8812      	ldrh	r2, [r2, #0]
20001ac6:	430a      	orrs	r2, r1
20001ac8:	801a      	strh	r2, [r3, #0]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
20001aca:	683b      	ldr	r3, [r7, #0]
20001acc:	8859      	ldrh	r1, [r3, #2]
20001ace:	183b      	adds	r3, r7, r0
20001ad0:	183a      	adds	r2, r7, r0
20001ad2:	8812      	ldrh	r2, [r2, #0]
20001ad4:	430a      	orrs	r2, r1
20001ad6:	801a      	strh	r2, [r3, #0]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
20001ad8:	687b      	ldr	r3, [r7, #4]
20001ada:	4a2a      	ldr	r2, [pc, #168]	; (20001b84 <TIM_OC1Init+0x148>)
20001adc:	4293      	cmp	r3, r2
20001ade:	d003      	beq.n	20001ae8 <TIM_OC1Init+0xac>
20001ae0:	687b      	ldr	r3, [r7, #4]
20001ae2:	4a29      	ldr	r2, [pc, #164]	; (20001b88 <TIM_OC1Init+0x14c>)
20001ae4:	4293      	cmp	r3, r2
20001ae6:	d135      	bne.n	20001b54 <TIM_OC1Init+0x118>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
20001ae8:	200e      	movs	r0, #14
20001aea:	183b      	adds	r3, r7, r0
20001aec:	183a      	adds	r2, r7, r0
20001aee:	8812      	ldrh	r2, [r2, #0]
20001af0:	2108      	movs	r1, #8
20001af2:	438a      	bics	r2, r1
20001af4:	801a      	strh	r2, [r3, #0]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
20001af6:	683b      	ldr	r3, [r7, #0]
20001af8:	89d9      	ldrh	r1, [r3, #14]
20001afa:	183b      	adds	r3, r7, r0
20001afc:	183a      	adds	r2, r7, r0
20001afe:	8812      	ldrh	r2, [r2, #0]
20001b00:	430a      	orrs	r2, r1
20001b02:	801a      	strh	r2, [r3, #0]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
20001b04:	183b      	adds	r3, r7, r0
20001b06:	183a      	adds	r2, r7, r0
20001b08:	8812      	ldrh	r2, [r2, #0]
20001b0a:	2104      	movs	r1, #4
20001b0c:	438a      	bics	r2, r1
20001b0e:	801a      	strh	r2, [r3, #0]
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
20001b10:	683b      	ldr	r3, [r7, #0]
20001b12:	8899      	ldrh	r1, [r3, #4]
20001b14:	183b      	adds	r3, r7, r0
20001b16:	183a      	adds	r2, r7, r0
20001b18:	8812      	ldrh	r2, [r2, #0]
20001b1a:	430a      	orrs	r2, r1
20001b1c:	801a      	strh	r2, [r3, #0]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
20001b1e:	200c      	movs	r0, #12
20001b20:	183b      	adds	r3, r7, r0
20001b22:	183a      	adds	r2, r7, r0
20001b24:	8812      	ldrh	r2, [r2, #0]
20001b26:	4919      	ldr	r1, [pc, #100]	; (20001b8c <TIM_OC1Init+0x150>)
20001b28:	400a      	ands	r2, r1
20001b2a:	801a      	strh	r2, [r3, #0]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
20001b2c:	183b      	adds	r3, r7, r0
20001b2e:	183a      	adds	r2, r7, r0
20001b30:	8812      	ldrh	r2, [r2, #0]
20001b32:	4917      	ldr	r1, [pc, #92]	; (20001b90 <TIM_OC1Init+0x154>)
20001b34:	400a      	ands	r2, r1
20001b36:	801a      	strh	r2, [r3, #0]
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
20001b38:	683b      	ldr	r3, [r7, #0]
20001b3a:	8a19      	ldrh	r1, [r3, #16]
20001b3c:	183b      	adds	r3, r7, r0
20001b3e:	183a      	adds	r2, r7, r0
20001b40:	8812      	ldrh	r2, [r2, #0]
20001b42:	430a      	orrs	r2, r1
20001b44:	801a      	strh	r2, [r3, #0]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
20001b46:	683b      	ldr	r3, [r7, #0]
20001b48:	8a59      	ldrh	r1, [r3, #18]
20001b4a:	183b      	adds	r3, r7, r0
20001b4c:	183a      	adds	r2, r7, r0
20001b4e:	8812      	ldrh	r2, [r2, #0]
20001b50:	430a      	orrs	r2, r1
20001b52:	801a      	strh	r2, [r3, #0]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
20001b54:	687b      	ldr	r3, [r7, #4]
20001b56:	220c      	movs	r2, #12
20001b58:	18ba      	adds	r2, r7, r2
20001b5a:	8812      	ldrh	r2, [r2, #0]
20001b5c:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
20001b5e:	687b      	ldr	r3, [r7, #4]
20001b60:	220a      	movs	r2, #10
20001b62:	18ba      	adds	r2, r7, r2
20001b64:	8812      	ldrh	r2, [r2, #0]
20001b66:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
20001b68:	683b      	ldr	r3, [r7, #0]
20001b6a:	689a      	ldr	r2, [r3, #8]
20001b6c:	687b      	ldr	r3, [r7, #4]
20001b6e:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
20001b70:	687b      	ldr	r3, [r7, #4]
20001b72:	220e      	movs	r2, #14
20001b74:	18ba      	adds	r2, r7, r2
20001b76:	8812      	ldrh	r2, [r2, #0]
20001b78:	841a      	strh	r2, [r3, #32]
}
20001b7a:	46c0      	nop			; (mov r8, r8)
20001b7c:	46bd      	mov	sp, r7
20001b7e:	b005      	add	sp, #20
20001b80:	bd90      	pop	{r4, r7, pc}
20001b82:	46c0      	nop			; (mov r8, r8)
20001b84:	40010000 	andmi	r0, r1, r0
20001b88:	40010400 	andmi	r0, r1, r0, lsl #8
20001b8c:	fffffeff 			; <UNDEFINED> instruction: 0xfffffeff
20001b90:	fffffdff 			; <UNDEFINED> instruction: 0xfffffdff

20001b94 <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
20001b94:	b590      	push	{r4, r7, lr}
20001b96:	b085      	sub	sp, #20
20001b98:	af00      	add	r7, sp, #0
20001b9a:	6078      	str	r0, [r7, #4]
20001b9c:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
20001b9e:	210a      	movs	r1, #10
20001ba0:	187b      	adds	r3, r7, r1
20001ba2:	2200      	movs	r2, #0
20001ba4:	801a      	strh	r2, [r3, #0]
20001ba6:	240e      	movs	r4, #14
20001ba8:	193b      	adds	r3, r7, r4
20001baa:	2200      	movs	r2, #0
20001bac:	801a      	strh	r2, [r3, #0]
20001bae:	200c      	movs	r0, #12
20001bb0:	183b      	adds	r3, r7, r0
20001bb2:	2200      	movs	r2, #0
20001bb4:	801a      	strh	r2, [r3, #0]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
20001bb6:	687b      	ldr	r3, [r7, #4]
20001bb8:	8c1b      	ldrh	r3, [r3, #32]
20001bba:	b29b      	uxth	r3, r3
20001bbc:	2210      	movs	r2, #16
20001bbe:	4393      	bics	r3, r2
20001bc0:	b29a      	uxth	r2, r3
20001bc2:	687b      	ldr	r3, [r7, #4]
20001bc4:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
20001bc6:	193b      	adds	r3, r7, r4
20001bc8:	687a      	ldr	r2, [r7, #4]
20001bca:	8c12      	ldrh	r2, [r2, #32]
20001bcc:	801a      	strh	r2, [r3, #0]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
20001bce:	183b      	adds	r3, r7, r0
20001bd0:	687a      	ldr	r2, [r7, #4]
20001bd2:	8892      	ldrh	r2, [r2, #4]
20001bd4:	801a      	strh	r2, [r3, #0]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
20001bd6:	187b      	adds	r3, r7, r1
20001bd8:	687a      	ldr	r2, [r7, #4]
20001bda:	8b12      	ldrh	r2, [r2, #24]
20001bdc:	801a      	strh	r2, [r3, #0]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
20001bde:	187b      	adds	r3, r7, r1
20001be0:	0008      	movs	r0, r1
20001be2:	187a      	adds	r2, r7, r1
20001be4:	8812      	ldrh	r2, [r2, #0]
20001be6:	4944      	ldr	r1, [pc, #272]	; (20001cf8 <TIM_OC2Init+0x164>)
20001be8:	400a      	ands	r2, r1
20001bea:	801a      	strh	r2, [r3, #0]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
20001bec:	183b      	adds	r3, r7, r0
20001bee:	183a      	adds	r2, r7, r0
20001bf0:	8812      	ldrh	r2, [r2, #0]
20001bf2:	4942      	ldr	r1, [pc, #264]	; (20001cfc <TIM_OC2Init+0x168>)
20001bf4:	400a      	ands	r2, r1
20001bf6:	801a      	strh	r2, [r3, #0]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
20001bf8:	683b      	ldr	r3, [r7, #0]
20001bfa:	881b      	ldrh	r3, [r3, #0]
20001bfc:	021b      	lsls	r3, r3, #8
20001bfe:	b299      	uxth	r1, r3
20001c00:	183b      	adds	r3, r7, r0
20001c02:	183a      	adds	r2, r7, r0
20001c04:	8812      	ldrh	r2, [r2, #0]
20001c06:	430a      	orrs	r2, r1
20001c08:	801a      	strh	r2, [r3, #0]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
20001c0a:	0020      	movs	r0, r4
20001c0c:	183b      	adds	r3, r7, r0
20001c0e:	183a      	adds	r2, r7, r0
20001c10:	8812      	ldrh	r2, [r2, #0]
20001c12:	2120      	movs	r1, #32
20001c14:	438a      	bics	r2, r1
20001c16:	801a      	strh	r2, [r3, #0]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
20001c18:	683b      	ldr	r3, [r7, #0]
20001c1a:	899b      	ldrh	r3, [r3, #12]
20001c1c:	011b      	lsls	r3, r3, #4
20001c1e:	b299      	uxth	r1, r3
20001c20:	183b      	adds	r3, r7, r0
20001c22:	183a      	adds	r2, r7, r0
20001c24:	8812      	ldrh	r2, [r2, #0]
20001c26:	430a      	orrs	r2, r1
20001c28:	801a      	strh	r2, [r3, #0]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
20001c2a:	683b      	ldr	r3, [r7, #0]
20001c2c:	885b      	ldrh	r3, [r3, #2]
20001c2e:	011b      	lsls	r3, r3, #4
20001c30:	b299      	uxth	r1, r3
20001c32:	183b      	adds	r3, r7, r0
20001c34:	183a      	adds	r2, r7, r0
20001c36:	8812      	ldrh	r2, [r2, #0]
20001c38:	430a      	orrs	r2, r1
20001c3a:	801a      	strh	r2, [r3, #0]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
20001c3c:	687b      	ldr	r3, [r7, #4]
20001c3e:	4a30      	ldr	r2, [pc, #192]	; (20001d00 <TIM_OC2Init+0x16c>)
20001c40:	4293      	cmp	r3, r2
20001c42:	d003      	beq.n	20001c4c <TIM_OC2Init+0xb8>
20001c44:	687b      	ldr	r3, [r7, #4]
20001c46:	4a2f      	ldr	r2, [pc, #188]	; (20001d04 <TIM_OC2Init+0x170>)
20001c48:	4293      	cmp	r3, r2
20001c4a:	d13d      	bne.n	20001cc8 <TIM_OC2Init+0x134>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
20001c4c:	200e      	movs	r0, #14
20001c4e:	183b      	adds	r3, r7, r0
20001c50:	183a      	adds	r2, r7, r0
20001c52:	8812      	ldrh	r2, [r2, #0]
20001c54:	2180      	movs	r1, #128	; 0x80
20001c56:	438a      	bics	r2, r1
20001c58:	801a      	strh	r2, [r3, #0]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
20001c5a:	683b      	ldr	r3, [r7, #0]
20001c5c:	89db      	ldrh	r3, [r3, #14]
20001c5e:	011b      	lsls	r3, r3, #4
20001c60:	b299      	uxth	r1, r3
20001c62:	183b      	adds	r3, r7, r0
20001c64:	183a      	adds	r2, r7, r0
20001c66:	8812      	ldrh	r2, [r2, #0]
20001c68:	430a      	orrs	r2, r1
20001c6a:	801a      	strh	r2, [r3, #0]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
20001c6c:	183b      	adds	r3, r7, r0
20001c6e:	183a      	adds	r2, r7, r0
20001c70:	8812      	ldrh	r2, [r2, #0]
20001c72:	2140      	movs	r1, #64	; 0x40
20001c74:	438a      	bics	r2, r1
20001c76:	801a      	strh	r2, [r3, #0]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
20001c78:	683b      	ldr	r3, [r7, #0]
20001c7a:	889b      	ldrh	r3, [r3, #4]
20001c7c:	011b      	lsls	r3, r3, #4
20001c7e:	b299      	uxth	r1, r3
20001c80:	183b      	adds	r3, r7, r0
20001c82:	183a      	adds	r2, r7, r0
20001c84:	8812      	ldrh	r2, [r2, #0]
20001c86:	430a      	orrs	r2, r1
20001c88:	801a      	strh	r2, [r3, #0]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
20001c8a:	200c      	movs	r0, #12
20001c8c:	183b      	adds	r3, r7, r0
20001c8e:	183a      	adds	r2, r7, r0
20001c90:	8812      	ldrh	r2, [r2, #0]
20001c92:	491d      	ldr	r1, [pc, #116]	; (20001d08 <TIM_OC2Init+0x174>)
20001c94:	400a      	ands	r2, r1
20001c96:	801a      	strh	r2, [r3, #0]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
20001c98:	183b      	adds	r3, r7, r0
20001c9a:	183a      	adds	r2, r7, r0
20001c9c:	8812      	ldrh	r2, [r2, #0]
20001c9e:	491b      	ldr	r1, [pc, #108]	; (20001d0c <TIM_OC2Init+0x178>)
20001ca0:	400a      	ands	r2, r1
20001ca2:	801a      	strh	r2, [r3, #0]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
20001ca4:	683b      	ldr	r3, [r7, #0]
20001ca6:	8a1b      	ldrh	r3, [r3, #16]
20001ca8:	009b      	lsls	r3, r3, #2
20001caa:	b299      	uxth	r1, r3
20001cac:	183b      	adds	r3, r7, r0
20001cae:	183a      	adds	r2, r7, r0
20001cb0:	8812      	ldrh	r2, [r2, #0]
20001cb2:	430a      	orrs	r2, r1
20001cb4:	801a      	strh	r2, [r3, #0]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
20001cb6:	683b      	ldr	r3, [r7, #0]
20001cb8:	8a5b      	ldrh	r3, [r3, #18]
20001cba:	009b      	lsls	r3, r3, #2
20001cbc:	b299      	uxth	r1, r3
20001cbe:	183b      	adds	r3, r7, r0
20001cc0:	183a      	adds	r2, r7, r0
20001cc2:	8812      	ldrh	r2, [r2, #0]
20001cc4:	430a      	orrs	r2, r1
20001cc6:	801a      	strh	r2, [r3, #0]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
20001cc8:	687b      	ldr	r3, [r7, #4]
20001cca:	220c      	movs	r2, #12
20001ccc:	18ba      	adds	r2, r7, r2
20001cce:	8812      	ldrh	r2, [r2, #0]
20001cd0:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
20001cd2:	687b      	ldr	r3, [r7, #4]
20001cd4:	220a      	movs	r2, #10
20001cd6:	18ba      	adds	r2, r7, r2
20001cd8:	8812      	ldrh	r2, [r2, #0]
20001cda:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
20001cdc:	683b      	ldr	r3, [r7, #0]
20001cde:	689a      	ldr	r2, [r3, #8]
20001ce0:	687b      	ldr	r3, [r7, #4]
20001ce2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
20001ce4:	687b      	ldr	r3, [r7, #4]
20001ce6:	220e      	movs	r2, #14
20001ce8:	18ba      	adds	r2, r7, r2
20001cea:	8812      	ldrh	r2, [r2, #0]
20001cec:	841a      	strh	r2, [r3, #32]
}
20001cee:	46c0      	nop			; (mov r8, r8)
20001cf0:	46bd      	mov	sp, r7
20001cf2:	b005      	add	sp, #20
20001cf4:	bd90      	pop	{r4, r7, pc}
20001cf6:	46c0      	nop			; (mov r8, r8)
20001cf8:	ffff8fff 			; <UNDEFINED> instruction: 0xffff8fff
20001cfc:	fffffcff 			; <UNDEFINED> instruction: 0xfffffcff
20001d00:	40010000 	andmi	r0, r1, r0
20001d04:	40010400 	andmi	r0, r1, r0, lsl #8
20001d08:	fffffbff 			; <UNDEFINED> instruction: 0xfffffbff
20001d0c:	fffff7ff 			; <UNDEFINED> instruction: 0xfffff7ff

20001d10 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
20001d10:	b590      	push	{r4, r7, lr}
20001d12:	b085      	sub	sp, #20
20001d14:	af00      	add	r7, sp, #0
20001d16:	6078      	str	r0, [r7, #4]
20001d18:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
20001d1a:	210a      	movs	r1, #10
20001d1c:	187b      	adds	r3, r7, r1
20001d1e:	2200      	movs	r2, #0
20001d20:	801a      	strh	r2, [r3, #0]
20001d22:	240e      	movs	r4, #14
20001d24:	193b      	adds	r3, r7, r4
20001d26:	2200      	movs	r2, #0
20001d28:	801a      	strh	r2, [r3, #0]
20001d2a:	200c      	movs	r0, #12
20001d2c:	183b      	adds	r3, r7, r0
20001d2e:	2200      	movs	r2, #0
20001d30:	801a      	strh	r2, [r3, #0]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
20001d32:	687b      	ldr	r3, [r7, #4]
20001d34:	8c1b      	ldrh	r3, [r3, #32]
20001d36:	b29b      	uxth	r3, r3
20001d38:	4a4d      	ldr	r2, [pc, #308]	; (20001e70 <TIM_OC3Init+0x160>)
20001d3a:	4013      	ands	r3, r2
20001d3c:	b29a      	uxth	r2, r3
20001d3e:	687b      	ldr	r3, [r7, #4]
20001d40:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
20001d42:	193b      	adds	r3, r7, r4
20001d44:	687a      	ldr	r2, [r7, #4]
20001d46:	8c12      	ldrh	r2, [r2, #32]
20001d48:	801a      	strh	r2, [r3, #0]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
20001d4a:	183b      	adds	r3, r7, r0
20001d4c:	687a      	ldr	r2, [r7, #4]
20001d4e:	8892      	ldrh	r2, [r2, #4]
20001d50:	801a      	strh	r2, [r3, #0]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
20001d52:	187b      	adds	r3, r7, r1
20001d54:	687a      	ldr	r2, [r7, #4]
20001d56:	8b92      	ldrh	r2, [r2, #28]
20001d58:	801a      	strh	r2, [r3, #0]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
20001d5a:	187b      	adds	r3, r7, r1
20001d5c:	0008      	movs	r0, r1
20001d5e:	187a      	adds	r2, r7, r1
20001d60:	8812      	ldrh	r2, [r2, #0]
20001d62:	2170      	movs	r1, #112	; 0x70
20001d64:	438a      	bics	r2, r1
20001d66:	801a      	strh	r2, [r3, #0]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
20001d68:	183b      	adds	r3, r7, r0
20001d6a:	183a      	adds	r2, r7, r0
20001d6c:	8812      	ldrh	r2, [r2, #0]
20001d6e:	2103      	movs	r1, #3
20001d70:	438a      	bics	r2, r1
20001d72:	801a      	strh	r2, [r3, #0]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
20001d74:	683b      	ldr	r3, [r7, #0]
20001d76:	8819      	ldrh	r1, [r3, #0]
20001d78:	183b      	adds	r3, r7, r0
20001d7a:	183a      	adds	r2, r7, r0
20001d7c:	8812      	ldrh	r2, [r2, #0]
20001d7e:	430a      	orrs	r2, r1
20001d80:	801a      	strh	r2, [r3, #0]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
20001d82:	0020      	movs	r0, r4
20001d84:	183b      	adds	r3, r7, r0
20001d86:	183a      	adds	r2, r7, r0
20001d88:	8812      	ldrh	r2, [r2, #0]
20001d8a:	493a      	ldr	r1, [pc, #232]	; (20001e74 <TIM_OC3Init+0x164>)
20001d8c:	400a      	ands	r2, r1
20001d8e:	801a      	strh	r2, [r3, #0]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
20001d90:	683b      	ldr	r3, [r7, #0]
20001d92:	899b      	ldrh	r3, [r3, #12]
20001d94:	021b      	lsls	r3, r3, #8
20001d96:	b299      	uxth	r1, r3
20001d98:	183b      	adds	r3, r7, r0
20001d9a:	183a      	adds	r2, r7, r0
20001d9c:	8812      	ldrh	r2, [r2, #0]
20001d9e:	430a      	orrs	r2, r1
20001da0:	801a      	strh	r2, [r3, #0]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
20001da2:	683b      	ldr	r3, [r7, #0]
20001da4:	885b      	ldrh	r3, [r3, #2]
20001da6:	021b      	lsls	r3, r3, #8
20001da8:	b299      	uxth	r1, r3
20001daa:	183b      	adds	r3, r7, r0
20001dac:	183a      	adds	r2, r7, r0
20001dae:	8812      	ldrh	r2, [r2, #0]
20001db0:	430a      	orrs	r2, r1
20001db2:	801a      	strh	r2, [r3, #0]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
20001db4:	687b      	ldr	r3, [r7, #4]
20001db6:	4a30      	ldr	r2, [pc, #192]	; (20001e78 <TIM_OC3Init+0x168>)
20001db8:	4293      	cmp	r3, r2
20001dba:	d003      	beq.n	20001dc4 <TIM_OC3Init+0xb4>
20001dbc:	687b      	ldr	r3, [r7, #4]
20001dbe:	4a2f      	ldr	r2, [pc, #188]	; (20001e7c <TIM_OC3Init+0x16c>)
20001dc0:	4293      	cmp	r3, r2
20001dc2:	d13d      	bne.n	20001e40 <TIM_OC3Init+0x130>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
20001dc4:	200e      	movs	r0, #14
20001dc6:	183b      	adds	r3, r7, r0
20001dc8:	183a      	adds	r2, r7, r0
20001dca:	8812      	ldrh	r2, [r2, #0]
20001dcc:	492c      	ldr	r1, [pc, #176]	; (20001e80 <TIM_OC3Init+0x170>)
20001dce:	400a      	ands	r2, r1
20001dd0:	801a      	strh	r2, [r3, #0]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
20001dd2:	683b      	ldr	r3, [r7, #0]
20001dd4:	89db      	ldrh	r3, [r3, #14]
20001dd6:	021b      	lsls	r3, r3, #8
20001dd8:	b299      	uxth	r1, r3
20001dda:	183b      	adds	r3, r7, r0
20001ddc:	183a      	adds	r2, r7, r0
20001dde:	8812      	ldrh	r2, [r2, #0]
20001de0:	430a      	orrs	r2, r1
20001de2:	801a      	strh	r2, [r3, #0]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
20001de4:	183b      	adds	r3, r7, r0
20001de6:	183a      	adds	r2, r7, r0
20001de8:	8812      	ldrh	r2, [r2, #0]
20001dea:	4926      	ldr	r1, [pc, #152]	; (20001e84 <TIM_OC3Init+0x174>)
20001dec:	400a      	ands	r2, r1
20001dee:	801a      	strh	r2, [r3, #0]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
20001df0:	683b      	ldr	r3, [r7, #0]
20001df2:	889b      	ldrh	r3, [r3, #4]
20001df4:	021b      	lsls	r3, r3, #8
20001df6:	b299      	uxth	r1, r3
20001df8:	183b      	adds	r3, r7, r0
20001dfa:	183a      	adds	r2, r7, r0
20001dfc:	8812      	ldrh	r2, [r2, #0]
20001dfe:	430a      	orrs	r2, r1
20001e00:	801a      	strh	r2, [r3, #0]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
20001e02:	200c      	movs	r0, #12
20001e04:	183b      	adds	r3, r7, r0
20001e06:	183a      	adds	r2, r7, r0
20001e08:	8812      	ldrh	r2, [r2, #0]
20001e0a:	491f      	ldr	r1, [pc, #124]	; (20001e88 <TIM_OC3Init+0x178>)
20001e0c:	400a      	ands	r2, r1
20001e0e:	801a      	strh	r2, [r3, #0]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
20001e10:	183b      	adds	r3, r7, r0
20001e12:	183a      	adds	r2, r7, r0
20001e14:	8812      	ldrh	r2, [r2, #0]
20001e16:	491d      	ldr	r1, [pc, #116]	; (20001e8c <TIM_OC3Init+0x17c>)
20001e18:	400a      	ands	r2, r1
20001e1a:	801a      	strh	r2, [r3, #0]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
20001e1c:	683b      	ldr	r3, [r7, #0]
20001e1e:	8a1b      	ldrh	r3, [r3, #16]
20001e20:	011b      	lsls	r3, r3, #4
20001e22:	b299      	uxth	r1, r3
20001e24:	183b      	adds	r3, r7, r0
20001e26:	183a      	adds	r2, r7, r0
20001e28:	8812      	ldrh	r2, [r2, #0]
20001e2a:	430a      	orrs	r2, r1
20001e2c:	801a      	strh	r2, [r3, #0]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
20001e2e:	683b      	ldr	r3, [r7, #0]
20001e30:	8a5b      	ldrh	r3, [r3, #18]
20001e32:	011b      	lsls	r3, r3, #4
20001e34:	b299      	uxth	r1, r3
20001e36:	183b      	adds	r3, r7, r0
20001e38:	183a      	adds	r2, r7, r0
20001e3a:	8812      	ldrh	r2, [r2, #0]
20001e3c:	430a      	orrs	r2, r1
20001e3e:	801a      	strh	r2, [r3, #0]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
20001e40:	687b      	ldr	r3, [r7, #4]
20001e42:	220c      	movs	r2, #12
20001e44:	18ba      	adds	r2, r7, r2
20001e46:	8812      	ldrh	r2, [r2, #0]
20001e48:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
20001e4a:	687b      	ldr	r3, [r7, #4]
20001e4c:	220a      	movs	r2, #10
20001e4e:	18ba      	adds	r2, r7, r2
20001e50:	8812      	ldrh	r2, [r2, #0]
20001e52:	839a      	strh	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
20001e54:	683b      	ldr	r3, [r7, #0]
20001e56:	689a      	ldr	r2, [r3, #8]
20001e58:	687b      	ldr	r3, [r7, #4]
20001e5a:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
20001e5c:	687b      	ldr	r3, [r7, #4]
20001e5e:	220e      	movs	r2, #14
20001e60:	18ba      	adds	r2, r7, r2
20001e62:	8812      	ldrh	r2, [r2, #0]
20001e64:	841a      	strh	r2, [r3, #32]
}
20001e66:	46c0      	nop			; (mov r8, r8)
20001e68:	46bd      	mov	sp, r7
20001e6a:	b005      	add	sp, #20
20001e6c:	bd90      	pop	{r4, r7, pc}
20001e6e:	46c0      	nop			; (mov r8, r8)
20001e70:	fffffeff 			; <UNDEFINED> instruction: 0xfffffeff
20001e74:	fffffdff 			; <UNDEFINED> instruction: 0xfffffdff
20001e78:	40010000 	andmi	r0, r1, r0
20001e7c:	40010400 	andmi	r0, r1, r0, lsl #8
20001e80:	fffff7ff 			; <UNDEFINED> instruction: 0xfffff7ff
20001e84:	fffffbff 			; <UNDEFINED> instruction: 0xfffffbff
20001e88:	ffffefff 			; <UNDEFINED> instruction: 0xffffefff
20001e8c:	ffffdfff 			; <UNDEFINED> instruction: 0xffffdfff

20001e90 <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
20001e90:	b590      	push	{r4, r7, lr}
20001e92:	b085      	sub	sp, #20
20001e94:	af00      	add	r7, sp, #0
20001e96:	6078      	str	r0, [r7, #4]
20001e98:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
20001e9a:	210c      	movs	r1, #12
20001e9c:	187b      	adds	r3, r7, r1
20001e9e:	2200      	movs	r2, #0
20001ea0:	801a      	strh	r2, [r3, #0]
20001ea2:	240a      	movs	r4, #10
20001ea4:	193b      	adds	r3, r7, r4
20001ea6:	2200      	movs	r2, #0
20001ea8:	801a      	strh	r2, [r3, #0]
20001eaa:	200e      	movs	r0, #14
20001eac:	183b      	adds	r3, r7, r0
20001eae:	2200      	movs	r2, #0
20001eb0:	801a      	strh	r2, [r3, #0]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
20001eb2:	687b      	ldr	r3, [r7, #4]
20001eb4:	8c1b      	ldrh	r3, [r3, #32]
20001eb6:	b29b      	uxth	r3, r3
20001eb8:	4a37      	ldr	r2, [pc, #220]	; (20001f98 <TIM_OC4Init+0x108>)
20001eba:	4013      	ands	r3, r2
20001ebc:	b29a      	uxth	r2, r3
20001ebe:	687b      	ldr	r3, [r7, #4]
20001ec0:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
20001ec2:	193b      	adds	r3, r7, r4
20001ec4:	687a      	ldr	r2, [r7, #4]
20001ec6:	8c12      	ldrh	r2, [r2, #32]
20001ec8:	801a      	strh	r2, [r3, #0]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
20001eca:	183b      	adds	r3, r7, r0
20001ecc:	687a      	ldr	r2, [r7, #4]
20001ece:	8892      	ldrh	r2, [r2, #4]
20001ed0:	801a      	strh	r2, [r3, #0]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
20001ed2:	187b      	adds	r3, r7, r1
20001ed4:	687a      	ldr	r2, [r7, #4]
20001ed6:	8b92      	ldrh	r2, [r2, #28]
20001ed8:	801a      	strh	r2, [r3, #0]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
20001eda:	187b      	adds	r3, r7, r1
20001edc:	0008      	movs	r0, r1
20001ede:	187a      	adds	r2, r7, r1
20001ee0:	8812      	ldrh	r2, [r2, #0]
20001ee2:	492e      	ldr	r1, [pc, #184]	; (20001f9c <TIM_OC4Init+0x10c>)
20001ee4:	400a      	ands	r2, r1
20001ee6:	801a      	strh	r2, [r3, #0]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
20001ee8:	183b      	adds	r3, r7, r0
20001eea:	183a      	adds	r2, r7, r0
20001eec:	8812      	ldrh	r2, [r2, #0]
20001eee:	492c      	ldr	r1, [pc, #176]	; (20001fa0 <TIM_OC4Init+0x110>)
20001ef0:	400a      	ands	r2, r1
20001ef2:	801a      	strh	r2, [r3, #0]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
20001ef4:	683b      	ldr	r3, [r7, #0]
20001ef6:	881b      	ldrh	r3, [r3, #0]
20001ef8:	021b      	lsls	r3, r3, #8
20001efa:	b299      	uxth	r1, r3
20001efc:	183b      	adds	r3, r7, r0
20001efe:	183a      	adds	r2, r7, r0
20001f00:	8812      	ldrh	r2, [r2, #0]
20001f02:	430a      	orrs	r2, r1
20001f04:	801a      	strh	r2, [r3, #0]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
20001f06:	0020      	movs	r0, r4
20001f08:	183b      	adds	r3, r7, r0
20001f0a:	183a      	adds	r2, r7, r0
20001f0c:	8812      	ldrh	r2, [r2, #0]
20001f0e:	4925      	ldr	r1, [pc, #148]	; (20001fa4 <TIM_OC4Init+0x114>)
20001f10:	400a      	ands	r2, r1
20001f12:	801a      	strh	r2, [r3, #0]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
20001f14:	683b      	ldr	r3, [r7, #0]
20001f16:	899b      	ldrh	r3, [r3, #12]
20001f18:	031b      	lsls	r3, r3, #12
20001f1a:	b299      	uxth	r1, r3
20001f1c:	183b      	adds	r3, r7, r0
20001f1e:	183a      	adds	r2, r7, r0
20001f20:	8812      	ldrh	r2, [r2, #0]
20001f22:	430a      	orrs	r2, r1
20001f24:	801a      	strh	r2, [r3, #0]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
20001f26:	683b      	ldr	r3, [r7, #0]
20001f28:	885b      	ldrh	r3, [r3, #2]
20001f2a:	031b      	lsls	r3, r3, #12
20001f2c:	b299      	uxth	r1, r3
20001f2e:	183b      	adds	r3, r7, r0
20001f30:	183a      	adds	r2, r7, r0
20001f32:	8812      	ldrh	r2, [r2, #0]
20001f34:	430a      	orrs	r2, r1
20001f36:	801a      	strh	r2, [r3, #0]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
20001f38:	687b      	ldr	r3, [r7, #4]
20001f3a:	4a1b      	ldr	r2, [pc, #108]	; (20001fa8 <TIM_OC4Init+0x118>)
20001f3c:	4293      	cmp	r3, r2
20001f3e:	d003      	beq.n	20001f48 <TIM_OC4Init+0xb8>
20001f40:	687b      	ldr	r3, [r7, #4]
20001f42:	4a1a      	ldr	r2, [pc, #104]	; (20001fac <TIM_OC4Init+0x11c>)
20001f44:	4293      	cmp	r3, r2
20001f46:	d10f      	bne.n	20001f68 <TIM_OC4Init+0xd8>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
20001f48:	200e      	movs	r0, #14
20001f4a:	183b      	adds	r3, r7, r0
20001f4c:	183a      	adds	r2, r7, r0
20001f4e:	8812      	ldrh	r2, [r2, #0]
20001f50:	4917      	ldr	r1, [pc, #92]	; (20001fb0 <TIM_OC4Init+0x120>)
20001f52:	400a      	ands	r2, r1
20001f54:	801a      	strh	r2, [r3, #0]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
20001f56:	683b      	ldr	r3, [r7, #0]
20001f58:	8a1b      	ldrh	r3, [r3, #16]
20001f5a:	019b      	lsls	r3, r3, #6
20001f5c:	b299      	uxth	r1, r3
20001f5e:	183b      	adds	r3, r7, r0
20001f60:	183a      	adds	r2, r7, r0
20001f62:	8812      	ldrh	r2, [r2, #0]
20001f64:	430a      	orrs	r2, r1
20001f66:	801a      	strh	r2, [r3, #0]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
20001f68:	687b      	ldr	r3, [r7, #4]
20001f6a:	220e      	movs	r2, #14
20001f6c:	18ba      	adds	r2, r7, r2
20001f6e:	8812      	ldrh	r2, [r2, #0]
20001f70:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
20001f72:	687b      	ldr	r3, [r7, #4]
20001f74:	220c      	movs	r2, #12
20001f76:	18ba      	adds	r2, r7, r2
20001f78:	8812      	ldrh	r2, [r2, #0]
20001f7a:	839a      	strh	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
20001f7c:	683b      	ldr	r3, [r7, #0]
20001f7e:	689a      	ldr	r2, [r3, #8]
20001f80:	687b      	ldr	r3, [r7, #4]
20001f82:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
20001f84:	687b      	ldr	r3, [r7, #4]
20001f86:	220a      	movs	r2, #10
20001f88:	18ba      	adds	r2, r7, r2
20001f8a:	8812      	ldrh	r2, [r2, #0]
20001f8c:	841a      	strh	r2, [r3, #32]
}
20001f8e:	46c0      	nop			; (mov r8, r8)
20001f90:	46bd      	mov	sp, r7
20001f92:	b005      	add	sp, #20
20001f94:	bd90      	pop	{r4, r7, pc}
20001f96:	46c0      	nop			; (mov r8, r8)
20001f98:	ffffefff 			; <UNDEFINED> instruction: 0xffffefff
20001f9c:	ffff8fff 			; <UNDEFINED> instruction: 0xffff8fff
20001fa0:	fffffcff 			; <UNDEFINED> instruction: 0xfffffcff
20001fa4:	ffffdfff 			; <UNDEFINED> instruction: 0xffffdfff
20001fa8:	40010000 	andmi	r0, r1, r0
20001fac:	40010400 	andmi	r0, r1, r0, lsl #8
20001fb0:	ffffbfff 			; <UNDEFINED> instruction: 0xffffbfff

20001fb4 <TIM_OCStructInit>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
20001fb4:	b580      	push	{r7, lr}
20001fb6:	b082      	sub	sp, #8
20001fb8:	af00      	add	r7, sp, #0
20001fba:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
20001fbc:	687b      	ldr	r3, [r7, #4]
20001fbe:	2200      	movs	r2, #0
20001fc0:	801a      	strh	r2, [r3, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
20001fc2:	687b      	ldr	r3, [r7, #4]
20001fc4:	2200      	movs	r2, #0
20001fc6:	805a      	strh	r2, [r3, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
20001fc8:	687b      	ldr	r3, [r7, #4]
20001fca:	2200      	movs	r2, #0
20001fcc:	809a      	strh	r2, [r3, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x00000000;
20001fce:	687b      	ldr	r3, [r7, #4]
20001fd0:	2200      	movs	r2, #0
20001fd2:	609a      	str	r2, [r3, #8]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
20001fd4:	687b      	ldr	r3, [r7, #4]
20001fd6:	2200      	movs	r2, #0
20001fd8:	819a      	strh	r2, [r3, #12]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
20001fda:	687b      	ldr	r3, [r7, #4]
20001fdc:	2200      	movs	r2, #0
20001fde:	81da      	strh	r2, [r3, #14]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
20001fe0:	687b      	ldr	r3, [r7, #4]
20001fe2:	2200      	movs	r2, #0
20001fe4:	821a      	strh	r2, [r3, #16]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
20001fe6:	687b      	ldr	r3, [r7, #4]
20001fe8:	2200      	movs	r2, #0
20001fea:	825a      	strh	r2, [r3, #18]
}
20001fec:	46c0      	nop			; (mov r8, r8)
20001fee:	46bd      	mov	sp, r7
20001ff0:	b002      	add	sp, #8
20001ff2:	bd80      	pop	{r7, pc}

20001ff4 <TIM_SelectOCxM>:
  *            @arg TIM_ForcedAction_Active
  *            @arg TIM_ForcedAction_InActive
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
{
20001ff4:	b580      	push	{r7, lr}
20001ff6:	b084      	sub	sp, #16
20001ff8:	af00      	add	r7, sp, #0
20001ffa:	6078      	str	r0, [r7, #4]
20001ffc:	0008      	movs	r0, r1
20001ffe:	0011      	movs	r1, r2
20002000:	1cbb      	adds	r3, r7, #2
20002002:	1c02      	adds	r2, r0, #0
20002004:	801a      	strh	r2, [r3, #0]
20002006:	003b      	movs	r3, r7
20002008:	1c0a      	adds	r2, r1, #0
2000200a:	801a      	strh	r2, [r3, #0]
  uint32_t tmp = 0;
2000200c:	2300      	movs	r3, #0
2000200e:	60fb      	str	r3, [r7, #12]
  uint16_t tmp1 = 0;
20002010:	210a      	movs	r1, #10
20002012:	187b      	adds	r3, r7, r1
20002014:	2200      	movs	r2, #0
20002016:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
20002018:	687b      	ldr	r3, [r7, #4]
2000201a:	60fb      	str	r3, [r7, #12]
  tmp += CCMR_OFFSET;
2000201c:	68fb      	ldr	r3, [r7, #12]
2000201e:	3318      	adds	r3, #24
20002020:	60fb      	str	r3, [r7, #12]

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
20002022:	1cbb      	adds	r3, r7, #2
20002024:	881b      	ldrh	r3, [r3, #0]
20002026:	2201      	movs	r2, #1
20002028:	409a      	lsls	r2, r3
2000202a:	187b      	adds	r3, r7, r1
2000202c:	801a      	strh	r2, [r3, #0]

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
2000202e:	687b      	ldr	r3, [r7, #4]
20002030:	8c1b      	ldrh	r3, [r3, #32]
20002032:	b29b      	uxth	r3, r3
20002034:	187a      	adds	r2, r7, r1
20002036:	8812      	ldrh	r2, [r2, #0]
20002038:	43d2      	mvns	r2, r2
2000203a:	b292      	uxth	r2, r2
2000203c:	4013      	ands	r3, r2
2000203e:	b29a      	uxth	r2, r3
20002040:	687b      	ldr	r3, [r7, #4]
20002042:	841a      	strh	r2, [r3, #32]

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
20002044:	1cbb      	adds	r3, r7, #2
20002046:	881b      	ldrh	r3, [r3, #0]
20002048:	2b00      	cmp	r3, #0
2000204a:	d003      	beq.n	20002054 <TIM_SelectOCxM+0x60>
2000204c:	1cbb      	adds	r3, r7, #2
2000204e:	881b      	ldrh	r3, [r3, #0]
20002050:	2b08      	cmp	r3, #8
20002052:	d115      	bne.n	20002080 <TIM_SelectOCxM+0x8c>
  {
    tmp += (TIM_Channel>>1);
20002054:	1cbb      	adds	r3, r7, #2
20002056:	881b      	ldrh	r3, [r3, #0]
20002058:	085b      	lsrs	r3, r3, #1
2000205a:	b29b      	uxth	r3, r3
2000205c:	001a      	movs	r2, r3
2000205e:	68fb      	ldr	r3, [r7, #12]
20002060:	189b      	adds	r3, r3, r2
20002062:	60fb      	str	r3, [r7, #12]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC13M_MASK;
20002064:	68fb      	ldr	r3, [r7, #12]
20002066:	681a      	ldr	r2, [r3, #0]
20002068:	68fb      	ldr	r3, [r7, #12]
2000206a:	4915      	ldr	r1, [pc, #84]	; (200020c0 <TIM_SelectOCxM+0xcc>)
2000206c:	400a      	ands	r2, r1
2000206e:	601a      	str	r2, [r3, #0]
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
20002070:	68fb      	ldr	r3, [r7, #12]
20002072:	6819      	ldr	r1, [r3, #0]
20002074:	003b      	movs	r3, r7
20002076:	881a      	ldrh	r2, [r3, #0]
20002078:	68fb      	ldr	r3, [r7, #12]
2000207a:	430a      	orrs	r2, r1
2000207c:	601a      	str	r2, [r3, #0]
2000207e:	e01a      	b.n	200020b6 <TIM_SelectOCxM+0xc2>
  }
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
20002080:	1cbb      	adds	r3, r7, #2
20002082:	881b      	ldrh	r3, [r3, #0]
20002084:	3b04      	subs	r3, #4
20002086:	b29b      	uxth	r3, r3
20002088:	085b      	lsrs	r3, r3, #1
2000208a:	b29b      	uxth	r3, r3
2000208c:	001a      	movs	r2, r3
2000208e:	68fb      	ldr	r3, [r7, #12]
20002090:	189b      	adds	r3, r3, r2
20002092:	60fb      	str	r3, [r7, #12]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC24M_MASK;
20002094:	68fb      	ldr	r3, [r7, #12]
20002096:	681a      	ldr	r2, [r3, #0]
20002098:	68fb      	ldr	r3, [r7, #12]
2000209a:	490a      	ldr	r1, [pc, #40]	; (200020c4 <TIM_SelectOCxM+0xd0>)
2000209c:	400a      	ands	r2, r1
2000209e:	601a      	str	r2, [r3, #0]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
200020a0:	68fb      	ldr	r3, [r7, #12]
200020a2:	681a      	ldr	r2, [r3, #0]
200020a4:	003b      	movs	r3, r7
200020a6:	881b      	ldrh	r3, [r3, #0]
200020a8:	021b      	lsls	r3, r3, #8
200020aa:	b29b      	uxth	r3, r3
200020ac:	0019      	movs	r1, r3
200020ae:	68fb      	ldr	r3, [r7, #12]
200020b0:	430a      	orrs	r2, r1
200020b2:	601a      	str	r2, [r3, #0]
  }
}
200020b4:	46c0      	nop			; (mov r8, r8)
200020b6:	46c0      	nop			; (mov r8, r8)
200020b8:	46bd      	mov	sp, r7
200020ba:	b004      	add	sp, #16
200020bc:	bd80      	pop	{r7, pc}
200020be:	46c0      	nop			; (mov r8, r8)
200020c0:	0000ff8f 	andeq	pc, r0, pc, lsl #31
200020c4:	00008fff 	strdeq	r8, [r0], -pc	; <UNPREDICTABLE>

200020c8 <TIM_SetCompare1>:
  * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint32_t Compare1)
{
200020c8:	b580      	push	{r7, lr}
200020ca:	b082      	sub	sp, #8
200020cc:	af00      	add	r7, sp, #0
200020ce:	6078      	str	r0, [r7, #4]
200020d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
200020d2:	687b      	ldr	r3, [r7, #4]
200020d4:	683a      	ldr	r2, [r7, #0]
200020d6:	635a      	str	r2, [r3, #52]	; 0x34
}
200020d8:	46c0      	nop			; (mov r8, r8)
200020da:	46bd      	mov	sp, r7
200020dc:	b002      	add	sp, #8
200020de:	bd80      	pop	{r7, pc}

200020e0 <TIM_SetCompare2>:
  *         peripheral.
  * @param  Compare2: specifies the Capture Compare2 register new value.
  * @retval None
  */
void TIM_SetCompare2(TIM_TypeDef* TIMx, uint32_t Compare2)
{
200020e0:	b580      	push	{r7, lr}
200020e2:	b082      	sub	sp, #8
200020e4:	af00      	add	r7, sp, #0
200020e6:	6078      	str	r0, [r7, #4]
200020e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
200020ea:	687b      	ldr	r3, [r7, #4]
200020ec:	683a      	ldr	r2, [r7, #0]
200020ee:	639a      	str	r2, [r3, #56]	; 0x38
}
200020f0:	46c0      	nop			; (mov r8, r8)
200020f2:	46bd      	mov	sp, r7
200020f4:	b002      	add	sp, #8
200020f6:	bd80      	pop	{r7, pc}

200020f8 <TIM_SetCompare3>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare3: specifies the Capture Compare3 register new value.
  * @retval None
  */
void TIM_SetCompare3(TIM_TypeDef* TIMx, uint32_t Compare3)
{
200020f8:	b580      	push	{r7, lr}
200020fa:	b082      	sub	sp, #8
200020fc:	af00      	add	r7, sp, #0
200020fe:	6078      	str	r0, [r7, #4]
20002100:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
20002102:	687b      	ldr	r3, [r7, #4]
20002104:	683a      	ldr	r2, [r7, #0]
20002106:	63da      	str	r2, [r3, #60]	; 0x3c
}
20002108:	46c0      	nop			; (mov r8, r8)
2000210a:	46bd      	mov	sp, r7
2000210c:	b002      	add	sp, #8
2000210e:	bd80      	pop	{r7, pc}

20002110 <TIM_SetCompare4>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare4: specifies the Capture Compare4 register new value.
  * @retval None
  */
void TIM_SetCompare4(TIM_TypeDef* TIMx, uint32_t Compare4)
{
20002110:	b580      	push	{r7, lr}
20002112:	b082      	sub	sp, #8
20002114:	af00      	add	r7, sp, #0
20002116:	6078      	str	r0, [r7, #4]
20002118:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
2000211a:	687b      	ldr	r3, [r7, #4]
2000211c:	683a      	ldr	r2, [r7, #0]
2000211e:	641a      	str	r2, [r3, #64]	; 0x40
}
20002120:	46c0      	nop			; (mov r8, r8)
20002122:	46bd      	mov	sp, r7
20002124:	b002      	add	sp, #8
20002126:	bd80      	pop	{r7, pc}

20002128 <TIM_ForcedOC1Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC1REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC1REF.
  * @retval None
  */
void TIM_ForcedOC1Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
20002128:	b580      	push	{r7, lr}
2000212a:	b084      	sub	sp, #16
2000212c:	af00      	add	r7, sp, #0
2000212e:	6078      	str	r0, [r7, #4]
20002130:	000a      	movs	r2, r1
20002132:	1cbb      	adds	r3, r7, #2
20002134:	801a      	strh	r2, [r3, #0]
  uint16_t tmpccmr1 = 0;
20002136:	200e      	movs	r0, #14
20002138:	183b      	adds	r3, r7, r0
2000213a:	2200      	movs	r2, #0
2000213c:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
2000213e:	183b      	adds	r3, r7, r0
20002140:	687a      	ldr	r2, [r7, #4]
20002142:	8b12      	ldrh	r2, [r2, #24]
20002144:	801a      	strh	r2, [r3, #0]

  /* Reset the OC1M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1M;
20002146:	183b      	adds	r3, r7, r0
20002148:	183a      	adds	r2, r7, r0
2000214a:	8812      	ldrh	r2, [r2, #0]
2000214c:	2170      	movs	r1, #112	; 0x70
2000214e:	438a      	bics	r2, r1
20002150:	801a      	strh	r2, [r3, #0]

  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
20002152:	183b      	adds	r3, r7, r0
20002154:	1839      	adds	r1, r7, r0
20002156:	1cba      	adds	r2, r7, #2
20002158:	8809      	ldrh	r1, [r1, #0]
2000215a:	8812      	ldrh	r2, [r2, #0]
2000215c:	430a      	orrs	r2, r1
2000215e:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
20002160:	687b      	ldr	r3, [r7, #4]
20002162:	183a      	adds	r2, r7, r0
20002164:	8812      	ldrh	r2, [r2, #0]
20002166:	831a      	strh	r2, [r3, #24]
}
20002168:	46c0      	nop			; (mov r8, r8)
2000216a:	46bd      	mov	sp, r7
2000216c:	b004      	add	sp, #16
2000216e:	bd80      	pop	{r7, pc}

20002170 <TIM_ForcedOC2Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC2REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC2REF.
  * @retval None
  */
void TIM_ForcedOC2Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
20002170:	b580      	push	{r7, lr}
20002172:	b084      	sub	sp, #16
20002174:	af00      	add	r7, sp, #0
20002176:	6078      	str	r0, [r7, #4]
20002178:	000a      	movs	r2, r1
2000217a:	1cbb      	adds	r3, r7, #2
2000217c:	801a      	strh	r2, [r3, #0]
  uint16_t tmpccmr1 = 0;
2000217e:	200e      	movs	r0, #14
20002180:	183b      	adds	r3, r7, r0
20002182:	2200      	movs	r2, #0
20002184:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
20002186:	183b      	adds	r3, r7, r0
20002188:	687a      	ldr	r2, [r7, #4]
2000218a:	8b12      	ldrh	r2, [r2, #24]
2000218c:	801a      	strh	r2, [r3, #0]

  /* Reset the OC2M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2M;
2000218e:	183b      	adds	r3, r7, r0
20002190:	183a      	adds	r2, r7, r0
20002192:	8812      	ldrh	r2, [r2, #0]
20002194:	4909      	ldr	r1, [pc, #36]	; (200021bc <TIM_ForcedOC2Config+0x4c>)
20002196:	400a      	ands	r2, r1
20002198:	801a      	strh	r2, [r3, #0]

  /* Configure The Forced output Mode */
  tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
2000219a:	1cbb      	adds	r3, r7, #2
2000219c:	881b      	ldrh	r3, [r3, #0]
2000219e:	021b      	lsls	r3, r3, #8
200021a0:	b299      	uxth	r1, r3
200021a2:	183b      	adds	r3, r7, r0
200021a4:	183a      	adds	r2, r7, r0
200021a6:	8812      	ldrh	r2, [r2, #0]
200021a8:	430a      	orrs	r2, r1
200021aa:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
200021ac:	687b      	ldr	r3, [r7, #4]
200021ae:	183a      	adds	r2, r7, r0
200021b0:	8812      	ldrh	r2, [r2, #0]
200021b2:	831a      	strh	r2, [r3, #24]
}
200021b4:	46c0      	nop			; (mov r8, r8)
200021b6:	46bd      	mov	sp, r7
200021b8:	b004      	add	sp, #16
200021ba:	bd80      	pop	{r7, pc}
200021bc:	ffff8fff 			; <UNDEFINED> instruction: 0xffff8fff

200021c0 <TIM_ForcedOC3Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC3REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC3REF.
  * @retval None
  */
void TIM_ForcedOC3Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
200021c0:	b580      	push	{r7, lr}
200021c2:	b084      	sub	sp, #16
200021c4:	af00      	add	r7, sp, #0
200021c6:	6078      	str	r0, [r7, #4]
200021c8:	000a      	movs	r2, r1
200021ca:	1cbb      	adds	r3, r7, #2
200021cc:	801a      	strh	r2, [r3, #0]
  uint16_t tmpccmr2 = 0;
200021ce:	200e      	movs	r0, #14
200021d0:	183b      	adds	r3, r7, r0
200021d2:	2200      	movs	r2, #0
200021d4:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));

  tmpccmr2 = TIMx->CCMR2;
200021d6:	183b      	adds	r3, r7, r0
200021d8:	687a      	ldr	r2, [r7, #4]
200021da:	8b92      	ldrh	r2, [r2, #28]
200021dc:	801a      	strh	r2, [r3, #0]

  /* Reset the OC1M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3M;
200021de:	183b      	adds	r3, r7, r0
200021e0:	183a      	adds	r2, r7, r0
200021e2:	8812      	ldrh	r2, [r2, #0]
200021e4:	2170      	movs	r1, #112	; 0x70
200021e6:	438a      	bics	r2, r1
200021e8:	801a      	strh	r2, [r3, #0]

  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
200021ea:	183b      	adds	r3, r7, r0
200021ec:	1839      	adds	r1, r7, r0
200021ee:	1cba      	adds	r2, r7, #2
200021f0:	8809      	ldrh	r1, [r1, #0]
200021f2:	8812      	ldrh	r2, [r2, #0]
200021f4:	430a      	orrs	r2, r1
200021f6:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
200021f8:	687b      	ldr	r3, [r7, #4]
200021fa:	183a      	adds	r2, r7, r0
200021fc:	8812      	ldrh	r2, [r2, #0]
200021fe:	839a      	strh	r2, [r3, #28]
}
20002200:	46c0      	nop			; (mov r8, r8)
20002202:	46bd      	mov	sp, r7
20002204:	b004      	add	sp, #16
20002206:	bd80      	pop	{r7, pc}

20002208 <TIM_ForcedOC4Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC4REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC4REF.
  * @retval None
  */
void TIM_ForcedOC4Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
20002208:	b580      	push	{r7, lr}
2000220a:	b084      	sub	sp, #16
2000220c:	af00      	add	r7, sp, #0
2000220e:	6078      	str	r0, [r7, #4]
20002210:	000a      	movs	r2, r1
20002212:	1cbb      	adds	r3, r7, #2
20002214:	801a      	strh	r2, [r3, #0]
  uint16_t tmpccmr2 = 0;
20002216:	200e      	movs	r0, #14
20002218:	183b      	adds	r3, r7, r0
2000221a:	2200      	movs	r2, #0
2000221c:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
2000221e:	183b      	adds	r3, r7, r0
20002220:	687a      	ldr	r2, [r7, #4]
20002222:	8b92      	ldrh	r2, [r2, #28]
20002224:	801a      	strh	r2, [r3, #0]

  /* Reset the OC2M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4M;
20002226:	183b      	adds	r3, r7, r0
20002228:	183a      	adds	r2, r7, r0
2000222a:	8812      	ldrh	r2, [r2, #0]
2000222c:	4909      	ldr	r1, [pc, #36]	; (20002254 <TIM_ForcedOC4Config+0x4c>)
2000222e:	400a      	ands	r2, r1
20002230:	801a      	strh	r2, [r3, #0]

  /* Configure The Forced output Mode */
  tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
20002232:	1cbb      	adds	r3, r7, #2
20002234:	881b      	ldrh	r3, [r3, #0]
20002236:	021b      	lsls	r3, r3, #8
20002238:	b299      	uxth	r1, r3
2000223a:	183b      	adds	r3, r7, r0
2000223c:	183a      	adds	r2, r7, r0
2000223e:	8812      	ldrh	r2, [r2, #0]
20002240:	430a      	orrs	r2, r1
20002242:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
20002244:	687b      	ldr	r3, [r7, #4]
20002246:	183a      	adds	r2, r7, r0
20002248:	8812      	ldrh	r2, [r2, #0]
2000224a:	839a      	strh	r2, [r3, #28]
}
2000224c:	46c0      	nop			; (mov r8, r8)
2000224e:	46bd      	mov	sp, r7
20002250:	b004      	add	sp, #16
20002252:	bd80      	pop	{r7, pc}
20002254:	ffff8fff 			; <UNDEFINED> instruction: 0xffff8fff

20002258 <TIM_OC1PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
20002258:	b580      	push	{r7, lr}
2000225a:	b084      	sub	sp, #16
2000225c:	af00      	add	r7, sp, #0
2000225e:	6078      	str	r0, [r7, #4]
20002260:	000a      	movs	r2, r1
20002262:	1cbb      	adds	r3, r7, #2
20002264:	801a      	strh	r2, [r3, #0]
  uint16_t tmpccmr1 = 0;
20002266:	200e      	movs	r0, #14
20002268:	183b      	adds	r3, r7, r0
2000226a:	2200      	movs	r2, #0
2000226c:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
2000226e:	183b      	adds	r3, r7, r0
20002270:	687a      	ldr	r2, [r7, #4]
20002272:	8b12      	ldrh	r2, [r2, #24]
20002274:	801a      	strh	r2, [r3, #0]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC1PE);
20002276:	183b      	adds	r3, r7, r0
20002278:	183a      	adds	r2, r7, r0
2000227a:	8812      	ldrh	r2, [r2, #0]
2000227c:	2108      	movs	r1, #8
2000227e:	438a      	bics	r2, r1
20002280:	801a      	strh	r2, [r3, #0]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
20002282:	183b      	adds	r3, r7, r0
20002284:	1839      	adds	r1, r7, r0
20002286:	1cba      	adds	r2, r7, #2
20002288:	8809      	ldrh	r1, [r1, #0]
2000228a:	8812      	ldrh	r2, [r2, #0]
2000228c:	430a      	orrs	r2, r1
2000228e:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
20002290:	687b      	ldr	r3, [r7, #4]
20002292:	183a      	adds	r2, r7, r0
20002294:	8812      	ldrh	r2, [r2, #0]
20002296:	831a      	strh	r2, [r3, #24]
}
20002298:	46c0      	nop			; (mov r8, r8)
2000229a:	46bd      	mov	sp, r7
2000229c:	b004      	add	sp, #16
2000229e:	bd80      	pop	{r7, pc}

200022a0 <TIM_OC2PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
200022a0:	b580      	push	{r7, lr}
200022a2:	b084      	sub	sp, #16
200022a4:	af00      	add	r7, sp, #0
200022a6:	6078      	str	r0, [r7, #4]
200022a8:	000a      	movs	r2, r1
200022aa:	1cbb      	adds	r3, r7, #2
200022ac:	801a      	strh	r2, [r3, #0]
  uint16_t tmpccmr1 = 0;
200022ae:	200e      	movs	r0, #14
200022b0:	183b      	adds	r3, r7, r0
200022b2:	2200      	movs	r2, #0
200022b4:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
200022b6:	183b      	adds	r3, r7, r0
200022b8:	687a      	ldr	r2, [r7, #4]
200022ba:	8b12      	ldrh	r2, [r2, #24]
200022bc:	801a      	strh	r2, [r3, #0]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2PE);
200022be:	183b      	adds	r3, r7, r0
200022c0:	183a      	adds	r2, r7, r0
200022c2:	8812      	ldrh	r2, [r2, #0]
200022c4:	4909      	ldr	r1, [pc, #36]	; (200022ec <TIM_OC2PreloadConfig+0x4c>)
200022c6:	400a      	ands	r2, r1
200022c8:	801a      	strh	r2, [r3, #0]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
200022ca:	1cbb      	adds	r3, r7, #2
200022cc:	881b      	ldrh	r3, [r3, #0]
200022ce:	021b      	lsls	r3, r3, #8
200022d0:	b299      	uxth	r1, r3
200022d2:	183b      	adds	r3, r7, r0
200022d4:	183a      	adds	r2, r7, r0
200022d6:	8812      	ldrh	r2, [r2, #0]
200022d8:	430a      	orrs	r2, r1
200022da:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
200022dc:	687b      	ldr	r3, [r7, #4]
200022de:	183a      	adds	r2, r7, r0
200022e0:	8812      	ldrh	r2, [r2, #0]
200022e2:	831a      	strh	r2, [r3, #24]
}
200022e4:	46c0      	nop			; (mov r8, r8)
200022e6:	46bd      	mov	sp, r7
200022e8:	b004      	add	sp, #16
200022ea:	bd80      	pop	{r7, pc}
200022ec:	fffff7ff 			; <UNDEFINED> instruction: 0xfffff7ff

200022f0 <TIM_OC3PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
200022f0:	b580      	push	{r7, lr}
200022f2:	b084      	sub	sp, #16
200022f4:	af00      	add	r7, sp, #0
200022f6:	6078      	str	r0, [r7, #4]
200022f8:	000a      	movs	r2, r1
200022fa:	1cbb      	adds	r3, r7, #2
200022fc:	801a      	strh	r2, [r3, #0]
  uint16_t tmpccmr2 = 0;
200022fe:	200e      	movs	r0, #14
20002300:	183b      	adds	r3, r7, r0
20002302:	2200      	movs	r2, #0
20002304:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
20002306:	183b      	adds	r3, r7, r0
20002308:	687a      	ldr	r2, [r7, #4]
2000230a:	8b92      	ldrh	r2, [r2, #28]
2000230c:	801a      	strh	r2, [r3, #0]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
2000230e:	183b      	adds	r3, r7, r0
20002310:	183a      	adds	r2, r7, r0
20002312:	8812      	ldrh	r2, [r2, #0]
20002314:	2108      	movs	r1, #8
20002316:	438a      	bics	r2, r1
20002318:	801a      	strh	r2, [r3, #0]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
2000231a:	183b      	adds	r3, r7, r0
2000231c:	1839      	adds	r1, r7, r0
2000231e:	1cba      	adds	r2, r7, #2
20002320:	8809      	ldrh	r1, [r1, #0]
20002322:	8812      	ldrh	r2, [r2, #0]
20002324:	430a      	orrs	r2, r1
20002326:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
20002328:	687b      	ldr	r3, [r7, #4]
2000232a:	183a      	adds	r2, r7, r0
2000232c:	8812      	ldrh	r2, [r2, #0]
2000232e:	839a      	strh	r2, [r3, #28]
}
20002330:	46c0      	nop			; (mov r8, r8)
20002332:	46bd      	mov	sp, r7
20002334:	b004      	add	sp, #16
20002336:	bd80      	pop	{r7, pc}

20002338 <TIM_OC4PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
20002338:	b580      	push	{r7, lr}
2000233a:	b084      	sub	sp, #16
2000233c:	af00      	add	r7, sp, #0
2000233e:	6078      	str	r0, [r7, #4]
20002340:	000a      	movs	r2, r1
20002342:	1cbb      	adds	r3, r7, #2
20002344:	801a      	strh	r2, [r3, #0]
  uint16_t tmpccmr2 = 0;
20002346:	200e      	movs	r0, #14
20002348:	183b      	adds	r3, r7, r0
2000234a:	2200      	movs	r2, #0
2000234c:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
2000234e:	183b      	adds	r3, r7, r0
20002350:	687a      	ldr	r2, [r7, #4]
20002352:	8b92      	ldrh	r2, [r2, #28]
20002354:	801a      	strh	r2, [r3, #0]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
20002356:	183b      	adds	r3, r7, r0
20002358:	183a      	adds	r2, r7, r0
2000235a:	8812      	ldrh	r2, [r2, #0]
2000235c:	4909      	ldr	r1, [pc, #36]	; (20002384 <TIM_OC4PreloadConfig+0x4c>)
2000235e:	400a      	ands	r2, r1
20002360:	801a      	strh	r2, [r3, #0]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
20002362:	1cbb      	adds	r3, r7, #2
20002364:	881b      	ldrh	r3, [r3, #0]
20002366:	021b      	lsls	r3, r3, #8
20002368:	b299      	uxth	r1, r3
2000236a:	183b      	adds	r3, r7, r0
2000236c:	183a      	adds	r2, r7, r0
2000236e:	8812      	ldrh	r2, [r2, #0]
20002370:	430a      	orrs	r2, r1
20002372:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
20002374:	687b      	ldr	r3, [r7, #4]
20002376:	183a      	adds	r2, r7, r0
20002378:	8812      	ldrh	r2, [r2, #0]
2000237a:	839a      	strh	r2, [r3, #28]
}
2000237c:	46c0      	nop			; (mov r8, r8)
2000237e:	46bd      	mov	sp, r7
20002380:	b004      	add	sp, #16
20002382:	bd80      	pop	{r7, pc}
20002384:	fffff7ff 			; <UNDEFINED> instruction: 0xfffff7ff

20002388 <TIM_OC1FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC1FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
20002388:	b580      	push	{r7, lr}
2000238a:	b084      	sub	sp, #16
2000238c:	af00      	add	r7, sp, #0
2000238e:	6078      	str	r0, [r7, #4]
20002390:	000a      	movs	r2, r1
20002392:	1cbb      	adds	r3, r7, #2
20002394:	801a      	strh	r2, [r3, #0]
  uint16_t tmpccmr1 = 0;
20002396:	200e      	movs	r0, #14
20002398:	183b      	adds	r3, r7, r0
2000239a:	2200      	movs	r2, #0
2000239c:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
2000239e:	183b      	adds	r3, r7, r0
200023a0:	687a      	ldr	r2, [r7, #4]
200023a2:	8b12      	ldrh	r2, [r2, #24]
200023a4:	801a      	strh	r2, [r3, #0]

  /* Reset the OC1FE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1FE;
200023a6:	183b      	adds	r3, r7, r0
200023a8:	183a      	adds	r2, r7, r0
200023aa:	8812      	ldrh	r2, [r2, #0]
200023ac:	2104      	movs	r1, #4
200023ae:	438a      	bics	r2, r1
200023b0:	801a      	strh	r2, [r3, #0]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
200023b2:	183b      	adds	r3, r7, r0
200023b4:	1839      	adds	r1, r7, r0
200023b6:	1cba      	adds	r2, r7, #2
200023b8:	8809      	ldrh	r1, [r1, #0]
200023ba:	8812      	ldrh	r2, [r2, #0]
200023bc:	430a      	orrs	r2, r1
200023be:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
200023c0:	687b      	ldr	r3, [r7, #4]
200023c2:	183a      	adds	r2, r7, r0
200023c4:	8812      	ldrh	r2, [r2, #0]
200023c6:	831a      	strh	r2, [r3, #24]
}
200023c8:	46c0      	nop			; (mov r8, r8)
200023ca:	46bd      	mov	sp, r7
200023cc:	b004      	add	sp, #16
200023ce:	bd80      	pop	{r7, pc}

200023d0 <TIM_OC2FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC2FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
200023d0:	b580      	push	{r7, lr}
200023d2:	b084      	sub	sp, #16
200023d4:	af00      	add	r7, sp, #0
200023d6:	6078      	str	r0, [r7, #4]
200023d8:	000a      	movs	r2, r1
200023da:	1cbb      	adds	r3, r7, #2
200023dc:	801a      	strh	r2, [r3, #0]
  uint16_t tmpccmr1 = 0;
200023de:	200e      	movs	r0, #14
200023e0:	183b      	adds	r3, r7, r0
200023e2:	2200      	movs	r2, #0
200023e4:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
200023e6:	183b      	adds	r3, r7, r0
200023e8:	687a      	ldr	r2, [r7, #4]
200023ea:	8b12      	ldrh	r2, [r2, #24]
200023ec:	801a      	strh	r2, [r3, #0]

  /* Reset the OC2FE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2FE);
200023ee:	183b      	adds	r3, r7, r0
200023f0:	183a      	adds	r2, r7, r0
200023f2:	8812      	ldrh	r2, [r2, #0]
200023f4:	4909      	ldr	r1, [pc, #36]	; (2000241c <TIM_OC2FastConfig+0x4c>)
200023f6:	400a      	ands	r2, r1
200023f8:	801a      	strh	r2, [r3, #0]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
200023fa:	1cbb      	adds	r3, r7, #2
200023fc:	881b      	ldrh	r3, [r3, #0]
200023fe:	021b      	lsls	r3, r3, #8
20002400:	b299      	uxth	r1, r3
20002402:	183b      	adds	r3, r7, r0
20002404:	183a      	adds	r2, r7, r0
20002406:	8812      	ldrh	r2, [r2, #0]
20002408:	430a      	orrs	r2, r1
2000240a:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
2000240c:	687b      	ldr	r3, [r7, #4]
2000240e:	183a      	adds	r2, r7, r0
20002410:	8812      	ldrh	r2, [r2, #0]
20002412:	831a      	strh	r2, [r3, #24]
}
20002414:	46c0      	nop			; (mov r8, r8)
20002416:	46bd      	mov	sp, r7
20002418:	b004      	add	sp, #16
2000241a:	bd80      	pop	{r7, pc}
2000241c:	fffffbff 			; <UNDEFINED> instruction: 0xfffffbff

20002420 <TIM_OC3FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC3FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
20002420:	b580      	push	{r7, lr}
20002422:	b084      	sub	sp, #16
20002424:	af00      	add	r7, sp, #0
20002426:	6078      	str	r0, [r7, #4]
20002428:	000a      	movs	r2, r1
2000242a:	1cbb      	adds	r3, r7, #2
2000242c:	801a      	strh	r2, [r3, #0]
  uint16_t tmpccmr2 = 0;
2000242e:	200e      	movs	r0, #14
20002430:	183b      	adds	r3, r7, r0
20002432:	2200      	movs	r2, #0
20002434:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
20002436:	183b      	adds	r3, r7, r0
20002438:	687a      	ldr	r2, [r7, #4]
2000243a:	8b92      	ldrh	r2, [r2, #28]
2000243c:	801a      	strh	r2, [r3, #0]

  /* Reset the OC3FE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3FE;
2000243e:	183b      	adds	r3, r7, r0
20002440:	183a      	adds	r2, r7, r0
20002442:	8812      	ldrh	r2, [r2, #0]
20002444:	2104      	movs	r1, #4
20002446:	438a      	bics	r2, r1
20002448:	801a      	strh	r2, [r3, #0]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
2000244a:	183b      	adds	r3, r7, r0
2000244c:	1839      	adds	r1, r7, r0
2000244e:	1cba      	adds	r2, r7, #2
20002450:	8809      	ldrh	r1, [r1, #0]
20002452:	8812      	ldrh	r2, [r2, #0]
20002454:	430a      	orrs	r2, r1
20002456:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
20002458:	687b      	ldr	r3, [r7, #4]
2000245a:	183a      	adds	r2, r7, r0
2000245c:	8812      	ldrh	r2, [r2, #0]
2000245e:	839a      	strh	r2, [r3, #28]
}
20002460:	46c0      	nop			; (mov r8, r8)
20002462:	46bd      	mov	sp, r7
20002464:	b004      	add	sp, #16
20002466:	bd80      	pop	{r7, pc}

20002468 <TIM_OC4FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC4FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
20002468:	b580      	push	{r7, lr}
2000246a:	b084      	sub	sp, #16
2000246c:	af00      	add	r7, sp, #0
2000246e:	6078      	str	r0, [r7, #4]
20002470:	000a      	movs	r2, r1
20002472:	1cbb      	adds	r3, r7, #2
20002474:	801a      	strh	r2, [r3, #0]
  uint16_t tmpccmr2 = 0;
20002476:	200e      	movs	r0, #14
20002478:	183b      	adds	r3, r7, r0
2000247a:	2200      	movs	r2, #0
2000247c:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
2000247e:	183b      	adds	r3, r7, r0
20002480:	687a      	ldr	r2, [r7, #4]
20002482:	8b92      	ldrh	r2, [r2, #28]
20002484:	801a      	strh	r2, [r3, #0]

  /* Reset the OC4FE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4FE);
20002486:	183b      	adds	r3, r7, r0
20002488:	183a      	adds	r2, r7, r0
2000248a:	8812      	ldrh	r2, [r2, #0]
2000248c:	4909      	ldr	r1, [pc, #36]	; (200024b4 <TIM_OC4FastConfig+0x4c>)
2000248e:	400a      	ands	r2, r1
20002490:	801a      	strh	r2, [r3, #0]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
20002492:	1cbb      	adds	r3, r7, #2
20002494:	881b      	ldrh	r3, [r3, #0]
20002496:	021b      	lsls	r3, r3, #8
20002498:	b299      	uxth	r1, r3
2000249a:	183b      	adds	r3, r7, r0
2000249c:	183a      	adds	r2, r7, r0
2000249e:	8812      	ldrh	r2, [r2, #0]
200024a0:	430a      	orrs	r2, r1
200024a2:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
200024a4:	687b      	ldr	r3, [r7, #4]
200024a6:	183a      	adds	r2, r7, r0
200024a8:	8812      	ldrh	r2, [r2, #0]
200024aa:	839a      	strh	r2, [r3, #28]
}
200024ac:	46c0      	nop			; (mov r8, r8)
200024ae:	46bd      	mov	sp, r7
200024b0:	b004      	add	sp, #16
200024b2:	bd80      	pop	{r7, pc}
200024b4:	fffffbff 			; <UNDEFINED> instruction: 0xfffffbff

200024b8 <TIM_ClearOC1Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC1Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
200024b8:	b580      	push	{r7, lr}
200024ba:	b084      	sub	sp, #16
200024bc:	af00      	add	r7, sp, #0
200024be:	6078      	str	r0, [r7, #4]
200024c0:	000a      	movs	r2, r1
200024c2:	1cbb      	adds	r3, r7, #2
200024c4:	801a      	strh	r2, [r3, #0]
  uint16_t tmpccmr1 = 0;
200024c6:	200e      	movs	r0, #14
200024c8:	183b      	adds	r3, r7, r0
200024ca:	2200      	movs	r2, #0
200024cc:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
200024ce:	183b      	adds	r3, r7, r0
200024d0:	687a      	ldr	r2, [r7, #4]
200024d2:	8b12      	ldrh	r2, [r2, #24]
200024d4:	801a      	strh	r2, [r3, #0]

  /* Reset the OC1CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1CE;
200024d6:	183b      	adds	r3, r7, r0
200024d8:	183a      	adds	r2, r7, r0
200024da:	8812      	ldrh	r2, [r2, #0]
200024dc:	2180      	movs	r1, #128	; 0x80
200024de:	438a      	bics	r2, r1
200024e0:	801a      	strh	r2, [r3, #0]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
200024e2:	183b      	adds	r3, r7, r0
200024e4:	1839      	adds	r1, r7, r0
200024e6:	1cba      	adds	r2, r7, #2
200024e8:	8809      	ldrh	r1, [r1, #0]
200024ea:	8812      	ldrh	r2, [r2, #0]
200024ec:	430a      	orrs	r2, r1
200024ee:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
200024f0:	687b      	ldr	r3, [r7, #4]
200024f2:	183a      	adds	r2, r7, r0
200024f4:	8812      	ldrh	r2, [r2, #0]
200024f6:	831a      	strh	r2, [r3, #24]
}
200024f8:	46c0      	nop			; (mov r8, r8)
200024fa:	46bd      	mov	sp, r7
200024fc:	b004      	add	sp, #16
200024fe:	bd80      	pop	{r7, pc}

20002500 <TIM_ClearOC2Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC2Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
20002500:	b580      	push	{r7, lr}
20002502:	b084      	sub	sp, #16
20002504:	af00      	add	r7, sp, #0
20002506:	6078      	str	r0, [r7, #4]
20002508:	000a      	movs	r2, r1
2000250a:	1cbb      	adds	r3, r7, #2
2000250c:	801a      	strh	r2, [r3, #0]
  uint16_t tmpccmr1 = 0;
2000250e:	200e      	movs	r0, #14
20002510:	183b      	adds	r3, r7, r0
20002512:	2200      	movs	r2, #0
20002514:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
20002516:	183b      	adds	r3, r7, r0
20002518:	687a      	ldr	r2, [r7, #4]
2000251a:	8b12      	ldrh	r2, [r2, #24]
2000251c:	801a      	strh	r2, [r3, #0]

  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2CE;
2000251e:	183b      	adds	r3, r7, r0
20002520:	183a      	adds	r2, r7, r0
20002522:	8812      	ldrh	r2, [r2, #0]
20002524:	0452      	lsls	r2, r2, #17
20002526:	0c52      	lsrs	r2, r2, #17
20002528:	801a      	strh	r2, [r3, #0]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
2000252a:	1cbb      	adds	r3, r7, #2
2000252c:	881b      	ldrh	r3, [r3, #0]
2000252e:	021b      	lsls	r3, r3, #8
20002530:	b299      	uxth	r1, r3
20002532:	183b      	adds	r3, r7, r0
20002534:	183a      	adds	r2, r7, r0
20002536:	8812      	ldrh	r2, [r2, #0]
20002538:	430a      	orrs	r2, r1
2000253a:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
2000253c:	687b      	ldr	r3, [r7, #4]
2000253e:	183a      	adds	r2, r7, r0
20002540:	8812      	ldrh	r2, [r2, #0]
20002542:	831a      	strh	r2, [r3, #24]
}
20002544:	46c0      	nop			; (mov r8, r8)
20002546:	46bd      	mov	sp, r7
20002548:	b004      	add	sp, #16
2000254a:	bd80      	pop	{r7, pc}

2000254c <TIM_ClearOC3Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC3Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
2000254c:	b580      	push	{r7, lr}
2000254e:	b084      	sub	sp, #16
20002550:	af00      	add	r7, sp, #0
20002552:	6078      	str	r0, [r7, #4]
20002554:	000a      	movs	r2, r1
20002556:	1cbb      	adds	r3, r7, #2
20002558:	801a      	strh	r2, [r3, #0]
  uint16_t tmpccmr2 = 0;
2000255a:	200e      	movs	r0, #14
2000255c:	183b      	adds	r3, r7, r0
2000255e:	2200      	movs	r2, #0
20002560:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
20002562:	183b      	adds	r3, r7, r0
20002564:	687a      	ldr	r2, [r7, #4]
20002566:	8b92      	ldrh	r2, [r2, #28]
20002568:	801a      	strh	r2, [r3, #0]

  /* Reset the OC3CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3CE;
2000256a:	183b      	adds	r3, r7, r0
2000256c:	183a      	adds	r2, r7, r0
2000256e:	8812      	ldrh	r2, [r2, #0]
20002570:	2180      	movs	r1, #128	; 0x80
20002572:	438a      	bics	r2, r1
20002574:	801a      	strh	r2, [r3, #0]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
20002576:	183b      	adds	r3, r7, r0
20002578:	1839      	adds	r1, r7, r0
2000257a:	1cba      	adds	r2, r7, #2
2000257c:	8809      	ldrh	r1, [r1, #0]
2000257e:	8812      	ldrh	r2, [r2, #0]
20002580:	430a      	orrs	r2, r1
20002582:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
20002584:	687b      	ldr	r3, [r7, #4]
20002586:	183a      	adds	r2, r7, r0
20002588:	8812      	ldrh	r2, [r2, #0]
2000258a:	839a      	strh	r2, [r3, #28]
}
2000258c:	46c0      	nop			; (mov r8, r8)
2000258e:	46bd      	mov	sp, r7
20002590:	b004      	add	sp, #16
20002592:	bd80      	pop	{r7, pc}

20002594 <TIM_ClearOC4Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC4Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
20002594:	b580      	push	{r7, lr}
20002596:	b084      	sub	sp, #16
20002598:	af00      	add	r7, sp, #0
2000259a:	6078      	str	r0, [r7, #4]
2000259c:	000a      	movs	r2, r1
2000259e:	1cbb      	adds	r3, r7, #2
200025a0:	801a      	strh	r2, [r3, #0]
  uint16_t tmpccmr2 = 0;
200025a2:	200e      	movs	r0, #14
200025a4:	183b      	adds	r3, r7, r0
200025a6:	2200      	movs	r2, #0
200025a8:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
200025aa:	183b      	adds	r3, r7, r0
200025ac:	687a      	ldr	r2, [r7, #4]
200025ae:	8b92      	ldrh	r2, [r2, #28]
200025b0:	801a      	strh	r2, [r3, #0]

  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4CE;
200025b2:	183b      	adds	r3, r7, r0
200025b4:	183a      	adds	r2, r7, r0
200025b6:	8812      	ldrh	r2, [r2, #0]
200025b8:	0452      	lsls	r2, r2, #17
200025ba:	0c52      	lsrs	r2, r2, #17
200025bc:	801a      	strh	r2, [r3, #0]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
200025be:	1cbb      	adds	r3, r7, #2
200025c0:	881b      	ldrh	r3, [r3, #0]
200025c2:	021b      	lsls	r3, r3, #8
200025c4:	b299      	uxth	r1, r3
200025c6:	183b      	adds	r3, r7, r0
200025c8:	183a      	adds	r2, r7, r0
200025ca:	8812      	ldrh	r2, [r2, #0]
200025cc:	430a      	orrs	r2, r1
200025ce:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
200025d0:	687b      	ldr	r3, [r7, #4]
200025d2:	183a      	adds	r2, r7, r0
200025d4:	8812      	ldrh	r2, [r2, #0]
200025d6:	839a      	strh	r2, [r3, #28]
}
200025d8:	46c0      	nop			; (mov r8, r8)
200025da:	46bd      	mov	sp, r7
200025dc:	b004      	add	sp, #16
200025de:	bd80      	pop	{r7, pc}

200025e0 <TIM_OC1PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
200025e0:	b580      	push	{r7, lr}
200025e2:	b084      	sub	sp, #16
200025e4:	af00      	add	r7, sp, #0
200025e6:	6078      	str	r0, [r7, #4]
200025e8:	000a      	movs	r2, r1
200025ea:	1cbb      	adds	r3, r7, #2
200025ec:	801a      	strh	r2, [r3, #0]
  uint16_t tmpccer = 0;
200025ee:	200e      	movs	r0, #14
200025f0:	183b      	adds	r3, r7, r0
200025f2:	2200      	movs	r2, #0
200025f4:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
200025f6:	183b      	adds	r3, r7, r0
200025f8:	687a      	ldr	r2, [r7, #4]
200025fa:	8c12      	ldrh	r2, [r2, #32]
200025fc:	801a      	strh	r2, [r3, #0]

  /* Set or Reset the CC1P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC1P);
200025fe:	183b      	adds	r3, r7, r0
20002600:	183a      	adds	r2, r7, r0
20002602:	8812      	ldrh	r2, [r2, #0]
20002604:	2102      	movs	r1, #2
20002606:	438a      	bics	r2, r1
20002608:	801a      	strh	r2, [r3, #0]
  tmpccer |= TIM_OCPolarity;
2000260a:	183b      	adds	r3, r7, r0
2000260c:	1839      	adds	r1, r7, r0
2000260e:	1cba      	adds	r2, r7, #2
20002610:	8809      	ldrh	r1, [r1, #0]
20002612:	8812      	ldrh	r2, [r2, #0]
20002614:	430a      	orrs	r2, r1
20002616:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
20002618:	687b      	ldr	r3, [r7, #4]
2000261a:	183a      	adds	r2, r7, r0
2000261c:	8812      	ldrh	r2, [r2, #0]
2000261e:	841a      	strh	r2, [r3, #32]
}
20002620:	46c0      	nop			; (mov r8, r8)
20002622:	46bd      	mov	sp, r7
20002624:	b004      	add	sp, #16
20002626:	bd80      	pop	{r7, pc}

20002628 <TIM_OC1NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
20002628:	b580      	push	{r7, lr}
2000262a:	b084      	sub	sp, #16
2000262c:	af00      	add	r7, sp, #0
2000262e:	6078      	str	r0, [r7, #4]
20002630:	000a      	movs	r2, r1
20002632:	1cbb      	adds	r3, r7, #2
20002634:	801a      	strh	r2, [r3, #0]
  uint16_t tmpccer = 0;
20002636:	200e      	movs	r0, #14
20002638:	183b      	adds	r3, r7, r0
2000263a:	2200      	movs	r2, #0
2000263c:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
2000263e:	183b      	adds	r3, r7, r0
20002640:	687a      	ldr	r2, [r7, #4]
20002642:	8c12      	ldrh	r2, [r2, #32]
20002644:	801a      	strh	r2, [r3, #0]

  /* Set or Reset the CC1NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
20002646:	183b      	adds	r3, r7, r0
20002648:	183a      	adds	r2, r7, r0
2000264a:	8812      	ldrh	r2, [r2, #0]
2000264c:	2108      	movs	r1, #8
2000264e:	438a      	bics	r2, r1
20002650:	801a      	strh	r2, [r3, #0]
  tmpccer |= TIM_OCNPolarity;
20002652:	183b      	adds	r3, r7, r0
20002654:	1839      	adds	r1, r7, r0
20002656:	1cba      	adds	r2, r7, #2
20002658:	8809      	ldrh	r1, [r1, #0]
2000265a:	8812      	ldrh	r2, [r2, #0]
2000265c:	430a      	orrs	r2, r1
2000265e:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
20002660:	687b      	ldr	r3, [r7, #4]
20002662:	183a      	adds	r2, r7, r0
20002664:	8812      	ldrh	r2, [r2, #0]
20002666:	841a      	strh	r2, [r3, #32]
}
20002668:	46c0      	nop			; (mov r8, r8)
2000266a:	46bd      	mov	sp, r7
2000266c:	b004      	add	sp, #16
2000266e:	bd80      	pop	{r7, pc}

20002670 <TIM_OC2PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
20002670:	b580      	push	{r7, lr}
20002672:	b084      	sub	sp, #16
20002674:	af00      	add	r7, sp, #0
20002676:	6078      	str	r0, [r7, #4]
20002678:	000a      	movs	r2, r1
2000267a:	1cbb      	adds	r3, r7, #2
2000267c:	801a      	strh	r2, [r3, #0]
  uint16_t tmpccer = 0;
2000267e:	200e      	movs	r0, #14
20002680:	183b      	adds	r3, r7, r0
20002682:	2200      	movs	r2, #0
20002684:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
20002686:	183b      	adds	r3, r7, r0
20002688:	687a      	ldr	r2, [r7, #4]
2000268a:	8c12      	ldrh	r2, [r2, #32]
2000268c:	801a      	strh	r2, [r3, #0]

  /* Set or Reset the CC2P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC2P);
2000268e:	183b      	adds	r3, r7, r0
20002690:	183a      	adds	r2, r7, r0
20002692:	8812      	ldrh	r2, [r2, #0]
20002694:	2120      	movs	r1, #32
20002696:	438a      	bics	r2, r1
20002698:	801a      	strh	r2, [r3, #0]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
2000269a:	1cbb      	adds	r3, r7, #2
2000269c:	881b      	ldrh	r3, [r3, #0]
2000269e:	011b      	lsls	r3, r3, #4
200026a0:	b299      	uxth	r1, r3
200026a2:	183b      	adds	r3, r7, r0
200026a4:	183a      	adds	r2, r7, r0
200026a6:	8812      	ldrh	r2, [r2, #0]
200026a8:	430a      	orrs	r2, r1
200026aa:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
200026ac:	687b      	ldr	r3, [r7, #4]
200026ae:	183a      	adds	r2, r7, r0
200026b0:	8812      	ldrh	r2, [r2, #0]
200026b2:	841a      	strh	r2, [r3, #32]
}
200026b4:	46c0      	nop			; (mov r8, r8)
200026b6:	46bd      	mov	sp, r7
200026b8:	b004      	add	sp, #16
200026ba:	bd80      	pop	{r7, pc}

200026bc <TIM_OC2NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
200026bc:	b580      	push	{r7, lr}
200026be:	b084      	sub	sp, #16
200026c0:	af00      	add	r7, sp, #0
200026c2:	6078      	str	r0, [r7, #4]
200026c4:	000a      	movs	r2, r1
200026c6:	1cbb      	adds	r3, r7, #2
200026c8:	801a      	strh	r2, [r3, #0]
  uint16_t tmpccer = 0;
200026ca:	200e      	movs	r0, #14
200026cc:	183b      	adds	r3, r7, r0
200026ce:	2200      	movs	r2, #0
200026d0:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
200026d2:	183b      	adds	r3, r7, r0
200026d4:	687a      	ldr	r2, [r7, #4]
200026d6:	8c12      	ldrh	r2, [r2, #32]
200026d8:	801a      	strh	r2, [r3, #0]

  /* Set or Reset the CC2NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
200026da:	183b      	adds	r3, r7, r0
200026dc:	183a      	adds	r2, r7, r0
200026de:	8812      	ldrh	r2, [r2, #0]
200026e0:	2180      	movs	r1, #128	; 0x80
200026e2:	438a      	bics	r2, r1
200026e4:	801a      	strh	r2, [r3, #0]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
200026e6:	1cbb      	adds	r3, r7, #2
200026e8:	881b      	ldrh	r3, [r3, #0]
200026ea:	011b      	lsls	r3, r3, #4
200026ec:	b299      	uxth	r1, r3
200026ee:	183b      	adds	r3, r7, r0
200026f0:	183a      	adds	r2, r7, r0
200026f2:	8812      	ldrh	r2, [r2, #0]
200026f4:	430a      	orrs	r2, r1
200026f6:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
200026f8:	687b      	ldr	r3, [r7, #4]
200026fa:	183a      	adds	r2, r7, r0
200026fc:	8812      	ldrh	r2, [r2, #0]
200026fe:	841a      	strh	r2, [r3, #32]
}
20002700:	46c0      	nop			; (mov r8, r8)
20002702:	46bd      	mov	sp, r7
20002704:	b004      	add	sp, #16
20002706:	bd80      	pop	{r7, pc}

20002708 <TIM_OC3PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
20002708:	b580      	push	{r7, lr}
2000270a:	b084      	sub	sp, #16
2000270c:	af00      	add	r7, sp, #0
2000270e:	6078      	str	r0, [r7, #4]
20002710:	000a      	movs	r2, r1
20002712:	1cbb      	adds	r3, r7, #2
20002714:	801a      	strh	r2, [r3, #0]
  uint16_t tmpccer = 0;
20002716:	200e      	movs	r0, #14
20002718:	183b      	adds	r3, r7, r0
2000271a:	2200      	movs	r2, #0
2000271c:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
2000271e:	183b      	adds	r3, r7, r0
20002720:	687a      	ldr	r2, [r7, #4]
20002722:	8c12      	ldrh	r2, [r2, #32]
20002724:	801a      	strh	r2, [r3, #0]

  /* Set or Reset the CC3P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
20002726:	183b      	adds	r3, r7, r0
20002728:	183a      	adds	r2, r7, r0
2000272a:	8812      	ldrh	r2, [r2, #0]
2000272c:	4909      	ldr	r1, [pc, #36]	; (20002754 <TIM_OC3PolarityConfig+0x4c>)
2000272e:	400a      	ands	r2, r1
20002730:	801a      	strh	r2, [r3, #0]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
20002732:	1cbb      	adds	r3, r7, #2
20002734:	881b      	ldrh	r3, [r3, #0]
20002736:	021b      	lsls	r3, r3, #8
20002738:	b299      	uxth	r1, r3
2000273a:	183b      	adds	r3, r7, r0
2000273c:	183a      	adds	r2, r7, r0
2000273e:	8812      	ldrh	r2, [r2, #0]
20002740:	430a      	orrs	r2, r1
20002742:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
20002744:	687b      	ldr	r3, [r7, #4]
20002746:	183a      	adds	r2, r7, r0
20002748:	8812      	ldrh	r2, [r2, #0]
2000274a:	841a      	strh	r2, [r3, #32]
}
2000274c:	46c0      	nop			; (mov r8, r8)
2000274e:	46bd      	mov	sp, r7
20002750:	b004      	add	sp, #16
20002752:	bd80      	pop	{r7, pc}
20002754:	fffffdff 			; <UNDEFINED> instruction: 0xfffffdff

20002758 <TIM_OC3NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
20002758:	b580      	push	{r7, lr}
2000275a:	b084      	sub	sp, #16
2000275c:	af00      	add	r7, sp, #0
2000275e:	6078      	str	r0, [r7, #4]
20002760:	000a      	movs	r2, r1
20002762:	1cbb      	adds	r3, r7, #2
20002764:	801a      	strh	r2, [r3, #0]
  uint16_t tmpccer = 0;
20002766:	200e      	movs	r0, #14
20002768:	183b      	adds	r3, r7, r0
2000276a:	2200      	movs	r2, #0
2000276c:	801a      	strh	r2, [r3, #0]
 
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
2000276e:	183b      	adds	r3, r7, r0
20002770:	687a      	ldr	r2, [r7, #4]
20002772:	8c12      	ldrh	r2, [r2, #32]
20002774:	801a      	strh	r2, [r3, #0]

  /* Set or Reset the CC3NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
20002776:	183b      	adds	r3, r7, r0
20002778:	183a      	adds	r2, r7, r0
2000277a:	8812      	ldrh	r2, [r2, #0]
2000277c:	4909      	ldr	r1, [pc, #36]	; (200027a4 <TIM_OC3NPolarityConfig+0x4c>)
2000277e:	400a      	ands	r2, r1
20002780:	801a      	strh	r2, [r3, #0]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
20002782:	1cbb      	adds	r3, r7, #2
20002784:	881b      	ldrh	r3, [r3, #0]
20002786:	021b      	lsls	r3, r3, #8
20002788:	b299      	uxth	r1, r3
2000278a:	183b      	adds	r3, r7, r0
2000278c:	183a      	adds	r2, r7, r0
2000278e:	8812      	ldrh	r2, [r2, #0]
20002790:	430a      	orrs	r2, r1
20002792:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
20002794:	687b      	ldr	r3, [r7, #4]
20002796:	183a      	adds	r2, r7, r0
20002798:	8812      	ldrh	r2, [r2, #0]
2000279a:	841a      	strh	r2, [r3, #32]
}
2000279c:	46c0      	nop			; (mov r8, r8)
2000279e:	46bd      	mov	sp, r7
200027a0:	b004      	add	sp, #16
200027a2:	bd80      	pop	{r7, pc}
200027a4:	fffff7ff 			; <UNDEFINED> instruction: 0xfffff7ff

200027a8 <TIM_OC4PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC4PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
200027a8:	b580      	push	{r7, lr}
200027aa:	b084      	sub	sp, #16
200027ac:	af00      	add	r7, sp, #0
200027ae:	6078      	str	r0, [r7, #4]
200027b0:	000a      	movs	r2, r1
200027b2:	1cbb      	adds	r3, r7, #2
200027b4:	801a      	strh	r2, [r3, #0]
  uint16_t tmpccer = 0;
200027b6:	200e      	movs	r0, #14
200027b8:	183b      	adds	r3, r7, r0
200027ba:	2200      	movs	r2, #0
200027bc:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
200027be:	183b      	adds	r3, r7, r0
200027c0:	687a      	ldr	r2, [r7, #4]
200027c2:	8c12      	ldrh	r2, [r2, #32]
200027c4:	801a      	strh	r2, [r3, #0]

  /* Set or Reset the CC4P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
200027c6:	183b      	adds	r3, r7, r0
200027c8:	183a      	adds	r2, r7, r0
200027ca:	8812      	ldrh	r2, [r2, #0]
200027cc:	4909      	ldr	r1, [pc, #36]	; (200027f4 <TIM_OC4PolarityConfig+0x4c>)
200027ce:	400a      	ands	r2, r1
200027d0:	801a      	strh	r2, [r3, #0]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
200027d2:	1cbb      	adds	r3, r7, #2
200027d4:	881b      	ldrh	r3, [r3, #0]
200027d6:	031b      	lsls	r3, r3, #12
200027d8:	b299      	uxth	r1, r3
200027da:	183b      	adds	r3, r7, r0
200027dc:	183a      	adds	r2, r7, r0
200027de:	8812      	ldrh	r2, [r2, #0]
200027e0:	430a      	orrs	r2, r1
200027e2:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
200027e4:	687b      	ldr	r3, [r7, #4]
200027e6:	183a      	adds	r2, r7, r0
200027e8:	8812      	ldrh	r2, [r2, #0]
200027ea:	841a      	strh	r2, [r3, #32]
}
200027ec:	46c0      	nop			; (mov r8, r8)
200027ee:	46bd      	mov	sp, r7
200027f0:	b004      	add	sp, #16
200027f2:	bd80      	pop	{r7, pc}
200027f4:	ffffdfff 			; <UNDEFINED> instruction: 0xffffdfff

200027f8 <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
200027f8:	b580      	push	{r7, lr}
200027fa:	b084      	sub	sp, #16
200027fc:	af00      	add	r7, sp, #0
200027fe:	6078      	str	r0, [r7, #4]
20002800:	0008      	movs	r0, r1
20002802:	0011      	movs	r1, r2
20002804:	1cbb      	adds	r3, r7, #2
20002806:	1c02      	adds	r2, r0, #0
20002808:	801a      	strh	r2, [r3, #0]
2000280a:	003b      	movs	r3, r7
2000280c:	1c0a      	adds	r2, r1, #0
2000280e:	801a      	strh	r2, [r3, #0]
  uint16_t tmp = 0;
20002810:	210e      	movs	r1, #14
20002812:	187b      	adds	r3, r7, r1
20002814:	2200      	movs	r2, #0
20002816:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;
20002818:	1cbb      	adds	r3, r7, #2
2000281a:	881b      	ldrh	r3, [r3, #0]
2000281c:	2201      	movs	r2, #1
2000281e:	409a      	lsls	r2, r3
20002820:	187b      	adds	r3, r7, r1
20002822:	801a      	strh	r2, [r3, #0]

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
20002824:	687b      	ldr	r3, [r7, #4]
20002826:	8c1b      	ldrh	r3, [r3, #32]
20002828:	b29b      	uxth	r3, r3
2000282a:	187a      	adds	r2, r7, r1
2000282c:	8812      	ldrh	r2, [r2, #0]
2000282e:	43d2      	mvns	r2, r2
20002830:	b292      	uxth	r2, r2
20002832:	4013      	ands	r3, r2
20002834:	b29a      	uxth	r2, r3
20002836:	687b      	ldr	r3, [r7, #4]
20002838:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
2000283a:	687b      	ldr	r3, [r7, #4]
2000283c:	8c1b      	ldrh	r3, [r3, #32]
2000283e:	b29a      	uxth	r2, r3
20002840:	003b      	movs	r3, r7
20002842:	8819      	ldrh	r1, [r3, #0]
20002844:	1cbb      	adds	r3, r7, #2
20002846:	881b      	ldrh	r3, [r3, #0]
20002848:	4099      	lsls	r1, r3
2000284a:	000b      	movs	r3, r1
2000284c:	b29b      	uxth	r3, r3
2000284e:	4313      	orrs	r3, r2
20002850:	b29a      	uxth	r2, r3
20002852:	687b      	ldr	r3, [r7, #4]
20002854:	841a      	strh	r2, [r3, #32]
}
20002856:	46c0      	nop			; (mov r8, r8)
20002858:	46bd      	mov	sp, r7
2000285a:	b004      	add	sp, #16
2000285c:	bd80      	pop	{r7, pc}

2000285e <TIM_CCxNCmd>:
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
2000285e:	b580      	push	{r7, lr}
20002860:	b084      	sub	sp, #16
20002862:	af00      	add	r7, sp, #0
20002864:	6078      	str	r0, [r7, #4]
20002866:	0008      	movs	r0, r1
20002868:	0011      	movs	r1, r2
2000286a:	1cbb      	adds	r3, r7, #2
2000286c:	1c02      	adds	r2, r0, #0
2000286e:	801a      	strh	r2, [r3, #0]
20002870:	003b      	movs	r3, r7
20002872:	1c0a      	adds	r2, r1, #0
20002874:	801a      	strh	r2, [r3, #0]
  uint16_t tmp = 0;
20002876:	210e      	movs	r1, #14
20002878:	187b      	adds	r3, r7, r1
2000287a:	2200      	movs	r2, #0
2000287c:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_SET << TIM_Channel;
2000287e:	1cbb      	adds	r3, r7, #2
20002880:	881b      	ldrh	r3, [r3, #0]
20002882:	2204      	movs	r2, #4
20002884:	409a      	lsls	r2, r3
20002886:	187b      	adds	r3, r7, r1
20002888:	801a      	strh	r2, [r3, #0]

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
2000288a:	687b      	ldr	r3, [r7, #4]
2000288c:	8c1b      	ldrh	r3, [r3, #32]
2000288e:	b29b      	uxth	r3, r3
20002890:	187a      	adds	r2, r7, r1
20002892:	8812      	ldrh	r2, [r2, #0]
20002894:	43d2      	mvns	r2, r2
20002896:	b292      	uxth	r2, r2
20002898:	4013      	ands	r3, r2
2000289a:	b29a      	uxth	r2, r3
2000289c:	687b      	ldr	r3, [r7, #4]
2000289e:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
200028a0:	687b      	ldr	r3, [r7, #4]
200028a2:	8c1b      	ldrh	r3, [r3, #32]
200028a4:	b29a      	uxth	r2, r3
200028a6:	003b      	movs	r3, r7
200028a8:	8819      	ldrh	r1, [r3, #0]
200028aa:	1cbb      	adds	r3, r7, #2
200028ac:	881b      	ldrh	r3, [r3, #0]
200028ae:	4099      	lsls	r1, r3
200028b0:	000b      	movs	r3, r1
200028b2:	b29b      	uxth	r3, r3
200028b4:	4313      	orrs	r3, r2
200028b6:	b29a      	uxth	r2, r3
200028b8:	687b      	ldr	r3, [r7, #4]
200028ba:	841a      	strh	r2, [r3, #32]
}
200028bc:	46c0      	nop			; (mov r8, r8)
200028be:	46bd      	mov	sp, r7
200028c0:	b004      	add	sp, #16
200028c2:	bd80      	pop	{r7, pc}

200028c4 <TIM_ICInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
200028c4:	b580      	push	{r7, lr}
200028c6:	b082      	sub	sp, #8
200028c8:	af00      	add	r7, sp, #0
200028ca:	6078      	str	r0, [r7, #4]
200028cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
200028ce:	683b      	ldr	r3, [r7, #0]
200028d0:	881b      	ldrh	r3, [r3, #0]
200028d2:	2b00      	cmp	r3, #0
200028d4:	d110      	bne.n	200028f8 <TIM_ICInit+0x34>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
200028d6:	683b      	ldr	r3, [r7, #0]
200028d8:	8859      	ldrh	r1, [r3, #2]
200028da:	683b      	ldr	r3, [r7, #0]
200028dc:	889a      	ldrh	r2, [r3, #4]
200028de:	683b      	ldr	r3, [r7, #0]
200028e0:	891b      	ldrh	r3, [r3, #8]
200028e2:	6878      	ldr	r0, [r7, #4]
200028e4:	f000 fd58 	bl	20003398 <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
200028e8:	683b      	ldr	r3, [r7, #0]
200028ea:	88da      	ldrh	r2, [r3, #6]
200028ec:	687b      	ldr	r3, [r7, #4]
200028ee:	0011      	movs	r1, r2
200028f0:	0018      	movs	r0, r3
200028f2:	f000 f8f3 	bl	20002adc <TIM_SetIC1Prescaler>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
200028f6:	e039      	b.n	2000296c <TIM_ICInit+0xa8>
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
200028f8:	683b      	ldr	r3, [r7, #0]
200028fa:	881b      	ldrh	r3, [r3, #0]
200028fc:	2b04      	cmp	r3, #4
200028fe:	d110      	bne.n	20002922 <TIM_ICInit+0x5e>
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
20002900:	683b      	ldr	r3, [r7, #0]
20002902:	8859      	ldrh	r1, [r3, #2]
20002904:	683b      	ldr	r3, [r7, #0]
20002906:	889a      	ldrh	r2, [r3, #4]
20002908:	683b      	ldr	r3, [r7, #0]
2000290a:	891b      	ldrh	r3, [r3, #8]
2000290c:	6878      	ldr	r0, [r7, #4]
2000290e:	f000 fd9c 	bl	2000344a <TI2_Config>
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
20002912:	683b      	ldr	r3, [r7, #0]
20002914:	88da      	ldrh	r2, [r3, #6]
20002916:	687b      	ldr	r3, [r7, #4]
20002918:	0011      	movs	r1, r2
2000291a:	0018      	movs	r0, r3
2000291c:	f000 f8fa 	bl	20002b14 <TIM_SetIC2Prescaler>
}
20002920:	e024      	b.n	2000296c <TIM_ICInit+0xa8>
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
20002922:	683b      	ldr	r3, [r7, #0]
20002924:	881b      	ldrh	r3, [r3, #0]
20002926:	2b08      	cmp	r3, #8
20002928:	d110      	bne.n	2000294c <TIM_ICInit+0x88>
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
2000292a:	683b      	ldr	r3, [r7, #0]
2000292c:	8859      	ldrh	r1, [r3, #2]
2000292e:	683b      	ldr	r3, [r7, #0]
20002930:	889a      	ldrh	r2, [r3, #4]
20002932:	683b      	ldr	r3, [r7, #0]
20002934:	891b      	ldrh	r3, [r3, #8]
20002936:	6878      	ldr	r0, [r7, #4]
20002938:	f000 fdf2 	bl	20003520 <TI3_Config>
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
2000293c:	683b      	ldr	r3, [r7, #0]
2000293e:	88da      	ldrh	r2, [r3, #6]
20002940:	687b      	ldr	r3, [r7, #4]
20002942:	0011      	movs	r1, r2
20002944:	0018      	movs	r0, r3
20002946:	f000 f905 	bl	20002b54 <TIM_SetIC3Prescaler>
}
2000294a:	e00f      	b.n	2000296c <TIM_ICInit+0xa8>
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
2000294c:	683b      	ldr	r3, [r7, #0]
2000294e:	8859      	ldrh	r1, [r3, #2]
20002950:	683b      	ldr	r3, [r7, #0]
20002952:	889a      	ldrh	r2, [r3, #4]
20002954:	683b      	ldr	r3, [r7, #0]
20002956:	891b      	ldrh	r3, [r3, #8]
20002958:	6878      	ldr	r0, [r7, #4]
2000295a:	f000 fe4b 	bl	200035f4 <TI4_Config>
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
2000295e:	683b      	ldr	r3, [r7, #0]
20002960:	88da      	ldrh	r2, [r3, #6]
20002962:	687b      	ldr	r3, [r7, #4]
20002964:	0011      	movs	r1, r2
20002966:	0018      	movs	r0, r3
20002968:	f000 f910 	bl	20002b8c <TIM_SetIC4Prescaler>
}
2000296c:	46c0      	nop			; (mov r8, r8)
2000296e:	46bd      	mov	sp, r7
20002970:	b002      	add	sp, #8
20002972:	bd80      	pop	{r7, pc}

20002974 <TIM_ICStructInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
20002974:	b580      	push	{r7, lr}
20002976:	b082      	sub	sp, #8
20002978:	af00      	add	r7, sp, #0
2000297a:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
2000297c:	687b      	ldr	r3, [r7, #4]
2000297e:	2200      	movs	r2, #0
20002980:	801a      	strh	r2, [r3, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
20002982:	687b      	ldr	r3, [r7, #4]
20002984:	2200      	movs	r2, #0
20002986:	805a      	strh	r2, [r3, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
20002988:	687b      	ldr	r3, [r7, #4]
2000298a:	2201      	movs	r2, #1
2000298c:	809a      	strh	r2, [r3, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
2000298e:	687b      	ldr	r3, [r7, #4]
20002990:	2200      	movs	r2, #0
20002992:	80da      	strh	r2, [r3, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
20002994:	687b      	ldr	r3, [r7, #4]
20002996:	2200      	movs	r2, #0
20002998:	811a      	strh	r2, [r3, #8]
}
2000299a:	46c0      	nop			; (mov r8, r8)
2000299c:	46bd      	mov	sp, r7
2000299e:	b002      	add	sp, #8
200029a0:	bd80      	pop	{r7, pc}

200029a2 <TIM_PWMIConfig>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
200029a2:	b590      	push	{r4, r7, lr}
200029a4:	b085      	sub	sp, #20
200029a6:	af00      	add	r7, sp, #0
200029a8:	6078      	str	r0, [r7, #4]
200029aa:	6039      	str	r1, [r7, #0]
  uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
200029ac:	210e      	movs	r1, #14
200029ae:	187b      	adds	r3, r7, r1
200029b0:	2200      	movs	r2, #0
200029b2:	801a      	strh	r2, [r3, #0]
  uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
200029b4:	230c      	movs	r3, #12
200029b6:	18fb      	adds	r3, r7, r3
200029b8:	2201      	movs	r2, #1
200029ba:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
200029bc:	683b      	ldr	r3, [r7, #0]
200029be:	885b      	ldrh	r3, [r3, #2]
200029c0:	2b00      	cmp	r3, #0
200029c2:	d103      	bne.n	200029cc <TIM_PWMIConfig+0x2a>
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
200029c4:	187b      	adds	r3, r7, r1
200029c6:	2202      	movs	r2, #2
200029c8:	801a      	strh	r2, [r3, #0]
200029ca:	e003      	b.n	200029d4 <TIM_PWMIConfig+0x32>
  }
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
200029cc:	230e      	movs	r3, #14
200029ce:	18fb      	adds	r3, r7, r3
200029d0:	2200      	movs	r2, #0
200029d2:	801a      	strh	r2, [r3, #0]
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
200029d4:	683b      	ldr	r3, [r7, #0]
200029d6:	889b      	ldrh	r3, [r3, #4]
200029d8:	2b01      	cmp	r3, #1
200029da:	d104      	bne.n	200029e6 <TIM_PWMIConfig+0x44>
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
200029dc:	230c      	movs	r3, #12
200029de:	18fb      	adds	r3, r7, r3
200029e0:	2202      	movs	r2, #2
200029e2:	801a      	strh	r2, [r3, #0]
200029e4:	e003      	b.n	200029ee <TIM_PWMIConfig+0x4c>
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
200029e6:	230c      	movs	r3, #12
200029e8:	18fb      	adds	r3, r7, r3
200029ea:	2201      	movs	r2, #1
200029ec:	801a      	strh	r2, [r3, #0]
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
200029ee:	683b      	ldr	r3, [r7, #0]
200029f0:	881b      	ldrh	r3, [r3, #0]
200029f2:	2b00      	cmp	r3, #0
200029f4:	d123      	bne.n	20002a3e <TIM_PWMIConfig+0x9c>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
200029f6:	683b      	ldr	r3, [r7, #0]
200029f8:	8859      	ldrh	r1, [r3, #2]
200029fa:	683b      	ldr	r3, [r7, #0]
200029fc:	889a      	ldrh	r2, [r3, #4]
200029fe:	683b      	ldr	r3, [r7, #0]
20002a00:	891b      	ldrh	r3, [r3, #8]
20002a02:	6878      	ldr	r0, [r7, #4]
20002a04:	f000 fcc8 	bl	20003398 <TI1_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
20002a08:	683b      	ldr	r3, [r7, #0]
20002a0a:	88da      	ldrh	r2, [r3, #6]
20002a0c:	687b      	ldr	r3, [r7, #4]
20002a0e:	0011      	movs	r1, r2
20002a10:	0018      	movs	r0, r3
20002a12:	f000 f863 	bl	20002adc <TIM_SetIC1Prescaler>
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
20002a16:	683b      	ldr	r3, [r7, #0]
20002a18:	891c      	ldrh	r4, [r3, #8]
20002a1a:	230c      	movs	r3, #12
20002a1c:	18fb      	adds	r3, r7, r3
20002a1e:	881a      	ldrh	r2, [r3, #0]
20002a20:	230e      	movs	r3, #14
20002a22:	18fb      	adds	r3, r7, r3
20002a24:	8819      	ldrh	r1, [r3, #0]
20002a26:	6878      	ldr	r0, [r7, #4]
20002a28:	0023      	movs	r3, r4
20002a2a:	f000 fd0e 	bl	2000344a <TI2_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
20002a2e:	683b      	ldr	r3, [r7, #0]
20002a30:	88da      	ldrh	r2, [r3, #6]
20002a32:	687b      	ldr	r3, [r7, #4]
20002a34:	0011      	movs	r1, r2
20002a36:	0018      	movs	r0, r3
20002a38:	f000 f86c 	bl	20002b14 <TIM_SetIC2Prescaler>
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
20002a3c:	e022      	b.n	20002a84 <TIM_PWMIConfig+0xe2>
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
20002a3e:	683b      	ldr	r3, [r7, #0]
20002a40:	8859      	ldrh	r1, [r3, #2]
20002a42:	683b      	ldr	r3, [r7, #0]
20002a44:	889a      	ldrh	r2, [r3, #4]
20002a46:	683b      	ldr	r3, [r7, #0]
20002a48:	891b      	ldrh	r3, [r3, #8]
20002a4a:	6878      	ldr	r0, [r7, #4]
20002a4c:	f000 fcfd 	bl	2000344a <TI2_Config>
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
20002a50:	683b      	ldr	r3, [r7, #0]
20002a52:	88da      	ldrh	r2, [r3, #6]
20002a54:	687b      	ldr	r3, [r7, #4]
20002a56:	0011      	movs	r1, r2
20002a58:	0018      	movs	r0, r3
20002a5a:	f000 f85b 	bl	20002b14 <TIM_SetIC2Prescaler>
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
20002a5e:	683b      	ldr	r3, [r7, #0]
20002a60:	891c      	ldrh	r4, [r3, #8]
20002a62:	230c      	movs	r3, #12
20002a64:	18fb      	adds	r3, r7, r3
20002a66:	881a      	ldrh	r2, [r3, #0]
20002a68:	230e      	movs	r3, #14
20002a6a:	18fb      	adds	r3, r7, r3
20002a6c:	8819      	ldrh	r1, [r3, #0]
20002a6e:	6878      	ldr	r0, [r7, #4]
20002a70:	0023      	movs	r3, r4
20002a72:	f000 fc91 	bl	20003398 <TI1_Config>
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
20002a76:	683b      	ldr	r3, [r7, #0]
20002a78:	88da      	ldrh	r2, [r3, #6]
20002a7a:	687b      	ldr	r3, [r7, #4]
20002a7c:	0011      	movs	r1, r2
20002a7e:	0018      	movs	r0, r3
20002a80:	f000 f82c 	bl	20002adc <TIM_SetIC1Prescaler>
}
20002a84:	46c0      	nop			; (mov r8, r8)
20002a86:	46bd      	mov	sp, r7
20002a88:	b005      	add	sp, #20
20002a8a:	bd90      	pop	{r4, r7, pc}

20002a8c <TIM_GetCapture1>:
  * @brief  Gets the TIMx Input Capture 1 value.
  * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
  * @retval Capture Compare 1 Register value.
  */
uint32_t TIM_GetCapture1(TIM_TypeDef* TIMx)
{
20002a8c:	b580      	push	{r7, lr}
20002a8e:	b082      	sub	sp, #8
20002a90:	af00      	add	r7, sp, #0
20002a92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
20002a94:	687b      	ldr	r3, [r7, #4]
20002a96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
20002a98:	0018      	movs	r0, r3
20002a9a:	46bd      	mov	sp, r7
20002a9c:	b002      	add	sp, #8
20002a9e:	bd80      	pop	{r7, pc}

20002aa0 <TIM_GetCapture2>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
  *         peripheral.
  * @retval Capture Compare 2 Register value.
  */
uint32_t TIM_GetCapture2(TIM_TypeDef* TIMx)
{
20002aa0:	b580      	push	{r7, lr}
20002aa2:	b082      	sub	sp, #8
20002aa4:	af00      	add	r7, sp, #0
20002aa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
20002aa8:	687b      	ldr	r3, [r7, #4]
20002aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
20002aac:	0018      	movs	r0, r3
20002aae:	46bd      	mov	sp, r7
20002ab0:	b002      	add	sp, #8
20002ab2:	bd80      	pop	{r7, pc}

20002ab4 <TIM_GetCapture3>:
  * @brief  Gets the TIMx Input Capture 3 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 3 Register value.
  */
uint32_t TIM_GetCapture3(TIM_TypeDef* TIMx)
{
20002ab4:	b580      	push	{r7, lr}
20002ab6:	b082      	sub	sp, #8
20002ab8:	af00      	add	r7, sp, #0
20002aba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 

  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
20002abc:	687b      	ldr	r3, [r7, #4]
20002abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
20002ac0:	0018      	movs	r0, r3
20002ac2:	46bd      	mov	sp, r7
20002ac4:	b002      	add	sp, #8
20002ac6:	bd80      	pop	{r7, pc}

20002ac8 <TIM_GetCapture4>:
  * @brief  Gets the TIMx Input Capture 4 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 4 Register value.
  */
uint32_t TIM_GetCapture4(TIM_TypeDef* TIMx)
{
20002ac8:	b580      	push	{r7, lr}
20002aca:	b082      	sub	sp, #8
20002acc:	af00      	add	r7, sp, #0
20002ace:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
20002ad0:	687b      	ldr	r3, [r7, #4]
20002ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
20002ad4:	0018      	movs	r0, r3
20002ad6:	46bd      	mov	sp, r7
20002ad8:	b002      	add	sp, #8
20002ada:	bd80      	pop	{r7, pc}

20002adc <TIM_SetIC1Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
20002adc:	b580      	push	{r7, lr}
20002ade:	b082      	sub	sp, #8
20002ae0:	af00      	add	r7, sp, #0
20002ae2:	6078      	str	r0, [r7, #4]
20002ae4:	000a      	movs	r2, r1
20002ae6:	1cbb      	adds	r3, r7, #2
20002ae8:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
20002aea:	687b      	ldr	r3, [r7, #4]
20002aec:	8b1b      	ldrh	r3, [r3, #24]
20002aee:	b29b      	uxth	r3, r3
20002af0:	220c      	movs	r2, #12
20002af2:	4393      	bics	r3, r2
20002af4:	b29a      	uxth	r2, r3
20002af6:	687b      	ldr	r3, [r7, #4]
20002af8:	831a      	strh	r2, [r3, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
20002afa:	687b      	ldr	r3, [r7, #4]
20002afc:	8b1b      	ldrh	r3, [r3, #24]
20002afe:	b29a      	uxth	r2, r3
20002b00:	1cbb      	adds	r3, r7, #2
20002b02:	881b      	ldrh	r3, [r3, #0]
20002b04:	4313      	orrs	r3, r2
20002b06:	b29a      	uxth	r2, r3
20002b08:	687b      	ldr	r3, [r7, #4]
20002b0a:	831a      	strh	r2, [r3, #24]
}
20002b0c:	46c0      	nop			; (mov r8, r8)
20002b0e:	46bd      	mov	sp, r7
20002b10:	b002      	add	sp, #8
20002b12:	bd80      	pop	{r7, pc}

20002b14 <TIM_SetIC2Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
20002b14:	b580      	push	{r7, lr}
20002b16:	b082      	sub	sp, #8
20002b18:	af00      	add	r7, sp, #0
20002b1a:	6078      	str	r0, [r7, #4]
20002b1c:	000a      	movs	r2, r1
20002b1e:	1cbb      	adds	r3, r7, #2
20002b20:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
20002b22:	687b      	ldr	r3, [r7, #4]
20002b24:	8b1b      	ldrh	r3, [r3, #24]
20002b26:	b29b      	uxth	r3, r3
20002b28:	4a09      	ldr	r2, [pc, #36]	; (20002b50 <TIM_SetIC2Prescaler+0x3c>)
20002b2a:	4013      	ands	r3, r2
20002b2c:	b29a      	uxth	r2, r3
20002b2e:	687b      	ldr	r3, [r7, #4]
20002b30:	831a      	strh	r2, [r3, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
20002b32:	687b      	ldr	r3, [r7, #4]
20002b34:	8b1b      	ldrh	r3, [r3, #24]
20002b36:	b29a      	uxth	r2, r3
20002b38:	1cbb      	adds	r3, r7, #2
20002b3a:	881b      	ldrh	r3, [r3, #0]
20002b3c:	021b      	lsls	r3, r3, #8
20002b3e:	b29b      	uxth	r3, r3
20002b40:	4313      	orrs	r3, r2
20002b42:	b29a      	uxth	r2, r3
20002b44:	687b      	ldr	r3, [r7, #4]
20002b46:	831a      	strh	r2, [r3, #24]
}
20002b48:	46c0      	nop			; (mov r8, r8)
20002b4a:	46bd      	mov	sp, r7
20002b4c:	b002      	add	sp, #8
20002b4e:	bd80      	pop	{r7, pc}
20002b50:	fffff3ff 			; <UNDEFINED> instruction: 0xfffff3ff

20002b54 <TIM_SetIC3Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
20002b54:	b580      	push	{r7, lr}
20002b56:	b082      	sub	sp, #8
20002b58:	af00      	add	r7, sp, #0
20002b5a:	6078      	str	r0, [r7, #4]
20002b5c:	000a      	movs	r2, r1
20002b5e:	1cbb      	adds	r3, r7, #2
20002b60:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC3PSC;
20002b62:	687b      	ldr	r3, [r7, #4]
20002b64:	8b9b      	ldrh	r3, [r3, #28]
20002b66:	b29b      	uxth	r3, r3
20002b68:	220c      	movs	r2, #12
20002b6a:	4393      	bics	r3, r2
20002b6c:	b29a      	uxth	r2, r3
20002b6e:	687b      	ldr	r3, [r7, #4]
20002b70:	839a      	strh	r2, [r3, #28]

  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
20002b72:	687b      	ldr	r3, [r7, #4]
20002b74:	8b9b      	ldrh	r3, [r3, #28]
20002b76:	b29a      	uxth	r2, r3
20002b78:	1cbb      	adds	r3, r7, #2
20002b7a:	881b      	ldrh	r3, [r3, #0]
20002b7c:	4313      	orrs	r3, r2
20002b7e:	b29a      	uxth	r2, r3
20002b80:	687b      	ldr	r3, [r7, #4]
20002b82:	839a      	strh	r2, [r3, #28]
}
20002b84:	46c0      	nop			; (mov r8, r8)
20002b86:	46bd      	mov	sp, r7
20002b88:	b002      	add	sp, #8
20002b8a:	bd80      	pop	{r7, pc}

20002b8c <TIM_SetIC4Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{  
20002b8c:	b580      	push	{r7, lr}
20002b8e:	b082      	sub	sp, #8
20002b90:	af00      	add	r7, sp, #0
20002b92:	6078      	str	r0, [r7, #4]
20002b94:	000a      	movs	r2, r1
20002b96:	1cbb      	adds	r3, r7, #2
20002b98:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC4PSC;
20002b9a:	687b      	ldr	r3, [r7, #4]
20002b9c:	8b9b      	ldrh	r3, [r3, #28]
20002b9e:	b29b      	uxth	r3, r3
20002ba0:	4a09      	ldr	r2, [pc, #36]	; (20002bc8 <TIM_SetIC4Prescaler+0x3c>)
20002ba2:	4013      	ands	r3, r2
20002ba4:	b29a      	uxth	r2, r3
20002ba6:	687b      	ldr	r3, [r7, #4]
20002ba8:	839a      	strh	r2, [r3, #28]

  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
20002baa:	687b      	ldr	r3, [r7, #4]
20002bac:	8b9b      	ldrh	r3, [r3, #28]
20002bae:	b29a      	uxth	r2, r3
20002bb0:	1cbb      	adds	r3, r7, #2
20002bb2:	881b      	ldrh	r3, [r3, #0]
20002bb4:	021b      	lsls	r3, r3, #8
20002bb6:	b29b      	uxth	r3, r3
20002bb8:	4313      	orrs	r3, r2
20002bba:	b29a      	uxth	r2, r3
20002bbc:	687b      	ldr	r3, [r7, #4]
20002bbe:	839a      	strh	r2, [r3, #28]
}
20002bc0:	46c0      	nop			; (mov r8, r8)
20002bc2:	46bd      	mov	sp, r7
20002bc4:	b002      	add	sp, #8
20002bc6:	bd80      	pop	{r7, pc}
20002bc8:	fffff3ff 			; <UNDEFINED> instruction: 0xfffff3ff

20002bcc <TIM_BDTRConfig>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure that
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval None
  */
void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
{
20002bcc:	b580      	push	{r7, lr}
20002bce:	b082      	sub	sp, #8
20002bd0:	af00      	add	r7, sp, #0
20002bd2:	6078      	str	r0, [r7, #4]
20002bd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
20002bd6:	683b      	ldr	r3, [r7, #0]
20002bd8:	881a      	ldrh	r2, [r3, #0]
20002bda:	683b      	ldr	r3, [r7, #0]
20002bdc:	885b      	ldrh	r3, [r3, #2]
20002bde:	4313      	orrs	r3, r2
20002be0:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
20002be2:	683b      	ldr	r3, [r7, #0]
20002be4:	889b      	ldrh	r3, [r3, #4]
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
20002be6:	4313      	orrs	r3, r2
20002be8:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
20002bea:	683b      	ldr	r3, [r7, #0]
20002bec:	88db      	ldrh	r3, [r3, #6]
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
20002bee:	4313      	orrs	r3, r2
20002bf0:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
20002bf2:	683b      	ldr	r3, [r7, #0]
20002bf4:	891b      	ldrh	r3, [r3, #8]
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
20002bf6:	4313      	orrs	r3, r2
20002bf8:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
20002bfa:	683b      	ldr	r3, [r7, #0]
20002bfc:	895b      	ldrh	r3, [r3, #10]
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
20002bfe:	4313      	orrs	r3, r2
20002c00:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
20002c02:	683b      	ldr	r3, [r7, #0]
20002c04:	899b      	ldrh	r3, [r3, #12]
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
20002c06:	4313      	orrs	r3, r2
20002c08:	b299      	uxth	r1, r3
20002c0a:	687b      	ldr	r3, [r7, #4]
20002c0c:	2244      	movs	r2, #68	; 0x44
20002c0e:	5299      	strh	r1, [r3, r2]
}
20002c10:	46c0      	nop			; (mov r8, r8)
20002c12:	46bd      	mov	sp, r7
20002c14:	b002      	add	sp, #8
20002c16:	bd80      	pop	{r7, pc}

20002c18 <TIM_BDTRStructInit>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
20002c18:	b580      	push	{r7, lr}
20002c1a:	b082      	sub	sp, #8
20002c1c:	af00      	add	r7, sp, #0
20002c1e:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
20002c20:	687b      	ldr	r3, [r7, #4]
20002c22:	2200      	movs	r2, #0
20002c24:	801a      	strh	r2, [r3, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
20002c26:	687b      	ldr	r3, [r7, #4]
20002c28:	2200      	movs	r2, #0
20002c2a:	805a      	strh	r2, [r3, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
20002c2c:	687b      	ldr	r3, [r7, #4]
20002c2e:	2200      	movs	r2, #0
20002c30:	809a      	strh	r2, [r3, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
20002c32:	687b      	ldr	r3, [r7, #4]
20002c34:	2200      	movs	r2, #0
20002c36:	80da      	strh	r2, [r3, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
20002c38:	687b      	ldr	r3, [r7, #4]
20002c3a:	2200      	movs	r2, #0
20002c3c:	811a      	strh	r2, [r3, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
20002c3e:	687b      	ldr	r3, [r7, #4]
20002c40:	2200      	movs	r2, #0
20002c42:	815a      	strh	r2, [r3, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
20002c44:	687b      	ldr	r3, [r7, #4]
20002c46:	2200      	movs	r2, #0
20002c48:	819a      	strh	r2, [r3, #12]
}
20002c4a:	46c0      	nop			; (mov r8, r8)
20002c4c:	46bd      	mov	sp, r7
20002c4e:	b002      	add	sp, #8
20002c50:	bd80      	pop	{r7, pc}

20002c52 <TIM_CtrlPWMOutputs>:
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
20002c52:	b580      	push	{r7, lr}
20002c54:	b082      	sub	sp, #8
20002c56:	af00      	add	r7, sp, #0
20002c58:	6078      	str	r0, [r7, #4]
20002c5a:	000a      	movs	r2, r1
20002c5c:	1cfb      	adds	r3, r7, #3
20002c5e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20002c60:	1cfb      	adds	r3, r7, #3
20002c62:	781b      	ldrb	r3, [r3, #0]
20002c64:	2b00      	cmp	r3, #0
20002c66:	d00a      	beq.n	20002c7e <TIM_CtrlPWMOutputs+0x2c>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
20002c68:	687b      	ldr	r3, [r7, #4]
20002c6a:	2244      	movs	r2, #68	; 0x44
20002c6c:	5a9b      	ldrh	r3, [r3, r2]
20002c6e:	b29b      	uxth	r3, r3
20002c70:	4a0a      	ldr	r2, [pc, #40]	; (20002c9c <TIM_CtrlPWMOutputs+0x4a>)
20002c72:	4313      	orrs	r3, r2
20002c74:	b299      	uxth	r1, r3
20002c76:	687b      	ldr	r3, [r7, #4]
20002c78:	2244      	movs	r2, #68	; 0x44
20002c7a:	5299      	strh	r1, [r3, r2]
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
  }  
}
20002c7c:	e009      	b.n	20002c92 <TIM_CtrlPWMOutputs+0x40>
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
20002c7e:	687b      	ldr	r3, [r7, #4]
20002c80:	2244      	movs	r2, #68	; 0x44
20002c82:	5a9b      	ldrh	r3, [r3, r2]
20002c84:	b29b      	uxth	r3, r3
20002c86:	045b      	lsls	r3, r3, #17
20002c88:	0c5b      	lsrs	r3, r3, #17
20002c8a:	b299      	uxth	r1, r3
20002c8c:	687b      	ldr	r3, [r7, #4]
20002c8e:	2244      	movs	r2, #68	; 0x44
20002c90:	5299      	strh	r1, [r3, r2]
}
20002c92:	46c0      	nop			; (mov r8, r8)
20002c94:	46bd      	mov	sp, r7
20002c96:	b002      	add	sp, #8
20002c98:	bd80      	pop	{r7, pc}
20002c9a:	46c0      	nop			; (mov r8, r8)
20002c9c:	ffff8000 			; <UNDEFINED> instruction: 0xffff8000

20002ca0 <TIM_SelectCOM>:
  * @param  NewState: new state of the Commutation event.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCOM(TIM_TypeDef* TIMx, FunctionalState NewState)
{
20002ca0:	b580      	push	{r7, lr}
20002ca2:	b082      	sub	sp, #8
20002ca4:	af00      	add	r7, sp, #0
20002ca6:	6078      	str	r0, [r7, #4]
20002ca8:	000a      	movs	r2, r1
20002caa:	1cfb      	adds	r3, r7, #3
20002cac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20002cae:	1cfb      	adds	r3, r7, #3
20002cb0:	781b      	ldrb	r3, [r3, #0]
20002cb2:	2b00      	cmp	r3, #0
20002cb4:	d008      	beq.n	20002cc8 <TIM_SelectCOM+0x28>
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
20002cb6:	687b      	ldr	r3, [r7, #4]
20002cb8:	889b      	ldrh	r3, [r3, #4]
20002cba:	b29b      	uxth	r3, r3
20002cbc:	2204      	movs	r2, #4
20002cbe:	4313      	orrs	r3, r2
20002cc0:	b29a      	uxth	r2, r3
20002cc2:	687b      	ldr	r3, [r7, #4]
20002cc4:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCUS;
  }
}
20002cc6:	e007      	b.n	20002cd8 <TIM_SelectCOM+0x38>
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCUS;
20002cc8:	687b      	ldr	r3, [r7, #4]
20002cca:	889b      	ldrh	r3, [r3, #4]
20002ccc:	b29b      	uxth	r3, r3
20002cce:	2204      	movs	r2, #4
20002cd0:	4393      	bics	r3, r2
20002cd2:	b29a      	uxth	r2, r3
20002cd4:	687b      	ldr	r3, [r7, #4]
20002cd6:	809a      	strh	r2, [r3, #4]
}
20002cd8:	46c0      	nop			; (mov r8, r8)
20002cda:	46bd      	mov	sp, r7
20002cdc:	b002      	add	sp, #8
20002cde:	bd80      	pop	{r7, pc}

20002ce0 <TIM_CCPreloadControl>:
  * @param  NewState: new state of the Capture Compare Preload Control bit
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
20002ce0:	b580      	push	{r7, lr}
20002ce2:	b082      	sub	sp, #8
20002ce4:	af00      	add	r7, sp, #0
20002ce6:	6078      	str	r0, [r7, #4]
20002ce8:	000a      	movs	r2, r1
20002cea:	1cfb      	adds	r3, r7, #3
20002cec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20002cee:	1cfb      	adds	r3, r7, #3
20002cf0:	781b      	ldrb	r3, [r3, #0]
20002cf2:	2b00      	cmp	r3, #0
20002cf4:	d008      	beq.n	20002d08 <TIM_CCPreloadControl+0x28>
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
20002cf6:	687b      	ldr	r3, [r7, #4]
20002cf8:	889b      	ldrh	r3, [r3, #4]
20002cfa:	b29b      	uxth	r3, r3
20002cfc:	2201      	movs	r2, #1
20002cfe:	4313      	orrs	r3, r2
20002d00:	b29a      	uxth	r2, r3
20002d02:	687b      	ldr	r3, [r7, #4]
20002d04:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCPC;
  }
}
20002d06:	e007      	b.n	20002d18 <TIM_CCPreloadControl+0x38>
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCPC;
20002d08:	687b      	ldr	r3, [r7, #4]
20002d0a:	889b      	ldrh	r3, [r3, #4]
20002d0c:	b29b      	uxth	r3, r3
20002d0e:	2201      	movs	r2, #1
20002d10:	4393      	bics	r3, r2
20002d12:	b29a      	uxth	r2, r3
20002d14:	687b      	ldr	r3, [r7, #4]
20002d16:	809a      	strh	r2, [r3, #4]
}
20002d18:	46c0      	nop			; (mov r8, r8)
20002d1a:	46bd      	mov	sp, r7
20002d1c:	b002      	add	sp, #8
20002d1e:	bd80      	pop	{r7, pc}

20002d20 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
20002d20:	b580      	push	{r7, lr}
20002d22:	b082      	sub	sp, #8
20002d24:	af00      	add	r7, sp, #0
20002d26:	6078      	str	r0, [r7, #4]
20002d28:	0008      	movs	r0, r1
20002d2a:	0011      	movs	r1, r2
20002d2c:	1cbb      	adds	r3, r7, #2
20002d2e:	1c02      	adds	r2, r0, #0
20002d30:	801a      	strh	r2, [r3, #0]
20002d32:	1c7b      	adds	r3, r7, #1
20002d34:	1c0a      	adds	r2, r1, #0
20002d36:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
20002d38:	1c7b      	adds	r3, r7, #1
20002d3a:	781b      	ldrb	r3, [r3, #0]
20002d3c:	2b00      	cmp	r3, #0
20002d3e:	d009      	beq.n	20002d54 <TIM_ITConfig+0x34>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
20002d40:	687b      	ldr	r3, [r7, #4]
20002d42:	899b      	ldrh	r3, [r3, #12]
20002d44:	b29a      	uxth	r2, r3
20002d46:	1cbb      	adds	r3, r7, #2
20002d48:	881b      	ldrh	r3, [r3, #0]
20002d4a:	4313      	orrs	r3, r2
20002d4c:	b29a      	uxth	r2, r3
20002d4e:	687b      	ldr	r3, [r7, #4]
20002d50:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
20002d52:	e00a      	b.n	20002d6a <TIM_ITConfig+0x4a>
    TIMx->DIER &= (uint16_t)~TIM_IT;
20002d54:	687b      	ldr	r3, [r7, #4]
20002d56:	899b      	ldrh	r3, [r3, #12]
20002d58:	b29b      	uxth	r3, r3
20002d5a:	1cba      	adds	r2, r7, #2
20002d5c:	8812      	ldrh	r2, [r2, #0]
20002d5e:	43d2      	mvns	r2, r2
20002d60:	b292      	uxth	r2, r2
20002d62:	4013      	ands	r3, r2
20002d64:	b29a      	uxth	r2, r3
20002d66:	687b      	ldr	r3, [r7, #4]
20002d68:	819a      	strh	r2, [r3, #12]
}
20002d6a:	46c0      	nop			; (mov r8, r8)
20002d6c:	46bd      	mov	sp, r7
20002d6e:	b002      	add	sp, #8
20002d70:	bd80      	pop	{r7, pc}

20002d72 <TIM_GenerateEvent>:
  * @note   TIM_EventSource_COM and TIM_EventSource_Break are used only with TIM1 and TIM8.
  *        
  * @retval None
  */
void TIM_GenerateEvent(TIM_TypeDef* TIMx, uint16_t TIM_EventSource)
{ 
20002d72:	b580      	push	{r7, lr}
20002d74:	b082      	sub	sp, #8
20002d76:	af00      	add	r7, sp, #0
20002d78:	6078      	str	r0, [r7, #4]
20002d7a:	000a      	movs	r2, r1
20002d7c:	1cbb      	adds	r3, r7, #2
20002d7e:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
 
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
20002d80:	687b      	ldr	r3, [r7, #4]
20002d82:	1cba      	adds	r2, r7, #2
20002d84:	8812      	ldrh	r2, [r2, #0]
20002d86:	829a      	strh	r2, [r3, #20]
}
20002d88:	46c0      	nop			; (mov r8, r8)
20002d8a:	46bd      	mov	sp, r7
20002d8c:	b002      	add	sp, #8
20002d8e:	bd80      	pop	{r7, pc}

20002d90 <TIM_GetFlagStatus>:
  * @note   TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.    
  *
  * @retval The new state of TIM_FLAG (SET or RESET).
  */
FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{ 
20002d90:	b580      	push	{r7, lr}
20002d92:	b084      	sub	sp, #16
20002d94:	af00      	add	r7, sp, #0
20002d96:	6078      	str	r0, [r7, #4]
20002d98:	000a      	movs	r2, r1
20002d9a:	1cbb      	adds	r3, r7, #2
20002d9c:	801a      	strh	r2, [r3, #0]
  ITStatus bitstatus = RESET;  
20002d9e:	210f      	movs	r1, #15
20002da0:	187b      	adds	r3, r7, r1
20002da2:	2200      	movs	r2, #0
20002da4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));

  
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
20002da6:	687b      	ldr	r3, [r7, #4]
20002da8:	8a1b      	ldrh	r3, [r3, #16]
20002daa:	b29b      	uxth	r3, r3
20002dac:	1cba      	adds	r2, r7, #2
20002dae:	8812      	ldrh	r2, [r2, #0]
20002db0:	4013      	ands	r3, r2
20002db2:	b29b      	uxth	r3, r3
20002db4:	2b00      	cmp	r3, #0
20002db6:	d003      	beq.n	20002dc0 <TIM_GetFlagStatus+0x30>
  {
    bitstatus = SET;
20002db8:	187b      	adds	r3, r7, r1
20002dba:	2201      	movs	r2, #1
20002dbc:	701a      	strb	r2, [r3, #0]
20002dbe:	e003      	b.n	20002dc8 <TIM_GetFlagStatus+0x38>
  }
  else
  {
    bitstatus = RESET;
20002dc0:	230f      	movs	r3, #15
20002dc2:	18fb      	adds	r3, r7, r3
20002dc4:	2200      	movs	r2, #0
20002dc6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
20002dc8:	230f      	movs	r3, #15
20002dca:	18fb      	adds	r3, r7, r3
20002dcc:	781b      	ldrb	r3, [r3, #0]
}
20002dce:	0018      	movs	r0, r3
20002dd0:	46bd      	mov	sp, r7
20002dd2:	b004      	add	sp, #16
20002dd4:	bd80      	pop	{r7, pc}

20002dd6 <TIM_ClearFlag>:
  * @note   TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.
  *    
  * @retval None
  */
void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{  
20002dd6:	b580      	push	{r7, lr}
20002dd8:	b082      	sub	sp, #8
20002dda:	af00      	add	r7, sp, #0
20002ddc:	6078      	str	r0, [r7, #4]
20002dde:	000a      	movs	r2, r1
20002de0:	1cbb      	adds	r3, r7, #2
20002de2:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
20002de4:	1cbb      	adds	r3, r7, #2
20002de6:	881b      	ldrh	r3, [r3, #0]
20002de8:	43db      	mvns	r3, r3
20002dea:	b29a      	uxth	r2, r3
20002dec:	687b      	ldr	r3, [r7, #4]
20002dee:	821a      	strh	r2, [r3, #16]
}
20002df0:	46c0      	nop			; (mov r8, r8)
20002df2:	46bd      	mov	sp, r7
20002df4:	b002      	add	sp, #8
20002df6:	bd80      	pop	{r7, pc}

20002df8 <TIM_GetITStatus>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *     
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
20002df8:	b5b0      	push	{r4, r5, r7, lr}
20002dfa:	b084      	sub	sp, #16
20002dfc:	af00      	add	r7, sp, #0
20002dfe:	6078      	str	r0, [r7, #4]
20002e00:	000a      	movs	r2, r1
20002e02:	1cbb      	adds	r3, r7, #2
20002e04:	801a      	strh	r2, [r3, #0]
  ITStatus bitstatus = RESET;  
20002e06:	250f      	movs	r5, #15
20002e08:	197b      	adds	r3, r7, r5
20002e0a:	2200      	movs	r2, #0
20002e0c:	701a      	strb	r2, [r3, #0]
  uint16_t itstatus = 0x0, itenable = 0x0;
20002e0e:	200c      	movs	r0, #12
20002e10:	183b      	adds	r3, r7, r0
20002e12:	2200      	movs	r2, #0
20002e14:	801a      	strh	r2, [r3, #0]
20002e16:	240a      	movs	r4, #10
20002e18:	193b      	adds	r3, r7, r4
20002e1a:	2200      	movs	r2, #0
20002e1c:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
20002e1e:	687b      	ldr	r3, [r7, #4]
20002e20:	8a1b      	ldrh	r3, [r3, #16]
20002e22:	b29a      	uxth	r2, r3
20002e24:	183b      	adds	r3, r7, r0
20002e26:	1cb9      	adds	r1, r7, #2
20002e28:	8809      	ldrh	r1, [r1, #0]
20002e2a:	400a      	ands	r2, r1
20002e2c:	801a      	strh	r2, [r3, #0]
  
  itenable = TIMx->DIER & TIM_IT;
20002e2e:	687b      	ldr	r3, [r7, #4]
20002e30:	899b      	ldrh	r3, [r3, #12]
20002e32:	b29a      	uxth	r2, r3
20002e34:	193b      	adds	r3, r7, r4
20002e36:	1cb9      	adds	r1, r7, #2
20002e38:	8809      	ldrh	r1, [r1, #0]
20002e3a:	400a      	ands	r2, r1
20002e3c:	801a      	strh	r2, [r3, #0]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
20002e3e:	183b      	adds	r3, r7, r0
20002e40:	881b      	ldrh	r3, [r3, #0]
20002e42:	2b00      	cmp	r3, #0
20002e44:	d007      	beq.n	20002e56 <TIM_GetITStatus+0x5e>
20002e46:	193b      	adds	r3, r7, r4
20002e48:	881b      	ldrh	r3, [r3, #0]
20002e4a:	2b00      	cmp	r3, #0
20002e4c:	d003      	beq.n	20002e56 <TIM_GetITStatus+0x5e>
  {
    bitstatus = SET;
20002e4e:	197b      	adds	r3, r7, r5
20002e50:	2201      	movs	r2, #1
20002e52:	701a      	strb	r2, [r3, #0]
20002e54:	e003      	b.n	20002e5e <TIM_GetITStatus+0x66>
  }
  else
  {
    bitstatus = RESET;
20002e56:	230f      	movs	r3, #15
20002e58:	18fb      	adds	r3, r7, r3
20002e5a:	2200      	movs	r2, #0
20002e5c:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
20002e5e:	230f      	movs	r3, #15
20002e60:	18fb      	adds	r3, r7, r3
20002e62:	781b      	ldrb	r3, [r3, #0]
}
20002e64:	0018      	movs	r0, r3
20002e66:	46bd      	mov	sp, r7
20002e68:	b004      	add	sp, #16
20002e6a:	bdb0      	pop	{r4, r5, r7, pc}

20002e6c <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
20002e6c:	b580      	push	{r7, lr}
20002e6e:	b082      	sub	sp, #8
20002e70:	af00      	add	r7, sp, #0
20002e72:	6078      	str	r0, [r7, #4]
20002e74:	000a      	movs	r2, r1
20002e76:	1cbb      	adds	r3, r7, #2
20002e78:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
20002e7a:	1cbb      	adds	r3, r7, #2
20002e7c:	881b      	ldrh	r3, [r3, #0]
20002e7e:	43db      	mvns	r3, r3
20002e80:	b29a      	uxth	r2, r3
20002e82:	687b      	ldr	r3, [r7, #4]
20002e84:	821a      	strh	r2, [r3, #16]
}
20002e86:	46c0      	nop			; (mov r8, r8)
20002e88:	46bd      	mov	sp, r7
20002e8a:	b002      	add	sp, #8
20002e8c:	bd80      	pop	{r7, pc}

20002e8e <TIM_DMAConfig>:
  * @param  TIM_DMABurstLength: DMA Burst length. This parameter can be one value
  *         between: TIM_DMABurstLength_1Transfer and TIM_DMABurstLength_18Transfers.
  * @retval None
  */
void TIM_DMAConfig(TIM_TypeDef* TIMx, uint16_t TIM_DMABase, uint16_t TIM_DMABurstLength)
{
20002e8e:	b580      	push	{r7, lr}
20002e90:	b082      	sub	sp, #8
20002e92:	af00      	add	r7, sp, #0
20002e94:	6078      	str	r0, [r7, #4]
20002e96:	0008      	movs	r0, r1
20002e98:	0011      	movs	r1, r2
20002e9a:	1cbb      	adds	r3, r7, #2
20002e9c:	1c02      	adds	r2, r0, #0
20002e9e:	801a      	strh	r2, [r3, #0]
20002ea0:	003b      	movs	r3, r7
20002ea2:	1c0a      	adds	r2, r1, #0
20002ea4:	801a      	strh	r2, [r3, #0]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase)); 
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));

  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
20002ea6:	1cba      	adds	r2, r7, #2
20002ea8:	003b      	movs	r3, r7
20002eaa:	8812      	ldrh	r2, [r2, #0]
20002eac:	881b      	ldrh	r3, [r3, #0]
20002eae:	4313      	orrs	r3, r2
20002eb0:	b299      	uxth	r1, r3
20002eb2:	687b      	ldr	r3, [r7, #4]
20002eb4:	2248      	movs	r2, #72	; 0x48
20002eb6:	5299      	strh	r1, [r3, r2]
}
20002eb8:	46c0      	nop			; (mov r8, r8)
20002eba:	46bd      	mov	sp, r7
20002ebc:	b002      	add	sp, #8
20002ebe:	bd80      	pop	{r7, pc}

20002ec0 <TIM_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
{ 
20002ec0:	b580      	push	{r7, lr}
20002ec2:	b082      	sub	sp, #8
20002ec4:	af00      	add	r7, sp, #0
20002ec6:	6078      	str	r0, [r7, #4]
20002ec8:	0008      	movs	r0, r1
20002eca:	0011      	movs	r1, r2
20002ecc:	1cbb      	adds	r3, r7, #2
20002ece:	1c02      	adds	r2, r0, #0
20002ed0:	801a      	strh	r2, [r3, #0]
20002ed2:	1c7b      	adds	r3, r7, #1
20002ed4:	1c0a      	adds	r2, r1, #0
20002ed6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx)); 
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
20002ed8:	1c7b      	adds	r3, r7, #1
20002eda:	781b      	ldrb	r3, [r3, #0]
20002edc:	2b00      	cmp	r3, #0
20002ede:	d009      	beq.n	20002ef4 <TIM_DMACmd+0x34>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
20002ee0:	687b      	ldr	r3, [r7, #4]
20002ee2:	899b      	ldrh	r3, [r3, #12]
20002ee4:	b29a      	uxth	r2, r3
20002ee6:	1cbb      	adds	r3, r7, #2
20002ee8:	881b      	ldrh	r3, [r3, #0]
20002eea:	4313      	orrs	r3, r2
20002eec:	b29a      	uxth	r2, r3
20002eee:	687b      	ldr	r3, [r7, #4]
20002ef0:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
  }
}
20002ef2:	e00a      	b.n	20002f0a <TIM_DMACmd+0x4a>
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
20002ef4:	687b      	ldr	r3, [r7, #4]
20002ef6:	899b      	ldrh	r3, [r3, #12]
20002ef8:	b29b      	uxth	r3, r3
20002efa:	1cba      	adds	r2, r7, #2
20002efc:	8812      	ldrh	r2, [r2, #0]
20002efe:	43d2      	mvns	r2, r2
20002f00:	b292      	uxth	r2, r2
20002f02:	4013      	ands	r3, r2
20002f04:	b29a      	uxth	r2, r3
20002f06:	687b      	ldr	r3, [r7, #4]
20002f08:	819a      	strh	r2, [r3, #12]
}
20002f0a:	46c0      	nop			; (mov r8, r8)
20002f0c:	46bd      	mov	sp, r7
20002f0e:	b002      	add	sp, #8
20002f10:	bd80      	pop	{r7, pc}

20002f12 <TIM_SelectCCDMA>:
  * @param  NewState: new state of the Capture Compare DMA source
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCCDMA(TIM_TypeDef* TIMx, FunctionalState NewState)
{
20002f12:	b580      	push	{r7, lr}
20002f14:	b082      	sub	sp, #8
20002f16:	af00      	add	r7, sp, #0
20002f18:	6078      	str	r0, [r7, #4]
20002f1a:	000a      	movs	r2, r1
20002f1c:	1cfb      	adds	r3, r7, #3
20002f1e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20002f20:	1cfb      	adds	r3, r7, #3
20002f22:	781b      	ldrb	r3, [r3, #0]
20002f24:	2b00      	cmp	r3, #0
20002f26:	d008      	beq.n	20002f3a <TIM_SelectCCDMA+0x28>
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
20002f28:	687b      	ldr	r3, [r7, #4]
20002f2a:	889b      	ldrh	r3, [r3, #4]
20002f2c:	b29b      	uxth	r3, r3
20002f2e:	2208      	movs	r2, #8
20002f30:	4313      	orrs	r3, r2
20002f32:	b29a      	uxth	r2, r3
20002f34:	687b      	ldr	r3, [r7, #4]
20002f36:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCDS;
  }
}
20002f38:	e007      	b.n	20002f4a <TIM_SelectCCDMA+0x38>
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCDS;
20002f3a:	687b      	ldr	r3, [r7, #4]
20002f3c:	889b      	ldrh	r3, [r3, #4]
20002f3e:	b29b      	uxth	r3, r3
20002f40:	2208      	movs	r2, #8
20002f42:	4393      	bics	r3, r2
20002f44:	b29a      	uxth	r2, r3
20002f46:	687b      	ldr	r3, [r7, #4]
20002f48:	809a      	strh	r2, [r3, #4]
}
20002f4a:	46c0      	nop			; (mov r8, r8)
20002f4c:	46bd      	mov	sp, r7
20002f4e:	b002      	add	sp, #8
20002f50:	bd80      	pop	{r7, pc}

20002f52 <TIM_InternalClockConfig>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
  *         peripheral.
  * @retval None
  */
void TIM_InternalClockConfig(TIM_TypeDef* TIMx)
{
20002f52:	b580      	push	{r7, lr}
20002f54:	b082      	sub	sp, #8
20002f56:	af00      	add	r7, sp, #0
20002f58:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  (uint16_t)~TIM_SMCR_SMS;
20002f5a:	687b      	ldr	r3, [r7, #4]
20002f5c:	891b      	ldrh	r3, [r3, #8]
20002f5e:	b29b      	uxth	r3, r3
20002f60:	2207      	movs	r2, #7
20002f62:	4393      	bics	r3, r2
20002f64:	b29a      	uxth	r2, r3
20002f66:	687b      	ldr	r3, [r7, #4]
20002f68:	811a      	strh	r2, [r3, #8]
}
20002f6a:	46c0      	nop			; (mov r8, r8)
20002f6c:	46bd      	mov	sp, r7
20002f6e:	b002      	add	sp, #8
20002f70:	bd80      	pop	{r7, pc}

20002f72 <TIM_ITRxExternalClockConfig>:
  *            @arg TIM_TS_ITR2: Internal Trigger 2
  *            @arg TIM_TS_ITR3: Internal Trigger 3
  * @retval None
  */
void TIM_ITRxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
20002f72:	b580      	push	{r7, lr}
20002f74:	b082      	sub	sp, #8
20002f76:	af00      	add	r7, sp, #0
20002f78:	6078      	str	r0, [r7, #4]
20002f7a:	000a      	movs	r2, r1
20002f7c:	1cbb      	adds	r3, r7, #2
20002f7e:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_INTERNAL_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);
20002f80:	1cbb      	adds	r3, r7, #2
20002f82:	881a      	ldrh	r2, [r3, #0]
20002f84:	687b      	ldr	r3, [r7, #4]
20002f86:	0011      	movs	r1, r2
20002f88:	0018      	movs	r0, r3
20002f8a:	f000 f8b9 	bl	20003100 <TIM_SelectInputTrigger>

  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
20002f8e:	687b      	ldr	r3, [r7, #4]
20002f90:	891b      	ldrh	r3, [r3, #8]
20002f92:	b29b      	uxth	r3, r3
20002f94:	2207      	movs	r2, #7
20002f96:	4313      	orrs	r3, r2
20002f98:	b29a      	uxth	r2, r3
20002f9a:	687b      	ldr	r3, [r7, #4]
20002f9c:	811a      	strh	r2, [r3, #8]
}
20002f9e:	46c0      	nop			; (mov r8, r8)
20002fa0:	46bd      	mov	sp, r7
20002fa2:	b002      	add	sp, #8
20002fa4:	bd80      	pop	{r7, pc}

20002fa6 <TIM_TIxExternalClockConfig>:
  *          This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
20002fa6:	b5b0      	push	{r4, r5, r7, lr}
20002fa8:	b084      	sub	sp, #16
20002faa:	af00      	add	r7, sp, #0
20002fac:	60f8      	str	r0, [r7, #12]
20002fae:	000c      	movs	r4, r1
20002fb0:	0010      	movs	r0, r2
20002fb2:	0019      	movs	r1, r3
20002fb4:	250a      	movs	r5, #10
20002fb6:	197b      	adds	r3, r7, r5
20002fb8:	1c22      	adds	r2, r4, #0
20002fba:	801a      	strh	r2, [r3, #0]
20002fbc:	2408      	movs	r4, #8
20002fbe:	193b      	adds	r3, r7, r4
20002fc0:	1c02      	adds	r2, r0, #0
20002fc2:	801a      	strh	r2, [r3, #0]
20002fc4:	1dbb      	adds	r3, r7, #6
20002fc6:	1c0a      	adds	r2, r1, #0
20002fc8:	801a      	strh	r2, [r3, #0]
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
20002fca:	197b      	adds	r3, r7, r5
20002fcc:	881b      	ldrh	r3, [r3, #0]
20002fce:	2b60      	cmp	r3, #96	; 0x60
20002fd0:	d109      	bne.n	20002fe6 <TIM_TIxExternalClockConfig+0x40>
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
20002fd2:	1dbb      	adds	r3, r7, #6
20002fd4:	881a      	ldrh	r2, [r3, #0]
20002fd6:	193b      	adds	r3, r7, r4
20002fd8:	8819      	ldrh	r1, [r3, #0]
20002fda:	68f8      	ldr	r0, [r7, #12]
20002fdc:	0013      	movs	r3, r2
20002fde:	2201      	movs	r2, #1
20002fe0:	f000 fa33 	bl	2000344a <TI2_Config>
20002fe4:	e009      	b.n	20002ffa <TIM_TIxExternalClockConfig+0x54>
  }
  else
  {
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
20002fe6:	1dbb      	adds	r3, r7, #6
20002fe8:	881a      	ldrh	r2, [r3, #0]
20002fea:	2308      	movs	r3, #8
20002fec:	18fb      	adds	r3, r7, r3
20002fee:	8819      	ldrh	r1, [r3, #0]
20002ff0:	68f8      	ldr	r0, [r7, #12]
20002ff2:	0013      	movs	r3, r2
20002ff4:	2201      	movs	r2, #1
20002ff6:	f000 f9cf 	bl	20003398 <TI1_Config>
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
20002ffa:	230a      	movs	r3, #10
20002ffc:	18fb      	adds	r3, r7, r3
20002ffe:	881a      	ldrh	r2, [r3, #0]
20003000:	68fb      	ldr	r3, [r7, #12]
20003002:	0011      	movs	r1, r2
20003004:	0018      	movs	r0, r3
20003006:	f000 f87b 	bl	20003100 <TIM_SelectInputTrigger>
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
2000300a:	68fb      	ldr	r3, [r7, #12]
2000300c:	891b      	ldrh	r3, [r3, #8]
2000300e:	b29b      	uxth	r3, r3
20003010:	2207      	movs	r2, #7
20003012:	4313      	orrs	r3, r2
20003014:	b29a      	uxth	r2, r3
20003016:	68fb      	ldr	r3, [r7, #12]
20003018:	811a      	strh	r2, [r3, #8]
}
2000301a:	46c0      	nop			; (mov r8, r8)
2000301c:	46bd      	mov	sp, r7
2000301e:	b004      	add	sp, #16
20003020:	bdb0      	pop	{r4, r5, r7, pc}

20003022 <TIM_ETRClockMode1Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                            uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
20003022:	b5f0      	push	{r4, r5, r6, r7, lr}
20003024:	b087      	sub	sp, #28
20003026:	af00      	add	r7, sp, #0
20003028:	60f8      	str	r0, [r7, #12]
2000302a:	000c      	movs	r4, r1
2000302c:	0010      	movs	r0, r2
2000302e:	0019      	movs	r1, r3
20003030:	260a      	movs	r6, #10
20003032:	19bb      	adds	r3, r7, r6
20003034:	1c22      	adds	r2, r4, #0
20003036:	801a      	strh	r2, [r3, #0]
20003038:	2308      	movs	r3, #8
2000303a:	18fb      	adds	r3, r7, r3
2000303c:	1c02      	adds	r2, r0, #0
2000303e:	801a      	strh	r2, [r3, #0]
20003040:	1dbb      	adds	r3, r7, #6
20003042:	1c0a      	adds	r2, r1, #0
20003044:	801a      	strh	r2, [r3, #0]
  uint16_t tmpsmcr = 0;
20003046:	2516      	movs	r5, #22
20003048:	197b      	adds	r3, r7, r5
2000304a:	2200      	movs	r2, #0
2000304c:	801a      	strh	r2, [r3, #0]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
2000304e:	1dbb      	adds	r3, r7, #6
20003050:	881c      	ldrh	r4, [r3, #0]
20003052:	2308      	movs	r3, #8
20003054:	18fb      	adds	r3, r7, r3
20003056:	881a      	ldrh	r2, [r3, #0]
20003058:	19bb      	adds	r3, r7, r6
2000305a:	8819      	ldrh	r1, [r3, #0]
2000305c:	68f8      	ldr	r0, [r7, #12]
2000305e:	0023      	movs	r3, r4
20003060:	f000 f8c6 	bl	200031f0 <TIM_ETRConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
20003064:	197b      	adds	r3, r7, r5
20003066:	68fa      	ldr	r2, [r7, #12]
20003068:	8912      	ldrh	r2, [r2, #8]
2000306a:	801a      	strh	r2, [r3, #0]

  /* Reset the SMS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
2000306c:	197b      	adds	r3, r7, r5
2000306e:	0028      	movs	r0, r5
20003070:	197a      	adds	r2, r7, r5
20003072:	8812      	ldrh	r2, [r2, #0]
20003074:	2107      	movs	r1, #7
20003076:	438a      	bics	r2, r1
20003078:	801a      	strh	r2, [r3, #0]

  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;
2000307a:	183b      	adds	r3, r7, r0
2000307c:	183a      	adds	r2, r7, r0
2000307e:	8812      	ldrh	r2, [r2, #0]
20003080:	2107      	movs	r1, #7
20003082:	430a      	orrs	r2, r1
20003084:	801a      	strh	r2, [r3, #0]

  /* Select the Trigger selection : ETRF */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
20003086:	183b      	adds	r3, r7, r0
20003088:	183a      	adds	r2, r7, r0
2000308a:	8812      	ldrh	r2, [r2, #0]
2000308c:	2170      	movs	r1, #112	; 0x70
2000308e:	438a      	bics	r2, r1
20003090:	801a      	strh	r2, [r3, #0]
  tmpsmcr |= TIM_TS_ETRF;
20003092:	183b      	adds	r3, r7, r0
20003094:	183a      	adds	r2, r7, r0
20003096:	8812      	ldrh	r2, [r2, #0]
20003098:	2170      	movs	r1, #112	; 0x70
2000309a:	430a      	orrs	r2, r1
2000309c:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
2000309e:	68fb      	ldr	r3, [r7, #12]
200030a0:	183a      	adds	r2, r7, r0
200030a2:	8812      	ldrh	r2, [r2, #0]
200030a4:	811a      	strh	r2, [r3, #8]
}
200030a6:	46c0      	nop			; (mov r8, r8)
200030a8:	46bd      	mov	sp, r7
200030aa:	b007      	add	sp, #28
200030ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

200030ae <TIM_ETRClockMode2Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
200030ae:	b5f0      	push	{r4, r5, r6, r7, lr}
200030b0:	b085      	sub	sp, #20
200030b2:	af00      	add	r7, sp, #0
200030b4:	60f8      	str	r0, [r7, #12]
200030b6:	000c      	movs	r4, r1
200030b8:	0010      	movs	r0, r2
200030ba:	0019      	movs	r1, r3
200030bc:	250a      	movs	r5, #10
200030be:	197b      	adds	r3, r7, r5
200030c0:	1c22      	adds	r2, r4, #0
200030c2:	801a      	strh	r2, [r3, #0]
200030c4:	2608      	movs	r6, #8
200030c6:	19bb      	adds	r3, r7, r6
200030c8:	1c02      	adds	r2, r0, #0
200030ca:	801a      	strh	r2, [r3, #0]
200030cc:	1dbb      	adds	r3, r7, #6
200030ce:	1c0a      	adds	r2, r1, #0
200030d0:	801a      	strh	r2, [r3, #0]
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
200030d2:	1dbb      	adds	r3, r7, #6
200030d4:	881c      	ldrh	r4, [r3, #0]
200030d6:	19bb      	adds	r3, r7, r6
200030d8:	881a      	ldrh	r2, [r3, #0]
200030da:	197b      	adds	r3, r7, r5
200030dc:	8819      	ldrh	r1, [r3, #0]
200030de:	68f8      	ldr	r0, [r7, #12]
200030e0:	0023      	movs	r3, r4
200030e2:	f000 f885 	bl	200031f0 <TIM_ETRConfig>

  /* Enable the External clock mode2 */
  TIMx->SMCR |= TIM_SMCR_ECE;
200030e6:	68fb      	ldr	r3, [r7, #12]
200030e8:	891b      	ldrh	r3, [r3, #8]
200030ea:	b29b      	uxth	r3, r3
200030ec:	2280      	movs	r2, #128	; 0x80
200030ee:	01d2      	lsls	r2, r2, #7
200030f0:	4313      	orrs	r3, r2
200030f2:	b29a      	uxth	r2, r3
200030f4:	68fb      	ldr	r3, [r7, #12]
200030f6:	811a      	strh	r2, [r3, #8]
}
200030f8:	46c0      	nop			; (mov r8, r8)
200030fa:	46bd      	mov	sp, r7
200030fc:	b005      	add	sp, #20
200030fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

20003100 <TIM_SelectInputTrigger>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
20003100:	b580      	push	{r7, lr}
20003102:	b084      	sub	sp, #16
20003104:	af00      	add	r7, sp, #0
20003106:	6078      	str	r0, [r7, #4]
20003108:	000a      	movs	r2, r1
2000310a:	1cbb      	adds	r3, r7, #2
2000310c:	801a      	strh	r2, [r3, #0]
  uint16_t tmpsmcr = 0;
2000310e:	200e      	movs	r0, #14
20003110:	183b      	adds	r3, r7, r0
20003112:	2200      	movs	r2, #0
20003114:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
20003116:	183b      	adds	r3, r7, r0
20003118:	687a      	ldr	r2, [r7, #4]
2000311a:	8912      	ldrh	r2, [r2, #8]
2000311c:	801a      	strh	r2, [r3, #0]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
2000311e:	183b      	adds	r3, r7, r0
20003120:	183a      	adds	r2, r7, r0
20003122:	8812      	ldrh	r2, [r2, #0]
20003124:	2170      	movs	r1, #112	; 0x70
20003126:	438a      	bics	r2, r1
20003128:	801a      	strh	r2, [r3, #0]

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
2000312a:	183b      	adds	r3, r7, r0
2000312c:	1839      	adds	r1, r7, r0
2000312e:	1cba      	adds	r2, r7, #2
20003130:	8809      	ldrh	r1, [r1, #0]
20003132:	8812      	ldrh	r2, [r2, #0]
20003134:	430a      	orrs	r2, r1
20003136:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
20003138:	687b      	ldr	r3, [r7, #4]
2000313a:	183a      	adds	r2, r7, r0
2000313c:	8812      	ldrh	r2, [r2, #0]
2000313e:	811a      	strh	r2, [r3, #8]
}
20003140:	46c0      	nop			; (mov r8, r8)
20003142:	46bd      	mov	sp, r7
20003144:	b004      	add	sp, #16
20003146:	bd80      	pop	{r7, pc}

20003148 <TIM_SelectOutputTrigger>:
  *            @arg TIM_TRGOSource_OC4Ref: OC4REF signal is used as the trigger output(TRGO)
  *
  * @retval None
  */
void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
{
20003148:	b580      	push	{r7, lr}
2000314a:	b082      	sub	sp, #8
2000314c:	af00      	add	r7, sp, #0
2000314e:	6078      	str	r0, [r7, #4]
20003150:	000a      	movs	r2, r1
20003152:	1cbb      	adds	r3, r7, #2
20003154:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
20003156:	687b      	ldr	r3, [r7, #4]
20003158:	889b      	ldrh	r3, [r3, #4]
2000315a:	b29b      	uxth	r3, r3
2000315c:	2270      	movs	r2, #112	; 0x70
2000315e:	4393      	bics	r3, r2
20003160:	b29a      	uxth	r2, r3
20003162:	687b      	ldr	r3, [r7, #4]
20003164:	809a      	strh	r2, [r3, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
20003166:	687b      	ldr	r3, [r7, #4]
20003168:	889b      	ldrh	r3, [r3, #4]
2000316a:	b29a      	uxth	r2, r3
2000316c:	1cbb      	adds	r3, r7, #2
2000316e:	881b      	ldrh	r3, [r3, #0]
20003170:	4313      	orrs	r3, r2
20003172:	b29a      	uxth	r2, r3
20003174:	687b      	ldr	r3, [r7, #4]
20003176:	809a      	strh	r2, [r3, #4]
}
20003178:	46c0      	nop			; (mov r8, r8)
2000317a:	46bd      	mov	sp, r7
2000317c:	b002      	add	sp, #8
2000317e:	bd80      	pop	{r7, pc}

20003180 <TIM_SelectSlaveMode>:
  *            @arg TIM_SlaveMode_Trigger:   The counter starts at a rising edge of the trigger TRGI
  *            @arg TIM_SlaveMode_External1: Rising edges of the selected trigger (TRGI) clock the counter
  * @retval None
  */
void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_SlaveMode)
{
20003180:	b580      	push	{r7, lr}
20003182:	b082      	sub	sp, #8
20003184:	af00      	add	r7, sp, #0
20003186:	6078      	str	r0, [r7, #4]
20003188:	000a      	movs	r2, r1
2000318a:	1cbb      	adds	r3, r7, #2
2000318c:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));

  /* Reset the SMS Bits */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_SMS;
2000318e:	687b      	ldr	r3, [r7, #4]
20003190:	891b      	ldrh	r3, [r3, #8]
20003192:	b29b      	uxth	r3, r3
20003194:	2207      	movs	r2, #7
20003196:	4393      	bics	r3, r2
20003198:	b29a      	uxth	r2, r3
2000319a:	687b      	ldr	r3, [r7, #4]
2000319c:	811a      	strh	r2, [r3, #8]

  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
2000319e:	687b      	ldr	r3, [r7, #4]
200031a0:	891b      	ldrh	r3, [r3, #8]
200031a2:	b29a      	uxth	r2, r3
200031a4:	1cbb      	adds	r3, r7, #2
200031a6:	881b      	ldrh	r3, [r3, #0]
200031a8:	4313      	orrs	r3, r2
200031aa:	b29a      	uxth	r2, r3
200031ac:	687b      	ldr	r3, [r7, #4]
200031ae:	811a      	strh	r2, [r3, #8]
}
200031b0:	46c0      	nop			; (mov r8, r8)
200031b2:	46bd      	mov	sp, r7
200031b4:	b002      	add	sp, #8
200031b6:	bd80      	pop	{r7, pc}

200031b8 <TIM_SelectMasterSlaveMode>:
  *                                             and its slaves (through TRGO)
  *            @arg TIM_MasterSlaveMode_Disable: No action
  * @retval None
  */
void TIM_SelectMasterSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_MasterSlaveMode)
{
200031b8:	b580      	push	{r7, lr}
200031ba:	b082      	sub	sp, #8
200031bc:	af00      	add	r7, sp, #0
200031be:	6078      	str	r0, [r7, #4]
200031c0:	000a      	movs	r2, r1
200031c2:	1cbb      	adds	r3, r7, #2
200031c4:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));

  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_MSM;
200031c6:	687b      	ldr	r3, [r7, #4]
200031c8:	891b      	ldrh	r3, [r3, #8]
200031ca:	b29b      	uxth	r3, r3
200031cc:	2280      	movs	r2, #128	; 0x80
200031ce:	4393      	bics	r3, r2
200031d0:	b29a      	uxth	r2, r3
200031d2:	687b      	ldr	r3, [r7, #4]
200031d4:	811a      	strh	r2, [r3, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
200031d6:	687b      	ldr	r3, [r7, #4]
200031d8:	891b      	ldrh	r3, [r3, #8]
200031da:	b29a      	uxth	r2, r3
200031dc:	1cbb      	adds	r3, r7, #2
200031de:	881b      	ldrh	r3, [r3, #0]
200031e0:	4313      	orrs	r3, r2
200031e2:	b29a      	uxth	r2, r3
200031e4:	687b      	ldr	r3, [r7, #4]
200031e6:	811a      	strh	r2, [r3, #8]
}
200031e8:	46c0      	nop			; (mov r8, r8)
200031ea:	46bd      	mov	sp, r7
200031ec:	b002      	add	sp, #8
200031ee:	bd80      	pop	{r7, pc}

200031f0 <TIM_ETRConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                   uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
200031f0:	b5b0      	push	{r4, r5, r7, lr}
200031f2:	b086      	sub	sp, #24
200031f4:	af00      	add	r7, sp, #0
200031f6:	60f8      	str	r0, [r7, #12]
200031f8:	000c      	movs	r4, r1
200031fa:	0010      	movs	r0, r2
200031fc:	0019      	movs	r1, r3
200031fe:	250a      	movs	r5, #10
20003200:	197b      	adds	r3, r7, r5
20003202:	1c22      	adds	r2, r4, #0
20003204:	801a      	strh	r2, [r3, #0]
20003206:	2408      	movs	r4, #8
20003208:	193b      	adds	r3, r7, r4
2000320a:	1c02      	adds	r2, r0, #0
2000320c:	801a      	strh	r2, [r3, #0]
2000320e:	1dbb      	adds	r3, r7, #6
20003210:	1c0a      	adds	r2, r1, #0
20003212:	801a      	strh	r2, [r3, #0]
  uint16_t tmpsmcr = 0;
20003214:	2016      	movs	r0, #22
20003216:	183b      	adds	r3, r7, r0
20003218:	2200      	movs	r2, #0
2000321a:	801a      	strh	r2, [r3, #0]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
2000321c:	183b      	adds	r3, r7, r0
2000321e:	68fa      	ldr	r2, [r7, #12]
20003220:	8912      	ldrh	r2, [r2, #8]
20003222:	801a      	strh	r2, [r3, #0]

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
20003224:	183b      	adds	r3, r7, r0
20003226:	183a      	adds	r2, r7, r0
20003228:	8812      	ldrh	r2, [r2, #0]
2000322a:	21ff      	movs	r1, #255	; 0xff
2000322c:	400a      	ands	r2, r1
2000322e:	801a      	strh	r2, [r3, #0]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
20003230:	1dbb      	adds	r3, r7, #6
20003232:	881b      	ldrh	r3, [r3, #0]
20003234:	021b      	lsls	r3, r3, #8
20003236:	b29a      	uxth	r2, r3
20003238:	193b      	adds	r3, r7, r4
2000323a:	881b      	ldrh	r3, [r3, #0]
2000323c:	4313      	orrs	r3, r2
2000323e:	b29a      	uxth	r2, r3
20003240:	197b      	adds	r3, r7, r5
20003242:	881b      	ldrh	r3, [r3, #0]
20003244:	4313      	orrs	r3, r2
20003246:	b299      	uxth	r1, r3
20003248:	183b      	adds	r3, r7, r0
2000324a:	183a      	adds	r2, r7, r0
2000324c:	8812      	ldrh	r2, [r2, #0]
2000324e:	430a      	orrs	r2, r1
20003250:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
20003252:	68fb      	ldr	r3, [r7, #12]
20003254:	183a      	adds	r2, r7, r0
20003256:	8812      	ldrh	r2, [r2, #0]
20003258:	811a      	strh	r2, [r3, #8]
}
2000325a:	46c0      	nop			; (mov r8, r8)
2000325c:	46bd      	mov	sp, r7
2000325e:	b006      	add	sp, #24
20003260:	bdb0      	pop	{r4, r5, r7, pc}

20003262 <TIM_EncoderInterfaceConfig>:
  *            @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
20003262:	b5f0      	push	{r4, r5, r6, r7, lr}
20003264:	b087      	sub	sp, #28
20003266:	af00      	add	r7, sp, #0
20003268:	60f8      	str	r0, [r7, #12]
2000326a:	000c      	movs	r4, r1
2000326c:	0010      	movs	r0, r2
2000326e:	0019      	movs	r1, r3
20003270:	260a      	movs	r6, #10
20003272:	19bb      	adds	r3, r7, r6
20003274:	1c22      	adds	r2, r4, #0
20003276:	801a      	strh	r2, [r3, #0]
20003278:	2308      	movs	r3, #8
2000327a:	18fb      	adds	r3, r7, r3
2000327c:	1c02      	adds	r2, r0, #0
2000327e:	801a      	strh	r2, [r3, #0]
20003280:	1dbb      	adds	r3, r7, #6
20003282:	1c0a      	adds	r2, r1, #0
20003284:	801a      	strh	r2, [r3, #0]
  uint16_t tmpsmcr = 0;
20003286:	2116      	movs	r1, #22
20003288:	187b      	adds	r3, r7, r1
2000328a:	2200      	movs	r2, #0
2000328c:	801a      	strh	r2, [r3, #0]
  uint16_t tmpccmr1 = 0;
2000328e:	2414      	movs	r4, #20
20003290:	193b      	adds	r3, r7, r4
20003292:	2200      	movs	r2, #0
20003294:	801a      	strh	r2, [r3, #0]
  uint16_t tmpccer = 0;
20003296:	2512      	movs	r5, #18
20003298:	197b      	adds	r3, r7, r5
2000329a:	2200      	movs	r2, #0
2000329c:	801a      	strh	r2, [r3, #0]
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
2000329e:	187b      	adds	r3, r7, r1
200032a0:	68fa      	ldr	r2, [r7, #12]
200032a2:	8912      	ldrh	r2, [r2, #8]
200032a4:	801a      	strh	r2, [r3, #0]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
200032a6:	193b      	adds	r3, r7, r4
200032a8:	68fa      	ldr	r2, [r7, #12]
200032aa:	8b12      	ldrh	r2, [r2, #24]
200032ac:	801a      	strh	r2, [r3, #0]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
200032ae:	197b      	adds	r3, r7, r5
200032b0:	68fa      	ldr	r2, [r7, #12]
200032b2:	8c12      	ldrh	r2, [r2, #32]
200032b4:	801a      	strh	r2, [r3, #0]

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
200032b6:	0008      	movs	r0, r1
200032b8:	183b      	adds	r3, r7, r0
200032ba:	183a      	adds	r2, r7, r0
200032bc:	8812      	ldrh	r2, [r2, #0]
200032be:	2107      	movs	r1, #7
200032c0:	438a      	bics	r2, r1
200032c2:	801a      	strh	r2, [r3, #0]
  tmpsmcr |= TIM_EncoderMode;
200032c4:	183b      	adds	r3, r7, r0
200032c6:	1839      	adds	r1, r7, r0
200032c8:	19ba      	adds	r2, r7, r6
200032ca:	8809      	ldrh	r1, [r1, #0]
200032cc:	8812      	ldrh	r2, [r2, #0]
200032ce:	430a      	orrs	r2, r1
200032d0:	801a      	strh	r2, [r3, #0]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
200032d2:	193b      	adds	r3, r7, r4
200032d4:	193a      	adds	r2, r7, r4
200032d6:	8812      	ldrh	r2, [r2, #0]
200032d8:	4916      	ldr	r1, [pc, #88]	; (20003334 <TIM_EncoderInterfaceConfig+0xd2>)
200032da:	400a      	ands	r2, r1
200032dc:	801a      	strh	r2, [r3, #0]
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
200032de:	193b      	adds	r3, r7, r4
200032e0:	193a      	adds	r2, r7, r4
200032e2:	8812      	ldrh	r2, [r2, #0]
200032e4:	2102      	movs	r1, #2
200032e6:	31ff      	adds	r1, #255	; 0xff
200032e8:	430a      	orrs	r2, r1
200032ea:	801a      	strh	r2, [r3, #0]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
200032ec:	197b      	adds	r3, r7, r5
200032ee:	197a      	adds	r2, r7, r5
200032f0:	8812      	ldrh	r2, [r2, #0]
200032f2:	2122      	movs	r1, #34	; 0x22
200032f4:	438a      	bics	r2, r1
200032f6:	801a      	strh	r2, [r3, #0]
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
200032f8:	1dbb      	adds	r3, r7, #6
200032fa:	881b      	ldrh	r3, [r3, #0]
200032fc:	011b      	lsls	r3, r3, #4
200032fe:	b29a      	uxth	r2, r3
20003300:	2308      	movs	r3, #8
20003302:	18fb      	adds	r3, r7, r3
20003304:	881b      	ldrh	r3, [r3, #0]
20003306:	4313      	orrs	r3, r2
20003308:	b299      	uxth	r1, r3
2000330a:	197b      	adds	r3, r7, r5
2000330c:	197a      	adds	r2, r7, r5
2000330e:	8812      	ldrh	r2, [r2, #0]
20003310:	430a      	orrs	r2, r1
20003312:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
20003314:	68fb      	ldr	r3, [r7, #12]
20003316:	183a      	adds	r2, r7, r0
20003318:	8812      	ldrh	r2, [r2, #0]
2000331a:	811a      	strh	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
2000331c:	68fb      	ldr	r3, [r7, #12]
2000331e:	193a      	adds	r2, r7, r4
20003320:	8812      	ldrh	r2, [r2, #0]
20003322:	831a      	strh	r2, [r3, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
20003324:	68fb      	ldr	r3, [r7, #12]
20003326:	197a      	adds	r2, r7, r5
20003328:	8812      	ldrh	r2, [r2, #0]
2000332a:	841a      	strh	r2, [r3, #32]
}
2000332c:	46c0      	nop			; (mov r8, r8)
2000332e:	46bd      	mov	sp, r7
20003330:	b007      	add	sp, #28
20003332:	bdf0      	pop	{r4, r5, r6, r7, pc}
20003334:	fffffcfc 			; <UNDEFINED> instruction: 0xfffffcfc

20003338 <TIM_SelectHallSensor>:
  * @param  NewState: new state of the TIMx Hall sensor interface.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectHallSensor(TIM_TypeDef* TIMx, FunctionalState NewState)
{
20003338:	b580      	push	{r7, lr}
2000333a:	b082      	sub	sp, #8
2000333c:	af00      	add	r7, sp, #0
2000333e:	6078      	str	r0, [r7, #4]
20003340:	000a      	movs	r2, r1
20003342:	1cfb      	adds	r3, r7, #3
20003344:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20003346:	1cfb      	adds	r3, r7, #3
20003348:	781b      	ldrb	r3, [r3, #0]
2000334a:	2b00      	cmp	r3, #0
2000334c:	d008      	beq.n	20003360 <TIM_SelectHallSensor+0x28>
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
2000334e:	687b      	ldr	r3, [r7, #4]
20003350:	889b      	ldrh	r3, [r3, #4]
20003352:	b29b      	uxth	r3, r3
20003354:	2280      	movs	r2, #128	; 0x80
20003356:	4313      	orrs	r3, r2
20003358:	b29a      	uxth	r2, r3
2000335a:	687b      	ldr	r3, [r7, #4]
2000335c:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_TI1S;
  }
}
2000335e:	e007      	b.n	20003370 <TIM_SelectHallSensor+0x38>
    TIMx->CR2 &= (uint16_t)~TIM_CR2_TI1S;
20003360:	687b      	ldr	r3, [r7, #4]
20003362:	889b      	ldrh	r3, [r3, #4]
20003364:	b29b      	uxth	r3, r3
20003366:	2280      	movs	r2, #128	; 0x80
20003368:	4393      	bics	r3, r2
2000336a:	b29a      	uxth	r2, r3
2000336c:	687b      	ldr	r3, [r7, #4]
2000336e:	809a      	strh	r2, [r3, #4]
}
20003370:	46c0      	nop			; (mov r8, r8)
20003372:	46bd      	mov	sp, r7
20003374:	b002      	add	sp, #8
20003376:	bd80      	pop	{r7, pc}

20003378 <TIM_RemapConfig>:
  *            @arg TIM11_HSE:      TIM11 CH4 input is connected to HSE_RTC clock
  *                                 (HSE divided by a programmable prescaler)  
  * @retval None
  */
void TIM_RemapConfig(TIM_TypeDef* TIMx, uint16_t TIM_Remap)
{
20003378:	b580      	push	{r7, lr}
2000337a:	b082      	sub	sp, #8
2000337c:	af00      	add	r7, sp, #0
2000337e:	6078      	str	r0, [r7, #4]
20003380:	000a      	movs	r2, r1
20003382:	1cbb      	adds	r3, r7, #2
20003384:	801a      	strh	r2, [r3, #0]
 /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_REMAP(TIM_Remap));

  /* Set the Timer remapping configuration */
  TIMx->OR =  TIM_Remap;
20003386:	687b      	ldr	r3, [r7, #4]
20003388:	1cba      	adds	r2, r7, #2
2000338a:	2150      	movs	r1, #80	; 0x50
2000338c:	8812      	ldrh	r2, [r2, #0]
2000338e:	525a      	strh	r2, [r3, r1]
}
20003390:	46c0      	nop			; (mov r8, r8)
20003392:	46bd      	mov	sp, r7
20003394:	b002      	add	sp, #8
20003396:	bd80      	pop	{r7, pc}

20003398 <TI1_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
20003398:	b5f0      	push	{r4, r5, r6, r7, lr}
2000339a:	b087      	sub	sp, #28
2000339c:	af00      	add	r7, sp, #0
2000339e:	60f8      	str	r0, [r7, #12]
200033a0:	000c      	movs	r4, r1
200033a2:	0010      	movs	r0, r2
200033a4:	0019      	movs	r1, r3
200033a6:	250a      	movs	r5, #10
200033a8:	197b      	adds	r3, r7, r5
200033aa:	1c22      	adds	r2, r4, #0
200033ac:	801a      	strh	r2, [r3, #0]
200033ae:	2608      	movs	r6, #8
200033b0:	19bb      	adds	r3, r7, r6
200033b2:	1c02      	adds	r2, r0, #0
200033b4:	801a      	strh	r2, [r3, #0]
200033b6:	1dbb      	adds	r3, r7, #6
200033b8:	1c0a      	adds	r2, r1, #0
200033ba:	801a      	strh	r2, [r3, #0]
  uint16_t tmpccmr1 = 0, tmpccer = 0;
200033bc:	2016      	movs	r0, #22
200033be:	183b      	adds	r3, r7, r0
200033c0:	2200      	movs	r2, #0
200033c2:	801a      	strh	r2, [r3, #0]
200033c4:	2414      	movs	r4, #20
200033c6:	193b      	adds	r3, r7, r4
200033c8:	2200      	movs	r2, #0
200033ca:	801a      	strh	r2, [r3, #0]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
200033cc:	68fb      	ldr	r3, [r7, #12]
200033ce:	8c1b      	ldrh	r3, [r3, #32]
200033d0:	b29b      	uxth	r3, r3
200033d2:	2201      	movs	r2, #1
200033d4:	4393      	bics	r3, r2
200033d6:	b29a      	uxth	r2, r3
200033d8:	68fb      	ldr	r3, [r7, #12]
200033da:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
200033dc:	183b      	adds	r3, r7, r0
200033de:	68fa      	ldr	r2, [r7, #12]
200033e0:	8b12      	ldrh	r2, [r2, #24]
200033e2:	801a      	strh	r2, [r3, #0]
  tmpccer = TIMx->CCER;
200033e4:	193b      	adds	r3, r7, r4
200033e6:	68fa      	ldr	r2, [r7, #12]
200033e8:	8c12      	ldrh	r2, [r2, #32]
200033ea:	801a      	strh	r2, [r3, #0]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
200033ec:	183b      	adds	r3, r7, r0
200033ee:	183a      	adds	r2, r7, r0
200033f0:	8812      	ldrh	r2, [r2, #0]
200033f2:	21f3      	movs	r1, #243	; 0xf3
200033f4:	438a      	bics	r2, r1
200033f6:	801a      	strh	r2, [r3, #0]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
200033f8:	1dbb      	adds	r3, r7, #6
200033fa:	881b      	ldrh	r3, [r3, #0]
200033fc:	011b      	lsls	r3, r3, #4
200033fe:	b29a      	uxth	r2, r3
20003400:	19bb      	adds	r3, r7, r6
20003402:	881b      	ldrh	r3, [r3, #0]
20003404:	4313      	orrs	r3, r2
20003406:	b299      	uxth	r1, r3
20003408:	183b      	adds	r3, r7, r0
2000340a:	183a      	adds	r2, r7, r0
2000340c:	8812      	ldrh	r2, [r2, #0]
2000340e:	430a      	orrs	r2, r1
20003410:	801a      	strh	r2, [r3, #0]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
20003412:	193b      	adds	r3, r7, r4
20003414:	193a      	adds	r2, r7, r4
20003416:	8812      	ldrh	r2, [r2, #0]
20003418:	210a      	movs	r1, #10
2000341a:	438a      	bics	r2, r1
2000341c:	801a      	strh	r2, [r3, #0]
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
2000341e:	197a      	adds	r2, r7, r5
20003420:	193b      	adds	r3, r7, r4
20003422:	8812      	ldrh	r2, [r2, #0]
20003424:	881b      	ldrh	r3, [r3, #0]
20003426:	4313      	orrs	r3, r2
20003428:	b29a      	uxth	r2, r3
2000342a:	193b      	adds	r3, r7, r4
2000342c:	2101      	movs	r1, #1
2000342e:	430a      	orrs	r2, r1
20003430:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
20003432:	68fb      	ldr	r3, [r7, #12]
20003434:	183a      	adds	r2, r7, r0
20003436:	8812      	ldrh	r2, [r2, #0]
20003438:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
2000343a:	68fb      	ldr	r3, [r7, #12]
2000343c:	193a      	adds	r2, r7, r4
2000343e:	8812      	ldrh	r2, [r2, #0]
20003440:	841a      	strh	r2, [r3, #32]
}
20003442:	46c0      	nop			; (mov r8, r8)
20003444:	46bd      	mov	sp, r7
20003446:	b007      	add	sp, #28
20003448:	bdf0      	pop	{r4, r5, r6, r7, pc}

2000344a <TI2_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
2000344a:	b5f0      	push	{r4, r5, r6, r7, lr}
2000344c:	b087      	sub	sp, #28
2000344e:	af00      	add	r7, sp, #0
20003450:	60f8      	str	r0, [r7, #12]
20003452:	000c      	movs	r4, r1
20003454:	0010      	movs	r0, r2
20003456:	0019      	movs	r1, r3
20003458:	260a      	movs	r6, #10
2000345a:	19bb      	adds	r3, r7, r6
2000345c:	1c22      	adds	r2, r4, #0
2000345e:	801a      	strh	r2, [r3, #0]
20003460:	2308      	movs	r3, #8
20003462:	18fb      	adds	r3, r7, r3
20003464:	1c02      	adds	r2, r0, #0
20003466:	801a      	strh	r2, [r3, #0]
20003468:	1dbb      	adds	r3, r7, #6
2000346a:	1c0a      	adds	r2, r1, #0
2000346c:	801a      	strh	r2, [r3, #0]
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
2000346e:	2116      	movs	r1, #22
20003470:	187b      	adds	r3, r7, r1
20003472:	2200      	movs	r2, #0
20003474:	801a      	strh	r2, [r3, #0]
20003476:	2414      	movs	r4, #20
20003478:	193b      	adds	r3, r7, r4
2000347a:	2200      	movs	r2, #0
2000347c:	801a      	strh	r2, [r3, #0]
2000347e:	2512      	movs	r5, #18
20003480:	197b      	adds	r3, r7, r5
20003482:	2200      	movs	r2, #0
20003484:	801a      	strh	r2, [r3, #0]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
20003486:	68fb      	ldr	r3, [r7, #12]
20003488:	8c1b      	ldrh	r3, [r3, #32]
2000348a:	b29b      	uxth	r3, r3
2000348c:	2210      	movs	r2, #16
2000348e:	4393      	bics	r3, r2
20003490:	b29a      	uxth	r2, r3
20003492:	68fb      	ldr	r3, [r7, #12]
20003494:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
20003496:	187b      	adds	r3, r7, r1
20003498:	68fa      	ldr	r2, [r7, #12]
2000349a:	8b12      	ldrh	r2, [r2, #24]
2000349c:	801a      	strh	r2, [r3, #0]
  tmpccer = TIMx->CCER;
2000349e:	193b      	adds	r3, r7, r4
200034a0:	68fa      	ldr	r2, [r7, #12]
200034a2:	8c12      	ldrh	r2, [r2, #32]
200034a4:	801a      	strh	r2, [r3, #0]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
200034a6:	197b      	adds	r3, r7, r5
200034a8:	19ba      	adds	r2, r7, r6
200034aa:	8812      	ldrh	r2, [r2, #0]
200034ac:	0112      	lsls	r2, r2, #4
200034ae:	801a      	strh	r2, [r3, #0]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
200034b0:	187b      	adds	r3, r7, r1
200034b2:	0008      	movs	r0, r1
200034b4:	187a      	adds	r2, r7, r1
200034b6:	8812      	ldrh	r2, [r2, #0]
200034b8:	4918      	ldr	r1, [pc, #96]	; (2000351c <TI2_Config+0xd2>)
200034ba:	400a      	ands	r2, r1
200034bc:	801a      	strh	r2, [r3, #0]
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
200034be:	1dbb      	adds	r3, r7, #6
200034c0:	881b      	ldrh	r3, [r3, #0]
200034c2:	031b      	lsls	r3, r3, #12
200034c4:	b299      	uxth	r1, r3
200034c6:	183b      	adds	r3, r7, r0
200034c8:	183a      	adds	r2, r7, r0
200034ca:	8812      	ldrh	r2, [r2, #0]
200034cc:	430a      	orrs	r2, r1
200034ce:	801a      	strh	r2, [r3, #0]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
200034d0:	2308      	movs	r3, #8
200034d2:	18fb      	adds	r3, r7, r3
200034d4:	881b      	ldrh	r3, [r3, #0]
200034d6:	021b      	lsls	r3, r3, #8
200034d8:	b299      	uxth	r1, r3
200034da:	183b      	adds	r3, r7, r0
200034dc:	183a      	adds	r2, r7, r0
200034de:	8812      	ldrh	r2, [r2, #0]
200034e0:	430a      	orrs	r2, r1
200034e2:	801a      	strh	r2, [r3, #0]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
200034e4:	193b      	adds	r3, r7, r4
200034e6:	193a      	adds	r2, r7, r4
200034e8:	8812      	ldrh	r2, [r2, #0]
200034ea:	21a0      	movs	r1, #160	; 0xa0
200034ec:	438a      	bics	r2, r1
200034ee:	801a      	strh	r2, [r3, #0]
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
200034f0:	197a      	adds	r2, r7, r5
200034f2:	193b      	adds	r3, r7, r4
200034f4:	8812      	ldrh	r2, [r2, #0]
200034f6:	881b      	ldrh	r3, [r3, #0]
200034f8:	4313      	orrs	r3, r2
200034fa:	b29a      	uxth	r2, r3
200034fc:	193b      	adds	r3, r7, r4
200034fe:	2110      	movs	r1, #16
20003500:	430a      	orrs	r2, r1
20003502:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
20003504:	68fb      	ldr	r3, [r7, #12]
20003506:	183a      	adds	r2, r7, r0
20003508:	8812      	ldrh	r2, [r2, #0]
2000350a:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
2000350c:	68fb      	ldr	r3, [r7, #12]
2000350e:	193a      	adds	r2, r7, r4
20003510:	8812      	ldrh	r2, [r2, #0]
20003512:	841a      	strh	r2, [r3, #32]
}
20003514:	46c0      	nop			; (mov r8, r8)
20003516:	46bd      	mov	sp, r7
20003518:	b007      	add	sp, #28
2000351a:	bdf0      	pop	{r4, r5, r6, r7, pc}
2000351c:	00000cff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

20003520 <TI3_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
20003520:	b5f0      	push	{r4, r5, r6, r7, lr}
20003522:	b087      	sub	sp, #28
20003524:	af00      	add	r7, sp, #0
20003526:	60f8      	str	r0, [r7, #12]
20003528:	000c      	movs	r4, r1
2000352a:	0010      	movs	r0, r2
2000352c:	0019      	movs	r1, r3
2000352e:	260a      	movs	r6, #10
20003530:	19bb      	adds	r3, r7, r6
20003532:	1c22      	adds	r2, r4, #0
20003534:	801a      	strh	r2, [r3, #0]
20003536:	2308      	movs	r3, #8
20003538:	18fb      	adds	r3, r7, r3
2000353a:	1c02      	adds	r2, r0, #0
2000353c:	801a      	strh	r2, [r3, #0]
2000353e:	1dbb      	adds	r3, r7, #6
20003540:	1c0a      	adds	r2, r1, #0
20003542:	801a      	strh	r2, [r3, #0]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
20003544:	2116      	movs	r1, #22
20003546:	187b      	adds	r3, r7, r1
20003548:	2200      	movs	r2, #0
2000354a:	801a      	strh	r2, [r3, #0]
2000354c:	2414      	movs	r4, #20
2000354e:	193b      	adds	r3, r7, r4
20003550:	2200      	movs	r2, #0
20003552:	801a      	strh	r2, [r3, #0]
20003554:	2512      	movs	r5, #18
20003556:	197b      	adds	r3, r7, r5
20003558:	2200      	movs	r2, #0
2000355a:	801a      	strh	r2, [r3, #0]

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
2000355c:	68fb      	ldr	r3, [r7, #12]
2000355e:	8c1b      	ldrh	r3, [r3, #32]
20003560:	b29b      	uxth	r3, r3
20003562:	4a22      	ldr	r2, [pc, #136]	; (200035ec <TI3_Config+0xcc>)
20003564:	4013      	ands	r3, r2
20003566:	b29a      	uxth	r2, r3
20003568:	68fb      	ldr	r3, [r7, #12]
2000356a:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
2000356c:	187b      	adds	r3, r7, r1
2000356e:	68fa      	ldr	r2, [r7, #12]
20003570:	8b92      	ldrh	r2, [r2, #28]
20003572:	801a      	strh	r2, [r3, #0]
  tmpccer = TIMx->CCER;
20003574:	193b      	adds	r3, r7, r4
20003576:	68fa      	ldr	r2, [r7, #12]
20003578:	8c12      	ldrh	r2, [r2, #32]
2000357a:	801a      	strh	r2, [r3, #0]
  tmp = (uint16_t)(TIM_ICPolarity << 8);
2000357c:	197b      	adds	r3, r7, r5
2000357e:	19ba      	adds	r2, r7, r6
20003580:	8812      	ldrh	r2, [r2, #0]
20003582:	0212      	lsls	r2, r2, #8
20003584:	801a      	strh	r2, [r3, #0]

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
20003586:	187b      	adds	r3, r7, r1
20003588:	0008      	movs	r0, r1
2000358a:	187a      	adds	r2, r7, r1
2000358c:	8812      	ldrh	r2, [r2, #0]
2000358e:	21f3      	movs	r1, #243	; 0xf3
20003590:	438a      	bics	r2, r1
20003592:	801a      	strh	r2, [r3, #0]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
20003594:	1dbb      	adds	r3, r7, #6
20003596:	881b      	ldrh	r3, [r3, #0]
20003598:	011b      	lsls	r3, r3, #4
2000359a:	b29a      	uxth	r2, r3
2000359c:	2308      	movs	r3, #8
2000359e:	18fb      	adds	r3, r7, r3
200035a0:	881b      	ldrh	r3, [r3, #0]
200035a2:	4313      	orrs	r3, r2
200035a4:	b299      	uxth	r1, r3
200035a6:	183b      	adds	r3, r7, r0
200035a8:	183a      	adds	r2, r7, r0
200035aa:	8812      	ldrh	r2, [r2, #0]
200035ac:	430a      	orrs	r2, r1
200035ae:	801a      	strh	r2, [r3, #0]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
200035b0:	193b      	adds	r3, r7, r4
200035b2:	193a      	adds	r2, r7, r4
200035b4:	8812      	ldrh	r2, [r2, #0]
200035b6:	490e      	ldr	r1, [pc, #56]	; (200035f0 <TI3_Config+0xd0>)
200035b8:	400a      	ands	r2, r1
200035ba:	801a      	strh	r2, [r3, #0]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
200035bc:	197a      	adds	r2, r7, r5
200035be:	193b      	adds	r3, r7, r4
200035c0:	8812      	ldrh	r2, [r2, #0]
200035c2:	881b      	ldrh	r3, [r3, #0]
200035c4:	4313      	orrs	r3, r2
200035c6:	b29a      	uxth	r2, r3
200035c8:	193b      	adds	r3, r7, r4
200035ca:	2180      	movs	r1, #128	; 0x80
200035cc:	0049      	lsls	r1, r1, #1
200035ce:	430a      	orrs	r2, r1
200035d0:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
200035d2:	68fb      	ldr	r3, [r7, #12]
200035d4:	183a      	adds	r2, r7, r0
200035d6:	8812      	ldrh	r2, [r2, #0]
200035d8:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer;
200035da:	68fb      	ldr	r3, [r7, #12]
200035dc:	193a      	adds	r2, r7, r4
200035de:	8812      	ldrh	r2, [r2, #0]
200035e0:	841a      	strh	r2, [r3, #32]
}
200035e2:	46c0      	nop			; (mov r8, r8)
200035e4:	46bd      	mov	sp, r7
200035e6:	b007      	add	sp, #28
200035e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
200035ea:	46c0      	nop			; (mov r8, r8)
200035ec:	fffffeff 			; <UNDEFINED> instruction: 0xfffffeff
200035f0:	fffff5ff 			; <UNDEFINED> instruction: 0xfffff5ff

200035f4 <TI4_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
200035f4:	b5f0      	push	{r4, r5, r6, r7, lr}
200035f6:	b087      	sub	sp, #28
200035f8:	af00      	add	r7, sp, #0
200035fa:	60f8      	str	r0, [r7, #12]
200035fc:	000c      	movs	r4, r1
200035fe:	0010      	movs	r0, r2
20003600:	0019      	movs	r1, r3
20003602:	260a      	movs	r6, #10
20003604:	19bb      	adds	r3, r7, r6
20003606:	1c22      	adds	r2, r4, #0
20003608:	801a      	strh	r2, [r3, #0]
2000360a:	2308      	movs	r3, #8
2000360c:	18fb      	adds	r3, r7, r3
2000360e:	1c02      	adds	r2, r0, #0
20003610:	801a      	strh	r2, [r3, #0]
20003612:	1dbb      	adds	r3, r7, #6
20003614:	1c0a      	adds	r2, r1, #0
20003616:	801a      	strh	r2, [r3, #0]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
20003618:	2116      	movs	r1, #22
2000361a:	187b      	adds	r3, r7, r1
2000361c:	2200      	movs	r2, #0
2000361e:	801a      	strh	r2, [r3, #0]
20003620:	2414      	movs	r4, #20
20003622:	193b      	adds	r3, r7, r4
20003624:	2200      	movs	r2, #0
20003626:	801a      	strh	r2, [r3, #0]
20003628:	2512      	movs	r5, #18
2000362a:	197b      	adds	r3, r7, r5
2000362c:	2200      	movs	r2, #0
2000362e:	801a      	strh	r2, [r3, #0]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
20003630:	68fb      	ldr	r3, [r7, #12]
20003632:	8c1b      	ldrh	r3, [r3, #32]
20003634:	b29b      	uxth	r3, r3
20003636:	4a24      	ldr	r2, [pc, #144]	; (200036c8 <TI4_Config+0xd4>)
20003638:	4013      	ands	r3, r2
2000363a:	b29a      	uxth	r2, r3
2000363c:	68fb      	ldr	r3, [r7, #12]
2000363e:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
20003640:	187b      	adds	r3, r7, r1
20003642:	68fa      	ldr	r2, [r7, #12]
20003644:	8b92      	ldrh	r2, [r2, #28]
20003646:	801a      	strh	r2, [r3, #0]
  tmpccer = TIMx->CCER;
20003648:	193b      	adds	r3, r7, r4
2000364a:	68fa      	ldr	r2, [r7, #12]
2000364c:	8c12      	ldrh	r2, [r2, #32]
2000364e:	801a      	strh	r2, [r3, #0]
  tmp = (uint16_t)(TIM_ICPolarity << 12);
20003650:	197b      	adds	r3, r7, r5
20003652:	19ba      	adds	r2, r7, r6
20003654:	8812      	ldrh	r2, [r2, #0]
20003656:	0312      	lsls	r2, r2, #12
20003658:	801a      	strh	r2, [r3, #0]

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
2000365a:	187b      	adds	r3, r7, r1
2000365c:	0008      	movs	r0, r1
2000365e:	187a      	adds	r2, r7, r1
20003660:	8812      	ldrh	r2, [r2, #0]
20003662:	491a      	ldr	r1, [pc, #104]	; (200036cc <TI4_Config+0xd8>)
20003664:	400a      	ands	r2, r1
20003666:	801a      	strh	r2, [r3, #0]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
20003668:	2308      	movs	r3, #8
2000366a:	18fb      	adds	r3, r7, r3
2000366c:	881b      	ldrh	r3, [r3, #0]
2000366e:	021b      	lsls	r3, r3, #8
20003670:	b299      	uxth	r1, r3
20003672:	183b      	adds	r3, r7, r0
20003674:	183a      	adds	r2, r7, r0
20003676:	8812      	ldrh	r2, [r2, #0]
20003678:	430a      	orrs	r2, r1
2000367a:	801a      	strh	r2, [r3, #0]
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
2000367c:	1dbb      	adds	r3, r7, #6
2000367e:	881b      	ldrh	r3, [r3, #0]
20003680:	031b      	lsls	r3, r3, #12
20003682:	b299      	uxth	r1, r3
20003684:	183b      	adds	r3, r7, r0
20003686:	183a      	adds	r2, r7, r0
20003688:	8812      	ldrh	r2, [r2, #0]
2000368a:	430a      	orrs	r2, r1
2000368c:	801a      	strh	r2, [r3, #0]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
2000368e:	193b      	adds	r3, r7, r4
20003690:	193a      	adds	r2, r7, r4
20003692:	8812      	ldrh	r2, [r2, #0]
20003694:	490e      	ldr	r1, [pc, #56]	; (200036d0 <TI4_Config+0xdc>)
20003696:	400a      	ands	r2, r1
20003698:	801a      	strh	r2, [r3, #0]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
2000369a:	197a      	adds	r2, r7, r5
2000369c:	193b      	adds	r3, r7, r4
2000369e:	8812      	ldrh	r2, [r2, #0]
200036a0:	881b      	ldrh	r3, [r3, #0]
200036a2:	4313      	orrs	r3, r2
200036a4:	b29a      	uxth	r2, r3
200036a6:	193b      	adds	r3, r7, r4
200036a8:	2180      	movs	r1, #128	; 0x80
200036aa:	0149      	lsls	r1, r1, #5
200036ac:	430a      	orrs	r2, r1
200036ae:	801a      	strh	r2, [r3, #0]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
200036b0:	68fb      	ldr	r3, [r7, #12]
200036b2:	183a      	adds	r2, r7, r0
200036b4:	8812      	ldrh	r2, [r2, #0]
200036b6:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
200036b8:	68fb      	ldr	r3, [r7, #12]
200036ba:	193a      	adds	r2, r7, r4
200036bc:	8812      	ldrh	r2, [r2, #0]
200036be:	841a      	strh	r2, [r3, #32]
}
200036c0:	46c0      	nop			; (mov r8, r8)
200036c2:	46bd      	mov	sp, r7
200036c4:	b007      	add	sp, #28
200036c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
200036c8:	ffffefff 			; <UNDEFINED> instruction: 0xffffefff
200036cc:	00000cff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
200036d0:	00005fff 	strdeq	r5, [r0], -pc	; <UNPREDICTABLE>

200036d4 <GPIO_DeInit>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices.  
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
200036d4:	b580      	push	{r7, lr}
200036d6:	b082      	sub	sp, #8
200036d8:	af00      	add	r7, sp, #0
200036da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
200036dc:	687b      	ldr	r3, [r7, #4]
200036de:	4a4e      	ldr	r2, [pc, #312]	; (20003818 <GPIO_DeInit+0x144>)
200036e0:	4293      	cmp	r3, r2
200036e2:	d108      	bne.n	200036f6 <GPIO_DeInit+0x22>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
200036e4:	2101      	movs	r1, #1
200036e6:	2001      	movs	r0, #1
200036e8:	f7fd fd00 	bl	200010ec <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
200036ec:	2100      	movs	r1, #0
200036ee:	2001      	movs	r0, #1
200036f0:	f7fd fcfc 	bl	200010ec <RCC_AHB1PeriphResetCmd>
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
200036f4:	e08c      	b.n	20003810 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOB)
200036f6:	687b      	ldr	r3, [r7, #4]
200036f8:	4a48      	ldr	r2, [pc, #288]	; (2000381c <GPIO_DeInit+0x148>)
200036fa:	4293      	cmp	r3, r2
200036fc:	d108      	bne.n	20003710 <GPIO_DeInit+0x3c>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
200036fe:	2101      	movs	r1, #1
20003700:	2002      	movs	r0, #2
20003702:	f7fd fcf3 	bl	200010ec <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
20003706:	2100      	movs	r1, #0
20003708:	2002      	movs	r0, #2
2000370a:	f7fd fcef 	bl	200010ec <RCC_AHB1PeriphResetCmd>
}
2000370e:	e07f      	b.n	20003810 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOC)
20003710:	687b      	ldr	r3, [r7, #4]
20003712:	4a43      	ldr	r2, [pc, #268]	; (20003820 <GPIO_DeInit+0x14c>)
20003714:	4293      	cmp	r3, r2
20003716:	d108      	bne.n	2000372a <GPIO_DeInit+0x56>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
20003718:	2101      	movs	r1, #1
2000371a:	2004      	movs	r0, #4
2000371c:	f7fd fce6 	bl	200010ec <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
20003720:	2100      	movs	r1, #0
20003722:	2004      	movs	r0, #4
20003724:	f7fd fce2 	bl	200010ec <RCC_AHB1PeriphResetCmd>
}
20003728:	e072      	b.n	20003810 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOD)
2000372a:	687b      	ldr	r3, [r7, #4]
2000372c:	4a3d      	ldr	r2, [pc, #244]	; (20003824 <GPIO_DeInit+0x150>)
2000372e:	4293      	cmp	r3, r2
20003730:	d108      	bne.n	20003744 <GPIO_DeInit+0x70>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
20003732:	2101      	movs	r1, #1
20003734:	2008      	movs	r0, #8
20003736:	f7fd fcd9 	bl	200010ec <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
2000373a:	2100      	movs	r1, #0
2000373c:	2008      	movs	r0, #8
2000373e:	f7fd fcd5 	bl	200010ec <RCC_AHB1PeriphResetCmd>
}
20003742:	e065      	b.n	20003810 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOE)
20003744:	687b      	ldr	r3, [r7, #4]
20003746:	4a38      	ldr	r2, [pc, #224]	; (20003828 <GPIO_DeInit+0x154>)
20003748:	4293      	cmp	r3, r2
2000374a:	d108      	bne.n	2000375e <GPIO_DeInit+0x8a>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
2000374c:	2101      	movs	r1, #1
2000374e:	2010      	movs	r0, #16
20003750:	f7fd fccc 	bl	200010ec <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
20003754:	2100      	movs	r1, #0
20003756:	2010      	movs	r0, #16
20003758:	f7fd fcc8 	bl	200010ec <RCC_AHB1PeriphResetCmd>
}
2000375c:	e058      	b.n	20003810 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOF)
2000375e:	687b      	ldr	r3, [r7, #4]
20003760:	4a32      	ldr	r2, [pc, #200]	; (2000382c <GPIO_DeInit+0x158>)
20003762:	4293      	cmp	r3, r2
20003764:	d108      	bne.n	20003778 <GPIO_DeInit+0xa4>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
20003766:	2101      	movs	r1, #1
20003768:	2020      	movs	r0, #32
2000376a:	f7fd fcbf 	bl	200010ec <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
2000376e:	2100      	movs	r1, #0
20003770:	2020      	movs	r0, #32
20003772:	f7fd fcbb 	bl	200010ec <RCC_AHB1PeriphResetCmd>
}
20003776:	e04b      	b.n	20003810 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOG)
20003778:	687b      	ldr	r3, [r7, #4]
2000377a:	4a2d      	ldr	r2, [pc, #180]	; (20003830 <GPIO_DeInit+0x15c>)
2000377c:	4293      	cmp	r3, r2
2000377e:	d108      	bne.n	20003792 <GPIO_DeInit+0xbe>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
20003780:	2101      	movs	r1, #1
20003782:	2040      	movs	r0, #64	; 0x40
20003784:	f7fd fcb2 	bl	200010ec <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
20003788:	2100      	movs	r1, #0
2000378a:	2040      	movs	r0, #64	; 0x40
2000378c:	f7fd fcae 	bl	200010ec <RCC_AHB1PeriphResetCmd>
}
20003790:	e03e      	b.n	20003810 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOH)
20003792:	687b      	ldr	r3, [r7, #4]
20003794:	4a27      	ldr	r2, [pc, #156]	; (20003834 <GPIO_DeInit+0x160>)
20003796:	4293      	cmp	r3, r2
20003798:	d108      	bne.n	200037ac <GPIO_DeInit+0xd8>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
2000379a:	2101      	movs	r1, #1
2000379c:	2080      	movs	r0, #128	; 0x80
2000379e:	f7fd fca5 	bl	200010ec <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
200037a2:	2100      	movs	r1, #0
200037a4:	2080      	movs	r0, #128	; 0x80
200037a6:	f7fd fca1 	bl	200010ec <RCC_AHB1PeriphResetCmd>
}
200037aa:	e031      	b.n	20003810 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOI)
200037ac:	687b      	ldr	r3, [r7, #4]
200037ae:	4a22      	ldr	r2, [pc, #136]	; (20003838 <GPIO_DeInit+0x164>)
200037b0:	4293      	cmp	r3, r2
200037b2:	d10c      	bne.n	200037ce <GPIO_DeInit+0xfa>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
200037b4:	2380      	movs	r3, #128	; 0x80
200037b6:	005b      	lsls	r3, r3, #1
200037b8:	2101      	movs	r1, #1
200037ba:	0018      	movs	r0, r3
200037bc:	f7fd fc96 	bl	200010ec <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
200037c0:	2380      	movs	r3, #128	; 0x80
200037c2:	005b      	lsls	r3, r3, #1
200037c4:	2100      	movs	r1, #0
200037c6:	0018      	movs	r0, r3
200037c8:	f7fd fc90 	bl	200010ec <RCC_AHB1PeriphResetCmd>
}
200037cc:	e020      	b.n	20003810 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOJ)
200037ce:	687b      	ldr	r3, [r7, #4]
200037d0:	4a1a      	ldr	r2, [pc, #104]	; (2000383c <GPIO_DeInit+0x168>)
200037d2:	4293      	cmp	r3, r2
200037d4:	d10c      	bne.n	200037f0 <GPIO_DeInit+0x11c>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, ENABLE);
200037d6:	2380      	movs	r3, #128	; 0x80
200037d8:	009b      	lsls	r3, r3, #2
200037da:	2101      	movs	r1, #1
200037dc:	0018      	movs	r0, r3
200037de:	f7fd fc85 	bl	200010ec <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, DISABLE);
200037e2:	2380      	movs	r3, #128	; 0x80
200037e4:	009b      	lsls	r3, r3, #2
200037e6:	2100      	movs	r1, #0
200037e8:	0018      	movs	r0, r3
200037ea:	f7fd fc7f 	bl	200010ec <RCC_AHB1PeriphResetCmd>
}
200037ee:	e00f      	b.n	20003810 <GPIO_DeInit+0x13c>
    if (GPIOx == GPIOK)
200037f0:	687b      	ldr	r3, [r7, #4]
200037f2:	4a13      	ldr	r2, [pc, #76]	; (20003840 <GPIO_DeInit+0x16c>)
200037f4:	4293      	cmp	r3, r2
200037f6:	d10b      	bne.n	20003810 <GPIO_DeInit+0x13c>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
200037f8:	2380      	movs	r3, #128	; 0x80
200037fa:	00db      	lsls	r3, r3, #3
200037fc:	2101      	movs	r1, #1
200037fe:	0018      	movs	r0, r3
20003800:	f7fd fc74 	bl	200010ec <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
20003804:	2380      	movs	r3, #128	; 0x80
20003806:	00db      	lsls	r3, r3, #3
20003808:	2100      	movs	r1, #0
2000380a:	0018      	movs	r0, r3
2000380c:	f7fd fc6e 	bl	200010ec <RCC_AHB1PeriphResetCmd>
}
20003810:	46c0      	nop			; (mov r8, r8)
20003812:	46bd      	mov	sp, r7
20003814:	b002      	add	sp, #8
20003816:	bd80      	pop	{r7, pc}
20003818:	40020000 	andmi	r0, r2, r0
2000381c:	40020400 	andmi	r0, r2, r0, lsl #8
20003820:	40020800 	andmi	r0, r2, r0, lsl #16
20003824:	40020c00 	andmi	r0, r2, r0, lsl #24
20003828:	40021000 	andmi	r1, r2, r0
2000382c:	40021400 	andmi	r1, r2, r0, lsl #8
20003830:	40021800 	andmi	r1, r2, r0, lsl #16
20003834:	40021c00 	andmi	r1, r2, r0, lsl #24
20003838:	40022000 	andmi	r2, r2, r0
2000383c:	40022400 	andmi	r2, r2, r0, lsl #8
20003840:	40022800 	andmi	r2, r2, r0, lsl #16

20003844 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
20003844:	b580      	push	{r7, lr}
20003846:	b086      	sub	sp, #24
20003848:	af00      	add	r7, sp, #0
2000384a:	6078      	str	r0, [r7, #4]
2000384c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
2000384e:	2300      	movs	r3, #0
20003850:	617b      	str	r3, [r7, #20]
20003852:	2300      	movs	r3, #0
20003854:	613b      	str	r3, [r7, #16]
20003856:	2300      	movs	r3, #0
20003858:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
2000385a:	2300      	movs	r3, #0
2000385c:	617b      	str	r3, [r7, #20]
2000385e:	e076      	b.n	2000394e <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
20003860:	2201      	movs	r2, #1
20003862:	697b      	ldr	r3, [r7, #20]
20003864:	409a      	lsls	r2, r3
20003866:	0013      	movs	r3, r2
20003868:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
2000386a:	683b      	ldr	r3, [r7, #0]
2000386c:	681a      	ldr	r2, [r3, #0]
2000386e:	693b      	ldr	r3, [r7, #16]
20003870:	4013      	ands	r3, r2
20003872:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
20003874:	68fa      	ldr	r2, [r7, #12]
20003876:	693b      	ldr	r3, [r7, #16]
20003878:	429a      	cmp	r2, r3
2000387a:	d165      	bne.n	20003948 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
2000387c:	687b      	ldr	r3, [r7, #4]
2000387e:	681b      	ldr	r3, [r3, #0]
20003880:	697a      	ldr	r2, [r7, #20]
20003882:	0052      	lsls	r2, r2, #1
20003884:	2103      	movs	r1, #3
20003886:	4091      	lsls	r1, r2
20003888:	000a      	movs	r2, r1
2000388a:	43d2      	mvns	r2, r2
2000388c:	401a      	ands	r2, r3
2000388e:	687b      	ldr	r3, [r7, #4]
20003890:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
20003892:	687b      	ldr	r3, [r7, #4]
20003894:	681a      	ldr	r2, [r3, #0]
20003896:	683b      	ldr	r3, [r7, #0]
20003898:	791b      	ldrb	r3, [r3, #4]
2000389a:	0019      	movs	r1, r3
2000389c:	697b      	ldr	r3, [r7, #20]
2000389e:	005b      	lsls	r3, r3, #1
200038a0:	4099      	lsls	r1, r3
200038a2:	000b      	movs	r3, r1
200038a4:	431a      	orrs	r2, r3
200038a6:	687b      	ldr	r3, [r7, #4]
200038a8:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
200038aa:	683b      	ldr	r3, [r7, #0]
200038ac:	791b      	ldrb	r3, [r3, #4]
200038ae:	2b01      	cmp	r3, #1
200038b0:	d003      	beq.n	200038ba <GPIO_Init+0x76>
200038b2:	683b      	ldr	r3, [r7, #0]
200038b4:	791b      	ldrb	r3, [r3, #4]
200038b6:	2b02      	cmp	r3, #2
200038b8:	d12e      	bne.n	20003918 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
200038ba:	687b      	ldr	r3, [r7, #4]
200038bc:	689b      	ldr	r3, [r3, #8]
200038be:	697a      	ldr	r2, [r7, #20]
200038c0:	0052      	lsls	r2, r2, #1
200038c2:	2103      	movs	r1, #3
200038c4:	4091      	lsls	r1, r2
200038c6:	000a      	movs	r2, r1
200038c8:	43d2      	mvns	r2, r2
200038ca:	401a      	ands	r2, r3
200038cc:	687b      	ldr	r3, [r7, #4]
200038ce:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
200038d0:	687b      	ldr	r3, [r7, #4]
200038d2:	689a      	ldr	r2, [r3, #8]
200038d4:	683b      	ldr	r3, [r7, #0]
200038d6:	795b      	ldrb	r3, [r3, #5]
200038d8:	0019      	movs	r1, r3
200038da:	697b      	ldr	r3, [r7, #20]
200038dc:	005b      	lsls	r3, r3, #1
200038de:	4099      	lsls	r1, r3
200038e0:	000b      	movs	r3, r1
200038e2:	431a      	orrs	r2, r3
200038e4:	687b      	ldr	r3, [r7, #4]
200038e6:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
200038e8:	687b      	ldr	r3, [r7, #4]
200038ea:	685b      	ldr	r3, [r3, #4]
200038ec:	697a      	ldr	r2, [r7, #20]
200038ee:	b292      	uxth	r2, r2
200038f0:	0011      	movs	r1, r2
200038f2:	2201      	movs	r2, #1
200038f4:	408a      	lsls	r2, r1
200038f6:	43d2      	mvns	r2, r2
200038f8:	401a      	ands	r2, r3
200038fa:	687b      	ldr	r3, [r7, #4]
200038fc:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
200038fe:	687b      	ldr	r3, [r7, #4]
20003900:	685b      	ldr	r3, [r3, #4]
20003902:	683a      	ldr	r2, [r7, #0]
20003904:	7992      	ldrb	r2, [r2, #6]
20003906:	0011      	movs	r1, r2
20003908:	697a      	ldr	r2, [r7, #20]
2000390a:	b292      	uxth	r2, r2
2000390c:	4091      	lsls	r1, r2
2000390e:	000a      	movs	r2, r1
20003910:	b292      	uxth	r2, r2
20003912:	431a      	orrs	r2, r3
20003914:	687b      	ldr	r3, [r7, #4]
20003916:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
20003918:	687b      	ldr	r3, [r7, #4]
2000391a:	68db      	ldr	r3, [r3, #12]
2000391c:	697a      	ldr	r2, [r7, #20]
2000391e:	b292      	uxth	r2, r2
20003920:	0052      	lsls	r2, r2, #1
20003922:	2103      	movs	r1, #3
20003924:	4091      	lsls	r1, r2
20003926:	000a      	movs	r2, r1
20003928:	43d2      	mvns	r2, r2
2000392a:	401a      	ands	r2, r3
2000392c:	687b      	ldr	r3, [r7, #4]
2000392e:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
20003930:	687b      	ldr	r3, [r7, #4]
20003932:	68da      	ldr	r2, [r3, #12]
20003934:	683b      	ldr	r3, [r7, #0]
20003936:	79db      	ldrb	r3, [r3, #7]
20003938:	0019      	movs	r1, r3
2000393a:	697b      	ldr	r3, [r7, #20]
2000393c:	005b      	lsls	r3, r3, #1
2000393e:	4099      	lsls	r1, r3
20003940:	000b      	movs	r3, r1
20003942:	431a      	orrs	r2, r3
20003944:	687b      	ldr	r3, [r7, #4]
20003946:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
20003948:	697b      	ldr	r3, [r7, #20]
2000394a:	3301      	adds	r3, #1
2000394c:	617b      	str	r3, [r7, #20]
2000394e:	697b      	ldr	r3, [r7, #20]
20003950:	2b0f      	cmp	r3, #15
20003952:	d985      	bls.n	20003860 <GPIO_Init+0x1c>
    }
  }
}
20003954:	46c0      	nop			; (mov r8, r8)
20003956:	46c0      	nop			; (mov r8, r8)
20003958:	46bd      	mov	sp, r7
2000395a:	b006      	add	sp, #24
2000395c:	bd80      	pop	{r7, pc}

2000395e <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
2000395e:	b580      	push	{r7, lr}
20003960:	b082      	sub	sp, #8
20003962:	af00      	add	r7, sp, #0
20003964:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
20003966:	687b      	ldr	r3, [r7, #4]
20003968:	4a08      	ldr	r2, [pc, #32]	; (2000398c <GPIO_StructInit+0x2e>)
2000396a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
2000396c:	687b      	ldr	r3, [r7, #4]
2000396e:	2200      	movs	r2, #0
20003970:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
20003972:	687b      	ldr	r3, [r7, #4]
20003974:	2200      	movs	r2, #0
20003976:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
20003978:	687b      	ldr	r3, [r7, #4]
2000397a:	2200      	movs	r2, #0
2000397c:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
2000397e:	687b      	ldr	r3, [r7, #4]
20003980:	2200      	movs	r2, #0
20003982:	71da      	strb	r2, [r3, #7]
}
20003984:	46c0      	nop			; (mov r8, r8)
20003986:	46bd      	mov	sp, r7
20003988:	b002      	add	sp, #8
2000398a:	bd80      	pop	{r7, pc}
2000398c:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>

20003990 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20003990:	b580      	push	{r7, lr}
20003992:	b084      	sub	sp, #16
20003994:	af00      	add	r7, sp, #0
20003996:	6078      	str	r0, [r7, #4]
20003998:	000a      	movs	r2, r1
2000399a:	1cbb      	adds	r3, r7, #2
2000399c:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmp = 0x00010000;
2000399e:	2380      	movs	r3, #128	; 0x80
200039a0:	025b      	lsls	r3, r3, #9
200039a2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
200039a4:	1cbb      	adds	r3, r7, #2
200039a6:	881a      	ldrh	r2, [r3, #0]
200039a8:	68fb      	ldr	r3, [r7, #12]
200039aa:	4313      	orrs	r3, r2
200039ac:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
200039ae:	68fa      	ldr	r2, [r7, #12]
200039b0:	687b      	ldr	r3, [r7, #4]
200039b2:	61da      	str	r2, [r3, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
200039b4:	1cbb      	adds	r3, r7, #2
200039b6:	881a      	ldrh	r2, [r3, #0]
200039b8:	687b      	ldr	r3, [r7, #4]
200039ba:	61da      	str	r2, [r3, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
200039bc:	68fa      	ldr	r2, [r7, #12]
200039be:	687b      	ldr	r3, [r7, #4]
200039c0:	61da      	str	r2, [r3, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
200039c2:	687b      	ldr	r3, [r7, #4]
200039c4:	69db      	ldr	r3, [r3, #28]
200039c6:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
200039c8:	687b      	ldr	r3, [r7, #4]
200039ca:	69db      	ldr	r3, [r3, #28]
200039cc:	60fb      	str	r3, [r7, #12]
}
200039ce:	46c0      	nop			; (mov r8, r8)
200039d0:	46bd      	mov	sp, r7
200039d2:	b004      	add	sp, #16
200039d4:	bd80      	pop	{r7, pc}

200039d6 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
200039d6:	b580      	push	{r7, lr}
200039d8:	b084      	sub	sp, #16
200039da:	af00      	add	r7, sp, #0
200039dc:	6078      	str	r0, [r7, #4]
200039de:	000a      	movs	r2, r1
200039e0:	1cbb      	adds	r3, r7, #2
200039e2:	801a      	strh	r2, [r3, #0]
  uint8_t bitstatus = 0x00;
200039e4:	210f      	movs	r1, #15
200039e6:	187b      	adds	r3, r7, r1
200039e8:	2200      	movs	r2, #0
200039ea:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
200039ec:	687b      	ldr	r3, [r7, #4]
200039ee:	691b      	ldr	r3, [r3, #16]
200039f0:	1cba      	adds	r2, r7, #2
200039f2:	8812      	ldrh	r2, [r2, #0]
200039f4:	4013      	ands	r3, r2
200039f6:	d003      	beq.n	20003a00 <GPIO_ReadInputDataBit+0x2a>
  {
    bitstatus = (uint8_t)Bit_SET;
200039f8:	187b      	adds	r3, r7, r1
200039fa:	2201      	movs	r2, #1
200039fc:	701a      	strb	r2, [r3, #0]
200039fe:	e003      	b.n	20003a08 <GPIO_ReadInputDataBit+0x32>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
20003a00:	230f      	movs	r3, #15
20003a02:	18fb      	adds	r3, r7, r3
20003a04:	2200      	movs	r2, #0
20003a06:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
20003a08:	230f      	movs	r3, #15
20003a0a:	18fb      	adds	r3, r7, r3
20003a0c:	781b      	ldrb	r3, [r3, #0]
}
20003a0e:	0018      	movs	r0, r3
20003a10:	46bd      	mov	sp, r7
20003a12:	b004      	add	sp, #16
20003a14:	bd80      	pop	{r7, pc}

20003a16 <GPIO_ReadInputData>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
20003a16:	b580      	push	{r7, lr}
20003a18:	b082      	sub	sp, #8
20003a1a:	af00      	add	r7, sp, #0
20003a1c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
20003a1e:	687b      	ldr	r3, [r7, #4]
20003a20:	691b      	ldr	r3, [r3, #16]
20003a22:	b29b      	uxth	r3, r3
}
20003a24:	0018      	movs	r0, r3
20003a26:	46bd      	mov	sp, r7
20003a28:	b002      	add	sp, #8
20003a2a:	bd80      	pop	{r7, pc}

20003a2c <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *          This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20003a2c:	b580      	push	{r7, lr}
20003a2e:	b084      	sub	sp, #16
20003a30:	af00      	add	r7, sp, #0
20003a32:	6078      	str	r0, [r7, #4]
20003a34:	000a      	movs	r2, r1
20003a36:	1cbb      	adds	r3, r7, #2
20003a38:	801a      	strh	r2, [r3, #0]
  uint8_t bitstatus = 0x00;
20003a3a:	210f      	movs	r1, #15
20003a3c:	187b      	adds	r3, r7, r1
20003a3e:	2200      	movs	r2, #0
20003a40:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if (((GPIOx->ODR) & GPIO_Pin) != (uint32_t)Bit_RESET)
20003a42:	687b      	ldr	r3, [r7, #4]
20003a44:	695b      	ldr	r3, [r3, #20]
20003a46:	1cba      	adds	r2, r7, #2
20003a48:	8812      	ldrh	r2, [r2, #0]
20003a4a:	4013      	ands	r3, r2
20003a4c:	d003      	beq.n	20003a56 <GPIO_ReadOutputDataBit+0x2a>
  {
    bitstatus = (uint8_t)Bit_SET;
20003a4e:	187b      	adds	r3, r7, r1
20003a50:	2201      	movs	r2, #1
20003a52:	701a      	strb	r2, [r3, #0]
20003a54:	e003      	b.n	20003a5e <GPIO_ReadOutputDataBit+0x32>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
20003a56:	230f      	movs	r3, #15
20003a58:	18fb      	adds	r3, r7, r3
20003a5a:	2200      	movs	r2, #0
20003a5c:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
20003a5e:	230f      	movs	r3, #15
20003a60:	18fb      	adds	r3, r7, r3
20003a62:	781b      	ldrb	r3, [r3, #0]
}
20003a64:	0018      	movs	r0, r3
20003a66:	46bd      	mov	sp, r7
20003a68:	b004      	add	sp, #16
20003a6a:	bd80      	pop	{r7, pc}

20003a6c <GPIO_ReadOutputData>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
20003a6c:	b580      	push	{r7, lr}
20003a6e:	b082      	sub	sp, #8
20003a70:	af00      	add	r7, sp, #0
20003a72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
20003a74:	687b      	ldr	r3, [r7, #4]
20003a76:	695b      	ldr	r3, [r3, #20]
20003a78:	b29b      	uxth	r3, r3
}
20003a7a:	0018      	movs	r0, r3
20003a7c:	46bd      	mov	sp, r7
20003a7e:	b002      	add	sp, #8
20003a80:	bd80      	pop	{r7, pc}

20003a82 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20003a82:	b580      	push	{r7, lr}
20003a84:	b082      	sub	sp, #8
20003a86:	af00      	add	r7, sp, #0
20003a88:	6078      	str	r0, [r7, #4]
20003a8a:	000a      	movs	r2, r1
20003a8c:	1cbb      	adds	r3, r7, #2
20003a8e:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
20003a90:	687b      	ldr	r3, [r7, #4]
20003a92:	1cba      	adds	r2, r7, #2
20003a94:	8812      	ldrh	r2, [r2, #0]
20003a96:	831a      	strh	r2, [r3, #24]
}
20003a98:	46c0      	nop			; (mov r8, r8)
20003a9a:	46bd      	mov	sp, r7
20003a9c:	b002      	add	sp, #8
20003a9e:	bd80      	pop	{r7, pc}

20003aa0 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20003aa0:	b580      	push	{r7, lr}
20003aa2:	b082      	sub	sp, #8
20003aa4:	af00      	add	r7, sp, #0
20003aa6:	6078      	str	r0, [r7, #4]
20003aa8:	000a      	movs	r2, r1
20003aaa:	1cbb      	adds	r3, r7, #2
20003aac:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
20003aae:	687b      	ldr	r3, [r7, #4]
20003ab0:	1cba      	adds	r2, r7, #2
20003ab2:	8812      	ldrh	r2, [r2, #0]
20003ab4:	835a      	strh	r2, [r3, #26]
}
20003ab6:	46c0      	nop			; (mov r8, r8)
20003ab8:	46bd      	mov	sp, r7
20003aba:	b002      	add	sp, #8
20003abc:	bd80      	pop	{r7, pc}

20003abe <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
20003abe:	b580      	push	{r7, lr}
20003ac0:	b082      	sub	sp, #8
20003ac2:	af00      	add	r7, sp, #0
20003ac4:	6078      	str	r0, [r7, #4]
20003ac6:	0008      	movs	r0, r1
20003ac8:	0011      	movs	r1, r2
20003aca:	1cbb      	adds	r3, r7, #2
20003acc:	1c02      	adds	r2, r0, #0
20003ace:	801a      	strh	r2, [r3, #0]
20003ad0:	1c7b      	adds	r3, r7, #1
20003ad2:	1c0a      	adds	r2, r1, #0
20003ad4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
20003ad6:	1c7b      	adds	r3, r7, #1
20003ad8:	781b      	ldrb	r3, [r3, #0]
20003ada:	2b00      	cmp	r3, #0
20003adc:	d004      	beq.n	20003ae8 <GPIO_WriteBit+0x2a>
  {
    GPIOx->BSRRL = GPIO_Pin;
20003ade:	687b      	ldr	r3, [r7, #4]
20003ae0:	1cba      	adds	r2, r7, #2
20003ae2:	8812      	ldrh	r2, [r2, #0]
20003ae4:	831a      	strh	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
  }
}
20003ae6:	e003      	b.n	20003af0 <GPIO_WriteBit+0x32>
    GPIOx->BSRRH = GPIO_Pin ;
20003ae8:	687b      	ldr	r3, [r7, #4]
20003aea:	1cba      	adds	r2, r7, #2
20003aec:	8812      	ldrh	r2, [r2, #0]
20003aee:	835a      	strh	r2, [r3, #26]
}
20003af0:	46c0      	nop			; (mov r8, r8)
20003af2:	46bd      	mov	sp, r7
20003af4:	b002      	add	sp, #8
20003af6:	bd80      	pop	{r7, pc}

20003af8 <GPIO_Write>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
20003af8:	b580      	push	{r7, lr}
20003afa:	b082      	sub	sp, #8
20003afc:	af00      	add	r7, sp, #0
20003afe:	6078      	str	r0, [r7, #4]
20003b00:	000a      	movs	r2, r1
20003b02:	1cbb      	adds	r3, r7, #2
20003b04:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
20003b06:	1cbb      	adds	r3, r7, #2
20003b08:	881a      	ldrh	r2, [r3, #0]
20003b0a:	687b      	ldr	r3, [r7, #4]
20003b0c:	615a      	str	r2, [r3, #20]
}
20003b0e:	46c0      	nop			; (mov r8, r8)
20003b10:	46bd      	mov	sp, r7
20003b12:	b002      	add	sp, #8
20003b14:	bd80      	pop	{r7, pc}

20003b16 <GPIO_ToggleBits>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20003b16:	b580      	push	{r7, lr}
20003b18:	b082      	sub	sp, #8
20003b1a:	af00      	add	r7, sp, #0
20003b1c:	6078      	str	r0, [r7, #4]
20003b1e:	000a      	movs	r2, r1
20003b20:	1cbb      	adds	r3, r7, #2
20003b22:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
20003b24:	687b      	ldr	r3, [r7, #4]
20003b26:	695a      	ldr	r2, [r3, #20]
20003b28:	1cbb      	adds	r3, r7, #2
20003b2a:	881b      	ldrh	r3, [r3, #0]
20003b2c:	405a      	eors	r2, r3
20003b2e:	687b      	ldr	r3, [r7, #4]
20003b30:	615a      	str	r2, [r3, #20]
}
20003b32:	46c0      	nop			; (mov r8, r8)
20003b34:	46bd      	mov	sp, r7
20003b36:	b002      	add	sp, #8
20003b38:	bd80      	pop	{r7, pc}

20003b3a <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
20003b3a:	b580      	push	{r7, lr}
20003b3c:	b084      	sub	sp, #16
20003b3e:	af00      	add	r7, sp, #0
20003b40:	6078      	str	r0, [r7, #4]
20003b42:	0008      	movs	r0, r1
20003b44:	0011      	movs	r1, r2
20003b46:	1cbb      	adds	r3, r7, #2
20003b48:	1c02      	adds	r2, r0, #0
20003b4a:	801a      	strh	r2, [r3, #0]
20003b4c:	1c7b      	adds	r3, r7, #1
20003b4e:	1c0a      	adds	r2, r1, #0
20003b50:	701a      	strb	r2, [r3, #0]
  uint32_t temp = 0x00;
20003b52:	2300      	movs	r3, #0
20003b54:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
20003b56:	2300      	movs	r3, #0
20003b58:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
20003b5a:	1c7b      	adds	r3, r7, #1
20003b5c:	781a      	ldrb	r2, [r3, #0]
20003b5e:	1cbb      	adds	r3, r7, #2
20003b60:	881b      	ldrh	r3, [r3, #0]
20003b62:	2107      	movs	r1, #7
20003b64:	400b      	ands	r3, r1
20003b66:	009b      	lsls	r3, r3, #2
20003b68:	409a      	lsls	r2, r3
20003b6a:	0013      	movs	r3, r2
20003b6c:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
20003b6e:	1cbb      	adds	r3, r7, #2
20003b70:	881b      	ldrh	r3, [r3, #0]
20003b72:	08db      	lsrs	r3, r3, #3
20003b74:	b29b      	uxth	r3, r3
20003b76:	001a      	movs	r2, r3
20003b78:	687b      	ldr	r3, [r7, #4]
20003b7a:	3208      	adds	r2, #8
20003b7c:	0092      	lsls	r2, r2, #2
20003b7e:	58d3      	ldr	r3, [r2, r3]
20003b80:	1cba      	adds	r2, r7, #2
20003b82:	8812      	ldrh	r2, [r2, #0]
20003b84:	2107      	movs	r1, #7
20003b86:	400a      	ands	r2, r1
20003b88:	0092      	lsls	r2, r2, #2
20003b8a:	210f      	movs	r1, #15
20003b8c:	4091      	lsls	r1, r2
20003b8e:	000a      	movs	r2, r1
20003b90:	43d2      	mvns	r2, r2
20003b92:	1cb9      	adds	r1, r7, #2
20003b94:	8809      	ldrh	r1, [r1, #0]
20003b96:	08c9      	lsrs	r1, r1, #3
20003b98:	b289      	uxth	r1, r1
20003b9a:	0008      	movs	r0, r1
20003b9c:	401a      	ands	r2, r3
20003b9e:	0011      	movs	r1, r2
20003ba0:	687b      	ldr	r3, [r7, #4]
20003ba2:	0002      	movs	r2, r0
20003ba4:	3208      	adds	r2, #8
20003ba6:	0092      	lsls	r2, r2, #2
20003ba8:	50d1      	str	r1, [r2, r3]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
20003baa:	1cbb      	adds	r3, r7, #2
20003bac:	881b      	ldrh	r3, [r3, #0]
20003bae:	08db      	lsrs	r3, r3, #3
20003bb0:	b29b      	uxth	r3, r3
20003bb2:	001a      	movs	r2, r3
20003bb4:	687b      	ldr	r3, [r7, #4]
20003bb6:	3208      	adds	r2, #8
20003bb8:	0092      	lsls	r2, r2, #2
20003bba:	58d3      	ldr	r3, [r2, r3]
20003bbc:	68fa      	ldr	r2, [r7, #12]
20003bbe:	4313      	orrs	r3, r2
20003bc0:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
20003bc2:	1cbb      	adds	r3, r7, #2
20003bc4:	881b      	ldrh	r3, [r3, #0]
20003bc6:	08db      	lsrs	r3, r3, #3
20003bc8:	b29b      	uxth	r3, r3
20003bca:	001a      	movs	r2, r3
20003bcc:	687b      	ldr	r3, [r7, #4]
20003bce:	3208      	adds	r2, #8
20003bd0:	0092      	lsls	r2, r2, #2
20003bd2:	68b9      	ldr	r1, [r7, #8]
20003bd4:	50d1      	str	r1, [r2, r3]
}
20003bd6:	46c0      	nop			; (mov r8, r8)
20003bd8:	46bd      	mov	sp, r7
20003bda:	b004      	add	sp, #16
20003bdc:	bd80      	pop	{r7, pc}
20003bde:	46c0      	nop			; (mov r8, r8)

20003be0 <SYSCFG_DeInit>:
  *   registers to their default reset values.
  * @param  None
  * @retval None
  */
void SYSCFG_DeInit(void)
{
20003be0:	b580      	push	{r7, lr}
20003be2:	af00      	add	r7, sp, #0
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, ENABLE);
20003be4:	2380      	movs	r3, #128	; 0x80
20003be6:	01db      	lsls	r3, r3, #7
20003be8:	2101      	movs	r1, #1
20003bea:	0018      	movs	r0, r3
20003bec:	f7fd fafe 	bl	200011ec <RCC_APB2PeriphResetCmd>
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, DISABLE);
20003bf0:	2380      	movs	r3, #128	; 0x80
20003bf2:	01db      	lsls	r3, r3, #7
20003bf4:	2100      	movs	r1, #0
20003bf6:	0018      	movs	r0, r3
20003bf8:	f7fd faf8 	bl	200011ec <RCC_APB2PeriphResetCmd>
}
20003bfc:	46c0      	nop			; (mov r8, r8)
20003bfe:	46bd      	mov	sp, r7
20003c00:	bd80      	pop	{r7, pc}

20003c02 <SYSCFG_MemoryRemapConfig>:
  *            @arg SYSCFG_MemoryRemap_SRAM:        Embedded SRAM (112kB) mapped at 0x00000000
  *            @arg SYSCFG_MemoryRemap_SDRAM:       FMC (External SDRAM)  mapped at 0x00000000 for STM32F42xxx/43xxx devices.            
  * @retval None
  */
void SYSCFG_MemoryRemapConfig(uint8_t SYSCFG_MemoryRemap)
{
20003c02:	b580      	push	{r7, lr}
20003c04:	b082      	sub	sp, #8
20003c06:	af00      	add	r7, sp, #0
20003c08:	0002      	movs	r2, r0
20003c0a:	1dfb      	adds	r3, r7, #7
20003c0c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_SYSCFG_MEMORY_REMAP_CONFING(SYSCFG_MemoryRemap));

  SYSCFG->MEMRMP = SYSCFG_MemoryRemap;
20003c0e:	4b04      	ldr	r3, [pc, #16]	; (20003c20 <SYSCFG_MemoryRemapConfig+0x1e>)
20003c10:	1dfa      	adds	r2, r7, #7
20003c12:	7812      	ldrb	r2, [r2, #0]
20003c14:	601a      	str	r2, [r3, #0]
}
20003c16:	46c0      	nop			; (mov r8, r8)
20003c18:	46bd      	mov	sp, r7
20003c1a:	b002      	add	sp, #8
20003c1c:	bd80      	pop	{r7, pc}
20003c1e:	46c0      	nop			; (mov r8, r8)
20003c20:	40013800 	andmi	r3, r1, r0, lsl #16

20003c24 <SYSCFG_MemorySwappingBank>:
  *            @arg DISABLE:(the default state) Flash Bank1 mapped at 0x08000000 (and aliased @0x0000 0000) 
                            and Flash Bank2 mapped at 0x08100000 (and aliased at 0x00100000)  
  * @retval None
  */
void SYSCFG_MemorySwappingBank(FunctionalState NewState)
{
20003c24:	b580      	push	{r7, lr}
20003c26:	b082      	sub	sp, #8
20003c28:	af00      	add	r7, sp, #0
20003c2a:	0002      	movs	r2, r0
20003c2c:	1dfb      	adds	r3, r7, #7
20003c2e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) UFB_MODE_BB = (uint32_t)NewState;
20003c30:	4b03      	ldr	r3, [pc, #12]	; (20003c40 <SYSCFG_MemorySwappingBank+0x1c>)
20003c32:	1dfa      	adds	r2, r7, #7
20003c34:	7812      	ldrb	r2, [r2, #0]
20003c36:	601a      	str	r2, [r3, #0]
}
20003c38:	46c0      	nop			; (mov r8, r8)
20003c3a:	46bd      	mov	sp, r7
20003c3c:	b002      	add	sp, #8
20003c3e:	bd80      	pop	{r7, pc}
20003c40:	42270020 	eormi	r0, r7, #32

20003c44 <SYSCFG_EXTILineConfig>:
  *           be (0..7) for STM32F42xxx/43xxx devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
20003c44:	b580      	push	{r7, lr}
20003c46:	b084      	sub	sp, #16
20003c48:	af00      	add	r7, sp, #0
20003c4a:	0002      	movs	r2, r0
20003c4c:	1dfb      	adds	r3, r7, #7
20003c4e:	701a      	strb	r2, [r3, #0]
20003c50:	1dbb      	adds	r3, r7, #6
20003c52:	1c0a      	adds	r2, r1, #0
20003c54:	701a      	strb	r2, [r3, #0]
  uint32_t tmp = 0x00;
20003c56:	2300      	movs	r3, #0
20003c58:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
20003c5a:	1dbb      	adds	r3, r7, #6
20003c5c:	781b      	ldrb	r3, [r3, #0]
20003c5e:	2203      	movs	r2, #3
20003c60:	4013      	ands	r3, r2
20003c62:	009b      	lsls	r3, r3, #2
20003c64:	220f      	movs	r2, #15
20003c66:	409a      	lsls	r2, r3
20003c68:	0013      	movs	r3, r2
20003c6a:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
20003c6c:	4a18      	ldr	r2, [pc, #96]	; (20003cd0 <SYSCFG_EXTILineConfig+0x8c>)
20003c6e:	1dbb      	adds	r3, r7, #6
20003c70:	781b      	ldrb	r3, [r3, #0]
20003c72:	089b      	lsrs	r3, r3, #2
20003c74:	b2db      	uxtb	r3, r3
20003c76:	3302      	adds	r3, #2
20003c78:	009b      	lsls	r3, r3, #2
20003c7a:	589b      	ldr	r3, [r3, r2]
20003c7c:	68fa      	ldr	r2, [r7, #12]
20003c7e:	43d2      	mvns	r2, r2
20003c80:	4813      	ldr	r0, [pc, #76]	; (20003cd0 <SYSCFG_EXTILineConfig+0x8c>)
20003c82:	1db9      	adds	r1, r7, #6
20003c84:	7809      	ldrb	r1, [r1, #0]
20003c86:	0889      	lsrs	r1, r1, #2
20003c88:	b2c9      	uxtb	r1, r1
20003c8a:	401a      	ands	r2, r3
20003c8c:	1c8b      	adds	r3, r1, #2
20003c8e:	009b      	lsls	r3, r3, #2
20003c90:	501a      	str	r2, [r3, r0]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
20003c92:	4a0f      	ldr	r2, [pc, #60]	; (20003cd0 <SYSCFG_EXTILineConfig+0x8c>)
20003c94:	1dbb      	adds	r3, r7, #6
20003c96:	781b      	ldrb	r3, [r3, #0]
20003c98:	089b      	lsrs	r3, r3, #2
20003c9a:	b2db      	uxtb	r3, r3
20003c9c:	3302      	adds	r3, #2
20003c9e:	009b      	lsls	r3, r3, #2
20003ca0:	589a      	ldr	r2, [r3, r2]
20003ca2:	1dfb      	adds	r3, r7, #7
20003ca4:	7819      	ldrb	r1, [r3, #0]
20003ca6:	1dbb      	adds	r3, r7, #6
20003ca8:	781b      	ldrb	r3, [r3, #0]
20003caa:	2003      	movs	r0, #3
20003cac:	4003      	ands	r3, r0
20003cae:	009b      	lsls	r3, r3, #2
20003cb0:	4099      	lsls	r1, r3
20003cb2:	000b      	movs	r3, r1
20003cb4:	4806      	ldr	r0, [pc, #24]	; (20003cd0 <SYSCFG_EXTILineConfig+0x8c>)
20003cb6:	1db9      	adds	r1, r7, #6
20003cb8:	7809      	ldrb	r1, [r1, #0]
20003cba:	0889      	lsrs	r1, r1, #2
20003cbc:	b2c9      	uxtb	r1, r1
20003cbe:	431a      	orrs	r2, r3
20003cc0:	1c8b      	adds	r3, r1, #2
20003cc2:	009b      	lsls	r3, r3, #2
20003cc4:	501a      	str	r2, [r3, r0]
}
20003cc6:	46c0      	nop			; (mov r8, r8)
20003cc8:	46bd      	mov	sp, r7
20003cca:	b004      	add	sp, #16
20003ccc:	bd80      	pop	{r7, pc}
20003cce:	46c0      	nop			; (mov r8, r8)
20003cd0:	40013800 	andmi	r3, r1, r0, lsl #16

20003cd4 <SYSCFG_ETH_MediaInterfaceConfig>:
  *            @arg SYSCFG_ETH_MediaInterface_MII: MII mode selected
  *            @arg SYSCFG_ETH_MediaInterface_RMII: RMII mode selected 
  * @retval None 
  */
void SYSCFG_ETH_MediaInterfaceConfig(uint32_t SYSCFG_ETH_MediaInterface) 
{ 
20003cd4:	b580      	push	{r7, lr}
20003cd6:	b082      	sub	sp, #8
20003cd8:	af00      	add	r7, sp, #0
20003cda:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_ETH_MEDIA_INTERFACE(SYSCFG_ETH_MediaInterface)); 
  /* Configure MII_RMII selection bit */ 
  *(__IO uint32_t *) PMC_MII_RMII_SEL_BB = SYSCFG_ETH_MediaInterface; 
20003cdc:	4b03      	ldr	r3, [pc, #12]	; (20003cec <SYSCFG_ETH_MediaInterfaceConfig+0x18>)
20003cde:	687a      	ldr	r2, [r7, #4]
20003ce0:	601a      	str	r2, [r3, #0]
}
20003ce2:	46c0      	nop			; (mov r8, r8)
20003ce4:	46bd      	mov	sp, r7
20003ce6:	b002      	add	sp, #8
20003ce8:	bd80      	pop	{r7, pc}
20003cea:	46c0      	nop			; (mov r8, r8)
20003cec:	422700dc 	eormi	r0, r7, #220	; 0xdc

20003cf0 <SYSCFG_CompensationCellCmd>:
  *            @arg ENABLE: I/O compensation cell enabled  
  *            @arg DISABLE: I/O compensation cell power-down mode  
  * @retval None
  */
void SYSCFG_CompensationCellCmd(FunctionalState NewState)
{
20003cf0:	b580      	push	{r7, lr}
20003cf2:	b082      	sub	sp, #8
20003cf4:	af00      	add	r7, sp, #0
20003cf6:	0002      	movs	r2, r0
20003cf8:	1dfb      	adds	r3, r7, #7
20003cfa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CMPCR_CMP_PD_BB = (uint32_t)NewState;
20003cfc:	4b03      	ldr	r3, [pc, #12]	; (20003d0c <SYSCFG_CompensationCellCmd+0x1c>)
20003cfe:	1dfa      	adds	r2, r7, #7
20003d00:	7812      	ldrb	r2, [r2, #0]
20003d02:	601a      	str	r2, [r3, #0]
}
20003d04:	46c0      	nop			; (mov r8, r8)
20003d06:	46bd      	mov	sp, r7
20003d08:	b002      	add	sp, #8
20003d0a:	bd80      	pop	{r7, pc}
20003d0c:	42270400 	eormi	r0, r7, #0, 8

20003d10 <SYSCFG_GetCompensationCellStatus>:
  * @brief  Checks whether the I/O Compensation Cell ready flag is set or not.
  * @param  None
  * @retval The new state of the I/O Compensation Cell ready flag (SET or RESET)
  */
FlagStatus SYSCFG_GetCompensationCellStatus(void)
{
20003d10:	b580      	push	{r7, lr}
20003d12:	b082      	sub	sp, #8
20003d14:	af00      	add	r7, sp, #0
  FlagStatus bitstatus = RESET;
20003d16:	1dfb      	adds	r3, r7, #7
20003d18:	2200      	movs	r2, #0
20003d1a:	701a      	strb	r2, [r3, #0]
    
  if ((SYSCFG->CMPCR & SYSCFG_CMPCR_READY ) != (uint32_t)RESET)
20003d1c:	4b09      	ldr	r3, [pc, #36]	; (20003d44 <SYSCFG_GetCompensationCellStatus+0x34>)
20003d1e:	6a1a      	ldr	r2, [r3, #32]
20003d20:	2380      	movs	r3, #128	; 0x80
20003d22:	005b      	lsls	r3, r3, #1
20003d24:	4013      	ands	r3, r2
20003d26:	d003      	beq.n	20003d30 <SYSCFG_GetCompensationCellStatus+0x20>
  {
    bitstatus = SET;
20003d28:	1dfb      	adds	r3, r7, #7
20003d2a:	2201      	movs	r2, #1
20003d2c:	701a      	strb	r2, [r3, #0]
20003d2e:	e002      	b.n	20003d36 <SYSCFG_GetCompensationCellStatus+0x26>
  }
  else
  {
    bitstatus = RESET;
20003d30:	1dfb      	adds	r3, r7, #7
20003d32:	2200      	movs	r2, #0
20003d34:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
20003d36:	1dfb      	adds	r3, r7, #7
20003d38:	781b      	ldrb	r3, [r3, #0]
}
20003d3a:	0018      	movs	r0, r3
20003d3c:	46bd      	mov	sp, r7
20003d3e:	b002      	add	sp, #8
20003d40:	bd80      	pop	{r7, pc}
20003d42:	46c0      	nop			; (mov r8, r8)
20003d44:	40013800 	andmi	r3, r1, r0, lsl #16

20003d48 <__udivsi3>:
20003d48:	2200      	movs	r2, #0
20003d4a:	0843      	lsrs	r3, r0, #1
20003d4c:	428b      	cmp	r3, r1
20003d4e:	d374      	bcc.n	20003e3a <__udivsi3+0xf2>
20003d50:	0903      	lsrs	r3, r0, #4
20003d52:	428b      	cmp	r3, r1
20003d54:	d35f      	bcc.n	20003e16 <__udivsi3+0xce>
20003d56:	0a03      	lsrs	r3, r0, #8
20003d58:	428b      	cmp	r3, r1
20003d5a:	d344      	bcc.n	20003de6 <__udivsi3+0x9e>
20003d5c:	0b03      	lsrs	r3, r0, #12
20003d5e:	428b      	cmp	r3, r1
20003d60:	d328      	bcc.n	20003db4 <__udivsi3+0x6c>
20003d62:	0c03      	lsrs	r3, r0, #16
20003d64:	428b      	cmp	r3, r1
20003d66:	d30d      	bcc.n	20003d84 <__udivsi3+0x3c>
20003d68:	22ff      	movs	r2, #255	; 0xff
20003d6a:	0209      	lsls	r1, r1, #8
20003d6c:	ba12      	rev	r2, r2
20003d6e:	0c03      	lsrs	r3, r0, #16
20003d70:	428b      	cmp	r3, r1
20003d72:	d302      	bcc.n	20003d7a <__udivsi3+0x32>
20003d74:	1212      	asrs	r2, r2, #8
20003d76:	0209      	lsls	r1, r1, #8
20003d78:	d065      	beq.n	20003e46 <__udivsi3+0xfe>
20003d7a:	0b03      	lsrs	r3, r0, #12
20003d7c:	428b      	cmp	r3, r1
20003d7e:	d319      	bcc.n	20003db4 <__udivsi3+0x6c>
20003d80:	e000      	b.n	20003d84 <__udivsi3+0x3c>
20003d82:	0a09      	lsrs	r1, r1, #8
20003d84:	0bc3      	lsrs	r3, r0, #15
20003d86:	428b      	cmp	r3, r1
20003d88:	d301      	bcc.n	20003d8e <__udivsi3+0x46>
20003d8a:	03cb      	lsls	r3, r1, #15
20003d8c:	1ac0      	subs	r0, r0, r3
20003d8e:	4152      	adcs	r2, r2
20003d90:	0b83      	lsrs	r3, r0, #14
20003d92:	428b      	cmp	r3, r1
20003d94:	d301      	bcc.n	20003d9a <__udivsi3+0x52>
20003d96:	038b      	lsls	r3, r1, #14
20003d98:	1ac0      	subs	r0, r0, r3
20003d9a:	4152      	adcs	r2, r2
20003d9c:	0b43      	lsrs	r3, r0, #13
20003d9e:	428b      	cmp	r3, r1
20003da0:	d301      	bcc.n	20003da6 <__udivsi3+0x5e>
20003da2:	034b      	lsls	r3, r1, #13
20003da4:	1ac0      	subs	r0, r0, r3
20003da6:	4152      	adcs	r2, r2
20003da8:	0b03      	lsrs	r3, r0, #12
20003daa:	428b      	cmp	r3, r1
20003dac:	d301      	bcc.n	20003db2 <__udivsi3+0x6a>
20003dae:	030b      	lsls	r3, r1, #12
20003db0:	1ac0      	subs	r0, r0, r3
20003db2:	4152      	adcs	r2, r2
20003db4:	0ac3      	lsrs	r3, r0, #11
20003db6:	428b      	cmp	r3, r1
20003db8:	d301      	bcc.n	20003dbe <__udivsi3+0x76>
20003dba:	02cb      	lsls	r3, r1, #11
20003dbc:	1ac0      	subs	r0, r0, r3
20003dbe:	4152      	adcs	r2, r2
20003dc0:	0a83      	lsrs	r3, r0, #10
20003dc2:	428b      	cmp	r3, r1
20003dc4:	d301      	bcc.n	20003dca <__udivsi3+0x82>
20003dc6:	028b      	lsls	r3, r1, #10
20003dc8:	1ac0      	subs	r0, r0, r3
20003dca:	4152      	adcs	r2, r2
20003dcc:	0a43      	lsrs	r3, r0, #9
20003dce:	428b      	cmp	r3, r1
20003dd0:	d301      	bcc.n	20003dd6 <__udivsi3+0x8e>
20003dd2:	024b      	lsls	r3, r1, #9
20003dd4:	1ac0      	subs	r0, r0, r3
20003dd6:	4152      	adcs	r2, r2
20003dd8:	0a03      	lsrs	r3, r0, #8
20003dda:	428b      	cmp	r3, r1
20003ddc:	d301      	bcc.n	20003de2 <__udivsi3+0x9a>
20003dde:	020b      	lsls	r3, r1, #8
20003de0:	1ac0      	subs	r0, r0, r3
20003de2:	4152      	adcs	r2, r2
20003de4:	d2cd      	bcs.n	20003d82 <__udivsi3+0x3a>
20003de6:	09c3      	lsrs	r3, r0, #7
20003de8:	428b      	cmp	r3, r1
20003dea:	d301      	bcc.n	20003df0 <__udivsi3+0xa8>
20003dec:	01cb      	lsls	r3, r1, #7
20003dee:	1ac0      	subs	r0, r0, r3
20003df0:	4152      	adcs	r2, r2
20003df2:	0983      	lsrs	r3, r0, #6
20003df4:	428b      	cmp	r3, r1
20003df6:	d301      	bcc.n	20003dfc <__udivsi3+0xb4>
20003df8:	018b      	lsls	r3, r1, #6
20003dfa:	1ac0      	subs	r0, r0, r3
20003dfc:	4152      	adcs	r2, r2
20003dfe:	0943      	lsrs	r3, r0, #5
20003e00:	428b      	cmp	r3, r1
20003e02:	d301      	bcc.n	20003e08 <__udivsi3+0xc0>
20003e04:	014b      	lsls	r3, r1, #5
20003e06:	1ac0      	subs	r0, r0, r3
20003e08:	4152      	adcs	r2, r2
20003e0a:	0903      	lsrs	r3, r0, #4
20003e0c:	428b      	cmp	r3, r1
20003e0e:	d301      	bcc.n	20003e14 <__udivsi3+0xcc>
20003e10:	010b      	lsls	r3, r1, #4
20003e12:	1ac0      	subs	r0, r0, r3
20003e14:	4152      	adcs	r2, r2
20003e16:	08c3      	lsrs	r3, r0, #3
20003e18:	428b      	cmp	r3, r1
20003e1a:	d301      	bcc.n	20003e20 <__udivsi3+0xd8>
20003e1c:	00cb      	lsls	r3, r1, #3
20003e1e:	1ac0      	subs	r0, r0, r3
20003e20:	4152      	adcs	r2, r2
20003e22:	0883      	lsrs	r3, r0, #2
20003e24:	428b      	cmp	r3, r1
20003e26:	d301      	bcc.n	20003e2c <__udivsi3+0xe4>
20003e28:	008b      	lsls	r3, r1, #2
20003e2a:	1ac0      	subs	r0, r0, r3
20003e2c:	4152      	adcs	r2, r2
20003e2e:	0843      	lsrs	r3, r0, #1
20003e30:	428b      	cmp	r3, r1
20003e32:	d301      	bcc.n	20003e38 <__udivsi3+0xf0>
20003e34:	004b      	lsls	r3, r1, #1
20003e36:	1ac0      	subs	r0, r0, r3
20003e38:	4152      	adcs	r2, r2
20003e3a:	1a41      	subs	r1, r0, r1
20003e3c:	d200      	bcs.n	20003e40 <__udivsi3+0xf8>
20003e3e:	4601      	mov	r1, r0
20003e40:	4152      	adcs	r2, r2
20003e42:	4610      	mov	r0, r2
20003e44:	4770      	bx	lr
20003e46:	e7ff      	b.n	20003e48 <__udivsi3+0x100>
20003e48:	b501      	push	{r0, lr}
20003e4a:	2000      	movs	r0, #0
20003e4c:	f000 f806 	bl	20003e5c <__aeabi_idiv0>
20003e50:	bd02      	pop	{r1, pc}
20003e52:	46c0      	nop			; (mov r8, r8)

20003e54 <__aeabi_uidivmod>:
20003e54:	2900      	cmp	r1, #0
20003e56:	d0f7      	beq.n	20003e48 <__udivsi3+0x100>
20003e58:	e776      	b.n	20003d48 <__udivsi3>
20003e5a:	4770      	bx	lr

20003e5c <__aeabi_idiv0>:
20003e5c:	4770      	bx	lr
20003e5e:	46c0      	nop			; (mov r8, r8)

20003e60 <__itoa>:
20003e60:	1e93      	subs	r3, r2, #2
20003e62:	b510      	push	{r4, lr}
20003e64:	000c      	movs	r4, r1
20003e66:	2b22      	cmp	r3, #34	; 0x22
20003e68:	d904      	bls.n	20003e74 <__itoa+0x14>
20003e6a:	2300      	movs	r3, #0
20003e6c:	001c      	movs	r4, r3
20003e6e:	700b      	strb	r3, [r1, #0]
20003e70:	0020      	movs	r0, r4
20003e72:	bd10      	pop	{r4, pc}
20003e74:	2a0a      	cmp	r2, #10
20003e76:	d109      	bne.n	20003e8c <__itoa+0x2c>
20003e78:	2800      	cmp	r0, #0
20003e7a:	da07      	bge.n	20003e8c <__itoa+0x2c>
20003e7c:	232d      	movs	r3, #45	; 0x2d
20003e7e:	700b      	strb	r3, [r1, #0]
20003e80:	2101      	movs	r1, #1
20003e82:	4240      	negs	r0, r0
20003e84:	1861      	adds	r1, r4, r1
20003e86:	f000 f807 	bl	20003e98 <__utoa>
20003e8a:	e7f1      	b.n	20003e70 <__itoa+0x10>
20003e8c:	2100      	movs	r1, #0
20003e8e:	e7f9      	b.n	20003e84 <__itoa+0x24>

20003e90 <itoa>:
20003e90:	b510      	push	{r4, lr}
20003e92:	f7ff ffe5 	bl	20003e60 <__itoa>
20003e96:	bd10      	pop	{r4, pc}

20003e98 <__utoa>:
20003e98:	b5f0      	push	{r4, r5, r6, r7, lr}
20003e9a:	0016      	movs	r6, r2
20003e9c:	b08d      	sub	sp, #52	; 0x34
20003e9e:	0007      	movs	r7, r0
20003ea0:	000c      	movs	r4, r1
20003ea2:	2225      	movs	r2, #37	; 0x25
20003ea4:	4916      	ldr	r1, [pc, #88]	; (20003f00 <__utoa+0x68>)
20003ea6:	a802      	add	r0, sp, #8
20003ea8:	f000 f830 	bl	20003f0c <memcpy>
20003eac:	1eb3      	subs	r3, r6, #2
20003eae:	2500      	movs	r5, #0
20003eb0:	2b22      	cmp	r3, #34	; 0x22
20003eb2:	d820      	bhi.n	20003ef6 <__utoa+0x5e>
20003eb4:	1e63      	subs	r3, r4, #1
20003eb6:	9300      	str	r3, [sp, #0]
20003eb8:	ab02      	add	r3, sp, #8
20003eba:	9301      	str	r3, [sp, #4]
20003ebc:	0038      	movs	r0, r7
20003ebe:	0031      	movs	r1, r6
20003ec0:	f7ff ffc8 	bl	20003e54 <__aeabi_uidivmod>
20003ec4:	000b      	movs	r3, r1
20003ec6:	9a01      	ldr	r2, [sp, #4]
20003ec8:	0029      	movs	r1, r5
20003eca:	5cd3      	ldrb	r3, [r2, r3]
20003ecc:	9a00      	ldr	r2, [sp, #0]
20003ece:	3501      	adds	r5, #1
20003ed0:	5553      	strb	r3, [r2, r5]
20003ed2:	003b      	movs	r3, r7
20003ed4:	0007      	movs	r7, r0
20003ed6:	429e      	cmp	r6, r3
20003ed8:	d9f0      	bls.n	20003ebc <__utoa+0x24>
20003eda:	2300      	movs	r3, #0
20003edc:	0022      	movs	r2, r4
20003ede:	5563      	strb	r3, [r4, r5]
20003ee0:	000b      	movs	r3, r1
20003ee2:	1ac8      	subs	r0, r1, r3
20003ee4:	4283      	cmp	r3, r0
20003ee6:	dd08      	ble.n	20003efa <__utoa+0x62>
20003ee8:	7810      	ldrb	r0, [r2, #0]
20003eea:	5ce5      	ldrb	r5, [r4, r3]
20003eec:	7015      	strb	r5, [r2, #0]
20003eee:	54e0      	strb	r0, [r4, r3]
20003ef0:	3201      	adds	r2, #1
20003ef2:	3b01      	subs	r3, #1
20003ef4:	e7f5      	b.n	20003ee2 <__utoa+0x4a>
20003ef6:	7025      	strb	r5, [r4, #0]
20003ef8:	002c      	movs	r4, r5
20003efa:	0020      	movs	r0, r4
20003efc:	b00d      	add	sp, #52	; 0x34
20003efe:	bdf0      	pop	{r4, r5, r6, r7, pc}
20003f00:	20003f61 	andcs	r3, r0, r1, ror #30

20003f04 <utoa>:
20003f04:	b510      	push	{r4, lr}
20003f06:	f7ff ffc7 	bl	20003e98 <__utoa>
20003f0a:	bd10      	pop	{r4, pc}

20003f0c <memcpy>:
20003f0c:	2300      	movs	r3, #0
20003f0e:	b510      	push	{r4, lr}
20003f10:	429a      	cmp	r2, r3
20003f12:	d100      	bne.n	20003f16 <memcpy+0xa>
20003f14:	bd10      	pop	{r4, pc}
20003f16:	5ccc      	ldrb	r4, [r1, r3]
20003f18:	54c4      	strb	r4, [r0, r3]
20003f1a:	3301      	adds	r3, #1
20003f1c:	e7f8      	b.n	20003f10 <memcpy+0x4>
	...

20003f20 <vibrationSensor>:
20003f20:	00000000 	andeq	r0, r0, r0
20003f24:	40020c00 	andmi	r0, r2, r0, lsl #24
20003f28:	00000010 	andeq	r0, r0, r0, lsl r0

20003f2c <ultraSonicSensor>:
20003f2c:	00000001 	andeq	r0, r0, r1
20003f30:	40020c00 	andmi	r0, r2, r0, lsl #24
20003f34:	00020001 	andeq	r0, r2, r1
20003f38:	00000000 	andeq	r0, r0, r0
20003f3c:	00000032 	andeq	r0, r0, r2, lsr r0

20003f40 <APBAHBPrescTable>:
20003f40:	00000000 	andeq	r0, r0, r0
20003f44:	04030201 	streq	r0, [r3], #-513	; 0xfffffdff
20003f48:	04030201 	streq	r0, [r3], #-513	; 0xfffffdff
20003f4c:	09080706 	stmdbeq	r8, {r1, r2, r8, r9, sl}
20003f50:	00626976 	rsbeq	r6, r2, r6, ror r9
20003f54:	0000000a 	andeq	r0, r0, sl
20003f58:	6c65770a 	stclvs	7, cr7, [r5], #-40	; 0xffffffd8
20003f5c:	656d6f63 	strbvs	r6, [sp, #-3939]!	; 0xfffff09d
20003f60:	32313000 	eorscc	r3, r1, #0
20003f64:	36353433 			; <UNDEFINED> instruction: 0x36353433
20003f68:	61393837 	teqvs	r9, r7, lsr r8
20003f6c:	65646362 	strbvs	r6, [r4, #-866]!	; 0xfffffc9e
20003f70:	69686766 	stmdbvs	r8!, {r1, r2, r5, r6, r8, r9, sl, sp, lr}^
20003f74:	6d6c6b6a 	vstmdbvs	ip!, {d22-<overflow reg d74>}
20003f78:	71706f6e 	cmnvc	r0, lr, ror #30
20003f7c:	75747372 	ldrbvc	r7, [r4, #-882]!	; 0xfffffc8e
20003f80:	79787776 	ldmdbvc	r8!, {r1, r2, r4, r5, r6, r8, r9, sl, ip, sp, lr}^
20003f84:	0000007a 	andeq	r0, r0, sl, ror r0

20003f88 <echo_time>:
20003f88:	00000000 	andeq	r0, r0, r0

20003f8c <echo_end>:
20003f8c:	00000000 	andeq	r0, r0, r0

20003f90 <echo_start>:
20003f90:	00000000 	andeq	r0, r0, r0

20003f94 <a>:
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	0000058e 	andeq	r0, r0, lr, lsl #11
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
      10:	00035c0c 	andeq	r5, r3, ip, lsl #24
      14:	00032200 	andeq	r2, r3, r0, lsl #4
      18:	00001000 	andeq	r1, r0, r0
      1c:	0001c020 	andeq	ip, r1, r0, lsr #32
      20:	00000000 	andeq	r0, r0, r0
      24:	06010200 	streq	r0, [r1], -r0, lsl #4
      28:	000000f3 	strdeq	r0, [r0], -r3
      2c:	0000dc03 	andeq	sp, r0, r3, lsl #24
      30:	182b0200 	stmdane	fp!, {r9}
      34:	00000038 	andeq	r0, r0, r8, lsr r0
      38:	f1080102 	cps	#2
      3c:	02000000 	andeq	r0, r0, #0
      40:	00640502 	rsbeq	r0, r4, r2, lsl #10
      44:	02020000 	andeq	r0, r2, #0
      48:	00020107 	andeq	r0, r2, r7, lsl #2
      4c:	02e70300 	rsceq	r0, r7, #0, 6
      50:	4d020000 	stcmi	0, cr0, [r2, #-0]
      54:	00005918 	andeq	r5, r0, r8, lsl r9
      58:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
      5c:	000000c7 	andeq	r0, r0, r7, asr #1
      60:	00007f03 	andeq	r7, r0, r3, lsl #30
      64:	194f0200 	stmdbne	pc, {r9}^	; <UNPREDICTABLE>
      68:	0000006c 	andeq	r0, r0, ip, rrx
      6c:	9e070402 	cdpls	4, 0, cr0, cr7, cr2, {0}
      70:	02000001 	andeq	r0, r0, #1
      74:	00c20508 	sbceq	r0, r2, r8, lsl #10
      78:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
      7c:	00019907 	andeq	r9, r1, r7, lsl #18
      80:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
      84:	00746e69 	rsbseq	r6, r4, r9, ror #28
      88:	a3070402 	movwge	r0, #29698	; 0x7402
      8c:	03000001 	movweq	r0, #1
      90:	000000de 	ldrdeq	r0, [r0], -lr
      94:	2c131803 	ldccs	8, cr1, [r3], {3}
      98:	05000000 	streq	r0, [r0, #-0]
      9c:	0000008f 	andeq	r0, r0, pc, lsl #1
      a0:	0002e903 	andeq	lr, r2, r3, lsl #18
      a4:	132c0300 			; <UNDEFINED> instruction: 0x132c0300
      a8:	0000004d 	andeq	r0, r0, sp, asr #32
      ac:	0000a005 	andeq	sl, r0, r5
      b0:	00810300 	addeq	r0, r1, r0, lsl #6
      b4:	30030000 	andcc	r0, r3, r0
      b8:	00006014 	andeq	r6, r0, r4, lsl r0
      bc:	00b10500 	adcseq	r0, r1, r0, lsl #10
      c0:	bd060000 	stclt	0, cr0, [r6, #-0]
      c4:	07000000 	streq	r0, [r0, -r0]
      c8:	a0040e04 	andge	r0, r4, r4, lsl #28
      cc:	01910901 	orrseq	r0, r1, r1, lsl #18
      d0:	90080000 	andls	r0, r8, r0
      d4:	04000000 	streq	r0, [r0], #-0
      d8:	a11101a2 	tstge	r1, r2, lsr #3
      dc:	00000001 	andeq	r0, r0, r1
      e0:	00027908 	andeq	r7, r2, r8, lsl #18
      e4:	01a30400 			; <UNDEFINED> instruction: 0x01a30400
      e8:	0001a611 	andeq	sl, r1, r1, lsl r6
      ec:	bc082000 	stclt	0, cr2, [r8], {-0}
      f0:	04000001 	streq	r0, [r0], #-1
      f4:	a11101a4 	tstge	r1, r4, lsr #3
      f8:	80000001 	andhi	r0, r0, r1
      fc:	0000b908 	andeq	fp, r0, r8, lsl #18
     100:	01a50400 			; <UNDEFINED> instruction: 0x01a50400
     104:	0001a611 	andeq	sl, r1, r1, lsl r6
     108:	2a09a000 	bcs	268110 <startup-0x1fd97ef0>
     10c:	04000002 	streq	r0, [r0], #-2
     110:	a11101a6 	tstge	r1, r6, lsr #3
     114:	00000001 	andeq	r0, r0, r1
     118:	02830901 	addeq	r0, r3, #16384	; 0x4000
     11c:	a7040000 	strge	r0, [r4, -r0]
     120:	01a61101 			; <UNDEFINED> instruction: 0x01a61101
     124:	01200000 			; <UNDEFINED> instruction: 0x01200000
     128:	00019409 	andeq	r9, r1, r9, lsl #8
     12c:	01a80400 			; <UNDEFINED> instruction: 0x01a80400
     130:	0001a111 	andeq	sl, r1, r1, lsl r1
     134:	09018000 	stmdbeq	r1, {pc}
     138:	0000028d 	andeq	r0, r0, sp, lsl #5
     13c:	1101a904 	tstne	r1, r4, lsl #18
     140:	000001a6 	andeq	r0, r0, r6, lsr #3
     144:	000901a0 	andeq	r0, r9, r0, lsr #3
     148:	04000000 	streq	r0, [r0], #-0
     14c:	a11101aa 	tstge	r1, sl, lsr #3
     150:	00000001 	andeq	r0, r0, r1
     154:	02970902 	addseq	r0, r7, #32768	; 0x8000
     158:	ab040000 	blge	100160 <startup-0x1feffea0>
     15c:	01b61101 			; <UNDEFINED> instruction: 0x01b61101
     160:	02200000 	eoreq	r0, r0, #0
     164:	0050490a 	subseq	r4, r0, sl, lsl #18
     168:	1101ac04 	tstne	r1, r4, lsl #24
     16c:	000001d6 	ldrdeq	r0, [r0], -r6
     170:	a1090300 	mrsge	r0, (UNDEF: 57)
     174:	04000002 	streq	r0, [r0], #-2
     178:	db1101ad 	blle	440834 <startup-0x1fbbf7cc>
     17c:	f0000001 			; <UNDEFINED> instruction: 0xf0000001
     180:	00a70903 	adceq	r0, r7, r3, lsl #18
     184:	ae040000 	cdpge	0, 0, cr0, cr4, cr0, {0}
     188:	00bd1101 	adcseq	r1, sp, r1, lsl #2
     18c:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     190:	00bd0b00 	adcseq	r0, sp, r0, lsl #22
     194:	01a10000 			; <UNDEFINED> instruction: 0x01a10000
     198:	880c0000 	stmdahi	ip, {}	; <UNPREDICTABLE>
     19c:	07000000 	streq	r0, [r0, -r0]
     1a0:	01910500 	orrseq	r0, r1, r0, lsl #10
     1a4:	b10b0000 	mrslt	r0, (UNDEF: 11)
     1a8:	b6000000 	strlt	r0, [r0], -r0
     1ac:	0c000001 	stceq	0, cr0, [r0], {1}
     1b0:	00000088 	andeq	r0, r0, r8, lsl #1
     1b4:	b10b0017 	tstlt	fp, r7, lsl r0
     1b8:	c6000000 	strgt	r0, [r0], -r0
     1bc:	0c000001 	stceq	0, cr0, [r0], {1}
     1c0:	00000088 	andeq	r0, r0, r8, lsl #1
     1c4:	9b0b0037 	blls	2c02a8 <startup-0x1fd3fd58>
     1c8:	d6000000 	strle	r0, [r0], -r0
     1cc:	0c000001 	stceq	0, cr0, [r0], {1}
     1d0:	00000088 	andeq	r0, r0, r8, lsl #1
     1d4:	c60500ef 	strgt	r0, [r5], -pc, ror #1
     1d8:	0b000001 	bleq	1e4 <startup-0x1ffffe1c>
     1dc:	000000b1 	strheq	r0, [r0], -r1
     1e0:	000001ec 	andeq	r0, r0, ip, ror #3
     1e4:	0000880d 	andeq	r8, r0, sp, lsl #16
     1e8:	00028300 	andeq	r8, r2, r0, lsl #6
     1ec:	0002ab0e 	andeq	sl, r2, lr, lsl #22
     1f0:	01af0400 			; <UNDEFINED> instruction: 0x01af0400
     1f4:	0000c704 	andeq	ip, r0, r4, lsl #14
     1f8:	048c0f00 	streq	r0, [ip], #3840	; 0xf00
     1fc:	2a0901c0 	bcs	240904 <startup-0x1fdbf6fc>
     200:	08000003 	stmdaeq	r0, {r0, r1}
     204:	0000008a 	andeq	r0, r0, sl, lsl #1
     208:	1101c204 	tstne	r1, r4, lsl #4
     20c:	000000c2 	andeq	r0, r0, r2, asr #1
     210:	00b40800 	adcseq	r0, r4, r0, lsl #16
     214:	c3040000 	movwgt	r0, #16384	; 0x4000
     218:	00bd1101 	adcseq	r1, sp, r1, lsl #2
     21c:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
     220:	00000220 	andeq	r0, r0, r0, lsr #4
     224:	1101c404 	tstne	r1, r4, lsl #8
     228:	000000bd 	strheq	r0, [r0], -sp
     22c:	00eb0808 	rsceq	r0, fp, r8, lsl #16
     230:	c5040000 	strgt	r0, [r4, #-0]
     234:	00bd1101 	adcseq	r1, sp, r1, lsl #2
     238:	100c0000 	andne	r0, ip, r0
     23c:	00524353 	subseq	r4, r2, r3, asr r3
     240:	1101c604 	tstne	r1, r4, lsl #12
     244:	000000bd 	strheq	r0, [r0], -sp
     248:	43431010 	movtmi	r1, #12304	; 0x3010
     24c:	c7040052 	smlsdgt	r4, r2, r0, r0
     250:	00bd1101 	adcseq	r1, sp, r1, lsl #2
     254:	10140000 	andsne	r0, r4, r0
     258:	00504853 	subseq	r4, r0, r3, asr r8
     25c:	1101c804 	tstne	r1, r4, lsl #16
     260:	0000033a 	andeq	r0, r0, sl, lsr r3
     264:	01b60818 			; <UNDEFINED> instruction: 0x01b60818
     268:	c9040000 	stmdbgt	r4, {}	; <UNPREDICTABLE>
     26c:	00bd1101 	adcseq	r1, sp, r1, lsl #2
     270:	08240000 	stmdaeq	r4!, {}	; <UNPREDICTABLE>
     274:	000000e6 	andeq	r0, r0, r6, ror #1
     278:	1101ca04 	tstne	r1, r4, lsl #20
     27c:	000000bd 	strheq	r0, [r0], -sp
     280:	026f0828 	rsbeq	r0, pc, #40, 16	; 0x280000
     284:	cb040000 	blgt	10028c <startup-0x1feffd74>
     288:	00bd1101 	adcseq	r1, sp, r1, lsl #2
     28c:	082c0000 	stmdaeq	ip!, {}	; <UNPREDICTABLE>
     290:	0000022f 	andeq	r0, r0, pc, lsr #4
     294:	1101cc04 	tstne	r1, r4, lsl #24
     298:	000000bd 	strheq	r0, [r0], -sp
     29c:	005e0830 	subseq	r0, lr, r0, lsr r8
     2a0:	cd040000 	stcgt	0, cr0, [r4, #-0]
     2a4:	00bd1101 	adcseq	r1, sp, r1, lsl #2
     2a8:	08340000 	ldmdaeq	r4!, {}	; <UNPREDICTABLE>
     2ac:	000000d7 	ldrdeq	r0, [r0], -r7
     2b0:	1101ce04 	tstne	r1, r4, lsl #28
     2b4:	000000bd 	strheq	r0, [r0], -sp
     2b8:	03030838 	movweq	r0, #14392	; 0x3838
     2bc:	cf040000 	svcgt	0x00040000
     2c0:	00bd1101 	adcseq	r1, sp, r1, lsl #2
     2c4:	103c0000 	eorsne	r0, ip, r0
     2c8:	00524650 	subseq	r4, r2, r0, asr r6
     2cc:	1101d004 	tstne	r1, r4
     2d0:	00000354 	andeq	r0, r0, r4, asr r3
     2d4:	46441040 	strbmi	r1, [r4], -r0, asr #32
     2d8:	d1040052 	qaddle	r0, r2, r4
     2dc:	00c21101 	sbceq	r1, r2, r1, lsl #2
     2e0:	10480000 	subne	r0, r8, r0
     2e4:	00524441 	subseq	r4, r2, r1, asr #8
     2e8:	1101d204 	tstne	r1, r4, lsl #4
     2ec:	000000c2 	andeq	r0, r0, r2, asr #1
     2f0:	0274084c 	rsbseq	r0, r4, #76, 16	; 0x4c0000
     2f4:	d3040000 	movwle	r0, #16384	; 0x4000
     2f8:	036e1101 	cmneq	lr, #1073741824	; 0x40000000
     2fc:	08500000 	ldmdaeq	r0, {}^	; <UNPREDICTABLE>
     300:	00000225 	andeq	r0, r0, r5, lsr #4
     304:	1101d404 	tstne	r1, r4, lsl #8
     308:	00000388 	andeq	r0, r0, r8, lsl #7
     30c:	02790860 	rsbseq	r0, r9, #96, 16	; 0x600000
     310:	d5040000 	strle	r0, [r4, #-0]
     314:	038d1101 	orreq	r1, sp, #1073741824	; 0x40000000
     318:	08740000 	ldmdaeq	r4!, {}^	; <UNPREDICTABLE>
     31c:	000003bd 			; <UNDEFINED> instruction: 0x000003bd
     320:	1101d604 	tstne	r1, r4, lsl #12
     324:	000000bd 	strheq	r0, [r0], -sp
     328:	9b0b0088 	blls	2c0550 <startup-0x1fd3fab0>
     32c:	3a000000 	bcc	334 <startup-0x1ffffccc>
     330:	0c000003 	stceq	0, cr0, [r0], {3}
     334:	00000088 	andeq	r0, r0, r8, lsl #1
     338:	2a05000b 	bcs	14036c <startup-0x1febfc94>
     33c:	0b000003 	bleq	350 <startup-0x1ffffcb0>
     340:	000000c2 	andeq	r0, r0, r2, asr #1
     344:	0000034f 	andeq	r0, r0, pc, asr #6
     348:	0000880c 	andeq	r8, r0, ip, lsl #16
     34c:	06000100 	streq	r0, [r0], -r0, lsl #2
     350:	0000033f 	andeq	r0, r0, pc, lsr r3
     354:	00034f05 	andeq	r4, r3, r5, lsl #30
     358:	00c20b00 	sbceq	r0, r2, r0, lsl #22
     35c:	03690000 	cmneq	r9, #0
     360:	880c0000 	stmdahi	ip, {}	; <UNPREDICTABLE>
     364:	03000000 	movweq	r0, #0
     368:	03590600 	cmpeq	r9, #0, 12
     36c:	69050000 	stmdbvs	r5, {}	; <UNPREDICTABLE>
     370:	0b000003 	bleq	384 <startup-0x1ffffc7c>
     374:	000000c2 	andeq	r0, r0, r2, asr #1
     378:	00000383 	andeq	r0, r0, r3, lsl #7
     37c:	0000880c 	andeq	r8, r0, ip, lsl #16
     380:	06000400 	streq	r0, [r0], -r0, lsl #8
     384:	00000373 	andeq	r0, r0, r3, ror r3
     388:	00038305 	andeq	r8, r3, r5, lsl #6
     38c:	00b10b00 	adcseq	r0, r1, r0, lsl #22
     390:	039d0000 	orrseq	r0, sp, #0
     394:	880c0000 	stmdahi	ip, {}	; <UNPREDICTABLE>
     398:	04000000 	streq	r0, [r0], #-0
     39c:	00950e00 	addseq	r0, r5, r0, lsl #28
     3a0:	d7040000 	strle	r0, [r4, -r0]
     3a4:	01f90301 	mvnseq	r0, r1, lsl #6
     3a8:	100f0000 	andne	r0, pc, r0
     3ac:	0902bf04 	stmdbeq	r2, {r2, r8, r9, sl, fp, ip, sp, pc}
     3b0:	000003ed 	andeq	r0, r0, sp, ror #7
     3b4:	00017b08 	andeq	r7, r1, r8, lsl #22
     3b8:	02c10400 	sbceq	r0, r1, #0, 8
     3bc:	0000bd11 	andeq	fp, r0, r1, lsl sp
     3c0:	fe080000 	cdp2	0, 0, cr0, cr8, cr0, {0}
     3c4:	04000002 	streq	r0, [r0], #-2
     3c8:	bd1102c2 	lfmlt	f0, 4, [r1, #-776]	; 0xfffffcf8
     3cc:	04000000 	streq	r0, [r0], #-0
     3d0:	4c415610 	mcrrmi	6, 1, r5, r1, cr0
     3d4:	02c30400 	sbceq	r0, r3, #0, 8
     3d8:	0000bd11 	andeq	fp, r0, r1, lsl sp
     3dc:	b0080800 	andlt	r0, r8, r0, lsl #16
     3e0:	04000001 	streq	r0, [r0], #-1
     3e4:	c21102c4 	andsgt	r0, r1, #196, 4	; 0x4000000c
     3e8:	0c000000 	stceq	0, cr0, [r0], {-0}
     3ec:	01f40e00 	mvnseq	r0, r0, lsl #28
     3f0:	c5040000 	strgt	r0, [r4, #-0]
     3f4:	03aa0302 			; <UNDEFINED> instruction: 0x03aa0302
     3f8:	15110000 	ldrne	r0, [r1, #-0]
     3fc:	04000003 	streq	r0, [r0], #-3
     400:	ac1906fa 	ldcge	6, cr0, [r9], {250}	; 0xfa
     404:	12000000 	andne	r0, r0, #0
     408:	0000025f 	andeq	r0, r0, pc, asr r2
     40c:	b1113b05 	tstlt	r1, r5, lsl #22
     410:	13000000 	movwne	r0, #0
     414:	00380107 	eorseq	r0, r8, r7, lsl #2
     418:	5f060000 	svcpl	0x00060000
     41c:	042f0e03 	strteq	r0, [pc], #-3587	; 424 <startup-0x1ffffbdc>
     420:	ac140000 	ldcge	0, cr0, [r4], {-0}
     424:	00000000 	andeq	r0, r0, r0
     428:	0003c314 	andeq	ip, r3, r4, lsl r3
     42c:	0e000100 	adfeqs	f0, f0, f0
     430:	000002d7 	ldrdeq	r0, [r0], -r7
     434:	2f035f06 	svccs	0x00035f06
     438:	00000413 	andeq	r0, r0, r3, lsl r4
     43c:	36070415 			; <UNDEFINED> instruction: 0x36070415
     440:	00047a09 	andeq	r7, r4, r9, lsl #20
     444:	02341600 	eorseq	r1, r4, #0, 12
     448:	38070000 	stmdacc	r7, {}	; <UNPREDICTABLE>
     44c:	00008f0b 	andeq	r8, r0, fp, lsl #30
     450:	b5160000 	ldrlt	r0, [r6, #-0]
     454:	07000002 	streq	r0, [r0, -r2]
     458:	008f0b3d 	addeq	r0, pc, sp, lsr fp	; <UNPREDICTABLE>
     45c:	16010000 	strne	r0, [r1], -r0
     460:	00000244 	andeq	r0, r0, r4, asr #4
     464:	8f0b4207 	svchi	0x000b4207
     468:	02000000 	andeq	r0, r0, #0
     46c:	00001616 	andeq	r1, r0, r6, lsl r6
     470:	13470700 	movtne	r0, #30464	; 0x7700
     474:	0000042f 	andeq	r0, r0, pc, lsr #8
     478:	05030003 	streq	r0, [r3, #-3]
     47c:	07000000 	streq	r0, [r0, -r0]
     480:	043c034a 	ldrteq	r0, [ip], #-842	; 0xfffffcb6
     484:	dc170000 	ldcle	0, cr0, [r7], {-0}
     488:	01000001 	tsteq	r0, r1
     48c:	019c06df 			; <UNDEFINED> instruction: 0x019c06df
     490:	00342000 	eorseq	r2, r4, r0
     494:	9c010000 	stcls	0, cr0, [r1], {-0}
     498:	000004ac 	andeq	r0, r0, ip, lsr #9
     49c:	00002918 	andeq	r2, r0, r8, lsl r9
     4a0:	27df0100 	ldrbcs	r0, [pc, r0, lsl #2]
     4a4:	000000b1 	strheq	r0, [r0], -r1
     4a8:	00749102 	rsbseq	r9, r4, r2, lsl #2
     4ac:	0001c817 	andeq	ip, r1, r7, lsl r8
     4b0:	06c70100 	strbeq	r0, [r7], r0, lsl #2
     4b4:	20000154 	andcs	r0, r0, r4, asr r1
     4b8:	00000048 	andeq	r0, r0, r8, asr #32
     4bc:	04e19c01 	strbteq	r9, [r1], #3073	; 0xc01
     4c0:	08180000 	ldmdaeq	r8, {}	; <UNPREDICTABLE>
     4c4:	01000003 	tsteq	r0, r3
     4c8:	008f22c7 	addeq	r2, pc, r7, asr #5
     4cc:	91020000 	mrsls	r0, (UNDEF: 2)
     4d0:	009e1877 	addseq	r1, lr, r7, ror r8
     4d4:	c7010000 	strgt	r0, [r1, -r0]
     4d8:	00042f40 	andeq	r2, r4, r0, asr #30
     4dc:	76910200 	ldrvc	r0, [r1], r0, lsl #4
     4e0:	01801700 	orreq	r1, r0, r0, lsl #14
     4e4:	b4010000 	strlt	r0, [r1], #-0
     4e8:	00012806 	andeq	r2, r1, r6, lsl #16
     4ec:	00002c20 	andeq	r2, r0, r0, lsr #24
     4f0:	169c0100 	ldrne	r0, [ip], r0, lsl #2
     4f4:	18000005 	stmdane	r0, {r0, r2}
     4f8:	000002f1 	strdeq	r0, [r0], -r1
     4fc:	b123b401 			; <UNDEFINED> instruction: 0xb123b401
     500:	02000000 	andeq	r0, r0, #0
     504:	d0187491 	mulsle	r8, r1, r4
     508:	01000000 	mrseq	r0, (UNDEF: 0)
     50c:	00b13ab4 	ldrhteq	r3, [r1], r4
     510:	91020000 	mrsls	r0, (UNDEF: 2)
     514:	6e170070 	mrcvs	0, 0, r0, cr7, cr0, {3}
     518:	01000000 	mrseq	r0, (UNDEF: 0)
     51c:	00340688 	eorseq	r0, r4, r8, lsl #13
     520:	00f42000 	rscseq	r2, r4, r0
     524:	9c010000 	stcls	0, cr0, [r1], {-0}
     528:	00000569 	andeq	r0, r0, r9, ror #10
     52c:	00003b18 	andeq	r3, r0, r8, lsl fp
     530:	22880100 	addcs	r0, r8, #0, 2
     534:	00000569 	andeq	r0, r0, r9, ror #10
     538:	19649102 	stmdbne	r4!, {r1, r8, ip, pc}^
     53c:	00000214 	andeq	r0, r0, r4, lsl r2
     540:	8f0b8a01 	svchi	0x000b8a01
     544:	02000000 	andeq	r0, r0, #0
     548:	78196f91 	ldmdavc	r9, {r0, r4, r7, r8, r9, sl, fp, sp, lr}
     54c:	01000000 	mrseq	r0, (UNDEF: 0)
     550:	008f1f8a 	addeq	r1, pc, sl, lsl #31
     554:	91020000 	mrsls	r0, (UNDEF: 2)
     558:	01c1196e 	biceq	r1, r1, lr, ror #18
     55c:	8a010000 	bhi	40564 <startup-0x1ffbfa9c>
     560:	00008f2e 	andeq	r8, r0, lr, lsr #30
     564:	6d910200 	lfmvs	f0, 4, [r1]
     568:	7a041a00 	bvc	106d70 <startup-0x1fef9290>
     56c:	1b000004 	blne	584 <startup-0x1ffffa7c>
     570:	000003ca 	andeq	r0, r0, sl, asr #7
     574:	10067601 	andne	r7, r6, r1, lsl #12
     578:	24200000 	strtcs	r0, [r0], #-0
     57c:	01000000 	mrseq	r0, (UNDEF: 0)
     580:	004b189c 	umaaleq	r1, fp, ip, r8
     584:	76010000 	strvc	r0, [r1], -r0
     588:	0000b128 	andeq	fp, r0, r8, lsr #2
     58c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     590:	037f0000 	cmneq	pc, #0
     594:	00040000 	andeq	r0, r4, r0
     598:	00000196 	muleq	r0, r6, r1
     59c:	00ff0104 	rscseq	r0, pc, r4, lsl #2
     5a0:	f70c0000 			; <UNDEFINED> instruction: 0xf70c0000
     5a4:	22000003 	andcs	r0, r0, #3
     5a8:	d0000003 	andle	r0, r0, r3
     5ac:	08200001 	stmdaeq	r0!, {r0}
     5b0:	ce000002 	cdpgt	0, 0, cr0, cr0, cr2, {0}
     5b4:	02000002 	andeq	r0, r0, #2
     5b8:	00f30601 	rscseq	r0, r3, r1, lsl #12
     5bc:	01020000 	mrseq	r0, (UNDEF: 2)
     5c0:	0000f108 	andeq	pc, r0, r8, lsl #2
     5c4:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
     5c8:	00000064 	andeq	r0, r0, r4, rrx
     5cc:	01070202 	tsteq	r7, r2, lsl #4
     5d0:	03000002 	movweq	r0, #2
     5d4:	000002e7 	andeq	r0, r0, r7, ror #5
     5d8:	4d184d02 	ldcmi	13, cr4, [r8, #-8]
     5dc:	02000000 	andeq	r0, r0, #0
     5e0:	00c70504 	sbceq	r0, r7, r4, lsl #10
     5e4:	7f030000 	svcvc	0x00030000
     5e8:	02000000 	andeq	r0, r0, #0
     5ec:	0060194f 	rsbeq	r1, r0, pc, asr #18
     5f0:	04020000 	streq	r0, [r2], #-0
     5f4:	00019e07 	andeq	r9, r1, r7, lsl #28
     5f8:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
     5fc:	000000c2 	andeq	r0, r0, r2, asr #1
     600:	99070802 	stmdbls	r7, {r1, fp}
     604:	04000001 	streq	r0, [r0], #-1
     608:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     60c:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
     610:	0001a307 	andeq	sl, r1, r7, lsl #6
     614:	02e90300 	rsceq	r0, r9, #0, 6
     618:	2c030000 	stccs	0, cr0, [r3], {-0}
     61c:	00004113 	andeq	r4, r0, r3, lsl r1
     620:	00830500 	addeq	r0, r3, r0, lsl #10
     624:	81030000 	mrshi	r0, (UNDEF: 3)
     628:	03000000 	movweq	r0, #0
     62c:	00541430 	subseq	r1, r4, r0, lsr r4
     630:	94050000 	strls	r0, [r5], #-0
     634:	06000000 	streq	r0, [r0], -r0
     638:	00000315 	andeq	r0, r0, r5, lsl r3
     63c:	1906fa04 	stmdbne	r6, {r2, r9, fp, ip, sp, lr, pc}
     640:	0000008f 	andeq	r0, r0, pc, lsl #1
     644:	00025f07 	andeq	r5, r2, r7, lsl #30
     648:	113b0500 	teqne	fp, r0, lsl #10
     64c:	00000094 	muleq	r0, r4, r0
     650:	2c010708 	stccs	7, cr0, [r1], {8}
     654:	06000000 	streq	r0, [r0], -r0
     658:	da0e035d 	ble	3813d4 <startup-0x1fc7ec2c>
     65c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     660:	000022b2 			; <UNDEFINED> instruction: 0x000022b2
     664:	45530a00 	ldrbmi	r0, [r3, #-2560]	; 0xfffff600
     668:	00010054 	andeq	r0, r1, r4, asr r0
     66c:	0013fb0b 	andseq	pc, r3, fp, lsl #22
     670:	035d0600 	cmpeq	sp, #0, 12
     674:	0000be28 	andeq	fp, r0, r8, lsr #28
     678:	158d0b00 	strne	r0, [sp, #2816]	; 0xb00
     67c:	5d060000 	stcpl	0, cr0, [r6, #-0]
     680:	00be3403 	adcseq	r3, lr, r3, lsl #8
     684:	07080000 	streq	r0, [r8, -r0]
     688:	00002c01 	andeq	r2, r0, r1, lsl #24
     68c:	035f0600 	cmpeq	pc, #0, 12
     690:	0001100e 	andeq	r1, r1, lr
     694:	00ac0900 	adceq	r0, ip, r0, lsl #18
     698:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     69c:	000003c3 	andeq	r0, r0, r3, asr #7
     6a0:	d70b0001 	strle	r0, [fp, -r1]
     6a4:	06000002 	streq	r0, [r0], -r2
     6a8:	f42f035f 	vld2.16	{d0-d3}, [pc :64]
     6ac:	0c000000 	stceq	0, cr0, [r0], {-0}
     6b0:	051f0618 	ldreq	r0, [pc, #-1560]	; a0 <startup-0x1fffff60>
     6b4:	00017b09 	andeq	r7, r1, r9, lsl #22
     6b8:	4d490d00 	stclmi	13, cr0, [r9, #-0]
     6bc:	21060052 	qaddcs	r0, r2, r6
     6c0:	00a01105 	adceq	r1, r0, r5, lsl #2
     6c4:	0d000000 	stceq	0, cr0, [r0, #-0]
     6c8:	00524d45 	subseq	r4, r2, r5, asr #26
     6cc:	11052206 	tstne	r5, r6, lsl #4
     6d0:	000000a0 	andeq	r0, r0, r0, lsr #1
     6d4:	05110e04 	ldreq	r0, [r1, #-3588]	; 0xfffff1fc
     6d8:	23060000 	movwcs	r0, #24576	; 0x6000
     6dc:	00a01105 	adceq	r1, r0, r5, lsl #2
     6e0:	0e080000 	cdpeq	0, 0, cr0, cr8, cr0, {0}
     6e4:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
     6e8:	11052406 	tstne	r5, r6, lsl #8
     6ec:	000000a0 	andeq	r0, r0, r0, lsr #1
     6f0:	05c90e0c 	strbeq	r0, [r9, #3596]	; 0xe0c
     6f4:	25060000 	strcs	r0, [r6, #-0]
     6f8:	00a01105 	adceq	r1, r0, r5, lsl #2
     6fc:	0d100000 	ldceq	0, cr0, [r0, #-0]
     700:	06005250 			; <UNDEFINED> instruction: 0x06005250
     704:	a0110526 	andsge	r0, r1, r6, lsr #10
     708:	14000000 	strne	r0, [r0], #-0
     70c:	05040b00 	streq	r0, [r4, #-2816]	; 0xfffff500
     710:	27060000 	strcs	r0, [r6, -r0]
     714:	011d0305 	tsteq	sp, r5, lsl #6
     718:	070f0000 	streq	r0, [pc, -r0]
     71c:	00002c01 	andeq	r2, r0, r1, lsl #24
     720:	01370700 	teqeq	r7, r0, lsl #14
     724:	000001a3 	andeq	r0, r0, r3, lsr #3
     728:	0004d009 	andeq	sp, r4, r9
     72c:	7c090000 	stcvc	0, cr0, [r9], {-0}
     730:	04000004 	streq	r0, [r0], #-4
     734:	04f30300 	ldrbteq	r0, [r3], #768	; 0x300
     738:	3a070000 	bcc	1c0740 <startup-0x1fe3f8c0>
     73c:	00018802 	andeq	r8, r1, r2, lsl #16
     740:	01070f00 	tsteq	r7, r0, lsl #30
     744:	0000002c 	andeq	r0, r0, ip, lsr #32
     748:	d0014307 	andle	r4, r1, r7, lsl #6
     74c:	09000001 	stmdbeq	r0, {r0}
     750:	00000516 	andeq	r0, r0, r6, lsl r5
     754:	059b0908 	ldreq	r0, [fp, #2312]	; 0x908
     758:	090c0000 	stmdbeq	ip, {}	; <UNPREDICTABLE>
     75c:	0000052a 	andeq	r0, r0, sl, lsr #10
     760:	b5030010 	strlt	r0, [r3, #-16]
     764:	07000005 	streq	r0, [r0, -r5]
     768:	01af0247 			; <UNDEFINED> instruction: 0x01af0247
     76c:	08100000 	ldmdaeq	r0, {}	; <UNPREDICTABLE>
     770:	1a095007 	bne	254794 <startup-0x1fdab86c>
     774:	11000002 	tstne	r0, r2
     778:	000003e3 	andeq	r0, r0, r3, ror #7
     77c:	940c5207 	strls	r5, [ip], #-519	; 0xfffffdf9
     780:	00000000 	andeq	r0, r0, r0
     784:	0003ed11 	andeq	lr, r3, r1, lsl sp
     788:	14550700 	ldrbne	r0, [r5], #-1792	; 0xfffff900
     78c:	000001a3 	andeq	r0, r0, r3, lsr #3
     790:	046f1104 	strbteq	r1, [pc], #-260	; 798 <startup-0x1ffff868>
     794:	58070000 	stmdapl	r7, {}	; <UNPREDICTABLE>
     798:	0001d017 	andeq	sp, r1, r7, lsl r0
     79c:	62110500 	andsvs	r0, r1, #0, 10
     7a0:	07000004 	streq	r0, [r0, -r4]
     7a4:	0110135b 	tsteq	r0, fp, asr r3
     7a8:	00060000 	andeq	r0, r6, r0
     7ac:	0004af03 	andeq	sl, r4, r3, lsl #30
     7b0:	025d0700 	subseq	r0, sp, #0, 14
     7b4:	000001dc 	ldrdeq	r0, [r0], -ip
     7b8:	00058412 	andeq	r8, r5, r2, lsl r4
     7bc:	01200100 			; <UNDEFINED> instruction: 0x01200100
     7c0:	0003bc06 	andeq	fp, r3, r6, lsl #24
     7c4:	00001c20 	andeq	r1, r0, r0, lsr #24
     7c8:	4e9c0100 	fmlmie	f0, f4, f0
     7cc:	13000002 	movwne	r0, #2
     7d0:	000003e3 	andeq	r0, r0, r3, ror #7
     7d4:	26012001 	strcs	r2, [r1], -r1
     7d8:	00000094 	muleq	r0, r4, r0
     7dc:	00749102 	rsbseq	r9, r4, r2, lsl #2
     7e0:	00057314 	andeq	r7, r5, r4, lsl r3
     7e4:	01080100 	mrseq	r0, (UNDEF: 24)
     7e8:	0000e70a 	andeq	lr, r0, sl, lsl #14
     7ec:	00038000 	andeq	r8, r3, r0
     7f0:	00003c20 	andeq	r3, r0, r0, lsr #24
     7f4:	8a9c0100 	bhi	fe700bfc <a+0xde6fcc68>
     7f8:	13000002 	movwne	r0, #2
     7fc:	000003e3 	andeq	r0, r0, r3, ror #7
     800:	24010801 	strcs	r0, [r1], #-2049	; 0xfffff7ff
     804:	00000094 	muleq	r0, r4, r0
     808:	156c9102 	strbne	r9, [ip, #-258]!	; 0xfffffefe
     80c:	0000048c 	andeq	r0, r0, ip, lsl #9
     810:	0e010a01 	vmlaeq.f32	s0, s2, s2
     814:	000000da 	ldrdeq	r0, [r0], -sl
     818:	00779102 	rsbseq	r9, r7, r2, lsl #2
     81c:	0004e416 	andeq	lr, r4, r6, lsl r4
     820:	06fa0100 	ldrbteq	r0, [sl], r0, lsl #2
     824:	20000364 	andcs	r0, r0, r4, ror #6
     828:	0000001c 	andeq	r0, r0, ip, lsl r0
     82c:	02b09c01 	adcseq	r9, r0, #256	; 0x100
     830:	e3170000 	tst	r7, #0
     834:	01000003 	tsteq	r0, r3
     838:	00941efa 			; <UNDEFINED> instruction: 0x00941efa
     83c:	91020000 	mrsls	r0, (UNDEF: 2)
     840:	50180074 	andspl	r0, r8, r4, ror r0
     844:	01000005 	tsteq	r0, r5
     848:	00da0ce3 	sbcseq	r0, sl, r3, ror #25
     84c:	03280000 			; <UNDEFINED> instruction: 0x03280000
     850:	003c2000 	eorseq	r2, ip, r0
     854:	9c010000 	stcls	0, cr0, [r1], {-0}
     858:	000002e9 	andeq	r0, r0, r9, ror #5
     85c:	0003e317 	andeq	lr, r3, r7, lsl r3
     860:	28e30100 	stmiacs	r3!, {r8}^
     864:	00000094 	muleq	r0, r4, r0
     868:	196c9102 	stmdbne	ip!, {r1, r8, ip, pc}^
     86c:	0000048c 	andeq	r0, r0, ip, lsl #9
     870:	da0ee501 	ble	3b9c7c <startup-0x1fc46384>
     874:	02000000 	andeq	r0, r0, #0
     878:	16007791 			; <UNDEFINED> instruction: 0x16007791
     87c:	00000496 	muleq	r0, r6, r4
     880:	0806c501 	stmdaeq	r6, {r0, r8, sl, lr, pc}
     884:	20200003 	eorcs	r0, r0, r3
     888:	01000000 	mrseq	r0, (UNDEF: 0)
     88c:	00030f9c 	muleq	r3, ip, pc	; <UNPREDICTABLE>
     890:	03e31700 	mvneq	r1, #0, 14
     894:	c5010000 	strgt	r0, [r1, #-0]
     898:	00009428 	andeq	r9, r0, r8, lsr #8
     89c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     8a0:	05631600 	strbeq	r1, [r3, #-1536]!	; 0xfffffa00
     8a4:	b6010000 	strlt	r0, [r1], -r0
     8a8:	0002e006 	andeq	lr, r2, r6
     8ac:	00002820 	andeq	r2, r0, r0, lsr #16
     8b0:	359c0100 	ldrcc	r0, [ip, #256]	; 0x100
     8b4:	17000003 	strne	r0, [r0, -r3]
     8b8:	000004c0 	andeq	r0, r0, r0, asr #9
     8bc:	3528b601 	strcc	fp, [r8, #-1537]!	; 0xfffff9ff
     8c0:	02000003 	andeq	r0, r0, #3
     8c4:	1a007491 	bne	1db10 <startup-0x1ffe24f0>
     8c8:	00021a04 	andeq	r1, r2, r4, lsl #20
     8cc:	05461600 	strbeq	r1, [r6, #-1536]	; 0xfffffa00
     8d0:	7e010000 	cdpvc	0, 0, cr0, cr1, cr0, {0}
     8d4:	00020006 	andeq	r0, r2, r6
     8d8:	0000e020 	andeq	lr, r0, r0, lsr #32
     8dc:	709c0100 	addsvc	r0, ip, r0, lsl #2
     8e0:	17000003 	strne	r0, [r0, -r3]
     8e4:	000004c0 	andeq	r0, r0, r0, asr #9
     8e8:	35227e01 	strcc	r7, [r2, #-3585]!	; 0xfffff1ff
     8ec:	02000003 	andeq	r0, r0, #3
     8f0:	741b6c91 	ldrvc	r6, [fp], #-3217	; 0xfffff36f
     8f4:	0100706d 	tsteq	r0, sp, rrx
     8f8:	00940c80 	addseq	r0, r4, r0, lsl #25
     8fc:	91020000 	mrsls	r0, (UNDEF: 2)
     900:	cf1c0074 	svcgt	0x001c0074
     904:	01000005 	tsteq	r0, r5
     908:	01d0066e 	bicseq	r0, r0, lr, ror #12
     90c:	00302000 	eorseq	r2, r0, r0
     910:	9c010000 	stcls	0, cr0, [r1], {-0}
     914:	00016c00 	andeq	r6, r1, r0, lsl #24
     918:	80000400 	andhi	r0, r0, r0, lsl #8
     91c:	04000003 	streq	r0, [r0], #-3
     920:	0000ff01 	andeq	pc, r0, r1, lsl #30
     924:	06320c00 	ldrteq	r0, [r2], -r0, lsl #24
     928:	03220000 			; <UNDEFINED> instruction: 0x03220000
     92c:	03d80000 	bicseq	r0, r8, #0
     930:	00ba2000 	adcseq	r2, sl, r0
     934:	06050000 	streq	r0, [r5], -r0
     938:	66020000 	strvs	r0, [r2], -r0
     93c:	1a000006 	bne	95c <startup-0x1ffff6a4>
     940:	da100301 	ble	40154c <startup-0x1fbfeab4>
     944:	03000000 	movweq	r0, #0
     948:	01007273 	tsteq	r0, r3, ror r2
     94c:	00e11d04 	rsceq	r1, r1, r4, lsl #26
     950:	04000000 	streq	r0, [r0], #-0
     954:	0000060a 	andeq	r0, r0, sl, lsl #12
     958:	e11d0501 	tst	sp, r1, lsl #10
     95c:	02000000 	andeq	r0, r0, #0
     960:	00726403 	rsbseq	r6, r2, r3, lsl #8
     964:	e11d0601 	tst	sp, r1, lsl #12
     968:	04000000 	streq	r0, [r0], #-0
     96c:	00061204 	andeq	r1, r6, r4, lsl #4
     970:	1d070100 	stfnes	f0, [r7, #-0]
     974:	000000e1 	andeq	r0, r0, r1, ror #1
     978:	72620306 	rsbvc	r0, r2, #402653184	; 0x18000000
     97c:	08010072 	stmdaeq	r1, {r1, r4, r5, r6}
     980:	0000e11d 	andeq	lr, r0, sp, lsl r1
     984:	1a040800 	bne	10298c <startup-0x1fefd674>
     988:	01000006 	tsteq	r0, r6
     98c:	00e11d09 	rsceq	r1, r1, r9, lsl #26
     990:	030a0000 	movweq	r0, #40960	; 0xa000
     994:	00317263 	eorseq	r7, r1, r3, ror #4
     998:	e11d0a01 	tst	sp, r1, lsl #20
     99c:	0c000000 	stceq	0, cr0, [r0], {-0}
     9a0:	00062204 	andeq	r2, r6, r4, lsl #4
     9a4:	1d0b0100 	stfnes	f0, [fp, #-0]
     9a8:	000000e1 	andeq	r0, r0, r1, ror #1
     9ac:	7263030e 	rsbvc	r0, r3, #939524096	; 0x38000000
     9b0:	0c010032 	stceq	0, cr0, [r1], {50}	; 0x32
     9b4:	0000e11d 	andeq	lr, r0, sp, lsl r1
     9b8:	2a041000 	bcs	1049c0 <startup-0x1fefb640>
     9bc:	01000006 	tsteq	r0, r6
     9c0:	00e11d0d 	rsceq	r1, r1, sp, lsl #26
     9c4:	03120000 	tsteq	r2, #0
     9c8:	00337263 	eorseq	r7, r3, r3, ror #4
     9cc:	e11d0e01 	tst	sp, r1, lsl #28
     9d0:	14000000 	strne	r0, [r0], #-0
     9d4:	0005ea04 	andeq	lr, r5, r4, lsl #20
     9d8:	1d0f0100 	stfnes	f0, [pc, #-0]	; 9e0 <startup-0x1ffff620>
     9dc:	000000e1 	andeq	r0, r0, r1, ror #1
     9e0:	06050416 			; <UNDEFINED> instruction: 0x06050416
     9e4:	10010000 	andne	r0, r1, r0
     9e8:	0000e11d 	andeq	lr, r0, sp, lsl r1
     9ec:	05001800 	streq	r1, [r0, #-2048]	; 0xfffff800
     9f0:	02010702 	andeq	r0, r1, #524288	; 0x80000
     9f4:	da060000 	ble	1809fc <startup-0x1fe7f604>
     9f8:	07000000 	streq	r0, [r0, -r0]
     9fc:	00000666 	andeq	r0, r0, r6, ror #12
     a00:	25031101 	strcs	r1, [r3, #-257]	; 0xfffffeff
     a04:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     a08:	000005e4 	andeq	r0, r0, r4, ror #11
     a0c:	68062b01 	stmdavs	r6, {r0, r8, r9, fp, sp}
     a10:	2a200004 	bcs	800a28 <startup-0x1f7ff5d8>
     a14:	01000000 	mrseq	r0, (UNDEF: 0)
     a18:	0001169c 	muleq	r1, ip, r6
     a1c:	00730900 	rsbseq	r0, r3, r0, lsl #18
     a20:	16122b01 	ldrne	r2, [r2], -r1, lsl #22
     a24:	02000001 	andeq	r0, r0, #1
     a28:	0a007491 	beq	1dc74 <startup-0x1ffe238c>
     a2c:	00011c04 	andeq	r1, r1, r4, lsl #24
     a30:	08010500 	stmdaeq	r1, {r8, sl}
     a34:	000000fa 	strdeq	r0, [r0], -sl
     a38:	0005f20b 	andeq	pc, r5, fp, lsl #4
     a3c:	06250100 	strteq	r0, [r5], -r0, lsl #2
     a40:	0000011c 	andeq	r0, r0, ip, lsl r1
     a44:	20000440 	andcs	r0, r0, r0, asr #8
     a48:	00000028 	andeq	r0, r0, r8, lsr #32
     a4c:	fb0b9c01 	blx	2e7a5a <startup-0x1fd185a6>
     a50:	01000005 	tsteq	r0, r5
     a54:	011c061e 	tsteq	ip, lr, lsl r6
     a58:	04180000 	ldreq	r0, [r8], #-0
     a5c:	00282000 	eoreq	r2, r8, r0
     a60:	9c010000 	stcls	0, cr0, [r1], {-0}
     a64:	0005db0c 	andeq	sp, r5, ip, lsl #22
     a68:	06150100 	ldreq	r0, [r5], -r0, lsl #2
     a6c:	200003d8 	ldrdcs	r0, [r0], -r8
     a70:	00000040 	andeq	r0, r0, r0, asr #32
     a74:	63099c01 	movwvs	r9, #39937	; 0x9c01
     a78:	15150100 	ldrne	r0, [r5, #-256]	; 0xffffff00
     a7c:	0000011c 	andeq	r0, r0, ip, lsl r1
     a80:	00779102 	rsbseq	r9, r7, r2, lsl #2
     a84:	000a7300 	andeq	r7, sl, r0, lsl #6
     a88:	54000400 	strpl	r0, [r0], #-1024	; 0xfffffc00
     a8c:	04000004 	streq	r0, [r0], #-4
     a90:	0000ff01 	andeq	pc, r0, r1, lsl #30
     a94:	0b7a0c00 	bleq	1e83a9c <startup-0x1e17c564>
     a98:	03220000 			; <UNDEFINED> instruction: 0x03220000
	...
     aa4:	06e30000 	strbteq	r0, [r3], r0
     aa8:	fc020000 	stc2	0, cr0, [r2], {-0}
     aac:	0500000a 	streq	r0, [r0, #-10]
     ab0:	00025401 	andeq	r5, r2, r1, lsl #8
     ab4:	0ec80600 	cdpeq	6, 12, cr0, cr8, cr0, {0}
     ab8:	00000254 	andeq	r0, r0, r4, asr r2
     abc:	000dd403 	andeq	sp, sp, r3, lsl #8
     ac0:	f8037200 			; <UNDEFINED> instruction: 0xf8037200
     ac4:	7400000b 	strvc	r0, [r0], #-11
     ac8:	0008f303 	andeq	pc, r8, r3, lsl #6
     acc:	8e037500 	cfsh32hi	mvfx7, mvfx3, #0
     ad0:	7600000a 	strvc	r0, [r0], -sl
     ad4:	0009e803 	andeq	lr, r9, r3, lsl #16
     ad8:	d2037b00 	andle	r7, r3, #0, 22
     adc:	7c00000e 	stcvc	0, cr0, [r0], {14}
     ae0:	0008c103 	andeq	ip, r8, r3, lsl #2
     ae4:	81037e00 	tsthi	r3, r0, lsl #28
     ae8:	7f00000a 	svcvc	0x0000000a
     aec:	00079704 	andeq	r9, r7, r4, lsl #14
     af0:	80040000 	andhi	r0, r4, r0
     af4:	01000006 	tsteq	r0, r6
     af8:	000de804 	andeq	lr, sp, r4, lsl #16
     afc:	7f040200 	svcvc	0x00040200
     b00:	03000007 	movweq	r0, #7
     b04:	000cdf04 	andeq	sp, ip, r4, lsl #30
     b08:	4e040400 	cfcpysmi	mvf0, mvf4
     b0c:	0500000f 	streq	r0, [r0, #-15]
     b10:	0007dc04 	andeq	sp, r7, r4, lsl #24
     b14:	72040600 	andvc	r0, r4, #0, 12
     b18:	0700000f 	streq	r0, [r0, -pc]
     b1c:	000cd404 	andeq	sp, ip, r4, lsl #8
     b20:	53040800 	movwpl	r0, #18432	; 0x4800
     b24:	0900000b 	stmdbeq	r0, {r0, r1, r3}
     b28:	000c6504 	andeq	r6, ip, r4, lsl #10
     b2c:	2b040a00 	blcs	103334 <startup-0x1fefcccc>
     b30:	0b000008 	bleq	b58 <startup-0x1ffff4a8>
     b34:	000a4204 	andeq	r4, sl, r4, lsl #4
     b38:	68040c00 	stmdavs	r4, {sl, fp}
     b3c:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
     b40:	00096c04 	andeq	r6, r9, r4, lsl #24
     b44:	1c040e00 	stcne	14, cr0, [r4], {-0}
     b48:	0f00000b 	svceq	0x0000000b
     b4c:	00085204 	andeq	r5, r8, r4, lsl #4
     b50:	7e041000 	cdpvc	0, 0, cr1, cr4, cr0, {0}
     b54:	11000009 	tstne	r0, r9
     b58:	000f0204 	andeq	r0, pc, r4, lsl #4
     b5c:	0b041200 	bleq	105364 <startup-0x1fefac9c>
     b60:	1300000a 	movwne	r0, #10
     b64:	00067204 	andeq	r7, r6, r4, lsl #4
     b68:	a1041400 	tstge	r4, r0, lsl #8
     b6c:	15000006 	strne	r0, [r0, #-6]
     b70:	000f3204 	andeq	r3, pc, r4, lsl #4
     b74:	64041600 	strvs	r1, [r4], #-1536	; 0xfffffa00
     b78:	17000008 	strne	r0, [r0, -r8]
     b7c:	000c5204 	andeq	r5, ip, r4, lsl #4
     b80:	ee041800 	cdp	8, 0, cr1, cr4, cr0, {0}
     b84:	1900000a 	stmdbne	r0, {r1, r3}
     b88:	000caa04 	andeq	sl, ip, r4, lsl #20
     b8c:	af041a00 	svcge	0x00041a00
     b90:	1b000009 	blne	bbc <startup-0x1ffff444>
     b94:	000e2904 	andeq	r2, lr, r4, lsl #18
     b98:	68041c00 	stmdavs	r4, {sl, fp, ip}
     b9c:	1d00000f 	stcne	0, cr0, [r0, #-60]	; 0xffffffc4
     ba0:	000d3604 	andeq	r3, sp, r4, lsl #12
     ba4:	de041e00 	cdple	14, 0, cr1, cr4, cr0, {0}
     ba8:	1f000006 	svcne	0x00000006
     bac:	000ef504 	andeq	pc, lr, r4, lsl #10
     bb0:	3d042000 	stccc	0, cr2, [r4, #-0]
     bb4:	21000008 	tstcs	r0, r8
     bb8:	00075b04 	andeq	r5, r7, r4, lsl #22
     bbc:	38042200 	stmdacc	r4, {r9, sp}
     bc0:	2300000a 	movwcs	r0, #10
     bc4:	000b5e04 	andeq	r5, fp, r4, lsl #28
     bc8:	95042400 	strls	r2, [r4, #-1024]	; 0xfffffc00
     bcc:	2500000e 	strcs	r0, [r0, #-14]
     bd0:	000d2004 	andeq	r2, sp, r4
     bd4:	0a042600 	beq	10a3dc <startup-0x1fef5c24>
     bd8:	2700000e 	strcs	r0, [r0, -lr]
     bdc:	000a1804 	andeq	r1, sl, r4, lsl #16
     be0:	41042800 	tstmi	r4, r0, lsl #16
     be4:	29000007 	stmdbcs	r0, {r0, r1, r2}
     be8:	0008b004 	andeq	fp, r8, r4
     bec:	6d042a00 	vstrvs	s4, [r4, #-0]
     bf0:	2b00000a 	blcs	c20 <startup-0x1ffff3e0>
     bf4:	0008cd04 	andeq	ip, r8, r4, lsl #26
     bf8:	af042c00 	svcge	0x00042c00
     bfc:	2d00000a 	stccs	0, cr0, [r0, #-40]	; 0xffffffd8
     c00:	000d7f04 	andeq	r7, sp, r4, lsl #30
     c04:	4b042e00 	blmi	10c40c <startup-0x1fef3bf4>
     c08:	2f00000d 	svccs	0x0000000d
     c0c:	000c4804 	andeq	r4, ip, r4, lsl #16
     c10:	a1043000 	mrsge	r3, (UNDEF: 4)
     c14:	31000007 	tstcc	r0, r7
     c18:	000b3a04 	andeq	r3, fp, r4, lsl #20
     c1c:	22043200 	andcs	r3, r4, #0, 4
     c20:	3300000c 	movwcc	r0, #12
     c24:	0008a504 	andeq	sl, r8, r4, lsl #10
     c28:	9f043400 	svcls	0x00043400
     c2c:	3500000c 	strcc	r0, [r0, #-12]
     c30:	00089704 	andeq	r9, r8, r4, lsl #14
     c34:	9a043600 	bls	10e43c <startup-0x1fef1bc4>
     c38:	3700000d 	strcc	r0, [r0, -sp]
     c3c:	000df804 	andeq	pc, sp, r4, lsl #16
     c40:	0b043800 	bleq	10ec48 <startup-0x1fef13b8>
     c44:	3900000f 	stmdbcc	r0, {r0, r1, r2, r3}
     c48:	0009f904 	andeq	pc, r9, r4, lsl #18
     c4c:	01043a00 	tsteq	r4, r0, lsl #20
     c50:	3b00000b 	blcc	c84 <startup-0x1ffff37c>
     c54:	000c3604 	andeq	r3, ip, r4, lsl #12
     c58:	e5043c00 	str	r3, [r4, #-3072]	; 0xfffff400
     c5c:	3d00000a 	stccc	0, cr0, [r0, #-40]	; 0xffffffd8
     c60:	00087604 	andeq	r7, r8, r4, lsl #12
     c64:	be043e00 	cdplt	14, 0, cr3, cr4, cr0, {0}
     c68:	3f00000b 	svccc	0x0000000b
     c6c:	00068904 	andeq	r8, r6, r4, lsl #18
     c70:	ce044000 	cdpgt	0, 0, cr4, cr4, cr0, {0}
     c74:	41000007 	tstmi	r0, r7
     c78:	000f4004 	andeq	r4, pc, r4
     c7c:	0a044200 	beq	111484 <startup-0x1feeeb7c>
     c80:	4300000d 	movwmi	r0, #13
     c84:	0006f204 	andeq	pc, r6, r4, lsl #4
     c88:	af044400 	svcge	0x00044400
     c8c:	45000006 	strmi	r0, [r0, #-6]
     c90:	00093604 	andeq	r3, r9, r4, lsl #12
     c94:	2e044600 	cfmadd32cs	mvax0, mvfx4, mvfx4, mvfx0
     c98:	4700000b 	strmi	r0, [r0, -fp]
     c9c:	00099004 	andeq	r9, r9, r4
     ca0:	d1044800 	tstle	r4, r0, lsl #16
     ca4:	49000006 	stmdbmi	r0, {r1, r2}
     ca8:	0009bc04 	andeq	fp, r9, r4, lsl #24
     cac:	23044a00 	movwcs	r4, #18944	; 0x4a00
     cb0:	4b000009 	blmi	cdc <startup-0x1ffff324>
     cb4:	000f5704 	andeq	r5, pc, r4, lsl #14
     cb8:	ec044c00 	stc	12, cr4, [r4], {-0}
     cbc:	4d00000b 	stcmi	0, cr0, [r0, #-44]	; 0xffffffd4
     cc0:	000e6204 	andeq	r6, lr, r4, lsl #4
     cc4:	75044e00 	strvc	r4, [r4, #-3584]	; 0xfffff200
     cc8:	4f00000d 	svcmi	0x0000000d
     ccc:	000c7004 	andeq	r7, ip, r4
     cd0:	c9045000 	stmdbgt	r4, {ip, lr}
     cd4:	5100000e 	tstpl	r0, lr
     cd8:	06010500 	streq	r0, [r1], -r0, lsl #10
     cdc:	000000f3 	strdeq	r0, [r0], -r3
     ce0:	0000dc06 	andeq	sp, r0, r6, lsl #24
     ce4:	182b0200 	stmdane	fp!, {r9}
     ce8:	00000267 	andeq	r0, r0, r7, ror #4
     cec:	f1080105 	cps	#5
     cf0:	05000000 	streq	r0, [r0, #-0]
     cf4:	00640502 	rsbeq	r0, r4, r2, lsl #10
     cf8:	e0060000 	and	r0, r6, r0
     cfc:	02000008 	andeq	r0, r0, #8
     d00:	02811939 	addeq	r1, r1, #933888	; 0xe4000
     d04:	02050000 	andeq	r0, r5, #0
     d08:	00020107 	andeq	r0, r2, r7, lsl #2
     d0c:	02e70600 	rsceq	r0, r7, #0, 12
     d10:	4d020000 	stcmi	0, cr0, [r2, #-0]
     d14:	00029418 	andeq	r9, r2, r8, lsl r4
     d18:	05040500 	streq	r0, [r4, #-1280]	; 0xfffffb00
     d1c:	000000c7 	andeq	r0, r0, r7, asr #1
     d20:	00007f06 	andeq	r7, r0, r6, lsl #30
     d24:	194f0200 	stmdbne	pc, {r9}^	; <UNPREDICTABLE>
     d28:	000002a7 	andeq	r0, r0, r7, lsr #5
     d2c:	9e070405 	cdpls	4, 0, cr0, cr7, cr5, {0}
     d30:	05000001 	streq	r0, [r0, #-1]
     d34:	00c20508 	sbceq	r0, r2, r8, lsl #10
     d38:	08050000 	stmdaeq	r5, {}	; <UNPREDICTABLE>
     d3c:	00019907 	andeq	r9, r1, r7, lsl #18
     d40:	05040700 	streq	r0, [r4, #-1792]	; 0xfffff900
     d44:	00746e69 	rsbseq	r6, r4, r9, ror #28
     d48:	a3070405 	movwge	r0, #29701	; 0x7405
     d4c:	06000001 	streq	r0, [r0], -r1
     d50:	000000de 	ldrdeq	r0, [r0], -lr
     d54:	5b131803 	blpl	4c6d68 <startup-0x1fb39298>
     d58:	06000002 	streq	r0, [r0], -r2
     d5c:	000008e2 	andeq	r0, r0, r2, ror #17
     d60:	75142403 	ldrvc	r2, [r4, #-1027]	; 0xfffffbfd
     d64:	08000002 	stmdaeq	r0, {r1}
     d68:	000002d6 	ldrdeq	r0, [r0], -r6
     d6c:	0002e906 	andeq	lr, r2, r6, lsl #18
     d70:	132c0300 			; <UNDEFINED> instruction: 0x132c0300
     d74:	00000288 	andeq	r0, r0, r8, lsl #5
     d78:	0002e708 	andeq	lr, r2, r8, lsl #14
     d7c:	00810600 	addeq	r0, r1, r0, lsl #12
     d80:	30030000 	andcc	r0, r3, r0
     d84:	00029b14 	andeq	r9, r2, r4, lsl fp
     d88:	02f80800 	rscseq	r0, r8, #0, 16
     d8c:	15090000 	strne	r0, [r9, #-0]
     d90:	04000003 	streq	r0, [r0], #-3
     d94:	f31906fa 	vmin.u16	q0, <illegal reg q12.5>, q13
     d98:	0a000002 	beq	da8 <startup-0x1ffff258>
     d9c:	0000025f 	andeq	r0, r0, pc, asr r2
     da0:	f8113b05 			; <UNDEFINED> instruction: 0xf8113b05
     da4:	0b000002 	bleq	db4 <startup-0x1ffff24c>
     da8:	02670107 	rsbeq	r0, r7, #-1073741823	; 0xc0000001
     dac:	5f060000 	svcpl	0x00060000
     db0:	033e0e03 	teqeq	lr, #3, 28	; 0x30
     db4:	ac040000 	stcge	0, cr0, [r4], {-0}
     db8:	00000000 	andeq	r0, r0, r0
     dbc:	0003c304 	andeq	ip, r3, r4, lsl #6
     dc0:	0c000100 	stfeqs	f0, [r0], {-0}
     dc4:	000002d7 	ldrdeq	r0, [r0], -r7
     dc8:	2f035f06 	svccs	0x00035f06
     dcc:	00000322 	andeq	r0, r0, r2, lsr #6
     dd0:	c306280d 	movwgt	r2, #26637	; 0x680d
     dd4:	03e20905 	mvneq	r0, #81920	; 0x14000
     dd8:	e60e0000 	str	r0, [lr], -r0
     ddc:	0600000b 	streq	r0, [r0], -fp
     de0:	041105c5 	ldreq	r0, [r1], #-1477	; 0xfffffa3b
     de4:	00000003 	andeq	r0, r0, r3
     de8:	0006eb0e 	andeq	lr, r6, lr, lsl #22
     dec:	05c60600 	strbeq	r0, [r6, #1536]	; 0x600
     df0:	00030411 	andeq	r0, r3, r1, lsl r4
     df4:	eb0e0400 	bl	381dfc <startup-0x1fc7e204>
     df8:	06000008 	streq	r0, [r0], -r8
     dfc:	041105c7 	ldreq	r0, [r1], #-1479	; 0xfffffa39
     e00:	08000003 	stmdaeq	r0, {r0, r1}
     e04:	00066c0e 	andeq	r6, r6, lr, lsl #24
     e08:	05c80600 	strbeq	r0, [r8, #1536]	; 0x600
     e0c:	00030411 	andeq	r0, r3, r1, lsl r4
     e10:	490f0c00 	stmdbmi	pc, {sl, fp}	; <UNPREDICTABLE>
     e14:	06005244 	streq	r5, [r0], -r4, asr #4
     e18:	041105c9 	ldreq	r0, [r1], #-1481	; 0xfffffa37
     e1c:	10000003 	andne	r0, r0, r3
     e20:	52444f0f 	subpl	r4, r4, #15, 30	; 0x3c
     e24:	05ca0600 	strbeq	r0, [sl, #1536]	; 0x600
     e28:	00030411 	andeq	r0, r3, r1, lsl r4
     e2c:	3d0e1400 	cfstrscc	mvf1, [lr, #-0]
     e30:	0600000e 	streq	r0, [r0], -lr
     e34:	e21105cb 	ands	r0, r1, #851443712	; 0x32c00000
     e38:	18000002 	stmdane	r0, {r1}
     e3c:	000e430e 	andeq	r4, lr, lr, lsl #6
     e40:	05cc0600 	strbeq	r0, [ip, #1536]	; 0x600
     e44:	0002e211 	andeq	lr, r2, r1, lsl r2
     e48:	aa0e1a00 	bge	387650 <startup-0x1fc789b0>
     e4c:	06000009 	streq	r0, [r0], -r9
     e50:	041105cd 	ldreq	r0, [r1], #-1485	; 0xfffffa33
     e54:	1c000003 	stcne	0, cr0, [r0], {3}
     e58:	5246410f 	subpl	r4, r6, #-1073741821	; 0xc0000003
     e5c:	05ce0600 	strbeq	r0, [lr, #1536]	; 0x600
     e60:	0003f211 	andeq	pc, r3, r1, lsl r2	; <UNPREDICTABLE>
     e64:	10002000 	andne	r2, r0, r0
     e68:	00000304 	andeq	r0, r0, r4, lsl #6
     e6c:	000003f2 	strdeq	r0, [r0], -r2
     e70:	0002c311 	andeq	ip, r2, r1, lsl r3
     e74:	08000100 	stmdaeq	r0, {r8}
     e78:	000003e2 	andeq	r0, r0, r2, ror #7
     e7c:	00099d0c 	andeq	r9, r9, ip, lsl #26
     e80:	05cf0600 	strbeq	r0, [pc, #1536]	; 1488 <startup-0x1fffeb78>
     e84:	00034b03 	andeq	r4, r3, r3, lsl #22
     e88:	06540d00 	ldrbeq	r0, [r4], -r0, lsl #26
     e8c:	05090747 	streq	r0, [r9, #-1863]	; 0xfffff8b9
     e90:	0f000006 	svceq	0x00000006
     e94:	00315243 	eorseq	r5, r1, r3, asr #4
     e98:	11074906 	tstne	r7, r6, lsl #18
     e9c:	000002e2 	andeq	r0, r0, r2, ror #5
     ea0:	02790e00 	rsbseq	r0, r9, #0, 28
     ea4:	4a060000 	bmi	180eac <startup-0x1fe7f154>
     ea8:	02d61107 	sbcseq	r1, r6, #-1073741823	; 0xc0000001
     eac:	0f020000 	svceq	0x00020000
     eb0:	00325243 	eorseq	r5, r2, r3, asr #4
     eb4:	11074b06 	tstne	r7, r6, lsl #22
     eb8:	000002e2 	andeq	r0, r0, r2, ror #5
     ebc:	0c0e0e04 	stceq	14, cr0, [lr], {4}
     ec0:	4c060000 	stcmi	0, cr0, [r6], {-0}
     ec4:	02d61107 	sbcseq	r1, r6, #-1073741823	; 0xc0000001
     ec8:	0e060000 	cdpeq	0, 0, cr0, cr6, cr0, {0}
     ecc:	000009f4 	strdeq	r0, [r0], -r4
     ed0:	11074d06 	tstne	r7, r6, lsl #26
     ed4:	000002e2 	andeq	r0, r0, r2, ror #5
     ed8:	02830e08 	addeq	r0, r3, #8, 28	; 0x80
     edc:	4e060000 	cdpmi	0, 0, cr0, cr6, cr0, {0}
     ee0:	02d61107 	sbcseq	r1, r6, #-1073741823	; 0xc0000001
     ee4:	0e0a0000 	cdpeq	0, 0, cr0, cr10, cr0, {0}
     ee8:	00000ec4 	andeq	r0, r0, r4, asr #29
     eec:	11074f06 	tstne	r7, r6, lsl #30
     ef0:	000002e2 	andeq	r0, r0, r2, ror #5
     ef4:	028d0e0c 	addeq	r0, sp, #12, 28	; 0xc0
     ef8:	50060000 	andpl	r0, r6, r0
     efc:	02d61107 	sbcseq	r1, r6, #-1073741823	; 0xc0000001
     f00:	0f0e0000 	svceq	0x000e0000
     f04:	06005253 			; <UNDEFINED> instruction: 0x06005253
     f08:	e2110751 	ands	r0, r1, #21233664	; 0x1440000
     f0c:	10000002 	andne	r0, r0, r2
     f10:	0002970e 	andeq	r9, r2, lr, lsl #14
     f14:	07520600 	ldrbeq	r0, [r2, -r0, lsl #12]
     f18:	0002d611 	andeq	sp, r2, r1, lsl r6
     f1c:	450f1200 	strmi	r1, [pc, #-512]	; d24 <startup-0x1ffff2dc>
     f20:	06005247 	streq	r5, [r0], -r7, asr #4
     f24:	e2110753 	ands	r0, r1, #21757952	; 0x14c0000
     f28:	14000002 	strne	r0, [r0], #-2
     f2c:	0002a10e 	andeq	sl, r2, lr, lsl #2
     f30:	07540600 	ldrbeq	r0, [r4, -r0, lsl #12]
     f34:	0002d611 	andeq	sp, r2, r1, lsl r6
     f38:	c20e1600 	andgt	r1, lr, #0, 12
     f3c:	06000007 	streq	r0, [r0], -r7
     f40:	e2110755 	ands	r0, r1, #22282240	; 0x1540000
     f44:	18000002 	stmdane	r0, {r1}
     f48:	000c180e 	andeq	r1, ip, lr, lsl #16
     f4c:	07560600 	ldrbeq	r0, [r6, -r0, lsl #12]
     f50:	0002d611 	andeq	sp, r2, r1, lsl r6
     f54:	c80e1a00 	stmdagt	lr, {r9, fp, ip}
     f58:	06000007 	streq	r0, [r0], -r7
     f5c:	e2110757 	ands	r0, r1, #22806528	; 0x15c0000
     f60:	1c000002 	stcne	0, cr0, [r0], {2}
     f64:	000d160e 	andeq	r1, sp, lr, lsl #12
     f68:	07580600 	ldrbeq	r0, [r8, -r0, lsl #12]
     f6c:	0002d611 	andeq	sp, r2, r1, lsl r6
     f70:	710e1e00 	tstvc	lr, r0, lsl #28
     f74:	06000008 	streq	r0, [r0], -r8
     f78:	e2110759 	ands	r0, r1, #23330816	; 0x1640000
     f7c:	20000002 	andcs	r0, r0, r2
     f80:	000d2c0e 	andeq	r2, sp, lr, lsl #24
     f84:	075a0600 	ldrbeq	r0, [sl, -r0, lsl #12]
     f88:	0002d611 	andeq	sp, r2, r1, lsl r6
     f8c:	430f2200 	movwmi	r2, #61952	; 0xf200
     f90:	0600544e 	streq	r5, [r0], -lr, asr #8
     f94:	0411075b 	ldreq	r0, [r1], #-1883	; 0xfffff8a5
     f98:	24000003 	strcs	r0, [r0], #-3
     f9c:	4353500f 	cmpmi	r3, #15
     fa0:	075c0600 	ldrbeq	r0, [ip, -r0, lsl #12]
     fa4:	0002e211 	andeq	lr, r2, r1, lsl r2
     fa8:	2c0e2800 	stccs	8, cr2, [lr], {-0}
     fac:	0600000c 	streq	r0, [r0], -ip
     fb0:	d611075d 			; <UNDEFINED> instruction: 0xd611075d
     fb4:	2a000002 	bcs	fc4 <startup-0x1ffff03c>
     fb8:	5252410f 	subspl	r4, r2, #-1073741821	; 0xc0000003
     fbc:	075e0600 	ldrbeq	r0, [lr, -r0, lsl #12]
     fc0:	00030411 	andeq	r0, r3, r1, lsl r4
     fc4:	520f2c00 	andpl	r2, pc, #0, 24
     fc8:	06005243 	streq	r5, [r0], -r3, asr #4
     fcc:	e211075f 	ands	r0, r1, #24903680	; 0x17c0000
     fd0:	30000002 	andcc	r0, r0, r2
     fd4:	0007f40e 	andeq	pc, r7, lr, lsl #8
     fd8:	07600600 	strbeq	r0, [r0, -r0, lsl #12]!
     fdc:	0002d611 	andeq	sp, r2, r1, lsl r6
     fe0:	240e3200 	strcs	r3, [lr], #-512	; 0xfffffe00
     fe4:	0600000e 	streq	r0, [r0], -lr
     fe8:	04110761 	ldreq	r0, [r1], #-1889	; 0xfffff89f
     fec:	34000003 	strcc	r0, [r0], #-3
     ff0:	00071e0e 	andeq	r1, r7, lr, lsl #28
     ff4:	07620600 	strbeq	r0, [r2, -r0, lsl #12]!
     ff8:	00030411 	andeq	r0, r3, r1, lsl r4
     ffc:	330e3800 	movwcc	r3, #59392	; 0xe800
    1000:	0600000e 	streq	r0, [r0], -lr
    1004:	04110763 	ldreq	r0, [r1], #-1891	; 0xfffff89d
    1008:	3c000003 	stccc	0, cr0, [r0], {3}
    100c:	000e380e 	andeq	r3, lr, lr, lsl #16
    1010:	07640600 	strbeq	r0, [r4, -r0, lsl #12]!
    1014:	00030411 	andeq	r0, r3, r1, lsl r4
    1018:	c70e4000 	strgt	r4, [lr, -r0]
    101c:	0600000a 	streq	r0, [r0], -sl
    1020:	e2110765 	ands	r0, r1, #26476544	; 0x1940000
    1024:	44000002 	strmi	r0, [r0], #-2
    1028:	0007ff0e 	andeq	pc, r7, lr, lsl #30
    102c:	07660600 	strbeq	r0, [r6, -r0, lsl #12]!
    1030:	0002d611 	andeq	sp, r2, r1, lsl r6
    1034:	440f4600 	strmi	r4, [pc], #-1536	; 103c <startup-0x1fffefc4>
    1038:	06005243 	streq	r5, [r0], -r3, asr #4
    103c:	e2110767 	ands	r0, r1, #27000832	; 0x19c0000
    1040:	48000002 	stmdami	r0, {r1}
    1044:	00080a0e 	andeq	r0, r8, lr, lsl #20
    1048:	07680600 	strbeq	r0, [r8, -r0, lsl #12]!
    104c:	0002d611 	andeq	sp, r2, r1, lsl r6
    1050:	950e4a00 	strls	r4, [lr, #-2560]	; 0xfffff600
    1054:	0600000d 	streq	r0, [r0], -sp
    1058:	e2110769 	ands	r0, r1, #27525120	; 0x1a40000
    105c:	4c000002 	stcmi	0, cr0, [r0], {2}
    1060:	0008150e 	andeq	r1, r8, lr, lsl #10
    1064:	076a0600 	strbeq	r0, [sl, -r0, lsl #12]!
    1068:	0002d611 	andeq	sp, r2, r1, lsl r6
    106c:	4f0f4e00 	svcmi	0x000f4e00
    1070:	6b060052 	blvs	1811c0 <startup-0x1fe7ee40>
    1074:	02e21107 	rsceq	r1, r2, #-1073741823	; 0xc0000001
    1078:	0e500000 	cdpeq	0, 5, cr0, cr0, cr0, {0}
    107c:	00000820 	andeq	r0, r0, r0, lsr #16
    1080:	11076c06 	tstne	r7, r6, lsl #24
    1084:	000002d6 	ldrdeq	r0, [r0], -r6
    1088:	040c0052 	streq	r0, [ip], #-82	; 0xffffffae
    108c:	06000007 	streq	r0, [r0], -r7
    1090:	0403076d 	streq	r0, [r3], #-1901	; 0xfffff893
    1094:	12000004 	andne	r0, r0, #4
    1098:	02670107 	rsbeq	r0, r7, #-1073741823	; 0xc0000001
    109c:	42070000 	andmi	r0, r7, #0
    10a0:	00063901 	andeq	r3, r6, r1, lsl #18
    10a4:	07e70400 	strbeq	r0, [r7, r0, lsl #8]!
    10a8:	04000000 	streq	r0, [r0], #-0
    10ac:	00000d5d 	andeq	r0, r0, sp, asr sp
    10b0:	07230401 	streq	r0, [r3, -r1, lsl #8]!
    10b4:	04020000 	streq	r0, [r2], #-0
    10b8:	00000768 	andeq	r0, r0, r8, ror #14
    10bc:	e4060003 	str	r0, [r6], #-3
    10c0:	0700000e 	streq	r0, [r0, -lr]
    10c4:	06120247 	ldreq	r0, [r2], -r7, asr #4
    10c8:	07120000 	ldreq	r0, [r2, -r0]
    10cc:	00026701 	andeq	r6, r2, r1, lsl #14
    10d0:	014f0700 	cmpeq	pc, r0, lsl #14
    10d4:	00000660 	andeq	r0, r0, r0, ror #12
    10d8:	00071004 	andeq	r1, r7, r4
    10dc:	16040000 	strne	r0, [r4], -r0
    10e0:	0100000e 	tsteq	r0, lr
    10e4:	07ab0600 	streq	r0, [fp, r0, lsl #12]!
    10e8:	52070000 	andpl	r0, r7, #0
    10ec:	00064502 	andeq	r4, r6, r2, lsl #10
    10f0:	01071200 	mrseq	r1, (UNDEF: 39)
    10f4:	00000267 	andeq	r0, r0, r7, ror #4
    10f8:	93015a07 	movwls	r5, #6663	; 0x1a07
    10fc:	04000006 	streq	r0, [r0], #-6
    1100:	00000b44 	andeq	r0, r0, r4, asr #22
    1104:	09010400 	stmdbeq	r1, {sl}
    1108:	04010000 	streq	r0, [r1], #-0
    110c:	00000c8f 	andeq	r0, r0, pc, lsl #25
    1110:	0f220402 	svceq	0x00220402
    1114:	00030000 	andeq	r0, r3, r0
    1118:	00094806 	andeq	r4, r9, r6, lsl #16
    111c:	025f0700 	subseq	r0, pc, #0, 14
    1120:	0000066c 	andeq	r0, r0, ip, ror #12
    1124:	67010712 	smladvs	r1, r2, r7, r0
    1128:	07000002 	streq	r0, [r0, -r2]
    112c:	06c0016e 	strbeq	r0, [r0], lr, ror #2
    1130:	9e040000 	cdpls	0, 0, cr0, cr4, cr0, {0}
    1134:	0000000a 	andeq	r0, r0, sl
    1138:	000eb704 	andeq	fp, lr, r4, lsl #14
    113c:	49040100 	stmdbmi	r4, {r8}
    1140:	0200000e 	andeq	r0, r0, #14
    1144:	0a270600 	beq	9c294c <startup-0x1f63d6b4>
    1148:	72070000 	andvc	r0, r7, #0
    114c:	00069f02 	andeq	r9, r6, r2, lsl #30
    1150:	07081300 	streq	r1, [r8, -r0, lsl #6]
    1154:	07170984 	ldreq	r0, [r7, -r4, lsl #19]
    1158:	5a140000 	bpl	501160 <startup-0x1fafeea0>
    115c:	07000009 	streq	r0, [r0, -r9]
    1160:	02f80c86 	rscseq	r0, r8, #34304	; 0x8600
    1164:	14000000 	strne	r0, [r0], #-0
    1168:	00000bdc 	ldrdeq	r0, [r0], -ip
    116c:	39148907 	ldmdbcc	r4, {r0, r1, r2, r8, fp, pc}
    1170:	04000006 	streq	r0, [r0], #-6
    1174:	00075014 	andeq	r5, r7, r4, lsl r0
    1178:	158c0700 	strne	r0, [ip, #1792]	; 0x700
    117c:	00000693 	muleq	r0, r3, r6
    1180:	0ada1405 	beq	ff68619c <a+0xdf682208>
    1184:	8f070000 	svchi	0x00070000
    1188:	00066015 	andeq	r6, r6, r5, lsl r0
    118c:	8b140600 	blhi	502994 <startup-0x1fafd66c>
    1190:	0700000e 	streq	r0, [r0, -lr]
    1194:	06c01492 			; <UNDEFINED> instruction: 0x06c01492
    1198:	00070000 	andeq	r0, r7, r0
    119c:	000bcb06 	andeq	ip, fp, r6, lsl #22
    11a0:	02940700 	addseq	r0, r4, #0, 14
    11a4:	000006cc 	andeq	r0, r0, ip, asr #13
    11a8:	37080c13 	smladcc	r8, r3, ip, r0
    11ac:	00076e09 	andeq	r6, r7, r9, lsl #28
    11b0:	0acc1400 	beq	ff3061b8 <a+0xdf302224>
    11b4:	39080000 	stmdbcc	r8, {}	; <UNPREDICTABLE>
    11b8:	0002d60c 	andeq	sp, r2, ip, lsl #12
    11bc:	c1140000 	tstgt	r4, r0
    11c0:	08000006 	stmdaeq	r0, {r1, r2}
    11c4:	02d60c3c 	sbcseq	r0, r6, #60, 24	; 0x3c00
    11c8:	14020000 	strne	r0, [r2], #-0
    11cc:	00000db2 			; <UNDEFINED> instruction: 0x00000db2
    11d0:	f80c3f08 			; <UNDEFINED> instruction: 0xf80c3f08
    11d4:	04000002 	streq	r0, [r0], #-2
    11d8:	000cc214 	andeq	ip, ip, r4, lsl r2
    11dc:	0c430800 	mcrreq	8, 0, r0, r3, cr0
    11e0:	000002d6 	ldrdeq	r0, [r0], -r6
    11e4:	0e751408 	cdpeq	4, 7, cr1, cr5, cr8, {0}
    11e8:	46080000 	strmi	r0, [r8], -r0
    11ec:	0002ca0b 	andeq	ip, r2, fp, lsl #20
    11f0:	06000a00 	streq	r0, [r0], -r0, lsl #20
    11f4:	000009d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    11f8:	23034e08 	movwcs	r4, #15880	; 0x3e08
    11fc:	13000007 	movwne	r0, #7
    1200:	09360904 	ldmdbeq	r6!, {r2, r8, fp}
    1204:	000007b8 			; <UNDEFINED> instruction: 0x000007b8
    1208:	00023414 	andeq	r3, r2, r4, lsl r4
    120c:	0b380900 	bleq	e03614 <startup-0x1f1fc9ec>
    1210:	000002ca 	andeq	r0, r0, sl, asr #5
    1214:	02b51400 	adcseq	r1, r5, #0, 8
    1218:	3d090000 	stccc	0, cr0, [r9, #-0]
    121c:	0002ca0b 	andeq	ip, r2, fp, lsl #20
    1220:	44140100 	ldrmi	r0, [r4], #-256	; 0xffffff00
    1224:	09000002 	stmdbeq	r0, {r1}
    1228:	02ca0b42 	sbceq	r0, sl, #67584	; 0x10800
    122c:	14020000 	strne	r0, [r2], #-0
    1230:	00000016 	andeq	r0, r0, r6, lsl r0
    1234:	3e134709 	cdpcc	7, 1, cr4, cr3, cr9, {0}
    1238:	03000003 	movweq	r0, #3
    123c:	00050600 	andeq	r0, r5, r0, lsl #12
    1240:	4a090000 	bmi	241248 <startup-0x1fdbedb8>
    1244:	00077a03 	andeq	r7, r7, r3, lsl #20
    1248:	01071200 	mrseq	r1, (UNDEF: 39)
    124c:	00000267 	andeq	r0, r0, r7, ror #4
    1250:	df01370a 	svcle	0x0001370a
    1254:	04000007 	streq	r0, [r0], #-7
    1258:	000004d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    125c:	047c0400 	ldrbteq	r0, [ip], #-1024	; 0xfffffc00
    1260:	00040000 	andeq	r0, r4, r0
    1264:	0004f306 	andeq	pc, r4, r6, lsl #6
    1268:	023a0a00 	eorseq	r0, sl, #0, 20
    126c:	000007c4 	andeq	r0, r0, r4, asr #15
    1270:	67010712 	smladvs	r1, r2, r7, r0
    1274:	0a000002 	beq	1284 <startup-0x1fffed7c>
    1278:	080c0143 	stmdaeq	ip, {r0, r1, r6, r8}
    127c:	16040000 	strne	r0, [r4], -r0
    1280:	08000005 	stmdaeq	r0, {r0, r2}
    1284:	00059b04 	andeq	r9, r5, r4, lsl #22
    1288:	2a040c00 	bcs	104290 <startup-0x1fefbd70>
    128c:	10000005 	andne	r0, r0, r5
    1290:	05b50600 	ldreq	r0, [r5, #1536]!	; 0x600
    1294:	470a0000 	strmi	r0, [sl, -r0]
    1298:	0007eb02 	andeq	lr, r7, r2, lsl #22
    129c:	0a081300 	beq	205ea4 <startup-0x1fdfa15c>
    12a0:	08560950 	ldmdaeq	r6, {r4, r6, r8, fp}^
    12a4:	e3140000 	tst	r4, #0
    12a8:	0a000003 	beq	12bc <startup-0x1fffed44>
    12ac:	02f80c52 	rscseq	r0, r8, #20992	; 0x5200
    12b0:	14000000 	strne	r0, [r0], #-0
    12b4:	000003ed 	andeq	r0, r0, sp, ror #7
    12b8:	df14550a 	svcle	0x0014550a
    12bc:	04000007 	streq	r0, [r0], #-7
    12c0:	00046f14 	andeq	r6, r4, r4, lsl pc
    12c4:	17580a00 	ldrbne	r0, [r8, -r0, lsl #20]
    12c8:	0000080c 	andeq	r0, r0, ip, lsl #16
    12cc:	04621405 	strbteq	r1, [r2], #-1029	; 0xfffffbfb
    12d0:	5b0a0000 	blpl	2812d8 <startup-0x1fd7ed28>
    12d4:	00033e13 	andeq	r3, r3, r3, lsl lr
    12d8:	06000600 	streq	r0, [r0], -r0, lsl #12
    12dc:	000004af 	andeq	r0, r0, pc, lsr #9
    12e0:	18025d0a 	stmdane	r2, {r1, r3, r8, sl, fp, ip, lr}
    12e4:	13000008 	movwne	r0, #8
    12e8:	090d0b0c 	stmdbeq	sp, {r2, r3, r8, r9, fp}
    12ec:	00000892 	muleq	r0, r2, r8
    12f0:	00444915 	subeq	r4, r4, r5, lsl r9
    12f4:	bc060e0b 	stclt	14, cr0, [r6], {11}
    12f8:	00000002 	andeq	r0, r0, r2
    12fc:	000f7d14 	andeq	r7, pc, r4, lsl sp	; <UNPREDICTABLE>
    1300:	100f0b00 	andne	r0, pc, r0, lsl #22
    1304:	00000892 	muleq	r0, r2, r8
    1308:	0da41404 	cfstrseq	mvf1, [r4, #16]!
    130c:	100b0000 	andne	r0, fp, r0
    1310:	0002d60b 	andeq	sp, r2, fp, lsl #12
    1314:	16000800 	strne	r0, [r0], -r0, lsl #16
    1318:	0003f704 	andeq	pc, r3, r4, lsl #14
    131c:	09130600 	ldmdbeq	r3, {r9, sl}
    1320:	120b0000 	andne	r0, fp, #0
    1324:	00086202 	andeq	r6, r8, r2, lsl #4
    1328:	0b141300 	bleq	505f30 <startup-0x1fafa0d0>
    132c:	08fb0914 	ldmeq	fp!, {r2, r4, r8, fp}^
    1330:	49150000 	ldmdbmi	r5, {}	; <UNPREDICTABLE>
    1334:	150b0044 	strne	r0, [fp, #-68]	; 0xffffffbc
    1338:	0002bc06 	andeq	fp, r2, r6, lsl #24
    133c:	7d140000 	ldcvc	0, cr0, [r4, #-0]
    1340:	0b00000f 	bleq	1384 <startup-0x1fffec7c>
    1344:	08921016 	ldmeq	r2, {r1, r2, r4, ip}
    1348:	14040000 	strne	r0, [r4], #-0
    134c:	00000a54 	andeq	r0, r0, r4, asr sl
    1350:	d60b170b 	strle	r1, [fp], -fp, lsl #14
    1354:	08000002 	stmdaeq	r0, {r1}
    1358:	000e6c14 	andeq	r6, lr, r4, lsl ip
    135c:	0b180b00 	bleq	603f64 <startup-0x1f9fc09c>
    1360:	000002d6 	ldrdeq	r0, [r0], -r6
    1364:	088e140a 	stmeq	lr, {r1, r3, sl, ip}
    1368:	190b0000 	stmdbne	fp, {}	; <UNPREDICTABLE>
    136c:	0002bc06 	andeq	fp, r2, r6, lsl #24
    1370:	84140c00 	ldrhi	r0, [r4], #-3072	; 0xfffff400
    1374:	0b000008 	bleq	139c <startup-0x1fffec64>
    1378:	02bc061a 	adcseq	r0, ip, #27262976	; 0x1a00000
    137c:	00100000 	andseq	r0, r0, r0
    1380:	00073006 	andeq	r3, r7, r6
    1384:	021b0b00 	andseq	r0, fp, #0, 22
    1388:	000008a4 	andeq	r0, r0, r4, lsr #17
    138c:	000d4017 	andeq	r4, sp, r7, lsl r0
    1390:	0e1d0b00 	vnmlseq.f64	d0, d13, d0
    1394:	000002c3 	andeq	r0, r0, r3, asr #5
    1398:	3f900305 	svccc	0x00900305
    139c:	8c172000 	ldchi	0, cr2, [r7], {-0}
    13a0:	0b00000d 	bleq	13dc <startup-0x1fffec24>
    13a4:	02c31a1d 	sbceq	r1, r3, #118784	; 0x1d000
    13a8:	03050000 	movweq	r0, #20480	; 0x5000
    13ac:	20003f8c 	andcs	r3, r0, ip, lsl #31
    13b0:	000e5817 	andeq	r5, lr, r7, lsl r8
    13b4:	241d0b00 	ldrcs	r0, [sp], #-2816	; 0xfffff500
    13b8:	000002c3 	andeq	r0, r0, r3, asr #5
    13bc:	3f880305 	svccc	0x00880305
    13c0:	4d102000 	ldcmi	0, cr2, [r0, #-0]
    13c4:	4d000009 	stcmi	0, cr0, [r0, #-36]	; 0xffffffdc
    13c8:	11000009 	tstne	r0, r9
    13cc:	000002c3 	andeq	r0, r0, r3, asr #5
    13d0:	0105001d 	tsteq	r5, sp, lsl r0
    13d4:	0000fa08 	andeq	pc, r0, r8, lsl #20
    13d8:	00611800 	rsbeq	r1, r1, r0, lsl #16
    13dc:	3d061e0b 	stccc	14, cr1, [r6, #-44]	; 0xffffffd4
    13e0:	05000009 	streq	r0, [r0, #-9]
    13e4:	003f9403 	eorseq	r9, pc, r3, lsl #8
    13e8:	0a5d1720 	beq	1747070 <startup-0x1e8b8f90>
    13ec:	1b010000 	blne	413f4 <startup-0x1ffbec0c>
    13f0:	00089811 	andeq	r9, r8, r1, lsl r8
    13f4:	20030500 	andcs	r0, r3, r0, lsl #10
    13f8:	1720003f 			; <UNDEFINED> instruction: 0x1720003f
    13fc:	00000cf9 	strdeq	r0, [r0], -r9
    1400:	fb121d01 	blx	48880e <startup-0x1fb777f2>
    1404:	05000008 	streq	r0, [r0, #-8]
    1408:	003f2c03 	eorseq	r2, pc, r3, lsl #24
    140c:	0f1d1920 	svceq	0x001d1920
    1410:	aa010000 	bge	41418 <startup-0x1ffbebe8>
    1414:	0007c806 	andeq	ip, r7, r6, lsl #16
    1418:	00003820 	andeq	r3, r0, r0, lsr #16
    141c:	199c0100 	ldmibne	ip, {r8}
    1420:	00000cea 	andeq	r0, r0, sl, ror #25
    1424:	ac078701 	stcge	7, cr8, [r7], {1}
    1428:	1c200006 	stcne	0, cr0, [r0], #-24	; 0xffffffe8
    142c:	01000001 	tsteq	r0, r1
    1430:	0b131a9c 	bleq	4c7ea8 <startup-0x1fb38158>
    1434:	5b010000 	blpl	4143c <startup-0x1ffbebc4>
    1438:	0005d406 	andeq	sp, r5, r6, lsl #8
    143c:	0000d820 	andeq	sp, r0, r0, lsr #16
    1440:	e19c0100 	orrs	r0, ip, r0, lsl #2
    1444:	1b000009 	blne	1470 <startup-0x1fffeb90>
    1448:	00000775 	andeq	r0, r0, r5, ror r7
    144c:	56135e01 	ldrpl	r5, [r3], -r1, lsl #28
    1450:	02000008 	andeq	r0, r0, #8
    1454:	6b1b6891 	blvs	6db6a0 <startup-0x1f924960>
    1458:	0100000d 	tsteq	r0, sp
    145c:	07b8136f 	ldreq	r1, [r8, pc, ror #6]!
    1460:	91020000 	mrsls	r0, (UNDEF: 2)
    1464:	bd1a0064 	ldclt	0, cr0, [sl, #-400]	; 0xfffffe70
    1468:	0100000d 	tsteq	r0, sp
    146c:	0598064e 	ldreq	r0, [r8, #1614]	; 0x64e
    1470:	003c2000 	eorseq	r2, ip, r0
    1474:	9c010000 	stcls	0, cr0, [r1], {-0}
    1478:	00000a06 	andeq	r0, r0, r6, lsl #20
    147c:	0007bd1c 	andeq	fp, r7, ip, lsl sp
    1480:	09500100 	ldmdbeq	r0, {r8}^
    1484:	000002bc 			; <UNDEFINED> instruction: 0x000002bc
    1488:	1900001d 	stmdbne	r0, {r0, r2, r3, r4}
    148c:	00000ea1 	andeq	r0, r0, r1, lsr #29
    1490:	62064401 	andvs	r4, r6, #16777216	; 0x1000000
    1494:	36200005 	strtcc	r0, [r0], -r5
    1498:	01000000 	mrseq	r0, (UNDEF: 0)
    149c:	0c7e1a9c 			; <UNDEFINED> instruction: 0x0c7e1a9c
    14a0:	37010000 	strcc	r0, [r1, -r0]
    14a4:	00051806 	andeq	r1, r5, r6, lsl #16
    14a8:	00004a20 	andeq	r4, r0, r0, lsr #20
    14ac:	3e9c0100 	fmlcce	f0, f4, f0
    14b0:	1b00000a 	blne	14e0 <startup-0x1fffeb20>
    14b4:	00000697 	muleq	r0, r7, r6
    14b8:	6e1a3a01 	vnmlsvs.f32	s6, s20, s2
    14bc:	02000007 	andeq	r0, r0, #7
    14c0:	1a006c91 	bne	1c70c <startup-0x1ffe38f4>
    14c4:	0000078d 	andeq	r0, r0, sp, lsl #15
    14c8:	94062201 	strls	r2, [r6], #-513	; 0xfffffdff
    14cc:	84200004 	strthi	r0, [r0], #-4
    14d0:	01000000 	mrseq	r0, (UNDEF: 0)
    14d4:	000a649c 	muleq	sl, ip, r4
    14d8:	09631b00 	stmdbeq	r3!, {r8, r9, fp, ip}^
    14dc:	24010000 	strcs	r0, [r1], #-0
    14e0:	00071714 	andeq	r1, r7, r4, lsl r7
    14e4:	70910200 	addsvc	r0, r1, r0, lsl #4
    14e8:	084a1e00 	stmdaeq	sl, {r9, sl, fp, ip}^
    14ec:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    14f0:	00000006 	andeq	r0, r0, r6
    14f4:	00000c20 	andeq	r0, r0, r0, lsr #24
    14f8:	009c0100 	addseq	r0, ip, r0, lsl #2
    14fc:	00000f34 	andeq	r0, r0, r4, lsr pc
    1500:	06320004 	ldrteq	r0, [r2], -r4
    1504:	01040000 	mrseq	r0, (UNDEF: 4)
    1508:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    150c:	0016260c 	andseq	r2, r6, ip, lsl #12
    1510:	00032200 	andeq	r2, r3, r0, lsl #4
    1514:	00080000 	andeq	r0, r8, r0
    1518:	000cfc20 	andeq	pc, ip, r0, lsr #24
    151c:	000a7500 	andeq	r7, sl, r0, lsl #10
    1520:	06010200 	streq	r0, [r1], -r0, lsl #4
    1524:	000000f3 	strdeq	r0, [r0], -r3
    1528:	0000dc03 	andeq	sp, r0, r3, lsl #24
    152c:	182b0200 	stmdane	fp!, {r9}
    1530:	00000038 	andeq	r0, r0, r8, lsr r0
    1534:	f1080102 	cps	#2
    1538:	02000000 	andeq	r0, r0, #0
    153c:	00640502 	rsbeq	r0, r4, r2, lsl #10
    1540:	e0030000 	and	r0, r3, r0
    1544:	02000008 	andeq	r0, r0, #8
    1548:	00521939 	subseq	r1, r2, r9, lsr r9
    154c:	02020000 	andeq	r0, r2, #0
    1550:	00020107 	andeq	r0, r2, r7, lsl #2
    1554:	02e70300 	rsceq	r0, r7, #0, 6
    1558:	4d020000 	stcmi	0, cr0, [r2, #-0]
    155c:	00006518 	andeq	r6, r0, r8, lsl r5
    1560:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    1564:	000000c7 	andeq	r0, r0, r7, asr #1
    1568:	00007f03 	andeq	r7, r0, r3, lsl #30
    156c:	194f0200 	stmdbne	pc, {r9}^	; <UNPREDICTABLE>
    1570:	00000078 	andeq	r0, r0, r8, ror r0
    1574:	9e070402 	cdpls	4, 0, cr0, cr7, cr2, {0}
    1578:	02000001 	andeq	r0, r0, #1
    157c:	00c20508 	sbceq	r0, r2, r8, lsl #10
    1580:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    1584:	00019907 	andeq	r9, r1, r7, lsl #18
    1588:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    158c:	00746e69 	rsbseq	r6, r4, r9, ror #28
    1590:	a3070402 	movwge	r0, #29698	; 0x7402
    1594:	03000001 	movweq	r0, #1
    1598:	000000de 	ldrdeq	r0, [r0], -lr
    159c:	2c131803 	ldccs	8, cr1, [r3], {3}
    15a0:	05000000 	streq	r0, [r0, #-0]
    15a4:	0000009b 	muleq	r0, fp, r0
    15a8:	0000a706 	andeq	sl, r0, r6, lsl #14
    15ac:	08e20300 	stmiaeq	r2!, {r8, r9}^
    15b0:	24030000 	strcs	r0, [r3], #-0
    15b4:	00004614 	andeq	r4, r0, r4, lsl r6
    15b8:	02e90300 	rsceq	r0, r9, #0, 6
    15bc:	2c030000 	stccs	0, cr0, [r3], {-0}
    15c0:	00005913 	andeq	r5, r0, r3, lsl r9
    15c4:	00bd0500 	adcseq	r0, sp, r0, lsl #10
    15c8:	81030000 	mrshi	r0, (UNDEF: 3)
    15cc:	03000000 	movweq	r0, #0
    15d0:	006c1430 	rsbeq	r1, ip, r0, lsr r4
    15d4:	ce050000 	cdpgt	0, 0, cr0, cr5, cr0, {0}
    15d8:	07000000 	streq	r0, [r0, -r0]
    15dc:	000000ce 	andeq	r0, r0, lr, asr #1
    15e0:	000000ef 	andeq	r0, r0, pc, ror #1
    15e4:	00009408 	andeq	r9, r0, r8, lsl #8
    15e8:	09000100 	stmdbeq	r0, {r8}
    15ec:	00000315 	andeq	r0, r0, r5, lsl r3
    15f0:	1906fa04 	stmdbne	r6, {r2, r9, fp, ip, sp, lr, pc}
    15f4:	000000c9 	andeq	r0, r0, r9, asr #1
    15f8:	00025f0a 	andeq	r5, r2, sl, lsl #30
    15fc:	113b0500 	teqne	fp, r0, lsl #10
    1600:	000000ce 	andeq	r0, r0, lr, asr #1
    1604:	3801070b 	stmdacc	r1, {r0, r1, r3, r8, r9, sl}
    1608:	06000000 	streq	r0, [r0], -r0
    160c:	240e035d 	strcs	r0, [lr], #-861	; 0xfffffca3
    1610:	0c000001 	stceq	0, cr0, [r0], {1}
    1614:	000022b2 			; <UNDEFINED> instruction: 0x000022b2
    1618:	45530d00 	ldrbmi	r0, [r3, #-3328]	; 0xfffff300
    161c:	00010054 	andeq	r0, r1, r4, asr r0
    1620:	0013fb0e 	andseq	pc, r3, lr, lsl #22
    1624:	035d0600 	cmpeq	sp, #0, 12
    1628:	00010828 	andeq	r0, r1, r8, lsr #16
    162c:	158d0e00 	strne	r0, [sp, #3584]	; 0xe00
    1630:	5d060000 	stcpl	0, cr0, [r6, #-0]
    1634:	01083403 	tsteq	r8, r3, lsl #8
    1638:	070b0000 	streq	r0, [fp, -r0]
    163c:	00003801 	andeq	r3, r0, r1, lsl #16
    1640:	035f0600 	cmpeq	pc, #0, 12
    1644:	00015a0e 	andeq	r5, r1, lr, lsl #20
    1648:	00ac0c00 	adceq	r0, ip, r0, lsl #24
    164c:	0c000000 	stceq	0, cr0, [r0], {-0}
    1650:	000003c3 	andeq	r0, r0, r3, asr #7
    1654:	d70e0001 	strle	r0, [lr, -r1]
    1658:	06000002 	streq	r0, [r0], -r2
    165c:	3e2f035f 	mcrcc	3, 1, r0, cr15, cr15, {2}
    1660:	0b000001 	bleq	166c <startup-0x1fffe994>
    1664:	00380107 	eorseq	r0, r8, r7, lsl #2
    1668:	62060000 	andvs	r0, r6, #0
    166c:	01830e03 	orreq	r0, r3, r3, lsl #28
    1670:	410c0000 	mrsmi	r0, (UNDEF: 12)
    1674:	00000013 	andeq	r0, r0, r3, lsl r0
    1678:	0016d60c 	andseq	sp, r6, ip, lsl #12
    167c:	0e000100 	adfeqs	f0, f0, f0
    1680:	000011aa 	andeq	r1, r0, sl, lsr #3
    1684:	2c036206 	sfmcs	f6, 4, [r3], {6}
    1688:	00000167 	andeq	r0, r0, r7, ror #2
    168c:	6406980f 	strvs	r9, [r6], #-2063	; 0xfffff7f1
    1690:	03760906 	cmneq	r6, #98304	; 0x18000
    1694:	43100000 	tstmi	r0, #0
    1698:	66060052 			; <UNDEFINED> instruction: 0x66060052
    169c:	00da1106 	sbcseq	r1, sl, r6, lsl #2
    16a0:	11000000 	mrsne	r0, (UNDEF: 0)
    16a4:	0000118f 	andeq	r1, r0, pc, lsl #3
    16a8:	11066706 	tstne	r6, r6, lsl #14
    16ac:	000000da 	ldrdeq	r0, [r0], -sl
    16b0:	13ef1104 	mvnne	r1, #4, 2
    16b4:	68060000 	stmdavs	r6, {}	; <UNPREDICTABLE>
    16b8:	00da1106 	sbcseq	r1, sl, r6, lsl #2
    16bc:	10080000 	andne	r0, r8, r0
    16c0:	00524943 	subseq	r4, r2, r3, asr #18
    16c4:	11066906 	tstne	r6, r6, lsl #18
    16c8:	000000da 	ldrdeq	r0, [r0], -sl
    16cc:	10ba110c 	adcsne	r1, sl, ip, lsl #2
    16d0:	6a060000 	bvs	1816d8 <startup-0x1fe7e928>
    16d4:	00da1106 	sbcseq	r1, sl, r6, lsl #2
    16d8:	11100000 	tstne	r0, r0
    16dc:	0000156a 	andeq	r1, r0, sl, ror #10
    16e0:	11066b06 	tstne	r6, r6, lsl #22
    16e4:	000000da 	ldrdeq	r0, [r0], -sl
    16e8:	14811114 	strne	r1, [r1], #276	; 0x114
    16ec:	6c060000 	stcvs	0, cr0, [r6], {-0}
    16f0:	00da1106 	sbcseq	r1, sl, r6, lsl #2
    16f4:	11180000 	tstne	r8, r0
    16f8:	00000279 	andeq	r0, r0, r9, ror r2
    16fc:	11066d06 	tstne	r6, r6, lsl #26
    1700:	000000ce 	andeq	r0, r0, lr, asr #1
    1704:	1690111c 			; <UNDEFINED> instruction: 0x1690111c
    1708:	6e060000 	cdpvs	0, 0, cr0, cr6, cr0, {0}
    170c:	00da1106 	sbcseq	r1, sl, r6, lsl #2
    1710:	11200000 			; <UNDEFINED> instruction: 0x11200000
    1714:	000010fa 	strdeq	r1, [r0], -sl
    1718:	11066f06 	tstne	r6, r6, lsl #30
    171c:	000000da 	ldrdeq	r0, [r0], -sl
    1720:	0c0e1124 	stfeqs	f1, [lr], {36}	; 0x24
    1724:	70060000 	andvc	r0, r6, r0
    1728:	00df1106 	sbcseq	r1, pc, r6, lsl #2
    172c:	11280000 			; <UNDEFINED> instruction: 0x11280000
    1730:	000016fe 	strdeq	r1, [r0], -lr
    1734:	11067106 	tstne	r6, r6, lsl #2
    1738:	000000da 	ldrdeq	r0, [r0], -sl
    173c:	159e1130 	ldrne	r1, [lr, #304]	; 0x130
    1740:	72060000 	andvc	r0, r6, #0
    1744:	00da1106 	sbcseq	r1, sl, r6, lsl #2
    1748:	11340000 	teqne	r4, r0
    174c:	00001382 	andeq	r1, r0, r2, lsl #7
    1750:	11067306 	tstne	r6, r6, lsl #6
    1754:	000000da 	ldrdeq	r0, [r0], -sl
    1758:	02831138 	addeq	r1, r3, #56, 2
    175c:	74060000 	strvc	r0, [r6], #-0
    1760:	00ce1106 	sbceq	r1, lr, r6, lsl #2
    1764:	113c0000 	teqne	ip, r0
    1768:	00001596 	muleq	r0, r6, r5
    176c:	11067506 	tstne	r6, r6, lsl #10
    1770:	000000da 	ldrdeq	r0, [r0], -sl
    1774:	14791140 	ldrbtne	r1, [r9], #-320	; 0xfffffec0
    1778:	76060000 	strvc	r0, [r6], -r0
    177c:	00da1106 	sbcseq	r1, sl, r6, lsl #2
    1780:	11440000 	mrsne	r0, (UNDEF: 68)
    1784:	0000028d 	andeq	r0, r0, sp, lsl #5
    1788:	11067706 	tstne	r6, r6, lsl #14
    178c:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    1790:	10721148 	rsbsne	r1, r2, r8, asr #2
    1794:	78060000 	stmdavc	r6, {}	; <UNPREDICTABLE>
    1798:	00da1106 	sbcseq	r1, sl, r6, lsl #2
    179c:	11500000 	cmpne	r0, r0
    17a0:	0000139c 	muleq	r0, ip, r3
    17a4:	11067906 	tstne	r6, r6, lsl #18
    17a8:	000000da 	ldrdeq	r0, [r0], -sl
    17ac:	161c1154 			; <UNDEFINED> instruction: 0x161c1154
    17b0:	7a060000 	bvc	1817b8 <startup-0x1fe7e848>
    17b4:	00da1106 	sbcseq	r1, sl, r6, lsl #2
    17b8:	11580000 	cmpne	r8, r0
    17bc:	00000297 	muleq	r0, r7, r2
    17c0:	11067b06 	tstne	r6, r6, lsl #22
    17c4:	000000ce 	andeq	r0, r0, lr, asr #1
    17c8:	0f97115c 	svceq	0x0097115c
    17cc:	7c060000 	stcvc	0, cr0, [r6], {-0}
    17d0:	00da1106 	sbcseq	r1, sl, r6, lsl #2
    17d4:	11600000 	cmnne	r0, r0
    17d8:	000012f4 	strdeq	r1, [r0], -r4
    17dc:	11067d06 	tstne	r6, r6, lsl #26
    17e0:	000000da 	ldrdeq	r0, [r0], -sl
    17e4:	02a11164 	adceq	r1, r1, #100, 2
    17e8:	7e060000 	cdpvc	0, 0, cr0, cr6, cr0, {0}
    17ec:	00df1106 	sbcseq	r1, pc, r6, lsl #2
    17f0:	11680000 	cmnne	r8, r0
    17f4:	000016ad 	andeq	r1, r0, sp, lsr #13
    17f8:	11067f06 	tstne	r6, r6, lsl #30
    17fc:	000000da 	ldrdeq	r0, [r0], -sl
    1800:	53431070 	movtpl	r1, #12400	; 0x3070
    1804:	80060052 	andhi	r0, r6, r2, asr r0
    1808:	00da1106 	sbcseq	r1, sl, r6, lsl #2
    180c:	11740000 	cmnne	r4, r0
    1810:	00000c18 	andeq	r0, r0, r8, lsl ip
    1814:	11068106 	tstne	r6, r6, lsl #2
    1818:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    181c:	16161178 			; <UNDEFINED> instruction: 0x16161178
    1820:	82060000 	andhi	r0, r6, #0
    1824:	00da1106 	sbcseq	r1, sl, r6, lsl #2
    1828:	11800000 	orrne	r0, r0, r0
    182c:	000012a1 	andeq	r1, r0, r1, lsr #5
    1830:	11068306 	tstne	r6, r6, lsl #6
    1834:	000000da 	ldrdeq	r0, [r0], -sl
    1838:	13e91184 	mvnne	r1, #132, 2	; 0x21
    183c:	84060000 	strhi	r0, [r6], #-0
    1840:	00da1106 	sbcseq	r1, sl, r6, lsl #2
    1844:	11880000 	orrne	r0, r8, r0
    1848:	000010a4 	andeq	r1, r0, r4, lsr #1
    184c:	11068506 	tstne	r6, r6, lsl #10
    1850:	000000da 	ldrdeq	r0, [r0], -sl
    1854:	16a4118c 	strtne	r1, [r4], ip, lsl #3
    1858:	86060000 	strhi	r0, [r6], -r0
    185c:	00da1106 	sbcseq	r1, sl, r6, lsl #2
    1860:	11900000 	orrsne	r0, r0, r0
    1864:	000010c3 	andeq	r1, r0, r3, asr #1
    1868:	11068706 	tstne	r6, r6, lsl #14
    186c:	000000da 	ldrdeq	r0, [r0], -sl
    1870:	3b0e0094 	blcc	381ac8 <startup-0x1fc7e538>
    1874:	06000012 			; <UNDEFINED> instruction: 0x06000012
    1878:	90030689 	andls	r0, r3, r9, lsl #13
    187c:	12000001 	andne	r0, r0, #1
    1880:	09300710 	ldmdbeq	r0!, {r4, r8, r9, sl}
    1884:	000003c1 	andeq	r0, r0, r1, asr #7
    1888:	000fd713 	andeq	sp, pc, r3, lsl r7	; <UNPREDICTABLE>
    188c:	0c320700 	ldceq	7, cr0, [r2], #-0
    1890:	000000ce 	andeq	r0, r0, lr, asr #1
    1894:	11ee1300 	mvnne	r1, r0, lsl #6
    1898:	33070000 	movwcc	r0, #28672	; 0x7000
    189c:	0000ce0c 	andeq	ip, r0, ip, lsl #28
    18a0:	f0130400 			; <UNDEFINED> instruction: 0xf0130400
    18a4:	07000014 	smladeq	r0, r4, r0, r0
    18a8:	00ce0c34 	sbceq	r0, lr, r4, lsr ip
    18ac:	13080000 	movwne	r0, #32768	; 0x8000
    18b0:	000010d3 	ldrdeq	r1, [r0], -r3
    18b4:	ce0c3507 	cfsh32gt	mvfx3, mvfx12, #7
    18b8:	0c000000 	stceq	0, cr0, [r0], {-0}
    18bc:	16ec0300 	strbtne	r0, [ip], r0, lsl #6
    18c0:	36070000 	strcc	r0, [r7], -r0
    18c4:	00038302 	andeq	r8, r3, r2, lsl #6
    18c8:	00ac0700 	adceq	r0, ip, r0, lsl #14
    18cc:	03dd0000 	bicseq	r0, sp, #0
    18d0:	94080000 	strls	r0, [r8], #-0
    18d4:	0f000000 	svceq	0x00000000
    18d8:	03cd0600 	biceq	r0, sp, #0, 12
    18dc:	dd050000 	stcle	0, cr0, [r5, #-0]
    18e0:	14000003 	strne	r0, [r0], #-3
    18e4:	00001500 	andeq	r1, r0, r0, lsl #10
    18e8:	e2149901 	ands	r9, r4, #16384	; 0x4000
    18ec:	05000003 	streq	r0, [r0, #-3]
    18f0:	003f4003 	eorseq	r4, pc, r3
    18f4:	10411520 	subne	r1, r1, r0, lsr #10
    18f8:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
    18fc:	14dc060c 	ldrbne	r0, [ip], #1548	; 0x60c
    1900:	00202000 	eoreq	r2, r0, r0
    1904:	9c010000 	stcls	0, cr0, [r1], {-0}
    1908:	00000421 	andeq	r0, r0, r1, lsr #8
    190c:	00105716 	andseq	r5, r0, r6, lsl r7
    1910:	0c5e0100 	ldfeqe	f0, [lr], {-0}
    1914:	00009b24 	andeq	r9, r0, r4, lsr #22
    1918:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    191c:	15861700 	strne	r1, [r6, #1792]	; 0x700
    1920:	3c010000 	stccc	0, cr0, [r1], {-0}
    1924:	01310a0c 	teqeq	r1, ip, lsl #20
    1928:	14980000 	ldrne	r0, [r8], #0
    192c:	00442000 	subeq	r2, r4, r0
    1930:	9c010000 	stcls	0, cr0, [r1], {-0}
    1934:	0000045d 	andeq	r0, r0, sp, asr r4
    1938:	00105716 	andseq	r5, r0, r6, lsl r7
    193c:	0c3c0100 	ldfeqs	f0, [ip], #-0
    1940:	00009b22 	andeq	r9, r0, r2, lsr #22
    1944:	6f910200 	svcvs	0x00910200
    1948:	00048c18 	andeq	r8, r4, r8, lsl ip
    194c:	0c3e0100 	ldfeqs	f0, [lr], #-0
    1950:	0001310c 	andeq	r3, r1, ip, lsl #2
    1954:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    1958:	10ac1900 	adcne	r1, ip, r0, lsl #18
    195c:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
    1960:	147c060c 	ldrbtne	r0, [ip], #-1548	; 0xfffff9f4
    1964:	001c2000 	andseq	r2, ip, r0
    1968:	9c010000 	stcls	0, cr0, [r1], {-0}
    196c:	0013f417 	andseq	pc, r3, r7, lsl r4	; <UNPREDICTABLE>
    1970:	0bfb0100 	bleq	ffec1d78 <a+0xdfebdde4>
    1974:	0001240c 	andeq	r2, r1, ip, lsl #8
    1978:	0013f800 	andseq	pc, r3, r0, lsl #16
    197c:	00008420 	andeq	r8, r0, r0, lsr #8
    1980:	cc9c0100 	ldfgts	f0, [ip], {0}
    1984:	16000004 	strne	r0, [r0], -r4
    1988:	00001186 	andeq	r1, r0, r6, lsl #3
    198c:	260bfb01 	strcs	pc, [fp], -r1, lsl #22
    1990:	0000009b 	muleq	r0, fp, r0
    1994:	1a679102 	bne	19e5da4 <startup-0x1e61a25c>
    1998:	00706d74 	rsbseq	r6, r0, r4, ror sp
    199c:	0c0bfd01 	stceq	13, cr15, [fp], {1}
    19a0:	000000ce 	andeq	r0, r0, lr, asr #1
    19a4:	186c9102 	stmdane	ip!, {r1, r8, ip, pc}^
    19a8:	00000fcd 	andeq	r0, r0, sp, asr #31
    19ac:	0c0bfe01 	stceq	14, cr15, [fp], {1}
    19b0:	000000ce 	andeq	r0, r0, lr, asr #1
    19b4:	18749102 	ldmdane	r4!, {r1, r8, ip, pc}^
    19b8:	0000048c 	andeq	r0, r0, ip, lsl #9
    19bc:	0e0bff01 	cdpeq	15, 0, cr15, cr11, cr1, {0}
    19c0:	00000124 	andeq	r0, r0, r4, lsr #2
    19c4:	00739102 	rsbseq	r9, r3, r2, lsl #2
    19c8:	0016c915 	andseq	ip, r6, r5, lsl r9
    19cc:	0bd60100 	bleq	ff581dd4 <a+0xdf57de40>
    19d0:	0013a806 	andseq	sl, r3, r6, lsl #16
    19d4:	00005020 	andeq	r5, r0, r0, lsr #32
    19d8:	049c0100 	ldreq	r0, [ip], #256	; 0x100
    19dc:	16000005 	strne	r0, [r0], -r5
    19e0:	00001057 	andeq	r1, r0, r7, asr r0
    19e4:	1b0bd601 	blne	2f71f0 <startup-0x1fd08e10>
    19e8:	0000009b 	muleq	r0, fp, r0
    19ec:	16779102 	ldrbtne	r9, [r7], -r2, lsl #2
    19f0:	0000009e 	muleq	r0, lr, r0
    19f4:	330bd601 	movwcc	sp, #46593	; 0xb601
    19f8:	0000015a 	andeq	r0, r0, sl, asr r1
    19fc:	00769102 	rsbseq	r9, r6, r2, lsl #2
    1a00:	00138a15 	andseq	r8, r3, r5, lsl sl
    1a04:	0a9e0100 	beq	fe781e0c <a+0xde77de78>
    1a08:	00136c06 	andseq	r6, r3, r6, lsl #24
    1a0c:	00003c20 	andeq	r3, r0, r0, lsr #24
    1a10:	2c9c0100 	ldfcss	f0, [ip], {0}
    1a14:	16000005 	strne	r0, [r0], -r5
    1a18:	0000148a 	andeq	r1, r0, sl, lsl #9
    1a1c:	200a9e01 	andcs	r9, sl, r1, lsl #28
    1a20:	0000009b 	muleq	r0, fp, r0
    1a24:	00779102 	rsbseq	r9, r7, r2, lsl #2
    1a28:	00108715 	andseq	r8, r0, r5, lsl r7
    1a2c:	0a860100 	beq	fe181e34 <a+0xde17dea0>
    1a30:	00132c06 	andseq	r2, r3, r6, lsl #24
    1a34:	00004020 	andeq	r4, r0, r0, lsr #32
    1a38:	649c0100 	ldrvs	r0, [ip], #256	; 0x100
    1a3c:	16000005 	strne	r0, [r0], -r5
    1a40:	000015d2 	ldrdeq	r1, [r0], -r2
    1a44:	2c0a8601 	stccs	6, cr8, [sl], {1}
    1a48:	000000ce 	andeq	r0, r0, lr, asr #1
    1a4c:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
    1a50:	0000009e 	muleq	r0, lr, r0
    1a54:	4c0a8601 	stcmi	6, cr8, [sl], {1}
    1a58:	0000015a 	andeq	r0, r0, sl, asr r1
    1a5c:	00739102 	rsbseq	r9, r3, r2, lsl #2
    1a60:	0014aa15 	andseq	sl, r4, r5, lsl sl
    1a64:	0a520100 	beq	1481e6c <startup-0x1eb7e194>
    1a68:	0012ec06 	andseq	lr, r2, r6, lsl #24
    1a6c:	00004020 	andeq	r4, r0, r0, lsr #32
    1a70:	9c9c0100 	ldflss	f0, [ip], {0}
    1a74:	16000005 	strne	r0, [r0], -r5
    1a78:	000011fd 	strdeq	r1, [r0], -sp
    1a7c:	2c0a5201 	sfmcs	f5, 4, [sl], {1}
    1a80:	000000ce 	andeq	r0, r0, lr, asr #1
    1a84:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
    1a88:	0000009e 	muleq	r0, lr, r0
    1a8c:	4c0a5201 	sfmmi	f5, 4, [sl], {1}
    1a90:	0000015a 	andeq	r0, r0, sl, asr r1
    1a94:	00739102 	rsbseq	r9, r3, r2, lsl #2
    1a98:	0015a615 	andseq	sl, r5, r5, lsl r6
    1a9c:	0a190100 	beq	641ea4 <startup-0x1f9be15c>
    1aa0:	0012ac06 	andseq	sl, r2, r6, lsl #24
    1aa4:	00004020 	andeq	r4, r0, r0, lsr #32
    1aa8:	d49c0100 	ldrle	r0, [ip], #256	; 0x100
    1aac:	16000005 	strne	r0, [r0], -r5
    1ab0:	000012fe 	strdeq	r1, [r0], -lr
    1ab4:	2c0a1901 			; <UNDEFINED> instruction: 0x2c0a1901
    1ab8:	000000ce 	andeq	r0, r0, lr, asr #1
    1abc:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
    1ac0:	0000009e 	muleq	r0, lr, r0
    1ac4:	4c0a1901 			; <UNDEFINED> instruction: 0x4c0a1901
    1ac8:	0000015a 	andeq	r0, r0, sl, asr r1
    1acc:	00739102 	rsbseq	r9, r3, r2, lsl #2
    1ad0:	0012ac15 	andseq	sl, r2, r5, lsl ip
    1ad4:	09fb0100 	ldmibeq	fp!, {r8}^
    1ad8:	00126c06 	andseq	r6, r2, r6, lsl #24
    1adc:	00004020 	andeq	r4, r0, r0, lsr #32
    1ae0:	0c9c0100 	ldfeqs	f0, [ip], {0}
    1ae4:	16000006 	strne	r0, [r0], -r6
    1ae8:	000012e5 	andeq	r1, r0, r5, ror #5
    1aec:	2c09fb01 			; <UNDEFINED> instruction: 0x2c09fb01
    1af0:	000000ce 	andeq	r0, r0, lr, asr #1
    1af4:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
    1af8:	0000009e 	muleq	r0, lr, r0
    1afc:	4c09fb01 			; <UNDEFINED> instruction: 0x4c09fb01
    1b00:	0000015a 	andeq	r0, r0, sl, asr r1
    1b04:	00739102 	rsbseq	r9, r3, r2, lsl #2
    1b08:	00172115 	andseq	r2, r7, r5, lsl r1
    1b0c:	09db0100 	ldmibeq	fp, {r8}^
    1b10:	00122c06 	andseq	r2, r2, r6, lsl #24
    1b14:	00004020 	andeq	r4, r0, r0, lsr #32
    1b18:	449c0100 	ldrmi	r0, [ip], #256	; 0x100
    1b1c:	16000006 	strne	r0, [r0], -r6
    1b20:	00001063 	andeq	r1, r0, r3, rrx
    1b24:	2c09db01 			; <UNDEFINED> instruction: 0x2c09db01
    1b28:	000000ce 	andeq	r0, r0, lr, asr #1
    1b2c:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
    1b30:	0000009e 	muleq	r0, lr, r0
    1b34:	4c09db01 			; <UNDEFINED> instruction: 0x4c09db01
    1b38:	0000015a 	andeq	r0, r0, sl, asr r1
    1b3c:	00739102 	rsbseq	r9, r3, r2, lsl #2
    1b40:	0013b215 	andseq	fp, r3, r5, lsl r2
    1b44:	09aa0100 	stmibeq	sl!, {r8}
    1b48:	0011ec06 	andseq	lr, r1, r6, lsl #24
    1b4c:	00004020 	andeq	r4, r0, r0, lsr #32
    1b50:	7c9c0100 	ldfvcs	f0, [ip], {0}
    1b54:	16000006 	strne	r0, [r0], -r6
    1b58:	000015d2 	ldrdeq	r1, [r0], -r2
    1b5c:	2609aa01 	strcs	sl, [r9], -r1, lsl #20
    1b60:	000000ce 	andeq	r0, r0, lr, asr #1
    1b64:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
    1b68:	0000009e 	muleq	r0, lr, r0
    1b6c:	4609aa01 	strmi	sl, [r9], -r1, lsl #20
    1b70:	0000015a 	andeq	r0, r0, sl, asr r1
    1b74:	00739102 	rsbseq	r9, r3, r2, lsl #2
    1b78:	00100115 	andseq	r0, r0, r5, lsl r1
    1b7c:	097b0100 	ldmdbeq	fp!, {r8}^
    1b80:	0011ac06 	andseq	sl, r1, r6, lsl #24
    1b84:	00004020 	andeq	r4, r0, r0, lsr #32
    1b88:	b49c0100 	ldrlt	r0, [ip], #256	; 0x100
    1b8c:	16000006 	strne	r0, [r0], -r6
    1b90:	000011fd 	strdeq	r1, [r0], -sp
    1b94:	26097b01 	strcs	r7, [r9], -r1, lsl #22
    1b98:	000000ce 	andeq	r0, r0, lr, asr #1
    1b9c:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
    1ba0:	0000009e 	muleq	r0, lr, r0
    1ba4:	46097b01 	strmi	r7, [r9], -r1, lsl #22
    1ba8:	0000015a 	andeq	r0, r0, sl, asr r1
    1bac:	00739102 	rsbseq	r9, r3, r2, lsl #2
    1bb0:	00111315 	andseq	r1, r1, r5, lsl r3
    1bb4:	09450100 	stmdbeq	r5, {r8}^
    1bb8:	00116c06 	andseq	r6, r1, r6, lsl #24
    1bbc:	00004020 	andeq	r4, r0, r0, lsr #32
    1bc0:	ec9c0100 	ldfs	f0, [ip], {0}
    1bc4:	16000006 	strne	r0, [r0], -r6
    1bc8:	000012fe 	strdeq	r1, [r0], -lr
    1bcc:	26094501 	strcs	r4, [r9], -r1, lsl #10
    1bd0:	000000ce 	andeq	r0, r0, lr, asr #1
    1bd4:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
    1bd8:	0000009e 	muleq	r0, lr, r0
    1bdc:	46094501 	strmi	r4, [r9], -r1, lsl #10
    1be0:	0000015a 	andeq	r0, r0, sl, asr r1
    1be4:	00739102 	rsbseq	r9, r3, r2, lsl #2
    1be8:	00149315 	andseq	r9, r4, r5, lsl r3
    1bec:	092a0100 	stmdbeq	sl!, {r8}
    1bf0:	00112c06 	andseq	r2, r1, r6, lsl #24
    1bf4:	00004020 	andeq	r4, r0, r0, lsr #32
    1bf8:	249c0100 	ldrcs	r0, [ip], #256	; 0x100
    1bfc:	16000007 	strne	r0, [r0], -r7
    1c00:	000012e5 	andeq	r1, r0, r5, ror #5
    1c04:	26092a01 	strcs	r2, [r9], -r1, lsl #20
    1c08:	000000ce 	andeq	r0, r0, lr, asr #1
    1c0c:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
    1c10:	0000009e 	muleq	r0, lr, r0
    1c14:	46092a01 	strmi	r2, [r9], -r1, lsl #20
    1c18:	0000015a 	andeq	r0, r0, sl, asr r1
    1c1c:	00739102 	rsbseq	r9, r3, r2, lsl #2
    1c20:	00114115 	andseq	r4, r1, r5, lsl r1
    1c24:	090d0100 	stmdbeq	sp, {r8}
    1c28:	0010ec06 	andseq	lr, r0, r6, lsl #24
    1c2c:	00004020 	andeq	r4, r0, r0, lsr #32
    1c30:	5c9c0100 	ldfpls	f0, [ip], {0}
    1c34:	16000007 	strne	r0, [r0], -r7
    1c38:	00001063 	andeq	r1, r0, r3, rrx
    1c3c:	26090d01 	strcs	r0, [r9], -r1, lsl #26
    1c40:	000000ce 	andeq	r0, r0, lr, asr #1
    1c44:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
    1c48:	0000009e 	muleq	r0, lr, r0
    1c4c:	46090d01 	strmi	r0, [r9], -r1, lsl #26
    1c50:	0000015a 	andeq	r0, r0, sl, asr r1
    1c54:	00739102 	rsbseq	r9, r3, r2, lsl #2
    1c58:	00155315 	andseq	r5, r5, r5, lsl r3
    1c5c:	08e30100 	stmiaeq	r3!, {r8}^
    1c60:	0010ac06 	andseq	sl, r0, r6, lsl #24
    1c64:	00004020 	andeq	r4, r0, r0, lsr #32
    1c68:	949c0100 	ldrls	r0, [ip], #256	; 0x100
    1c6c:	16000007 	strne	r0, [r0], -r7
    1c70:	000015d2 	ldrdeq	r1, [r0], -r2
    1c74:	2608e301 	strcs	lr, [r8], -r1, lsl #6
    1c78:	000000ce 	andeq	r0, r0, lr, asr #1
    1c7c:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
    1c80:	0000009e 	muleq	r0, lr, r0
    1c84:	4608e301 	strmi	lr, [r8], -r1, lsl #6
    1c88:	0000015a 	andeq	r0, r0, sl, asr r1
    1c8c:	00739102 	rsbseq	r9, r3, r2, lsl #2
    1c90:	0016b215 	andseq	fp, r6, r5, lsl r2
    1c94:	08af0100 	stmiaeq	pc!, {r8}	; <UNPREDICTABLE>
    1c98:	00106c06 	andseq	r6, r0, r6, lsl #24
    1c9c:	00004020 	andeq	r4, r0, r0, lsr #32
    1ca0:	cc9c0100 	ldfgts	f0, [ip], {0}
    1ca4:	16000007 	strne	r0, [r0], -r7
    1ca8:	000011fd 	strdeq	r1, [r0], -sp
    1cac:	2608af01 	strcs	sl, [r8], -r1, lsl #30
    1cb0:	000000ce 	andeq	r0, r0, lr, asr #1
    1cb4:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
    1cb8:	0000009e 	muleq	r0, lr, r0
    1cbc:	4608af01 	strmi	sl, [r8], -r1, lsl #30
    1cc0:	0000015a 	andeq	r0, r0, sl, asr r1
    1cc4:	00739102 	rsbseq	r9, r3, r2, lsl #2
    1cc8:	00173e15 	andseq	r3, r7, r5, lsl lr
    1ccc:	08760100 	ldmdaeq	r6!, {r8}^
    1cd0:	00102c06 	andseq	r2, r0, r6, lsl #24
    1cd4:	00004020 	andeq	r4, r0, r0, lsr #32
    1cd8:	049c0100 	ldreq	r0, [ip], #256	; 0x100
    1cdc:	16000008 	strne	r0, [r0], -r8
    1ce0:	000012fe 	strdeq	r1, [r0], -lr
    1ce4:	26087601 	strcs	r7, [r8], -r1, lsl #12
    1ce8:	000000ce 	andeq	r0, r0, lr, asr #1
    1cec:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
    1cf0:	0000009e 	muleq	r0, lr, r0
    1cf4:	46087601 	strmi	r7, [r8], -r1, lsl #12
    1cf8:	0000015a 	andeq	r0, r0, sl, asr r1
    1cfc:	00739102 	rsbseq	r9, r3, r2, lsl #2
    1d00:	0010e315 	andseq	lr, r0, r5, lsl r3
    1d04:	08580100 	ldmdaeq	r8, {r8}^
    1d08:	000fec06 	andeq	lr, pc, r6, lsl #24
    1d0c:	00004020 	andeq	r4, r0, r0, lsr #32
    1d10:	3c9c0100 	ldfccs	f0, [ip], {0}
    1d14:	16000008 	strne	r0, [r0], -r8
    1d18:	000012e5 	andeq	r1, r0, r5, ror #5
    1d1c:	26085801 	strcs	r5, [r8], -r1, lsl #16
    1d20:	000000ce 	andeq	r0, r0, lr, asr #1
    1d24:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
    1d28:	0000009e 	muleq	r0, lr, r0
    1d2c:	46085801 	strmi	r5, [r8], -r1, lsl #16
    1d30:	0000015a 	andeq	r0, r0, sl, asr r1
    1d34:	00739102 	rsbseq	r9, r3, r2, lsl #2
    1d38:	00146215 	andseq	r6, r4, r5, lsl r2
    1d3c:	08380100 	ldmdaeq	r8!, {r8}
    1d40:	000fac06 	andeq	sl, pc, r6, lsl #24
    1d44:	00004020 	andeq	r4, r0, r0, lsr #32
    1d48:	749c0100 	ldrvc	r0, [ip], #256	; 0x100
    1d4c:	16000008 	strne	r0, [r0], -r8
    1d50:	00001063 	andeq	r1, r0, r3, rrx
    1d54:	26083801 	strcs	r3, [r8], -r1, lsl #16
    1d58:	000000ce 	andeq	r0, r0, lr, asr #1
    1d5c:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
    1d60:	0000009e 	muleq	r0, lr, r0
    1d64:	46083801 	strmi	r3, [r8], -r1, lsl #16
    1d68:	0000015a 	andeq	r0, r0, sl, asr r1
    1d6c:	00739102 	rsbseq	r9, r3, r2, lsl #2
    1d70:	0015e115 	andseq	lr, r5, r5, lsl r1
    1d74:	080e0100 	stmdaeq	lr, {r8}
    1d78:	000f9006 	andeq	r9, pc, r6
    1d7c:	00001c20 	andeq	r1, r0, r0, lsr #24
    1d80:	9c9c0100 	ldflss	f0, [ip], {0}
    1d84:	16000008 	strne	r0, [r0], -r8
    1d88:	00001443 	andeq	r1, r0, r3, asr #8
    1d8c:	24080e01 	strcs	r0, [r8], #-3585	; 0xfffff1ff
    1d90:	000000ce 	andeq	r0, r0, lr, asr #1
    1d94:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1d98:	00128c15 	andseq	r8, r2, r5, lsl ip
    1d9c:	078e0100 	streq	r0, [lr, r0, lsl #2]
    1da0:	000f5406 	andeq	r5, pc, r6, lsl #8
    1da4:	00003c20 	andeq	r3, r0, r0, lsr #24
    1da8:	d49c0100 	ldrle	r0, [ip], #256	; 0x100
    1dac:	16000008 	strne	r0, [r0], -r8
    1db0:	00000fbe 			; <UNDEFINED> instruction: 0x00000fbe
    1db4:	24078e01 	strcs	r8, [r7], #-3585	; 0xfffff1ff
    1db8:	000000ce 	andeq	r0, r0, lr, asr #1
    1dbc:	186c9102 	stmdane	ip!, {r1, r8, ip, pc}^
    1dc0:	000010cc 	andeq	r1, r0, ip, asr #1
    1dc4:	0c079001 	stceq	0, cr9, [r7], {1}
    1dc8:	000000ce 	andeq	r0, r0, lr, asr #1
    1dcc:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1dd0:	00101d15 	andseq	r1, r0, r5, lsl sp
    1dd4:	072b0100 	streq	r0, [fp, -r0, lsl #2]!
    1dd8:	000f1406 	andeq	r1, pc, r6, lsl #8
    1ddc:	00004020 	andeq	r4, r0, r0, lsr #32
    1de0:	0c9c0100 	ldfeqs	f0, [ip], {0}
    1de4:	16000009 	strne	r0, [r0], -r9
    1de8:	00000faf 	andeq	r0, r0, pc, lsr #31
    1dec:	29072b01 	stmdbcs	r7, {r0, r8, r9, fp, sp}
    1df0:	000000ce 	andeq	r0, r0, lr, asr #1
    1df4:	186c9102 	stmdane	ip!, {r1, r8, ip, pc}^
    1df8:	000010cc 	andeq	r1, r0, ip, asr #1
    1dfc:	0c072d01 	stceq	13, cr2, [r7], {1}
    1e00:	000000ce 	andeq	r0, r0, lr, asr #1
    1e04:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1e08:	00131915 	andseq	r1, r3, r5, lsl r9
    1e0c:	070b0100 	streq	r0, [fp, -r0, lsl #2]
    1e10:	000ed806 	andeq	sp, lr, r6, lsl #16
    1e14:	00003c20 	andeq	r3, r0, r0, lsr #24
    1e18:	449c0100 	ldrmi	r0, [ip], #256	; 0x100
    1e1c:	16000009 	strne	r0, [r0], -r9
    1e20:	00001362 	andeq	r1, r0, r2, ror #6
    1e24:	29070b01 	stmdbcs	r7, {r0, r8, r9, fp}
    1e28:	000000ce 	andeq	r0, r0, lr, asr #1
    1e2c:	186c9102 	stmdane	ip!, {r1, r8, ip, pc}^
    1e30:	000010cc 	andeq	r1, r0, ip, asr #1
    1e34:	0c070d01 	stceq	13, cr0, [r7], {1}
    1e38:	000000ce 	andeq	r0, r0, lr, asr #1
    1e3c:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1e40:	00141415 	andseq	r1, r4, r5, lsl r4
    1e44:	06ea0100 	strbteq	r0, [sl], r0, lsl #2
    1e48:	000e9c06 	andeq	r9, lr, r6, lsl #24
    1e4c:	00003c20 	andeq	r3, r0, r0, lsr #24
    1e50:	7c9c0100 	ldfvcs	f0, [ip], {0}
    1e54:	16000009 	strne	r0, [r0], -r9
    1e58:	00001275 	andeq	r1, r0, r5, ror r2
    1e5c:	2606ea01 	strcs	lr, [r6], -r1, lsl #20
    1e60:	000000ce 	andeq	r0, r0, lr, asr #1
    1e64:	186c9102 	stmdane	ip!, {r1, r8, ip, pc}^
    1e68:	000010cc 	andeq	r1, r0, ip, asr #1
    1e6c:	0c06ec01 	stceq	12, cr14, [r6], {1}
    1e70:	000000ce 	andeq	r0, r0, lr, asr #1
    1e74:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1e78:	00112a15 	andseq	r2, r1, r5, lsl sl
    1e7c:	06c60100 	strbeq	r0, [r6], r0, lsl #2
    1e80:	000e6006 	andeq	r6, lr, r6
    1e84:	00003c20 	andeq	r3, r0, r0, lsr #24
    1e88:	b49c0100 	ldrlt	r0, [ip], #256	; 0x100
    1e8c:	16000009 	strne	r0, [r0], -r9
    1e90:	0000125e 	andeq	r1, r0, lr, asr r2
    1e94:	2606c601 	strcs	ip, [r6], -r1, lsl #12
    1e98:	000000ce 	andeq	r0, r0, lr, asr #1
    1e9c:	186c9102 	stmdane	ip!, {r1, r8, ip, pc}^
    1ea0:	000010cc 	andeq	r1, r0, ip, asr #1
    1ea4:	0c06c801 	stceq	8, cr12, [r6], {1}
    1ea8:	000000ce 	andeq	r0, r0, lr, asr #1
    1eac:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1eb0:	0015f615 	andseq	pc, r5, r5, lsl r6	; <UNPREDICTABLE>
    1eb4:	06ab0100 	strteq	r0, [fp], r0, lsl #2
    1eb8:	000e4406 	andeq	r4, lr, r6, lsl #8
    1ebc:	00001c20 	andeq	r1, r0, r0, lsr #24
    1ec0:	dc9c0100 	ldfles	f0, [ip], {0}
    1ec4:	16000009 	strne	r0, [r0], -r9
    1ec8:	000013d8 	ldrdeq	r1, [r0], -r8
    1ecc:	2006ab01 	andcs	sl, r6, r1, lsl #22
    1ed0:	000000ce 	andeq	r0, r0, lr, asr #1
    1ed4:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1ed8:	00119715 	andseq	r9, r1, r5, lsl r7
    1edc:	05ef0100 	strbeq	r0, [pc, #256]!	; 1fe4 <startup-0x1fffe01c>
    1ee0:	000e2406 	andeq	r2, lr, r6, lsl #8
    1ee4:	00002020 	andeq	r2, r0, r0, lsr #32
    1ee8:	049c0100 	ldreq	r0, [ip], #256	; 0x100
    1eec:	1600000a 	strne	r0, [r0], -sl
    1ef0:	0000009e 	muleq	r0, lr, r0
    1ef4:	2905ef01 	stmdbcs	r5, {r0, r8, r9, sl, fp, sp, lr, pc}
    1ef8:	0000015a 	andeq	r0, r0, sl, asr r1
    1efc:	00779102 	rsbseq	r9, r7, r2, lsl #2
    1f00:	00133315 	andseq	r3, r3, r5, lsl r3
    1f04:	05de0100 	ldrbeq	r0, [lr, #256]	; 0x100
    1f08:	000e0406 	andeq	r0, lr, r6, lsl #8
    1f0c:	00002020 	andeq	r2, r0, r0, lsr #32
    1f10:	2c9c0100 	ldfcss	f0, [ip], {0}
    1f14:	1600000a 	strne	r0, [r0], -sl
    1f18:	0000009e 	muleq	r0, lr, r0
    1f1c:	2405de01 	strcs	sp, [r5], #-3585	; 0xfffff1ff
    1f20:	0000015a 	andeq	r0, r0, sl, asr r1
    1f24:	00779102 	rsbseq	r9, r7, r2, lsl #2
    1f28:	00170615 	andseq	r0, r7, r5, lsl r6
    1f2c:	05be0100 	ldreq	r0, [lr, #256]!	; 0x100
    1f30:	000da406 	andeq	sl, sp, r6, lsl #8
    1f34:	00006020 	andeq	r6, r0, r0, lsr #32
    1f38:	649c0100 	ldrvs	r0, [ip], #256	; 0x100
    1f3c:	1600000a 	strne	r0, [r0], -sl
    1f40:	0000124d 	andeq	r1, r0, sp, asr #4
    1f44:	2005be01 	andcs	fp, r5, r1, lsl #28
    1f48:	000000ce 	andeq	r0, r0, lr, asr #1
    1f4c:	186c9102 	stmdane	ip!, {r1, r8, ip, pc}^
    1f50:	000010cc 	andeq	r1, r0, ip, asr #1
    1f54:	0c05c001 	stceq	0, cr12, [r5], {1}
    1f58:	000000ce 	andeq	r0, r0, lr, asr #1
    1f5c:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1f60:	0015411b 	andseq	r4, r5, fp, lsl r1
    1f64:	05250100 	streq	r0, [r5, #-256]!	; 0xffffff00
    1f68:	000c4006 	andeq	r4, ip, r6
    1f6c:	00016420 	andeq	r6, r1, r0, lsr #8
    1f70:	ec9c0100 	ldfs	f0, [ip], {0}
    1f74:	1600000a 	strne	r0, [r0], -sl
    1f78:	0000107c 	andeq	r1, r0, ip, ror r0
    1f7c:	2b052501 	blcs	14b388 <startup-0x1feb4c78>
    1f80:	00000aec 	andeq	r0, r0, ip, ror #21
    1f84:	1a5c9102 	bne	1726394 <startup-0x1e8d9c6c>
    1f88:	00706d74 	rsbseq	r6, r0, r4, ror sp
    1f8c:	0c052701 	stceq	7, cr2, [r5], {1}
    1f90:	000000ce 	andeq	r0, r0, lr, asr #1
    1f94:	18709102 	ldmdane	r0!, {r1, r8, ip, pc}^
    1f98:	00001247 	andeq	r1, r0, r7, asr #4
    1f9c:	15052701 	strne	r2, [r5, #-1793]	; 0xfffff8ff
    1fa0:	000000ce 	andeq	r0, r0, lr, asr #1
    1fa4:	186c9102 	stmdane	ip!, {r1, r8, ip, pc}^
    1fa8:	0000120c 	andeq	r1, r0, ip, lsl #4
    1fac:	20052701 	andcs	r2, r5, r1, lsl #14
    1fb0:	000000ce 	andeq	r0, r0, lr, asr #1
    1fb4:	18749102 	ldmdane	r4!, {r1, r8, ip, pc}^
    1fb8:	00000fed 	andeq	r0, r0, sp, ror #31
    1fbc:	2c052701 	stccs	7, cr2, [r5], {1}
    1fc0:	000000ce 	andeq	r0, r0, lr, asr #1
    1fc4:	18689102 	stmdane	r8!, {r1, r8, ip, pc}^
    1fc8:	00001717 	andeq	r1, r0, r7, lsl r7
    1fcc:	36052701 	strcc	r2, [r5], -r1, lsl #14
    1fd0:	000000ce 	andeq	r0, r0, lr, asr #1
    1fd4:	18649102 	stmdane	r4!, {r1, r8, ip, pc}^
    1fd8:	00000fe8 	andeq	r0, r0, r8, ror #31
    1fdc:	45052701 	strmi	r2, [r5, #-1793]	; 0xfffff8ff
    1fe0:	000000ce 	andeq	r0, r0, lr, asr #1
    1fe4:	00609102 	rsbeq	r9, r0, r2, lsl #2
    1fe8:	03c1041c 	biceq	r0, r1, #28, 8	; 0x1c000000
    1fec:	c7150000 	ldrgt	r0, [r5, -r0]
    1ff0:	01000014 	tsteq	r0, r4, lsl r0
    1ff4:	040604f1 	streq	r0, [r6], #-1265	; 0xfffffb0f
    1ff8:	3c20000c 	stccc	0, cr0, [r0], #-48	; 0xffffffd0
    1ffc:	01000000 	mrseq	r0, (UNDEF: 0)
    2000:	000b2a9c 	muleq	fp, ip, sl
    2004:	0f861600 	svceq	0x00861600
    2008:	f1010000 	setend	le
    200c:	00ce1f04 	sbceq	r1, lr, r4, lsl #30
    2010:	91020000 	mrsls	r0, (UNDEF: 2)
    2014:	10cc186c 	sbcne	r1, ip, ip, ror #16
    2018:	f3010000 	vhadd.u8	d0, d1, d0
    201c:	00ce0c04 	sbceq	r0, lr, r4, lsl #24
    2020:	91020000 	mrsls	r0, (UNDEF: 2)
    2024:	03150074 	tsteq	r5, #116	; 0x74
    2028:	01000011 	tsteq	r0, r1, lsl r0
    202c:	cc0604d2 	cfstrsgt	mvf0, [r6], {210}	; 0xd2
    2030:	3820000b 	stmdacc	r0!, {r0, r1, r3}
    2034:	01000000 	mrseq	r0, (UNDEF: 0)
    2038:	000b629c 	muleq	fp, ip, r2
    203c:	0f861600 	svceq	0x00861600
    2040:	d2010000 	andle	r0, r1, #0
    2044:	00ce1f04 	sbceq	r1, lr, r4, lsl #30
    2048:	91020000 	mrsls	r0, (UNDEF: 2)
    204c:	10cc186c 	sbcne	r1, ip, ip, ror #16
    2050:	d4010000 	strle	r0, [r1], #-0
    2054:	00ce0c04 	sbceq	r0, lr, r4, lsl #24
    2058:	91020000 	mrsls	r0, (UNDEF: 2)
    205c:	58150074 	ldmdapl	r5, {r2, r4, r5, r6}
    2060:	01000011 	tsteq	r0, r1, lsl r0
    2064:	980604b3 	stmdals	r6, {r0, r1, r4, r5, r7, sl}
    2068:	3420000b 	strtcc	r0, [r0], #-11
    206c:	01000000 	mrseq	r0, (UNDEF: 0)
    2070:	000b9a9c 	muleq	fp, ip, sl
    2074:	12221600 	eorne	r1, r2, #0, 12
    2078:	b3010000 	movwlt	r0, #4096	; 0x1000
    207c:	00ce1e04 	sbceq	r1, lr, r4, lsl #28
    2080:	91020000 	mrsls	r0, (UNDEF: 2)
    2084:	10cc186c 	sbcne	r1, ip, ip, ror #16
    2088:	b5010000 	strlt	r0, [r1, #-0]
    208c:	00ce0c04 	sbceq	r0, lr, r4, lsl #24
    2090:	91020000 	mrsls	r0, (UNDEF: 2)
    2094:	c41d0074 	ldrgt	r0, [sp], #-116	; 0xffffff8c
    2098:	01000011 	tsteq	r0, r1, lsl r0
    209c:	9b09049a 	blls	24330c <startup-0x1fdbccf4>
    20a0:	7c000000 	stcvc	0, cr0, [r0], {-0}
    20a4:	1c20000b 	stcne	0, cr0, [r0], #-44	; 0xffffffd4
    20a8:	01000000 	mrseq	r0, (UNDEF: 0)
    20ac:	1167159c 			; <UNDEFINED> instruction: 0x1167159c
    20b0:	7d010000 	stcvc	0, cr0, [r1, #-0]
    20b4:	0b480604 	bleq	12038cc <startup-0x1edfc734>
    20b8:	00342000 	eorseq	r2, r4, r0
    20bc:	9c010000 	stcls	0, cr0, [r1], {-0}
    20c0:	00000be9 	andeq	r0, r0, r9, ror #23
    20c4:	0014d716 	andseq	sp, r4, r6, lsl r7
    20c8:	047d0100 	ldrbteq	r0, [sp], #-256	; 0xffffff00
    20cc:	0000ce20 	andeq	ip, r0, r0, lsr #28
    20d0:	6c910200 	lfmvs	f0, 4, [r1], {0}
    20d4:	0010cc18 	andseq	ip, r0, r8, lsl ip
    20d8:	047f0100 	ldrbteq	r0, [pc], #-256	; 20e0 <startup-0x1fffdf20>
    20dc:	0000ce0c 	andeq	ip, r0, ip, lsl #28
    20e0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    20e4:	16071500 	strne	r1, [r7], -r0, lsl #10
    20e8:	b5010000 	strlt	r0, [r1, #-0]
    20ec:	0b0c0603 	bleq	303900 <startup-0x1fcfc700>
    20f0:	003c2000 	eorseq	r2, ip, r0
    20f4:	9c010000 	stcls	0, cr0, [r1], {-0}
    20f8:	00000c31 	andeq	r0, r0, r1, lsr ip
    20fc:	0013c916 	andseq	ip, r3, r6, lsl r9
    2100:	03b50100 			; <UNDEFINED> instruction: 0x03b50100
    2104:	0000ce1e 	andeq	ip, r0, lr, lsl lr
    2108:	6c910200 	lfmvs	f0, 4, [r1], {0}
    210c:	00130d16 	andseq	r0, r3, r6, lsl sp
    2110:	03b50100 			; <UNDEFINED> instruction: 0x03b50100
    2114:	0000ce37 	andeq	ip, r0, r7, lsr lr
    2118:	68910200 	ldmvs	r1, {r9}
    211c:	0010cc18 	andseq	ip, r0, r8, lsl ip
    2120:	03b70100 			; <UNDEFINED> instruction: 0x03b70100
    2124:	0000ce0c 	andeq	ip, r0, ip, lsl #28
    2128:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    212c:	12131500 	andsne	r1, r3, #0, 10
    2130:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
    2134:	0acc0603 	beq	ff303948 <a+0xdf2ff9b4>
    2138:	00402000 	subeq	r2, r0, r0
    213c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2140:	00000c79 	andeq	r0, r0, r9, ror ip
    2144:	000ff216 	andeq	pc, pc, r6, lsl r2	; <UNPREDICTABLE>
    2148:	03880100 	orreq	r0, r8, #0, 2
    214c:	0000ce1e 	andeq	ip, r0, lr, lsl lr
    2150:	6c910200 	lfmvs	f0, 4, [r1], {0}
    2154:	0013a616 	andseq	sl, r3, r6, lsl r6
    2158:	03880100 	orreq	r0, r8, #0, 2
    215c:	0000ce37 	andeq	ip, r0, r7, lsr lr
    2160:	68910200 	ldmvs	r1, {r9}
    2164:	0010cc18 	andseq	ip, r0, r8, lsl ip
    2168:	038a0100 	orreq	r0, sl, #0, 2
    216c:	0000ce0c 	andeq	ip, r0, ip, lsl #28
    2170:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2174:	13471500 	movtne	r1, #29952	; 0x7500
    2178:	6f010000 	svcvs	0x00010000
    217c:	0aac0603 	beq	feb03990 <a+0xdeaff9fc>
    2180:	00202000 	eoreq	r2, r0, r0
    2184:	9c010000 	stcls	0, cr0, [r1], {-0}
    2188:	00000ca1 	andeq	r0, r0, r1, lsr #25
    218c:	00009e16 	andeq	r9, r0, r6, lsl lr
    2190:	036f0100 	cmneq	pc, #0, 2
    2194:	00015a31 	andeq	r5, r1, r1, lsr sl
    2198:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    219c:	0fa11500 	svceq	0x00a11500
    21a0:	5d010000 	stcpl	0, cr0, [r1, #-0]
    21a4:	0a8c0603 	beq	fe3039b8 <a+0xde2ffa24>
    21a8:	00202000 	eoreq	r2, r0, r0
    21ac:	9c010000 	stcls	0, cr0, [r1], {-0}
    21b0:	00000cc9 	andeq	r0, r0, r9, asr #25
    21b4:	00009e16 	andeq	r9, r0, r6, lsl lr
    21b8:	035d0100 	cmpeq	sp, #0, 2
    21bc:	00015a24 	andeq	r5, r1, r4, lsr #20
    21c0:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    21c4:	13711500 	cmnne	r1, #0, 10
    21c8:	49010000 	stmdbmi	r1, {}	; <UNPREDICTABLE>
    21cc:	0a5c0603 	beq	17039e0 <startup-0x1e8fc620>
    21d0:	00302000 	eorseq	r2, r0, r0
    21d4:	9c010000 	stcls	0, cr0, [r1], {-0}
    21d8:	00000d11 	andeq	r0, r0, r1, lsl sp
    21dc:	00142b16 	andseq	r2, r4, r6, lsl fp
    21e0:	03490100 	movteq	r0, #37120	; 0x9100
    21e4:	0000ce20 	andeq	ip, r0, r0, lsr #28
    21e8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    21ec:	00143316 	andseq	r3, r4, r6, lsl r3
    21f0:	03490100 	movteq	r0, #37120	; 0x9100
    21f4:	0000ce32 	andeq	ip, r0, r2, lsr lr
    21f8:	70910200 	addsvc	r0, r1, r0, lsl #4
    21fc:	00143b16 	andseq	r3, r4, r6, lsl fp
    2200:	03490100 	movteq	r0, #37120	; 0x9100
    2204:	0000ce44 	andeq	ip, r0, r4, asr #28
    2208:	6c910200 	lfmvs	f0, 4, [r1], {0}
    220c:	122d1500 	eorne	r1, sp, #0, 10
    2210:	dc010000 	stcle	0, cr0, [r1], {-0}
    2214:	0a3c0602 	beq	f03a24 <startup-0x1f0fc5dc>
    2218:	00202000 	eoreq	r2, r0, r0
    221c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2220:	00000d39 	andeq	r0, r0, r9, lsr sp
    2224:	00009e16 	andeq	r9, r0, r6, lsl lr
    2228:	02dc0100 	sbcseq	r0, ip, #0, 2
    222c:	00015a24 	andeq	r5, r1, r4, lsr #20
    2230:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    2234:	12c91500 	sbcne	r1, r9, #0, 10
    2238:	51010000 	mrspl	r0, (UNDEF: 1)
    223c:	0a140602 	beq	503a4c <startup-0x1fafc5b4>
    2240:	00282000 	eoreq	r2, r8, r0
    2244:	9c010000 	stcls	0, cr0, [r1], {-0}
    2248:	00000d71 	andeq	r0, r0, r1, ror sp
    224c:	00153916 	andseq	r3, r5, r6, lsl r9
    2250:	02510100 	subseq	r0, r1, #0, 2
    2254:	0000ce20 	andeq	ip, r0, r0, lsr #28
    2258:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    225c:	00157e16 	andseq	r7, r5, r6, lsl lr
    2260:	02510100 	subseq	r0, r1, #0, 2
    2264:	0000ce32 	andeq	ip, r0, r2, lsr lr
    2268:	70910200 	addsvc	r0, r1, r0, lsl #4
    226c:	14571500 	ldrbne	r1, [r7], #-1280	; 0xfffffb00
    2270:	33010000 	movwcc	r0, #4096	; 0x1000
    2274:	09f40602 	ldmibeq	r4!, {r1, r9, sl}^
    2278:	00202000 	eoreq	r2, r0, r0
    227c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2280:	00000d99 	muleq	r0, r9, sp
    2284:	00009e16 	andeq	r9, r0, r6, lsl lr
    2288:	02330100 	eorseq	r0, r3, #0, 2
    228c:	00015a21 	andeq	r5, r1, r1, lsr #20
    2290:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    2294:	16de1500 	ldrbne	r1, [lr], r0, lsl #10
    2298:	1b010000 	blne	422a0 <startup-0x1ffbdd60>
    229c:	09b80602 	ldmibeq	r8!, {r1, r9, sl}
    22a0:	003c2000 	eorseq	r2, ip, r0
    22a4:	9c010000 	stcls	0, cr0, [r1], {-0}
    22a8:	00000e01 	andeq	r0, r0, r1, lsl #28
    22ac:	0011b616 	andseq	fp, r1, r6, lsl r6
    22b0:	021b0100 	andseq	r0, fp, #0, 2
    22b4:	0000ce1d 	andeq	ip, r0, sp, lsl lr
    22b8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    22bc:	00105e16 	andseq	r5, r0, r6, lsl lr
    22c0:	021b0100 	andseq	r0, fp, #0, 2
    22c4:	0000ce35 	andeq	ip, r0, r5, lsr lr
    22c8:	70910200 	addsvc	r0, r1, r0, lsl #4
    22cc:	00101816 	andseq	r1, r0, r6, lsl r8
    22d0:	021b0100 	andseq	r0, fp, #0, 2
    22d4:	0000ce44 	andeq	ip, r0, r4, asr #28
    22d8:	6c910200 	lfmvs	f0, 4, [r1], {0}
    22dc:	00103716 	andseq	r3, r0, r6, lsl r7
    22e0:	021b0100 	andseq	r0, fp, #0, 2
    22e4:	0000ce53 	andeq	ip, r0, r3, asr lr
    22e8:	68910200 	ldmvs	r1, {r9}
    22ec:	00103c16 	andseq	r3, r0, r6, lsl ip
    22f0:	021b0100 	andseq	r0, fp, #0, 2
    22f4:	0000ce62 	andeq	ip, r0, r2, ror #28
    22f8:	00910200 	addseq	r0, r1, r0, lsl #4
    22fc:	16991500 	ldrne	r1, [r9], r0, lsl #10
    2300:	b8010000 	stmdalt	r1, {}	; <UNPREDICTABLE>
    2304:	09980601 	ldmibeq	r8, {r0, r9, sl}
    2308:	00202000 	eoreq	r2, r0, r0
    230c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2310:	00000e29 	andeq	r0, r0, r9, lsr #28
    2314:	00009e16 	andeq	r9, r0, r6, lsl lr
    2318:	01b80100 			; <UNDEFINED> instruction: 0x01b80100
    231c:	00015a21 	andeq	r5, r1, r1, lsr #20
    2320:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    2324:	11781500 	cmnne	r8, r0, lsl #10
    2328:	90010000 	andls	r0, r1, r0
    232c:	09540601 	ldmdbeq	r4, {r0, r9, sl}^
    2330:	00442000 	subeq	r2, r4, r0
    2334:	9c010000 	stcls	0, cr0, [r1], {-0}
    2338:	00000e51 	andeq	r0, r0, r1, asr lr
    233c:	000f8f16 	andeq	r8, pc, r6, lsl pc	; <UNPREDICTABLE>
    2340:	01900100 	orrseq	r0, r0, r0, lsl #2
    2344:	00009b1c 	andeq	r9, r0, ip, lsl fp
    2348:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    234c:	12da1500 	sbcsne	r1, sl, #0, 10
    2350:	77010000 	strvc	r0, [r1, -r0]
    2354:	09340601 	ldmdbeq	r4!, {r0, r9, sl}
    2358:	00202000 	eoreq	r2, r0, r0
    235c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2360:	00000e79 	andeq	r0, r0, r9, ror lr
    2364:	00009e16 	andeq	r9, r0, r6, lsl lr
    2368:	01770100 	cmneq	r7, r0, lsl #2
    236c:	00015a21 	andeq	r5, r1, r1, lsr #20
    2370:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    2374:	15111500 	ldrne	r1, [r1, #-1280]	; 0xfffffb00
    2378:	53010000 	movwpl	r0, #4096	; 0x1000
    237c:	08f60601 	ldmeq	r6!, {r0, r9, sl}^
    2380:	003e2000 	eorseq	r2, lr, r0
    2384:	9c010000 	stcls	0, cr0, [r1], {-0}
    2388:	00000eb1 			; <UNDEFINED> instruction: 0x00000eb1
    238c:	00151b16 	andseq	r1, r5, r6, lsl fp
    2390:	01530100 	cmpeq	r3, r0, lsl #2
    2394:	00009b2c 	andeq	r9, r0, ip, lsr #22
    2398:	6f910200 	svcvs	0x00910200
    239c:	0010cc18 	andseq	ip, r0, r8, lsl ip
    23a0:	01550100 	cmpeq	r5, r0, lsl #2
    23a4:	0000ce0c 	andeq	ip, r0, ip, lsl #28
    23a8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    23ac:	11d81e00 	bicsne	r1, r8, r0, lsl #28
    23b0:	34010000 	strcc	r0, [r1], #-0
    23b4:	01830d01 	orreq	r0, r3, r1, lsl #26
    23b8:	08980000 	ldmeq	r8, {}	; <UNPREDICTABLE>
    23bc:	005e2000 	subseq	r2, lr, r0
    23c0:	9c010000 	stcls	0, cr0, [r1], {-0}
    23c4:	00000efd 	strdeq	r0, [r0], -sp
    23c8:	0015c318 	andseq	ip, r5, r8, lsl r3
    23cc:	01360100 	teqeq	r6, r0, lsl #2
    23d0:	0000da11 	andeq	sp, r0, r1, lsl sl
    23d4:	68910200 	ldmvs	r1, {r9}
    23d8:	00153218 	andseq	r3, r5, r8, lsl r2
    23dc:	01370100 	teqeq	r7, r0, lsl #2
    23e0:	0001830f 	andeq	r8, r1, pc, lsl #6
    23e4:	6f910200 	svcvs	0x00910200
    23e8:	00152f18 	andseq	r2, r5, r8, lsl pc
    23ec:	01380100 	teqeq	r8, r0, lsl #2
    23f0:	0001240e 	andeq	r2, r1, lr, lsl #8
    23f4:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
    23f8:	14061500 	strne	r1, [r6], #-1280	; 0xfffffb00
    23fc:	1c010000 	stcne	0, cr0, [r1], {-0}
    2400:	08700601 	ldmdaeq	r0!, {r0, r9, sl}^
    2404:	00282000 	eoreq	r2, r8, r0
    2408:	9c010000 	stcls	0, cr0, [r1], {-0}
    240c:	00000f25 	andeq	r0, r0, r5, lsr #30
    2410:	0014e816 	andseq	lr, r4, r6, lsl r8
    2414:	011c0100 	tsteq	ip, r0, lsl #2
    2418:	00009b1c 	andeq	r9, r0, ip, lsl fp
    241c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    2420:	15731f00 	ldrbne	r1, [r3, #-3840]!	; 0xfffff100
    2424:	e1010000 	mrs	r0, (UNDEF: 1)
    2428:	00080006 	andeq	r0, r8, r6
    242c:	00007020 	andeq	r7, r0, r0, lsr #32
    2430:	009c0100 	addseq	r0, ip, r0, lsl #2
    2434:	00001e22 	andeq	r1, r0, r2, lsr #28
    2438:	08470004 	stmdaeq	r7, {r2}^
    243c:	01040000 	mrseq	r0, (UNDEF: 4)
    2440:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    2444:	0020ff0c 	eoreq	pc, r0, ip, lsl #30
    2448:	00032200 	andeq	r2, r3, r0, lsl #4
    244c:	0014fc00 	andseq	pc, r4, r0, lsl #24
    2450:	0021d820 	eoreq	sp, r1, r0, lsr #16
    2454:	00124e00 	andseq	r4, r2, r0, lsl #28
    2458:	06010200 	streq	r0, [r1], -r0, lsl #4
    245c:	000000f3 	strdeq	r0, [r0], -r3
    2460:	0000dc03 	andeq	sp, r0, r3, lsl #24
    2464:	182b0200 	stmdane	fp!, {r9}
    2468:	00000038 	andeq	r0, r0, r8, lsr r0
    246c:	f1080102 	cps	#2
    2470:	02000000 	andeq	r0, r0, #0
    2474:	00640502 	rsbeq	r0, r4, r2, lsl #10
    2478:	e0030000 	and	r0, r3, r0
    247c:	02000008 	andeq	r0, r0, #8
    2480:	00521939 	subseq	r1, r2, r9, lsr r9
    2484:	02020000 	andeq	r0, r2, #0
    2488:	00020107 	andeq	r0, r2, r7, lsl #2
    248c:	02e70300 	rsceq	r0, r7, #0, 6
    2490:	4d020000 	stcmi	0, cr0, [r2, #-0]
    2494:	00006518 	andeq	r6, r0, r8, lsl r5
    2498:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    249c:	000000c7 	andeq	r0, r0, r7, asr #1
    24a0:	00007f03 	andeq	r7, r0, r3, lsl #30
    24a4:	194f0200 	stmdbne	pc, {r9}^	; <UNPREDICTABLE>
    24a8:	00000078 	andeq	r0, r0, r8, ror r0
    24ac:	9e070402 	cdpls	4, 0, cr0, cr7, cr2, {0}
    24b0:	02000001 	andeq	r0, r0, #1
    24b4:	00c20508 	sbceq	r0, r2, r8, lsl #10
    24b8:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    24bc:	00019907 	andeq	r9, r1, r7, lsl #18
    24c0:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    24c4:	00746e69 	rsbseq	r6, r4, r9, ror #28
    24c8:	a3070402 	movwge	r0, #29698	; 0x7402
    24cc:	03000001 	movweq	r0, #1
    24d0:	000000de 	ldrdeq	r0, [r0], -lr
    24d4:	2c131803 	ldccs	8, cr1, [r3], {3}
    24d8:	03000000 	movweq	r0, #0
    24dc:	000008e2 	andeq	r0, r0, r2, ror #17
    24e0:	46142403 	ldrmi	r2, [r4], -r3, lsl #8
    24e4:	05000000 	streq	r0, [r0, #-0]
    24e8:	000000a7 	andeq	r0, r0, r7, lsr #1
    24ec:	0002e903 	andeq	lr, r2, r3, lsl #18
    24f0:	132c0300 			; <UNDEFINED> instruction: 0x132c0300
    24f4:	00000059 	andeq	r0, r0, r9, asr r0
    24f8:	0000b805 	andeq	fp, r0, r5, lsl #16
    24fc:	00810300 	addeq	r0, r1, r0, lsl #6
    2500:	30030000 	andcc	r0, r3, r0
    2504:	00006c14 	andeq	r6, r0, r4, lsl ip
    2508:	00c90500 	sbceq	r0, r9, r0, lsl #10
    250c:	15060000 	strne	r0, [r6, #-0]
    2510:	04000003 	streq	r0, [r0], #-3
    2514:	c41906fa 	ldrgt	r0, [r9], #-1786	; 0xfffff906
    2518:	07000000 	streq	r0, [r0, -r0]
    251c:	0000025f 	andeq	r0, r0, pc, asr r2
    2520:	c9113b05 	ldmdbgt	r1, {r0, r2, r8, r9, fp, ip, sp}
    2524:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2528:	00380107 	eorseq	r0, r8, r7, lsl #2
    252c:	5d060000 	stcpl	0, cr0, [r6, #-0]
    2530:	010f0e03 	tsteq	pc, r3, lsl #28
    2534:	b2090000 	andlt	r0, r9, #0
    2538:	00000022 	andeq	r0, r0, r2, lsr #32
    253c:	5445530a 	strbpl	r5, [r5], #-778	; 0xfffffcf6
    2540:	0b000100 	bleq	2948 <startup-0x1fffd6b8>
    2544:	000013fb 	strdeq	r1, [r0], -fp
    2548:	28035d06 	stmdacs	r3, {r1, r2, r8, sl, fp, ip, lr}
    254c:	000000f3 	strdeq	r0, [r0], -r3
    2550:	00158d0b 	andseq	r8, r5, fp, lsl #26
    2554:	035d0600 	cmpeq	sp, #0, 12
    2558:	0000f334 	andeq	pc, r0, r4, lsr r3	; <UNPREDICTABLE>
    255c:	01070800 	tsteq	r7, r0, lsl #16
    2560:	00000038 	andeq	r0, r0, r8, lsr r0
    2564:	0e035f06 	cdpeq	15, 0, cr5, cr3, cr6, {0}
    2568:	00000145 	andeq	r0, r0, r5, asr #2
    256c:	0000ac09 	andeq	sl, r0, r9, lsl #24
    2570:	c3090000 	movwgt	r0, #36864	; 0x9000
    2574:	01000003 	tsteq	r0, r3
    2578:	02d70b00 	sbcseq	r0, r7, #0, 22
    257c:	5f060000 	svcpl	0x00060000
    2580:	01292f03 			; <UNDEFINED> instruction: 0x01292f03
    2584:	540c0000 	strpl	r0, [ip], #-0
    2588:	09074706 	stmdbeq	r7, {r1, r2, r8, r9, sl, lr}
    258c:	00000353 	andeq	r0, r0, r3, asr r3
    2590:	3152430d 	cmpcc	r2, sp, lsl #6
    2594:	07490600 	strbeq	r0, [r9, -r0, lsl #12]
    2598:	0000b311 	andeq	fp, r0, r1, lsl r3
    259c:	790e0000 	stmdbvc	lr, {}	; <UNPREDICTABLE>
    25a0:	06000002 	streq	r0, [r0], -r2
    25a4:	a711074a 	ldrge	r0, [r1, -sl, asr #14]
    25a8:	02000000 	andeq	r0, r0, #0
    25ac:	3252430d 	subscc	r4, r2, #872415232	; 0x34000000
    25b0:	074b0600 	strbeq	r0, [fp, -r0, lsl #12]
    25b4:	0000b311 	andeq	fp, r0, r1, lsl r3
    25b8:	0e0e0400 	cfcpyseq	mvf0, mvf14
    25bc:	0600000c 	streq	r0, [r0], -ip
    25c0:	a711074c 	ldrge	r0, [r1, -ip, asr #14]
    25c4:	06000000 	streq	r0, [r0], -r0
    25c8:	0009f40e 	andeq	pc, r9, lr, lsl #8
    25cc:	074d0600 	strbeq	r0, [sp, -r0, lsl #12]
    25d0:	0000b311 	andeq	fp, r0, r1, lsl r3
    25d4:	830e0800 	movwhi	r0, #59392	; 0xe800
    25d8:	06000002 	streq	r0, [r0], -r2
    25dc:	a711074e 	ldrge	r0, [r1, -lr, asr #14]
    25e0:	0a000000 	beq	25e8 <startup-0x1fffda18>
    25e4:	000ec40e 	andeq	ip, lr, lr, lsl #8
    25e8:	074f0600 	strbeq	r0, [pc, -r0, lsl #12]
    25ec:	0000b311 	andeq	fp, r0, r1, lsl r3
    25f0:	8d0e0c00 	stchi	12, cr0, [lr, #-0]
    25f4:	06000002 	streq	r0, [r0], -r2
    25f8:	a7110750 			; <UNDEFINED> instruction: 0xa7110750
    25fc:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    2600:	0052530d 	subseq	r5, r2, sp, lsl #6
    2604:	11075106 	tstne	r7, r6, lsl #2
    2608:	000000b3 	strheq	r0, [r0], -r3
    260c:	02970e10 	addseq	r0, r7, #16, 28	; 0x100
    2610:	52060000 	andpl	r0, r6, #0
    2614:	00a71107 	adceq	r1, r7, r7, lsl #2
    2618:	0d120000 	ldceq	0, cr0, [r2, #-0]
    261c:	00524745 	subseq	r4, r2, r5, asr #14
    2620:	11075306 	tstne	r7, r6, lsl #6
    2624:	000000b3 	strheq	r0, [r0], -r3
    2628:	02a10e14 	adceq	r0, r1, #20, 28	; 0x140
    262c:	54060000 	strpl	r0, [r6], #-0
    2630:	00a71107 	adceq	r1, r7, r7, lsl #2
    2634:	0e160000 	cdpeq	0, 1, cr0, cr6, cr0, {0}
    2638:	000007c2 	andeq	r0, r0, r2, asr #15
    263c:	11075506 	tstne	r7, r6, lsl #10
    2640:	000000b3 	strheq	r0, [r0], -r3
    2644:	0c180e18 	ldceq	14, cr0, [r8], {24}
    2648:	56060000 	strpl	r0, [r6], -r0
    264c:	00a71107 	adceq	r1, r7, r7, lsl #2
    2650:	0e1a0000 	cdpeq	0, 1, cr0, cr10, cr0, {0}
    2654:	000007c8 	andeq	r0, r0, r8, asr #15
    2658:	11075706 	tstne	r7, r6, lsl #14
    265c:	000000b3 	strheq	r0, [r0], -r3
    2660:	0d160e1c 	ldceq	14, cr0, [r6, #-112]	; 0xffffff90
    2664:	58060000 	stmdapl	r6, {}	; <UNPREDICTABLE>
    2668:	00a71107 	adceq	r1, r7, r7, lsl #2
    266c:	0e1e0000 	cdpeq	0, 1, cr0, cr14, cr0, {0}
    2670:	00000871 	andeq	r0, r0, r1, ror r8
    2674:	11075906 	tstne	r7, r6, lsl #18
    2678:	000000b3 	strheq	r0, [r0], -r3
    267c:	0d2c0e20 	stceq	14, cr0, [ip, #-128]!	; 0xffffff80
    2680:	5a060000 	bpl	182688 <startup-0x1fe7d978>
    2684:	00a71107 	adceq	r1, r7, r7, lsl #2
    2688:	0d220000 	stceq	0, cr0, [r2, #-0]
    268c:	00544e43 	subseq	r4, r4, r3, asr #28
    2690:	11075b06 	tstne	r7, r6, lsl #22
    2694:	000000d5 	ldrdeq	r0, [r0], -r5
    2698:	53500d24 	cmppl	r0, #36, 26	; 0x900
    269c:	5c060043 	stcpl	0, cr0, [r6], {67}	; 0x43
    26a0:	00b31107 	adcseq	r1, r3, r7, lsl #2
    26a4:	0e280000 	cdpeq	0, 2, cr0, cr8, cr0, {0}
    26a8:	00000c2c 	andeq	r0, r0, ip, lsr #24
    26ac:	11075d06 	tstne	r7, r6, lsl #26
    26b0:	000000a7 	andeq	r0, r0, r7, lsr #1
    26b4:	52410d2a 	subpl	r0, r1, #2688	; 0xa80
    26b8:	5e060052 	mcrpl	0, 0, r0, cr6, cr2, {2}
    26bc:	00d51107 	sbcseq	r1, r5, r7, lsl #2
    26c0:	0d2c0000 	stceq	0, cr0, [ip, #-0]
    26c4:	00524352 	subseq	r4, r2, r2, asr r3
    26c8:	11075f06 	tstne	r7, r6, lsl #30
    26cc:	000000b3 	strheq	r0, [r0], -r3
    26d0:	07f40e30 			; <UNDEFINED> instruction: 0x07f40e30
    26d4:	60060000 	andvs	r0, r6, r0
    26d8:	00a71107 	adceq	r1, r7, r7, lsl #2
    26dc:	0e320000 	cdpeq	0, 3, cr0, cr2, cr0, {0}
    26e0:	00000e24 	andeq	r0, r0, r4, lsr #28
    26e4:	11076106 	tstne	r7, r6, lsl #2
    26e8:	000000d5 	ldrdeq	r0, [r0], -r5
    26ec:	071e0e34 			; <UNDEFINED> instruction: 0x071e0e34
    26f0:	62060000 	andvs	r0, r6, #0
    26f4:	00d51107 	sbcseq	r1, r5, r7, lsl #2
    26f8:	0e380000 	cdpeq	0, 3, cr0, cr8, cr0, {0}
    26fc:	00000e33 	andeq	r0, r0, r3, lsr lr
    2700:	11076306 	tstne	r7, r6, lsl #6
    2704:	000000d5 	ldrdeq	r0, [r0], -r5
    2708:	0e380e3c 	mrceq	14, 1, r0, cr8, cr12, {1}
    270c:	64060000 	strvs	r0, [r6], #-0
    2710:	00d51107 	sbcseq	r1, r5, r7, lsl #2
    2714:	0e400000 	cdpeq	0, 4, cr0, cr0, cr0, {0}
    2718:	00000ac7 	andeq	r0, r0, r7, asr #21
    271c:	11076506 	tstne	r7, r6, lsl #10
    2720:	000000b3 	strheq	r0, [r0], -r3
    2724:	07ff0e44 	ldrbeq	r0, [pc, r4, asr #28]!
    2728:	66060000 	strvs	r0, [r6], -r0
    272c:	00a71107 	adceq	r1, r7, r7, lsl #2
    2730:	0d460000 	stcleq	0, cr0, [r6, #-0]
    2734:	00524344 	subseq	r4, r2, r4, asr #6
    2738:	11076706 	tstne	r7, r6, lsl #14
    273c:	000000b3 	strheq	r0, [r0], -r3
    2740:	080a0e48 	stmdaeq	sl, {r3, r6, r9, sl, fp}
    2744:	68060000 	stmdavs	r6, {}	; <UNPREDICTABLE>
    2748:	00a71107 	adceq	r1, r7, r7, lsl #2
    274c:	0e4a0000 	cdpeq	0, 4, cr0, cr10, cr0, {0}
    2750:	00000d95 	muleq	r0, r5, sp
    2754:	11076906 	tstne	r7, r6, lsl #18
    2758:	000000b3 	strheq	r0, [r0], -r3
    275c:	08150e4c 	ldmdaeq	r5, {r2, r3, r6, r9, sl, fp}
    2760:	6a060000 	bvs	182768 <startup-0x1fe7d898>
    2764:	00a71107 	adceq	r1, r7, r7, lsl #2
    2768:	0d4e0000 	stcleq	0, cr0, [lr, #-0]
    276c:	0600524f 	streq	r5, [r0], -pc, asr #4
    2770:	b311076b 	tstlt	r1, #28049408	; 0x1ac0000
    2774:	50000000 	andpl	r0, r0, r0
    2778:	0008200e 	andeq	r2, r8, lr
    277c:	076c0600 	strbeq	r0, [ip, -r0, lsl #12]!
    2780:	0000a711 	andeq	sl, r0, r1, lsl r7
    2784:	0b005200 	bleq	16f8c <startup-0x1ffe9074>
    2788:	00000704 	andeq	r0, r0, r4, lsl #14
    278c:	03076d06 	movweq	r6, #32006	; 0x7d06
    2790:	00000152 	andeq	r0, r0, r2, asr r1
    2794:	37070c0f 	strcc	r0, [r7, -pc, lsl #24]
    2798:	0003ab09 	andeq	sl, r3, r9, lsl #22
    279c:	0acc1000 	beq	ff3067a4 <a+0xdf302810>
    27a0:	39070000 	stmdbcc	r7, {}	; <UNPREDICTABLE>
    27a4:	0000a70c 	andeq	sl, r0, ip, lsl #14
    27a8:	c1100000 	tstgt	r0, r0
    27ac:	07000006 	streq	r0, [r0, -r6]
    27b0:	00a70c3c 	adceq	r0, r7, ip, lsr ip
    27b4:	10020000 	andne	r0, r2, r0
    27b8:	00000db2 			; <UNDEFINED> instruction: 0x00000db2
    27bc:	c90c3f07 	stmdbgt	ip, {r0, r1, r2, r8, r9, sl, fp, ip, sp}
    27c0:	04000000 	streq	r0, [r0], #-0
    27c4:	000cc210 	andeq	ip, ip, r0, lsl r2
    27c8:	0c430700 	mcrreq	7, 0, r0, r3, cr0
    27cc:	000000a7 	andeq	r0, r0, r7, lsr #1
    27d0:	0e751008 	cdpeq	0, 7, cr1, cr5, cr8, {0}
    27d4:	46070000 	strmi	r0, [r7], -r0
    27d8:	00009b0b 	andeq	r9, r0, fp, lsl #22
    27dc:	03000a00 	movweq	r0, #2560	; 0xa00
    27e0:	000009d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    27e4:	60034e07 	andvs	r4, r3, r7, lsl #28
    27e8:	0f000003 	svceq	0x00000003
    27ec:	09540714 	ldmdbeq	r4, {r2, r4, r8, r9, sl}^
    27f0:	00000429 	andeq	r0, r0, r9, lsr #8
    27f4:	00201810 	eoreq	r1, r0, r0, lsl r8
    27f8:	0c560700 	mrrceq	7, 0, r0, r6, cr0
    27fc:	000000a7 	andeq	r0, r0, r7, lsr #1
    2800:	1dcb1000 	stclne	0, cr1, [fp]
    2804:	59070000 	stmdbpl	r7, {}	; <UNPREDICTABLE>
    2808:	0000a70c 	andeq	sl, r0, ip, lsl #14
    280c:	88100200 	ldmdahi	r0, {r9}
    2810:	07000019 	smladeq	r0, r9, r0, r0
    2814:	00a70c5c 	adceq	r0, r7, ip, asr ip
    2818:	10040000 	andne	r0, r4, r0
    281c:	00001821 	andeq	r1, r0, r1, lsr #16
    2820:	c90c6007 	stmdbgt	ip, {r0, r1, r2, sp, lr}
    2824:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2828:	001ad410 	andseq	sp, sl, r0, lsl r4
    282c:	0c630700 	stcleq	7, cr0, [r3], #-0
    2830:	000000a7 	andeq	r0, r0, r7, lsr #1
    2834:	1f14100c 	svcne	0x0014100c
    2838:	66070000 	strvs	r0, [r7], -r0
    283c:	0000a70c 	andeq	sl, r0, ip, lsl #14
    2840:	69100e00 	ldmdbvs	r0, {r9, sl, fp}
    2844:	07000021 	streq	r0, [r0, -r1, lsr #32]
    2848:	00a70c6a 	adceq	r0, r7, sl, ror #24
    284c:	10100000 	andsne	r0, r0, r0
    2850:	00001d3e 	andeq	r1, r0, lr, lsr sp
    2854:	a70c6e07 	strge	r6, [ip, -r7, lsl #28]
    2858:	12000000 	andne	r0, r0, #0
    285c:	20710300 	rsbscs	r0, r1, r0, lsl #6
    2860:	71070000 	mrsvc	r0, (UNDEF: 7)
    2864:	0003b703 	andeq	fp, r3, r3, lsl #14
    2868:	070a0f00 	streq	r0, [sl, -r0, lsl #30]
    286c:	04800977 	streq	r0, [r0], #2423	; 0x977
    2870:	1d100000 	ldcne	0, cr0, [r0, #-0]
    2874:	07000019 	smladeq	r0, r9, r0, r0
    2878:	00a70c7a 	adceq	r0, r7, sl, ror ip
    287c:	10000000 	andne	r0, r0, r0
    2880:	00001deb 	andeq	r1, r0, fp, ror #27
    2884:	a70c7d07 	strge	r7, [ip, -r7, lsl #26]
    2888:	02000000 	andeq	r0, r0, #0
    288c:	0018ab10 	andseq	sl, r8, r0, lsl fp
    2890:	0c800700 	stceq	7, cr0, [r0], {0}
    2894:	000000a7 	andeq	r0, r0, r7, lsr #1
    2898:	1d221004 	stcne	0, cr1, [r2, #-16]!
    289c:	83070000 	movwhi	r0, #28672	; 0x7000
    28a0:	0000a70c 	andeq	sl, r0, ip, lsl #14
    28a4:	5b100600 	blpl	4040ac <startup-0x1fbfbf54>
    28a8:	07000018 	smladeq	r0, r8, r0, r0
    28ac:	00a70c86 	adceq	r0, r7, r6, lsl #25
    28b0:	00080000 	andeq	r0, r8, r0
    28b4:	001f8503 	andseq	r8, pc, r3, lsl #10
    28b8:	03880700 	orreq	r0, r8, #0, 14
    28bc:	00000435 	andeq	r0, r0, r5, lsr r4
    28c0:	8f070e0f 	svchi	0x00070e0f
    28c4:	0004f109 	andeq	pc, r4, r9, lsl #2
    28c8:	1ba31000 	blne	fe8c68d0 <a+0xde8c293c>
    28cc:	92070000 	andls	r0, r7, #0
    28d0:	0000a70c 	andeq	sl, r0, ip, lsl #14
    28d4:	9a100000 	bls	4028dc <startup-0x1fbfd724>
    28d8:	0700001e 	smladeq	r0, lr, r0, r0
    28dc:	00a70c95 	umlaleq	r0, r7, r5, ip
    28e0:	10020000 	andne	r0, r2, r0
    28e4:	00001e15 	andeq	r1, r0, r5, lsl lr
    28e8:	a70c9807 	strge	r9, [ip, -r7, lsl #16]
    28ec:	04000000 	streq	r0, [r0], #-0
    28f0:	001cd710 	andseq	sp, ip, r0, lsl r7
    28f4:	0c9b0700 	ldceq	7, cr0, [fp], {0}
    28f8:	000000a7 	andeq	r0, r0, r7, lsr #1
    28fc:	1ccd1006 	stclne	0, cr1, [sp], {6}
    2900:	9f070000 	svcls	0x00070000
    2904:	0000a70c 	andeq	sl, r0, ip, lsl #14
    2908:	33100800 	tstcc	r0, #0, 16
    290c:	07000020 	streq	r0, [r0, -r0, lsr #32]
    2910:	00a70ca2 	adceq	r0, r7, r2, lsr #25
    2914:	100a0000 	andne	r0, sl, r0
    2918:	00001bdc 	ldrdeq	r1, [r0], -ip
    291c:	a70ca507 	strge	sl, [ip, -r7, lsl #10]
    2920:	0c000000 	stceq	0, cr0, [r0], {-0}
    2924:	1b7e0300 	blne	1f8352c <startup-0x1e07cad4>
    2928:	a7070000 	strge	r0, [r7, -r0]
    292c:	00048c03 	andeq	r8, r4, r3, lsl #24
    2930:	1ac91100 	bne	ff246d38 <a+0xdf242da4>
    2934:	00010000 	andeq	r0, r1, r0
    2938:	35f40d0d 	ldrbcc	r0, [r4, #3341]!	; 0xd0d
    293c:	00e02000 	rsceq	r2, r0, r0
    2940:	9c010000 	stcls	0, cr0, [r1], {-0}
    2944:	00000585 	andeq	r0, r0, r5, lsl #11
    2948:	001bb112 	andseq	fp, fp, r2, lsl r1
    294c:	0d000100 	stfeqs	f0, [r0, #-0]
    2950:	00058525 	andeq	r8, r5, r5, lsr #10
    2954:	5c910200 	lfmpl	f0, 4, [r1], {0}
    2958:	001deb12 	andseq	lr, sp, r2, lsl fp
    295c:	0d000100 	stfeqs	f0, [r0, #-0]
    2960:	0000a734 	andeq	sl, r0, r4, lsr r7
    2964:	5a910200 	bpl	fe44316c <a+0xde43f1d8>
    2968:	0018ab12 	andseq	sl, r8, r2, lsl fp
    296c:	0d000100 	stfeqs	f0, [r0, #-0]
    2970:	0000a74d 	andeq	sl, r0, sp, asr #14
    2974:	58910200 	ldmpl	r1, {r9}
    2978:	00185b12 	andseq	r5, r8, r2, lsl fp
    297c:	0d010100 	stfeqs	f0, [r1, #-0]
    2980:	0000a721 	andeq	sl, r0, r1, lsr #14
    2984:	56910200 	ldrpl	r0, [r1], r0, lsl #4
    2988:	00183413 	andseq	r3, r8, r3, lsl r4
    298c:	0d030100 	stfeqs	f0, [r3, #-0]
    2990:	0000a70c 	andeq	sl, r0, ip, lsl #14
    2994:	66910200 	ldrvs	r0, [r1], r0, lsl #4
    2998:	001aaa13 	andseq	sl, sl, r3, lsl sl
    299c:	0d030100 	stfeqs	f0, [r3, #-0]
    29a0:	0000a71a 	andeq	sl, r0, sl, lsl r7
    29a4:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    29a8:	706d7414 	rsbvc	r7, sp, r4, lsl r4
    29ac:	0d030100 	stfeqs	f0, [r3, #-0]
    29b0:	0000a727 	andeq	sl, r0, r7, lsr #14
    29b4:	62910200 	addsvs	r0, r1, #0, 4
    29b8:	53041500 	movwpl	r1, #17664	; 0x4500
    29bc:	11000003 	tstne	r0, r3
    29c0:	00001c2b 	andeq	r1, r0, fp, lsr #24
    29c4:	0d0cd701 	stceq	7, cr13, [ip, #-4]
    29c8:	20003520 	andcs	r3, r0, r0, lsr #10
    29cc:	000000d4 	ldrdeq	r0, [r0], -r4
    29d0:	06139c01 	ldreq	r9, [r3], -r1, lsl #24
    29d4:	b1120000 	tstlt	r2, r0
    29d8:	0100001b 	tsteq	r0, fp, lsl r0
    29dc:	85250cd7 	strhi	r0, [r5, #-3287]!	; 0xfffff329
    29e0:	02000005 	andeq	r0, r0, #5
    29e4:	eb125c91 	bl	499c30 <startup-0x1fb663d0>
    29e8:	0100001d 	tsteq	r0, sp, lsl r0
    29ec:	a7340cd7 			; <UNDEFINED> instruction: 0xa7340cd7
    29f0:	02000000 	andeq	r0, r0, #0
    29f4:	ab125a91 	blge	499440 <startup-0x1fb66bc0>
    29f8:	01000018 	tsteq	r0, r8, lsl r0
    29fc:	a74d0cd7 			; <UNDEFINED> instruction: 0xa74d0cd7
    2a00:	02000000 	andeq	r0, r0, #0
    2a04:	5b125891 	blpl	498c50 <startup-0x1fb673b0>
    2a08:	01000018 	tsteq	r0, r8, lsl r0
    2a0c:	a7210cd8 			; <UNDEFINED> instruction: 0xa7210cd8
    2a10:	02000000 	andeq	r0, r0, #0
    2a14:	34135691 	ldrcc	r5, [r3], #-1681	; 0xfffff96f
    2a18:	01000018 	tsteq	r0, r8, lsl r0
    2a1c:	a70c0cda 			; <UNDEFINED> instruction: 0xa70c0cda
    2a20:	02000000 	andeq	r0, r0, #0
    2a24:	aa136691 	bge	4dc470 <startup-0x1fb23b90>
    2a28:	0100001a 	tsteq	r0, sl, lsl r0
    2a2c:	a71a0cda 			; <UNDEFINED> instruction: 0xa71a0cda
    2a30:	02000000 	andeq	r0, r0, #0
    2a34:	74146491 	ldrvc	r6, [r4], #-1169	; 0xfffffb6f
    2a38:	0100706d 	tsteq	r0, sp, rrx
    2a3c:	a7270cda 			; <UNDEFINED> instruction: 0xa7270cda
    2a40:	02000000 	andeq	r0, r0, #0
    2a44:	11006291 			; <UNDEFINED> instruction: 0x11006291
    2a48:	00001ee5 	andeq	r1, r0, r5, ror #29
    2a4c:	0d0cad01 	stceq	13, cr10, [ip, #-4]
    2a50:	2000344a 	andcs	r3, r0, sl, asr #8
    2a54:	000000d6 	ldrdeq	r0, [r0], -r6
    2a58:	069b9c01 	ldreq	r9, [fp], r1, lsl #24
    2a5c:	b1120000 	tstlt	r2, r0
    2a60:	0100001b 	tsteq	r0, fp, lsl r0
    2a64:	85250cad 	strhi	r0, [r5, #-3245]!	; 0xfffff353
    2a68:	02000005 	andeq	r0, r0, #5
    2a6c:	eb125c91 	bl	499cb8 <startup-0x1fb66348>
    2a70:	0100001d 	tsteq	r0, sp, lsl r0
    2a74:	a7340cad 	ldrge	r0, [r4, -sp, lsr #25]!
    2a78:	02000000 	andeq	r0, r0, #0
    2a7c:	ab125a91 	blge	4994c8 <startup-0x1fb66b38>
    2a80:	01000018 	tsteq	r0, r8, lsl r0
    2a84:	a74d0cad 	strbge	r0, [sp, -sp, lsr #25]
    2a88:	02000000 	andeq	r0, r0, #0
    2a8c:	5b125891 	blpl	498cd8 <startup-0x1fb67328>
    2a90:	01000018 	tsteq	r0, r8, lsl r0
    2a94:	a7210cae 	strge	r0, [r1, -lr, lsr #25]!
    2a98:	02000000 	andeq	r0, r0, #0
    2a9c:	2b135691 	blcs	4d84e8 <startup-0x1fb27b18>
    2aa0:	01000018 	tsteq	r0, r8, lsl r0
    2aa4:	a70c0cb0 			; <UNDEFINED> instruction: 0xa70c0cb0
    2aa8:	02000000 	andeq	r0, r0, #0
    2aac:	aa136691 	bge	4dc4f8 <startup-0x1fb23b08>
    2ab0:	0100001a 	tsteq	r0, sl, lsl r0
    2ab4:	a71a0cb0 			; <UNDEFINED> instruction: 0xa71a0cb0
    2ab8:	02000000 	andeq	r0, r0, #0
    2abc:	74146491 	ldrvc	r6, [r4], #-1169	; 0xfffffb6f
    2ac0:	0100706d 	tsteq	r0, sp, rrx
    2ac4:	a7270cb0 			; <UNDEFINED> instruction: 0xa7270cb0
    2ac8:	02000000 	andeq	r0, r0, #0
    2acc:	11006291 			; <UNDEFINED> instruction: 0x11006291
    2ad0:	00001f3c 	andeq	r1, r0, ip, lsr pc
    2ad4:	0d0c8401 	cfstrseq	mvf8, [ip, #-4]
    2ad8:	20003398 	mulcs	r0, r8, r3
    2adc:	000000b2 	strheq	r0, [r0], -r2
    2ae0:	07139c01 	ldreq	r9, [r3, -r1, lsl #24]
    2ae4:	b1120000 	tstlt	r2, r0
    2ae8:	0100001b 	tsteq	r0, fp, lsl r0
    2aec:	85250c84 	strhi	r0, [r5, #-3204]!	; 0xfffff37c
    2af0:	02000005 	andeq	r0, r0, #5
    2af4:	eb125c91 	bl	499d40 <startup-0x1fb662c0>
    2af8:	0100001d 	tsteq	r0, sp, lsl r0
    2afc:	a7340c84 	ldrge	r0, [r4, -r4, lsl #25]!
    2b00:	02000000 	andeq	r0, r0, #0
    2b04:	ab125a91 	blge	499550 <startup-0x1fb66ab0>
    2b08:	01000018 	tsteq	r0, r8, lsl r0
    2b0c:	a74d0c84 	strbge	r0, [sp, -r4, lsl #25]
    2b10:	02000000 	andeq	r0, r0, #0
    2b14:	5b125891 	blpl	498d60 <startup-0x1fb672a0>
    2b18:	01000018 	tsteq	r0, r8, lsl r0
    2b1c:	a7210c85 	strge	r0, [r1, -r5, lsl #25]!
    2b20:	02000000 	andeq	r0, r0, #0
    2b24:	2b135691 	blcs	4d8570 <startup-0x1fb27a90>
    2b28:	01000018 	tsteq	r0, r8, lsl r0
    2b2c:	a70c0c87 	strge	r0, [ip, -r7, lsl #25]
    2b30:	02000000 	andeq	r0, r0, #0
    2b34:	aa136691 	bge	4dc580 <startup-0x1fb23a80>
    2b38:	0100001a 	tsteq	r0, sl, lsl r0
    2b3c:	a71a0c87 	ldrge	r0, [sl, -r7, lsl #25]
    2b40:	02000000 	andeq	r0, r0, #0
    2b44:	16006491 			; <UNDEFINED> instruction: 0x16006491
    2b48:	000020b1 	strheq	r2, [r0], -r1
    2b4c:	060c6501 	streq	r6, [ip], -r1, lsl #10
    2b50:	20003378 	andcs	r3, r0, r8, ror r3
    2b54:	00000020 	andeq	r0, r0, r0, lsr #32
    2b58:	074b9c01 	strbeq	r9, [fp, -r1, lsl #24]
    2b5c:	b1120000 	tstlt	r2, r0
    2b60:	0100001b 	tsteq	r0, fp, lsl r0
    2b64:	85230c65 	strhi	r0, [r3, #-3173]!	; 0xfffff39b
    2b68:	02000005 	andeq	r0, r0, #5
    2b6c:	6f127491 	svcvs	0x00127491
    2b70:	0100001d 	tsteq	r0, sp, lsl r0
    2b74:	a7320c65 	ldrge	r0, [r2, -r5, ror #24]!
    2b78:	02000000 	andeq	r0, r0, #0
    2b7c:	16007291 			; <UNDEFINED> instruction: 0x16007291
    2b80:	000020cd 	andeq	r2, r0, sp, asr #1
    2b84:	060c3201 	streq	r3, [ip], -r1, lsl #4
    2b88:	20003338 	andcs	r3, r0, r8, lsr r3
    2b8c:	00000040 	andeq	r0, r0, r0, asr #32
    2b90:	07839c01 	streq	r9, [r3, r1, lsl #24]
    2b94:	b1120000 	tstlt	r2, r0
    2b98:	0100001b 	tsteq	r0, fp, lsl r0
    2b9c:	85280c32 	strhi	r0, [r8, #-3122]!	; 0xfffff3ce
    2ba0:	02000005 	andeq	r0, r0, #5
    2ba4:	9e127491 	cfcmpsls	r7, mvf2, mvf1
    2ba8:	01000000 	mrseq	r0, (UNDEF: 0)
    2bac:	453e0c32 	ldrmi	r0, [lr, #-3122]!	; 0xfffff3ce
    2bb0:	02000001 	andeq	r0, r0, #1
    2bb4:	16007391 			; <UNDEFINED> instruction: 0x16007391
    2bb8:	000018c0 	andeq	r1, r0, r0, asr #17
    2bbc:	060bfe01 	streq	pc, [fp], -r1, lsl #28
    2bc0:	20003262 	andcs	r3, r0, r2, ror #4
    2bc4:	000000d6 	ldrdeq	r0, [r0], -r6
    2bc8:	080b9c01 	stmdaeq	fp, {r0, sl, fp, ip, pc}
    2bcc:	b1120000 	tstlt	r2, r0
    2bd0:	0100001b 	tsteq	r0, fp, lsl r0
    2bd4:	852e0bfe 	strhi	r0, [lr, #-3070]!	; 0xfffff402
    2bd8:	02000005 	andeq	r0, r0, #5
    2bdc:	b6125c91 			; <UNDEFINED> instruction: 0xb6125c91
    2be0:	0100001b 	tsteq	r0, fp, lsl r0
    2be4:	a73d0bfe 			; <UNDEFINED> instruction: 0xa73d0bfe
    2be8:	02000000 	andeq	r0, r0, #0
    2bec:	02125a91 	andseq	r5, r2, #593920	; 0x91000
    2bf0:	01000019 	tsteq	r0, r9, lsl r0
    2bf4:	a72a0bff 			; <UNDEFINED> instruction: 0xa72a0bff
    2bf8:	02000000 	andeq	r0, r0, #0
    2bfc:	f9125891 			; <UNDEFINED> instruction: 0xf9125891
    2c00:	01000017 	tsteq	r0, r7, lsl r0
    2c04:	a7440bff 			; <UNDEFINED> instruction: 0xa7440bff
    2c08:	02000000 	andeq	r0, r0, #0
    2c0c:	73135691 	tstvc	r3, #152043520	; 0x9100000
    2c10:	0100001c 	tsteq	r0, ip, lsl r0
    2c14:	a70c0c01 	strge	r0, [ip, -r1, lsl #24]
    2c18:	02000000 	andeq	r0, r0, #0
    2c1c:	2b136691 	blcs	4dc668 <startup-0x1fb23998>
    2c20:	01000018 	tsteq	r0, r8, lsl r0
    2c24:	a70c0c02 	strge	r0, [ip, -r2, lsl #24]
    2c28:	02000000 	andeq	r0, r0, #0
    2c2c:	aa136491 	bge	4dbe78 <startup-0x1fb24188>
    2c30:	0100001a 	tsteq	r0, sl, lsl r0
    2c34:	a70c0c03 	strge	r0, [ip, -r3, lsl #24]
    2c38:	02000000 	andeq	r0, r0, #0
    2c3c:	16006291 			; <UNDEFINED> instruction: 0x16006291
    2c40:	00002196 	muleq	r0, r6, r1
    2c44:	060bc401 	streq	ip, [fp], -r1, lsl #8
    2c48:	200031f0 	strdcs	r3, [r0], -r0
    2c4c:	00000072 	andeq	r0, r0, r2, ror r0
    2c50:	08739c01 	ldmdaeq	r3!, {r0, sl, fp, ip, pc}^
    2c54:	b1120000 	tstlt	r2, r0
    2c58:	0100001b 	tsteq	r0, fp, lsl r0
    2c5c:	85210bc4 	strhi	r0, [r1, #-3012]!	; 0xfffff43c
    2c60:	02000005 	andeq	r0, r0, #5
    2c64:	b9126491 	ldmdblt	r2, {r0, r4, r7, sl, sp, lr}
    2c68:	0100001c 	tsteq	r0, ip, lsl r0
    2c6c:	a7300bc4 	ldrge	r0, [r0, -r4, asr #23]!
    2c70:	02000000 	andeq	r0, r0, #0
    2c74:	7b126291 	blvc	49b6c0 <startup-0x1fb64940>
    2c78:	0100001c 	tsteq	r0, ip, lsl r0
    2c7c:	a71d0bc5 	ldrge	r0, [sp, -r5, asr #23]
    2c80:	02000000 	andeq	r0, r0, #0
    2c84:	f2126091 	vqadd.s16	d6, d18, d1
    2c88:	01000020 	tsteq	r0, r0, lsr #32
    2c8c:	a73a0bc5 	ldrge	r0, [sl, -r5, asr #23]!
    2c90:	02000000 	andeq	r0, r0, #0
    2c94:	73135e91 	tstvc	r3, #2320	; 0x910
    2c98:	0100001c 	tsteq	r0, ip, lsl r0
    2c9c:	a70c0bc7 	strge	r0, [ip, -r7, asr #23]
    2ca0:	02000000 	andeq	r0, r0, #0
    2ca4:	16006e91 			; <UNDEFINED> instruction: 0x16006e91
    2ca8:	00001b52 	andeq	r1, r0, r2, asr fp
    2cac:	060ba601 	streq	sl, [fp], -r1, lsl #12
    2cb0:	200031b8 			; <UNDEFINED> instruction: 0x200031b8
    2cb4:	00000038 	andeq	r0, r0, r8, lsr r0
    2cb8:	08ab9c01 	stmiaeq	fp!, {r0, sl, fp, ip, pc}
    2cbc:	b1120000 	tstlt	r2, r0
    2cc0:	0100001b 	tsteq	r0, fp, lsl r0
    2cc4:	852d0ba6 	strhi	r0, [sp, #-2982]!	; 0xfffff45a
    2cc8:	02000005 	andeq	r0, r0, #5
    2ccc:	2a127491 	bcs	49ff18 <startup-0x1fb600e8>
    2cd0:	0100001b 	tsteq	r0, fp, lsl r0
    2cd4:	a73c0ba6 	ldrge	r0, [ip, -r6, lsr #23]!
    2cd8:	02000000 	andeq	r0, r0, #0
    2cdc:	16007291 			; <UNDEFINED> instruction: 0x16007291
    2ce0:	00001b3e 	andeq	r1, r0, lr, lsr fp
    2ce4:	060b8f01 	streq	r8, [fp], -r1, lsl #30
    2ce8:	20003180 	andcs	r3, r0, r0, lsl #3
    2cec:	00000038 	andeq	r0, r0, r8, lsr r0
    2cf0:	08e39c01 	stmiaeq	r3!, {r0, sl, fp, ip, pc}^
    2cf4:	b1120000 	tstlt	r2, r0
    2cf8:	0100001b 	tsteq	r0, fp, lsl r0
    2cfc:	85270b8f 	strhi	r0, [r7, #-2959]!	; 0xfffff471
    2d00:	02000005 	andeq	r0, r0, #5
    2d04:	0a127491 	beq	49ff50 <startup-0x1fb600b0>
    2d08:	01000020 	tsteq	r0, r0, lsr #32
    2d0c:	a7360b8f 	ldrge	r0, [r6, -pc, lsl #23]!
    2d10:	02000000 	andeq	r0, r0, #0
    2d14:	16007291 			; <UNDEFINED> instruction: 0x16007291
    2d18:	00001bf0 	strdeq	r1, [r0], -r0
    2d1c:	060b7701 	streq	r7, [fp], -r1, lsl #14
    2d20:	20003148 	andcs	r3, r0, r8, asr #2
    2d24:	00000038 	andeq	r0, r0, r8, lsr r0
    2d28:	091b9c01 	ldmdbeq	fp, {r0, sl, fp, ip, pc}
    2d2c:	b1120000 	tstlt	r2, r0
    2d30:	0100001b 	tsteq	r0, fp, lsl r0
    2d34:	852b0b77 	strhi	r0, [fp, #-2935]!	; 0xfffff489
    2d38:	02000005 	andeq	r0, r0, #5
    2d3c:	ad127491 	cfldrsge	mvf7, [r2, #-580]	; 0xfffffdbc
    2d40:	01000017 	tsteq	r0, r7, lsl r0
    2d44:	a73a0b77 			; <UNDEFINED> instruction: 0xa73a0b77
    2d48:	02000000 	andeq	r0, r0, #0
    2d4c:	16007291 			; <UNDEFINED> instruction: 0x16007291
    2d50:	00001844 	andeq	r1, r0, r4, asr #16
    2d54:	060b4c01 	streq	r4, [fp], -r1, lsl #24
    2d58:	20003100 	andcs	r3, r0, r0, lsl #2
    2d5c:	00000048 	andeq	r0, r0, r8, asr #32
    2d60:	09639c01 	stmdbeq	r3!, {r0, sl, fp, ip, pc}^
    2d64:	b1120000 	tstlt	r2, r0
    2d68:	0100001b 	tsteq	r0, fp, lsl r0
    2d6c:	852a0b4c 	strhi	r0, [sl, #-2892]!	; 0xfffff4b4
    2d70:	02000005 	andeq	r0, r0, #5
    2d74:	96126c91 			; <UNDEFINED> instruction: 0x96126c91
    2d78:	01000017 	tsteq	r0, r7, lsl r0
    2d7c:	a7390b4c 	ldrge	r0, [r9, -ip, asr #22]!
    2d80:	02000000 	andeq	r0, r0, #0
    2d84:	73136a91 	tstvc	r3, #593920	; 0x91000
    2d88:	0100001c 	tsteq	r0, ip, lsl r0
    2d8c:	a70c0b4e 	strge	r0, [ip, -lr, asr #22]
    2d90:	02000000 	andeq	r0, r0, #0
    2d94:	17007691 			; <UNDEFINED> instruction: 0x17007691
    2d98:	00001f24 	andeq	r1, r0, r4, lsr #30
    2d9c:	060b0501 	streq	r0, [fp], -r1, lsl #10
    2da0:	200030ae 	andcs	r3, r0, lr, lsr #1
    2da4:	00000052 	andeq	r0, r0, r2, asr r0
    2da8:	09bb9c01 	ldmibeq	fp!, {r0, sl, fp, ip, pc}
    2dac:	b1120000 	tstlt	r2, r0
    2db0:	0100001b 	tsteq	r0, fp, lsl r0
    2db4:	852b0b05 	strhi	r0, [fp, #-2821]!	; 0xfffff4fb
    2db8:	02000005 	andeq	r0, r0, #5
    2dbc:	b9126491 	ldmdblt	r2, {r0, r4, r7, sl, sp, lr}
    2dc0:	0100001c 	tsteq	r0, ip, lsl r0
    2dc4:	a73a0b05 	ldrge	r0, [sl, -r5, lsl #22]!
    2dc8:	02000000 	andeq	r0, r0, #0
    2dcc:	7b126291 	blvc	49b818 <startup-0x1fb647e8>
    2dd0:	0100001c 	tsteq	r0, ip, lsl r0
    2dd4:	a7270b06 	strge	r0, [r7, -r6, lsl #22]!
    2dd8:	02000000 	andeq	r0, r0, #0
    2ddc:	f2126091 	vqadd.s16	d6, d18, d1
    2de0:	01000020 	tsteq	r0, r0, lsr #32
    2de4:	a7440b06 	strbge	r0, [r4, -r6, lsl #22]
    2de8:	02000000 	andeq	r0, r0, #0
    2dec:	17005e91 			; <UNDEFINED> instruction: 0x17005e91
    2df0:	00001970 	andeq	r1, r0, r0, ror r9
    2df4:	060ad601 	streq	sp, [sl], -r1, lsl #12
    2df8:	20003022 	andcs	r3, r0, r2, lsr #32
    2dfc:	0000008c 	andeq	r0, r0, ip, lsl #1
    2e00:	0a239c01 	beq	8e9e0c <startup-0x1f7161f4>
    2e04:	b1120000 	tstlt	r2, r0
    2e08:	0100001b 	tsteq	r0, fp, lsl r0
    2e0c:	852b0ad6 	strhi	r0, [fp, #-2774]!	; 0xfffff52a
    2e10:	02000005 	andeq	r0, r0, #5
    2e14:	b9125c91 	ldmdblt	r2, {r0, r4, r7, sl, fp, ip, lr}
    2e18:	0100001c 	tsteq	r0, ip, lsl r0
    2e1c:	a73a0ad6 			; <UNDEFINED> instruction: 0xa73a0ad6
    2e20:	02000000 	andeq	r0, r0, #0
    2e24:	7b125a91 	blvc	499870 <startup-0x1fb66790>
    2e28:	0100001c 	tsteq	r0, ip, lsl r0
    2e2c:	a7260ad7 			; <UNDEFINED> instruction: 0xa7260ad7
    2e30:	02000000 	andeq	r0, r0, #0
    2e34:	f2125891 	vtst.16	d5, d18, d1
    2e38:	01000020 	tsteq	r0, r0, lsr #32
    2e3c:	a7430ad7 			; <UNDEFINED> instruction: 0xa7430ad7
    2e40:	02000000 	andeq	r0, r0, #0
    2e44:	73135691 	tstvc	r3, #152043520	; 0x9100000
    2e48:	0100001c 	tsteq	r0, ip, lsl r0
    2e4c:	a70c0ad9 			; <UNDEFINED> instruction: 0xa70c0ad9
    2e50:	02000000 	andeq	r0, r0, #0
    2e54:	17006691 			; <UNDEFINED> instruction: 0x17006691
    2e58:	00001dfa 	strdeq	r1, [r0], -sl
    2e5c:	060aae01 	streq	sl, [sl], -r1, lsl #28
    2e60:	20002fa6 	andcs	r2, r0, r6, lsr #31
    2e64:	0000007c 	andeq	r0, r0, ip, ror r0
    2e68:	0a7b9c01 	beq	1ee9e74 <startup-0x1e11618c>
    2e6c:	b1120000 	tstlt	r2, r0
    2e70:	0100001b 	tsteq	r0, fp, lsl r0
    2e74:	852e0aae 	strhi	r0, [lr, #-2734]!	; 0xfffff552
    2e78:	02000005 	andeq	r0, r0, #5
    2e7c:	b9126c91 	ldmdblt	r2, {r0, r4, r7, sl, fp, sp, lr}
    2e80:	0100001e 	tsteq	r0, lr, lsl r0
    2e84:	a73d0aae 	ldrge	r0, [sp, -lr, lsr #21]!
    2e88:	02000000 	andeq	r0, r0, #0
    2e8c:	eb126a91 	bl	49d8d8 <startup-0x1fb62728>
    2e90:	0100001d 	tsteq	r0, sp, lsl r0
    2e94:	a72a0aaf 	strge	r0, [sl, -pc, lsr #21]!
    2e98:	02000000 	andeq	r0, r0, #0
    2e9c:	5f126891 	svcpl	0x00126891
    2ea0:	01000018 	tsteq	r0, r8, lsl r0
    2ea4:	a7430aaf 	strbge	r0, [r3, -pc, lsr #21]
    2ea8:	02000000 	andeq	r0, r0, #0
    2eac:	17006691 			; <UNDEFINED> instruction: 0x17006691
    2eb0:	00001e67 	andeq	r1, r0, r7, ror #28
    2eb4:	060a9001 	streq	r9, [sl], -r1
    2eb8:	20002f72 	andcs	r2, r0, r2, ror pc
    2ebc:	00000034 	andeq	r0, r0, r4, lsr r0
    2ec0:	0ab39c01 	beq	fece9ecc <a+0xdece5f38>
    2ec4:	b1120000 	tstlt	r2, r0
    2ec8:	0100001b 	tsteq	r0, fp, lsl r0
    2ecc:	852f0a90 	strhi	r0, [pc, #-2704]!	; 2444 <startup-0x1fffdbbc>
    2ed0:	02000005 	andeq	r0, r0, #5
    2ed4:	96127491 			; <UNDEFINED> instruction: 0x96127491
    2ed8:	01000017 	tsteq	r0, r7, lsl r0
    2edc:	a73e0a90 			; <UNDEFINED> instruction: 0xa73e0a90
    2ee0:	02000000 	andeq	r0, r0, #0
    2ee4:	16007291 			; <UNDEFINED> instruction: 0x16007291
    2ee8:	00001868 	andeq	r1, r0, r8, ror #16
    2eec:	060a7b01 	streq	r7, [sl], -r1, lsl #22
    2ef0:	20002f52 	andcs	r2, r0, r2, asr pc
    2ef4:	00000020 	andeq	r0, r0, r0, lsr #32
    2ef8:	0adb9c01 	beq	ff6e9f04 <a+0xdf6e5f70>
    2efc:	b1120000 	tstlt	r2, r0
    2f00:	0100001b 	tsteq	r0, fp, lsl r0
    2f04:	852b0a7b 	strhi	r0, [fp, #-2683]!	; 0xfffff585
    2f08:	02000005 	andeq	r0, r0, #5
    2f0c:	16007491 			; <UNDEFINED> instruction: 0x16007491
    2f10:	00001a36 	andeq	r1, r0, r6, lsr sl
    2f14:	060a5401 	streq	r5, [sl], -r1, lsl #8
    2f18:	20002f12 	andcs	r2, r0, r2, lsl pc
    2f1c:	00000040 	andeq	r0, r0, r0, asr #32
    2f20:	0b139c01 	bleq	4e9f2c <startup-0x1fb160d4>
    2f24:	b1120000 	tstlt	r2, r0
    2f28:	0100001b 	tsteq	r0, fp, lsl r0
    2f2c:	85230a54 	strhi	r0, [r3, #-2644]!	; 0xfffff5ac
    2f30:	02000005 	andeq	r0, r0, #5
    2f34:	9e127491 	cfcmpsls	r7, mvf2, mvf1
    2f38:	01000000 	mrseq	r0, (UNDEF: 0)
    2f3c:	45390a54 	ldrmi	r0, [r9, #-2644]!	; 0xfffff5ac
    2f40:	02000001 	andeq	r0, r0, #1
    2f44:	16007391 			; <UNDEFINED> instruction: 0x16007391
    2f48:	0000178b 	andeq	r1, r0, fp, lsl #15
    2f4c:	060a3a01 	streq	r3, [sl], -r1, lsl #20
    2f50:	20002ec0 	andcs	r2, r0, r0, asr #29
    2f54:	00000052 	andeq	r0, r0, r2, asr r0
    2f58:	0b5b9c01 	bleq	16e9f64 <startup-0x1e91609c>
    2f5c:	b1120000 	tstlt	r2, r0
    2f60:	0100001b 	tsteq	r0, fp, lsl r0
    2f64:	851e0a3a 	ldrhi	r0, [lr, #-2618]	; 0xfffff5c6
    2f68:	02000005 	andeq	r0, r0, #5
    2f6c:	36127491 			; <UNDEFINED> instruction: 0x36127491
    2f70:	0100001c 	tsteq	r0, ip, lsl r0
    2f74:	a72d0a3a 			; <UNDEFINED> instruction: 0xa72d0a3a
    2f78:	02000000 	andeq	r0, r0, #0
    2f7c:	9e127291 	mrcls	2, 0, r7, cr2, cr1, {4}
    2f80:	01000000 	mrseq	r0, (UNDEF: 0)
    2f84:	454c0a3a 	strbmi	r0, [ip, #-2618]	; 0xfffff5c6
    2f88:	02000001 	andeq	r0, r0, #1
    2f8c:	16007191 			; <UNDEFINED> instruction: 0x16007191
    2f90:	00001da0 	andeq	r1, r0, r0, lsr #27
    2f94:	060a1f01 	streq	r1, [sl], -r1, lsl #30
    2f98:	20002e8e 	andcs	r2, r0, lr, lsl #29
    2f9c:	00000032 	andeq	r0, r0, r2, lsr r0
    2fa0:	0ba39c01 	bleq	fe8e9fac <a+0xde8e6018>
    2fa4:	b1120000 	tstlt	r2, r0
    2fa8:	0100001b 	tsteq	r0, fp, lsl r0
    2fac:	85210a1f 	strhi	r0, [r1, #-2591]!	; 0xfffff5e1
    2fb0:	02000005 	andeq	r0, r0, #5
    2fb4:	4f127491 	svcmi	0x00127491
    2fb8:	0100001d 	tsteq	r0, sp, lsl r0
    2fbc:	a7300a1f 			; <UNDEFINED> instruction: 0xa7300a1f
    2fc0:	02000000 	andeq	r0, r0, #0
    2fc4:	5b127291 	blpl	49fa10 <startup-0x1fb605f0>
    2fc8:	0100001a 	tsteq	r0, sl, lsl r0
    2fcc:	a7460a1f 	smlaldge	r0, r6, pc, sl	; <UNPREDICTABLE>
    2fd0:	02000000 	andeq	r0, r0, #0
    2fd4:	16007091 			; <UNDEFINED> instruction: 0x16007091
    2fd8:	00001f6f 	andeq	r1, r0, pc, ror #30
    2fdc:	0609fa01 	streq	pc, [r9], -r1, lsl #20
    2fe0:	20002e6c 	andcs	r2, r0, ip, ror #28
    2fe4:	00000022 	andeq	r0, r0, r2, lsr #32
    2fe8:	0bdb9c01 	bleq	ff6e9ff4 <a+0xdf6e6060>
    2fec:	b1120000 	tstlt	r2, r0
    2ff0:	0100001b 	tsteq	r0, fp, lsl r0
    2ff4:	852909fa 	strhi	r0, [r9, #-2554]!	; 0xfffff606
    2ff8:	02000005 	andeq	r0, r0, #5
    2ffc:	69127491 	ldmdbvs	r2, {r0, r4, r7, sl, ip, sp, lr}
    3000:	01000019 	tsteq	r0, r9, lsl r0
    3004:	a73809fa 			; <UNDEFINED> instruction: 0xa73809fa
    3008:	02000000 	andeq	r0, r0, #0
    300c:	18007291 	stmdane	r0, {r0, r4, r7, r9, ip, sp, lr}
    3010:	00001d79 	andeq	r1, r0, r9, ror sp
    3014:	0a09d101 	beq	277420 <startup-0x1fd88be0>
    3018:	0000011c 	andeq	r0, r0, ip, lsl r1
    301c:	20002df8 	strdcs	r2, [r0], -r8
    3020:	00000074 	andeq	r0, r0, r4, ror r0
    3024:	0c479c01 	mcrreq	12, 0, r9, r7, cr1
    3028:	b1120000 	tstlt	r2, r0
    302c:	0100001b 	tsteq	r0, fp, lsl r0
    3030:	852709d1 	strhi	r0, [r7, #-2513]!	; 0xfffff62f
    3034:	02000005 	andeq	r0, r0, #5
    3038:	69126491 	ldmdbvs	r2, {r0, r4, r7, sl, sp, lr}
    303c:	01000019 	tsteq	r0, r9, lsl r0
    3040:	a73609d1 			; <UNDEFINED> instruction: 0xa73609d1
    3044:	02000000 	andeq	r0, r0, #0
    3048:	8c136291 	lfmhi	f6, 4, [r3], {145}	; 0x91
    304c:	01000004 	tsteq	r0, r4
    3050:	1c0c09d3 			; <UNDEFINED> instruction: 0x1c0c09d3
    3054:	02000001 	andeq	r0, r0, #1
    3058:	8d136f91 	ldchi	15, cr6, [r3, #-580]	; 0xfffffdbc
    305c:	01000004 	tsteq	r0, r4
    3060:	a70c09d4 			; <UNDEFINED> instruction: 0xa70c09d4
    3064:	02000000 	andeq	r0, r0, #0
    3068:	92136c91 	andsls	r6, r3, #37120	; 0x9100
    306c:	01000020 	tsteq	r0, r0, lsr #32
    3070:	a71c09d4 			; <UNDEFINED> instruction: 0xa71c09d4
    3074:	02000000 	andeq	r0, r0, #0
    3078:	16006a91 			; <UNDEFINED> instruction: 0x16006a91
    307c:	00001a6e 	andeq	r1, r0, lr, ror #20
    3080:	0609b501 	streq	fp, [r9], -r1, lsl #10
    3084:	20002dd6 	ldrdcs	r2, [r0], -r6
    3088:	00000022 	andeq	r0, r0, r2, lsr #32
    308c:	0c7f9c01 	ldcleq	12, cr9, [pc], #-4	; 3090 <startup-0x1fffcf70>
    3090:	b1120000 	tstlt	r2, r0
    3094:	0100001b 	tsteq	r0, fp, lsl r0
    3098:	852109b5 	strhi	r0, [r1, #-2485]!	; 0xfffff64b
    309c:	02000005 	andeq	r0, r0, #5
    30a0:	e0127491 	muls	r2, r1, r4
    30a4:	01000017 	tsteq	r0, r7, lsl r0
    30a8:	a73009b5 			; <UNDEFINED> instruction: 0xa73009b5
    30ac:	02000000 	andeq	r0, r0, #0
    30b0:	18007291 	stmdane	r0, {r0, r4, r7, r9, ip, sp, lr}
    30b4:	00001b6c 	andeq	r1, r0, ip, ror #22
    30b8:	0c098b01 			; <UNDEFINED> instruction: 0x0c098b01
    30bc:	0000010f 	andeq	r0, r0, pc, lsl #2
    30c0:	20002d90 	mulcs	r0, r0, sp
    30c4:	00000046 	andeq	r0, r0, r6, asr #32
    30c8:	0ccb9c01 	stcleq	12, cr9, [fp], {1}
    30cc:	b1120000 	tstlt	r2, r0
    30d0:	0100001b 	tsteq	r0, fp, lsl r0
    30d4:	852b098b 	strhi	r0, [fp, #-2443]!	; 0xfffff675
    30d8:	02000005 	andeq	r0, r0, #5
    30dc:	e0126c91 	muls	r2, r1, ip
    30e0:	01000017 	tsteq	r0, r7, lsl r0
    30e4:	a73a098b 	ldrge	r0, [sl, -fp, lsl #19]!
    30e8:	02000000 	andeq	r0, r0, #0
    30ec:	8c136a91 			; <UNDEFINED> instruction: 0x8c136a91
    30f0:	01000004 	tsteq	r0, r4
    30f4:	1c0c098d 			; <UNDEFINED> instruction: 0x1c0c098d
    30f8:	02000001 	andeq	r0, r0, #1
    30fc:	16007791 			; <UNDEFINED> instruction: 0x16007791
    3100:	000018f0 	strdeq	r1, [r0], -r0
    3104:	06096a01 	streq	r6, [r9], -r1, lsl #20
    3108:	20002d72 	andcs	r2, r0, r2, ror sp
    310c:	0000001e 	andeq	r0, r0, lr, lsl r0
    3110:	0d039c01 	stceq	12, cr9, [r3, #-4]
    3114:	b1120000 	tstlt	r2, r0
    3118:	0100001b 	tsteq	r0, fp, lsl r0
    311c:	8525096a 	strhi	r0, [r5, #-2410]!	; 0xfffff696
    3120:	02000005 	andeq	r0, r0, #5
    3124:	db127491 	blle	4a0370 <startup-0x1fb5fc90>
    3128:	0100001d 	tsteq	r0, sp, lsl r0
    312c:	a734096a 	ldrge	r0, [r4, -sl, ror #18]!
    3130:	02000000 	andeq	r0, r0, #0
    3134:	16007291 			; <UNDEFINED> instruction: 0x16007291
    3138:	00001e23 	andeq	r1, r0, r3, lsr #28
    313c:	06094401 	streq	r4, [r9], -r1, lsl #8
    3140:	20002d20 	andcs	r2, r0, r0, lsr #26
    3144:	00000052 	andeq	r0, r0, r2, asr r0
    3148:	0d4b9c01 	stcleq	12, cr9, [fp, #-4]
    314c:	b1120000 	tstlt	r2, r0
    3150:	0100001b 	tsteq	r0, fp, lsl r0
    3154:	85200944 	strhi	r0, [r0, #-2372]!	; 0xfffff6bc
    3158:	02000005 	andeq	r0, r0, #5
    315c:	69127491 	ldmdbvs	r2, {r0, r4, r7, sl, ip, sp, lr}
    3160:	01000019 	tsteq	r0, r9, lsl r0
    3164:	a72f0944 	strge	r0, [pc, -r4, asr #18]!
    3168:	02000000 	andeq	r0, r0, #0
    316c:	9e127291 	mrcls	2, 0, r7, cr2, cr1, {4}
    3170:	01000000 	mrseq	r0, (UNDEF: 0)
    3174:	45470944 	strbmi	r0, [r7, #-2372]	; 0xfffff6bc
    3178:	02000001 	andeq	r0, r0, #1
    317c:	16007191 			; <UNDEFINED> instruction: 0x16007191
    3180:	0000205c 	andeq	r2, r0, ip, asr r0
    3184:	06090b01 	streq	r0, [r9], -r1, lsl #22
    3188:	20002ce0 	andcs	r2, r0, r0, ror #25
    318c:	00000040 	andeq	r0, r0, r0, asr #32
    3190:	0d839c01 	stceq	12, cr9, [r3, #4]
    3194:	b1120000 	tstlt	r2, r0
    3198:	0100001b 	tsteq	r0, fp, lsl r0
    319c:	8528090b 	strhi	r0, [r8, #-2315]!	; 0xfffff6f5
    31a0:	02000005 	andeq	r0, r0, #5
    31a4:	9e127491 	cfcmpsls	r7, mvf2, mvf1
    31a8:	01000000 	mrseq	r0, (UNDEF: 0)
    31ac:	453e090b 	ldrmi	r0, [lr, #-2315]!	; 0xfffff6f5
    31b0:	02000001 	andeq	r0, r0, #1
    31b4:	16007391 			; <UNDEFINED> instruction: 0x16007391
    31b8:	00001a9c 	muleq	r0, ip, sl
    31bc:	0608f201 	streq	pc, [r8], -r1, lsl #4
    31c0:	20002ca0 	andcs	r2, r0, r0, lsr #25
    31c4:	00000040 	andeq	r0, r0, r0, asr #32
    31c8:	0dbb9c01 	ldceq	12, cr9, [fp, #4]!
    31cc:	b1120000 	tstlt	r2, r0
    31d0:	0100001b 	tsteq	r0, fp, lsl r0
    31d4:	852108f2 	strhi	r0, [r1, #-2290]!	; 0xfffff70e
    31d8:	02000005 	andeq	r0, r0, #5
    31dc:	9e127491 	cfcmpsls	r7, mvf2, mvf1
    31e0:	01000000 	mrseq	r0, (UNDEF: 0)
    31e4:	453708f2 	ldrmi	r0, [r7, #-2290]!	; 0xfffff70e
    31e8:	02000001 	andeq	r0, r0, #1
    31ec:	16007391 			; <UNDEFINED> instruction: 0x16007391
    31f0:	00002179 	andeq	r2, r0, r9, ror r1
    31f4:	0608d901 	streq	sp, [r8], -r1, lsl #18
    31f8:	20002c52 	andcs	r2, r0, r2, asr ip
    31fc:	0000004e 	andeq	r0, r0, lr, asr #32
    3200:	0df39c01 	ldcleq	12, cr9, [r3, #4]!
    3204:	b1120000 	tstlt	r2, r0
    3208:	0100001b 	tsteq	r0, fp, lsl r0
    320c:	852608d9 	strhi	r0, [r6, #-2265]!	; 0xfffff727
    3210:	02000005 	andeq	r0, r0, #5
    3214:	9e127491 	cfcmpsls	r7, mvf2, mvf1
    3218:	01000000 	mrseq	r0, (UNDEF: 0)
    321c:	453c08d9 	ldrmi	r0, [ip, #-2265]!	; 0xfffff727
    3220:	02000001 	andeq	r0, r0, #1
    3224:	16007391 			; <UNDEFINED> instruction: 0x16007391
    3228:	00001c8e 	andeq	r1, r0, lr, lsl #25
    322c:	0608c601 	streq	ip, [r8], -r1, lsl #12
    3230:	20002c18 	andcs	r2, r0, r8, lsl ip
    3234:	0000003a 	andeq	r0, r0, sl, lsr r0
    3238:	0e1b9c01 	cdpeq	12, 1, cr9, cr11, cr1, {0}
    323c:	d2120000 	andsle	r0, r2, #0
    3240:	0100001e 	tsteq	r0, lr, lsl r0
    3244:	1b2e08c6 	blne	b85564 <startup-0x1f47aa9c>
    3248:	0200000e 	andeq	r0, r0, #14
    324c:	15007491 	strne	r7, [r0, #-1169]	; 0xfffffb6f
    3250:	0004f104 	andeq	pc, r4, r4, lsl #2
    3254:	1e301600 	cfmsuba32ne	mvax0, mvax1, mvfx0, mvfx0
    3258:	ad010000 	stcge	0, cr0, [r1, #-0]
    325c:	2bcc0608 	blcs	ff304a84 <a+0xdf300af0>
    3260:	004c2000 	subeq	r2, ip, r0
    3264:	9c010000 	stcls	0, cr0, [r1], {-0}
    3268:	00000e59 	andeq	r0, r0, r9, asr lr
    326c:	001bb112 	andseq	fp, fp, r2, lsl r1
    3270:	08ad0100 	stmiaeq	sp!, {r8}
    3274:	00058522 	andeq	r8, r5, r2, lsr #10
    3278:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    327c:	001ed212 	andseq	sp, lr, r2, lsl r2
    3280:	08ad0100 	stmiaeq	sp!, {r8}
    3284:	000e1b3d 	andeq	r1, lr, sp, lsr fp
    3288:	70910200 	addsvc	r0, r1, r0, lsl #4
    328c:	21d61600 	bicscs	r1, r6, r0, lsl #12
    3290:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
    3294:	2b8c0608 	blcs	fe304abc <a+0xde300b28>
    3298:	00402000 	subeq	r2, r0, r0
    329c:	9c010000 	stcls	0, cr0, [r1], {-0}
    32a0:	00000e91 	muleq	r0, r1, lr
    32a4:	001bb112 	andseq	fp, fp, r2, lsl r1
    32a8:	08780100 	ldmdaeq	r8!, {r8}^
    32ac:	00058527 	andeq	r8, r5, r7, lsr #10
    32b0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    32b4:	00218c12 	eoreq	r8, r1, r2, lsl ip
    32b8:	08780100 	ldmdaeq	r8!, {r8}^
    32bc:	0000a736 	andeq	sl, r0, r6, lsr r7
    32c0:	72910200 	addsvc	r0, r1, #0, 4
    32c4:	1f4f1600 	svcne	0x004f1600
    32c8:	60010000 	andvs	r0, r1, r0
    32cc:	2b540608 	blcs	1504af4 <startup-0x1eafb50c>
    32d0:	00382000 	eorseq	r2, r8, r0
    32d4:	9c010000 	stcls	0, cr0, [r1], {-0}
    32d8:	00000ec9 	andeq	r0, r0, r9, asr #29
    32dc:	001bb112 	andseq	fp, fp, r2, lsl r1
    32e0:	08600100 	stmdaeq	r0!, {r8}^
    32e4:	00058527 	andeq	r8, r5, r7, lsr #10
    32e8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    32ec:	00218c12 	eoreq	r8, r1, r2, lsl ip
    32f0:	08600100 	stmdaeq	r0!, {r8}^
    32f4:	0000a736 	andeq	sl, r0, r6, lsr r7
    32f8:	72910200 	addsvc	r0, r1, #0, 4
    32fc:	1e3f1600 	cfmsuba32ne	mvax0, mvax1, mvfx15, mvfx0
    3300:	48010000 	stmdami	r1, {}	; <UNPREDICTABLE>
    3304:	2b140608 	blcs	504b2c <startup-0x1fafb4d4>
    3308:	00402000 	subeq	r2, r0, r0
    330c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3310:	00000f01 	andeq	r0, r0, r1, lsl #30
    3314:	001bb112 	andseq	fp, fp, r2, lsl r1
    3318:	08480100 	stmdaeq	r8, {r8}^
    331c:	00058527 	andeq	r8, r5, r7, lsr #10
    3320:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3324:	00218c12 	eoreq	r8, r1, r2, lsl ip
    3328:	08480100 	stmdaeq	r8, {r8}^
    332c:	0000a736 	andeq	sl, r0, r6, lsr r7
    3330:	72910200 	addsvc	r0, r1, #0, 4
    3334:	1c081600 	stcne	6, cr1, [r8], {-0}
    3338:	2f010000 	svccs	0x00010000
    333c:	2adc0608 	bcs	ff704b64 <a+0xdf700bd0>
    3340:	00382000 	eorseq	r2, r8, r0
    3344:	9c010000 	stcls	0, cr0, [r1], {-0}
    3348:	00000f39 	andeq	r0, r0, r9, lsr pc
    334c:	001bb112 	andseq	fp, fp, r2, lsl r1
    3350:	082f0100 	stmdaeq	pc!, {r8}	; <UNPREDICTABLE>
    3354:	00058527 	andeq	r8, r5, r7, lsr #10
    3358:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    335c:	00218c12 	eoreq	r8, r1, r2, lsl ip
    3360:	082f0100 	stmdaeq	pc!, {r8}	; <UNPREDICTABLE>
    3364:	0000a736 	andeq	sl, r0, r6, lsr r7
    3368:	72910200 	addsvc	r0, r1, #0, 4
    336c:	19ed1800 	stmibne	sp!, {fp, ip}^
    3370:	1b010000 	blne	43378 <startup-0x1ffbcc88>
    3374:	00c90a08 	sbceq	r0, r9, r8, lsl #20
    3378:	2ac80000 	bcs	ff203380 <a+0xdf1ff3ec>
    337c:	00142000 	andseq	r2, r4, r0
    3380:	9c010000 	stcls	0, cr0, [r1], {-0}
    3384:	00000f65 	andeq	r0, r0, r5, ror #30
    3388:	001bb112 	andseq	fp, fp, r2, lsl r1
    338c:	081b0100 	ldmdaeq	fp, {r8}
    3390:	00058527 	andeq	r8, r5, r7, lsr #10
    3394:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3398:	19dd1800 	ldmibne	sp, {fp, ip}^
    339c:	0d010000 	stceq	0, cr0, [r1, #-0]
    33a0:	00c90a08 	sbceq	r0, r9, r8, lsl #20
    33a4:	2ab40000 	bcs	fed033ac <a+0xdecff418>
    33a8:	00142000 	andseq	r2, r4, r0
    33ac:	9c010000 	stcls	0, cr0, [r1], {-0}
    33b0:	00000f91 	muleq	r0, r1, pc	; <UNPREDICTABLE>
    33b4:	001bb112 	andseq	fp, fp, r2, lsl r1
    33b8:	080d0100 	stmdaeq	sp, {r8}
    33bc:	00058527 	andeq	r8, r5, r7, lsr #10
    33c0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    33c4:	19cd1800 	stmibne	sp, {fp, ip}^
    33c8:	ff010000 			; <UNDEFINED> instruction: 0xff010000
    33cc:	00c90a07 	sbceq	r0, r9, r7, lsl #20
    33d0:	2aa00000 	bcs	fe8033d8 <a+0xde7ff444>
    33d4:	00142000 	andseq	r2, r4, r0
    33d8:	9c010000 	stcls	0, cr0, [r1], {-0}
    33dc:	00000fbd 			; <UNDEFINED> instruction: 0x00000fbd
    33e0:	001bb112 	andseq	fp, fp, r2, lsl r1
    33e4:	07ff0100 	ldrbeq	r0, [pc, r0, lsl #2]!
    33e8:	00058527 	andeq	r8, r5, r7, lsr #10
    33ec:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    33f0:	1b1a1800 	blne	6893f8 <startup-0x1f976c08>
    33f4:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
    33f8:	00c90a07 	sbceq	r0, r9, r7, lsl #20
    33fc:	2a8c0000 	bcs	fe303404 <a+0xde2ff470>
    3400:	00142000 	andseq	r2, r4, r0
    3404:	9c010000 	stcls	0, cr0, [r1], {-0}
    3408:	00000fe9 	andeq	r0, r0, r9, ror #31
    340c:	001bb112 	andseq	fp, fp, r2, lsl r1
    3410:	07f00100 	ldrbeq	r0, [r0, r0, lsl #2]!
    3414:	00058527 	andeq	r8, r5, r7, lsr #10
    3418:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    341c:	1c1c1700 	ldcne	7, cr1, [ip], {-0}
    3420:	b7010000 	strlt	r0, [r1, -r0]
    3424:	29a20607 	stmibcs	r2!, {r0, r1, r2, r9, sl}
    3428:	00ea2000 	rsceq	r2, sl, r0
    342c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3430:	00001041 	andeq	r1, r0, r1, asr #32
    3434:	001bb112 	andseq	fp, fp, r2, lsl r1
    3438:	07b70100 	ldreq	r0, [r7, r0, lsl #2]!
    343c:	00058522 	andeq	r8, r5, r2, lsr #10
    3440:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    3444:	001ca112 	andseq	sl, ip, r2, lsl r1
    3448:	07b70100 	ldreq	r0, [r7, r0, lsl #2]!
    344c:	0010413b 	andseq	r4, r0, fp, lsr r1
    3450:	60910200 	addsvs	r0, r1, r0, lsl #4
    3454:	001a0913 	andseq	r0, sl, r3, lsl r9
    3458:	07b90100 	ldreq	r0, [r9, r0, lsl #2]!
    345c:	0000a70c 	andeq	sl, r0, ip, lsl #14
    3460:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
    3464:	001d5b13 	andseq	r5, sp, r3, lsl fp
    3468:	07ba0100 	ldreq	r0, [sl, r0, lsl #2]!
    346c:	0000a70c 	andeq	sl, r0, ip, lsl #14
    3470:	6c910200 	lfmvs	f0, 4, [r1], {0}
    3474:	80041500 	andhi	r1, r4, r0, lsl #10
    3478:	16000004 	strne	r0, [r0], -r4
    347c:	000019bc 			; <UNDEFINED> instruction: 0x000019bc
    3480:	0607a401 	streq	sl, [r7], -r1, lsl #8
    3484:	20002974 	andcs	r2, r0, r4, ror r9
    3488:	0000002e 	andeq	r0, r0, lr, lsr #32
    348c:	106f9c01 	rsbne	r9, pc, r1, lsl #24
    3490:	a1120000 	tstge	r2, r0
    3494:	0100001c 	tsteq	r0, ip, lsl r0
    3498:	412a07a4 	smulwbmi	sl, r4, r7
    349c:	02000010 	andeq	r0, r0, #16
    34a0:	17007491 			; <UNDEFINED> instruction: 0x17007491
    34a4:	00001fa3 	andeq	r1, r0, r3, lsr #31
    34a8:	06076c01 	streq	r6, [r7], -r1, lsl #24
    34ac:	200028c4 	andcs	r2, r0, r4, asr #17
    34b0:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    34b4:	10a79c01 	adcne	r9, r7, r1, lsl #24
    34b8:	b1120000 	tstlt	r2, r0
    34bc:	0100001b 	tsteq	r0, fp, lsl r0
    34c0:	851e076c 	ldrhi	r0, [lr, #-1900]	; 0xfffff894
    34c4:	02000005 	andeq	r0, r0, #5
    34c8:	a1127491 			; <UNDEFINED> instruction: 0xa1127491
    34cc:	0100001c 	tsteq	r0, ip, lsl r0
    34d0:	4137076c 	teqmi	r7, ip, ror #14
    34d4:	02000010 	andeq	r0, r0, #16
    34d8:	16007091 			; <UNDEFINED> instruction: 0x16007091
    34dc:	00001d32 	andeq	r1, r0, r2, lsr sp
    34e0:	06071801 	streq	r1, [r7], -r1, lsl #16
    34e4:	2000285e 	andcs	r2, r0, lr, asr r8
    34e8:	00000066 	andeq	r0, r0, r6, rrx
    34ec:	10ff9c01 	rscsne	r9, pc, r1, lsl #24
    34f0:	b1120000 	tstlt	r2, r0
    34f4:	0100001b 	tsteq	r0, fp, lsl r0
    34f8:	851f0718 	ldrhi	r0, [pc, #-1816]	; 2de8 <startup-0x1fffd218>
    34fc:	02000005 	andeq	r0, r0, #5
    3500:	1d126c91 	ldcne	12, cr6, [r2, #-580]	; 0xfffffdbc
    3504:	01000019 	tsteq	r0, r9, lsl r0
    3508:	a72e0718 			; <UNDEFINED> instruction: 0xa72e0718
    350c:	02000000 	andeq	r0, r0, #0
    3510:	2d126a91 	vldrcs	s12, [r2, #-580]	; 0xfffffdbc
    3514:	0100001a 	tsteq	r0, sl, lsl r0
    3518:	a7440718 	smlaldge	r0, r4, r8, r7
    351c:	02000000 	andeq	r0, r0, #0
    3520:	74146891 	ldrvc	r6, [r4], #-2193	; 0xfffff76f
    3524:	0100706d 	tsteq	r0, sp, rrx
    3528:	a70c071a 	smladge	ip, sl, r7, r0
    352c:	02000000 	andeq	r0, r0, #0
    3530:	16007691 			; <UNDEFINED> instruction: 0x16007691
    3534:	00001950 	andeq	r1, r0, r0, asr r9
    3538:	0606fa01 	streq	pc, [r6], -r1, lsl #20
    353c:	200027f8 	strdcs	r2, [r0], -r8
    3540:	00000066 	andeq	r0, r0, r6, rrx
    3544:	11579c01 	cmpne	r7, r1, lsl #24
    3548:	b1120000 	tstlt	r2, r0
    354c:	0100001b 	tsteq	r0, fp, lsl r0
    3550:	851e06fa 	ldrhi	r0, [lr, #-1786]	; 0xfffff906
    3554:	02000005 	andeq	r0, r0, #5
    3558:	1d126c91 	ldcne	12, cr6, [r2, #-580]	; 0xfffffdbc
    355c:	01000019 	tsteq	r0, r9, lsl r0
    3560:	a72d06fa 			; <UNDEFINED> instruction: 0xa72d06fa
    3564:	02000000 	andeq	r0, r0, #0
    3568:	c3126a91 	tstgt	r2, #593920	; 0x91000
    356c:	0100001d 	tsteq	r0, sp, lsl r0
    3570:	a74306fa 			; <UNDEFINED> instruction: 0xa74306fa
    3574:	02000000 	andeq	r0, r0, #0
    3578:	74146891 	ldrvc	r6, [r4], #-2193	; 0xfffff76f
    357c:	0100706d 	tsteq	r0, sp, rrx
    3580:	a70c06fc 			; <UNDEFINED> instruction: 0xa70c06fc
    3584:	02000000 	andeq	r0, r0, #0
    3588:	16007691 			; <UNDEFINED> instruction: 0x16007691
    358c:	00001bc6 	andeq	r1, r0, r6, asr #23
    3590:	0606db01 	streq	sp, [r6], -r1, lsl #22
    3594:	200027a8 	andcs	r2, r0, r8, lsr #15
    3598:	00000050 	andeq	r0, r0, r0, asr r0
    359c:	119f9c01 	orrsne	r9, pc, r1, lsl #24
    35a0:	b1120000 	tstlt	r2, r0
    35a4:	0100001b 	tsteq	r0, fp, lsl r0
    35a8:	852906db 	strhi	r0, [r9, #-1755]!	; 0xfffff925
    35ac:	02000005 	andeq	r0, r0, #5
    35b0:	d4126c91 	ldrle	r6, [r2], #-3217	; 0xfffff36f
    35b4:	0100001a 	tsteq	r0, sl, lsl r0
    35b8:	a73806db 			; <UNDEFINED> instruction: 0xa73806db
    35bc:	02000000 	andeq	r0, r0, #0
    35c0:	aa136a91 	bge	4de00c <startup-0x1fb21ff4>
    35c4:	0100001a 	tsteq	r0, sl, lsl r0
    35c8:	a70c06dd 			; <UNDEFINED> instruction: 0xa70c06dd
    35cc:	02000000 	andeq	r0, r0, #0
    35d0:	16007691 			; <UNDEFINED> instruction: 0x16007691
    35d4:	00001e83 	andeq	r1, r0, r3, lsl #29
    35d8:	0606c001 	streq	ip, [r6], -r1
    35dc:	20002758 	andcs	r2, r0, r8, asr r7
    35e0:	00000050 	andeq	r0, r0, r0, asr r0
    35e4:	11e79c01 	mvnne	r9, r1, lsl #24
    35e8:	b1120000 	tstlt	r2, r0
    35ec:	0100001b 	tsteq	r0, fp, lsl r0
    35f0:	852a06c0 	strhi	r0, [sl, #-1728]!	; 0xfffff940
    35f4:	02000005 	andeq	r0, r0, #5
    35f8:	14126c91 	ldrne	r6, [r2], #-3217	; 0xfffff36f
    35fc:	0100001f 	tsteq	r0, pc, lsl r0
    3600:	a73906c0 	ldrge	r0, [r9, -r0, asr #13]!
    3604:	02000000 	andeq	r0, r0, #0
    3608:	aa136a91 	bge	4de054 <startup-0x1fb21fac>
    360c:	0100001a 	tsteq	r0, sl, lsl r0
    3610:	a70c06c2 	strge	r0, [ip, -r2, asr #13]
    3614:	02000000 	andeq	r0, r0, #0
    3618:	16007691 			; <UNDEFINED> instruction: 0x16007691
    361c:	0000209b 	muleq	r0, fp, r0
    3620:	0606a501 	streq	sl, [r6], -r1, lsl #10
    3624:	20002708 	andcs	r2, r0, r8, lsl #14
    3628:	00000050 	andeq	r0, r0, r0, asr r0
    362c:	122f9c01 	eorne	r9, pc, #256	; 0x100
    3630:	b1120000 	tstlt	r2, r0
    3634:	0100001b 	tsteq	r0, fp, lsl r0
    3638:	852906a5 	strhi	r0, [r9, #-1701]!	; 0xfffff95b
    363c:	02000005 	andeq	r0, r0, #5
    3640:	d4126c91 	ldrle	r6, [r2], #-3217	; 0xfffff36f
    3644:	0100001a 	tsteq	r0, sl, lsl r0
    3648:	a73806a5 	ldrge	r0, [r8, -r5, lsr #13]!
    364c:	02000000 	andeq	r0, r0, #0
    3650:	aa136a91 	bge	4de09c <startup-0x1fb21f64>
    3654:	0100001a 	tsteq	r0, sl, lsl r0
    3658:	a70c06a7 	strge	r0, [ip, -r7, lsr #13]
    365c:	02000000 	andeq	r0, r0, #0
    3660:	16007691 			; <UNDEFINED> instruction: 0x16007691
    3664:	00001ab2 			; <UNDEFINED> instruction: 0x00001ab2
    3668:	06068a01 	streq	r8, [r6], -r1, lsl #20
    366c:	200026bc 			; <UNDEFINED> instruction: 0x200026bc
    3670:	0000004c 	andeq	r0, r0, ip, asr #32
    3674:	12779c01 	rsbsne	r9, r7, #256	; 0x100
    3678:	b1120000 	tstlt	r2, r0
    367c:	0100001b 	tsteq	r0, fp, lsl r0
    3680:	852a068a 	strhi	r0, [sl, #-1674]!	; 0xfffff976
    3684:	02000005 	andeq	r0, r0, #5
    3688:	14126c91 	ldrne	r6, [r2], #-3217	; 0xfffff36f
    368c:	0100001f 	tsteq	r0, pc, lsl r0
    3690:	a739068a 	ldrge	r0, [r9, -sl, lsl #13]!
    3694:	02000000 	andeq	r0, r0, #0
    3698:	aa136a91 	bge	4de0e4 <startup-0x1fb21f1c>
    369c:	0100001a 	tsteq	r0, sl, lsl r0
    36a0:	a70c068c 	strge	r0, [ip, -ip, lsl #13]
    36a4:	02000000 	andeq	r0, r0, #0
    36a8:	16007691 			; <UNDEFINED> instruction: 0x16007691
    36ac:	00001880 	andeq	r1, r0, r0, lsl #17
    36b0:	06066f01 	streq	r6, [r6], -r1, lsl #30
    36b4:	20002670 	andcs	r2, r0, r0, ror r6
    36b8:	0000004c 	andeq	r0, r0, ip, asr #32
    36bc:	12bf9c01 	adcsne	r9, pc, #256	; 0x100
    36c0:	b1120000 	tstlt	r2, r0
    36c4:	0100001b 	tsteq	r0, fp, lsl r0
    36c8:	8529066f 	strhi	r0, [r9, #-1647]!	; 0xfffff991
    36cc:	02000005 	andeq	r0, r0, #5
    36d0:	d4126c91 	ldrle	r6, [r2], #-3217	; 0xfffff36f
    36d4:	0100001a 	tsteq	r0, sl, lsl r0
    36d8:	a738066f 	ldrge	r0, [r8, -pc, ror #12]!
    36dc:	02000000 	andeq	r0, r0, #0
    36e0:	aa136a91 	bge	4de12c <startup-0x1fb21ed4>
    36e4:	0100001a 	tsteq	r0, sl, lsl r0
    36e8:	a70c0671 	smlsdxge	ip, r1, r6, r0
    36ec:	02000000 	andeq	r0, r0, #0
    36f0:	16007691 			; <UNDEFINED> instruction: 0x16007691
    36f4:	00002045 	andeq	r2, r0, r5, asr #32
    36f8:	06065401 	streq	r5, [r6], -r1, lsl #8
    36fc:	20002628 	andcs	r2, r0, r8, lsr #12
    3700:	00000048 	andeq	r0, r0, r8, asr #32
    3704:	13079c01 	movwne	r9, #31745	; 0x7c01
    3708:	b1120000 	tstlt	r2, r0
    370c:	0100001b 	tsteq	r0, fp, lsl r0
    3710:	852a0654 	strhi	r0, [sl, #-1620]!	; 0xfffff9ac
    3714:	02000005 	andeq	r0, r0, #5
    3718:	14126c91 	ldrne	r6, [r2], #-3217	; 0xfffff36f
    371c:	0100001f 	tsteq	r0, pc, lsl r0
    3720:	a7390654 			; <UNDEFINED> instruction: 0xa7390654
    3724:	02000000 	andeq	r0, r0, #0
    3728:	aa136a91 	bge	4de174 <startup-0x1fb21e8c>
    372c:	0100001a 	tsteq	r0, sl, lsl r0
    3730:	a70c0656 	smlsdge	ip, r6, r6, r0
    3734:	02000000 	andeq	r0, r0, #0
    3738:	16007691 			; <UNDEFINED> instruction: 0x16007691
    373c:	00001ce4 	andeq	r1, r0, r4, ror #25
    3740:	06063901 	streq	r3, [r6], -r1, lsl #18
    3744:	200025e0 	andcs	r2, r0, r0, ror #11
    3748:	00000048 	andeq	r0, r0, r8, asr #32
    374c:	134f9c01 	movtne	r9, #64513	; 0xfc01
    3750:	b1120000 	tstlt	r2, r0
    3754:	0100001b 	tsteq	r0, fp, lsl r0
    3758:	85290639 	strhi	r0, [r9, #-1593]!	; 0xfffff9c7
    375c:	02000005 	andeq	r0, r0, #5
    3760:	d4126c91 	ldrle	r6, [r2], #-3217	; 0xfffff36f
    3764:	0100001a 	tsteq	r0, sl, lsl r0
    3768:	a7380639 			; <UNDEFINED> instruction: 0xa7380639
    376c:	02000000 	andeq	r0, r0, #0
    3770:	aa136a91 	bge	4de1bc <startup-0x1fb21e44>
    3774:	0100001a 	tsteq	r0, sl, lsl r0
    3778:	a70c063b 	smladxge	ip, fp, r6, r0
    377c:	02000000 	andeq	r0, r0, #0
    3780:	16007691 			; <UNDEFINED> instruction: 0x16007691
    3784:	00002023 	andeq	r2, r0, r3, lsr #32
    3788:	06061c01 	streq	r1, [r6], -r1, lsl #24
    378c:	20002594 	mulcs	r0, r4, r5
    3790:	0000004c 	andeq	r0, r0, ip, asr #32
    3794:	13979c01 	orrsne	r9, r7, #256	; 0x100
    3798:	b1120000 	tstlt	r2, r0
    379c:	0100001b 	tsteq	r0, fp, lsl r0
    37a0:	8523061c 	strhi	r0, [r3, #-1564]!	; 0xfffff9e4
    37a4:	02000005 	andeq	r0, r0, #5
    37a8:	67126c91 			; <UNDEFINED> instruction: 0x67126c91
    37ac:	0100001c 	tsteq	r0, ip, lsl r0
    37b0:	a732061c 			; <UNDEFINED> instruction: 0xa732061c
    37b4:	02000000 	andeq	r0, r0, #0
    37b8:	34136a91 	ldrcc	r6, [r3], #-2705	; 0xfffff56f
    37bc:	01000018 	tsteq	r0, r8, lsl r0
    37c0:	a70c061e 	smladge	ip, lr, r6, r0
    37c4:	02000000 	andeq	r0, r0, #0
    37c8:	16007691 			; <UNDEFINED> instruction: 0x16007691
    37cc:	00001ffa 	strdeq	r1, [r0], -sl
    37d0:	0605ff01 	streq	pc, [r5], -r1, lsl #30
    37d4:	2000254c 	andcs	r2, r0, ip, asr #10
    37d8:	00000048 	andeq	r0, r0, r8, asr #32
    37dc:	13df9c01 	bicsne	r9, pc, #256	; 0x100
    37e0:	b1120000 	tstlt	r2, r0
    37e4:	0100001b 	tsteq	r0, fp, lsl r0
    37e8:	852305ff 	strhi	r0, [r3, #-1535]!	; 0xfffffa01
    37ec:	02000005 	andeq	r0, r0, #5
    37f0:	67126c91 			; <UNDEFINED> instruction: 0x67126c91
    37f4:	0100001c 	tsteq	r0, ip, lsl r0
    37f8:	a73205ff 			; <UNDEFINED> instruction: 0xa73205ff
    37fc:	02000000 	andeq	r0, r0, #0
    3800:	34136a91 	ldrcc	r6, [r3], #-2705	; 0xfffff56f
    3804:	01000018 	tsteq	r0, r8, lsl r0
    3808:	a70c0601 	strge	r0, [ip, -r1, lsl #12]
    380c:	02000000 	andeq	r0, r0, #0
    3810:	16007691 			; <UNDEFINED> instruction: 0x16007691
    3814:	000020e2 	andeq	r2, r0, r2, ror #1
    3818:	0605e201 	streq	lr, [r5], -r1, lsl #4
    381c:	20002500 	andcs	r2, r0, r0, lsl #10
    3820:	0000004c 	andeq	r0, r0, ip, asr #32
    3824:	14279c01 	strtne	r9, [r7], #-3073	; 0xfffff3ff
    3828:	b1120000 	tstlt	r2, r0
    382c:	0100001b 	tsteq	r0, fp, lsl r0
    3830:	852305e2 	strhi	r0, [r3, #-1506]!	; 0xfffffa1e
    3834:	02000005 	andeq	r0, r0, #5
    3838:	67126c91 			; <UNDEFINED> instruction: 0x67126c91
    383c:	0100001c 	tsteq	r0, ip, lsl r0
    3840:	a73205e2 	ldrge	r0, [r2, -r2, ror #11]!
    3844:	02000000 	andeq	r0, r0, #0
    3848:	2b136a91 	blcs	4de294 <startup-0x1fb21d6c>
    384c:	01000018 	tsteq	r0, r8, lsl r0
    3850:	a70c05e4 	strge	r0, [ip, -r4, ror #11]
    3854:	02000000 	andeq	r0, r0, #0
    3858:	16007691 			; <UNDEFINED> instruction: 0x16007691
    385c:	000017d0 	ldrdeq	r1, [r0], -r0
    3860:	0605c401 	streq	ip, [r5], -r1, lsl #8
    3864:	200024b8 			; <UNDEFINED> instruction: 0x200024b8
    3868:	00000048 	andeq	r0, r0, r8, asr #32
    386c:	146f9c01 	strbtne	r9, [pc], #-3073	; 3874 <startup-0x1fffc78c>
    3870:	b1120000 	tstlt	r2, r0
    3874:	0100001b 	tsteq	r0, fp, lsl r0
    3878:	852305c4 	strhi	r0, [r3, #-1476]!	; 0xfffffa3c
    387c:	02000005 	andeq	r0, r0, #5
    3880:	67126c91 			; <UNDEFINED> instruction: 0x67126c91
    3884:	0100001c 	tsteq	r0, ip, lsl r0
    3888:	a73205c4 	ldrge	r0, [r2, -r4, asr #11]!
    388c:	02000000 	andeq	r0, r0, #0
    3890:	2b136a91 	blcs	4de2dc <startup-0x1fb21d24>
    3894:	01000018 	tsteq	r0, r8, lsl r0
    3898:	a70c05c6 	strge	r0, [ip, -r6, asr #11]
    389c:	02000000 	andeq	r0, r0, #0
    38a0:	16007691 			; <UNDEFINED> instruction: 0x16007691
    38a4:	00001f02 	andeq	r1, r0, r2, lsl #30
    38a8:	0605a601 	streq	sl, [r5], -r1, lsl #12
    38ac:	20002468 	andcs	r2, r0, r8, ror #8
    38b0:	00000050 	andeq	r0, r0, r0, asr r0
    38b4:	14b79c01 	ldrtne	r9, [r7], #3073	; 0xc01
    38b8:	b1120000 	tstlt	r2, r0
    38bc:	0100001b 	tsteq	r0, fp, lsl r0
    38c0:	852505a6 	strhi	r0, [r5, #-1446]!	; 0xfffffa5a
    38c4:	02000005 	andeq	r0, r0, #5
    38c8:	12126c91 	andsne	r6, r2, #37120	; 0x9100
    38cc:	01000019 	tsteq	r0, r9, lsl r0
    38d0:	a73405a6 	ldrge	r0, [r4, -r6, lsr #11]!
    38d4:	02000000 	andeq	r0, r0, #0
    38d8:	34136a91 	ldrcc	r6, [r3], #-2705	; 0xfffff56f
    38dc:	01000018 	tsteq	r0, r8, lsl r0
    38e0:	a70c05a8 	strge	r0, [ip, -r8, lsr #11]
    38e4:	02000000 	andeq	r0, r0, #0
    38e8:	16007691 			; <UNDEFINED> instruction: 0x16007691
    38ec:	000021af 	andeq	r2, r0, pc, lsr #3
    38f0:	06058801 	streq	r8, [r5], -r1, lsl #16
    38f4:	20002420 	andcs	r2, r0, r0, lsr #8
    38f8:	00000048 	andeq	r0, r0, r8, asr #32
    38fc:	14ff9c01 	ldrbtne	r9, [pc], #3073	; 3904 <startup-0x1fffc6fc>
    3900:	b1120000 	tstlt	r2, r0
    3904:	0100001b 	tsteq	r0, fp, lsl r0
    3908:	85250588 	strhi	r0, [r5, #-1416]!	; 0xfffffa78
    390c:	02000005 	andeq	r0, r0, #5
    3910:	12126c91 	andsne	r6, r2, #37120	; 0x9100
    3914:	01000019 	tsteq	r0, r9, lsl r0
    3918:	a7340588 	ldrge	r0, [r4, -r8, lsl #11]!
    391c:	02000000 	andeq	r0, r0, #0
    3920:	34136a91 	ldrcc	r6, [r3], #-2705	; 0xfffff56f
    3924:	01000018 	tsteq	r0, r8, lsl r0
    3928:	a70c058a 	strge	r0, [ip, -sl, lsl #11]
    392c:	02000000 	andeq	r0, r0, #0
    3930:	16007691 			; <UNDEFINED> instruction: 0x16007691
    3934:	00001ef0 	strdeq	r1, [r0], -r0
    3938:	06056a01 	streq	r6, [r5], -r1, lsl #20
    393c:	200023d0 	ldrdcs	r2, [r0], -r0
    3940:	00000050 	andeq	r0, r0, r0, asr r0
    3944:	15479c01 	strbne	r9, [r7, #-3073]	; 0xfffff3ff
    3948:	b1120000 	tstlt	r2, r0
    394c:	0100001b 	tsteq	r0, fp, lsl r0
    3950:	8525056a 	strhi	r0, [r5, #-1386]!	; 0xfffffa96
    3954:	02000005 	andeq	r0, r0, #5
    3958:	12126c91 	andsne	r6, r2, #37120	; 0x9100
    395c:	01000019 	tsteq	r0, r9, lsl r0
    3960:	a734056a 	ldrge	r0, [r4, -sl, ror #10]!
    3964:	02000000 	andeq	r0, r0, #0
    3968:	2b136a91 	blcs	4de3b4 <startup-0x1fb21c4c>
    396c:	01000018 	tsteq	r0, r8, lsl r0
    3970:	a70c056c 	strge	r0, [ip, -ip, ror #10]
    3974:	02000000 	andeq	r0, r0, #0
    3978:	16007691 			; <UNDEFINED> instruction: 0x16007691
    397c:	000021ea 	andeq	r2, r0, sl, ror #3
    3980:	06054b01 	streq	r4, [r5], -r1, lsl #22
    3984:	20002388 	andcs	r2, r0, r8, lsl #7
    3988:	00000048 	andeq	r0, r0, r8, asr #32
    398c:	158f9c01 	strne	r9, [pc, #3073]	; 4595 <startup-0x1fffba6b>
    3990:	b1120000 	tstlt	r2, r0
    3994:	0100001b 	tsteq	r0, fp, lsl r0
    3998:	8525054b 	strhi	r0, [r5, #-1355]!	; 0xfffffab5
    399c:	02000005 	andeq	r0, r0, #5
    39a0:	12126c91 	andsne	r6, r2, #37120	; 0x9100
    39a4:	01000019 	tsteq	r0, r9, lsl r0
    39a8:	a734054b 	ldrge	r0, [r4, -fp, asr #10]!
    39ac:	02000000 	andeq	r0, r0, #0
    39b0:	2b136a91 	blcs	4de3fc <startup-0x1fb21c04>
    39b4:	01000018 	tsteq	r0, r8, lsl r0
    39b8:	a70c054d 	strge	r0, [ip, -sp, asr #10]
    39bc:	02000000 	andeq	r0, r0, #0
    39c0:	16007691 			; <UNDEFINED> instruction: 0x16007691
    39c4:	00001fe5 	andeq	r1, r0, r5, ror #31
    39c8:	06052e01 	streq	r2, [r5], -r1, lsl #28
    39cc:	20002338 	andcs	r2, r0, r8, lsr r3
    39d0:	00000050 	andeq	r0, r0, r0, asr r0
    39d4:	15d79c01 	ldrbne	r9, [r7, #3073]	; 0xc01
    39d8:	b1120000 	tstlt	r2, r0
    39dc:	0100001b 	tsteq	r0, fp, lsl r0
    39e0:	8528052e 	strhi	r0, [r8, #-1326]!	; 0xfffffad2
    39e4:	02000005 	andeq	r0, r0, #5
    39e8:	5b126c91 	blpl	49ec34 <startup-0x1fb613cc>
    39ec:	01000019 	tsteq	r0, r9, lsl r0
    39f0:	a737052e 	ldrge	r0, [r7, -lr, lsr #10]!
    39f4:	02000000 	andeq	r0, r0, #0
    39f8:	34136a91 	ldrcc	r6, [r3], #-2705	; 0xfffff56f
    39fc:	01000018 	tsteq	r0, r8, lsl r0
    3a00:	a70c0530 	smladxge	ip, r0, r5, r0
    3a04:	02000000 	andeq	r0, r0, #0
    3a08:	16007691 			; <UNDEFINED> instruction: 0x16007691
    3a0c:	000021c1 	andeq	r2, r0, r1, asr #3
    3a10:	06051101 	streq	r1, [r5], -r1, lsl #2
    3a14:	200022f0 	strdcs	r2, [r0], -r0
    3a18:	00000048 	andeq	r0, r0, r8, asr #32
    3a1c:	161f9c01 	ldrne	r9, [pc], -r1, lsl #24
    3a20:	b1120000 	tstlt	r2, r0
    3a24:	0100001b 	tsteq	r0, fp, lsl r0
    3a28:	85280511 	strhi	r0, [r8, #-1297]!	; 0xfffffaef
    3a2c:	02000005 	andeq	r0, r0, #5
    3a30:	5b126c91 	blpl	49ec7c <startup-0x1fb61384>
    3a34:	01000019 	tsteq	r0, r9, lsl r0
    3a38:	a7370511 			; <UNDEFINED> instruction: 0xa7370511
    3a3c:	02000000 	andeq	r0, r0, #0
    3a40:	34136a91 	ldrcc	r6, [r3], #-2705	; 0xfffff56f
    3a44:	01000018 	tsteq	r0, r8, lsl r0
    3a48:	a70c0513 	smladge	ip, r3, r5, r0
    3a4c:	02000000 	andeq	r0, r0, #0
    3a50:	16007691 			; <UNDEFINED> instruction: 0x16007691
    3a54:	000018db 	ldrdeq	r1, [r0], -fp
    3a58:	0604f401 	streq	pc, [r4], -r1, lsl #8
    3a5c:	200022a0 	andcs	r2, r0, r0, lsr #5
    3a60:	00000050 	andeq	r0, r0, r0, asr r0
    3a64:	16679c01 	strbtne	r9, [r7], -r1, lsl #24
    3a68:	b1120000 	tstlt	r2, r0
    3a6c:	0100001b 	tsteq	r0, fp, lsl r0
    3a70:	852804f4 	strhi	r0, [r8, #-1268]!	; 0xfffffb0c
    3a74:	02000005 	andeq	r0, r0, #5
    3a78:	5b126c91 	blpl	49ecc4 <startup-0x1fb6133c>
    3a7c:	01000019 	tsteq	r0, r9, lsl r0
    3a80:	a73704f4 			; <UNDEFINED> instruction: 0xa73704f4
    3a84:	02000000 	andeq	r0, r0, #0
    3a88:	2b136a91 	blcs	4de4d4 <startup-0x1fb21b2c>
    3a8c:	01000018 	tsteq	r0, r8, lsl r0
    3a90:	a70c04f6 			; <UNDEFINED> instruction: 0xa70c04f6
    3a94:	02000000 	andeq	r0, r0, #0
    3a98:	16007691 			; <UNDEFINED> instruction: 0x16007691
    3a9c:	00001a46 	andeq	r1, r0, r6, asr #20
    3aa0:	0604d601 	streq	sp, [r4], -r1, lsl #12
    3aa4:	20002258 	andcs	r2, r0, r8, asr r2
    3aa8:	00000048 	andeq	r0, r0, r8, asr #32
    3aac:	16af9c01 	strtne	r9, [pc], r1, lsl #24
    3ab0:	b1120000 	tstlt	r2, r0
    3ab4:	0100001b 	tsteq	r0, fp, lsl r0
    3ab8:	852804d6 	strhi	r0, [r8, #-1238]!	; 0xfffffb2a
    3abc:	02000005 	andeq	r0, r0, #5
    3ac0:	5b126c91 	blpl	49ed0c <startup-0x1fb612f4>
    3ac4:	01000019 	tsteq	r0, r9, lsl r0
    3ac8:	a73704d6 			; <UNDEFINED> instruction: 0xa73704d6
    3acc:	02000000 	andeq	r0, r0, #0
    3ad0:	2b136a91 	blcs	4de51c <startup-0x1fb21ae4>
    3ad4:	01000018 	tsteq	r0, r8, lsl r0
    3ad8:	a70c04d8 			; <UNDEFINED> instruction: 0xa70c04d8
    3adc:	02000000 	andeq	r0, r0, #0
    3ae0:	16007691 			; <UNDEFINED> instruction: 0x16007691
    3ae4:	000017bc 			; <UNDEFINED> instruction: 0x000017bc
    3ae8:	0604ba01 	streq	fp, [r4], -r1, lsl #20
    3aec:	20002208 	andcs	r2, r0, r8, lsl #4
    3af0:	00000050 	andeq	r0, r0, r0, asr r0
    3af4:	16f79c01 	ldrbtne	r9, [r7], r1, lsl #24
    3af8:	b1120000 	tstlt	r2, r0
    3afc:	0100001b 	tsteq	r0, fp, lsl r0
    3b00:	852704ba 	strhi	r0, [r7, #-1210]!	; 0xfffffb46
    3b04:	02000005 	andeq	r0, r0, #5
    3b08:	3f126c91 	svccc	0x00126c91
    3b0c:	01000019 	tsteq	r0, r9, lsl r0
    3b10:	a73604ba 			; <UNDEFINED> instruction: 0xa73604ba
    3b14:	02000000 	andeq	r0, r0, #0
    3b18:	34136a91 	ldrcc	r6, [r3], #-2705	; 0xfffff56f
    3b1c:	01000018 	tsteq	r0, r8, lsl r0
    3b20:	a70c04bc 			; <UNDEFINED> instruction: 0xa70c04bc
    3b24:	02000000 	andeq	r0, r0, #0
    3b28:	16007691 			; <UNDEFINED> instruction: 0x16007691
    3b2c:	00001d0e 	andeq	r1, r0, lr, lsl #26
    3b30:	06049d01 	streq	r9, [r4], -r1, lsl #26
    3b34:	200021c0 	andcs	r2, r0, r0, asr #3
    3b38:	00000048 	andeq	r0, r0, r8, asr #32
    3b3c:	173f9c01 	ldrne	r9, [pc, -r1, lsl #24]!
    3b40:	b1120000 	tstlt	r2, r0
    3b44:	0100001b 	tsteq	r0, fp, lsl r0
    3b48:	8527049d 	strhi	r0, [r7, #-1181]!	; 0xfffffb63
    3b4c:	02000005 	andeq	r0, r0, #5
    3b50:	3f126c91 	svccc	0x00126c91
    3b54:	01000019 	tsteq	r0, r9, lsl r0
    3b58:	a736049d 			; <UNDEFINED> instruction: 0xa736049d
    3b5c:	02000000 	andeq	r0, r0, #0
    3b60:	34136a91 	ldrcc	r6, [r3], #-2705	; 0xfffff56f
    3b64:	01000018 	tsteq	r0, r8, lsl r0
    3b68:	a70c049f 			; <UNDEFINED> instruction: 0xa70c049f
    3b6c:	02000000 	andeq	r0, r0, #0
    3b70:	16007691 			; <UNDEFINED> instruction: 0x16007691
    3b74:	00001760 	andeq	r1, r0, r0, ror #14
    3b78:	06048101 	streq	r8, [r4], -r1, lsl #2
    3b7c:	20002170 	andcs	r2, r0, r0, ror r1
    3b80:	00000050 	andeq	r0, r0, r0, asr r0
    3b84:	17879c01 	strne	r9, [r7, r1, lsl #24]
    3b88:	b1120000 	tstlt	r2, r0
    3b8c:	0100001b 	tsteq	r0, fp, lsl r0
    3b90:	85270481 	strhi	r0, [r7, #-1153]!	; 0xfffffb7f
    3b94:	02000005 	andeq	r0, r0, #5
    3b98:	3f126c91 	svccc	0x00126c91
    3b9c:	01000019 	tsteq	r0, r9, lsl r0
    3ba0:	a7360481 	ldrge	r0, [r6, -r1, lsl #9]!
    3ba4:	02000000 	andeq	r0, r0, #0
    3ba8:	2b136a91 	blcs	4de5f4 <startup-0x1fb21a0c>
    3bac:	01000018 	tsteq	r0, r8, lsl r0
    3bb0:	a70c0483 	strge	r0, [ip, -r3, lsl #9]
    3bb4:	02000000 	andeq	r0, r0, #0
    3bb8:	16007691 			; <UNDEFINED> instruction: 0x16007691
    3bbc:	00001cfa 	strdeq	r1, [r0], -sl
    3bc0:	06046401 	streq	r6, [r4], -r1, lsl #8
    3bc4:	20002128 	andcs	r2, r0, r8, lsr #2
    3bc8:	00000048 	andeq	r0, r0, r8, asr #32
    3bcc:	17cf9c01 	strbne	r9, [pc, r1, lsl #24]
    3bd0:	b1120000 	tstlt	r2, r0
    3bd4:	0100001b 	tsteq	r0, fp, lsl r0
    3bd8:	85270464 	strhi	r0, [r7, #-1124]!	; 0xfffffb9c
    3bdc:	02000005 	andeq	r0, r0, #5
    3be0:	3f126c91 	svccc	0x00126c91
    3be4:	01000019 	tsteq	r0, r9, lsl r0
    3be8:	a7360464 	ldrge	r0, [r6, -r4, ror #8]!
    3bec:	02000000 	andeq	r0, r0, #0
    3bf0:	2b136a91 	blcs	4de63c <startup-0x1fb219c4>
    3bf4:	01000018 	tsteq	r0, r8, lsl r0
    3bf8:	a70c0466 	strge	r0, [ip, -r6, ror #8]
    3bfc:	02000000 	andeq	r0, r0, #0
    3c00:	16007691 			; <UNDEFINED> instruction: 0x16007691
    3c04:	00001fae 	andeq	r1, r0, lr, lsr #31
    3c08:	06045201 	streq	r5, [r4], -r1, lsl #4
    3c0c:	20002110 	andcs	r2, r0, r0, lsl r1
    3c10:	00000018 	andeq	r0, r0, r8, lsl r0
    3c14:	18079c01 	stmdane	r7, {r0, sl, fp, ip, pc}
    3c18:	b1120000 	tstlt	r2, r0
    3c1c:	0100001b 	tsteq	r0, fp, lsl r0
    3c20:	85230452 	strhi	r0, [r3, #-1106]!	; 0xfffffbae
    3c24:	02000005 	andeq	r0, r0, #5
    3c28:	b5127491 	ldrlt	r7, [r2, #-1169]	; 0xfffffb6f
    3c2c:	0100001f 	tsteq	r0, pc, lsl r0
    3c30:	c9320452 	ldmdbgt	r2!, {r1, r4, r6, sl}
    3c34:	02000000 	andeq	r0, r0, #0
    3c38:	16007091 			; <UNDEFINED> instruction: 0x16007091
    3c3c:	00001a8c 	andeq	r1, r0, ip, lsl #21
    3c40:	06044301 	streq	r4, [r4], -r1, lsl #6
    3c44:	200020f8 	strdcs	r2, [r0], -r8
    3c48:	00000018 	andeq	r0, r0, r8, lsl r0
    3c4c:	183f9c01 	ldmdane	pc!, {r0, sl, fp, ip, pc}	; <UNPREDICTABLE>
    3c50:	b1120000 	tstlt	r2, r0
    3c54:	0100001b 	tsteq	r0, fp, lsl r0
    3c58:	85230443 	strhi	r0, [r3, #-1091]!	; 0xfffffbbd
    3c5c:	02000005 	andeq	r0, r0, #5
    3c60:	93127491 	tstls	r2, #-1862270976	; 0x91000000
    3c64:	0100001a 	tsteq	r0, sl, lsl r0
    3c68:	c9320443 	ldmdbgt	r2!, {r0, r1, r6, sl}
    3c6c:	02000000 	andeq	r0, r0, #0
    3c70:	16007091 			; <UNDEFINED> instruction: 0x16007091
    3c74:	00001a7c 	andeq	r1, r0, ip, ror sl
    3c78:	06043401 	streq	r3, [r4], -r1, lsl #8
    3c7c:	200020e0 	andcs	r2, r0, r0, ror #1
    3c80:	00000018 	andeq	r0, r0, r8, lsl r0
    3c84:	18779c01 	ldmdane	r7!, {r0, sl, fp, ip, pc}^
    3c88:	b1120000 	tstlt	r2, r0
    3c8c:	0100001b 	tsteq	r0, fp, lsl r0
    3c90:	85230434 	strhi	r0, [r3, #-1076]!	; 0xfffffbcc
    3c94:	02000005 	andeq	r0, r0, #5
    3c98:	83127491 	tsthi	r2, #-1862270976	; 0x91000000
    3c9c:	0100001a 	tsteq	r0, sl, lsl r0
    3ca0:	c9320434 	ldmdbgt	r2!, {r2, r4, r5, sl}
    3ca4:	02000000 	andeq	r0, r0, #0
    3ca8:	16007091 			; <UNDEFINED> instruction: 0x16007091
    3cac:	000017e9 	andeq	r1, r0, r9, ror #15
    3cb0:	06042401 	streq	r2, [r4], -r1, lsl #8
    3cb4:	200020c8 	andcs	r2, r0, r8, asr #1
    3cb8:	00000018 	andeq	r0, r0, r8, lsl r0
    3cbc:	18af9c01 	stmiane	pc!, {r0, sl, fp, ip, pc}	; <UNPREDICTABLE>
    3cc0:	b1120000 	tstlt	r2, r0
    3cc4:	0100001b 	tsteq	r0, fp, lsl r0
    3cc8:	85230424 	strhi	r0, [r3, #-1060]!	; 0xfffffbdc
    3ccc:	02000005 	andeq	r0, r0, #5
    3cd0:	f0127491 			; <UNDEFINED> instruction: 0xf0127491
    3cd4:	01000017 	tsteq	r0, r7, lsl r0
    3cd8:	c9320424 	ldmdbgt	r2!, {r2, r5, sl}
    3cdc:	02000000 	andeq	r0, r0, #0
    3ce0:	16007091 			; <UNDEFINED> instruction: 0x16007091
    3ce4:	00001fbe 			; <UNDEFINED> instruction: 0x00001fbe
    3ce8:	0603f601 	streq	pc, [r3], -r1, lsl #12
    3cec:	20001ff4 	strdcs	r1, [r0], -r4
    3cf0:	000000d4 	ldrdeq	r0, [r0], -r4
    3cf4:	19179c01 	ldmdbne	r7, {r0, sl, fp, ip, pc}
    3cf8:	b1120000 	tstlt	r2, r0
    3cfc:	0100001b 	tsteq	r0, fp, lsl r0
    3d00:	852203f6 	strhi	r0, [r2, #-1014]!	; 0xfffffc0a
    3d04:	02000005 	andeq	r0, r0, #5
    3d08:	1d126c91 	ldcne	12, cr6, [r2, #-580]	; 0xfffffdbc
    3d0c:	01000019 	tsteq	r0, r9, lsl r0
    3d10:	a73103f6 			; <UNDEFINED> instruction: 0xa73103f6
    3d14:	02000000 	andeq	r0, r0, #0
    3d18:	18126a91 	ldmdane	r2, {r0, r4, r7, r9, fp, sp, lr}
    3d1c:	01000020 	tsteq	r0, r0, lsr #32
    3d20:	a74703f6 			; <UNDEFINED> instruction: 0xa74703f6
    3d24:	02000000 	andeq	r0, r0, #0
    3d28:	74146891 	ldrvc	r6, [r4], #-2193	; 0xfffff76f
    3d2c:	0100706d 	tsteq	r0, sp, rrx
    3d30:	c90c03f8 	stmdbgt	ip, {r3, r4, r5, r6, r7, r8, r9}
    3d34:	02000000 	andeq	r0, r0, #0
    3d38:	bb137491 	bllt	4e0f84 <startup-0x1fb1f07c>
    3d3c:	01000018 	tsteq	r0, r8, lsl r0
    3d40:	a70c03f9 			; <UNDEFINED> instruction: 0xa70c03f9
    3d44:	02000000 	andeq	r0, r0, #0
    3d48:	16007291 			; <UNDEFINED> instruction: 0x16007291
    3d4c:	00001c44 	andeq	r1, r0, r4, asr #24
    3d50:	0603d201 	streq	sp, [r3], -r1, lsl #4
    3d54:	20001fb4 			; <UNDEFINED> instruction: 0x20001fb4
    3d58:	00000040 	andeq	r0, r0, r0, asr #32
    3d5c:	193f9c01 	ldmdbne	pc!, {r0, sl, fp, ip, pc}	; <UNPREDICTABLE>
    3d60:	92120000 	andsls	r0, r2, #0
    3d64:	0100001b 	tsteq	r0, fp, lsl r0
    3d68:	3f2a03d2 	svccc	0x002a03d2
    3d6c:	02000019 	andeq	r0, r0, #25
    3d70:	15007491 	strne	r7, [r0, #-1169]	; 0xfffffb6f
    3d74:	00042904 	andeq	r2, r4, r4, lsl #18
    3d78:	1f971600 	svcne	0x00971600
    3d7c:	93010000 	movwls	r0, #4096	; 0x1000
    3d80:	1e900603 	cdpne	6, 9, cr0, cr0, cr3, {0}
    3d84:	01242000 			; <UNDEFINED> instruction: 0x01242000
    3d88:	9c010000 	stcls	0, cr0, [r1], {-0}
    3d8c:	000019ad 	andeq	r1, r0, sp, lsr #19
    3d90:	001bb112 	andseq	fp, fp, r2, lsl r1
    3d94:	03930100 	orrseq	r0, r3, #0, 2
    3d98:	0005851f 	andeq	r8, r5, pc, lsl r5
    3d9c:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    3da0:	001b9212 	andseq	r9, fp, r2, lsl r2
    3da4:	03930100 	orrseq	r0, r3, #0, 2
    3da8:	00193f38 	andseq	r3, r9, r8, lsr pc
    3dac:	60910200 	addsvs	r0, r1, r0, lsl #4
    3db0:	00199913 	andseq	r9, r9, r3, lsl r9
    3db4:	03950100 	orrseq	r0, r5, #0, 2
    3db8:	0000a70c 	andeq	sl, r0, ip, lsl #14
    3dbc:	6c910200 	lfmvs	f0, 4, [r1], {0}
    3dc0:	001aaa13 	andseq	sl, sl, r3, lsl sl
    3dc4:	03950100 	orrseq	r0, r5, #0, 2
    3dc8:	0000a71a 	andeq	sl, r0, sl, lsl r7
    3dcc:	6a910200 	bvs	fe4445d4 <a+0xde440640>
    3dd0:	001cb213 	andseq	fp, ip, r3, lsl r2
    3dd4:	03950100 	orrseq	r0, r5, #0, 2
    3dd8:	0000a727 	andeq	sl, r0, r7, lsr #14
    3ddc:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
    3de0:	19fd1600 	ldmibne	sp!, {r9, sl, ip}^
    3de4:	43010000 	movwmi	r0, #4096	; 0x1000
    3de8:	1d100603 	ldcne	6, cr0, [r0, #-12]
    3dec:	01802000 	orreq	r2, r0, r0
    3df0:	9c010000 	stcls	0, cr0, [r1], {-0}
    3df4:	00001a15 	andeq	r1, r0, r5, lsl sl
    3df8:	001bb112 	andseq	fp, fp, r2, lsl r1
    3dfc:	03430100 	movteq	r0, #12544	; 0x3100
    3e00:	0005851f 	andeq	r8, r5, pc, lsl r5
    3e04:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    3e08:	001b9212 	andseq	r9, fp, r2, lsl r2
    3e0c:	03430100 	movteq	r0, #12544	; 0x3100
    3e10:	00193f38 	andseq	r3, r9, r8, lsr pc
    3e14:	60910200 	addsvs	r0, r1, r0, lsl #4
    3e18:	00199913 	andseq	r9, r9, r3, lsl r9
    3e1c:	03450100 	movteq	r0, #20736	; 0x5100
    3e20:	0000a70c 	andeq	sl, r0, ip, lsl #14
    3e24:	6a910200 	bvs	fe44462c <a+0xde440698>
    3e28:	001aaa13 	andseq	sl, sl, r3, lsl sl
    3e2c:	03450100 	movteq	r0, #20736	; 0x5100
    3e30:	0000a71a 	andeq	sl, r0, sl, lsl r7
    3e34:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
    3e38:	001cb213 	andseq	fp, ip, r3, lsl r2
    3e3c:	03450100 	movteq	r0, #20736	; 0x5100
    3e40:	0000a727 	andeq	sl, r0, r7, lsr #14
    3e44:	6c910200 	lfmvs	f0, 4, [r1], {0}
    3e48:	1f631600 	svcne	0x00631600
    3e4c:	f2010000 	vhadd.s8	d0, d1, d0
    3e50:	1b940602 	blne	fe505660 <a+0xde5016cc>
    3e54:	017c2000 	cmneq	ip, r0
    3e58:	9c010000 	stcls	0, cr0, [r1], {-0}
    3e5c:	00001a7d 	andeq	r1, r0, sp, ror sl
    3e60:	001bb112 	andseq	fp, fp, r2, lsl r1
    3e64:	02f20100 	rscseq	r0, r2, #0, 2
    3e68:	0005851f 	andeq	r8, r5, pc, lsl r5
    3e6c:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    3e70:	001b9212 	andseq	r9, fp, r2, lsl r2
    3e74:	02f20100 	rscseq	r0, r2, #0, 2
    3e78:	00193f38 	andseq	r3, r9, r8, lsr pc
    3e7c:	60910200 	addsvs	r0, r1, r0, lsl #4
    3e80:	00199913 	andseq	r9, r9, r3, lsl r9
    3e84:	02f40100 	rscseq	r0, r4, #0, 2
    3e88:	0000a70c 	andeq	sl, r0, ip, lsl #14
    3e8c:	6a910200 	bvs	fe444694 <a+0xde440700>
    3e90:	001aaa13 	andseq	sl, sl, r3, lsl sl
    3e94:	02f40100 	rscseq	r0, r4, #0, 2
    3e98:	0000a71a 	andeq	sl, r0, sl, lsl r7
    3e9c:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
    3ea0:	001cb213 	andseq	fp, ip, r3, lsl r2
    3ea4:	02f40100 	rscseq	r0, r4, #0, 2
    3ea8:	0000a727 	andeq	sl, r0, r7, lsr #14
    3eac:	6c910200 	lfmvs	f0, 4, [r1], {0}
    3eb0:	20c11600 	sbccs	r1, r1, r0, lsl #12
    3eb4:	a1010000 	mrsge	r0, (UNDEF: 1)
    3eb8:	1a3c0602 	bne	f056c8 <startup-0x1f0fa938>
    3ebc:	01582000 	cmpeq	r8, r0
    3ec0:	9c010000 	stcls	0, cr0, [r1], {-0}
    3ec4:	00001ae5 	andeq	r1, r0, r5, ror #21
    3ec8:	001bb112 	andseq	fp, fp, r2, lsl r1
    3ecc:	02a10100 	adceq	r0, r1, #0, 2
    3ed0:	0005851f 	andeq	r8, r5, pc, lsl r5
    3ed4:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    3ed8:	001b9212 	andseq	r9, fp, r2, lsl r2
    3edc:	02a10100 	adceq	r0, r1, #0, 2
    3ee0:	00193f38 	andseq	r3, r9, r8, lsr pc
    3ee4:	60910200 	addsvs	r0, r1, r0, lsl #4
    3ee8:	00199913 	andseq	r9, r9, r3, lsl r9
    3eec:	02a30100 	adceq	r0, r3, #0, 2
    3ef0:	0000a70c 	andeq	sl, r0, ip, lsl #14
    3ef4:	6a910200 	bvs	fe4446fc <a+0xde440768>
    3ef8:	001aaa13 	andseq	sl, sl, r3, lsl sl
    3efc:	02a30100 	adceq	r0, r3, #0, 2
    3f00:	0000a71a 	andeq	sl, r0, sl, lsl r7
    3f04:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
    3f08:	001cb213 	andseq	fp, ip, r3, lsl r2
    3f0c:	02a30100 	adceq	r0, r3, #0, 2
    3f10:	0000a727 	andeq	sl, r0, r7, lsr #14
    3f14:	6c910200 	lfmvs	f0, 4, [r1], {0}
    3f18:	1f471600 	svcne	0x00471600
    3f1c:	50010000 	andpl	r0, r1, r0
    3f20:	19fc0602 	ldmibne	ip!, {r1, r9, sl}^
    3f24:	00402000 	subeq	r2, r0, r0
    3f28:	9c010000 	stcls	0, cr0, [r1], {-0}
    3f2c:	00001b1d 	andeq	r1, r0, sp, lsl fp
    3f30:	001bb112 	andseq	fp, fp, r2, lsl r1
    3f34:	02500100 	subseq	r0, r0, #0, 2
    3f38:	0005851b 	andeq	r8, r5, fp, lsl r5
    3f3c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3f40:	00009e12 	andeq	r9, r0, r2, lsl lr
    3f44:	02500100 	subseq	r0, r0, #0, 2
    3f48:	00014531 	andeq	r4, r1, r1, lsr r5
    3f4c:	73910200 	orrsvc	r0, r1, #0, 4
    3f50:	1dae1600 	stcne	6, cr1, [lr]
    3f54:	3c010000 	stccc	0, cr0, [r1], {-0}
    3f58:	19be0602 	ldmibne	lr!, {r1, r9, sl}
    3f5c:	003e2000 	eorseq	r2, lr, r0
    3f60:	9c010000 	stcls	0, cr0, [r1], {-0}
    3f64:	00001b55 	andeq	r1, r0, r5, asr fp
    3f68:	001bb112 	andseq	fp, fp, r2, lsl r1
    3f6c:	023c0100 	eorseq	r0, ip, #0, 2
    3f70:	00058528 	andeq	r8, r5, r8, lsr #10
    3f74:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3f78:	0019a212 	andseq	sl, r9, r2, lsl r2
    3f7c:	023c0100 	eorseq	r0, ip, #0, 2
    3f80:	0000a737 	andeq	sl, r0, r7, lsr r7
    3f84:	72910200 	addsvc	r0, r1, #0, 4
    3f88:	17741600 	ldrbne	r1, [r4, -r0, lsl #12]!
    3f8c:	25010000 	strcs	r0, [r1, #-0]
    3f90:	19860602 	stmibne	r6, {r1, r9, sl}
    3f94:	00382000 	eorseq	r2, r8, r0
    3f98:	9c010000 	stcls	0, cr0, [r1], {-0}
    3f9c:	00001b8d 	andeq	r1, r0, sp, lsl #23
    3fa0:	001bb112 	andseq	fp, fp, r2, lsl r1
    3fa4:	02250100 	eoreq	r0, r5, #0, 2
    3fa8:	0005852a 	andeq	r8, r5, sl, lsr #10
    3fac:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3fb0:	00175512 	andseq	r5, r7, r2, lsl r5
    3fb4:	02250100 	eoreq	r0, r5, #0, 2
    3fb8:	0000a739 	andeq	sl, r0, r9, lsr r7
    3fbc:	72910200 	addsvc	r0, r1, #0, 4
    3fc0:	18961600 	ldmne	r6, {r9, sl, ip}
    3fc4:	0a010000 	beq	43fcc <startup-0x1ffbc034>
    3fc8:	19460602 	stmdbne	r6, {r1, r9, sl}^
    3fcc:	00402000 	subeq	r2, r0, r0
    3fd0:	9c010000 	stcls	0, cr0, [r1], {-0}
    3fd4:	00001bc5 	andeq	r1, r0, r5, asr #23
    3fd8:	001bb112 	andseq	fp, fp, r2, lsl r1
    3fdc:	020a0100 	andeq	r0, sl, #0, 2
    3fe0:	00058528 	andeq	r8, r5, r8, lsr #10
    3fe4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    3fe8:	00009e12 	andeq	r9, r0, r2, lsl lr
    3fec:	020a0100 	andeq	r0, sl, #0, 2
    3ff0:	0001453e 	andeq	r4, r1, lr, lsr r5
    3ff4:	73910200 	orrsvc	r0, r1, #0, 4
    3ff8:	1fcd1600 	svcne	0x00cd1600
    3ffc:	f1010000 	setend	le
    4000:	19060601 	stmdbne	r6, {r0, r9, sl}
    4004:	00402000 	subeq	r2, r0, r0
    4008:	9c010000 	stcls	0, cr0, [r1], {-0}
    400c:	00001bfd 	strdeq	r1, [r0], -sp
    4010:	001bb112 	andseq	fp, fp, r2, lsl r1
    4014:	01f10100 	mvnseq	r0, r0, lsl #2
    4018:	0005852b 	andeq	r8, r5, fp, lsr #10
    401c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    4020:	001a1c12 	andseq	r1, sl, r2, lsl ip
    4024:	01f10100 	mvnseq	r0, r0, lsl #2
    4028:	0000a73a 	andeq	sl, r0, sl, lsr r7
    402c:	72910200 	addsvc	r0, r1, #0, 4
    4030:	18091600 	stmdane	r9, {r9, sl, ip}
    4034:	d4010000 	strle	r0, [r1], #-0
    4038:	18c60601 	stmiane	r6, {r0, r9, sl}^
    403c:	00402000 	subeq	r2, r0, r0
    4040:	9c010000 	stcls	0, cr0, [r1], {-0}
    4044:	00001c35 	andeq	r1, r0, r5, lsr ip
    4048:	001bb112 	andseq	fp, fp, r2, lsl r1
    404c:	01d40100 	bicseq	r0, r4, r0, lsl #2
    4050:	0005852b 	andeq	r8, r5, fp, lsr #10
    4054:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    4058:	00009e12 	andeq	r9, r0, r2, lsl lr
    405c:	01d40100 	bicseq	r0, r4, r0, lsl #2
    4060:	00014541 	andeq	r4, r1, r1, asr #10
    4064:	73910200 	orrsvc	r0, r1, #0, 4
    4068:	1ae31800 	bne	ff8ca070 <a+0xdf8c60dc>
    406c:	c4010000 	strgt	r0, [r1], #-0
    4070:	00a70a01 	adceq	r0, r7, r1, lsl #20
    4074:	18b00000 	ldmne	r0!, {}	; <UNPREDICTABLE>
    4078:	00162000 	andseq	r2, r6, r0
    407c:	9c010000 	stcls	0, cr0, [r1], {-0}
    4080:	00001c61 	andeq	r1, r0, r1, ror #24
    4084:	001bb112 	andseq	fp, fp, r2, lsl r1
    4088:	01c40100 	biceq	r0, r4, r0, lsl #2
    408c:	00058528 	andeq	r8, r5, r8, lsr #10
    4090:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    4094:	1af41800 	bne	ffd0a09c <a+0xdfd06108>
    4098:	b6010000 	strlt	r0, [r1], -r0
    409c:	00c90a01 	sbceq	r0, r9, r1, lsl #20
    40a0:	189c0000 	ldmne	ip, {}	; <UNPREDICTABLE>
    40a4:	00142000 	andseq	r2, r4, r0
    40a8:	9c010000 	stcls	0, cr0, [r1], {-0}
    40ac:	00001c8d 	andeq	r1, r0, sp, lsl #25
    40b0:	001bb112 	andseq	fp, fp, r2, lsl r1
    40b4:	01b60100 			; <UNDEFINED> instruction: 0x01b60100
    40b8:	00058526 	andeq	r8, r5, r6, lsr #10
    40bc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    40c0:	19aa1600 	stmibne	sl!, {r9, sl, ip}
    40c4:	a8010000 	stmdage	r1, {}	; <UNPREDICTABLE>
    40c8:	18840601 	stmne	r4, {r0, r9, sl}
    40cc:	00182000 	andseq	r2, r8, r0
    40d0:	9c010000 	stcls	0, cr0, [r1], {-0}
    40d4:	00001cc5 	andeq	r1, r0, r5, asr #25
    40d8:	001bb112 	andseq	fp, fp, r2, lsl r1
    40dc:	01a80100 			; <UNDEFINED> instruction: 0x01a80100
    40e0:	00058525 	andeq	r8, r5, r5, lsr #10
    40e4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    40e8:	0019b112 	andseq	fp, r9, r2, lsl r1
    40ec:	01a80100 			; <UNDEFINED> instruction: 0x01a80100
    40f0:	0000c934 	andeq	ip, r0, r4, lsr r9
    40f4:	70910200 	addsvc	r0, r1, r0, lsl #4
    40f8:	20831600 	addcs	r1, r3, r0, lsl #12
    40fc:	99010000 	stmdbls	r1, {}	; <UNPREDICTABLE>
    4100:	186c0601 	stmdane	ip!, {r0, r9, sl}^
    4104:	00182000 	andseq	r2, r8, r0
    4108:	9c010000 	stcls	0, cr0, [r1], {-0}
    410c:	00001cfd 	strdeq	r1, [r0], -sp
    4110:	001bb112 	andseq	fp, fp, r2, lsl r1
    4114:	01990100 	orrseq	r0, r9, r0, lsl #2
    4118:	00058522 	andeq	r8, r5, r2, lsr #10
    411c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    4120:	000e8312 	andeq	r8, lr, r2, lsl r3
    4124:	01990100 	orrseq	r0, r9, r0, lsl #2
    4128:	0000c931 	andeq	ip, r0, r1, lsr r9
    412c:	70910200 	addsvc	r0, r1, r0, lsl #4
    4130:	19291600 	stmdbne	r9!, {r9, sl, ip}
    4134:	7f010000 	svcvc	0x00010000
    4138:	18240601 	stmdane	r4!, {r0, r9, sl}
    413c:	00482000 	subeq	r2, r8, r0
    4140:	9c010000 	stcls	0, cr0, [r1], {-0}
    4144:	00001d45 	andeq	r1, r0, r5, asr #26
    4148:	001bb112 	andseq	fp, fp, r2, lsl r1
    414c:	017f0100 	cmneq	pc, r0, lsl #2
    4150:	00058529 	andeq	r8, r5, r9, lsr #10
    4154:	6c910200 	lfmvs	f0, 4, [r1], {0}
    4158:	0006c112 	andeq	ip, r6, r2, lsl r1
    415c:	017f0100 	cmneq	pc, r0, lsl #2
    4160:	0000a738 	andeq	sl, r0, r8, lsr r7
    4164:	6a910200 	bvs	fe44496c <a+0xde4409d8>
    4168:	00183d13 	andseq	r3, r8, r3, lsl sp
    416c:	01810100 	orreq	r0, r1, r0, lsl #2
    4170:	0000a70c 	andeq	sl, r0, ip, lsl #14
    4174:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    4178:	1e531600 	cdpne	6, 5, cr1, cr3, cr0, {0}
    417c:	68010000 	stmdavs	r1, {}	; <UNPREDICTABLE>
    4180:	17f40601 	ldrbne	r0, [r4, r1, lsl #12]!
    4184:	00302000 	eorseq	r2, r0, r0
    4188:	9c010000 	stcls	0, cr0, [r1], {-0}
    418c:	00001d8d 	andeq	r1, r0, sp, lsl #27
    4190:	001bb112 	andseq	fp, fp, r2, lsl r1
    4194:	01680100 	cmneq	r8, r0, lsl #2
    4198:	00058527 	andeq	r8, r5, r7, lsr #10
    419c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    41a0:	001c1212 	andseq	r1, ip, r2, lsl r2
    41a4:	01680100 	cmneq	r8, r0, lsl #2
    41a8:	0000a736 	andeq	sl, r0, r6, lsr r7
    41ac:	72910200 	addsvc	r0, r1, #0, 4
    41b0:	001c5512 	andseq	r5, ip, r2, lsl r5
    41b4:	01680100 	cmneq	r8, r0, lsl #2
    41b8:	0000a74a 	andeq	sl, r0, sl, asr #14
    41bc:	70910200 	addsvc	r0, r1, r0, lsl #4
    41c0:	1b031600 	blne	c99c8 <startup-0x1ff36638>
    41c4:	54010000 	strpl	r0, [r1], #-0
    41c8:	17c40601 	strbne	r0, [r4, r1, lsl #12]
    41cc:	00302000 	eorseq	r2, r0, r0
    41d0:	9c010000 	stcls	0, cr0, [r1], {-0}
    41d4:	00001db5 			; <UNDEFINED> instruction: 0x00001db5
    41d8:	001d8912 	andseq	r8, sp, r2, lsl r9
    41dc:	01540100 	cmpeq	r4, r0, lsl #2
    41e0:	001db536 	andseq	fp, sp, r6, lsr r5
    41e4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    41e8:	ab041500 	blge	1095f0 <startup-0x1fef6a10>
    41ec:	16000003 	strne	r0, [r0], -r3
    41f0:	00001ea8 	andeq	r1, r0, r8, lsr #29
    41f4:	06012001 	streq	r2, [r1], -r1
    41f8:	200016cc 	andcs	r1, r0, ip, asr #13
    41fc:	000000f8 	strdeq	r0, [r0], -r8
    4200:	1e039c01 	cdpne	12, 0, cr9, cr3, cr1, {0}
    4204:	b1120000 	tstlt	r2, r0
    4208:	0100001b 	tsteq	r0, fp, lsl r0
    420c:	85240120 	strhi	r0, [r4, #-288]!	; 0xfffffee0
    4210:	02000005 	andeq	r0, r0, #5
    4214:	89126c91 	ldmdbhi	r2, {r0, r4, r7, sl, fp, sp, lr}
    4218:	0100001d 	tsteq	r0, sp, lsl r0
    421c:	b5430120 	strblt	r0, [r3, #-288]	; 0xfffffee0
    4220:	0200001d 	andeq	r0, r0, #29
    4224:	3d136891 	ldccc	8, cr6, [r3, #-580]	; 0xfffffdbc
    4228:	01000018 	tsteq	r0, r8, lsl r0
    422c:	a70c0122 	strge	r0, [ip, -r2, lsr #2]
    4230:	02000000 	andeq	r0, r0, #0
    4234:	19007691 	stmdbne	r0, {r0, r4, r7, r9, sl, ip, sp, lr}
    4238:	000021a4 	andeq	r2, r0, r4, lsr #3
    423c:	fc06c801 	stc2	8, cr12, [r6], {1}
    4240:	d0200014 	eorle	r0, r0, r4, lsl r0
    4244:	01000001 	tsteq	r0, r1
    4248:	1bb11a9c 	blne	fec4acc0 <a+0xdec46d2c>
    424c:	c8010000 	stmdagt	r1, {}	; <UNPREDICTABLE>
    4250:	0005851e 	andeq	r8, r5, lr, lsl r5
    4254:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    4258:	067b0000 	ldrbteq	r0, [fp], -r0
    425c:	00040000 	andeq	r0, r4, r0
    4260:	00000a09 	andeq	r0, r0, r9, lsl #20
    4264:	00ff0104 	rscseq	r0, pc, r4, lsl #2
    4268:	1f0c0000 	svcne	0x000c0000
    426c:	22000022 	andcs	r0, r0, #34	; 0x22
    4270:	d4000003 	strle	r0, [r0], #-3
    4274:	0a200036 	beq	804354 <startup-0x1f7fbcac>
    4278:	37000005 	strcc	r0, [r0, -r5]
    427c:	0200001e 	andeq	r0, r0, #30
    4280:	00f30601 	rscseq	r0, r3, r1, lsl #12
    4284:	dc030000 	stcle	0, cr0, [r3], {-0}
    4288:	02000000 	andeq	r0, r0, #0
    428c:	0038182b 	eorseq	r1, r8, fp, lsr #16
    4290:	01020000 	mrseq	r0, (UNDEF: 2)
    4294:	0000f108 	andeq	pc, r0, r8, lsl #2
    4298:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    429c:	00000064 	andeq	r0, r0, r4, rrx
    42a0:	0008e003 	andeq	lr, r8, r3
    42a4:	19390200 	ldmdbne	r9!, {r9}
    42a8:	00000052 	andeq	r0, r0, r2, asr r0
    42ac:	01070202 	tsteq	r7, r2, lsl #4
    42b0:	03000002 	movweq	r0, #2
    42b4:	000002e7 	andeq	r0, r0, r7, ror #5
    42b8:	65184d02 	ldrvs	r4, [r8, #-3330]	; 0xfffff2fe
    42bc:	02000000 	andeq	r0, r0, #0
    42c0:	00c70504 	sbceq	r0, r7, r4, lsl #10
    42c4:	7f030000 	svcvc	0x00030000
    42c8:	02000000 	andeq	r0, r0, #0
    42cc:	0078194f 	rsbseq	r1, r8, pc, asr #18
    42d0:	04020000 	streq	r0, [r2], #-0
    42d4:	00019e07 	andeq	r9, r1, r7, lsl #28
    42d8:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    42dc:	000000c2 	andeq	r0, r0, r2, asr #1
    42e0:	99070802 	stmdbls	r7, {r1, fp}
    42e4:	04000001 	streq	r0, [r0], #-1
    42e8:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    42ec:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    42f0:	0001a307 	andeq	sl, r1, r7, lsl #6
    42f4:	00de0300 	sbcseq	r0, lr, r0, lsl #6
    42f8:	18030000 	stmdane	r3, {}	; <UNPREDICTABLE>
    42fc:	00002c13 	andeq	r2, r0, r3, lsl ip
    4300:	08e20300 	stmiaeq	r2!, {r8, r9}^
    4304:	24030000 	strcs	r0, [r3], #-0
    4308:	00004614 	andeq	r4, r0, r4, lsl r6
    430c:	00a70500 	adceq	r0, r7, r0, lsl #10
    4310:	e9030000 	stmdb	r3, {}	; <UNPREDICTABLE>
    4314:	03000002 	movweq	r0, #2
    4318:	0059132c 	subseq	r1, r9, ip, lsr #6
    431c:	b8050000 	stmdalt	r5, {}	; <UNPREDICTABLE>
    4320:	03000000 	movweq	r0, #0
    4324:	00000081 	andeq	r0, r0, r1, lsl #1
    4328:	6c143003 	ldcvs	0, cr3, [r4], {3}
    432c:	05000000 	streq	r0, [r0, #-0]
    4330:	000000c9 	andeq	r0, r0, r9, asr #1
    4334:	00031506 	andeq	r1, r3, r6, lsl #10
    4338:	06fa0400 	ldrbteq	r0, [sl], r0, lsl #8
    433c:	0000c419 	andeq	ip, r0, r9, lsl r4
    4340:	025f0700 	subseq	r0, pc, #0, 14
    4344:	3b050000 	blcc	14434c <startup-0x1febbcb4>
    4348:	0000c911 	andeq	ip, r0, r1, lsl r9
    434c:	01070800 	tsteq	r7, r0, lsl #16
    4350:	00000038 	andeq	r0, r0, r8, lsr r0
    4354:	0e035f06 	cdpeq	15, 0, cr5, cr3, cr6, {0}
    4358:	0000010f 	andeq	r0, r0, pc, lsl #2
    435c:	0000ac09 	andeq	sl, r0, r9, lsl #24
    4360:	c3090000 	movwgt	r0, #36864	; 0x9000
    4364:	01000003 	tsteq	r0, r3
    4368:	06280a00 	strteq	r0, [r8], -r0, lsl #20
    436c:	a60905c3 	strge	r0, [r9], -r3, asr #11
    4370:	0b000001 	bleq	437c <startup-0x1fffbc84>
    4374:	00000be6 	andeq	r0, r0, r6, ror #23
    4378:	1105c506 	tstne	r5, r6, lsl #10
    437c:	000000d5 	ldrdeq	r0, [r0], -r5
    4380:	06eb0b00 	strbteq	r0, [fp], r0, lsl #22
    4384:	c6060000 	strgt	r0, [r6], -r0
    4388:	00d51105 	sbcseq	r1, r5, r5, lsl #2
    438c:	0b040000 	bleq	104394 <startup-0x1fefbc6c>
    4390:	000008eb 	andeq	r0, r0, fp, ror #17
    4394:	1105c706 	tstne	r5, r6, lsl #14
    4398:	000000d5 	ldrdeq	r0, [r0], -r5
    439c:	066c0b08 	strbteq	r0, [ip], -r8, lsl #22
    43a0:	c8060000 	stmdagt	r6, {}	; <UNPREDICTABLE>
    43a4:	00d51105 	sbcseq	r1, r5, r5, lsl #2
    43a8:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    43ac:	00524449 	subseq	r4, r2, r9, asr #8
    43b0:	1105c906 	tstne	r5, r6, lsl #18
    43b4:	000000d5 	ldrdeq	r0, [r0], -r5
    43b8:	444f0c10 	strbmi	r0, [pc], #-3088	; 43c0 <startup-0x1fffbc40>
    43bc:	ca060052 	bgt	18450c <startup-0x1fe7baf4>
    43c0:	00d51105 	sbcseq	r1, r5, r5, lsl #2
    43c4:	0b140000 	bleq	5043cc <startup-0x1fafbc34>
    43c8:	00000e3d 	andeq	r0, r0, sp, lsr lr
    43cc:	1105cb06 	tstne	r5, r6, lsl #22
    43d0:	000000b3 	strheq	r0, [r0], -r3
    43d4:	0e430b18 	vmoveq.8	d3[0], r0
    43d8:	cc060000 	stcgt	0, cr0, [r6], {-0}
    43dc:	00b31105 	adcseq	r1, r3, r5, lsl #2
    43e0:	0b1a0000 	bleq	6843e8 <startup-0x1f97bc18>
    43e4:	000009aa 	andeq	r0, r0, sl, lsr #19
    43e8:	1105cd06 	tstne	r5, r6, lsl #26
    43ec:	000000d5 	ldrdeq	r0, [r0], -r5
    43f0:	46410c1c 			; <UNDEFINED> instruction: 0x46410c1c
    43f4:	ce060052 	mcrgt	0, 0, r0, cr6, cr2, {2}
    43f8:	01b61105 			; <UNDEFINED> instruction: 0x01b61105
    43fc:	00200000 	eoreq	r0, r0, r0
    4400:	0000d50d 	andeq	sp, r0, sp, lsl #10
    4404:	0001b600 	andeq	fp, r1, r0, lsl #12
    4408:	00940e00 	addseq	r0, r4, r0, lsl #28
    440c:	00010000 	andeq	r0, r1, r0
    4410:	0001a605 	andeq	sl, r1, r5, lsl #12
    4414:	099d0f00 	ldmibeq	sp, {r8, r9, sl, fp}
    4418:	cf060000 	svcgt	0x00060000
    441c:	010f0305 	tsteq	pc, r5, lsl #6
    4420:	07100000 	ldreq	r0, [r0, -r0]
    4424:	00003801 	andeq	r3, r0, r1, lsl #16
    4428:	01420700 	cmpeq	r2, r0, lsl #14
    442c:	000001ef 	andeq	r0, r0, pc, ror #3
    4430:	0007e709 	andeq	lr, r7, r9, lsl #14
    4434:	5d090000 	stcpl	0, cr0, [r9, #-0]
    4438:	0100000d 	tsteq	r0, sp
    443c:	00072309 	andeq	r2, r7, r9, lsl #6
    4440:	68090200 	stmdavs	r9, {r9}
    4444:	03000007 	movweq	r0, #7
    4448:	0ee40300 	cdpeq	3, 14, cr0, cr4, cr0, {0}
    444c:	47070000 	strmi	r0, [r7, -r0]
    4450:	0001c802 	andeq	ip, r1, r2, lsl #16
    4454:	01071000 	mrseq	r1, (UNDEF: 7)
    4458:	00000038 	andeq	r0, r0, r8, lsr r0
    445c:	16014f07 	strne	r4, [r1], -r7, lsl #30
    4460:	09000002 	stmdbeq	r0, {r1}
    4464:	00000710 	andeq	r0, r0, r0, lsl r7
    4468:	0e160900 	vnmlseq.f16	s0, s12, s0	; <UNPREDICTABLE>
    446c:	00010000 	andeq	r0, r1, r0
    4470:	0007ab03 	andeq	sl, r7, r3, lsl #22
    4474:	02520700 	subseq	r0, r2, #0, 14
    4478:	000001fb 	strdeq	r0, [r0], -fp
    447c:	38010710 	stmdacc	r1, {r4, r8, r9, sl}
    4480:	07000000 	streq	r0, [r0, -r0]
    4484:	0249015a 	subeq	r0, r9, #-2147483626	; 0x80000016
    4488:	44090000 	strmi	r0, [r9], #-0
    448c:	0000000b 	andeq	r0, r0, fp
    4490:	00090109 	andeq	r0, r9, r9, lsl #2
    4494:	8f090100 	svchi	0x00090100
    4498:	0200000c 	andeq	r0, r0, #12
    449c:	000f2209 	andeq	r2, pc, r9, lsl #4
    44a0:	03000300 	movweq	r0, #768	; 0x300
    44a4:	00000948 	andeq	r0, r0, r8, asr #18
    44a8:	22025f07 	andcs	r5, r2, #7, 30
    44ac:	10000002 	andne	r0, r0, r2
    44b0:	00380107 	eorseq	r0, r8, r7, lsl #2
    44b4:	6e070000 	cdpvs	0, 0, cr0, cr7, cr0, {0}
    44b8:	00027601 	andeq	r7, r2, r1, lsl #12
    44bc:	0a9e0900 	beq	fe7868c4 <a+0xde782930>
    44c0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    44c4:	00000eb7 			; <UNDEFINED> instruction: 0x00000eb7
    44c8:	0e490901 	vmlaeq.f16	s1, s18, s2	; <UNPREDICTABLE>
    44cc:	00020000 	andeq	r0, r2, r0
    44d0:	000a2703 	andeq	r2, sl, r3, lsl #14
    44d4:	02720700 	rsbseq	r0, r2, #0, 14
    44d8:	00000255 	andeq	r0, r0, r5, asr r2
    44dc:	38010710 	stmdacc	r1, {r4, r8, r9, sl}
    44e0:	07000000 	streq	r0, [r0, -r0]
    44e4:	029d017a 	addseq	r0, sp, #-2147483618	; 0x8000001e
    44e8:	ae090000 	cdpge	0, 0, cr0, cr9, cr0, {0}
    44ec:	00000022 	andeq	r0, r0, r2, lsr #32
    44f0:	00220309 	eoreq	r0, r2, r9, lsl #6
    44f4:	03000100 	movweq	r0, #256	; 0x100
    44f8:	0000235b 	andeq	r2, r0, fp, asr r3
    44fc:	82027d07 	andhi	r7, r2, #448	; 0x1c0
    4500:	11000002 	tstne	r0, r2
    4504:	09840708 	stmibeq	r4, {r3, r8, r9, sl}
    4508:	000002f4 	strdeq	r0, [r0], -r4
    450c:	00095a12 	andeq	r5, r9, r2, lsl sl
    4510:	0c860700 	stceq	7, cr0, [r6], {0}
    4514:	000000c9 	andeq	r0, r0, r9, asr #1
    4518:	0bdc1200 	bleq	ff708d20 <a+0xdf704d8c>
    451c:	89070000 	stmdbhi	r7, {}	; <UNPREDICTABLE>
    4520:	0001ef14 	andeq	lr, r1, r4, lsl pc
    4524:	50120400 	andspl	r0, r2, r0, lsl #8
    4528:	07000007 	streq	r0, [r0, -r7]
    452c:	0249158c 	subeq	r1, r9, #140, 10	; 0x23000000
    4530:	12050000 	andne	r0, r5, #0
    4534:	00000ada 	ldrdeq	r0, [r0], -sl
    4538:	16158f07 	ldrne	r8, [r5], -r7, lsl #30
    453c:	06000002 	streq	r0, [r0], -r2
    4540:	000e8b12 	andeq	r8, lr, r2, lsl fp
    4544:	14920700 	ldrne	r0, [r2], #1792	; 0x700
    4548:	00000276 	andeq	r0, r0, r6, ror r2
    454c:	cb030007 	blgt	c4570 <startup-0x1ff3ba90>
    4550:	0700000b 	streq	r0, [r0, -fp]
    4554:	02a90294 	adceq	r0, r9, #148, 4	; 0x40000009
    4558:	92130000 	andsls	r0, r3, #0
    455c:	01000023 	tsteq	r0, r3, lsr #32
    4560:	3a060243 	bcc	184e74 <startup-0x1fe7b18c>
    4564:	a420003b 	strtge	r0, [r0], #-59	; 0xffffffc5
    4568:	01000000 	mrseq	r0, (UNDEF: 0)
    456c:	0003689c 	muleq	r3, ip, r8
    4570:	24131400 	ldrcs	r1, [r3], #-1024	; 0xfffffc00
    4574:	43010000 	movwmi	r0, #4096	; 0x1000
    4578:	03682502 	cmneq	r8, #8388608	; 0x800000
    457c:	91020000 	mrsls	r0, (UNDEF: 2)
    4580:	2326146c 			; <UNDEFINED> instruction: 0x2326146c
    4584:	43010000 	movwmi	r0, #4096	; 0x1000
    4588:	00a73502 	adceq	r3, r7, r2, lsl #10
    458c:	91020000 	mrsls	r0, (UNDEF: 2)
    4590:	228a146a 	addcs	r1, sl, #1778384896	; 0x6a000000
    4594:	43010000 	movwmi	r0, #4096	; 0x1000
    4598:	009b4d02 	addseq	r4, fp, r2, lsl #26
    459c:	91020000 	mrsls	r0, (UNDEF: 2)
    45a0:	22921569 	addscs	r1, r2, #440401920	; 0x1a400000
    45a4:	45010000 	strmi	r0, [r1, #-0]
    45a8:	00c90c02 	sbceq	r0, r9, r2, lsl #24
    45ac:	91020000 	mrsls	r0, (UNDEF: 2)
    45b0:	238b1574 	orrcs	r1, fp, #116, 10	; 0x1d000000
    45b4:	46010000 	strmi	r0, [r1], -r0
    45b8:	00c90c02 	sbceq	r0, r9, r2, lsl #24
    45bc:	91020000 	mrsls	r0, (UNDEF: 2)
    45c0:	04160070 	ldreq	r0, [r6], #-112	; 0xffffff90
    45c4:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
    45c8:	00237b13 	eoreq	r7, r3, r3, lsl fp
    45cc:	01f00100 	mvnseq	r0, r0, lsl #2
    45d0:	003b1606 	eorseq	r1, fp, r6, lsl #12
    45d4:	00002420 	andeq	r2, r0, r0, lsr #8
    45d8:	a69c0100 	ldrge	r0, [ip], r0, lsl #2
    45dc:	14000003 	strne	r0, [r0], #-3
    45e0:	00002413 	andeq	r2, r0, r3, lsl r4
    45e4:	2401f001 	strcs	pc, [r1], #-1
    45e8:	00000368 	andeq	r0, r0, r8, ror #6
    45ec:	14749102 	ldrbtne	r9, [r4], #-258	; 0xfffffefe
    45f0:	0000095a 	andeq	r0, r0, sl, asr r9
    45f4:	3401f001 	strcc	pc, [r1], #-1
    45f8:	000000a7 	andeq	r0, r0, r7, lsr #1
    45fc:	00729102 	rsbseq	r9, r2, r2, lsl #2
    4600:	00237013 	eoreq	r7, r3, r3, lsl r0
    4604:	01e00100 	mvneq	r0, r0, lsl #2
    4608:	003af806 	eorseq	pc, sl, r6, lsl #16
    460c:	00001e20 	andeq	r1, r0, r0, lsr #28
    4610:	de9c0100 	fmllee	f0, f4, f0
    4614:	14000003 	strne	r0, [r0], #-3
    4618:	00002413 	andeq	r2, r0, r3, lsl r4
    461c:	1f01e001 	svcne	0x0001e001
    4620:	00000368 	andeq	r0, r0, r8, ror #6
    4624:	14749102 	ldrbtne	r9, [r4], #-258	; 0xfffffefe
    4628:	0000231e 	andeq	r2, r0, lr, lsl r3
    462c:	2f01e001 	svccs	0x0001e001
    4630:	000000a7 	andeq	r0, r0, r7, lsr #1
    4634:	00729102 	rsbseq	r9, r2, r2, lsl #2
    4638:	0022b813 	eoreq	fp, r2, r3, lsl r8
    463c:	01c70100 	biceq	r0, r7, r0, lsl #2
    4640:	003abe06 	eorseq	fp, sl, r6, lsl #28
    4644:	00003a20 	andeq	r3, r0, r0, lsr #20
    4648:	269c0100 	ldrcs	r0, [ip], r0, lsl #2
    464c:	14000004 	strne	r0, [r0], #-4
    4650:	00002413 	andeq	r2, r0, r3, lsl r4
    4654:	2201c701 	andcs	ip, r1, #262144	; 0x40000
    4658:	00000368 	andeq	r0, r0, r8, ror #6
    465c:	14749102 	ldrbtne	r9, [r4], #-258	; 0xfffffefe
    4660:	0000095a 	andeq	r0, r0, sl, asr r9
    4664:	3201c701 	andcc	ip, r1, #262144	; 0x40000
    4668:	000000a7 	andeq	r0, r0, r7, lsr #1
    466c:	14729102 	ldrbtne	r9, [r2], #-258	; 0xfffffefe
    4670:	000022a7 	andeq	r2, r0, r7, lsr #5
    4674:	4601c701 	strmi	ip, [r1], -r1, lsl #14
    4678:	0000029d 	muleq	r0, sp, r2
    467c:	00719102 	rsbseq	r9, r1, r2, lsl #2
    4680:	0022dd13 	eoreq	sp, r2, r3, lsl sp
    4684:	01b10100 			; <UNDEFINED> instruction: 0x01b10100
    4688:	003aa006 	eorseq	sl, sl, r6
    468c:	00001e20 	andeq	r1, r0, r0, lsr #28
    4690:	5e9c0100 	fmlple	f0, f4, f0
    4694:	14000004 	strne	r0, [r0], #-4
    4698:	00002413 	andeq	r2, r0, r3, lsl r4
    469c:	2301b101 	movwcs	fp, #4353	; 0x1101
    46a0:	00000368 	andeq	r0, r0, r8, ror #6
    46a4:	14749102 	ldrbtne	r9, [r4], #-258	; 0xfffffefe
    46a8:	0000095a 	andeq	r0, r0, sl, asr r9
    46ac:	3301b101 	movwcc	fp, #4353	; 0x1101
    46b0:	000000a7 	andeq	r0, r0, r7, lsr #1
    46b4:	00729102 	rsbseq	r9, r2, r2, lsl #2
    46b8:	0022c613 	eoreq	ip, r2, r3, lsl r6
    46bc:	019c0100 	orrseq	r0, ip, r0, lsl #2
    46c0:	003a8206 	eorseq	r8, sl, r6, lsl #4
    46c4:	00001e20 	andeq	r1, r0, r0, lsr #28
    46c8:	969c0100 	ldrls	r0, [ip], r0, lsl #2
    46cc:	14000004 	strne	r0, [r0], #-4
    46d0:	00002413 	andeq	r2, r0, r3, lsl r4
    46d4:	21019c01 	tstcs	r1, r1, lsl #24
    46d8:	00000368 	andeq	r0, r0, r8, ror #6
    46dc:	14749102 	ldrbtne	r9, [r4], #-258	; 0xfffffefe
    46e0:	0000095a 	andeq	r0, r0, sl, asr r9
    46e4:	31019c01 	tstcc	r1, r1, lsl #24
    46e8:	000000a7 	andeq	r0, r0, r7, lsr #1
    46ec:	00729102 	rsbseq	r9, r2, r2, lsl #2
    46f0:	00220b17 	eoreq	r0, r2, r7, lsl fp
    46f4:	01880100 	orreq	r0, r8, r0, lsl #2
    46f8:	0000a70a 	andeq	sl, r0, sl, lsl #14
    46fc:	003a6c00 	eorseq	r6, sl, r0, lsl #24
    4700:	00001620 	andeq	r1, r0, r0, lsr #12
    4704:	c29c0100 	addsgt	r0, ip, #0, 2
    4708:	14000004 	strne	r0, [r0], #-4
    470c:	00002413 	andeq	r2, r0, r3, lsl r4
    4710:	2c018801 	stccs	8, cr8, [r1], {1}
    4714:	00000368 	andeq	r0, r0, r8, ror #6
    4718:	00749102 	rsbseq	r9, r4, r2, lsl #2
    471c:	0023a317 	eoreq	sl, r3, r7, lsl r3
    4720:	016e0100 	cmneq	lr, r0, lsl #2
    4724:	00009b09 	andeq	r9, r0, r9, lsl #22
    4728:	003a2c00 	eorseq	r2, sl, r0, lsl #24
    472c:	00004020 	andeq	r4, r0, r0, lsr #32
    4730:	0e9c0100 	fmleqe	f0, f4, f0
    4734:	14000005 	strne	r0, [r0], #-5
    4738:	00002413 	andeq	r2, r0, r3, lsl r4
    473c:	2e016e01 	cdpcs	14, 0, cr6, cr1, cr1, {0}
    4740:	00000368 	andeq	r0, r0, r8, ror #6
    4744:	146c9102 	strbtne	r9, [ip], #-258	; 0xfffffefe
    4748:	0000095a 	andeq	r0, r0, sl, asr r9
    474c:	3e016e01 	cdpcc	14, 0, cr6, cr1, cr1, {0}
    4750:	000000a7 	andeq	r0, r0, r7, lsr #1
    4754:	156a9102 	strbne	r9, [sl, #-258]!	; 0xfffffefe
    4758:	0000048c 	andeq	r0, r0, ip, lsl #9
    475c:	0b017001 	bleq	60768 <startup-0x1ff9f898>
    4760:	0000009b 	muleq	r0, fp, r0
    4764:	00779102 	rsbseq	r9, r7, r2, lsl #2
    4768:	00233517 	eoreq	r3, r3, r7, lsl r5
    476c:	015d0100 	cmpeq	sp, r0, lsl #2
    4770:	0000a70a 	andeq	sl, r0, sl, lsl #14
    4774:	003a1600 	eorseq	r1, sl, r0, lsl #12
    4778:	00001620 	andeq	r1, r0, r0, lsr #12
    477c:	3a9c0100 	bcc	fe704b84 <a+0xde700bf0>
    4780:	14000005 	strne	r0, [r0], #-5
    4784:	00002413 	andeq	r2, r0, r3, lsl r4
    4788:	2b015d01 	blcs	5bb94 <startup-0x1ffa446c>
    478c:	00000368 	andeq	r0, r0, r8, ror #6
    4790:	00749102 	rsbseq	r9, r4, r2, lsl #2
    4794:	0022f817 	eoreq	pc, r2, r7, lsl r8	; <UNPREDICTABLE>
    4798:	01430100 	mrseq	r0, (UNDEF: 83)
    479c:	00009b09 	andeq	r9, r0, r9, lsl #22
    47a0:	0039d600 	eorseq	sp, r9, r0, lsl #12
    47a4:	00004020 	andeq	r4, r0, r0, lsr #32
    47a8:	869c0100 	ldrhi	r0, [ip], r0, lsl #2
    47ac:	14000005 	strne	r0, [r0], #-5
    47b0:	00002413 	andeq	r2, r0, r3, lsl r4
    47b4:	2d014301 	stccs	3, cr4, [r1, #-4]
    47b8:	00000368 	andeq	r0, r0, r8, ror #6
    47bc:	146c9102 	strbtne	r9, [ip], #-258	; 0xfffffefe
    47c0:	0000095a 	andeq	r0, r0, sl, asr r9
    47c4:	3d014301 	stccc	3, cr4, [r1, #-4]
    47c8:	000000a7 	andeq	r0, r0, r7, lsr #1
    47cc:	156a9102 	strbne	r9, [sl, #-258]!	; 0xfffffefe
    47d0:	0000048c 	andeq	r0, r0, ip, lsl #9
    47d4:	0b014501 	bleq	55be0 <startup-0x1ffaa420>
    47d8:	0000009b 	muleq	r0, fp, r0
    47dc:	00779102 	rsbseq	r9, r7, r2, lsl #2
    47e0:	00234813 	eoreq	r4, r3, r3, lsl r8
    47e4:	01150100 	tsteq	r5, r0, lsl #2
    47e8:	00399006 	eorseq	r9, r9, r6
    47ec:	00004620 	andeq	r4, r0, r0, lsr #12
    47f0:	ce9c0100 	fmlgte	f0, f4, f0
    47f4:	14000005 	strne	r0, [r0], #-5
    47f8:	00002413 	andeq	r2, r0, r3, lsl r4
    47fc:	27011501 	strcs	r1, [r1, -r1, lsl #10]
    4800:	00000368 	andeq	r0, r0, r8, ror #6
    4804:	146c9102 	strbtne	r9, [ip], #-258	; 0xfffffefe
    4808:	0000095a 	andeq	r0, r0, sl, asr r9
    480c:	37011501 	strcc	r1, [r1, -r1, lsl #10]
    4810:	000000a7 	andeq	r0, r0, r7, lsr #1
    4814:	186a9102 	stmdane	sl!, {r1, r8, ip, pc}^
    4818:	00706d74 	rsbseq	r6, r0, r4, ror sp
    481c:	11011701 	tstne	r1, r1, lsl #14
    4820:	000000d5 	ldrdeq	r0, [r0], -r5
    4824:	00749102 	rsbseq	r9, r4, r2, lsl #2
    4828:	00229719 	eoreq	r9, r2, r9, lsl r7
    482c:	06fe0100 	ldrbteq	r0, [lr], r0, lsl #2
    4830:	2000395e 	andcs	r3, r0, lr, asr r9
    4834:	00000032 	andeq	r0, r0, r2, lsr r0
    4838:	05f49c01 	ldrbeq	r9, [r4, #3073]!	; 0xc01
    483c:	0e1a0000 	cdpeq	0, 1, cr0, cr10, cr0, {0}
    4840:	01000023 	tsteq	r0, r3, lsr #32
    4844:	05f428fe 	ldrbeq	r2, [r4, #2302]!	; 0x8fe
    4848:	91020000 	mrsls	r0, (UNDEF: 2)
    484c:	04160074 	ldreq	r0, [r6], #-116	; 0xffffff8c
    4850:	000002f4 	strdeq	r0, [r0], -r4
    4854:	0022d319 	eoreq	sp, r2, r9, lsl r3
    4858:	06ca0100 	strbeq	r0, [sl], r0, lsl #2
    485c:	20003844 	andcs	r3, r0, r4, asr #16
    4860:	0000011a 	andeq	r0, r0, sl, lsl r1
    4864:	065c9c01 	ldrbeq	r9, [ip], -r1, lsl #24
    4868:	131a0000 	tstne	sl, #0
    486c:	01000024 	tsteq	r0, r4, lsr #32
    4870:	03681eca 	cmneq	r8, #3232	; 0xca0
    4874:	91020000 	mrsls	r0, (UNDEF: 2)
    4878:	230e1a64 	movwcs	r1, #60004	; 0xea64
    487c:	ca010000 	bgt	44884 <startup-0x1ffbb77c>
    4880:	0005f437 	andeq	pc, r5, r7, lsr r4	; <UNPREDICTABLE>
    4884:	60910200 	addsvs	r0, r1, r0, lsl #4
    4888:	0021fc1b 	eoreq	pc, r1, fp, lsl ip	; <UNPREDICTABLE>
    488c:	0ccc0100 	stfeqe	f0, [ip], {0}
    4890:	000000c9 	andeq	r0, r0, r9, asr #1
    4894:	1c749102 	ldfnep	f1, [r4], #-8
    4898:	00736f70 	rsbseq	r6, r3, r0, ror pc
    489c:	c91bcc01 	ldmdbgt	fp, {r0, sl, fp, lr, pc}
    48a0:	02000000 	andeq	r0, r0, #0
    48a4:	651b7091 	ldrvs	r7, [fp, #-145]	; 0xffffff6f
    48a8:	01000023 	tsteq	r0, r3, lsr #32
    48ac:	00c928cc 	sbceq	r2, r9, ip, asr #17
    48b0:	91020000 	mrsls	r0, (UNDEF: 2)
    48b4:	ec1d006c 	ldc	0, cr0, [sp], {108}	; 0x6c
    48b8:	01000022 	tsteq	r0, r2, lsr #32
    48bc:	36d4067f 			; <UNDEFINED> instruction: 0x36d4067f
    48c0:	01702000 	cmneq	r0, r0
    48c4:	9c010000 	stcls	0, cr0, [r1], {-0}
    48c8:	0024131a 	eoreq	r1, r4, sl, lsl r3
    48cc:	207f0100 	rsbscs	r0, pc, r0, lsl #2
    48d0:	00000368 	andeq	r0, r0, r8, ror #6
    48d4:	00749102 	rsbseq	r9, r4, r2, lsl #2
    48d8:	0002c000 	andeq	ip, r2, r0
    48dc:	ef000400 	svc	0x00000400
    48e0:	0400000b 	streq	r0, [r0], #-11
    48e4:	0000ff01 	andeq	pc, r0, r1, lsl #30
    48e8:	24190c00 	ldrcs	r0, [r9], #-3072	; 0xfffff400
    48ec:	03220000 			; <UNDEFINED> instruction: 0x03220000
    48f0:	3be00000 	blcc	ff8048f8 <a+0xdf800964>
    48f4:	01682000 	cmneq	r8, r0
    48f8:	229f0000 	addscs	r0, pc, #0
    48fc:	01020000 	mrseq	r0, (UNDEF: 2)
    4900:	0000f306 	andeq	pc, r0, r6, lsl #6
    4904:	00dc0300 	sbcseq	r0, ip, r0, lsl #6
    4908:	2b020000 	blcs	84910 <startup-0x1ff7b6f0>
    490c:	00003818 	andeq	r3, r0, r8, lsl r8
    4910:	08010200 	stmdaeq	r1, {r9}
    4914:	000000f1 	strdeq	r0, [r0], -r1
    4918:	64050202 	strvs	r0, [r5], #-514	; 0xfffffdfe
    491c:	02000000 	andeq	r0, r0, #0
    4920:	02010702 	andeq	r0, r1, #524288	; 0x80000
    4924:	e7030000 	str	r0, [r3, -r0]
    4928:	02000002 	andeq	r0, r0, #2
    492c:	0059184d 	subseq	r1, r9, sp, asr #16
    4930:	04020000 	streq	r0, [r2], #-0
    4934:	0000c705 	andeq	ip, r0, r5, lsl #14
    4938:	007f0300 	rsbseq	r0, pc, r0, lsl #6
    493c:	4f020000 	svcmi	0x00020000
    4940:	00006c19 	andeq	r6, r0, r9, lsl ip
    4944:	07040200 	streq	r0, [r4, -r0, lsl #4]
    4948:	0000019e 	muleq	r0, lr, r1
    494c:	c2050802 	andgt	r0, r5, #131072	; 0x20000
    4950:	02000000 	andeq	r0, r0, #0
    4954:	01990708 	orrseq	r0, r9, r8, lsl #14
    4958:	04040000 	streq	r0, [r4], #-0
    495c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    4960:	07040200 	streq	r0, [r4, -r0, lsl #4]
    4964:	000001a3 	andeq	r0, r0, r3, lsr #3
    4968:	0000de03 	andeq	sp, r0, r3, lsl #28
    496c:	13180300 	tstne	r8, #0, 6
    4970:	0000002c 	andeq	r0, r0, ip, lsr #32
    4974:	0002e903 	andeq	lr, r2, r3, lsl #18
    4978:	132c0300 			; <UNDEFINED> instruction: 0x132c0300
    497c:	0000004d 	andeq	r0, r0, sp, asr #32
    4980:	00009b05 	andeq	r9, r0, r5, lsl #22
    4984:	00810300 	addeq	r0, r1, r0, lsl #6
    4988:	30030000 	andcc	r0, r3, r0
    498c:	00006014 	andeq	r6, r0, r4, lsl r0
    4990:	00ac0500 	adceq	r0, ip, r0, lsl #10
    4994:	ac060000 	stcge	0, cr0, [r6], {-0}
    4998:	cd000000 	stcgt	0, cr0, [r0, #-0]
    499c:	07000000 	streq	r0, [r0, -r0]
    49a0:	00000088 	andeq	r0, r0, r8, lsl #1
    49a4:	15080001 	strne	r0, [r8, #-1]
    49a8:	04000003 	streq	r0, [r0], #-3
    49ac:	a71906fa 			; <UNDEFINED> instruction: 0xa71906fa
    49b0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    49b4:	0000025f 	andeq	r0, r0, pc, asr r2
    49b8:	ac113b05 			; <UNDEFINED> instruction: 0xac113b05
    49bc:	0a000000 	beq	49c4 <startup-0x1fffb63c>
    49c0:	00380107 	eorseq	r0, r8, r7, lsl #2
    49c4:	5d060000 	stcpl	0, cr0, [r6, #-0]
    49c8:	01020e03 	tsteq	r2, r3, lsl #28
    49cc:	b20b0000 	andlt	r0, fp, #0
    49d0:	00000022 	andeq	r0, r0, r2, lsr #32
    49d4:	5445530c 	strbpl	r5, [r5], #-780	; 0xfffffcf4
    49d8:	0d000100 	stfeqs	f0, [r0, #-0]
    49dc:	000013fb 	strdeq	r1, [r0], -fp
    49e0:	28035d06 	stmdacs	r3, {r1, r2, r8, sl, fp, ip, lr}
    49e4:	000000e6 	andeq	r0, r0, r6, ror #1
    49e8:	3801070a 	stmdacc	r1, {r1, r3, r8, r9, sl}
    49ec:	06000000 	streq	r0, [r0], -r0
    49f0:	2b0e035f 	blcs	385774 <startup-0x1fc7a88c>
    49f4:	0b000001 	bleq	4a00 <startup-0x1fffb600>
    49f8:	000000ac 	andeq	r0, r0, ip, lsr #1
    49fc:	03c30b00 	biceq	r0, r3, #0, 22
    4a00:	00010000 	andeq	r0, r1, r0
    4a04:	0002d70d 	andeq	sp, r2, sp, lsl #14
    4a08:	035f0600 	cmpeq	pc, #0, 12
    4a0c:	00010f2f 	andeq	r0, r1, pc, lsr #30
    4a10:	06240e00 	strteq	r0, [r4], -r0, lsl #28
    4a14:	890905d5 	stmdbhi	r9, {r0, r2, r4, r6, r7, r8, sl}
    4a18:	0f000001 	svceq	0x00000001
    4a1c:	000024a2 	andeq	r2, r0, r2, lsr #9
    4a20:	1105d706 	tstne	r5, r6, lsl #14
    4a24:	000000b8 	strheq	r0, [r0], -r8
    4a28:	4d501000 	ldclmi	0, cr1, [r0, #-0]
    4a2c:	d8060043 	stmdale	r6, {r0, r1, r6}
    4a30:	00b81105 	adcseq	r1, r8, r5, lsl #2
    4a34:	0f040000 	svceq	0x00040000
    4a38:	000024e6 	andeq	r2, r0, r6, ror #9
    4a3c:	1105d906 	tstne	r5, r6, lsl #18
    4a40:	00000199 	muleq	r0, r9, r1
    4a44:	24c30f08 	strbcs	r0, [r3], #3848	; 0xf08
    4a48:	e1060000 	mrs	r0, (UNDEF: 6)
    4a4c:	00bd1105 	adcseq	r1, sp, r5, lsl #2
    4a50:	0f180000 	svceq	0x00180000
    4a54:	0000249c 	muleq	r0, ip, r4
    4a58:	1105e206 	tstne	r5, r6, lsl #4
    4a5c:	000000b8 	strheq	r0, [r0], -r8
    4a60:	b8060020 	stmdalt	r6, {r5}
    4a64:	99000000 	stmdbls	r0, {}	; <UNPREDICTABLE>
    4a68:	07000001 	streq	r0, [r0, -r1]
    4a6c:	00000088 	andeq	r0, r0, r8, lsl #1
    4a70:	89050003 	stmdbhi	r5, {r0, r1}
    4a74:	0d000001 	stceq	0, cr0, [r0, #-4]
    4a78:	00002530 	andeq	r2, r0, r0, lsr r5
    4a7c:	0305e706 	movweq	lr, #22278	; 0x5706
    4a80:	00000138 	andeq	r0, r0, r8, lsr r1
    4a84:	0023d511 	eoreq	sp, r3, r1, lsl r5
    4a88:	0cdb0100 	ldfeqe	f0, [fp], {0}
    4a8c:	00000102 	andeq	r0, r0, r2, lsl #2
    4a90:	20003d10 	andcs	r3, r0, r0, lsl sp
    4a94:	00000038 	andeq	r0, r0, r8, lsr r0
    4a98:	01d59c01 	bicseq	r9, r5, r1, lsl #24
    4a9c:	8c120000 	ldchi	0, cr0, [r2], {-0}
    4aa0:	01000004 	tsteq	r0, r4
    4aa4:	01020edd 	ldrdeq	r0, [r2, -sp]
    4aa8:	91020000 	mrsls	r0, (UNDEF: 2)
    4aac:	ba130077 	blt	4c4c90 <startup-0x1fb3b370>
    4ab0:	01000023 	tsteq	r0, r3, lsr #32
    4ab4:	3cf006ce 	ldclcc	6, cr0, [r0], #824	; 0x338
    4ab8:	00202000 	eoreq	r2, r0, r0
    4abc:	9c010000 	stcls	0, cr0, [r1], {-0}
    4ac0:	000001fb 	strdeq	r0, [r0], -fp
    4ac4:	00009e14 	andeq	r9, r0, r4, lsl lr
    4ac8:	31ce0100 	biccc	r0, lr, r0, lsl #2
    4acc:	0000012b 	andeq	r0, r0, fp, lsr #2
    4ad0:	00779102 	rsbseq	r9, r7, r2, lsl #2
    4ad4:	0024fd13 	eoreq	pc, r4, r3, lsl sp	; <UNPREDICTABLE>
    4ad8:	06bd0100 	ldrteq	r0, [sp], r0, lsl #2
    4adc:	20003cd4 	ldrdcs	r3, [r0], -r4
    4ae0:	0000001c 	andeq	r0, r0, ip, lsl r0
    4ae4:	02219c01 	eoreq	r9, r1, #256	; 0x100
    4ae8:	a9140000 	ldmdbge	r4, {}	; <UNPREDICTABLE>
    4aec:	01000024 	tsteq	r0, r4, lsr #32
    4af0:	00ac2fbd 	strhteq	r2, [ip], sp
    4af4:	91020000 	mrsls	r0, (UNDEF: 2)
    4af8:	86130074 			; <UNDEFINED> instruction: 0x86130074
    4afc:	01000024 	tsteq	r0, r4, lsr #32
    4b00:	3c4406a8 	mcrrcc	6, 10, r0, r4, cr8
    4b04:	00902000 	addseq	r2, r0, r0
    4b08:	9c010000 	stcls	0, cr0, [r1], {-0}
    4b0c:	00000265 	andeq	r0, r0, r5, ror #4
    4b10:	00240414 	eoreq	r0, r4, r4, lsl r4
    4b14:	24a80100 	strtcs	r0, [r8], #256	; 0x100
    4b18:	0000008f 	andeq	r0, r0, pc, lsl #1
    4b1c:	146f9102 	strbtne	r9, [pc], #-258	; 4b24 <startup-0x1fffb4dc>
    4b20:	000024ed 	andeq	r2, r0, sp, ror #9
    4b24:	8f42a801 	svchi	0x0042a801
    4b28:	02000000 	andeq	r0, r0, #0
    4b2c:	74156e91 	ldrvc	r6, [r5], #-3729	; 0xfffff16f
    4b30:	0100706d 	tsteq	r0, sp, rrx
    4b34:	00ac0caa 	adceq	r0, ip, sl, lsr #25
    4b38:	91020000 	mrsls	r0, (UNDEF: 2)
    4b3c:	cc130074 	ldcgt	0, cr0, [r3], {116}	; 0x74
    4b40:	01000024 	tsteq	r0, r4, lsr #32
    4b44:	3c240691 	stccc	6, cr0, [r4], #-580	; 0xfffffdbc
    4b48:	00202000 	eoreq	r2, r0, r0
    4b4c:	9c010000 	stcls	0, cr0, [r1], {-0}
    4b50:	0000028b 	andeq	r0, r0, fp, lsl #5
    4b54:	00009e14 	andeq	r9, r0, r4, lsl lr
    4b58:	30910100 	addscc	r0, r1, r0, lsl #2
    4b5c:	0000012b 	andeq	r0, r0, fp, lsr #2
    4b60:	00779102 	rsbseq	r9, r7, r2, lsl #2
    4b64:	00253f13 	eoreq	r3, r5, r3, lsl pc
    4b68:	067c0100 	ldrbteq	r0, [ip], -r0, lsl #2
    4b6c:	20003c02 	andcs	r3, r0, r2, lsl #24
    4b70:	00000022 	andeq	r0, r0, r2, lsr #32
    4b74:	02b19c01 	adcseq	r9, r1, #256	; 0x100
    4b78:	1d140000 	ldcne	0, cr0, [r4, #-0]
    4b7c:	01000025 	tsteq	r0, r5, lsr #32
    4b80:	008f277c 	addeq	r2, pc, ip, ror r7	; <UNPREDICTABLE>
    4b84:	91020000 	mrsls	r0, (UNDEF: 2)
    4b88:	f6160077 			; <UNDEFINED> instruction: 0xf6160077
    4b8c:	01000023 	tsteq	r0, r3, lsr #32
    4b90:	3be00669 	blcc	ff80653c <a+0xdf8025a8>
    4b94:	00222000 	eoreq	r2, r2, r0
    4b98:	9c010000 	stcls	0, cr0, [r1], {-0}
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	110e1b0e 	tstne	lr, lr, lsl #22
   c:	10061201 	andne	r1, r6, r1, lsl #4
  10:	02000017 	andeq	r0, r0, #23
  14:	0b0b0024 	bleq	2c00ac <startup-0x1fd3ff54>
  18:	0e030b3e 	vmoveq.16	d3[0], r0
  1c:	16030000 	strne	r0, [r3], -r0
  20:	3a0e0300 	bcc	380c28 <startup-0x1fc7f3d8>
  24:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  28:	0013490b 	andseq	r4, r3, fp, lsl #18
  2c:	00240400 	eoreq	r0, r4, r0, lsl #8
  30:	0b3e0b0b 	bleq	f82c64 <startup-0x1f07d39c>
  34:	00000803 	andeq	r0, r0, r3, lsl #16
  38:	49003505 	stmdbmi	r0, {r0, r2, r8, sl, ip, sp}
  3c:	06000013 			; <UNDEFINED> instruction: 0x06000013
  40:	13490026 	movtne	r0, #36902	; 0x9026
  44:	13070000 	movwne	r0, #28672	; 0x7000
  48:	3a050b01 	bcc	142c54 <startup-0x1febd3ac>
  4c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
  50:	0013010b 	andseq	r0, r3, fp, lsl #2
  54:	000d0800 	andeq	r0, sp, r0, lsl #16
  58:	0b3a0e03 	bleq	e8386c <startup-0x1f17c794>
  5c:	0b39053b 	bleq	e41550 <startup-0x1f1beab0>
  60:	0b381349 	bleq	e04d8c <startup-0x1f1fb274>
  64:	0d090000 	stceq	0, cr0, [r9, #-0]
  68:	3a0e0300 	bcc	380c70 <startup-0x1fc7f390>
  6c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
  70:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
  74:	0a000005 	beq	90 <startup-0x1fffff70>
  78:	0803000d 	stmdaeq	r3, {r0, r2, r3}
  7c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  80:	13490b39 	movtne	r0, #39737	; 0x9b39
  84:	00000538 	andeq	r0, r0, r8, lsr r5
  88:	4901010b 	stmdbmi	r1, {r0, r1, r3, r8}
  8c:	00130113 	andseq	r0, r3, r3, lsl r1
  90:	00210c00 	eoreq	r0, r1, r0, lsl #24
  94:	0b2f1349 	bleq	bc4dc0 <startup-0x1f43b240>
  98:	210d0000 	mrscs	r0, (UNDEF: 13)
  9c:	2f134900 	svccs	0x00134900
  a0:	0e000005 	cdpeq	0, 0, cr0, cr0, cr5, {0}
  a4:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
  a8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  ac:	13490b39 	movtne	r0, #39737	; 0x9b39
  b0:	130f0000 	movwne	r0, #61440	; 0xf000
  b4:	3a0b0b01 	bcc	2c2cc0 <startup-0x1fd3d340>
  b8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
  bc:	0013010b 	andseq	r0, r3, fp, lsl #2
  c0:	000d1000 	andeq	r1, sp, r0
  c4:	0b3a0803 	bleq	e820d8 <startup-0x1f17df28>
  c8:	0b39053b 	bleq	e415bc <startup-0x1f1bea44>
  cc:	0b381349 	bleq	e04df8 <startup-0x1f1fb208>
  d0:	34110000 	ldrcc	r0, [r1], #-0
  d4:	3a0e0300 	bcc	380cdc <startup-0x1fc7f324>
  d8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
  dc:	3f13490b 	svccc	0x0013490b
  e0:	00193c19 	andseq	r3, r9, r9, lsl ip
  e4:	00341200 	eorseq	r1, r4, r0, lsl #4
  e8:	0b3a0e03 	bleq	e838fc <startup-0x1f17c704>
  ec:	0b390b3b 	bleq	e42de0 <startup-0x1f1bd220>
  f0:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
  f4:	0000193c 	andeq	r1, r0, ip, lsr r9
  f8:	3e010413 	cfmvdlrcc	mvd1, r0
  fc:	490b0b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp}
 100:	3b0b3a13 	blcc	2ce954 <startup-0x1fd316ac>
 104:	010b3905 	tsteq	fp, r5, lsl #18
 108:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
 10c:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
 110:	00000b1c 	andeq	r0, r0, ip, lsl fp
 114:	0b011315 	bleq	44d70 <startup-0x1ffbb290>
 118:	3b0b3a0b 	blcc	2ce94c <startup-0x1fd316b4>
 11c:	010b390b 	tsteq	fp, fp, lsl #18
 120:	16000013 			; <UNDEFINED> instruction: 0x16000013
 124:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 128:	0b3b0b3a 	bleq	ec2e18 <startup-0x1f13d1e8>
 12c:	13490b39 	movtne	r0, #39737	; 0x9b39
 130:	00000b38 	andeq	r0, r0, r8, lsr fp
 134:	3f012e17 	svccc	0x00012e17
 138:	3a0e0319 	bcc	380da4 <startup-0x1fc7f25c>
 13c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 140:	1119270b 	tstne	r9, fp, lsl #14
 144:	40061201 	andmi	r1, r6, r1, lsl #4
 148:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 14c:	00001301 	andeq	r1, r0, r1, lsl #6
 150:	03000518 	movweq	r0, #1304	; 0x518
 154:	3b0b3a0e 	blcc	2ce994 <startup-0x1fd3166c>
 158:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 15c:	00180213 	andseq	r0, r8, r3, lsl r2
 160:	00341900 	eorseq	r1, r4, r0, lsl #18
 164:	0b3a0e03 	bleq	e83978 <startup-0x1f17c688>
 168:	0b390b3b 	bleq	e42e5c <startup-0x1f1bd1a4>
 16c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 170:	0f1a0000 	svceq	0x001a0000
 174:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 178:	1b000013 	blne	1cc <startup-0x1ffffe34>
 17c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 180:	0b3a0e03 	bleq	e83994 <startup-0x1f17c66c>
 184:	0b390b3b 	bleq	e42e78 <startup-0x1f1bd188>
 188:	01111927 	tsteq	r1, r7, lsr #18
 18c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 190:	00194297 	mulseq	r9, r7, r2
 194:	11010000 	mrsne	r0, (UNDEF: 1)
 198:	130e2501 	movwne	r2, #58625	; 0xe501
 19c:	1b0e030b 	blne	380dd0 <startup-0x1fc7f230>
 1a0:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 1a4:	00171006 	andseq	r1, r7, r6
 1a8:	00240200 	eoreq	r0, r4, r0, lsl #4
 1ac:	0b3e0b0b 	bleq	f82de0 <startup-0x1f07d220>
 1b0:	00000e03 	andeq	r0, r0, r3, lsl #28
 1b4:	03001603 	movweq	r1, #1539	; 0x603
 1b8:	3b0b3a0e 	blcc	2ce9f8 <startup-0x1fd31608>
 1bc:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 1c0:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
 1c4:	0b0b0024 	bleq	2c025c <startup-0x1fd3fda4>
 1c8:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 1cc:	35050000 	strcc	r0, [r5, #-0]
 1d0:	00134900 	andseq	r4, r3, r0, lsl #18
 1d4:	00340600 	eorseq	r0, r4, r0, lsl #12
 1d8:	0b3a0e03 	bleq	e839ec <startup-0x1f17c614>
 1dc:	0b39053b 	bleq	e416d0 <startup-0x1f1be930>
 1e0:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 1e4:	0000193c 	andeq	r1, r0, ip, lsr r9
 1e8:	03003407 	movweq	r3, #1031	; 0x407
 1ec:	3b0b3a0e 	blcc	2cea2c <startup-0x1fd315d4>
 1f0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 1f4:	3c193f13 	ldccc	15, cr3, [r9], {19}
 1f8:	08000019 	stmdaeq	r0, {r0, r3, r4}
 1fc:	0b3e0104 	bleq	f80614 <startup-0x1f07f9ec>
 200:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 204:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 208:	13010b39 	movwne	r0, #6969	; 0x1b39
 20c:	28090000 	stmdacs	r9, {}	; <UNPREDICTABLE>
 210:	1c0e0300 	stcne	3, cr0, [lr], {-0}
 214:	0a00000b 	beq	248 <startup-0x1ffffdb8>
 218:	08030028 	stmdaeq	r3, {r3, r5}
 21c:	00000b1c 	andeq	r0, r0, ip, lsl fp
 220:	0300160b 	movweq	r1, #1547	; 0x60b
 224:	3b0b3a0e 	blcc	2cea64 <startup-0x1fd3159c>
 228:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 22c:	0c000013 	stceq	0, cr0, [r0], {19}
 230:	0b0b0113 	bleq	2c0684 <startup-0x1fd3f97c>
 234:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 238:	13010b39 	movwne	r0, #6969	; 0x1b39
 23c:	0d0d0000 	stceq	0, cr0, [sp, #-0]
 240:	3a080300 	bcc	200e48 <startup-0x1fdff1b8>
 244:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 248:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 24c:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
 250:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 254:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 258:	13490b39 	movtne	r0, #39737	; 0x9b39
 25c:	00000b38 	andeq	r0, r0, r8, lsr fp
 260:	3e01040f 	cdpcc	4, 0, cr0, cr1, cr15, {0}
 264:	490b0b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp}
 268:	3b0b3a13 	blcc	2ceabc <startup-0x1fd31544>
 26c:	010b390b 	tsteq	fp, fp, lsl #18
 270:	10000013 	andne	r0, r0, r3, lsl r0
 274:	0b0b0113 	bleq	2c06c8 <startup-0x1fd3f938>
 278:	0b3b0b3a 	bleq	ec2f68 <startup-0x1f13d098>
 27c:	13010b39 	movwne	r0, #6969	; 0x1b39
 280:	0d110000 	ldceq	0, cr0, [r1, #-0]
 284:	3a0e0300 	bcc	380e8c <startup-0x1fc7f174>
 288:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 28c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 290:	1200000b 	andne	r0, r0, #11
 294:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 298:	0b3a0e03 	bleq	e83aac <startup-0x1f17c554>
 29c:	0b39053b 	bleq	e41790 <startup-0x1f1be870>
 2a0:	01111927 	tsteq	r1, r7, lsr #18
 2a4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 2a8:	01194297 			; <UNDEFINED> instruction: 0x01194297
 2ac:	13000013 	movwne	r0, #19
 2b0:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 2b4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 2b8:	13490b39 	movtne	r0, #39737	; 0x9b39
 2bc:	00001802 	andeq	r1, r0, r2, lsl #16
 2c0:	3f012e14 	svccc	0x00012e14
 2c4:	3a0e0319 	bcc	380f30 <startup-0x1fc7f0d0>
 2c8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 2cc:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 2d0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 2d4:	97184006 	ldrls	r4, [r8, -r6]
 2d8:	13011942 	movwne	r1, #6466	; 0x1942
 2dc:	34150000 	ldrcc	r0, [r5], #-0
 2e0:	3a0e0300 	bcc	380ee8 <startup-0x1fc7f118>
 2e4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 2e8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 2ec:	16000018 			; <UNDEFINED> instruction: 0x16000018
 2f0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 2f4:	0b3a0e03 	bleq	e83b08 <startup-0x1f17c4f8>
 2f8:	0b390b3b 	bleq	e42fec <startup-0x1f1bd014>
 2fc:	01111927 	tsteq	r1, r7, lsr #18
 300:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 304:	01194297 			; <UNDEFINED> instruction: 0x01194297
 308:	17000013 	smladne	r0, r3, r0, r0
 30c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 310:	0b3b0b3a 	bleq	ec3000 <startup-0x1f13d000>
 314:	13490b39 	movtne	r0, #39737	; 0x9b39
 318:	00001802 	andeq	r1, r0, r2, lsl #16
 31c:	3f012e18 	svccc	0x00012e18
 320:	3a0e0319 	bcc	380f8c <startup-0x1fc7f074>
 324:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 328:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 32c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 330:	97184006 	ldrls	r4, [r8, -r6]
 334:	13011942 	movwne	r1, #6466	; 0x1942
 338:	34190000 	ldrcc	r0, [r9], #-0
 33c:	3a0e0300 	bcc	380f44 <startup-0x1fc7f0bc>
 340:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 344:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 348:	1a000018 	bne	3b0 <startup-0x1ffffc50>
 34c:	0b0b000f 	bleq	2c0390 <startup-0x1fd3fc70>
 350:	00001349 	andeq	r1, r0, r9, asr #6
 354:	0300341b 	movweq	r3, #1051	; 0x41b
 358:	3b0b3a08 	blcc	2ceb80 <startup-0x1fd31480>
 35c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 360:	00180213 	andseq	r0, r8, r3, lsl r2
 364:	002e1c00 	eoreq	r1, lr, r0, lsl #24
 368:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 36c:	0b3b0b3a 	bleq	ec305c <startup-0x1f13cfa4>
 370:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 374:	06120111 			; <UNDEFINED> instruction: 0x06120111
 378:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 37c:	00000019 	andeq	r0, r0, r9, lsl r0
 380:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 384:	030b130e 	movweq	r1, #45838	; 0xb30e
 388:	110e1b0e 	tstne	lr, lr, lsl #22
 38c:	10061201 	andne	r1, r6, r1, lsl #4
 390:	02000017 	andeq	r0, r0, #23
 394:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 398:	0b3a0b0b 	bleq	e82fcc <startup-0x1f17d034>
 39c:	0b390b3b 	bleq	e43090 <startup-0x1f1bcf70>
 3a0:	00001301 	andeq	r1, r0, r1, lsl #6
 3a4:	03000d03 	movweq	r0, #3331	; 0xd03
 3a8:	3b0b3a08 	blcc	2cebd0 <startup-0x1fd31430>
 3ac:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 3b0:	000b3813 	andeq	r3, fp, r3, lsl r8
 3b4:	000d0400 	andeq	r0, sp, r0, lsl #8
 3b8:	0b3a0e03 	bleq	e83bcc <startup-0x1f17c434>
 3bc:	0b390b3b 	bleq	e430b0 <startup-0x1f1bcf50>
 3c0:	0b381349 	bleq	e050ec <startup-0x1f1faf14>
 3c4:	24050000 	strcs	r0, [r5], #-0
 3c8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 3cc:	000e030b 	andeq	r0, lr, fp, lsl #6
 3d0:	00350600 	eorseq	r0, r5, r0, lsl #12
 3d4:	00001349 	andeq	r1, r0, r9, asr #6
 3d8:	03001607 	movweq	r1, #1543	; 0x607
 3dc:	3b0b3a0e 	blcc	2cec1c <startup-0x1fd313e4>
 3e0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 3e4:	08000013 	stmdaeq	r0, {r0, r1, r4}
 3e8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 3ec:	0b3a0e03 	bleq	e83c00 <startup-0x1f17c400>
 3f0:	0b390b3b 	bleq	e430e4 <startup-0x1f1bcf1c>
 3f4:	01111927 	tsteq	r1, r7, lsr #18
 3f8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 3fc:	01194296 			; <UNDEFINED> instruction: 0x01194296
 400:	09000013 	stmdbeq	r0, {r0, r1, r4}
 404:	08030005 	stmdaeq	r3, {r0, r2}
 408:	0b3b0b3a 	bleq	ec30f8 <startup-0x1f13cf08>
 40c:	13490b39 	movtne	r0, #39737	; 0x9b39
 410:	00001802 	andeq	r1, r0, r2, lsl #16
 414:	0b000f0a 	bleq	4044 <startup-0x1fffbfbc>
 418:	0013490b 	andseq	r4, r3, fp, lsl #18
 41c:	002e0b00 	eoreq	r0, lr, r0, lsl #22
 420:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 424:	0b3b0b3a 	bleq	ec3114 <startup-0x1f13ceec>
 428:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 42c:	01111349 	tsteq	r1, r9, asr #6
 430:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 434:	00194297 	mulseq	r9, r7, r2
 438:	012e0c00 			; <UNDEFINED> instruction: 0x012e0c00
 43c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 440:	0b3b0b3a 	bleq	ec3130 <startup-0x1f13ced0>
 444:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 448:	06120111 			; <UNDEFINED> instruction: 0x06120111
 44c:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 450:	00000019 	andeq	r0, r0, r9, lsl r0
 454:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 458:	030b130e 	movweq	r1, #45838	; 0xb30e
 45c:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
 460:	10011117 	andne	r1, r1, r7, lsl r1
 464:	02000017 	andeq	r0, r0, #23
 468:	0e030104 	adfeqs	f0, f3, f4
 46c:	0b0b0b3e 	bleq	2c316c <startup-0x1fd3ce94>
 470:	0b3a1349 	bleq	e8519c <startup-0x1f17ae64>
 474:	0b390b3b 	bleq	e43168 <startup-0x1f1bce98>
 478:	00001301 	andeq	r1, r0, r1, lsl #6
 47c:	03002803 	movweq	r2, #2051	; 0x803
 480:	000d1c0e 	andeq	r1, sp, lr, lsl #24
 484:	00280400 	eoreq	r0, r8, r0, lsl #8
 488:	0b1c0e03 	bleq	703c9c <startup-0x1f8fc364>
 48c:	24050000 	strcs	r0, [r5], #-0
 490:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 494:	000e030b 	andeq	r0, lr, fp, lsl #6
 498:	00160600 	andseq	r0, r6, r0, lsl #12
 49c:	0b3a0e03 	bleq	e83cb0 <startup-0x1f17c350>
 4a0:	0b390b3b 	bleq	e43194 <startup-0x1f1bce6c>
 4a4:	00001349 	andeq	r1, r0, r9, asr #6
 4a8:	0b002407 	bleq	94cc <startup-0x1fff6b34>
 4ac:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 4b0:	08000008 	stmdaeq	r0, {r3}
 4b4:	13490035 	movtne	r0, #36917	; 0x9035
 4b8:	34090000 	strcc	r0, [r9], #-0
 4bc:	3a0e0300 	bcc	3810c4 <startup-0x1fc7ef3c>
 4c0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 4c4:	3f13490b 	svccc	0x0013490b
 4c8:	00193c19 	andseq	r3, r9, r9, lsl ip
 4cc:	00340a00 	eorseq	r0, r4, r0, lsl #20
 4d0:	0b3a0e03 	bleq	e83ce4 <startup-0x1f17c31c>
 4d4:	0b390b3b 	bleq	e431c8 <startup-0x1f1bce38>
 4d8:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 4dc:	0000193c 	andeq	r1, r0, ip, lsr r9
 4e0:	3e01040b 	cdpcc	4, 0, cr0, cr1, cr11, {0}
 4e4:	490b0b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp}
 4e8:	3b0b3a13 	blcc	2ced3c <startup-0x1fd312c4>
 4ec:	010b3905 	tsteq	fp, r5, lsl #18
 4f0:	0c000013 	stceq	0, cr0, [r0], {19}
 4f4:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 4f8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 4fc:	13490b39 	movtne	r0, #39737	; 0x9b39
 500:	130d0000 	movwne	r0, #53248	; 0xd000
 504:	3a0b0b01 	bcc	2c3110 <startup-0x1fd3cef0>
 508:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 50c:	0013010b 	andseq	r0, r3, fp, lsl #2
 510:	000d0e00 	andeq	r0, sp, r0, lsl #28
 514:	0b3a0e03 	bleq	e83d28 <startup-0x1f17c2d8>
 518:	0b39053b 	bleq	e41a0c <startup-0x1f1be5f4>
 51c:	0b381349 	bleq	e05248 <startup-0x1f1fadb8>
 520:	0d0f0000 	stceq	0, cr0, [pc, #-0]	; 528 <startup-0x1ffffad8>
 524:	3a080300 	bcc	20112c <startup-0x1fdfeed4>
 528:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 52c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 530:	1000000b 	andne	r0, r0, fp
 534:	13490101 	movtne	r0, #37121	; 0x9101
 538:	00001301 	andeq	r1, r0, r1, lsl #6
 53c:	49002111 	stmdbmi	r0, {r0, r4, r8, sp}
 540:	000b2f13 	andeq	r2, fp, r3, lsl pc
 544:	01041200 	mrseq	r1, R12_usr
 548:	0b0b0b3e 	bleq	2c3248 <startup-0x1fd3cdb8>
 54c:	0b3a1349 	bleq	e85278 <startup-0x1f17ad88>
 550:	0b390b3b 	bleq	e43244 <startup-0x1f1bcdbc>
 554:	00001301 	andeq	r1, r0, r1, lsl #6
 558:	0b011313 	bleq	451ac <startup-0x1ffbae54>
 55c:	3b0b3a0b 	blcc	2ced90 <startup-0x1fd31270>
 560:	010b390b 	tsteq	fp, fp, lsl #18
 564:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
 568:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 56c:	0b3b0b3a 	bleq	ec325c <startup-0x1f13cda4>
 570:	13490b39 	movtne	r0, #39737	; 0x9b39
 574:	00000b38 	andeq	r0, r0, r8, lsr fp
 578:	03000d15 	movweq	r0, #3349	; 0xd15
 57c:	3b0b3a08 	blcc	2ceda4 <startup-0x1fd3125c>
 580:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 584:	000b3813 	andeq	r3, fp, r3, lsl r8
 588:	000f1600 	andeq	r1, pc, r0, lsl #12
 58c:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 590:	34170000 	ldrcc	r0, [r7], #-0
 594:	3a0e0300 	bcc	38119c <startup-0x1fc7ee64>
 598:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 59c:	3f13490b 	svccc	0x0013490b
 5a0:	00180219 	andseq	r0, r8, r9, lsl r2
 5a4:	00341800 	eorseq	r1, r4, r0, lsl #16
 5a8:	0b3a0803 	bleq	e825bc <startup-0x1f17da44>
 5ac:	0b390b3b 	bleq	e432a0 <startup-0x1f1bcd60>
 5b0:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 5b4:	00001802 	andeq	r1, r0, r2, lsl #16
 5b8:	3f002e19 	svccc	0x00002e19
 5bc:	3a0e0319 	bcc	381228 <startup-0x1fc7edd8>
 5c0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 5c4:	1119270b 	tstne	r9, fp, lsl #14
 5c8:	40061201 	andmi	r1, r6, r1, lsl #4
 5cc:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 5d0:	2e1a0000 	cdpcs	0, 1, cr0, cr10, cr0, {0}
 5d4:	03193f01 	tsteq	r9, #1, 30
 5d8:	3b0b3a0e 	blcc	2cee18 <startup-0x1fd311e8>
 5dc:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 5e0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 5e4:	96184006 	ldrls	r4, [r8], -r6
 5e8:	13011942 	movwne	r1, #6466	; 0x1942
 5ec:	341b0000 	ldrcc	r0, [fp], #-0
 5f0:	3a0e0300 	bcc	3811f8 <startup-0x1fc7ee08>
 5f4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 5f8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 5fc:	1c000018 	stcne	0, cr0, [r0], {24}
 600:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 604:	0b3a0e03 	bleq	e83e18 <startup-0x1f17c1e8>
 608:	0b390b3b 	bleq	e432fc <startup-0x1f1bcd04>
 60c:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
 610:	181d0000 	ldmdane	sp, {}	; <UNPREDICTABLE>
 614:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
 618:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 61c:	0b3a0e03 	bleq	e83e30 <startup-0x1f17c1d0>
 620:	0b390b3b 	bleq	e43314 <startup-0x1f1bccec>
 624:	01111927 	tsteq	r1, r7, lsr #18
 628:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 62c:	00194297 	mulseq	r9, r7, r2
 630:	11010000 	mrsne	r0, (UNDEF: 1)
 634:	130e2501 	movwne	r2, #58625	; 0xe501
 638:	1b0e030b 	blne	38126c <startup-0x1fc7ed94>
 63c:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 640:	00171006 	andseq	r1, r7, r6
 644:	00240200 	eoreq	r0, r4, r0, lsl #4
 648:	0b3e0b0b 	bleq	f8327c <startup-0x1f07cd84>
 64c:	00000e03 	andeq	r0, r0, r3, lsl #28
 650:	03001603 	movweq	r1, #1539	; 0x603
 654:	3b0b3a0e 	blcc	2cee94 <startup-0x1fd3116c>
 658:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 65c:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
 660:	0b0b0024 	bleq	2c06f8 <startup-0x1fd3f908>
 664:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 668:	35050000 	strcc	r0, [r5, #-0]
 66c:	00134900 	andseq	r4, r3, r0, lsl #18
 670:	00260600 	eoreq	r0, r6, r0, lsl #12
 674:	00001349 	andeq	r1, r0, r9, asr #6
 678:	49010107 	stmdbmi	r1, {r0, r1, r2, r8}
 67c:	00130113 	andseq	r0, r3, r3, lsl r1
 680:	00210800 	eoreq	r0, r1, r0, lsl #16
 684:	0b2f1349 	bleq	bc53b0 <startup-0x1f43ac50>
 688:	34090000 	strcc	r0, [r9], #-0
 68c:	3a0e0300 	bcc	381294 <startup-0x1fc7ed6c>
 690:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 694:	3f13490b 	svccc	0x0013490b
 698:	00193c19 	andseq	r3, r9, r9, lsl ip
 69c:	00340a00 	eorseq	r0, r4, r0, lsl #20
 6a0:	0b3a0e03 	bleq	e83eb4 <startup-0x1f17c14c>
 6a4:	0b390b3b 	bleq	e43398 <startup-0x1f1bcc68>
 6a8:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 6ac:	0000193c 	andeq	r1, r0, ip, lsr r9
 6b0:	3e01040b 	cdpcc	4, 0, cr0, cr1, cr11, {0}
 6b4:	490b0b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp}
 6b8:	3b0b3a13 	blcc	2cef0c <startup-0x1fd310f4>
 6bc:	010b3905 	tsteq	fp, r5, lsl #18
 6c0:	0c000013 	stceq	0, cr0, [r0], {19}
 6c4:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
 6c8:	00000b1c 	andeq	r0, r0, ip, lsl fp
 6cc:	0300280d 	movweq	r2, #2061	; 0x80d
 6d0:	000b1c08 	andeq	r1, fp, r8, lsl #24
 6d4:	00160e00 	andseq	r0, r6, r0, lsl #28
 6d8:	0b3a0e03 	bleq	e83eec <startup-0x1f17c114>
 6dc:	0b39053b 	bleq	e41bd0 <startup-0x1f1be430>
 6e0:	00001349 	andeq	r1, r0, r9, asr #6
 6e4:	0b01130f 	bleq	45328 <startup-0x1ffbacd8>
 6e8:	3b0b3a0b 	blcc	2cef1c <startup-0x1fd310e4>
 6ec:	010b3905 	tsteq	fp, r5, lsl #18
 6f0:	10000013 	andne	r0, r0, r3, lsl r0
 6f4:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 6f8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 6fc:	13490b39 	movtne	r0, #39737	; 0x9b39
 700:	00000b38 	andeq	r0, r0, r8, lsr fp
 704:	03000d11 	movweq	r0, #3345	; 0xd11
 708:	3b0b3a0e 	blcc	2cef48 <startup-0x1fd310b8>
 70c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 710:	000b3813 	andeq	r3, fp, r3, lsl r8
 714:	01131200 	tsteq	r3, r0, lsl #4
 718:	0b3a0b0b 	bleq	e8334c <startup-0x1f17ccb4>
 71c:	0b390b3b 	bleq	e43410 <startup-0x1f1bcbf0>
 720:	00001301 	andeq	r1, r0, r1, lsl #6
 724:	03000d13 	movweq	r0, #3347	; 0xd13
 728:	3b0b3a0e 	blcc	2cef68 <startup-0x1fd31098>
 72c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 730:	000b3813 	andeq	r3, fp, r3, lsl r8
 734:	00341400 	eorseq	r1, r4, r0, lsl #8
 738:	0b3a0e03 	bleq	e83f4c <startup-0x1f17c0b4>
 73c:	0b390b3b 	bleq	e43430 <startup-0x1f1bcbd0>
 740:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 744:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
 748:	03193f01 	tsteq	r9, #1, 30
 74c:	3b0b3a0e 	blcc	2cef8c <startup-0x1fd31074>
 750:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
 754:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 758:	97184006 	ldrls	r4, [r8, -r6]
 75c:	13011942 	movwne	r1, #6466	; 0x1942
 760:	05160000 	ldreq	r0, [r6, #-0]
 764:	3a0e0300 	bcc	38136c <startup-0x1fc7ec94>
 768:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 76c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 770:	17000018 	smladne	r0, r8, r0, r0
 774:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 778:	0b3a0e03 	bleq	e83f8c <startup-0x1f17c074>
 77c:	0b39053b 	bleq	e41c70 <startup-0x1f1be390>
 780:	13491927 	movtne	r1, #39207	; 0x9927
 784:	06120111 			; <UNDEFINED> instruction: 0x06120111
 788:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 78c:	00130119 	andseq	r0, r3, r9, lsl r1
 790:	00341800 	eorseq	r1, r4, r0, lsl #16
 794:	0b3a0e03 	bleq	e83fa8 <startup-0x1f17c058>
 798:	0b39053b 	bleq	e41c8c <startup-0x1f1be374>
 79c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 7a0:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
 7a4:	03193f00 	tsteq	r9, #0, 30
 7a8:	3b0b3a0e 	blcc	2cefe8 <startup-0x1fd31018>
 7ac:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
 7b0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 7b4:	97184006 	ldrls	r4, [r8, -r6]
 7b8:	00001942 	andeq	r1, r0, r2, asr #18
 7bc:	0300341a 	movweq	r3, #1050	; 0x41a
 7c0:	3b0b3a08 	blcc	2cefe8 <startup-0x1fd31018>
 7c4:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 7c8:	00180213 	andseq	r0, r8, r3, lsl r2
 7cc:	012e1b00 			; <UNDEFINED> instruction: 0x012e1b00
 7d0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 7d4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 7d8:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 7dc:	06120111 			; <UNDEFINED> instruction: 0x06120111
 7e0:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 7e4:	00130119 	andseq	r0, r3, r9, lsl r1
 7e8:	000f1c00 	andeq	r1, pc, r0, lsl #24
 7ec:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 7f0:	2e1d0000 	cdpcs	0, 1, cr0, cr13, cr0, {0}
 7f4:	03193f00 	tsteq	r9, #0, 30
 7f8:	3b0b3a0e 	blcc	2cf038 <startup-0x1fd30fc8>
 7fc:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
 800:	11134919 	tstne	r3, r9, lsl r9
 804:	40061201 	andmi	r1, r6, r1, lsl #4
 808:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 80c:	2e1e0000 	cdpcs	0, 1, cr0, cr14, cr0, {0}
 810:	03193f01 	tsteq	r9, #1, 30
 814:	3b0b3a0e 	blcc	2cf054 <startup-0x1fd30fac>
 818:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
 81c:	11134919 	tstne	r3, r9, lsl r9
 820:	40061201 	andmi	r1, r6, r1, lsl #4
 824:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 828:	00001301 	andeq	r1, r0, r1, lsl #6
 82c:	3f002e1f 	svccc	0x00002e1f
 830:	3a0e0319 	bcc	38149c <startup-0x1fc7eb64>
 834:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 838:	1119270b 	tstne	r9, fp, lsl #14
 83c:	40061201 	andmi	r1, r6, r1, lsl #4
 840:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 844:	01000000 	mrseq	r0, (UNDEF: 0)
 848:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 84c:	0e030b13 	vmoveq.32	d3[0], r0
 850:	01110e1b 	tsteq	r1, fp, lsl lr
 854:	17100612 			; <UNDEFINED> instruction: 0x17100612
 858:	24020000 	strcs	r0, [r2], #-0
 85c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 860:	000e030b 	andeq	r0, lr, fp, lsl #6
 864:	00160300 	andseq	r0, r6, r0, lsl #6
 868:	0b3a0e03 	bleq	e8407c <startup-0x1f17bf84>
 86c:	0b390b3b 	bleq	e43560 <startup-0x1f1bcaa0>
 870:	00001349 	andeq	r1, r0, r9, asr #6
 874:	0b002404 	bleq	988c <startup-0x1fff6774>
 878:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 87c:	05000008 	streq	r0, [r0, #-8]
 880:	13490035 	movtne	r0, #36917	; 0x9035
 884:	34060000 	strcc	r0, [r6], #-0
 888:	3a0e0300 	bcc	381490 <startup-0x1fc7eb70>
 88c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 890:	3f13490b 	svccc	0x0013490b
 894:	00193c19 	andseq	r3, r9, r9, lsl ip
 898:	00340700 	eorseq	r0, r4, r0, lsl #14
 89c:	0b3a0e03 	bleq	e840b0 <startup-0x1f17bf50>
 8a0:	0b390b3b 	bleq	e43594 <startup-0x1f1bca6c>
 8a4:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 8a8:	0000193c 	andeq	r1, r0, ip, lsr r9
 8ac:	3e010408 	cdpcc	4, 0, cr0, cr1, cr8, {0}
 8b0:	490b0b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp}
 8b4:	3b0b3a13 	blcc	2cf108 <startup-0x1fd30ef8>
 8b8:	010b3905 	tsteq	fp, r5, lsl #18
 8bc:	09000013 	stmdbeq	r0, {r0, r1, r4}
 8c0:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
 8c4:	00000b1c 	andeq	r0, r0, ip, lsl fp
 8c8:	0300280a 	movweq	r2, #2058	; 0x80a
 8cc:	000b1c08 	andeq	r1, fp, r8, lsl #24
 8d0:	00160b00 	andseq	r0, r6, r0, lsl #22
 8d4:	0b3a0e03 	bleq	e840e8 <startup-0x1f17bf18>
 8d8:	0b39053b 	bleq	e41dcc <startup-0x1f1be234>
 8dc:	00001349 	andeq	r1, r0, r9, asr #6
 8e0:	0b01130c 	bleq	45518 <startup-0x1ffbaae8>
 8e4:	3b0b3a0b 	blcc	2cf118 <startup-0x1fd30ee8>
 8e8:	010b3905 	tsteq	fp, r5, lsl #18
 8ec:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
 8f0:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 8f4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 8f8:	13490b39 	movtne	r0, #39737	; 0x9b39
 8fc:	00000b38 	andeq	r0, r0, r8, lsr fp
 900:	03000d0e 	movweq	r0, #3342	; 0xd0e
 904:	3b0b3a0e 	blcc	2cf144 <startup-0x1fd30ebc>
 908:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 90c:	000b3813 	andeq	r3, fp, r3, lsl r8
 910:	01130f00 	tsteq	r3, r0, lsl #30
 914:	0b3a0b0b 	bleq	e83548 <startup-0x1f17cab8>
 918:	0b390b3b 	bleq	e4360c <startup-0x1f1bc9f4>
 91c:	00001301 	andeq	r1, r0, r1, lsl #6
 920:	03000d10 	movweq	r0, #3344	; 0xd10
 924:	3b0b3a0e 	blcc	2cf164 <startup-0x1fd30e9c>
 928:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 92c:	000b3813 	andeq	r3, fp, r3, lsl r8
 930:	012e1100 			; <UNDEFINED> instruction: 0x012e1100
 934:	0b3a0e03 	bleq	e84148 <startup-0x1f17beb8>
 938:	0b39053b 	bleq	e41e2c <startup-0x1f1be1d4>
 93c:	01111927 	tsteq	r1, r7, lsr #18
 940:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 944:	01194297 			; <UNDEFINED> instruction: 0x01194297
 948:	12000013 	andne	r0, r0, #19
 94c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 950:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 954:	13490b39 	movtne	r0, #39737	; 0x9b39
 958:	00001802 	andeq	r1, r0, r2, lsl #16
 95c:	03003413 	movweq	r3, #1043	; 0x413
 960:	3b0b3a0e 	blcc	2cf1a0 <startup-0x1fd30e60>
 964:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 968:	00180213 	andseq	r0, r8, r3, lsl r2
 96c:	00341400 	eorseq	r1, r4, r0, lsl #8
 970:	0b3a0803 	bleq	e82984 <startup-0x1f17d67c>
 974:	0b39053b 	bleq	e41e68 <startup-0x1f1be198>
 978:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 97c:	0f150000 	svceq	0x00150000
 980:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 984:	16000013 			; <UNDEFINED> instruction: 0x16000013
 988:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 98c:	0b3a0e03 	bleq	e841a0 <startup-0x1f17be60>
 990:	0b39053b 	bleq	e41e84 <startup-0x1f1be17c>
 994:	01111927 	tsteq	r1, r7, lsr #18
 998:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 99c:	01194297 			; <UNDEFINED> instruction: 0x01194297
 9a0:	17000013 	smladne	r0, r3, r0, r0
 9a4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 9a8:	0b3a0e03 	bleq	e841bc <startup-0x1f17be44>
 9ac:	0b39053b 	bleq	e41ea0 <startup-0x1f1be160>
 9b0:	01111927 	tsteq	r1, r7, lsr #18
 9b4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 9b8:	01194296 			; <UNDEFINED> instruction: 0x01194296
 9bc:	18000013 	stmdane	r0, {r0, r1, r4}
 9c0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 9c4:	0b3a0e03 	bleq	e841d8 <startup-0x1f17be28>
 9c8:	0b39053b 	bleq	e41ebc <startup-0x1f1be144>
 9cc:	13491927 	movtne	r1, #39207	; 0x9927
 9d0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 9d4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 9d8:	00130119 	andseq	r0, r3, r9, lsl r1
 9dc:	012e1900 			; <UNDEFINED> instruction: 0x012e1900
 9e0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 9e4:	0b3b0b3a 	bleq	ec36d4 <startup-0x1f13c92c>
 9e8:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 9ec:	06120111 			; <UNDEFINED> instruction: 0x06120111
 9f0:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 9f4:	1a000019 	bne	a60 <startup-0x1ffff5a0>
 9f8:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 9fc:	0b3b0b3a 	bleq	ec36ec <startup-0x1f13c914>
 a00:	13490b39 	movtne	r0, #39737	; 0x9b39
 a04:	00001802 	andeq	r1, r0, r2, lsl #16
 a08:	01110100 	tsteq	r1, r0, lsl #2
 a0c:	0b130e25 	bleq	4c42a8 <startup-0x1fb3bd58>
 a10:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 a14:	06120111 			; <UNDEFINED> instruction: 0x06120111
 a18:	00001710 	andeq	r1, r0, r0, lsl r7
 a1c:	0b002402 	bleq	9a2c <startup-0x1fff65d4>
 a20:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 a24:	0300000e 	movweq	r0, #14
 a28:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 a2c:	0b3b0b3a 	bleq	ec371c <startup-0x1f13c8e4>
 a30:	13490b39 	movtne	r0, #39737	; 0x9b39
 a34:	24040000 	strcs	r0, [r4], #-0
 a38:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 a3c:	0008030b 	andeq	r0, r8, fp, lsl #6
 a40:	00350500 	eorseq	r0, r5, r0, lsl #10
 a44:	00001349 	andeq	r1, r0, r9, asr #6
 a48:	03003406 	movweq	r3, #1030	; 0x406
 a4c:	3b0b3a0e 	blcc	2cf28c <startup-0x1fd30d74>
 a50:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 a54:	3c193f13 	ldccc	15, cr3, [r9], {19}
 a58:	07000019 	smladeq	r0, r9, r0, r0
 a5c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 a60:	0b3b0b3a 	bleq	ec3750 <startup-0x1f13c8b0>
 a64:	13490b39 	movtne	r0, #39737	; 0x9b39
 a68:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 a6c:	04080000 	streq	r0, [r8], #-0
 a70:	0b0b3e01 	bleq	2d027c <startup-0x1fd2fd84>
 a74:	3a13490b 	bcc	4d2ea8 <startup-0x1fb2d158>
 a78:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 a7c:	0013010b 	andseq	r0, r3, fp, lsl #2
 a80:	00280900 	eoreq	r0, r8, r0, lsl #18
 a84:	0b1c0e03 	bleq	704298 <startup-0x1f8fbd68>
 a88:	130a0000 	movwne	r0, #40960	; 0xa000
 a8c:	3a0b0b01 	bcc	2c3698 <startup-0x1fd3c968>
 a90:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 a94:	0013010b 	andseq	r0, r3, fp, lsl #2
 a98:	000d0b00 	andeq	r0, sp, r0, lsl #22
 a9c:	0b3a0e03 	bleq	e842b0 <startup-0x1f17bd50>
 aa0:	0b39053b 	bleq	e41f94 <startup-0x1f1be06c>
 aa4:	0b381349 	bleq	e057d0 <startup-0x1f1fa830>
 aa8:	0d0c0000 	stceq	0, cr0, [ip, #-0]
 aac:	3a080300 	bcc	2016b4 <startup-0x1fdfe94c>
 ab0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 ab4:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 ab8:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
 abc:	13490101 	movtne	r0, #37121	; 0x9101
 ac0:	00001301 	andeq	r1, r0, r1, lsl #6
 ac4:	4900210e 	stmdbmi	r0, {r1, r2, r3, r8, sp}
 ac8:	000b2f13 	andeq	r2, fp, r3, lsl pc
 acc:	00160f00 	andseq	r0, r6, r0, lsl #30
 ad0:	0b3a0e03 	bleq	e842e4 <startup-0x1f17bd1c>
 ad4:	0b39053b 	bleq	e41fc8 <startup-0x1f1be038>
 ad8:	00001349 	andeq	r1, r0, r9, asr #6
 adc:	3e010410 	cfmvdlrcc	mvd1, r0
 ae0:	490b0b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp}
 ae4:	3b0b3a13 	blcc	2cf338 <startup-0x1fd30cc8>
 ae8:	010b390b 	tsteq	fp, fp, lsl #18
 aec:	11000013 	tstne	r0, r3, lsl r0
 af0:	0b0b0113 	bleq	2c0f44 <startup-0x1fd3f0bc>
 af4:	0b3b0b3a 	bleq	ec37e4 <startup-0x1f13c81c>
 af8:	13010b39 	movwne	r0, #6969	; 0x1b39
 afc:	0d120000 	ldceq	0, cr0, [r2, #-0]
 b00:	3a0e0300 	bcc	381708 <startup-0x1fc7e8f8>
 b04:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 b08:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 b0c:	1300000b 	movwne	r0, #11
 b10:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 b14:	0b3a0e03 	bleq	e84328 <startup-0x1f17bcd8>
 b18:	0b39053b 	bleq	e4200c <startup-0x1f1bdff4>
 b1c:	01111927 	tsteq	r1, r7, lsr #18
 b20:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 b24:	01194297 			; <UNDEFINED> instruction: 0x01194297
 b28:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
 b2c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 b30:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 b34:	13490b39 	movtne	r0, #39737	; 0x9b39
 b38:	00001802 	andeq	r1, r0, r2, lsl #16
 b3c:	03003415 	movweq	r3, #1045	; 0x415
 b40:	3b0b3a0e 	blcc	2cf380 <startup-0x1fd30c80>
 b44:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 b48:	00180213 	andseq	r0, r8, r3, lsl r2
 b4c:	000f1600 	andeq	r1, pc, r0, lsl #12
 b50:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 b54:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
 b58:	03193f01 	tsteq	r9, #1, 30
 b5c:	3b0b3a0e 	blcc	2cf39c <startup-0x1fd30c64>
 b60:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
 b64:	11134919 	tstne	r3, r9, lsl r9
 b68:	40061201 	andmi	r1, r6, r1, lsl #4
 b6c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 b70:	00001301 	andeq	r1, r0, r1, lsl #6
 b74:	03003418 	movweq	r3, #1048	; 0x418
 b78:	3b0b3a08 	blcc	2cf3a0 <startup-0x1fd30c60>
 b7c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 b80:	00180213 	andseq	r0, r8, r3, lsl r2
 b84:	012e1900 			; <UNDEFINED> instruction: 0x012e1900
 b88:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 b8c:	0b3b0b3a 	bleq	ec387c <startup-0x1f13c784>
 b90:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 b94:	06120111 			; <UNDEFINED> instruction: 0x06120111
 b98:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 b9c:	00130119 	andseq	r0, r3, r9, lsl r1
 ba0:	00051a00 	andeq	r1, r5, r0, lsl #20
 ba4:	0b3a0e03 	bleq	e843b8 <startup-0x1f17bc48>
 ba8:	0b390b3b 	bleq	e4389c <startup-0x1f1bc764>
 bac:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 bb0:	341b0000 	ldrcc	r0, [fp], #-0
 bb4:	3a0e0300 	bcc	3817bc <startup-0x1fc7e844>
 bb8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 bbc:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 bc0:	1c000018 	stcne	0, cr0, [r0], {24}
 bc4:	08030034 	stmdaeq	r3, {r2, r4, r5}
 bc8:	0b3b0b3a 	bleq	ec38b8 <startup-0x1f13c748>
 bcc:	13490b39 	movtne	r0, #39737	; 0x9b39
 bd0:	00001802 	andeq	r1, r0, r2, lsl #16
 bd4:	3f012e1d 	svccc	0x00012e1d
 bd8:	3a0e0319 	bcc	381844 <startup-0x1fc7e7bc>
 bdc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 be0:	1119270b 	tstne	r9, fp, lsl #14
 be4:	40061201 	andmi	r1, r6, r1, lsl #4
 be8:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 bec:	01000000 	mrseq	r0, (UNDEF: 0)
 bf0:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 bf4:	0e030b13 	vmoveq.32	d3[0], r0
 bf8:	01110e1b 	tsteq	r1, fp, lsl lr
 bfc:	17100612 			; <UNDEFINED> instruction: 0x17100612
 c00:	24020000 	strcs	r0, [r2], #-0
 c04:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 c08:	000e030b 	andeq	r0, lr, fp, lsl #6
 c0c:	00160300 	andseq	r0, r6, r0, lsl #6
 c10:	0b3a0e03 	bleq	e84424 <startup-0x1f17bbdc>
 c14:	0b390b3b 	bleq	e43908 <startup-0x1f1bc6f8>
 c18:	00001349 	andeq	r1, r0, r9, asr #6
 c1c:	0b002404 	bleq	9c34 <startup-0x1fff63cc>
 c20:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 c24:	05000008 	streq	r0, [r0, #-8]
 c28:	13490035 	movtne	r0, #36917	; 0x9035
 c2c:	01060000 	mrseq	r0, (UNDEF: 6)
 c30:	01134901 	tsteq	r3, r1, lsl #18
 c34:	07000013 	smladeq	r0, r3, r0, r0
 c38:	13490021 	movtne	r0, #36897	; 0x9021
 c3c:	00000b2f 	andeq	r0, r0, pc, lsr #22
 c40:	03003408 	movweq	r3, #1032	; 0x408
 c44:	3b0b3a0e 	blcc	2cf484 <startup-0x1fd30b7c>
 c48:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 c4c:	3c193f13 	ldccc	15, cr3, [r9], {19}
 c50:	09000019 	stmdbeq	r0, {r0, r3, r4}
 c54:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 c58:	0b3b0b3a 	bleq	ec3948 <startup-0x1f13c6b8>
 c5c:	13490b39 	movtne	r0, #39737	; 0x9b39
 c60:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 c64:	040a0000 	streq	r0, [sl], #-0
 c68:	0b0b3e01 	bleq	2d0474 <startup-0x1fd2fb8c>
 c6c:	3a13490b 	bcc	4d30a0 <startup-0x1fb2cf60>
 c70:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 c74:	0013010b 	andseq	r0, r3, fp, lsl #2
 c78:	00280b00 	eoreq	r0, r8, r0, lsl #22
 c7c:	0b1c0e03 	bleq	704490 <startup-0x1f8fbb70>
 c80:	280c0000 	stmdacs	ip, {}	; <UNPREDICTABLE>
 c84:	1c080300 	stcne	3, cr0, [r8], {-0}
 c88:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
 c8c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 c90:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 c94:	13490b39 	movtne	r0, #39737	; 0x9b39
 c98:	130e0000 	movwne	r0, #57344	; 0xe000
 c9c:	3a0b0b01 	bcc	2c38a8 <startup-0x1fd3c758>
 ca0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 ca4:	0013010b 	andseq	r0, r3, fp, lsl #2
 ca8:	000d0f00 	andeq	r0, sp, r0, lsl #30
 cac:	0b3a0e03 	bleq	e844c0 <startup-0x1f17bb40>
 cb0:	0b39053b 	bleq	e421a4 <startup-0x1f1bde5c>
 cb4:	0b381349 	bleq	e059e0 <startup-0x1f1fa620>
 cb8:	0d100000 	ldceq	0, cr0, [r0, #-0]
 cbc:	3a080300 	bcc	2018c4 <startup-0x1fdfe73c>
 cc0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 cc4:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 cc8:	1100000b 	tstne	r0, fp
 ccc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 cd0:	0b3a0e03 	bleq	e844e4 <startup-0x1f17bb1c>
 cd4:	0b390b3b 	bleq	e439c8 <startup-0x1f1bc638>
 cd8:	13491927 	movtne	r1, #39207	; 0x9927
 cdc:	06120111 			; <UNDEFINED> instruction: 0x06120111
 ce0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 ce4:	00130119 	andseq	r0, r3, r9, lsl r1
 ce8:	00341200 	eorseq	r1, r4, r0, lsl #4
 cec:	0b3a0e03 	bleq	e84500 <startup-0x1f17bb00>
 cf0:	0b390b3b 	bleq	e439e4 <startup-0x1f1bc61c>
 cf4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 cf8:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
 cfc:	03193f01 	tsteq	r9, #1, 30
 d00:	3b0b3a0e 	blcc	2cf540 <startup-0x1fd30ac0>
 d04:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 d08:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 d0c:	97184006 	ldrls	r4, [r8, -r6]
 d10:	13011942 	movwne	r1, #6466	; 0x1942
 d14:	05140000 	ldreq	r0, [r4, #-0]
 d18:	3a0e0300 	bcc	381920 <startup-0x1fc7e6e0>
 d1c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 d20:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 d24:	15000018 	strne	r0, [r0, #-24]	; 0xffffffe8
 d28:	08030034 	stmdaeq	r3, {r2, r4, r5}
 d2c:	0b3b0b3a 	bleq	ec3a1c <startup-0x1f13c5e4>
 d30:	13490b39 	movtne	r0, #39737	; 0x9b39
 d34:	00001802 	andeq	r1, r0, r2, lsl #16
 d38:	3f002e16 	svccc	0x00002e16
 d3c:	3a0e0319 	bcc	3819a8 <startup-0x1fc7e658>
 d40:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 d44:	1119270b 	tstne	r9, fp, lsl #14
 d48:	40061201 	andmi	r1, r6, r1, lsl #4
 d4c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 d50:	Address 0x00000d50 is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	000001c0 	andeq	r0, r0, r0, asr #3
	...
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	05920002 	ldreq	r0, [r2, #2]
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	200001d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
  34:	00000208 	andeq	r0, r0, r8, lsl #4
	...
  40:	0000001c 	andeq	r0, r0, ip, lsl r0
  44:	09150002 	ldmdbeq	r5, {r1}
  48:	00040000 	andeq	r0, r4, r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	200003d8 	ldrdcs	r0, [r0], -r8
  54:	000000ba 	strheq	r0, [r0], -sl
	...
  60:	00000024 	andeq	r0, r0, r4, lsr #32
  64:	0a850002 	beq	fe140074 <a+0xde13c0e0>
  68:	00040000 	andeq	r0, r4, r0
  6c:	00000000 	andeq	r0, r0, r0
  70:	20000494 	mulcs	r0, r4, r4
  74:	0000036c 	andeq	r0, r0, ip, ror #6
  78:	20000000 	andcs	r0, r0, r0
  7c:	0000000c 	andeq	r0, r0, ip
	...
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	14fc0002 	ldrbtne	r0, [ip], #2
  90:	00040000 	andeq	r0, r4, r0
  94:	00000000 	andeq	r0, r0, r0
  98:	20000800 	andcs	r0, r0, r0, lsl #16
  9c:	00000cfc 	strdeq	r0, [r0], -ip
	...
  a8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ac:	24340002 	ldrtcs	r0, [r4], #-2
  b0:	00040000 	andeq	r0, r4, r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	200014fc 	strdcs	r1, [r0], -ip
  bc:	000021d8 	ldrdeq	r2, [r0], -r8
	...
  c8:	0000001c 	andeq	r0, r0, ip, lsl r0
  cc:	425a0002 	subsmi	r0, sl, #2
  d0:	00040000 	andeq	r0, r4, r0
  d4:	00000000 	andeq	r0, r0, r0
  d8:	200036d4 	ldrdcs	r3, [r0], -r4
  dc:	0000050a 	andeq	r0, r0, sl, lsl #10
	...
  e8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ec:	48d90002 	ldmmi	r9, {r1}^
  f0:	00040000 	andeq	r0, r4, r0
  f4:	00000000 	andeq	r0, r0, r0
  f8:	20003be0 	andcs	r3, r0, r0, ror #23
  fc:	00000168 	andeq	r0, r0, r8, ror #2
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	000002ca 	andeq	r0, r0, sl, asr #5
       4:	01f20003 	mvnseq	r0, r3
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
      18:	43010000 	movwmi	r0, #4096	; 0x1000
      1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
      20:	2f737265 	svccs	0x00737265
      24:	6e696d61 	cdpvs	13, 6, cr6, cr9, cr1, {3}
      28:	65442f72 	strbvs	r2, [r4, #-3954]	; 0xfffff08e
      2c:	6f746b73 	svcvs	0x00746b73
      30:	61642f70 	smcvs	17136	; 0x42f0
      34:	72706174 	rsbsvc	r6, r0, #116, 2
      38:	6b656a6f 	blvs	195a9fc <startup-0x1e6a5604>
      3c:	54532f74 	ldrbpl	r2, [r3], #-3956	; 0xfffff08c
      40:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
      44:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
      48:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
      4c:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
      50:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
      54:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
      58:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
      5c:	5f787834 	svcpl	0x00787834
      60:	50647453 	rsbpl	r7, r4, r3, asr r4
      64:	70697265 	rsbvc	r7, r9, r5, ror #4
      68:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
      6c:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
      70:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
      74:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
      78:	61657363 	cmnvs	r5, r3, ror #6
      7c:	635c7070 	cmpvs	ip, #112	; 0x70
      80:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
      84:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
      88:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; fffffec0 <a+0xdfffbf2c>
      8c:	63675c73 	cmnvs	r7, #29440	; 0x7300
      90:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
      94:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
      98:	6f6e2d6d 	svcvs	0x006e2d6d
      9c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
      a0:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
      a4:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
      a8:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
      ac:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
      b0:	00656e69 	rsbeq	r6, r5, r9, ror #28
      b4:	635c3a63 	cmpvs	ip, #405504	; 0x63000
      b8:	70616573 	rsbvc	r6, r1, r3, ror r5
      bc:	6f635c70 	svcvs	0x00635c70
      c0:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
      c4:	745c6574 	ldrbvc	r6, [ip], #-1396	; 0xfffffa8c
      c8:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
      cc:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
      d0:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
      d4:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
      d8:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
      dc:	61652d65 	cmnvs	r5, r5, ror #26
      e0:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
      e4:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
      e8:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
      ec:	43007379 	movwmi	r7, #889	; 0x379
      f0:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
      f4:	2f737265 	svccs	0x00737265
      f8:	6e696d61 	cdpvs	13, 6, cr6, cr9, cr1, {3}
      fc:	65442f72 	strbvs	r2, [r4, #-3954]	; 0xfffff08e
     100:	6f746b73 	svcvs	0x00746b73
     104:	61642f70 	smcvs	17136	; 0x42f0
     108:	72706174 	rsbsvc	r6, r0, #116, 2
     10c:	6b656a6f 	blvs	195aad0 <startup-0x1e6a5530>
     110:	54532f74 	ldrbpl	r2, [r3], #-3956	; 0xfffff08c
     114:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     118:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
     11c:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
     120:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     124:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
     128:	4d432f62 	stclmi	15, cr2, [r3, #-392]	; 0xfffffe78
     12c:	2f534953 	svccs	0x00534953
     130:	6c636e49 	stclvs	14, cr6, [r3], #-292	; 0xfffffedc
     134:	00656475 	rsbeq	r6, r5, r5, ror r4
     138:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff6fd <a+0xdfffb769>
     13c:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
     140:	696d612f 	stmdbvs	sp!, {r0, r1, r2, r3, r5, r8, sp, lr}^
     144:	442f726e 	strtmi	r7, [pc], #-622	; 14c <startup-0x1ffffeb4>
     148:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
     14c:	642f706f 	strtvs	r7, [pc], #-111	; 154 <startup-0x1ffffeac>
     150:	70617461 	rsbvc	r7, r1, r1, ror #8
     154:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xfffff08e
     158:	532f746b 			; <UNDEFINED> instruction: 0x532f746b
     15c:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     160:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
     164:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
     168:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     16c:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
     170:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
     174:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     178:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
     17c:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0xfffffca1
     180:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     184:	445f6870 	ldrbmi	r6, [pc], #-2160	; 18c <startup-0x1ffffe74>
     188:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
     18c:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
     190:	6d000063 	stcvs	0, cr0, [r0, #-396]	; 0xfffffe74
     194:	2e637369 	cdpcs	3, 6, cr7, cr3, cr9, {3}
     198:	00010063 	andeq	r0, r1, r3, rrx
     19c:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
     1a0:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
     1a4:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     1a8:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
     1ac:	00020068 	andeq	r0, r2, r8, rrx
     1b0:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
     1b4:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
     1b8:	0300682e 	movweq	r6, #2094	; 0x82e
     1bc:	6f630000 	svcvs	0x00630000
     1c0:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
     1c4:	682e346d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, ip, sp}
     1c8:	00000400 	andeq	r0, r0, r0, lsl #8
     1cc:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
     1d0:	735f6d65 	cmpvc	pc, #6464	; 0x1940
     1d4:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     1d8:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
     1dc:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
     1e0:	74730000 	ldrbtvc	r0, [r3], #-0
     1e4:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     1e8:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
     1ec:	00050068 	andeq	r0, r5, r8, rrx
     1f0:	73696d00 	cmnvc	r9, #0, 26
     1f4:	00682e63 	rsbeq	r2, r8, r3, ror #28
     1f8:	00000005 	andeq	r0, r0, r5
     1fc:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
     200:	00001002 	andeq	r1, r0, r2
     204:	00f60320 	rscseq	r0, r6, r0, lsr #6
     208:	4f060501 	svcmi	0x00060501
     20c:	05202305 	streq	r2, [r0, #-773]!	; 0xfffffcfb
     210:	01053c0e 	tsteq	r5, lr, lsl #24
     214:	900c0321 	andls	r0, ip, r1, lsr #6
     218:	054b0b05 	strbeq	r0, [fp, #-2821]	; 0xfffff4fb
     21c:	2e054a1f 			; <UNDEFINED> instruction: 0x2e054a1f
     220:	5116054a 	tstpl	r6, sl, asr #10
     224:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
     228:	1a053121 	bne	14c6b4 <startup-0x1feb394c>
     22c:	203d052e 	eorscs	r0, sp, lr, lsr #10
     230:	052e1105 	streq	r1, [lr, #-261]!	; 0xfffffefb
     234:	1505590c 	strne	r5, [r5, #-2316]	; 0xfffff6f4
     238:	660c0567 	strvs	r0, [ip], -r7, ror #10
     23c:	05302205 	ldreq	r2, [r0, #-517]!	; 0xfffffdfb
     240:	11053c46 	tstne	r5, r6, asr #24
     244:	3d2e053c 	cfstr32cc	mvfx0, [lr, #-240]!	; 0xffffff10
     248:	052e1505 	streq	r1, [lr, #-1285]!	; 0xfffffafb
     24c:	055a4a11 	ldrbeq	r4, [sl, #-2577]	; 0xfffff5ef
     250:	1d055a09 	vstrne	s10, [r5, #-36]	; 0xffffffdc
     254:	3c300520 	cfldr32cc	mvfx0, [r0], #-128	; 0xffffff80
     258:	05782905 	ldrbeq	r2, [r8, #-2309]!	; 0xfffff6fb
     25c:	09052e3b 	stmdbeq	r5, {r0, r1, r3, r4, r5, r9, sl, fp, sp}
     260:	201f053b 	andscs	r0, pc, fp, lsr r5	; <UNPREDICTABLE>
     264:	052e3105 	streq	r3, [lr, #-261]!	; 0xfffffefb
     268:	3a053d16 	bcc	14f6c8 <startup-0x1feb0938>
     26c:	0301052d 	movweq	r0, #5421	; 0x152d
     270:	29052e09 	stmdbcs	r5, {r0, r3, r9, sl, fp, sp}
     274:	2e3b051e 	mrccs	5, 1, r0, cr11, cr14, {0}
     278:	053b0905 	ldreq	r0, [fp, #-2309]!	; 0xfffff6fb
     27c:	3105201f 	tstcc	r5, pc, lsl r0
     280:	3d16052e 	cfldr32cc	mvfx0, [r6, #-184]	; 0xffffff48
     284:	052d3a05 	streq	r3, [sp, #-2565]!	; 0xfffff5fb
     288:	0c034d01 	stceq	13, cr4, [r3], {1}
     28c:	5d260590 	cfstr32pl	mvfx0, [r6, #-576]!	; 0xfffffdc0
     290:	054a0605 	strbeq	r0, [sl, #-1541]	; 0xfffff9fb
     294:	0d05201c 	stceq	0, cr2, [r5, #-112]	; 0xffffff90
     298:	2101052e 	tstcs	r1, lr, lsr #10
     29c:	05900d03 	ldreq	r0, [r0, #3331]	; 0xd03
     2a0:	0e059506 	cfsh32eq	mvfx9, mvfx5, #6
     2a4:	7a01054c 	bvc	417dc <startup-0x1ffbe824>
     2a8:	051e0e05 	ldreq	r0, [lr, #-3589]	; 0xfffff1fb
     2ac:	11052e1d 	tstne	r5, sp, lsl lr
     2b0:	200e052e 	andcs	r0, lr, lr, lsr #10
     2b4:	033e0105 	teqeq	lr, #1073741825	; 0x40000001
     2b8:	0605740b 	streq	r7, [r5], -fp, lsl #8
     2bc:	3e13054d 	cfmac32cc	mvfx0, mvfx3, mvfx13
     2c0:	056c0105 	strbeq	r0, [ip, #-261]!	; 0xfffffefb
     2c4:	01051e13 	tsteq	r5, r3, lsl lr
     2c8:	00060268 	andeq	r0, r6, r8, ror #4
     2cc:	03330101 	teqeq	r3, #1073741824	; 0x40000000
     2d0:	00030000 	andeq	r0, r3, r0
     2d4:	00000206 	andeq	r0, r0, r6, lsl #4
     2d8:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     2dc:	0101000d 	tsteq	r1, sp
     2e0:	00000101 	andeq	r0, r0, r1, lsl #2
     2e4:	00000100 	andeq	r0, r0, r0, lsl #2
     2e8:	2f3a4301 	svccs	0x003a4301
     2ec:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
     2f0:	6d612f73 	stclvs	15, cr2, [r1, #-460]!	; 0xfffffe34
     2f4:	2f726e69 	svccs	0x00726e69
     2f8:	6b736544 	blvs	1cd9810 <startup-0x1e3267f0>
     2fc:	2f706f74 	svccs	0x00706f74
     300:	61746164 	cmnvs	r4, r4, ror #2
     304:	6a6f7270 	bvs	1bdcccc <startup-0x1e423334>
     308:	2f746b65 	svccs	0x00746b65
     30c:	334d5453 	movtcc	r5, #54355	; 0xd453
     310:	5f344632 	svcpl	0x00344632
     314:	2f62696c 	svccs	0x0062696c
     318:	334d5453 	movtcc	r5, #54355	; 0xd453
     31c:	5f344632 	svcpl	0x00344632
     320:	2f62696c 	svccs	0x0062696c
     324:	334d5453 	movtcc	r5, #54355	; 0xd453
     328:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
     32c:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xfffff088
     330:	72655064 	rsbvc	r5, r5, #100	; 0x64
     334:	5f687069 	svcpl	0x00687069
     338:	76697244 	strbtvc	r7, [r9], -r4, asr #4
     33c:	732f7265 			; <UNDEFINED> instruction: 0x732f7265
     340:	63006372 	movwvs	r6, #882	; 0x372
     344:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
     348:	70706165 	rsbsvc	r6, r0, r5, ror #2
     34c:	646f635c 	strbtvs	r6, [pc], #-860	; 354 <startup-0x1ffffcac>
     350:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
     354:	6f745c65 	svcvs	0x00745c65
     358:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
     35c:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
     360:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
     364:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     368:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
     36c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
     370:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
     374:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     378:	616d5c65 	cmnvs	sp, r5, ror #24
     37c:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
     380:	3a630065 	bcc	18c051c <startup-0x1e73fae4>
     384:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
     388:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
     38c:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
     390:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
     394:	6f6f745c 	svcvs	0x006f745c
     398:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
     39c:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
     3a0:	615c6d72 	cmpvs	ip, r2, ror sp
     3a4:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
     3a8:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
     3ac:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     3b0:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
     3b4:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
     3b8:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
     3bc:	2f3a4300 	svccs	0x003a4300
     3c0:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
     3c4:	6d612f73 	stclvs	15, cr2, [r1, #-460]!	; 0xfffffe34
     3c8:	2f726e69 	svccs	0x00726e69
     3cc:	6b736544 	blvs	1cd98e4 <startup-0x1e32671c>
     3d0:	2f706f74 	svccs	0x00706f74
     3d4:	61746164 	cmnvs	r4, r4, ror #2
     3d8:	6a6f7270 	bvs	1bdcda0 <startup-0x1e423260>
     3dc:	2f746b65 	svccs	0x00746b65
     3e0:	334d5453 	movtcc	r5, #54355	; 0xd453
     3e4:	5f344632 	svcpl	0x00344632
     3e8:	2f62696c 	svccs	0x0062696c
     3ec:	334d5453 	movtcc	r5, #54355	; 0xd453
     3f0:	5f344632 	svcpl	0x00344632
     3f4:	2f62696c 	svccs	0x0062696c
     3f8:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
     3fc:	6e492f53 	mcrvs	15, 2, r2, cr9, cr3, {2}
     400:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     404:	3a430065 	bcc	10c05a0 <startup-0x1ef3fa60>
     408:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
     40c:	612f7372 			; <UNDEFINED> instruction: 0x612f7372
     410:	726e696d 	rsbvc	r6, lr, #1785856	; 0x1b4000
     414:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
     418:	706f746b 	rsbvc	r7, pc, fp, ror #8
     41c:	7461642f 	strbtvc	r6, [r1], #-1071	; 0xfffffbd1
     420:	6f727061 	svcvs	0x00727061
     424:	746b656a 	strbtvc	r6, [fp], #-1386	; 0xfffffa96
     428:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     42c:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
     430:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     434:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     438:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
     43c:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     440:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     444:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
     448:	535f7878 	cmppl	pc, #120, 16	; 0x780000
     44c:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0xfffffb8c
     450:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     454:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
     458:	2f726576 	svccs	0x00726576
     45c:	00636e69 	rsbeq	r6, r3, r9, ror #28
     460:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     464:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
     468:	655f7878 	ldrbvs	r7, [pc, #-2168]	; fffffbf8 <a+0xdfffbc64>
     46c:	2e697478 	mcrcs	4, 3, r7, cr9, cr8, {3}
     470:	00010063 	andeq	r0, r1, r3, rrx
     474:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
     478:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
     47c:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     480:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
     484:	00020068 	andeq	r0, r2, r8, rrx
     488:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
     48c:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
     490:	0300682e 	movweq	r6, #2094	; 0x82e
     494:	6f630000 	svcvs	0x00630000
     498:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
     49c:	682e346d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, ip, sp}
     4a0:	00000400 	andeq	r0, r0, r0, lsl #8
     4a4:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
     4a8:	735f6d65 	cmpvc	pc, #6464	; 0x1940
     4ac:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     4b0:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
     4b4:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
     4b8:	74730000 	ldrbtvc	r0, [r3], #-0
     4bc:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     4c0:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
     4c4:	00050068 	andeq	r0, r5, r8, rrx
     4c8:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     4cc:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
     4d0:	655f7878 	ldrbvs	r7, [pc, #-2168]	; fffffc60 <a+0xdfffbccc>
     4d4:	2e697478 	mcrcs	4, 3, r7, cr9, cr8, {3}
     4d8:	00050068 	andeq	r0, r5, r8, rrx
     4dc:	01050000 	mrseq	r0, (UNDEF: 5)
     4e0:	d0020500 	andle	r0, r2, r0, lsl #10
     4e4:	03200001 			; <UNDEFINED> instruction: 0x03200001
     4e8:	050100ee 	streq	r0, [r1, #-238]	; 0xffffff12
     4ec:	0d052f07 	stceq	15, cr2, [r5, #-28]	; 0xffffffe4
     4f0:	2f070520 	svccs	0x00070520
     4f4:	05200d05 	streq	r0, [r0, #-3333]!	; 0xfffff2fb
     4f8:	0e052f07 	cdpeq	15, 0, cr2, cr5, cr7, {0}
     4fc:	2f070520 	svccs	0x00070520
     500:	05200e05 	streq	r0, [r0, #-3589]!	; 0xfffff1fb
     504:	0c052f07 	stceq	15, cr2, [r5], {7}
     508:	2f010520 	svccs	0x00010520
     50c:	05740a03 	ldrbeq	r0, [r4, #-2563]!	; 0xfffff5fd
     510:	07054b0c 	streq	r4, [r5, -ip, lsl #22]
     514:	30160536 	andscc	r0, r6, r6, lsr r5
     518:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
     51c:	2205310f 	andcs	r3, r5, #-1073741821	; 0xc0000003
     520:	2e12052e 	cfmul64cs	mvdx0, mvdx2, mvdx14
     524:	3d200f05 	stccc	15, cr0, [r0, #-20]!	; 0xffffffec
     528:	052e2205 	streq	r2, [lr, #-517]!	; 0xfffffdfb
     52c:	0f052e12 	svceq	0x00052e12
     530:	3e1b0520 	cfmul64cc	mvdx0, mvdx11, mvdx0
     534:	053c0905 	ldreq	r0, [ip, #-2309]!	; 0xfffff6fb
     538:	2e053e1c 	mcrcs	14, 0, r3, cr5, cr12, {0}
     53c:	2e1c052e 	cfmul64cs	mvdx0, mvdx12, mvdx14
     540:	053f1005 	ldreq	r1, [pc, #-5]!	; 543 <startup-0x1ffffabd>
     544:	13052e23 	movwne	r2, #24099	; 0x5e23
     548:	2010052e 	andscs	r0, r0, lr, lsr #10
     54c:	2e23053d 	mcrcs	5, 1, r0, cr3, cr13, {1}
     550:	052e1305 	streq	r1, [lr, #-773]!	; 0xfffffcfb
     554:	18052010 	stmdane	r5, {r4, sp}
     558:	2e08053f 	mcrcs	5, 0, r0, cr8, cr15, {1}
     55c:	05311205 	ldreq	r1, [r1, #-517]!	; 0xfffffdfb
     560:	12052e24 	andne	r2, r5, #36, 28	; 0x240
     564:	24053d2e 	strcs	r3, [r5], #-3374	; 0xfffff2d2
     568:	2e12052e 	cfmul64cs	mvdx0, mvdx2, mvdx14
     56c:	11030105 	tstne	r3, r5, lsl #2
     570:	030b053c 	movweq	r0, #46396	; 0xb53c
     574:	1d052073 	stcne	0, cr2, [r5, #-460]	; 0xfffffe34
     578:	3c0b052f 	cfstr32cc	mvfx0, [fp], {47}	; 0x2f
     57c:	053e1e05 	ldreq	r1, [lr, #-3589]!	; 0xfffff1fb
     580:	1e052e30 	mcrne	14, 0, r2, cr5, cr0, {1}
     584:	0301052e 	movweq	r0, #5422	; 0x152e
     588:	1b053c0a 	blne	14f5b8 <startup-0x1feb0a48>
     58c:	3c09051b 	cfstr32cc	mvfx0, [r9], {27}
     590:	053f1c05 	ldreq	r1, [pc, #-3077]!	; fffff993 <a+0xdfffb9ff>
     594:	1f052e2f 	svcne	0x00052e2f
     598:	201c052e 	andscs	r0, ip, lr, lsr #10
     59c:	033e0105 	teqeq	lr, #1073741825	; 0x40000001
     5a0:	1e056609 	cfmadd32ne	mvax0, mvfx6, mvfx5, mvfx9
     5a4:	21053d4b 	tstcs	r5, fp, asr #26
     5a8:	01053d3d 	tsteq	r5, sp, lsr sp
     5ac:	4a0a033d 	bmi	2812a8 <startup-0x1fd7ed58>
     5b0:	054e0f05 	strbeq	r0, [lr, #-3845]	; 0xfffff0fb
     5b4:	19036701 	stmdbne	r3, {r0, r8, r9, sl, sp, lr}
     5b8:	4b0e0566 	blmi	381b58 <startup-0x1fc7e4a8>
     5bc:	054e0c05 	strbeq	r0, [lr, #-3077]	; 0xfffff3fb
     5c0:	06052e11 			; <UNDEFINED> instruction: 0x06052e11
     5c4:	220f052e 	andcs	r0, pc, #192937984	; 0xb800000
     5c8:	4c0a054e 	cfstr32mi	mvfx0, [sl], {78}	; 0x4e
     5cc:	033d0105 	teqeq	sp, #1073741825	; 0x40000001
     5d0:	07056609 	streq	r6, [r5, -r9, lsl #12]
     5d4:	200c054e 	andcs	r0, ip, lr, asr #10
     5d8:	032f0105 			; <UNDEFINED> instruction: 0x032f0105
     5dc:	0e057409 	cdpeq	4, 0, cr7, cr5, cr9, {0}
     5e0:	4e0c054b 	cfsh32mi	mvfx0, mvfx12, #43
     5e4:	052e1105 	streq	r1, [lr, #-261]!	; 0xfffffefb
     5e8:	0f052e06 	svceq	0x00052e06
     5ec:	0a054e22 	beq	153e7c <startup-0x1feac184>
     5f0:	3e01054c 	cfsh32cc	mvfx0, mvfx1, #44
     5f4:	05660903 	strbeq	r0, [r6, #-2307]!	; 0xfffff6fd
     5f8:	0c054e07 	stceq	14, cr4, [r5], {7}
     5fc:	2f010520 	svccs	0x00010520
     600:	01000702 	tsteq	r0, r2, lsl #14
     604:	0000da01 	andeq	sp, r0, r1, lsl #20
     608:	4a000300 	bmi	1210 <startup-0x1fffedf0>
     60c:	02000000 	andeq	r0, r0, #0
     610:	0d0efb01 	vstreq	d15, [lr, #-4]
     614:	01010100 	mrseq	r0, (UNDEF: 17)
     618:	00000001 	andeq	r0, r0, r1
     61c:	01000001 	tsteq	r0, r1
     620:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffffbe5 <a+0xdfffbc51>
     624:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
     628:	696d612f 	stmdbvs	sp!, {r0, r1, r2, r3, r5, r8, sp, lr}^
     62c:	442f726e 	strtmi	r7, [pc], #-622	; 634 <startup-0x1ffff9cc>
     630:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
     634:	642f706f 	strtvs	r7, [pc], #-111	; 63c <startup-0x1ffff9c4>
     638:	70617461 	rsbvc	r7, r1, r1, ror #8
     63c:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xfffff08e
     640:	632f746b 			; <UNDEFINED> instruction: 0x632f746b
     644:	5f746168 	svcpl	0x00746168
     648:	00707061 	rsbseq	r7, r0, r1, rrx
     64c:	61737500 	cmnvs	r3, r0, lsl #10
     650:	632e7472 			; <UNDEFINED> instruction: 0x632e7472
     654:	00000100 	andeq	r0, r0, r0, lsl #2
     658:	00190500 	andseq	r0, r9, r0, lsl #10
     65c:	03d80205 	bicseq	r0, r8, #1342177280	; 0x50000000
     660:	14032000 	strne	r2, [r3], #-0
     664:	680b0501 	stmdavs	fp, {r0, r8, sl}
     668:	02001405 	andeq	r1, r0, #83886080	; 0x5000000
     66c:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
     670:	04020019 	streq	r0, [r2], #-25	; 0xffffffe7
     674:	0b053c01 	bleq	14f680 <startup-0x1feb0980>
     678:	01040200 	mrseq	r0, R12_usr
     67c:	1205223c 	andne	r2, r5, #60, 4	; 0xc0000003
     680:	3c100520 	cfldr32cc	mvfx0, [r0], {32}
     684:	05210705 	streq	r0, [r1, #-1797]!	; 0xfffff8fb
     688:	01054b09 	tsteq	r5, r9, lsl #22
     68c:	6816053d 	ldmdavs	r6, {r0, r2, r3, r4, r5, r8, sl}
     690:	05301005 	ldreq	r1, [r0, #-5]!
     694:	07053c15 	smladeq	r5, r5, ip, r3
     698:	2110053c 	tstcs	r0, ip, lsr r5
     69c:	052f1905 	streq	r1, [pc, #-2309]!	; fffffd9f <a+0xdfffbe0b>
     6a0:	01053c0c 	tsteq	r5, ip, lsl #24
     6a4:	5a150521 	bpl	541b30 <startup-0x1fabe4d0>
     6a8:	05300a05 	ldreq	r0, [r0, #-2565]!	; 0xfffff5fb
     6ac:	04020013 	streq	r0, [r2], #-19	; 0xffffffed
     6b0:	18052001 	stmdane	r5, {r0, sp}
     6b4:	01040200 	mrseq	r0, R12_usr
     6b8:	000a053c 	andeq	r0, sl, ip, lsr r5
     6bc:	3c010402 	cfstrscc	mvf0, [r1], {2}
     6c0:	05211905 	streq	r1, [r1, #-2309]!	; 0xfffff6fb
     6c4:	01053c0c 	tsteq	r5, ip, lsl #24
     6c8:	68140521 	ldmdavs	r4, {r0, r5, r8, sl}
     6cc:	054b0b05 	strbeq	r0, [fp, #-2821]	; 0xfffff4fb
     6d0:	09052115 	stmdbeq	r5, {r0, r2, r4, r8, sp}
     6d4:	490c053c 	stmdbmi	ip, {r2, r3, r4, r5, r8, sl}
     6d8:	052e0b05 	streq	r0, [lr, #-2821]!	; 0xfffff4fb
     6dc:	05023001 	streq	r3, [r2, #-1]
     6e0:	8e010100 	adfhis	f0, f1, f0
     6e4:	03000003 	movweq	r0, #3
     6e8:	00022600 	andeq	r2, r2, r0, lsl #12
     6ec:	fb010200 	blx	40ef6 <startup-0x1ffbf10a>
     6f0:	01000d0e 	tsteq	r0, lr, lsl #26
     6f4:	00010101 	andeq	r0, r1, r1, lsl #2
     6f8:	00010000 	andeq	r0, r1, r0
     6fc:	3a430100 	bcc	10c0b04 <startup-0x1ef3f4fc>
     700:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
     704:	612f7372 			; <UNDEFINED> instruction: 0x612f7372
     708:	726e696d 	rsbvc	r6, lr, #1785856	; 0x1b4000
     70c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
     710:	706f746b 	rsbvc	r7, pc, fp, ror #8
     714:	7461642f 	strbtvc	r6, [r1], #-1071	; 0xfffffbd1
     718:	6f727061 	svcvs	0x00727061
     71c:	746b656a 	strbtvc	r6, [fp], #-1386	; 0xfffffa96
     720:	7265702f 	rsbvc	r7, r5, #47	; 0x2f
     724:	70687069 	rsbvc	r7, r8, r9, rrx
     728:	70697265 	rsbvc	r7, r9, r5, ror #4
     72c:	61726568 	cmnvs	r2, r8, ror #10
     730:	6e755f6c 	cdpvs	15, 7, cr5, cr5, cr12, {3}
     734:	00327469 	eorseq	r7, r2, r9, ror #8
     738:	635c3a63 	cmpvs	ip, #405504	; 0x63000
     73c:	70616573 	rsbvc	r6, r1, r3, ror r5
     740:	6f635c70 	svcvs	0x00635c70
     744:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
     748:	745c6574 	ldrbvc	r6, [ip], #-1396	; 0xfffffa8c
     74c:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
     750:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
     754:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
     758:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
     75c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
     760:	61652d65 	cmnvs	r5, r5, ror #26
     764:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
     768:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
     76c:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
     770:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
     774:	6300656e 	movwvs	r6, #1390	; 0x56e
     778:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
     77c:	70706165 	rsbsvc	r6, r0, r5, ror #2
     780:	646f635c 	strbtvs	r6, [pc], #-860	; 788 <startup-0x1ffff878>
     784:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
     788:	6f745c65 	svcvs	0x00745c65
     78c:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
     790:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
     794:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
     798:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     79c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
     7a0:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
     7a4:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
     7a8:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     7ac:	79735c65 	ldmdbvc	r3!, {r0, r2, r5, r6, sl, fp, ip, lr}^
     7b0:	3a430073 	bcc	10c0984 <startup-0x1ef3f67c>
     7b4:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
     7b8:	612f7372 			; <UNDEFINED> instruction: 0x612f7372
     7bc:	726e696d 	rsbvc	r6, lr, #1785856	; 0x1b4000
     7c0:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
     7c4:	706f746b 	rsbvc	r7, pc, fp, ror #8
     7c8:	7461642f 	strbtvc	r6, [r1], #-1071	; 0xfffffbd1
     7cc:	6f727061 	svcvs	0x00727061
     7d0:	746b656a 	strbtvc	r6, [fp], #-1386	; 0xfffffa96
     7d4:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     7d8:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
     7dc:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     7e0:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
     7e4:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
     7e8:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     7ec:	534d432f 	movtpl	r4, #54063	; 0xd32f
     7f0:	492f5349 	stmdbmi	pc!, {r0, r3, r6, r8, r9, ip, lr}	; <UNPREDICTABLE>
     7f4:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
     7f8:	43006564 	movwmi	r6, #1380	; 0x564
     7fc:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
     800:	2f737265 	svccs	0x00737265
     804:	6e696d61 	cdpvs	13, 6, cr6, cr9, cr1, {3}
     808:	65442f72 	strbvs	r2, [r4, #-3954]	; 0xfffff08e
     80c:	6f746b73 	svcvs	0x00746b73
     810:	61642f70 	smcvs	17136	; 0x42f0
     814:	72706174 	rsbsvc	r6, r0, #116, 2
     818:	6b656a6f 	blvs	195b1dc <startup-0x1e6a4e24>
     81c:	54532f74 	ldrbpl	r2, [r3], #-3956	; 0xfffff08c
     820:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     824:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
     828:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
     82c:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     830:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
     834:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
     838:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     83c:	5f787834 	svcpl	0x00787834
     840:	50647453 	rsbpl	r7, r4, r3, asr r4
     844:	70697265 	rsbvc	r7, r9, r5, ror #4
     848:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
     84c:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
     850:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     854:	74730000 	ldrbtvc	r0, [r3], #-0
     858:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
     85c:	00632e70 	rsbeq	r2, r3, r0, ror lr
     860:	5f000001 	svcpl	0x00000001
     864:	61666564 	cmnvs	r6, r4, ror #10
     868:	5f746c75 	svcpl	0x00746c75
     86c:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
     870:	00682e73 	rsbeq	r2, r8, r3, ror lr
     874:	5f000002 	svcpl	0x00000002
     878:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
     87c:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
     880:	00000300 	andeq	r0, r0, r0, lsl #6
     884:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xfffff09d
     888:	346d635f 	strbtcc	r6, [sp], #-863	; 0xfffffca1
     88c:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
     890:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
     894:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
     898:	6d74735f 	ldclvs	3, cr7, [r4, #-380]!	; 0xfffffe84
     89c:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
     8a0:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
     8a4:	00000500 	andeq	r0, r0, r0, lsl #10
     8a8:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     8ac:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     8b0:	00682e78 	rsbeq	r2, r8, r8, ror lr
     8b4:	73000005 	movwvc	r0, #5
     8b8:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     8bc:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
     8c0:	6970675f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, sp, lr}^
     8c4:	00682e6f 	rsbeq	r2, r8, pc, ror #28
     8c8:	73000005 	movwvc	r0, #5
     8cc:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     8d0:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
     8d4:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
     8d8:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
     8dc:	696d0000 	stmdbvs	sp!, {}^	; <UNPREDICTABLE>
     8e0:	682e6373 	stmdavs	lr!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}
     8e4:	00000500 	andeq	r0, r0, r0, lsl #10
     8e8:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     8ec:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     8f0:	78655f78 	stmdavc	r5!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     8f4:	682e6974 	stmdavs	lr!, {r2, r4, r5, r6, r8, fp, sp, lr}
     8f8:	00000500 	andeq	r0, r0, r0, lsl #10
     8fc:	69726570 	ldmdbvs	r2!, {r4, r5, r6, r8, sl, sp, lr}^
     900:	72656870 	rsbvc	r6, r5, #112, 16	; 0x700000
     904:	755f6c61 	ldrbvc	r6, [pc, #-3169]	; fffffcab <a+0xdfffbd17>
     908:	3274696e 	rsbscc	r6, r4, #1802240	; 0x1b8000
     90c:	0100682e 	tsteq	r0, lr, lsr #16
     910:	05000000 	streq	r0, [r0, #-0]
     914:	02050001 	andeq	r0, r5, #1
     918:	20000000 	andcs	r0, r0, r0
     91c:	13010e03 	movwne	r0, #7683	; 0x1e03
     920:	212f2121 			; <UNDEFINED> instruction: 0x212f2121
     924:	01000302 	tsteq	r0, r2, lsl #6
     928:	00150501 	andseq	r0, r5, r1, lsl #10
     92c:	04940205 	ldreq	r0, [r4], #517	; 0x205
     930:	21032000 	mrscs	r2, (UNDEF: 3)
     934:	3f030501 	svccc	0x00030501
     938:	054b2705 	strbeq	r2, [fp, #-1797]	; 0xfffff8fb
     93c:	16053c15 			; <UNDEFINED> instruction: 0x16053c15
     940:	3d17052f 	cfldr32cc	mvfx0, [r7, #-188]	; 0xffffff44
     944:	053d1605 	ldreq	r1, [sp, #-1541]!	; 0xfffff9fb
     948:	05763d03 	ldrbeq	r3, [r6, #-3331]!	; 0xfffff2fd
     94c:	42054b27 	andmi	r4, r5, #39936	; 0x9c00
     950:	2e31052e 	cdpcs	5, 3, cr0, cr1, cr14, {1}
     954:	053c1505 	ldreq	r1, [ip, #-1285]!	; 0xfffffafb
     958:	17052f16 	smladne	r5, r6, pc, r2	; <UNPREDICTABLE>
     95c:	3d16053d 	cfldr32cc	mvfx0, [r6, #-244]	; 0xffffff0c
     960:	053d0305 	ldreq	r0, [sp, #-773]!	; 0xfffffcfb
     964:	1c056801 	stcne	8, cr6, [r5], {1}
     968:	3e0205a2 	cfsh32cc	mvfx0, mvfx2, #-46
     96c:	054c1a05 	strbeq	r1, [ip, #-2565]	; 0xfffff5fb
     970:	1e053d17 	mcrne	13, 0, r3, cr5, cr7, {0}
     974:	3d1c054b 	cfldr32cc	mvfx0, [ip, #-300]	; 0xfffffed4
     978:	753d0205 	ldrvc	r0, [sp, #-517]!	; 0xfffffdfb
     97c:	05670105 	strbeq	r0, [r7, #-261]!	; 0xfffffefb
     980:	08054d22 	stmdaeq	r5, {r1, r5, r8, sl, fp, lr}
     984:	9006052f 	andls	r0, r6, pc, lsr #10
     988:	05210405 	streq	r0, [r1, #-1029]!	; 0xfffffbfb
     98c:	01054d03 	tsteq	r5, r3, lsl #26
     990:	8622053d 			; <UNDEFINED> instruction: 0x8622053d
     994:	052f0305 	streq	r0, [pc, #-773]!	; 697 <startup-0x1ffff969>
     998:	03054b09 	movweq	r4, #23305	; 0x5b09
     99c:	43040582 	movwmi	r0, #17794	; 0x4582
     9a0:	053d0105 	ldreq	r0, [sp, #-261]!	; 0xfffffefb
     9a4:	0205a114 	andeq	sl, r5, #20, 2
     9a8:	0505693e 	streq	r6, [r5, #-2366]	; 0xfffff6c2
     9ac:	4c16054b 	cfldr32mi	mvfx0, [r6], {75}	; 0x4b
     9b0:	054b1905 	strbeq	r1, [fp, #-2309]	; 0xfffff6fb
     9b4:	053d3d1c 	ldreq	r3, [sp, #-3356]!	; 0xfffff2e4
     9b8:	16053d05 	strne	r3, [r5], -r5, lsl #26
     9bc:	4b19055a 	blmi	641f2c <startup-0x1f9be0d4>
     9c0:	3d3d1c05 	ldccc	12, cr1, [sp, #-20]!	; 0xffffffec
     9c4:	4d3d0505 	cfldr32mi	mvfx0, [sp, #-20]!	; 0xffffffec
     9c8:	055a1f05 	ldrbeq	r1, [sl, #-3845]	; 0xfffff0fb
     9cc:	2a053d31 	bcs	14fe98 <startup-0x1feb0168>
     9d0:	3d22053d 	cfstr32cc	mvfx0, [r2, #-244]!	; 0xffffff0c
     9d4:	053d0505 	ldreq	r0, [sp, #-1285]!	; 0xfffffafb
     9d8:	23054c02 	movwcs	r4, #23554	; 0x5c02
     9dc:	301c0520 	andscc	r0, ip, r0, lsr #10
     9e0:	053d3105 	ldreq	r3, [sp, #-261]!	; 0xfffffefb
     9e4:	22053d2a 	andcs	r3, r5, #2688	; 0xa80
     9e8:	3d05053d 	cfstr32cc	mvfx0, [r5, #-244]	; 0xffffff0c
     9ec:	054c0405 	strbeq	r0, [ip, #-1029]	; 0xfffffbfb
     9f0:	01052025 	tsteq	r5, r5, lsr #32
     9f4:	ca1b0533 	bgt	6c1ec8 <startup-0x1f93e138>
     9f8:	052f0305 	streq	r0, [pc, #-773]!	; 6fb <startup-0x1ffff905>
     9fc:	08056707 	stmdaeq	r5, {r0, r1, r2, r8, r9, sl, sp, lr}
     a00:	01040200 	mrseq	r0, R12_usr
     a04:	00070520 	andeq	r0, r7, r0, lsr #10
     a08:	66010402 	strvs	r0, [r1], -r2, lsl #8
     a0c:	5a3e0205 	bpl	f81228 <startup-0x1f07edd8>
     a10:	05670705 	strbeq	r0, [r7, #-1797]!	; 0xfffff8fb
     a14:	04020008 	streq	r0, [r2], #-8
     a18:	07052001 	streq	r2, [r5, -r1]
     a1c:	01040200 	mrseq	r0, R12_usr
     a20:	4c020566 	cfstr32mi	mvfx0, [r2], {102}	; 0x66
     a24:	055c0705 	ldrbeq	r0, [ip, #-1797]	; 0xfffff8fb
     a28:	0e052110 	flteqs	f5, r2
     a2c:	2d0a0566 	cfstr32cs	mvfx0, [sl, #-408]	; 0xfffffe68
     a30:	24900705 	ldrcs	r0, [r0], #1797	; 0x705
     a34:	05210e05 	streq	r0, [r1, #-3589]!	; 0xfffff1fb
     a38:	0805660c 	stmdaeq	r5, {r2, r3, r9, sl, sp, lr}
     a3c:	9007052d 	andls	r0, r7, sp, lsr #10
     a40:	05261005 	streq	r1, [r6, #-5]!
     a44:	19054a04 	stmdbne	r5, {r2, r9, fp, lr}
     a48:	6636052f 	ldrtvs	r0, [r6], -pc, lsr #10
     a4c:	05660d05 	strbeq	r0, [r6, #-3333]!	; 0xfffff2fb
     a50:	27053e19 	smladcs	r5, r9, lr, r3
     a54:	660d0558 			; <UNDEFINED> instruction: 0x660d0558
     a58:	05302805 	ldreq	r2, [r0, #-2053]!	; 0xfffff7fb
     a5c:	0205821c 	andeq	r8, r5, #28, 4	; 0xc0000001
     a60:	eb01052f 	bl	41f24 <startup-0x1ffbe0dc>
     a64:	4c300205 	lfmmi	f0, 4, [r0], #-20	; 0xffffffec
     a68:	002f2f2f 	eoreq	r2, pc, pc, lsr #30
     a6c:	87010402 	strhi	r0, [r1, -r2, lsl #8]
     a70:	01000802 	tsteq	r0, r2, lsl #16
     a74:	0007d501 	andeq	sp, r7, r1, lsl #10
     a78:	04000300 	streq	r0, [r0], #-768	; 0xfffffd00
     a7c:	02000002 	andeq	r0, r0, #2
     a80:	0d0efb01 	vstreq	d15, [lr, #-4]
     a84:	01010100 	mrseq	r0, (UNDEF: 17)
     a88:	00000001 	andeq	r0, r0, r1
     a8c:	01000001 	tsteq	r0, r1
     a90:	552f3a43 	strpl	r3, [pc, #-2627]!	; 55 <startup-0x1fffffab>
     a94:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
     a98:	696d612f 	stmdbvs	sp!, {r0, r1, r2, r3, r5, r8, sp, lr}^
     a9c:	442f726e 	strtmi	r7, [pc], #-622	; aa4 <startup-0x1ffff55c>
     aa0:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
     aa4:	642f706f 	strtvs	r7, [pc], #-111	; aac <startup-0x1ffff554>
     aa8:	70617461 	rsbvc	r7, r1, r1, ror #8
     aac:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xfffff08e
     ab0:	532f746b 			; <UNDEFINED> instruction: 0x532f746b
     ab4:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     ab8:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
     abc:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
     ac0:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     ac4:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
     ac8:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
     acc:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     ad0:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
     ad4:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0xfffffca1
     ad8:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     adc:	445f6870 	ldrbmi	r6, [pc], #-2160	; ae4 <startup-0x1ffff51c>
     ae0:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
     ae4:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
     ae8:	3a630063 	bcc	18c0c7c <startup-0x1e73f384>
     aec:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
     af0:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
     af4:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
     af8:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
     afc:	6f6f745c 	svcvs	0x006f745c
     b00:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
     b04:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
     b08:	615c6d72 	cmpvs	ip, r2, ror sp
     b0c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
     b10:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
     b14:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     b18:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
     b1c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
     b20:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
     b24:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
     b28:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
     b2c:	61657363 	cmnvs	r5, r3, ror #6
     b30:	635c7070 	cmpvs	ip, #112	; 0x70
     b34:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
     b38:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
     b3c:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 974 <startup-0x1ffff68c>
     b40:	63675c73 	cmnvs	r7, #29440	; 0x7300
     b44:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
     b48:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
     b4c:	6f6e2d6d 	svcvs	0x006e2d6d
     b50:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
     b54:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
     b58:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     b5c:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
     b60:	00737973 	rsbseq	r7, r3, r3, ror r9
     b64:	552f3a43 	strpl	r3, [pc, #-2627]!	; 129 <startup-0x1ffffed7>
     b68:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
     b6c:	696d612f 	stmdbvs	sp!, {r0, r1, r2, r3, r5, r8, sp, lr}^
     b70:	442f726e 	strtmi	r7, [pc], #-622	; b78 <startup-0x1ffff488>
     b74:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
     b78:	642f706f 	strtvs	r7, [pc], #-111	; b80 <startup-0x1ffff480>
     b7c:	70617461 	rsbvc	r7, r1, r1, ror #8
     b80:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xfffff08e
     b84:	532f746b 			; <UNDEFINED> instruction: 0x532f746b
     b88:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     b8c:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
     b90:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
     b94:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     b98:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
     b9c:	432f6269 			; <UNDEFINED> instruction: 0x432f6269
     ba0:	5349534d 	movtpl	r5, #37709	; 0x934d
     ba4:	636e492f 	cmnvs	lr, #770048	; 0xbc000
     ba8:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
     bac:	2f3a4300 	svccs	0x003a4300
     bb0:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
     bb4:	6d612f73 	stclvs	15, cr2, [r1, #-460]!	; 0xfffffe34
     bb8:	2f726e69 	svccs	0x00726e69
     bbc:	6b736544 	blvs	1cda0d4 <startup-0x1e325f2c>
     bc0:	2f706f74 	svccs	0x00706f74
     bc4:	61746164 	cmnvs	r4, r4, ror #2
     bc8:	6a6f7270 	bvs	1bdd590 <startup-0x1e422a70>
     bcc:	2f746b65 	svccs	0x00746b65
     bd0:	334d5453 	movtcc	r5, #54355	; 0xd453
     bd4:	5f344632 	svcpl	0x00344632
     bd8:	2f62696c 	svccs	0x0062696c
     bdc:	334d5453 	movtcc	r5, #54355	; 0xd453
     be0:	5f344632 	svcpl	0x00344632
     be4:	2f62696c 	svccs	0x0062696c
     be8:	334d5453 	movtcc	r5, #54355	; 0xd453
     bec:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
     bf0:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xfffff088
     bf4:	72655064 	rsbvc	r5, r5, #100	; 0x64
     bf8:	5f687069 	svcpl	0x00687069
     bfc:	76697244 	strbtvc	r7, [r9], -r4, asr #4
     c00:	692f7265 	stmdbvs	pc!, {r0, r2, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
     c04:	0000636e 	andeq	r6, r0, lr, ror #6
     c08:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     c0c:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     c10:	63725f78 	cmnvs	r2, #120, 30	; 0x1e0
     c14:	00632e63 	rsbeq	r2, r3, r3, ror #28
     c18:	5f000001 	svcpl	0x00000001
     c1c:	61666564 	cmnvs	r6, r4, ror #10
     c20:	5f746c75 	svcpl	0x00746c75
     c24:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
     c28:	00682e73 	rsbeq	r2, r8, r3, ror lr
     c2c:	5f000002 	svcpl	0x00000002
     c30:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
     c34:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
     c38:	00000300 	andeq	r0, r0, r0, lsl #6
     c3c:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xfffff09d
     c40:	346d635f 	strbtcc	r6, [sp], #-863	; 0xfffffca1
     c44:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
     c48:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
     c4c:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
     c50:	6d74735f 	ldclvs	3, cr7, [r4, #-380]!	; 0xfffffe84
     c54:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
     c58:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
     c5c:	00000500 	andeq	r0, r0, r0, lsl #10
     c60:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     c64:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     c68:	00682e78 	rsbeq	r2, r8, r8, ror lr
     c6c:	73000005 	movwvc	r0, #5
     c70:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     c74:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
     c78:	6363725f 	cmnvs	r3, #-268435451	; 0xf0000005
     c7c:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
     c80:	05000000 	streq	r0, [r0, #-0]
     c84:	02050001 	andeq	r0, r5, #1
     c88:	20000800 	andcs	r0, r0, r0, lsl #16
     c8c:	0101e103 	tsteq	r1, r3, lsl #2
     c90:	05300b05 	ldreq	r0, [r0, #-2821]!	; 0xfffff4fb
     c94:	0d056906 	vstreq.16	s12, [r5, #-12]	; <UNPREDICTABLE>
     c98:	310b0520 	tstcc	fp, r0, lsr #10
     c9c:	05690605 	strbeq	r0, [r9, #-1541]!	; 0xfffff9fb
     ca0:	06052010 			; <UNDEFINED> instruction: 0x06052010
     ca4:	20130532 	andscs	r0, r3, r2, lsr r5
     ca8:	05410605 	strbeq	r0, [r1, #-1541]	; 0xfffff9fb
     cac:	0b052013 	bleq	148d00 <startup-0x1feb7300>
     cb0:	69060540 	stmdbvs	r6, {r6, r8, sl}
     cb4:	05200c05 	streq	r0, [r0, #-3077]!	; 0xfffff3fb
     cb8:	10053106 	andne	r3, r5, r6, lsl #2
     cbc:	42010520 	andmi	r0, r1, #32, 10	; 0x8000000
     cc0:	05e41703 	strbeq	r1, [r4, #1795]!	; 0x703
     cc4:	26056b03 	strcs	r6, [r5], -r3, lsl #22
     cc8:	31030520 	tstcc	r3, r0, lsr #10
     ccc:	05202605 	streq	r2, [r0, #-1541]!	; 0xfffff9fb
     cd0:	0f033d01 	svceq	0x00033d01
     cd4:	3d110574 	cfldr32cc	mvfx0, [r1, #-464]	; 0xfffffe30
     cd8:	052f0f05 	streq	r0, [pc, #-3845]!	; fffffddb <a+0xdfffbe47>
     cdc:	11053d0e 	tstne	r5, lr, lsl #26
     ce0:	02040200 	andeq	r0, r4, #0, 4
     ce4:	00130540 	andseq	r0, r3, r0, asr #10
     ce8:	67020402 	strvs	r0, [r2, -r2, lsl #8]
     cec:	02001b05 	andeq	r1, r0, #5120	; 0x1400
     cf0:	053d0204 	ldreq	r0, [sp, #-516]!	; 0xfffffdfc
     cf4:	04020003 	streq	r0, [r2], #-3
     cf8:	33052002 	movwcc	r2, #20482	; 0x5002
     cfc:	01040200 	mrseq	r0, R12_usr
     d00:	4c07054a 	cfstr32mi	mvfx0, [r7], {74}	; 0x4a
     d04:	054a0605 	strbeq	r0, [sl, #-1541]	; 0xfffff9fb
     d08:	054e220c 	strbeq	r2, [lr, #-524]	; 0xfffffdf4
     d0c:	01053e0a 	tsteq	r5, sl, lsl #28
     d10:	4a0b032f 	bmi	2c19d4 <startup-0x1fd3e62c>
     d14:	05670c05 	strbeq	r0, [r7, #-3077]!	; 0xfffff3fb
     d18:	0a05320f 	beq	14d55c <startup-0x1feb2aa4>
     d1c:	0d053120 	stfeqs	f3, [r5, #-128]	; 0xffffff80
     d20:	2e2b054d 	cfsh64cs	mvdx0, mvdx11, #45
     d24:	05200a05 	streq	r0, [r0, #-2565]!	; 0xfffff5fb
     d28:	0b053f06 	bleq	150948 <startup-0x1feaf6b8>
     d2c:	2f010520 	svccs	0x00010520
     d30:	05741503 	ldrbeq	r1, [r4, #-1283]!	; 0xfffffafd
     d34:	24056a03 	strcs	r6, [r5], #-2563	; 0xfffff5fd
     d38:	2e220520 	cfsh64cs	mvdx0, mvdx2, #16
     d3c:	03210105 			; <UNDEFINED> instruction: 0x03210105
     d40:	03056614 	movweq	r6, #22036	; 0x5614
     d44:	2022056c 	eorcs	r0, r2, ip, ror #10
     d48:	05310305 	ldreq	r0, [r1, #-773]!	; 0xfffffcfb
     d4c:	03052022 	movweq	r2, #20514	; 0x5022
     d50:	03070531 	movweq	r0, #30001	; 0x7531
     d54:	7903660b 	stmdbvc	r3, {r0, r1, r3, r9, sl, sp, lr}
     d58:	20260520 	eorcs	r0, r6, r0, lsr #10
     d5c:	232f0705 			; <UNDEFINED> instruction: 0x232f0705
     d60:	05202605 	streq	r2, [r0, #-1541]!	; 0xfffff9fb
     d64:	01052f07 	tsteq	r5, r7, lsl #30
     d68:	740f0324 	strvc	r0, [pc], #-804	; d70 <startup-0x1ffff290>
     d6c:	056a0305 	strbeq	r0, [sl, #-773]!	; 0xfffffcfb
     d70:	23052025 	movwcs	r2, #20517	; 0x5025
     d74:	2101052e 	tstcs	r1, lr, lsr #10
     d78:	6600de03 	strvs	sp, [r0], -r3, lsl #28
     d7c:	057c1f05 	ldrbeq	r1, [ip, #-3845]!	; 0xfffff0fb
     d80:	2f052e17 	svccs	0x00052e17
     d84:	2e35052e 	cdpcs	5, 3, cr0, cr5, cr14, {1}
     d88:	05203905 	streq	r3, [r0, #-2309]!	; 0xfffff6fb
     d8c:	40052025 	andmi	r2, r5, r5, lsr #32
     d90:	3d180520 	cfldr32cc	mvfx0, [r8, #-128]	; 0xffffff80
     d94:	052d0605 	streq	r0, [sp, #-1541]!	; 0xfffff9fb
     d98:	10052052 	andne	r2, r5, r2, asr r0
     d9c:	22010520 	andcs	r0, r1, #32, 10	; 0x8000000
     da0:	05660e03 	strbeq	r0, [r6, #-3587]!	; 0xfffff1fd
     da4:	24056903 	strcs	r6, [r5], #-2307	; 0xfffff6fd
     da8:	2e220520 	cfsh64cs	mvdx0, mvdx2, #16
     dac:	03210105 			; <UNDEFINED> instruction: 0x03210105
     db0:	1e05661a 	mcrne	6, 0, r6, cr5, cr10, {0}
     db4:	2e2f055d 	mcrcs	5, 1, r0, cr15, cr13, {2}
     db8:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
     dbc:	13052024 	movwne	r2, #20516	; 0x5024
     dc0:	2f010520 	svccs	0x00010520
     dc4:	74018503 	strvc	r8, [r1], #-1283	; 0xfffffafd
     dc8:	05690305 	strbeq	r0, [r9, #-773]!	; 0xfffffcfb
     dcc:	25052027 	strcs	r2, [r5, #-39]	; 0xffffffd9
     dd0:	2101052e 	tstcs	r1, lr, lsr #10
     dd4:	6600e903 	strvs	lr, [r0], -r3, lsl #18
     dd8:	056c1e05 	strbeq	r1, [ip, #-3589]!	; 0xfffff1fb
     ddc:	24052e2f 	strcs	r2, [r5], #-3631	; 0xfffff1d1
     de0:	2041052e 	subcs	r0, r1, lr, lsr #10
     de4:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
     de8:	13052036 	movwne	r2, #20534	; 0x5036
     dec:	2f010520 	svccs	0x00010520
     df0:	05740d03 	ldrbeq	r0, [r4, #-3331]!	; 0xfffff2fd
     df4:	27056903 	strcs	r6, [r5, -r3, lsl #18]
     df8:	2e250520 	cfsh64cs	mvdx0, mvdx5, #16
     dfc:	03210105 			; <UNDEFINED> instruction: 0x03210105
     e00:	0305660e 	movweq	r6, #22030	; 0x560e
     e04:	20240569 	eorcs	r0, r4, r9, ror #10
     e08:	052e2205 	streq	r2, [lr, #-517]!	; 0xfffffdfb
     e0c:	15032101 	strne	r2, [r3, #-257]	; 0xfffffeff
     e10:	590c0566 	stmdbpl	ip, {r1, r2, r5, r6, r8, sl}
     e14:	05340f05 	ldreq	r0, [r4, #-3845]!	; 0xfffff0fb
     e18:	0531200a 	ldreq	r2, [r1, #-10]!
     e1c:	0a054d1c 	beq	154294 <startup-0x1feabd6c>
     e20:	3f06053c 	svccc	0x0006053c
     e24:	05200d05 	streq	r0, [r0, #-3333]!	; 0xfffff2fb
     e28:	18033301 	stmdane	r3, {r0, r8, r9, ip, sp}
     e2c:	590c0590 	stmdbpl	ip, {r4, r7, r8, sl}
     e30:	05340f05 	ldreq	r0, [r4, #-3845]!	; 0xfffff0fb
     e34:	0531200a 	ldreq	r2, [r1, #-10]!
     e38:	0a054d1c 	beq	1542b0 <startup-0x1feabd50>
     e3c:	3f06053c 	svccc	0x0006053c
     e40:	05200d05 	streq	r0, [r0, #-3333]!	; 0xfffff2fb
     e44:	b3033301 	movwlt	r3, #13057	; 0x3301
     e48:	0c057401 	cfstrseq	mvf7, [r5], {1}
     e4c:	330f054b 	movwcc	r0, #62795	; 0xf54b
     e50:	31200a05 			; <UNDEFINED> instruction: 0x31200a05
     e54:	4d06054d 	cfstr32mi	mvfx0, [r6, #-308]	; 0xfffffecc
     e58:	05200d05 	streq	r0, [r0, #-3333]!	; 0xfffff2fb
     e5c:	0d032f01 	stceq	15, cr2, [r3, #-4]
     e60:	2f180566 	svccs	0x00180566
     e64:	052e0b05 	streq	r0, [lr, #-2821]!	; 0xfffff4fb
     e68:	17034b01 	strne	r4, [r3, -r1, lsl #22]
     e6c:	4b0c0566 	blmi	30240c <startup-0x1fcfdbf4>
     e70:	05330f05 	ldreq	r0, [r3, #-3845]!	; 0xfffff0fb
     e74:	4d31200a 	ldcmi	0, cr2, [r1, #-40]!	; 0xffffffd8
     e78:	054d0605 	strbeq	r0, [sp, #-1541]	; 0xfffff9fb
     e7c:	0105200d 	tsteq	r5, sp
     e80:	660f032f 	strvs	r0, [pc], -pc, lsr #6
     e84:	054b0c05 	strbeq	r0, [fp, #-3077]	; 0xfffff3fb
     e88:	0a05330f 	beq	14dacc <startup-0x1feb2534>
     e8c:	054d3120 	strbeq	r3, [sp, #-288]	; 0xfffffee0
     e90:	0d054d06 	stceq	13, cr4, [r5, #-24]	; 0xffffffe8
     e94:	2f010520 	svccs	0x00010520
     e98:	05820f03 	streq	r0, [r2, #3843]	; 0xf03
     e9c:	0f054b0c 	svceq	0x00054b0c
     ea0:	200a0533 	andcs	r0, sl, r3, lsr r5
     ea4:	4d160531 	cfldr32mi	mvfx0, [r6, #-196]	; 0xffffff3c
     ea8:	052e0a05 	streq	r0, [lr, #-2565]!	; 0xfffff5fb
     eac:	0d053f06 	stceq	15, cr3, [r5, #-24]	; 0xffffffe8
     eb0:	2f010520 	svccs	0x00010520
     eb4:	05902403 	ldreq	r2, [r0, #1027]	; 0x403
     eb8:	15054b0c 	strne	r4, [r5, #-2828]	; 0xfffff4f4
     ebc:	2e20052e 	cfsh64cs	mvdx0, mvdx0, #30
     ec0:	052e2c05 	streq	r2, [lr, #-3077]!	; 0xfffff3fb
     ec4:	45052e36 	strmi	r2, [r5, #-3638]	; 0xfffff1ca
     ec8:	340c052e 	strcc	r0, [ip], #-1326	; 0xfffffad2
     ecc:	052e0705 	streq	r0, [lr, #-1797]!	; 0xfffff8fb
     ed0:	22053e03 	andcs	r3, r5, #3, 28	; 0x30
     ed4:	3d0505cb 	cfstr32cc	mvfx0, [r5, #-812]	; 0xfffffcd4
     ed8:	05222205 	streq	r2, [r2, #-517]!	; 0xfffffdfb
     edc:	15053d05 	strne	r3, [r5, #-3333]	; 0xfffff2fb
     ee0:	2e350526 	cdpcs	5, 3, cr0, cr5, cr6, {1}
     ee4:	3d200f05 	stccc	15, cr0, [r0, #-20]!	; 0xffffffec
     ee8:	052e0a05 	streq	r0, [lr, #-2565]!	; 0xfffff5fb
     eec:	1b053e08 	blne	150714 <startup-0x1feaf8ec>
     ef0:	662a053f 			; <UNDEFINED> instruction: 0x662a053f
     ef4:	052e4805 	streq	r4, [lr, #-2053]!	; 0xfffff7fb
     ef8:	1b053c0e 	blne	14ff38 <startup-0x1feb00c8>
     efc:	662a0541 	strtvs	r0, [sl], -r1, asr #10
     f00:	052e4805 	streq	r4, [lr, #-2053]!	; 0xfffff7fb
     f04:	12053c0e 	andne	r3, r5, #3584	; 0xe00
     f08:	2e300531 	mrccs	5, 1, r0, cr0, cr1, {1}
     f0c:	053c3605 	ldreq	r3, [ip, #-1541]!	; 0xfffff9fb
     f10:	2a05200a 	bcs	148f40 <startup-0x1feb70c0>
     f14:	6622052f 	strtvs	r0, [r2], -pc, lsr #10
     f18:	052f0505 	streq	r0, [pc, #-1285]!	; a1b <startup-0x1ffff5e5>
     f1c:	201b0322 	andscs	r0, fp, r2, lsr #6
     f20:	053d0505 	ldreq	r0, [sp, #-1285]!	; 0xfffffafb
     f24:	0705250c 	streq	r2, [r5, -ip, lsl #10]
     f28:	1b053d2e 	blne	1503e8 <startup-0x1feafc18>
     f2c:	5809053d 	stmdapl	r9, {r0, r2, r3, r4, r5, r8, sl}
     f30:	05222a05 	streq	r2, [r2, #-2565]!	; 0xfffff5fb
     f34:	1e052e3d 	mcrne	14, 0, r2, cr5, cr13, {1}
     f38:	310c052e 	tstcc	ip, lr, lsr #10
     f3c:	4b2e0705 	blmi	b82b58 <startup-0x1f47d4a8>
     f40:	053d1b05 	ldreq	r1, [sp, #-2821]!	; 0xfffff4fb
     f44:	2b055809 	blcs	156f70 <startup-0x1fea9090>
     f48:	2e3c0522 	cdpcs	5, 3, cr0, cr12, cr2, {1}
     f4c:	052e1f05 	streq	r1, [lr, #-3845]!	; 0xfffff0fb
     f50:	0705310c 	streq	r3, [r5, -ip, lsl #2]
     f54:	1b054b2e 	blne	153c14 <startup-0x1feac3ec>
     f58:	5809053d 	stmdapl	r9, {r0, r2, r3, r4, r5, r8, sl}
     f5c:	05222b05 	streq	r2, [r2, #-2821]!	; 0xfffff4fb
     f60:	1f052e3c 	svcne	0x00052e3c
     f64:	2f01052e 	svccs	0x0001052e
     f68:	05ba3f03 	ldreq	r3, [sl, #3843]!	; 0xf03
     f6c:	19054b0c 	stmdbne	r5, {r2, r3, r8, r9, fp, lr}
     f70:	4a060533 	bmi	182444 <startup-0x1fe7dbbc>
     f74:	054c1105 	strbeq	r1, [ip, #-261]	; 0xfffffefb
     f78:	0531200c 	ldreq	r2, [r1, #-12]!
     f7c:	0c054d21 	stceq	13, cr4, [r5], {33}	; 0x21
     f80:	3f08053c 	svccc	0x0008053c
     f84:	05200f05 	streq	r0, [r0, #-3845]!	; 0xfffff0fb
     f88:	2205320d 	andcs	r3, r5, #-805306368	; 0xd0000000
     f8c:	3c0d052e 	cfstr32cc	mvfx0, [sp], {46}	; 0x2e
     f90:	033d0105 	teqeq	sp, #1073741825	; 0x40000001
     f94:	03059e0a 	movweq	r9, #24074	; 0x5e0a
     f98:	2026056a 	eorcs	r0, r6, sl, ror #10
     f9c:	052e2405 	streq	r2, [lr, #-1029]!	; 0xfffffbfb
     fa0:	0c032101 	stfeqs	f2, [r3], {1}
     fa4:	69030566 	stmdbvs	r3, {r1, r2, r5, r6, r8, sl}
     fa8:	05202605 	streq	r2, [r0, #-1541]!	; 0xfffff9fb
     fac:	01052e24 	tsteq	r5, r4, lsr #28
     fb0:	01b80321 			; <UNDEFINED> instruction: 0x01b80321
     fb4:	4e030566 	cfsh32mi	mvfx0, mvfx3, #54
     fb8:	05202505 	streq	r2, [r0, #-1285]!	; 0xfffffafb
     fbc:	16032f01 	strne	r2, [r3], -r1, lsl #30
     fc0:	4b0c0574 	blmi	302598 <startup-0x1fcfda68>
     fc4:	05330f05 	ldreq	r0, [r3, #-3845]!	; 0xfffff0fb
     fc8:	4d3f200a 	ldcmi	0, cr2, [pc, #-40]!	; fa8 <startup-0x1ffff058>
     fcc:	054d0605 	strbeq	r0, [sp, #-1541]	; 0xfffff9fb
     fd0:	01052010 	tsteq	r5, r0, lsl r0
     fd4:	8214033d 	andshi	r0, r4, #-201326592	; 0xf4000000
     fd8:	054b0c05 	strbeq	r0, [fp, #-3077]	; 0xfffff3fb
     fdc:	0a05330f 	beq	14dc20 <startup-0x1feb23e0>
     fe0:	054d3f20 	strbeq	r3, [sp, #-3872]	; 0xfffff0e0
     fe4:	10054d06 	andne	r4, r5, r6, lsl #26
     fe8:	3d010520 	cfstr32cc	mvfx0, [r1, #-128]	; 0xffffff80
     fec:	05821103 	streq	r1, [r2, #259]	; 0x103
     ff0:	0f054b0c 	svceq	0x00054b0c
     ff4:	200a0533 	andcs	r0, sl, r3, lsr r5
     ff8:	4d1d053f 	cfldr32mi	mvfx0, [sp, #-252]	; 0xffffff04
     ffc:	052e0a05 	streq	r0, [lr, #-2565]!	; 0xfffff5fb
    1000:	10053f06 	andne	r3, r5, r6, lsl #30
    1004:	3d010520 	cfstr32cc	mvfx0, [r1, #-128]	; 0xffffff80
    1008:	05741003 	ldrbeq	r1, [r4, #-3]!
    100c:	0f054b0c 	svceq	0x00054b0c
    1010:	200a0533 	andcs	r0, sl, r3, lsr r5
    1014:	4d1e053f 	cfldr32mi	mvfx0, [lr, #-252]	; 0xffffff04
    1018:	052e2305 	streq	r2, [lr, #-773]!	; 0xfffffcfb
    101c:	0605200a 	streq	r2, [r5], -sl
    1020:	2010053f 	andscs	r0, r0, pc, lsr r5
    1024:	033d0105 	teqeq	sp, #1073741825	; 0x40000001
    1028:	058200d3 	streq	r0, [r2, #211]	; 0xd3
    102c:	0f054b0c 	svceq	0x00054b0c
    1030:	200a0533 	andcs	r0, sl, r3, lsr r5
    1034:	06054d3f 			; <UNDEFINED> instruction: 0x06054d3f
    1038:	2010054d 	andscs	r0, r0, sp, asr #10
    103c:	033d0105 	teqeq	sp, #1073741825	; 0x40000001
    1040:	058200f0 	streq	r0, [r2, #240]	; 0xf0
    1044:	28054e03 	stmdacs	r5, {r0, r1, r9, sl, fp, lr}
    1048:	2f010520 	svccs	0x00010520
    104c:	05742503 	ldrbeq	r2, [r4, #-1283]!	; 0xfffffafd
    1050:	12057906 	andne	r7, r5, #98304	; 0x18000
    1054:	6c01054c 	cfstr32vs	mvfx0, [r1], {76}	; 0x4c
    1058:	051e1205 	ldreq	r1, [lr, #-517]	; 0xfffffdfb
    105c:	12052e15 	andne	r2, r5, #336	; 0x150
    1060:	3e01052e 	cfsh32cc	mvfx0, mvfx1, #30
    1064:	05741303 	ldrbeq	r1, [r4, #-771]!	; 0xfffffcfd
    1068:	12057906 	andne	r7, r5, #98304	; 0x18000
    106c:	6c01054c 	cfstr32vs	mvfx0, [r1], {76}	; 0x4c
    1070:	051e1205 	ldreq	r1, [lr, #-517]	; 0xfffffdfb
    1074:	12052e15 	andne	r2, r5, #336	; 0x150
    1078:	3e01052e 	cfsh32cc	mvfx0, mvfx1, #30
    107c:	05741103 	ldrbeq	r1, [r4, #-259]!	; 0xfffffefd
    1080:	12057906 	andne	r7, r5, #98304	; 0x18000
    1084:	6c01054c 	cfstr32vs	mvfx0, [r1], {76}	; 0x4c
    1088:	051e1205 	ldreq	r1, [lr, #-517]	; 0xfffffdfb
    108c:	12052e15 	andne	r2, r5, #336	; 0x150
    1090:	3e01052e 	cfsh32cc	mvfx0, mvfx1, #30
    1094:	05742c03 	ldrbeq	r2, [r4, #-3075]!	; 0xfffff3fd
    1098:	12057906 	andne	r7, r5, #98304	; 0x18000
    109c:	6c01054c 	cfstr32vs	mvfx0, [r1], {76}	; 0x4c
    10a0:	051e1205 	ldreq	r1, [lr, #-517]	; 0xfffffdfb
    10a4:	12052e15 	andne	r2, r5, #336	; 0x150
    10a8:	3e01052e 	cfsh32cc	mvfx0, mvfx1, #30
    10ac:	05742703 	ldrbeq	r2, [r4, #-1795]!	; 0xfffff8fd
    10b0:	12057906 	andne	r7, r5, #98304	; 0x18000
    10b4:	6c01054c 	cfstr32vs	mvfx0, [r1], {76}	; 0x4c
    10b8:	051e1205 	ldreq	r1, [lr, #-517]	; 0xfffffdfb
    10bc:	12052e15 	andne	r2, r5, #336	; 0x150
    10c0:	3e01052e 	cfsh32cc	mvfx0, mvfx1, #30
    10c4:	05741d03 	ldrbeq	r1, [r4, #-3331]!	; 0xfffff2fd
    10c8:	13057906 	movwne	r7, #22790	; 0x5906
    10cc:	6c01054c 	cfstr32vs	mvfx0, [r1], {76}	; 0x4c
    10d0:	051e1305 	ldreq	r1, [lr, #-773]	; 0xfffffcfb
    10d4:	13052e16 	movwne	r2, #24086	; 0x5e16
    10d8:	3e01052e 	cfsh32cc	mvfx0, mvfx1, #30
    10dc:	05741003 	ldrbeq	r1, [r4, #-3]!
    10e0:	13057906 	movwne	r7, #22790	; 0x5906
    10e4:	6c01054c 	cfstr32vs	mvfx0, [r1], {76}	; 0x4c
    10e8:	051e1305 	ldreq	r1, [lr, #-773]	; 0xfffffcfb
    10ec:	13052e16 	movwne	r2, #24086	; 0x5e16
    10f0:	3e01052e 	cfsh32cc	mvfx0, mvfx1, #30
    10f4:	05740e03 	ldrbeq	r0, [r4, #-3587]!	; 0xfffff1fd
    10f8:	13057906 	movwne	r7, #22790	; 0x5906
    10fc:	6c01054c 	cfstr32vs	mvfx0, [r1], {76}	; 0x4c
    1100:	051e1305 	ldreq	r1, [lr, #-773]	; 0xfffffcfb
    1104:	13052e16 	movwne	r2, #24086	; 0x5e16
    1108:	3e01052e 	cfsh32cc	mvfx0, mvfx1, #30
    110c:	05742903 	ldrbeq	r2, [r4, #-2307]!	; 0xfffff6fd
    1110:	13057806 	movwne	r7, #22534	; 0x5806
    1114:	6c01054c 	cfstr32vs	mvfx0, [r1], {76}	; 0x4c
    1118:	051e1305 	ldreq	r1, [lr, #-773]	; 0xfffffcfb
    111c:	13052e16 	movwne	r2, #24086	; 0x5e16
    1120:	3e01052e 	cfsh32cc	mvfx0, mvfx1, #30
    1124:	05742303 	ldrbeq	r2, [r4, #-771]!	; 0xfffffcfd
    1128:	13057806 	movwne	r7, #22534	; 0x5806
    112c:	6c01054c 	cfstr32vs	mvfx0, [r1], {76}	; 0x4c
    1130:	051e1305 	ldreq	r1, [lr, #-773]	; 0xfffffcfb
    1134:	13052e16 	movwne	r2, #24086	; 0x5e16
    1138:	3e01052e 	cfsh32cc	mvfx0, mvfx1, #30
    113c:	05742503 	ldrbeq	r2, [r4, #-1283]!	; 0xfffffafd
    1140:	14057806 	strne	r7, [r5], #-2054	; 0xfffff7fa
    1144:	6c01054c 	cfstr32vs	mvfx0, [r1], {76}	; 0x4c
    1148:	051e1405 	ldreq	r1, [lr, #-1029]	; 0xfffffbfb
    114c:	14052e17 	strne	r2, [r5], #-3607	; 0xfffff1e9
    1150:	3e01052e 	cfsh32cc	mvfx0, mvfx1, #30
    1154:	05741403 	ldrbeq	r1, [r4, #-1027]!	; 0xfffffbfd
    1158:	14057806 	strne	r7, [r5], #-2054	; 0xfffff7fa
    115c:	6c01054c 	cfstr32vs	mvfx0, [r1], {76}	; 0x4c
    1160:	051e1405 	ldreq	r1, [lr, #-1029]	; 0xfffffbfb
    1164:	14052e17 	strne	r2, [r5], #-3607	; 0xfffff1e9
    1168:	3e01052e 	cfsh32cc	mvfx0, mvfx1, #30
    116c:	05741203 	ldrbeq	r1, [r4, #-515]!	; 0xfffffdfd
    1170:	14057806 	strne	r7, [r5], #-2054	; 0xfffff7fa
    1174:	6c01054c 	cfstr32vs	mvfx0, [r1], {76}	; 0x4c
    1178:	051e1405 	ldreq	r1, [lr, #-1029]	; 0xfffffbfb
    117c:	14052e17 	strne	r2, [r5], #-3607	; 0xfffff1e9
    1180:	3e01052e 	cfsh32cc	mvfx0, mvfx1, #30
    1184:	05742d03 	ldrbeq	r2, [r4, #-3331]!	; 0xfffff2fd
    1188:	14057806 	strne	r7, [r5], #-2054	; 0xfffff7fa
    118c:	6c01054c 	cfstr32vs	mvfx0, [r1], {76}	; 0x4c
    1190:	051e1405 	ldreq	r1, [lr, #-1029]	; 0xfffffbfb
    1194:	14052e17 	strne	r2, [r5], #-3607	; 0xfffff1e9
    1198:	3e01052e 	cfsh32cc	mvfx0, mvfx1, #30
    119c:	05742803 	ldrbeq	r2, [r4, #-2051]!	; 0xfffff7fd
    11a0:	14057806 	strne	r7, [r5], #-2054	; 0xfffff7fa
    11a4:	6c01054c 	cfstr32vs	mvfx0, [r1], {76}	; 0x4c
    11a8:	051e1405 	ldreq	r1, [lr, #-1029]	; 0xfffffbfb
    11ac:	14052e17 	strne	r2, [r5], #-3607	; 0xfffff1e9
    11b0:	3e01052e 	cfsh32cc	mvfx0, mvfx1, #30
    11b4:	05740c03 	ldrbeq	r0, [r4, #-3075]!	; 0xfffff3fd
    11b8:	054c6a05 	strbeq	r6, [ip, #-2565]	; 0xfffff5fb
    11bc:	05056c01 	streq	r6, [r5, #-3073]	; 0xfffff3ff
    11c0:	6801051e 	stmdavs	r1, {r1, r2, r3, r4, r8, sl}
    11c4:	7402ac03 	strvc	sl, [r2], #-3075	; 0xfffff3fd
    11c8:	05940605 	ldreq	r0, [r4, #1541]	; 0x605
    11cc:	01054d29 	tsteq	r5, r9, lsr #26
    11d0:	1e290597 	mcrne	5, 1, r0, cr9, cr7, {4}
    11d4:	053c2c05 	ldreq	r2, [ip, #-3077]!	; 0xfffff3fb
    11d8:	01054a29 	tsteq	r5, r9, lsr #20
    11dc:	6617034c 	ldrvs	r0, [r7], -ip, asr #6
    11e0:	2f670c05 	svccs	0x00670c05
    11e4:	052f0e05 	streq	r0, [pc, #-3589]!	; 3e7 <startup-0x1ffffc19>
    11e8:	07055012 	smladeq	r5, r2, r0, r5
    11ec:	2106054a 	tstcs	r6, sl, asr #10
    11f0:	053e1405 	ldreq	r1, [lr, #-1029]!	; 0xfffffbfb
    11f4:	0b05200f 	bleq	149238 <startup-0x1feb6dc8>
    11f8:	3e14053e 	mrccc	5, 0, r0, cr4, cr14, {1}
    11fc:	05200f05 	streq	r0, [r0, #-3845]!	; 0xfffff0fb
    1200:	0f054014 	svceq	0x00054014
    1204:	32120520 	andscc	r0, r2, #32, 10	; 0x8000000
    1208:	052e0705 	streq	r0, [lr, #-1797]!	; 0xfffff8fb
    120c:	06053d2a 	streq	r3, [r5], -sl, lsr #26
    1210:	220f0566 	andcs	r0, pc, #427819008	; 0x19800000
    1214:	4d0a055c 	cfstr32mi	mvfx0, [sl, #-368]	; 0xfffffe90
    1218:	033d0105 	teqeq	sp, #1073741825	; 0x40000001
    121c:	0c05660a 	stceq	6, cr6, [r5], {10}
    1220:	75010530 	strvc	r0, [r1, #-1328]	; 0xfffffad0
    1224:	05581103 	ldrbeq	r1, [r8, #-259]	; 0xfffffefd
    1228:	0b05670c 	bleq	15ae60 <startup-0x1fea51a0>
    122c:	2e110550 	mrccs	5, 0, r0, cr1, cr0, {2}
    1230:	053c0605 	ldreq	r0, [ip, #-1541]!	; 0xfffff9fb
    1234:	054e220f 	strbeq	r2, [lr, #-527]	; 0xfffffdf1
    1238:	01054d0b 	tsteq	r5, fp, lsl #26
    123c:	7411033d 	ldrvc	r0, [r1], #-829	; 0xfffffcc3
    1240:	056c0305 	strbeq	r0, [ip, #-773]!	; 0xfffffcfb
    1244:	01052027 	tsteq	r5, r7, lsr #32
    1248:	0006023d 	andeq	r0, r6, sp, lsr r2
    124c:	0be50101 	bleq	ff941658 <a+0xdf93d6c4>
    1250:	00030000 	andeq	r0, r3, r0
    1254:	00000204 	andeq	r0, r0, r4, lsl #4
    1258:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    125c:	0101000d 	tsteq	r1, sp
    1260:	00000101 	andeq	r0, r0, r1, lsl #2
    1264:	00000100 	andeq	r0, r0, r0, lsl #2
    1268:	2f3a4301 	svccs	0x003a4301
    126c:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    1270:	6d612f73 	stclvs	15, cr2, [r1, #-460]!	; 0xfffffe34
    1274:	2f726e69 	svccs	0x00726e69
    1278:	6b736544 	blvs	1cda790 <startup-0x1e325870>
    127c:	2f706f74 	svccs	0x00706f74
    1280:	61746164 	cmnvs	r4, r4, ror #2
    1284:	6a6f7270 	bvs	1bddc4c <startup-0x1e4223b4>
    1288:	2f746b65 	svccs	0x00746b65
    128c:	334d5453 	movtcc	r5, #54355	; 0xd453
    1290:	5f344632 	svcpl	0x00344632
    1294:	2f62696c 	svccs	0x0062696c
    1298:	334d5453 	movtcc	r5, #54355	; 0xd453
    129c:	5f344632 	svcpl	0x00344632
    12a0:	2f62696c 	svccs	0x0062696c
    12a4:	334d5453 	movtcc	r5, #54355	; 0xd453
    12a8:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
    12ac:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xfffff088
    12b0:	72655064 	rsbvc	r5, r5, #100	; 0x64
    12b4:	5f687069 	svcpl	0x00687069
    12b8:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    12bc:	732f7265 			; <UNDEFINED> instruction: 0x732f7265
    12c0:	63006372 	movwvs	r6, #882	; 0x372
    12c4:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
    12c8:	70706165 	rsbsvc	r6, r0, r5, ror #2
    12cc:	646f635c 	strbtvs	r6, [pc], #-860	; 12d4 <startup-0x1fffed2c>
    12d0:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
    12d4:	6f745c65 	svcvs	0x00745c65
    12d8:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    12dc:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    12e0:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
    12e4:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    12e8:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    12ec:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    12f0:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    12f4:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    12f8:	616d5c65 	cmnvs	sp, r5, ror #24
    12fc:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    1300:	3a630065 	bcc	18c149c <startup-0x1e73eb64>
    1304:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
    1308:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
    130c:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
    1310:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
    1314:	6f6f745c 	svcvs	0x006f745c
    1318:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
    131c:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    1320:	615c6d72 	cmpvs	ip, r2, ror sp
    1324:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    1328:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    132c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    1330:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    1334:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    1338:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
    133c:	2f3a4300 	svccs	0x003a4300
    1340:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    1344:	6d612f73 	stclvs	15, cr2, [r1, #-460]!	; 0xfffffe34
    1348:	2f726e69 	svccs	0x00726e69
    134c:	6b736544 	blvs	1cda864 <startup-0x1e32579c>
    1350:	2f706f74 	svccs	0x00706f74
    1354:	61746164 	cmnvs	r4, r4, ror #2
    1358:	6a6f7270 	bvs	1bddd20 <startup-0x1e4222e0>
    135c:	2f746b65 	svccs	0x00746b65
    1360:	334d5453 	movtcc	r5, #54355	; 0xd453
    1364:	5f344632 	svcpl	0x00344632
    1368:	2f62696c 	svccs	0x0062696c
    136c:	334d5453 	movtcc	r5, #54355	; 0xd453
    1370:	5f344632 	svcpl	0x00344632
    1374:	2f62696c 	svccs	0x0062696c
    1378:	49534d43 	ldmdbmi	r3, {r0, r1, r6, r8, sl, fp, lr}^
    137c:	6e492f53 	mcrvs	15, 2, r2, cr9, cr3, {2}
    1380:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    1384:	3a430065 	bcc	10c1520 <startup-0x1ef3eae0>
    1388:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
    138c:	612f7372 			; <UNDEFINED> instruction: 0x612f7372
    1390:	726e696d 	rsbvc	r6, lr, #1785856	; 0x1b4000
    1394:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    1398:	706f746b 	rsbvc	r7, pc, fp, ror #8
    139c:	7461642f 	strbtvc	r6, [r1], #-1071	; 0xfffffbd1
    13a0:	6f727061 	svcvs	0x00727061
    13a4:	746b656a 	strbtvc	r6, [fp], #-1386	; 0xfffffa96
    13a8:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    13ac:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
    13b0:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    13b4:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    13b8:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
    13bc:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    13c0:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    13c4:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
    13c8:	535f7878 	cmppl	pc, #120, 16	; 0x780000
    13cc:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0xfffffb8c
    13d0:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    13d4:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    13d8:	2f726576 	svccs	0x00726576
    13dc:	00636e69 	rsbeq	r6, r3, r9, ror #28
    13e0:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    13e4:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
    13e8:	745f7878 	ldrbvc	r7, [pc], #-2168	; 13f0 <startup-0x1fffec10>
    13ec:	632e6d69 			; <UNDEFINED> instruction: 0x632e6d69
    13f0:	00000100 	andeq	r0, r0, r0, lsl #2
    13f4:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    13f8:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    13fc:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    1400:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    1404:	00000200 	andeq	r0, r0, r0, lsl #4
    1408:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
    140c:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    1410:	00030068 	andeq	r0, r3, r8, rrx
    1414:	726f6300 	rsbvc	r6, pc, #0, 6
    1418:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
    141c:	00682e34 	rsbeq	r2, r8, r4, lsr lr
    1420:	73000004 	movwvc	r0, #4
    1424:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
    1428:	74735f6d 	ldrbtvc	r5, [r3], #-3949	; 0xfffff093
    142c:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    1430:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
    1434:	00050068 	andeq	r0, r5, r8, rrx
    1438:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    143c:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
    1440:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
    1444:	00000500 	andeq	r0, r0, r0, lsl #10
    1448:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    144c:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    1450:	69745f78 	ldmdbvs	r4!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1454:	00682e6d 	rsbeq	r2, r8, sp, ror #28
    1458:	00000005 	andeq	r0, r0, r5
    145c:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    1460:	0014fc02 	andseq	pc, r4, r2, lsl #24
    1464:	01c80320 	biceq	r0, r8, r0, lsr #6
    1468:	4e060501 	cfsh32mi	mvfx0, mvfx6, #1
    146c:	4b4c0505 	blmi	1302888 <startup-0x1ecfd778>
    1470:	c6030105 	strgt	r0, [r3], -r5, lsl #2
    1474:	0b054a00 	bleq	153c7c <startup-0x1feac384>
    1478:	207fbc03 	rsbscs	fp, pc, r3, lsl #24
    147c:	4b5a0505 	blmi	1682898 <startup-0x1e97d768>
    1480:	c1030105 	tstgt	r3, r5, lsl #2
    1484:	0b054a00 	bleq	153c8c <startup-0x1feac374>
    1488:	05204103 	streq	r4, [r0, #-259]!	; 0xfffffefd
    148c:	054b4c05 	strbeq	r4, [fp, #-3077]	; 0xfffff3fb
    1490:	4a3c0301 	bmi	f0209c <startup-0x1f0fdf64>
    1494:	46030b05 	strmi	r0, [r3], -r5, lsl #22
    1498:	4c050520 	cfstr32mi	mvfx0, [r5], {32}
    149c:	0301054b 	movweq	r0, #5451	; 0x154b
    14a0:	0b054a37 	bleq	153d84 <startup-0x1feac27c>
    14a4:	05204b03 	streq	r4, [r0, #-2819]!	; 0xfffff4fd
    14a8:	054b4c05 	strbeq	r4, [fp, #-3077]	; 0xfffff3fb
    14ac:	4a320301 	bmi	c820b8 <startup-0x1f37df48>
    14b0:	50030b05 	andpl	r0, r3, r5, lsl #22
    14b4:	4c050520 	cfstr32mi	mvfx0, [r5], {32}
    14b8:	0301054b 	movweq	r0, #5451	; 0x154b
    14bc:	0b054a2d 	bleq	153d78 <startup-0x1feac288>
    14c0:	05205503 	streq	r5, [r0, #-1283]!	; 0xfffffafd
    14c4:	054b4c05 	strbeq	r4, [fp, #-3077]	; 0xfffff3fb
    14c8:	4a280301 	bmi	a020d4 <startup-0x1f5fdf2c>
    14cc:	5a030b05 	bpl	c40e8 <startup-0x1ff3bf18>
    14d0:	4c050520 	cfstr32mi	mvfx0, [r5], {32}
    14d4:	0301054b 	movweq	r0, #5451	; 0x154b
    14d8:	0b054a23 	bleq	153d6c <startup-0x1feac294>
    14dc:	05205f03 	streq	r5, [r0, #-3843]!	; 0xfffff0fd
    14e0:	05674c05 	strbeq	r4, [r7, #-3077]!	; 0xfffff3fb
    14e4:	661e0301 	ldrvs	r0, [lr], -r1, lsl #6
    14e8:	64030b05 	strvs	r0, [r3], #-2821	; 0xfffff4fb
    14ec:	4c050520 	cfstr32mi	mvfx0, [r5], {32}
    14f0:	03010567 	movweq	r0, #5479	; 0x1567
    14f4:	0b056619 	bleq	15ad60 <startup-0x1fea52a0>
    14f8:	05206903 	streq	r6, [r0, #-2307]!	; 0xfffff6fd
    14fc:	05674c05 	strbeq	r4, [r7, #-3077]!	; 0xfffff3fb
    1500:	66140301 	ldrvs	r0, [r4], -r1, lsl #6
    1504:	6e030b05 	vmlavs.f64	d0, d3, d5
    1508:	4c050520 	cfstr32mi	mvfx0, [r5], {32}
    150c:	0301054b 	movweq	r0, #5451	; 0x154b
    1510:	0b054a0f 	bleq	153d54 <startup-0x1feac2ac>
    1514:	05207303 	streq	r7, [r0, #-771]!	; 0xfffffcfd
    1518:	054b4c05 	strbeq	r4, [fp, #-3077]	; 0xfffff3fb
    151c:	4a0a0301 	bmi	282128 <startup-0x1fd7ded8>
    1520:	7a030805 	bvc	c353c <startup-0x1ff3cac4>
    1524:	4c070520 	cfstr32mi	mvfx0, [r7], {32}
    1528:	69010567 	stmdbvs	r1, {r0, r1, r2, r5, r6, r8, sl}
    152c:	c8080b03 	stmdagt	r8, {r0, r1, r8, r9, fp}
    1530:	05590c05 	ldrbeq	r0, [r9, #-3077]	; 0xfffff3fb
    1534:	0505510a 	streq	r5, [r5, #-266]	; 0xfffffef6
    1538:	0015054c 	andseq	r0, r5, ip, asr #10
    153c:	4a010402 	bmi	4254c <startup-0x1ffbdab4>
    1540:	02002605 	andeq	r2, r0, #5242880	; 0x500000
    1544:	054a0204 	strbeq	r0, [sl, #-516]	; 0xfffffdfc
    1548:	26055915 			; <UNDEFINED> instruction: 0x26055915
    154c:	01040200 	mrseq	r0, R12_usr
    1550:	4b15054a 	blmi	542a80 <startup-0x1fabd580>
    1554:	054d0c05 	strbeq	r0, [sp, #-3077]	; 0xfffff3fb
    1558:	0c05752f 	cfstr32eq	mvfx7, [r5], {47}	; 0x2f
    155c:	5b05052e 	blpl	142a1c <startup-0x1febd5e4>
    1560:	02001505 	andeq	r1, r0, #20971520	; 0x1400000
    1564:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
    1568:	2f054d0c 	svccs	0x00054d0c
    156c:	2e0c0575 	cfrshl64cs	mvdx12, mvdx5, r0
    1570:	055b0d05 	ldrbeq	r0, [fp, #-3333]	; 0xfffff2fb
    1574:	0d055b25 	vstreq	d5, [r5, #-148]	; 0xffffff6c
    1578:	3125052e 			; <UNDEFINED> instruction: 0x3125052e
    157c:	052e0d05 	streq	r0, [lr, #-3333]!	; 0xfffff2fb
    1580:	16053006 	strne	r3, [r5], -r6
    1584:	01040200 	mrseq	r0, R12_usr
    1588:	4d27054a 	cfstr32mi	mvfx0, [r7, #-296]!	; 0xfffffed8
    158c:	053c0f05 	ldreq	r0, [ip, #-3845]!	; 0xfffff0fb
    1590:	0105330d 	tsteq	r5, sp, lsl #6
    1594:	0809033d 	stmdaeq	r9, {r0, r2, r3, r4, r5, r8, r9}
    1598:	4c26054a 	cfstr32mi	mvfx0, [r6], #-296	; 0xfffffed8
    159c:	054b2905 	strbeq	r2, [fp, #-2309]	; 0xfffff6fb
    15a0:	2b053d2d 	blcs	150a5c <startup-0x1feaf5a4>
    15a4:	3d31053d 	cfldr32cc	mvfx0, [r1, #-244]!	; 0xffffff0c
    15a8:	033d0105 	teqeq	sp, #1073741825	; 0x40000001
    15ac:	0d054a0d 	vstreq	s8, [r5, #-52]	; 0xffffffcc
    15b0:	01054cbf 			; <UNDEFINED> instruction: 0x01054cbf
    15b4:	4a0f034b 	bmi	3c22e8 <startup-0x1fc3dd18>
    15b8:	05750c05 	ldrbeq	r0, [r5, #-3077]!	; 0xfffff3fb
    15bc:	694d500a 	stmdbvs	sp, {r1, r3, ip, lr}^
    15c0:	05770d05 	ldrbeq	r0, [r7, #-3333]!	; 0xfffff2fb
    15c4:	09034b01 	stmdbeq	r3, {r0, r8, r9, fp, lr}
    15c8:	5d0d054a 	cfstr32pl	mvfx0, [sp, #-296]	; 0xfffffed8
    15cc:	033d0105 	teqeq	sp, #1073741825	; 0x40000001
    15d0:	0d054a09 	vstreq	s8, [r5, #-36]	; 0xffffffdc
    15d4:	3d01055d 	cfstr32cc	mvfx0, [r1, #-372]	; 0xfffffe8c
    15d8:	4f0e0552 	svcmi	0x000e0552
    15dc:	522f0105 	eorpl	r0, pc, #1073741825	; 0x40000001
    15e0:	054f0e05 	strbeq	r0, [pc, #-3589]	; 7e3 <startup-0x1ffff81d>
    15e4:	0a033d01 	beq	d09f0 <startup-0x1ff2f610>
    15e8:	7906054a 	stmdbvc	r6, {r1, r3, r6, r8, sl}
    15ec:	054d0f05 	strbeq	r0, [sp, #-3845]	; 0xfffff0fb
    15f0:	0f058901 	svceq	0x00058901
    15f4:	8401051e 	strhi	r0, [r1], #-1310	; 0xfffffae2
    15f8:	054a0e03 	strbeq	r0, [sl, #-3587]	; 0xfffff1fd
    15fc:	0f057906 	svceq	0x00057906
    1600:	8901054d 	stmdbhi	r1, {r0, r2, r3, r6, r8, sl}
    1604:	051e0f05 	ldreq	r0, [lr, #-3845]	; 0xfffff0fb
    1608:	0a038401 	beq	e2614 <startup-0x1ff1d9ec>
    160c:	7906054a 	stmdbvc	r6, {r1, r3, r6, r8, sl}
    1610:	054d0f05 	strbeq	r0, [sp, #-3845]	; 0xfffff0fb
    1614:	0f058901 	svceq	0x00058901
    1618:	8401051e 	strhi	r0, [r1], #-1310	; 0xfffffae2
    161c:	054a0c03 	strbeq	r0, [sl, #-3075]	; 0xfffff3fd
    1620:	05857a0d 	streq	r7, [r5, #2573]	; 0xa0d
    1624:	0d039101 	stfeqd	f1, [r3, #-4]
    1628:	7a0d054a 	bvc	342b58 <startup-0x1fcbd4a8>
    162c:	91010585 	smlabbls	r1, r5, r5, r0
    1630:	05740a03 	ldrbeq	r0, [r4, #-2563]!	; 0xfffff5fd
    1634:	0f057906 	svceq	0x00057906
    1638:	8901054d 	stmdbhi	r1, {r0, r2, r3, r6, r8, sl}
    163c:	051e0f05 	ldreq	r0, [lr, #-3845]	; 0xfffff0fb
    1640:	c2038401 	andgt	r8, r3, #16777216	; 0x1000000
    1644:	0c054a00 			; <UNDEFINED> instruction: 0x0c054a00
    1648:	4a1a0559 	bmi	682bb4 <startup-0x1f97d44c>
    164c:	054a2705 	strbeq	r2, [sl, #-1797]	; 0xfffff8fb
    1650:	4a09030e 	bmi	242290 <startup-0x1fdbdd70>
    1654:	05850b05 	streq	r0, [r5, #2821]	; 0xb05
    1658:	0c054c0a 	stceq	12, cr4, [r5], {10}
    165c:	05754d4d 	ldrbeq	r4, [r5, #-3405]!	; 0xfffff2b3
    1660:	0c05681f 	stceq	8, cr6, [r5], {31}
    1664:	5b0b052e 	blpl	2c2b24 <startup-0x1fd3d4dc>
    1668:	05761e05 	ldrbeq	r1, [r6, #-3589]!	; 0xfffff1fb
    166c:	1e052e0b 	cdpne	14, 0, cr2, cr5, cr11, {0}
    1670:	2e0b055b 	cfrshl32cs	mvfx11, mvfx11, r0
    1674:	055a0505 	ldrbeq	r0, [sl, #-1285]	; 0xfffffafb
    1678:	04020015 	streq	r0, [r2], #-21	; 0xffffffeb
    167c:	0d054a01 	vstreq	s8, [r5, #-4]
    1680:	76200552 			; <UNDEFINED> instruction: 0x76200552
    1684:	5a2e0d05 	bpl	b84aa0 <startup-0x1f47b560>
    1688:	05692005 	strbeq	r2, [r9, #-5]!
    168c:	0c052e0d 	stceq	14, cr2, [r5], {13}
    1690:	1f05755a 	svcne	0x0005755a
    1694:	2e0c0568 	cfsh32cs	mvfx0, mvfx12, #56
    1698:	055a1f05 	ldrbeq	r1, [sl, #-3845]	; 0xfffff0fb
    169c:	0d052e0c 	stceq	14, cr2, [r5, #-48]	; 0xffffffd0
    16a0:	5b0f055b 	blpl	3c2c14 <startup-0x1fc3d3ec>
    16a4:	055b2005 	ldrbeq	r2, [fp, #-5]
    16a8:	05312e0e 	ldreq	r2, [r1, #-3598]!	; 0xfffff1f2
    16ac:	0c035901 			; <UNDEFINED> instruction: 0x0c035901
    16b0:	590c05c8 	stmdbpl	ip, {r3, r6, r7, r8, sl}
    16b4:	054a1a05 	strbeq	r1, [sl, #-2565]	; 0xfffff5fb
    16b8:	0e054a27 	vmlaeq.f32	s8, s10, s15
    16bc:	054a0903 	strbeq	r0, [sl, #-2307]	; 0xfffff6fd
    16c0:	0a05850b 	beq	162af4 <startup-0x1fe9d50c>
    16c4:	4d0c054c 	cfstr32mi	mvfx0, [ip, #-304]	; 0xfffffed0
    16c8:	2a05754d 	bcs	15ec04 <startup-0x1fea13fc>
    16cc:	2e0f0569 	cfsh32cs	mvfx0, mvfx15, #57
    16d0:	052e0c05 	streq	r0, [lr, #-3077]!	; 0xfffff3fb
    16d4:	29055b0b 	stmdbcs	r5, {r0, r1, r3, r8, r9, fp, ip, lr}
    16d8:	2e0e0576 	cfrshl64cs	mvdx14, mvdx6, r0
    16dc:	052e0b05 	streq	r0, [lr, #-2821]!	; 0xfffff4fb
    16e0:	0e055b29 	vmlaeq.f64	d5, d5, d25
    16e4:	2e0b052e 	cfsh32cs	mvfx0, mvfx11, #30
    16e8:	055a0505 	ldrbeq	r0, [sl, #-1285]	; 0xfffffafb
    16ec:	04020015 	streq	r0, [r2], #-21	; 0xffffffeb
    16f0:	0d054a01 	vstreq	s8, [r5, #-4]
    16f4:	762b0552 			; <UNDEFINED> instruction: 0x762b0552
    16f8:	052e1005 	streq	r1, [lr, #-5]!
    16fc:	055a2e0d 	ldrbeq	r2, [sl, #-3597]	; 0xfffff1f3
    1700:	1005692b 	andne	r6, r5, fp, lsr #18
    1704:	2e0d052e 	cfsh32cs	mvfx0, mvfx13, #30
    1708:	755a0c05 	ldrbvc	r0, [sl, #-3077]	; 0xfffff3fb
    170c:	05682a05 	strbeq	r2, [r8, #-2565]!	; 0xfffff5fb
    1710:	0c052e0f 	stceq	14, cr2, [r5], {15}
    1714:	5a2a052e 	bpl	a82bd4 <startup-0x1f57d42c>
    1718:	052e0f05 	streq	r0, [lr, #-3845]!	; 0xfffff0fb
    171c:	0d052e0c 	stceq	14, cr2, [r5, #-48]	; 0xffffffd0
    1720:	5b0f055b 	blpl	3c2c94 <startup-0x1fc3d36c>
    1724:	055b2005 	ldrbeq	r2, [fp, #-5]
    1728:	05312e0e 	ldreq	r2, [r1, #-3598]!	; 0xfffff1f2
    172c:	0b035901 	bleq	d7b38 <startup-0x1ff284c8>
    1730:	0c051208 	sfmeq	f1, 4, [r5], {8}
    1734:	4a1a0559 	bmi	682ca0 <startup-0x1f97d360>
    1738:	054a2705 	strbeq	r2, [sl, #-1797]	; 0xfffff8fb
    173c:	4a09030e 	bmi	24237c <startup-0x1fdbdc84>
    1740:	05850b05 	streq	r0, [r5, #2821]	; 0xb05
    1744:	0c054c0a 	stceq	12, cr4, [r5], {10}
    1748:	05754d4d 	ldrbeq	r4, [r5, #-3405]!	; 0xfffff2b3
    174c:	0c05681f 	stceq	8, cr6, [r5], {31}
    1750:	5b0b052e 	blpl	2c2c10 <startup-0x1fd3d3f0>
    1754:	05762905 	ldrbeq	r2, [r6, #-2309]!	; 0xfffff6fb
    1758:	0b052e0e 	bleq	14cf98 <startup-0x1feb3068>
    175c:	5b29052e 	blpl	a42c1c <startup-0x1f5bd3e4>
    1760:	052e0e05 	streq	r0, [lr, #-3589]!	; 0xfffff1fb
    1764:	05052e0b 	streq	r2, [r5, #-3595]	; 0xfffff1f5
    1768:	0015055a 	andseq	r0, r5, sl, asr r5
    176c:	4a010402 	bmi	4277c <startup-0x1ffbd884>
    1770:	05520d05 	ldrbeq	r0, [r2, #-3333]	; 0xfffff2fb
    1774:	1005762b 	andne	r7, r5, fp, lsr #12
    1778:	2e0d052e 	cfsh32cs	mvfx0, mvfx13, #30
    177c:	692b055a 	stmdbvs	fp!, {r1, r3, r4, r6, r8, sl}
    1780:	052e1005 	streq	r1, [lr, #-5]!
    1784:	0c052e0d 	stceq	14, cr2, [r5], {13}
    1788:	2a05755a 	bcs	15ecf8 <startup-0x1fea1308>
    178c:	2e0f0568 	cfsh32cs	mvfx0, mvfx15, #56
    1790:	052e0c05 	streq	r0, [lr, #-3077]!	; 0xfffff3fb
    1794:	0f055a2a 	svceq	0x00055a2a
    1798:	2e0c052e 	cfsh32cs	mvfx0, mvfx12, #30
    179c:	055b0d05 	ldrbeq	r0, [fp, #-3333]	; 0xfffff2fb
    17a0:	20055b0f 	andcs	r5, r5, pc, lsl #22
    17a4:	2e0e055b 	cfrshl32cs	mvfx14, mvfx11, r0
    17a8:	59010531 	stmdbpl	r1, {r0, r4, r5, r8, sl}
    17ac:	4a080b03 	bmi	2043c0 <startup-0x1fdfbc40>
    17b0:	05590c05 	ldrbeq	r0, [r9, #-3077]	; 0xfffff3fb
    17b4:	27054a1a 	smladcs	r5, sl, sl, r4
    17b8:	030e054a 	movweq	r0, #58698	; 0xe54a
    17bc:	0b054a09 	bleq	153fe8 <startup-0x1feac018>
    17c0:	4c0a0585 	cfstr32mi	mvfx0, [sl], {133}	; 0x85
    17c4:	4d4d0c05 	stclmi	12, cr0, [sp, #-20]	; 0xffffffec
    17c8:	692a0575 	stmdbvs	sl!, {r0, r2, r4, r5, r6, r8, sl}
    17cc:	052e0f05 	streq	r0, [lr, #-3845]!	; 0xfffff0fb
    17d0:	0b052e0c 	bleq	14d008 <startup-0x1feb2ff8>
    17d4:	7629055b 			; <UNDEFINED> instruction: 0x7629055b
    17d8:	052e0e05 	streq	r0, [lr, #-3589]!	; 0xfffff1fb
    17dc:	29052e0b 	stmdbcs	r5, {r0, r1, r3, r9, sl, fp, sp}
    17e0:	2e0e055b 	cfrshl32cs	mvfx14, mvfx11, r0
    17e4:	052e0b05 	streq	r0, [lr, #-2821]!	; 0xfffff4fb
    17e8:	15055a05 	strne	r5, [r5, #-2565]	; 0xfffff5fb
    17ec:	01040200 	mrseq	r0, R12_usr
    17f0:	4e0c054a 	cfsh32mi	mvfx0, mvfx12, #42
    17f4:	05762a05 	ldrbeq	r2, [r6, #-2565]!	; 0xfffff5fb
    17f8:	0c052e0f 	stceq	14, cr2, [r5], {15}
    17fc:	5b0d052e 	blpl	342cbc <startup-0x1fcbd344>
    1800:	055b0f05 	ldrbeq	r0, [fp, #-3845]	; 0xfffff0fb
    1804:	0e055b20 	vmlaeq.f64	d5, d5, d16
    1808:	0105312e 	tsteq	r5, lr, lsr #2
    180c:	08090359 	stmdaeq	r9, {r0, r3, r4, r6, r8, r9}
    1810:	4c20052e 	cfstr32mi	mvfx0, [r0], #-184	; 0xffffff48
    1814:	053d2505 	ldreq	r2, [sp, #-1285]!	; 0xfffffafb
    1818:	1f053d26 	svcne	0x00053d26
    181c:	3d24053d 	cfstr32cc	mvfx0, [r4, #-244]!	; 0xffffff0c
    1820:	3d3d2505 	cfldr32cc	mvfx2, [sp, #-20]!	; 0xffffffec
    1824:	053d2605 	ldreq	r2, [sp, #-1541]!	; 0xfffff9fb
    1828:	1a033d01 	bne	d0c34 <startup-0x1ff2f3cc>
    182c:	bb0c054a 	bllt	302d5c <startup-0x1fcfd2a4>
    1830:	5107052f 	tstpl	r7, pc, lsr #10
    1834:	3e1a052f 	cfmul64cc	mvdx0, mvdx10, mvdx15
    1838:	052e1705 	streq	r1, [lr, #-1797]!	; 0xfffff8fb
    183c:	0e052e08 	cdpeq	14, 0, cr2, cr5, cr8, {0}
    1840:	3c110531 	cfldr32cc	mvfx0, [r1], {49}	; 0x31
    1844:	054a0e05 	strbeq	r0, [sl, #-3589]	; 0xfffff1fb
    1848:	25054c05 	strcs	r4, [r5, #-3077]	; 0xfffff3fb
    184c:	01040200 	mrseq	r0, R12_usr
    1850:	4c18054a 	cfldr32mi	mvfx0, [r8], {74}	; 0x4a
    1854:	05580905 	ldrbeq	r0, [r8, #-2309]	; 0xfffff6fb
    1858:	05693f1c 	strbeq	r3, [r9, #-3868]!	; 0xfffff0e4
    185c:	3105860c 	tstcc	r5, ip, lsl #12
    1860:	3c09054a 	cfstr32cc	mvfx0, [r9], {74}	; 0x4a
    1864:	693f1c05 	ldmdbvs	pc!, {r0, r2, sl, fp, ip}	; <UNPREDICTABLE>
    1868:	052e1f05 	streq	r1, [lr, #-3845]!	; 0xfffff0fb
    186c:	0105581c 	tsteq	r5, ip, lsl r8
    1870:	9e09033e 	mcrls	3, 0, r0, cr9, cr14, {1}
    1874:	055d0e05 	ldrbeq	r0, [sp, #-3589]	; 0xfffff1fb
    1878:	0a033d01 	beq	d0c84 <startup-0x1ff2f37c>
    187c:	5d0e054a 	cfstr32pl	mvfx0, [lr, #-296]	; 0xfffffed8
    1880:	033d0105 	teqeq	sp, #1073741825	; 0x40000001
    1884:	0e054a09 	vmlaeq.f32	s8, s10, s18
    1888:	3d01055d 	cfstr32cc	mvfx0, [r1, #-372]	; 0xfffffe8c
    188c:	054a0903 	strbeq	r0, [sl, #-2307]	; 0xfffff6fd
    1890:	01055d0e 	tsteq	r5, lr, lsl #26
    1894:	4a0c033d 	bmi	302590 <startup-0x1fcfda70>
    1898:	4f750c05 	svcmi	0x00750c05
    189c:	0f05694d 	svceq	0x0005694d
    18a0:	4b010577 	blmi	42e84 <startup-0x1ffbd17c>
    18a4:	054a0d03 	strbeq	r0, [sl, #-3331]	; 0xfffff2fd
    18a8:	4d4f750c 	cfstr64mi	mvdx7, [pc, #-48]	; 1880 <startup-0x1fffe780>
    18ac:	05690f05 	strbeq	r0, [r9, #-3845]!	; 0xfffff0fb
    18b0:	0f054a0c 	svceq	0x00054a0c
    18b4:	4b01055b 	blmi	42e28 <startup-0x1ffbd1d8>
    18b8:	05660c03 	strbeq	r0, [r6, #-3075]!	; 0xfffff3fd
    18bc:	4d50750c 	cfldr64mi	mvdx7, [r0, #-48]	; 0xffffffd0
    18c0:	770f0569 	strvc	r0, [pc, -r9, ror #10]
    18c4:	034b0105 	movteq	r0, #45317	; 0xb105
    18c8:	0c054a0c 			; <UNDEFINED> instruction: 0x0c054a0c
    18cc:	054d4f75 	strbeq	r4, [sp, #-3957]	; 0xfffff08b
    18d0:	0c05690f 			; <UNDEFINED> instruction: 0x0c05690f
    18d4:	5b0f054a 	blpl	3c2e04 <startup-0x1fc3d1fc>
    18d8:	034b0105 	movteq	r0, #45317	; 0xb105
    18dc:	0c05660c 	stceq	6, cr6, [r5], {12}
    18e0:	694d5075 	stmdbvs	sp, {r0, r2, r4, r5, r6, ip, lr}^
    18e4:	05770f05 	ldrbeq	r0, [r7, #-3845]!	; 0xfffff0fb
    18e8:	0d034b01 	vstreq	d4, [r3, #-4]
    18ec:	750c054a 	strvc	r0, [ip, #-1354]	; 0xfffffab6
    18f0:	0f054d50 	svceq	0x00054d50
    18f4:	4a0c0569 	bmi	302ea0 <startup-0x1fcfd160>
    18f8:	055b0f05 	ldrbeq	r0, [fp, #-3845]	; 0xfffff0fb
    18fc:	0c034b01 			; <UNDEFINED> instruction: 0x0c034b01
    1900:	750c0566 	strvc	r0, [ip, #-1382]	; 0xfffffa9a
    1904:	05694d50 	strbeq	r4, [r9, #-3408]!	; 0xfffff2b0
    1908:	0105770f 	tsteq	r5, pc, lsl #14
    190c:	4a0c034b 	bmi	302640 <startup-0x1fcfd9c0>
    1910:	50750c05 	rsbspl	r0, r5, r5, lsl #24
    1914:	690f054d 	stmdbvs	pc, {r0, r2, r3, r6, r8, sl}	; <UNPREDICTABLE>
    1918:	054a0c05 	strbeq	r0, [sl, #-3077]	; 0xfffff3fb
    191c:	01055b0f 	tsteq	r5, pc, lsl #22
    1920:	660c034b 	strvs	r0, [ip], -fp, asr #6
    1924:	51750c05 	cmnpl	r5, r5, lsl #24
    1928:	0f05694d 	svceq	0x0005694d
    192c:	4b010577 	blmi	42f10 <startup-0x1ffbd0f0>
    1930:	054a0d03 	strbeq	r0, [sl, #-3331]	; 0xfffff2fd
    1934:	4d51750c 	cfldr64mi	mvdx7, [r1, #-48]	; 0xffffffd0
    1938:	05690f05 	strbeq	r0, [r9, #-3845]!	; 0xfffff0fb
    193c:	0f054a0c 	svceq	0x00054a0c
    1940:	4b01055b 	blmi	42eb4 <startup-0x1ffbd14c>
    1944:	05660c03 	strbeq	r0, [r6, #-3075]!	; 0xfffff3fd
    1948:	4d51750c 	cfldr64mi	mvdx7, [r1, #-48]	; 0xffffffd0
    194c:	770f0569 	strvc	r0, [pc, -r9, ror #10]
    1950:	034b0105 	movteq	r0, #45317	; 0xb105
    1954:	0c054a0c 			; <UNDEFINED> instruction: 0x0c054a0c
    1958:	054d5175 	strbeq	r5, [sp, #-373]	; 0xfffffe8b
    195c:	0c05690f 			; <UNDEFINED> instruction: 0x0c05690f
    1960:	5b0f054a 	blpl	3c2e90 <startup-0x1fc3d170>
    1964:	034b0105 	movteq	r0, #45317	; 0xb105
    1968:	0c05660c 	stceq	6, cr6, [r5], {12}
    196c:	694d5075 	stmdbvs	sp, {r0, r2, r4, r5, r6, ip, lr}^
    1970:	05770f05 	ldrbeq	r0, [r7, #-3845]!	; 0xfffff0fb
    1974:	0d034b01 	vstreq	d4, [r3, #-4]
    1978:	750c054a 	strvc	r0, [ip, #-1354]	; 0xfffffab6
    197c:	0f054d50 	svceq	0x00054d50
    1980:	4a0c0569 	bmi	302f2c <startup-0x1fcfd0d4>
    1984:	055b0f05 	ldrbeq	r0, [fp, #-3845]	; 0xfffff0fb
    1988:	0c034b01 			; <UNDEFINED> instruction: 0x0c034b01
    198c:	750c054a 	strvc	r0, [ip, #-1354]	; 0xfffffab6
    1990:	05694d50 	strbeq	r4, [r9, #-3408]!	; 0xfffff2b0
    1994:	0105770f 	tsteq	r5, pc, lsl #14
    1998:	4a0c034b 	bmi	3026cc <startup-0x1fcfd934>
    199c:	50750c05 	rsbspl	r0, r5, r5, lsl #24
    19a0:	690f054d 	stmdbvs	pc, {r0, r2, r3, r6, r8, sl}	; <UNPREDICTABLE>
    19a4:	054a0c05 	strbeq	r0, [sl, #-3077]	; 0xfffff3fb
    19a8:	01055b0f 	tsteq	r5, pc, lsl #22
    19ac:	4a0c034b 	bmi	3026e0 <startup-0x1fcfd920>
    19b0:	05750c05 	ldrbeq	r0, [r5, #-3077]!	; 0xfffff3fb
    19b4:	674d500b 	strbvs	r5, [sp, -fp]
    19b8:	05770e05 	ldrbeq	r0, [r7, #-3589]!	; 0xfffff1fb
    19bc:	0c034b01 			; <UNDEFINED> instruction: 0x0c034b01
    19c0:	750c054a 	strvc	r0, [ip, #-1354]	; 0xfffffab6
    19c4:	4d4f0b05 	vstrmi	d16, [pc, #-20]	; 19b8 <startup-0x1fffe648>
    19c8:	770e0567 	strvc	r0, [lr, -r7, ror #10]
    19cc:	034b0105 	movteq	r0, #45317	; 0xb105
    19d0:	0c054a0d 			; <UNDEFINED> instruction: 0x0c054a0d
    19d4:	500b0575 	andpl	r0, fp, r5, ror r5
    19d8:	670e054d 	strvs	r0, [lr, -sp, asr #10]
    19dc:	054a0b05 	strbeq	r0, [sl, #-2821]	; 0xfffff4fb
    19e0:	01055b0e 	tsteq	r5, lr, lsl #22
    19e4:	4a0c034b 	bmi	302718 <startup-0x1fcfd8e8>
    19e8:	05750c05 	ldrbeq	r0, [r5, #-3077]!	; 0xfffff3fb
    19ec:	054d500b 	strbeq	r5, [sp, #-11]
    19f0:	0b05670e 	bleq	15b630 <startup-0x1fea49d0>
    19f4:	5b0e054a 	blpl	382f24 <startup-0x1fc7d0dc>
    19f8:	034b0105 	movteq	r0, #45317	; 0xb105
    19fc:	0c054a0c 			; <UNDEFINED> instruction: 0x0c054a0c
    1a00:	500b0575 	andpl	r0, fp, r5, ror r5
    1a04:	670e054d 	strvs	r0, [lr, -sp, asr #10]
    1a08:	054a0b05 	strbeq	r0, [sl, #-2821]	; 0xfffff4fb
    1a0c:	01055b0e 	tsteq	r5, lr, lsl #22
    1a10:	660c034b 	strvs	r0, [ip], -fp, asr #6
    1a14:	05750c05 	ldrbeq	r0, [r5, #-3077]!	; 0xfffff3fb
    1a18:	054d500b 	strbeq	r5, [sp, #-11]
    1a1c:	0b05670e 	bleq	15b65c <startup-0x1fea49a4>
    1a20:	5b0e054a 	blpl	382f50 <startup-0x1fc7d0b0>
    1a24:	034b0105 	movteq	r0, #45317	; 0xb105
    1a28:	0c05660c 	stceq	6, cr6, [r5], {12}
    1a2c:	500b0575 	andpl	r0, fp, r5, ror r5
    1a30:	670e054d 	strvs	r0, [lr, -sp, asr #10]
    1a34:	054a0b05 	strbeq	r0, [sl, #-2821]	; 0xfffff4fb
    1a38:	01055b0e 	tsteq	r5, lr, lsl #22
    1a3c:	6610034b 	ldrvs	r0, [r0], -fp, asr #6
    1a40:	05bb0c05 	ldreq	r0, [fp, #3077]!	; 0xc05
    1a44:	07055116 	smladeq	r5, r6, r1, r5
    1a48:	310e054a 	tstcc	lr, sl, asr #10
    1a4c:	053c1105 	ldreq	r1, [ip, #-261]!	; 0xfffffefb
    1a50:	054d4a0e 	strbeq	r4, [sp, #-2574]	; 0xfffff5f2
    1a54:	12053c25 	andne	r3, r5, #9472	; 0x2500
    1a58:	200e0566 	andcs	r0, lr, r6, ror #10
    1a5c:	034b0105 	movteq	r0, #45317	; 0xb105
    1a60:	0c054a0f 			; <UNDEFINED> instruction: 0x0c054a0f
    1a64:	511705bb 			; <UNDEFINED> instruction: 0x511705bb
    1a68:	054a0705 	strbeq	r0, [sl, #-1797]	; 0xfffff8fb
    1a6c:	1105310e 	tstne	r5, lr, lsl #2
    1a70:	4a0e053c 	bmi	382f68 <startup-0x1fc7d098>
    1a74:	3c26054d 	cfstr32cc	mvfx0, [r6], #-308	; 0xfffffecc
    1a78:	05661205 	strbeq	r1, [r6, #-517]!	; 0xfffffdfb
    1a7c:	0105200e 	tsteq	r5, lr
    1a80:	00c5034b 	sbceq	r0, r5, fp, asr #6
    1a84:	6017054a 	andsvs	r0, r7, sl, asr #10
    1a88:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
    1a8c:	05943105 	ldreq	r3, [r4, #261]	; 0x105
    1a90:	74200301 	strtvc	r0, [r0], #-769	; 0xfffffcff
    1a94:	62031c05 	andvs	r1, r3, #1280	; 0x500
    1a98:	2e0b0520 	cfsh32cs	mvfx0, mvfx11, #16
    1a9c:	94320505 	ldrtls	r0, [r2], #-1285	; 0xfffffafb
    1aa0:	16030105 	strne	r0, [r3], -r5, lsl #2
    1aa4:	031c0574 	tsteq	ip, #116, 10	; 0x1d000000
    1aa8:	0b05206c 	bleq	149c60 <startup-0x1feb63a0>
    1aac:	3205052e 	andcc	r0, r5, #192937984	; 0xb800000
    1ab0:	03010594 	movweq	r0, #5524	; 0x1594
    1ab4:	0505740c 	streq	r7, [r5, #-1036]	; 0xfffffbf4
    1ab8:	94207a03 	strtls	r7, [r0], #-2563	; 0xfffff5fd
    1abc:	03760105 	cmneq	r6, #1073741825	; 0x40000001
    1ac0:	21054a09 	tstcs	r5, r9, lsl #20
    1ac4:	3d24054c 	cfstr32cc	mvfx0, [r4, #-304]!	; 0xfffffed0
    1ac8:	3d3d2505 	cfldr32cc	mvfx2, [sp, #-20]!	; 0xffffffec
    1acc:	053d2205 	ldreq	r2, [sp, #-517]!	; 0xfffffdfb
    1ad0:	0c033d01 	stceq	13, cr3, [r3], {1}
    1ad4:	590c054a 	stmdbpl	ip, {r1, r3, r6, r8, sl}
    1ad8:	5017054b 	andspl	r0, r7, fp, asr #10
    1adc:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
    1ae0:	054e3018 	strbeq	r3, [lr, #-24]	; 0xffffffe8
    1ae4:	06054d17 			; <UNDEFINED> instruction: 0x06054d17
    1ae8:	3019052e 	andscc	r0, r9, lr, lsr #10
    1aec:	4c17055c 	cfldr32mi	mvfx0, [r7], {92}	; 0x5c
    1af0:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
    1af4:	76933105 	ldrvc	r3, [r3], r5, lsl #2
    1af8:	030105bc 	movweq	r0, #5564	; 0x15bc
    1afc:	0505740e 	streq	r7, [r5, #-1038]	; 0xfffffbf2
    1b00:	93207703 			; <UNDEFINED> instruction: 0x93207703
    1b04:	0105bc76 	tsteq	r5, r6, ror ip
    1b08:	0e055276 	mcreq	2, 0, r5, cr5, cr6, {3}
    1b0c:	2f01054f 	svccs	0x0001054f
    1b10:	054a0903 	strbeq	r0, [sl, #-2307]	; 0xfffff6fd
    1b14:	01054f0e 	tsteq	r5, lr, lsl #30
    1b18:	0e05522f 	cdpeq	2, 0, cr5, cr5, cr15, {1}
    1b1c:	2f01054f 	svccs	0x0001054f
    1b20:	4f0e0552 	svcmi	0x000e0552
    1b24:	032f0105 			; <UNDEFINED> instruction: 0x032f0105
    1b28:	0f054a0e 	svceq	0x00054a0e
    1b2c:	0105857a 	tsteq	r5, sl, ror r5
    1b30:	4a0f0391 	bmi	3c297c <startup-0x1fc3d684>
    1b34:	857a0f05 	ldrbhi	r0, [sl, #-3845]!	; 0xfffff0fb
    1b38:	053c1205 	ldreq	r1, [ip, #-517]!	; 0xfffffdfb
    1b3c:	01054a0f 	tsteq	r5, pc, lsl #20
    1b40:	660e034b 	strvs	r0, [lr], -fp, asr #6
    1b44:	857a0f05 	ldrbhi	r0, [sl, #-3845]!	; 0xfffff0fb
    1b48:	03910105 	orrseq	r0, r1, #1073741825	; 0x40000001
    1b4c:	0f054a0e 	svceq	0x00054a0e
    1b50:	1205857a 	andne	r8, r5, #511705088	; 0x1e800000
    1b54:	4a0f053c 	bmi	3c304c <startup-0x1fc3cfb4>
    1b58:	034b0105 	movteq	r0, #45317	; 0xb105
    1b5c:	2c05662b 	stccs	6, cr6, [r5], {43}	; 0x2b
    1b60:	05580c03 	ldrbeq	r0, [r8, #-3075]	; 0xfffff3fd
    1b64:	0e052e50 	mcreq	14, 0, r2, cr5, cr0, {2}
    1b68:	2f20052e 	svccs	0x0020052e
    1b6c:	052d0e05 	streq	r0, [sp, #-3589]!	; 0xfffff1fb
    1b70:	0e052f44 	cdpeq	15, 0, cr2, cr5, cr4, {2}
    1b74:	3020052d 	eorcc	r0, r0, sp, lsr #10
    1b78:	052c0e05 	streq	r0, [ip, #-3589]!	; 0xfffff1fb
    1b7c:	0e053040 	cdpeq	0, 0, cr3, cr5, cr0, {2}
    1b80:	3120052c 			; <UNDEFINED> instruction: 0x3120052c
    1b84:	052b0e05 	streq	r0, [fp, #-3589]!	; 0xfffff1fb
    1b88:	09035c01 	stmdbeq	r3, {r0, sl, fp, ip, lr}
    1b8c:	4c25054a 	cfstr32mi	mvfx0, [r5], #-296	; 0xfffffed8
    1b90:	24053d3d 	strcs	r3, [r5], #-3389	; 0xfffff2c3
    1b94:	3d21053d 	cfstr32cc	mvfx0, [r1, #-244]!	; 0xffffff0c
    1b98:	053d2905 	ldreq	r2, [sp, #-2309]!	; 0xfffff6fb
    1b9c:	01053d2b 	tsteq	r5, fp, lsr #26
    1ba0:	4a0a033d 	bmi	28289c <startup-0x1fd7d764>
    1ba4:	05790605 	ldrbeq	r0, [r9, #-1541]!	; 0xfffff9fb
    1ba8:	01054d10 	tsteq	r5, r0, lsl sp
    1bac:	1e1005a5 	cdpne	5, 1, cr0, cr0, cr5, {5}
    1bb0:	03a00105 	moveq	r0, #1073741825	; 0x40000001
    1bb4:	0605740a 	streq	r7, [r5], -sl, lsl #8
    1bb8:	4d0f0579 	cfstr32mi	mvfx0, [pc, #-484]	; 19dc <startup-0x1fffe624>
    1bbc:	05890105 	streq	r0, [r9, #261]	; 0x105
    1bc0:	01051e0f 	tsteq	r5, pc, lsl #28
    1bc4:	4a0a0384 	bmi	2829dc <startup-0x1fd7d624>
    1bc8:	05780605 	ldrbeq	r0, [r8, #-1541]!	; 0xfffff9fb
    1bcc:	01054d0f 	tsteq	r5, pc, lsl #26
    1bd0:	1e0f0589 	cfsh32ne	mvfx0, mvfx15, #-55
    1bd4:	03840105 	orreq	r0, r4, #1073741825	; 0x40000001
    1bd8:	06054a2b 	streq	r4, [r5], -fp, lsr #20
    1bdc:	4d1005c0 	cfldr32mi	mvfx0, [r0, #-768]	; 0xfffffd00
    1be0:	05970105 	ldreq	r0, [r7, #261]	; 0x105
    1be4:	13051e10 	movwne	r1, #24080	; 0x5e10
    1be8:	4a10053c 	bmi	4030e0 <startup-0x1fbfcf20>
    1bec:	034c0105 	movteq	r0, #49413	; 0xc105
    1bf0:	0d054a16 	vstreq	s8, [r5, #-88]	; 0xffffffa8
    1bf4:	4b01057a 	blmi	431e4 <startup-0x1ffbce1c>
    1bf8:	054a1a03 	strbeq	r1, [sl, #-2563]	; 0xfffff5fd
    1bfc:	0550750c 	ldrbeq	r7, [r0, #-1292]	; 0xfffffaf4
    1c00:	06053c1d 			; <UNDEFINED> instruction: 0x06053c1d
    1c04:	300f054a 	andcc	r0, pc, sl, asr #10
    1c08:	4c0a054e 	cfstr32mi	mvfx0, [sl], {78}	; 0x4e
    1c0c:	033d0105 	teqeq	sp, #1073741825	; 0x40000001
    1c10:	0e054a1a 			; <UNDEFINED> instruction: 0x0e054a1a
    1c14:	4a0c0579 	bmi	303200 <startup-0x1fcfce00>
    1c18:	032f0105 			; <UNDEFINED> instruction: 0x032f0105
    1c1c:	0c054a16 			; <UNDEFINED> instruction: 0x0c054a16
    1c20:	1c054b75 			; <UNDEFINED> instruction: 0x1c054b75
    1c24:	4f12054a 	svcmi	0x0012054a
    1c28:	053c0c05 	ldreq	r0, [ip, #-3077]!	; 0xfffff3fb
    1c2c:	0c055a12 			; <UNDEFINED> instruction: 0x0c055a12
    1c30:	5906053c 	stmdbpl	r6, {r2, r3, r4, r5, r8, sl}
    1c34:	02002505 	andeq	r2, r0, #20971520	; 0x1400000
    1c38:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
    1c3c:	054e4c0f 	strbeq	r4, [lr, #-3087]	; 0xfffff3f1
    1c40:	01054c0a 	tsteq	r5, sl, lsl #24
    1c44:	4a16033d 	bmi	582940 <startup-0x1fa7d6c0>
    1c48:	05790e05 	ldrbeq	r0, [r9, #-3589]!	; 0xfffff1fb
    1c4c:	01054a0c 	tsteq	r5, ip, lsl #20
    1c50:	4a1f032f 	bmi	7c2914 <startup-0x1f83d6ec>
    1c54:	05c10d05 	strbeq	r0, [r1, #3333]	; 0xd05
    1c58:	13039101 	movwne	r9, #12545	; 0x3101
    1c5c:	c006054a 	andgt	r0, r6, sl, asr #10
    1c60:	054d1005 	strbeq	r1, [sp, #-5]
    1c64:	10059701 	andne	r9, r5, r1, lsl #14
    1c68:	3c13051e 	cfldr32cc	mvfx0, [r3], {30}
    1c6c:	054a1005 	strbeq	r1, [sl, #-5]
    1c70:	0a034c01 	beq	d4c7c <startup-0x1ff2b384>
    1c74:	7906054a 	stmdbvc	r6, {r1, r3, r6, r8, sl}
    1c78:	054d0f05 	strbeq	r0, [sp, #-3845]	; 0xfffff0fb
    1c7c:	0f058901 	svceq	0x00058901
    1c80:	8401051e 	strhi	r0, [r1], #-1310	; 0xfffffae2
    1c84:	054a1803 	strbeq	r1, [sl, #-2051]	; 0xfffff7fd
    1c88:	01054f0e 	tsteq	r5, lr, lsl #30
    1c8c:	4a0f0383 	bmi	3c2aa0 <startup-0x1fc3d560>
    1c90:	057a0305 	ldrbeq	r0, [sl, #-773]!	; 0xfffffcfb
    1c94:	0105770e 	tsteq	r5, lr, lsl #14
    1c98:	4a150383 	bmi	542aac <startup-0x1fabd554>
    1c9c:	27080605 	strcs	r0, [r8, -r5, lsl #12]
    1ca0:	a24c0505 	subge	r0, ip, #20971520	; 0x1400000
    1ca4:	05a10305 	streq	r0, [r1, #773]!	; 0x305
    1ca8:	0105840e 	tsteq	r5, lr, lsl #8
    1cac:	4a150383 	bmi	542ac0 <startup-0x1fabd540>
    1cb0:	21080c05 	tstcs	r8, r5, lsl #24
    1cb4:	05520305 	ldrbeq	r0, [r2, #-773]	; 0xfffffcfb
    1cb8:	774daf0b 	strbvc	sl, [sp, -fp, lsl #30]
    1cbc:	0e056769 	cdpeq	7, 0, cr6, cr5, cr9, {3}
    1cc0:	4b010569 	blmi	4326c <startup-0x1ffbcd94>
    1cc4:	054a1503 	strbeq	r1, [sl, #-1283]	; 0xfffffafd
    1cc8:	05280803 	streq	r0, [r8, #-2051]!	; 0xfffff7fd
    1ccc:	0105a10e 	tsteq	r5, lr, lsl #2
    1cd0:	4a3a0391 	bmi	e82b1c <startup-0x1f17d4e4>
    1cd4:	05750c05 	ldrbeq	r0, [r5, #-3077]!	; 0xfffff3fb
    1cd8:	694d510b 	stmdbvs	sp, {r0, r1, r3, r8, ip, lr}^
    1cdc:	05770e05 	ldrbeq	r0, [r7, #-3589]!	; 0xfffff1fb
    1ce0:	19034b01 	stmdbne	r3, {r0, r8, r9, fp, lr}
    1ce4:	7a0d054a 	bvc	343214 <startup-0x1fcbcdec>
    1ce8:	91010584 	smlabbls	r1, r4, r5, r0
    1cec:	054a0f03 	strbeq	r0, [sl, #-3843]	; 0xfffff0fd
    1cf0:	05857a0e 	streq	r7, [r5, #2574]	; 0xa0e
    1cf4:	0d039101 	stfeqd	f1, [r3, #-4]
    1cf8:	7a0e054a 	bvc	383228 <startup-0x1fc7cdd8>
    1cfc:	91010585 	smlabbls	r1, r5, r5, r0
    1d00:	054a1503 	strbeq	r1, [sl, #-1283]	; 0xfffffafd
    1d04:	0521080c 	streq	r0, [r1, #-2060]!	; 0xfffff7f4
    1d08:	054d520b 	strbeq	r5, [sp, #-523]	; 0xfffffdf5
    1d0c:	2f05694f 	svccs	0x0005694f
    1d10:	4a0e054a 	bmi	383240 <startup-0x1fc7cdc0>
    1d14:	054a0b05 	strbeq	r0, [sl, #-2821]	; 0xfffff4fb
    1d18:	01055b0e 	tsteq	r5, lr, lsl #22
    1d1c:	4a27034b 	bmi	9c2a50 <startup-0x1f63d5b0>
    1d20:	21080c05 	tstcs	r8, r5, lsl #24
    1d24:	0b054b4b 	bleq	154a58 <startup-0x1feab5a8>
    1d28:	054a0903 	strbeq	r0, [sl, #-2307]	; 0xfffff6fd
    1d2c:	0b054d0c 	bleq	155164 <startup-0x1feaae9c>
    1d30:	05754d4d 	ldrbeq	r4, [r5, #-3405]!	; 0xfffff2b3
    1d34:	0567770c 	strbeq	r7, [r7, #-1804]!	; 0xfffff8f4
    1d38:	2b05770b 	blcs	15f96c <startup-0x1fea0694>
    1d3c:	4a0e0567 	bmi	3832e0 <startup-0x1fc7cd20>
    1d40:	05580b05 	ldrbeq	r0, [r8, #-2821]	; 0xfffff4fb
    1d44:	0f055b0e 	svceq	0x00055b0e
    1d48:	4d0e054d 	cfstr32mi	mvfx0, [lr, #-308]	; 0xfffffecc
    1d4c:	034b0105 	movteq	r0, #45317	; 0xb105
    1d50:	0605660b 	streq	r6, [r5], -fp, lsl #12
    1d54:	4d0f0579 	cfstr32mi	mvfx0, [pc, #-484]	; 1b78 <startup-0x1fffe488>
    1d58:	05890105 	streq	r0, [r9, #261]	; 0x105
    1d5c:	01051e0f 	tsteq	r5, pc, lsl #28
    1d60:	4a240384 	bmi	902b78 <startup-0x1f6fd488>
    1d64:	057a0c05 	ldrbeq	r0, [sl, #-3077]!	; 0xfffff3fb
    1d68:	19035901 	stmdbne	r3, {r0, r8, fp, ip, lr}
    1d6c:	080c054a 	stmdaeq	ip, {r1, r3, r6, r8, sl}
    1d70:	4a1a0521 	bmi	6831fc <startup-0x1f97ce04>
    1d74:	054d0e05 	strbeq	r0, [sp, #-3589]	; 0xfffff1fb
    1d78:	0b05830c 	bleq	1629b0 <startup-0x1fe9d650>
    1d7c:	4d0c054b 	cfstr32mi	mvfx0, [ip, #-300]	; 0xfffffed4
    1d80:	05672c05 	strbeq	r2, [r7, #-3077]!	; 0xfffff3fb
    1d84:	0c054a0f 			; <UNDEFINED> instruction: 0x0c054a0f
    1d88:	5b0b054a 	blpl	2c32b8 <startup-0x1fd3cd48>
    1d8c:	a10f0567 	tstge	pc, r7, ror #10
    1d90:	054b0e05 	strbeq	r0, [fp, #-3589]	; 0xfffff1fb
    1d94:	16034b01 	strne	r4, [r3], -r1, lsl #22
    1d98:	080c054a 	stmdaeq	ip, {r1, r3, r6, r8, sl}
    1d9c:	4a1a0521 	bmi	683228 <startup-0x1f97cdd8>
    1da0:	054a2705 	strbeq	r2, [sl, #-1797]	; 0xfffff8fb
    1da4:	0c054d0e 	stceq	13, cr4, [r5], {14}
    1da8:	4b0b0583 	blmi	2c33bc <startup-0x1fd3cc44>
    1dac:	054b0705 	strbeq	r0, [fp, #-1797]	; 0xfffff8fb
    1db0:	0f055b0c 	svceq	0x00055b0c
    1db4:	4a0c0575 	bmi	303390 <startup-0x1fcfcc70>
    1db8:	05590f05 	ldrbeq	r0, [r9, #-3845]	; 0xfffff0fb
    1dbc:	0b05580c 	bleq	157df4 <startup-0x1fea820c>
    1dc0:	0f05675b 	svceq	0x0005675b
    1dc4:	4b0e05a1 	blmi	383450 <startup-0x1fc7cbb0>
    1dc8:	034b0105 	movteq	r0, #45317	; 0xb105
    1dcc:	0c056615 	stceq	6, cr6, [r5], {21}
    1dd0:	1a052108 	bne	14a1f8 <startup-0x1feb5e08>
    1dd4:	4a27054a 	bmi	9c3304 <startup-0x1f63ccfc>
    1dd8:	054d0e05 	strbeq	r0, [sp, #-3589]	; 0xfffff1fb
    1ddc:	0b05830c 	bleq	162a14 <startup-0x1fe9d5ec>
    1de0:	4b07054b 	blmi	1c3314 <startup-0x1fe3ccec>
    1de4:	055b0c05 	ldrbeq	r0, [fp, #-3077]	; 0xfffff3fb
    1de8:	0f05752c 	svceq	0x0005752c
    1dec:	580c054a 	stmdapl	ip, {r1, r3, r6, r8, sl}
    1df0:	675b0b05 	ldrbvs	r0, [fp, -r5, lsl #22]
    1df4:	05af0f05 	streq	r0, [pc, #3845]!	; 2d01 <startup-0x1fffd2ff>
    1df8:	01054b0e 	tsteq	r5, lr, lsl #22
    1dfc:	9015034b 	andsls	r0, r5, fp, asr #6
    1e00:	21080c05 	tstcs	r8, r5, lsl #24
    1e04:	054a1a05 	strbeq	r1, [sl, #-2565]	; 0xfffff5fb
    1e08:	0e054a27 	vmlaeq.f32	s8, s10, s15
    1e0c:	830c054d 	movwhi	r0, #50509	; 0xc54d
    1e10:	054b0b05 	strbeq	r0, [fp, #-2821]	; 0xfffff4fb
    1e14:	0c054b07 			; <UNDEFINED> instruction: 0x0c054b07
    1e18:	750f055b 	strvc	r0, [pc, #-1371]	; 18c5 <startup-0x1fffe73b>
    1e1c:	05580c05 	ldrbeq	r0, [r8, #-3077]	; 0xfffff3fb
    1e20:	0c05590f 			; <UNDEFINED> instruction: 0x0c05590f
    1e24:	5b0b054a 	blpl	2c3354 <startup-0x1fd3ccac>
    1e28:	af0f0567 	svcge	0x000f0567
    1e2c:	054b0e05 	strbeq	r0, [fp, #-3589]	; 0xfffff1fb
    1e30:	0a024b01 	beq	94a3c <startup-0x1ff6b5c4>
    1e34:	64010100 	strvs	r0, [r1], #-256	; 0xffffff00
    1e38:	03000004 	movweq	r0, #4
    1e3c:	00020600 	andeq	r0, r2, r0, lsl #12
    1e40:	fb010200 	blx	4264a <startup-0x1ffbd9b6>
    1e44:	01000d0e 	tsteq	r0, lr, lsl #26
    1e48:	00010101 	andeq	r0, r1, r1, lsl #2
    1e4c:	00010000 	andeq	r0, r1, r0
    1e50:	3a430100 	bcc	10c2258 <startup-0x1ef3dda8>
    1e54:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
    1e58:	612f7372 			; <UNDEFINED> instruction: 0x612f7372
    1e5c:	726e696d 	rsbvc	r6, lr, #1785856	; 0x1b4000
    1e60:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    1e64:	706f746b 	rsbvc	r7, pc, fp, ror #8
    1e68:	7461642f 	strbtvc	r6, [r1], #-1071	; 0xfffffbd1
    1e6c:	6f727061 	svcvs	0x00727061
    1e70:	746b656a 	strbtvc	r6, [fp], #-1386	; 0xfffffa96
    1e74:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    1e78:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
    1e7c:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    1e80:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    1e84:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
    1e88:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    1e8c:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    1e90:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
    1e94:	535f7878 	cmppl	pc, #120, 16	; 0x780000
    1e98:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0xfffffb8c
    1e9c:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1ea0:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    1ea4:	2f726576 	svccs	0x00726576
    1ea8:	00637273 	rsbeq	r7, r3, r3, ror r2
    1eac:	635c3a63 	cmpvs	ip, #405504	; 0x63000
    1eb0:	70616573 	rsbvc	r6, r1, r3, ror r5
    1eb4:	6f635c70 	svcvs	0x00635c70
    1eb8:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
    1ebc:	745c6574 	ldrbvc	r6, [ip], #-1396	; 0xfffffa8c
    1ec0:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    1ec4:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    1ec8:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    1ecc:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    1ed0:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    1ed4:	61652d65 	cmnvs	r5, r5, ror #26
    1ed8:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    1edc:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    1ee0:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
    1ee4:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    1ee8:	6300656e 	movwvs	r6, #1390	; 0x56e
    1eec:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
    1ef0:	70706165 	rsbsvc	r6, r0, r5, ror #2
    1ef4:	646f635c 	strbtvs	r6, [pc], #-860	; 1efc <startup-0x1fffe104>
    1ef8:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
    1efc:	6f745c65 	svcvs	0x00745c65
    1f00:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    1f04:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    1f08:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
    1f0c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    1f10:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    1f14:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    1f18:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    1f1c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    1f20:	79735c65 	ldmdbvc	r3!, {r0, r2, r5, r6, sl, fp, ip, lr}^
    1f24:	3a430073 	bcc	10c20f8 <startup-0x1ef3df08>
    1f28:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
    1f2c:	612f7372 			; <UNDEFINED> instruction: 0x612f7372
    1f30:	726e696d 	rsbvc	r6, lr, #1785856	; 0x1b4000
    1f34:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    1f38:	706f746b 	rsbvc	r7, pc, fp, ror #8
    1f3c:	7461642f 	strbtvc	r6, [r1], #-1071	; 0xfffffbd1
    1f40:	6f727061 	svcvs	0x00727061
    1f44:	746b656a 	strbtvc	r6, [fp], #-1386	; 0xfffffa96
    1f48:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    1f4c:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
    1f50:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    1f54:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    1f58:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
    1f5c:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    1f60:	534d432f 	movtpl	r4, #54063	; 0xd32f
    1f64:	492f5349 	stmdbmi	pc!, {r0, r3, r6, r8, r9, ip, lr}	; <UNPREDICTABLE>
    1f68:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    1f6c:	43006564 	movwmi	r6, #1380	; 0x564
    1f70:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
    1f74:	2f737265 	svccs	0x00737265
    1f78:	6e696d61 	cdpvs	13, 6, cr6, cr9, cr1, {3}
    1f7c:	65442f72 	strbvs	r2, [r4, #-3954]	; 0xfffff08e
    1f80:	6f746b73 	svcvs	0x00746b73
    1f84:	61642f70 	smcvs	17136	; 0x42f0
    1f88:	72706174 	rsbsvc	r6, r0, #116, 2
    1f8c:	6b656a6f 	blvs	195c950 <startup-0x1e6a36b0>
    1f90:	54532f74 	ldrbpl	r2, [r3], #-3956	; 0xfffff08c
    1f94:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    1f98:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
    1f9c:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
    1fa0:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    1fa4:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
    1fa8:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
    1fac:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    1fb0:	5f787834 	svcpl	0x00787834
    1fb4:	50647453 	rsbpl	r7, r4, r3, asr r4
    1fb8:	70697265 	rsbvc	r7, r9, r5, ror #4
    1fbc:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
    1fc0:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    1fc4:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    1fc8:	74730000 	ldrbtvc	r0, [r3], #-0
    1fcc:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    1fd0:	5f787834 	svcpl	0x00787834
    1fd4:	6f697067 	svcvs	0x00697067
    1fd8:	0100632e 	tsteq	r0, lr, lsr #6
    1fdc:	645f0000 	ldrbvs	r0, [pc], #-0	; 1fe4 <startup-0x1fffe01c>
    1fe0:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
    1fe4:	745f746c 	ldrbvc	r7, [pc], #-1132	; 1fec <startup-0x1fffe014>
    1fe8:	73657079 	cmnvc	r5, #121	; 0x79
    1fec:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    1ff0:	735f0000 	cmpvc	pc, #0
    1ff4:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    1ff8:	00682e74 	rsbeq	r2, r8, r4, ror lr
    1ffc:	63000003 	movwvs	r0, #3
    2000:	5f65726f 	svcpl	0x0065726f
    2004:	2e346d63 	cdpcs	13, 3, cr6, cr4, cr3, {3}
    2008:	00040068 	andeq	r0, r4, r8, rrx
    200c:	73797300 	cmnvc	r9, #0, 6
    2010:	5f6d6574 	svcpl	0x006d6574
    2014:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    2018:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    201c:	00682e78 	rsbeq	r2, r8, r8, ror lr
    2020:	73000005 	movwvc	r0, #5
    2024:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    2028:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    202c:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    2030:	74730000 	ldrbtvc	r0, [r3], #-0
    2034:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    2038:	5f787834 	svcpl	0x00787834
    203c:	6f697067 	svcvs	0x00697067
    2040:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    2044:	05000000 	streq	r0, [r0, #-0]
    2048:	02050001 	andeq	r0, r5, #1
    204c:	200036d4 	ldrdcs	r3, [r0], -r4
    2050:	0100ff03 	tsteq	r0, r3, lsl #30	; <UNPREDICTABLE>
    2054:	054e0605 	strbeq	r0, [lr, #-1541]	; 0xfffff9fb
    2058:	054b4c05 	strbeq	r4, [fp, #-3077]	; 0xfffff3fb
    205c:	4a380301 	bmi	e02c68 <startup-0x1f1fd398>
    2060:	4a030b05 	bmi	c4c7c <startup-0x1ff3b384>
    2064:	4c050520 	cfstr32mi	mvfx0, [r5], {32}
    2068:	0301054b 	movweq	r0, #5451	; 0x154b
    206c:	0b054a33 	bleq	154940 <startup-0x1feab6c0>
    2070:	05204f03 	streq	r4, [r0, #-3843]!	; 0xfffff0fd
    2074:	054b4c05 	strbeq	r4, [fp, #-3077]	; 0xfffff3fb
    2078:	4a2e0301 	bmi	b82c84 <startup-0x1f47d37c>
    207c:	54030b05 	strpl	r0, [r3], #-2821	; 0xfffff4fb
    2080:	4c050520 	cfstr32mi	mvfx0, [r5], {32}
    2084:	0301054b 	movweq	r0, #5451	; 0x154b
    2088:	0b054a29 	bleq	154934 <startup-0x1feab6cc>
    208c:	05205903 	streq	r5, [r0, #-2307]!	; 0xfffff6fd
    2090:	054b4c05 	strbeq	r4, [fp, #-3077]	; 0xfffff3fb
    2094:	4a240301 	bmi	902ca0 <startup-0x1f6fd360>
    2098:	5e030b05 	vmlapl.f64	d0, d3, d5
    209c:	4c050520 	cfstr32mi	mvfx0, [r5], {32}
    20a0:	0301054b 	movweq	r0, #5451	; 0x154b
    20a4:	0b054a1f 	bleq	154928 <startup-0x1feab6d8>
    20a8:	05206303 	streq	r6, [r0, #-771]!	; 0xfffffcfd
    20ac:	054b4c05 	strbeq	r4, [fp, #-3077]	; 0xfffff3fb
    20b0:	4a1a0301 	bmi	682cbc <startup-0x1f97d344>
    20b4:	68030b05 	stmdavs	r3, {r0, r2, r8, r9, fp}
    20b8:	4c050520 	cfstr32mi	mvfx0, [r5], {32}
    20bc:	0301054b 	movweq	r0, #5451	; 0x154b
    20c0:	0b054a15 	bleq	15491c <startup-0x1feab6e4>
    20c4:	05206e03 	streq	r6, [r0, #-3587]!	; 0xfffff1fd
    20c8:	05674c05 	strbeq	r4, [r7, #-3077]!	; 0xfffff3fb
    20cc:	660f0301 	strvs	r0, [pc], -r1, lsl #6
    20d0:	73030b05 	movwvc	r0, #15109	; 0x3b05
    20d4:	4c050520 	cfstr32mi	mvfx0, [r5], {32}
    20d8:	03010567 	movweq	r0, #5479	; 0x1567
    20dc:	0805660a 	stmdaeq	r5, {r1, r3, r9, sl, sp, lr}
    20e0:	05207a03 	streq	r7, [r0, #-2563]!	; 0xfffff5fd
    20e4:	05674c07 	strbeq	r4, [r7, #-3079]!	; 0xfffff3f9
    20e8:	0c036901 			; <UNDEFINED> instruction: 0x0c036901
    20ec:	0c059008 	stceq	0, cr9, [r5], {8}
    20f0:	2e1b0559 	mrccs	5, 0, r0, cr11, cr9, {2}
    20f4:	052e2805 	streq	r2, [lr, #-2053]!	; 0xfffff7fb
    20f8:	2e0a030f 	cdpcs	3, 0, cr0, cr10, cr15, {0}
    20fc:	052e0305 	streq	r0, [lr, #-773]!	; 0xfffffcfb
    2100:	22052209 	andcs	r2, r5, #-1879048192	; 0x90000000
    2104:	2e10055a 	mrccs	5, 0, r0, cr0, cr10, {2}
    2108:	053e0805 	ldreq	r0, [lr, #-2053]!	; 0xfffff7fb
    210c:	37054c15 	smladcc	r5, r5, ip, r4
    2110:	2e2c052e 	cfsh64cs	mvdx0, mvdx12, #30
    2114:	053c1805 	ldreq	r1, [ip, #-2053]!	; 0xfffff7fb
    2118:	14052015 	strne	r2, [r5], #-21	; 0xffffffeb
    211c:	2e32053d 	mrccs	5, 1, r0, cr2, cr13, {1}
    2120:	052e1905 	streq	r1, [lr, #-2309]!	; 0xfffff6fb
    2124:	3f05204a 	svccc	0x0005204a
    2128:	2e14052e 	cfmul64cs	mvdx0, mvdx4, mvdx14
    212c:	053e1b05 	ldreq	r1, [lr, #-2821]!	; 0xfffff4fb
    2130:	4c052e0a 	stcmi	14, cr2, [r5], {10}
    2134:	01040200 	mrseq	r0, R12_usr
    2138:	0039052e 	eorseq	r0, r9, lr, lsr #10
    213c:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
    2140:	05341805 	ldreq	r1, [r4, #-2053]!	; 0xfffff7fb
    2144:	34052e3f 	strcc	r2, [r5], #-3647	; 0xfffff1c1
    2148:	3c1b052e 	cfldr32cc	mvfx0, [fp], {46}	; 0x2e
    214c:	3d201805 	stccc	8, cr1, [r0, #-20]!	; 0xffffffec
    2150:	052e3605 	streq	r3, [lr, #-1541]!	; 0xfffff9fb
    2154:	4f052e1c 	svcmi	0x00052e1c
    2158:	2e440520 	cdpcs	5, 4, cr0, cr4, cr0, {1}
    215c:	422e1805 	eormi	r1, lr, #327680	; 0x50000
    2160:	052e3405 	streq	r3, [lr, #-1029]!	; 0xfffffbfb
    2164:	1b053c30 	blne	15122c <startup-0x1feaedd4>
    2168:	2018052e 	andscs	r0, r8, lr, lsr #10
    216c:	053d1705 	ldreq	r1, [sp, #-1797]!	; 0xfffff8fb
    2170:	26052e3f 			; <UNDEFINED> instruction: 0x26052e3f
    2174:	2051052e 	subscs	r0, r1, lr, lsr #10
    2178:	052e4d05 	streq	r4, [lr, #-3333]!	; 0xfffff2fb
    217c:	17052e1a 	smladne	r5, sl, lr, r2
    2180:	40140520 	andsmi	r0, r4, r0, lsr #10
    2184:	052e2f05 	streq	r2, [lr, #-3845]!	; 0xfffff0fb
    2188:	2b052e40 	blcs	14da90 <startup-0x1feb2570>
    218c:	3c170520 	cfldr32cc	mvfx0, [r7], {32}
    2190:	3d201405 	cfstrscc	mvf1, [r0, #-20]!	; 0xffffffec
    2194:	052e3205 	streq	r3, [lr, #-517]!	; 0xfffffdfb
    2198:	4a052e19 	bmi	14da04 <startup-0x1feb25fc>
    219c:	2e3f0520 	cfabs64cs	mvdx0, mvdx15
    21a0:	052e1405 	streq	r1, [lr, #-1029]!	; 0xfffffbfb
    21a4:	0402002c 	streq	r0, [r2], #-44	; 0xffffffd4
    21a8:	3c620302 	stclcc	3, cr0, [r2], #-8
    21ac:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
    21b0:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
    21b4:	3c210301 	stccc	3, cr0, [r1], #-4
    21b8:	4c1e0560 	cfldr32mi	mvfx0, [lr], {96}	; 0x60
    21bc:	3d1f053d 	cfldr32cc	mvfx0, [pc, #-244]	; 20d0 <startup-0x1fffdf30>
    21c0:	3d1e053d 	cfldr32cc	mvfx0, [lr, #-244]	; 0xffffff0c
    21c4:	033d0105 	teqeq	sp, #1073741825	; 0x40000001
    21c8:	11056610 	tstne	r5, r0, lsl r6
    21cc:	42070575 	andmi	r0, r7, #490733568	; 0x1d400000
    21d0:	3e5a0f05 	cdpcc	15, 5, cr0, cr10, cr5, {0}
    21d4:	3e0e054c 	cfsh32cc	mvfx0, mvfx14, #44
    21d8:	052e0705 	streq	r0, [lr, #-1797]!	; 0xfffff8fb
    21dc:	0705220e 	streq	r2, [r5, -lr, lsl #4]
    21e0:	2101052e 	tstcs	r1, lr, lsr #10
    21e4:	054a1c03 	strbeq	r1, [sl, #-3075]	; 0xfffff3fd
    21e8:	0d05750b 	cfstr32eq	mvfx7, [r5, #-44]	; 0xffffffd4
    21ec:	2e130550 	mrccs	5, 0, r0, cr3, cr0, {2}
    21f0:	053c0605 	ldreq	r0, [ip, #-1541]!	; 0xfffff9fb
    21f4:	054e220f 	strbeq	r2, [lr, #-527]	; 0xfffffdf1
    21f8:	01054c0a 	tsteq	r5, sl, lsl #24
    21fc:	4a0a033d 	bmi	282ef8 <startup-0x1fd7d108>
    2200:	054e1a05 	strbeq	r1, [lr, #-2565]	; 0xfffff5fb
    2204:	01052e0b 	tsteq	r5, fp, lsl #28
    2208:	4a0c0321 	bmi	302e94 <startup-0x1fcfd16c>
    220c:	05750b05 	ldrbeq	r0, [r5, #-2821]!	; 0xfffff4fb
    2210:	1505500e 	strne	r5, [r5, #-14]
    2214:	3c06052e 	cfstr32cc	mvfx0, [r6], {46}	; 0x2e
    2218:	4e220f05 	cdpmi	15, 2, cr0, cr2, cr5, {0}
    221c:	054c0a05 	strbeq	r0, [ip, #-2565]	; 0xfffff5fb
    2220:	0a033d01 	beq	d162c <startup-0x1ff2e9d4>
    2224:	4e1a054a 	cfmac32mi	mvfx0, mvfx10, mvfx10
    2228:	052e0b05 	streq	r0, [lr, #-2821]!	; 0xfffff4fb
    222c:	0f032101 	svceq	0x00032101
    2230:	7910054a 	ldmdbvc	r0, {r1, r3, r6, r8, sl}
    2234:	034b0105 	movteq	r0, #45317	; 0xb105
    2238:	10054a0f 	andne	r4, r5, pc, lsl #20
    223c:	4b010579 	blmi	43828 <startup-0x1ffbc7d8>
    2240:	054a1003 	strbeq	r1, [sl, #-3]
    2244:	1205c006 	andne	ip, r5, #6
    2248:	5001054c 	andpl	r0, r1, ip, asr #10
    224c:	051e1205 	ldreq	r1, [lr, #-517]	; 0xfffffdfb
    2250:	0b034c01 	bleq	d525c <startup-0x1ff2ada4>
    2254:	780e054a 	stmdavc	lr, {r1, r3, r6, r8, sl}
    2258:	034b0105 	movteq	r0, #45317	; 0xb105
    225c:	0e054a0b 	vmlaeq.f32	s8, s10, s22
    2260:	75010578 	strvc	r0, [r1, #-1400]	; 0xfffffa88
    2264:	4a00ce03 	bmi	35a78 <startup-0x1ffca588>
    2268:	2fbb0c05 	svccs	0x00bb0c05
    226c:	05350b05 	ldreq	r0, [r5, #-2821]!	; 0xfffff4fb
    2270:	59052e23 	stmdbpl	r5, {r0, r1, r5, r9, sl, fp, sp}
    2274:	2008054a 	andcs	r0, r8, sl, asr #10
    2278:	053d2605 	ldreq	r2, [sp, #-1541]!	; 0xfffff9fb
    227c:	7305903d 	movwvc	r9, #20541	; 0x503d
    2280:	2039054a 	eorscs	r0, r9, sl, asr #10
    2284:	053c2905 	ldreq	r2, [ip, #-2309]!	; 0xfffff6fb
    2288:	05bb2026 	ldreq	r2, [fp, #38]!	; 0x26
    228c:	0a055816 	beq	1582ec <startup-0x1fea7d14>
    2290:	3d1d054a 	cfldr32cc	mvfx0, [sp, #-296]	; 0xfffffed8
    2294:	05582605 	ldrbeq	r2, [r8, #-1541]	; 0xfffff9fb
    2298:	04025901 	streq	r5, [r2], #-2305	; 0xfffff6ff
    229c:	89010100 	stmdbhi	r1, {r8}
    22a0:	03000002 	movweq	r0, #2
    22a4:	0001f400 	andeq	pc, r1, r0, lsl #8
    22a8:	fb010200 	blx	42ab2 <startup-0x1ffbd54e>
    22ac:	01000d0e 	tsteq	r0, lr, lsl #26
    22b0:	00010101 	andeq	r0, r1, r1, lsl #2
    22b4:	00010000 	andeq	r0, r1, r0
    22b8:	3a430100 	bcc	10c26c0 <startup-0x1ef3d940>
    22bc:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
    22c0:	612f7372 			; <UNDEFINED> instruction: 0x612f7372
    22c4:	726e696d 	rsbvc	r6, lr, #1785856	; 0x1b4000
    22c8:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    22cc:	706f746b 	rsbvc	r7, pc, fp, ror #8
    22d0:	7461642f 	strbtvc	r6, [r1], #-1071	; 0xfffffbd1
    22d4:	6f727061 	svcvs	0x00727061
    22d8:	746b656a 	strbtvc	r6, [fp], #-1386	; 0xfffffa96
    22dc:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    22e0:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
    22e4:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    22e8:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    22ec:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
    22f0:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    22f4:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    22f8:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
    22fc:	535f7878 	cmppl	pc, #120, 16	; 0x780000
    2300:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0xfffffb8c
    2304:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    2308:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    230c:	2f726576 	svccs	0x00726576
    2310:	00637273 	rsbeq	r7, r3, r3, ror r2
    2314:	635c3a63 	cmpvs	ip, #405504	; 0x63000
    2318:	70616573 	rsbvc	r6, r1, r3, ror r5
    231c:	6f635c70 	svcvs	0x00635c70
    2320:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
    2324:	745c6574 	ldrbvc	r6, [ip], #-1396	; 0xfffffa8c
    2328:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    232c:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    2330:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    2334:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    2338:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    233c:	61652d65 	cmnvs	r5, r5, ror #26
    2340:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    2344:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    2348:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
    234c:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    2350:	6300656e 	movwvs	r6, #1390	; 0x56e
    2354:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
    2358:	70706165 	rsbsvc	r6, r0, r5, ror #2
    235c:	646f635c 	strbtvs	r6, [pc], #-860	; 2364 <startup-0x1fffdc9c>
    2360:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
    2364:	6f745c65 	svcvs	0x00745c65
    2368:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    236c:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    2370:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
    2374:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    2378:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    237c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    2380:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    2384:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    2388:	79735c65 	ldmdbvc	r3!, {r0, r2, r5, r6, sl, fp, ip, lr}^
    238c:	3a430073 	bcc	10c2560 <startup-0x1ef3daa0>
    2390:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
    2394:	612f7372 			; <UNDEFINED> instruction: 0x612f7372
    2398:	726e696d 	rsbvc	r6, lr, #1785856	; 0x1b4000
    239c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    23a0:	706f746b 	rsbvc	r7, pc, fp, ror #8
    23a4:	7461642f 	strbtvc	r6, [r1], #-1071	; 0xfffffbd1
    23a8:	6f727061 	svcvs	0x00727061
    23ac:	746b656a 	strbtvc	r6, [fp], #-1386	; 0xfffffa96
    23b0:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    23b4:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
    23b8:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    23bc:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    23c0:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
    23c4:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    23c8:	534d432f 	movtpl	r4, #54063	; 0xd32f
    23cc:	492f5349 	stmdbmi	pc!, {r0, r3, r6, r8, r9, ip, lr}	; <UNPREDICTABLE>
    23d0:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    23d4:	43006564 	movwmi	r6, #1380	; 0x564
    23d8:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
    23dc:	2f737265 	svccs	0x00737265
    23e0:	6e696d61 	cdpvs	13, 6, cr6, cr9, cr1, {3}
    23e4:	65442f72 	strbvs	r2, [r4, #-3954]	; 0xfffff08e
    23e8:	6f746b73 	svcvs	0x00746b73
    23ec:	61642f70 	smcvs	17136	; 0x42f0
    23f0:	72706174 	rsbsvc	r6, r0, #116, 2
    23f4:	6b656a6f 	blvs	195cdb8 <startup-0x1e6a3248>
    23f8:	54532f74 	ldrbpl	r2, [r3], #-3956	; 0xfffff08c
    23fc:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    2400:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
    2404:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
    2408:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    240c:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
    2410:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
    2414:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    2418:	5f787834 	svcpl	0x00787834
    241c:	50647453 	rsbpl	r7, r4, r3, asr r4
    2420:	70697265 	rsbvc	r7, r9, r5, ror #4
    2424:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
    2428:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    242c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    2430:	74730000 	ldrbtvc	r0, [r3], #-0
    2434:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    2438:	5f787834 	svcpl	0x00787834
    243c:	63737973 	cmnvs	r3, #1884160	; 0x1cc000
    2440:	632e6766 			; <UNDEFINED> instruction: 0x632e6766
    2444:	00000100 	andeq	r0, r0, r0, lsl #2
    2448:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    244c:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    2450:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    2454:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    2458:	00000200 	andeq	r0, r0, r0, lsl #4
    245c:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
    2460:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    2464:	00030068 	andeq	r0, r3, r8, rrx
    2468:	726f6300 	rsbvc	r6, pc, #0, 6
    246c:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
    2470:	00682e34 	rsbeq	r2, r8, r4, lsr lr
    2474:	73000004 	movwvc	r0, #4
    2478:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
    247c:	74735f6d 	ldrbtvc	r5, [r3], #-3949	; 0xfffff093
    2480:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    2484:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
    2488:	00050068 	andeq	r0, r5, r8, rrx
    248c:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    2490:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
    2494:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
    2498:	00000500 	andeq	r0, r0, r0, lsl #10
    249c:	00010500 	andeq	r0, r1, r0, lsl #10
    24a0:	3be00205 	blcc	ff802cbc <a+0xdf7fed28>
    24a4:	e9032000 	stmdb	r3, {sp}
    24a8:	04050100 	streq	r0, [r5], #-256	; 0xffffff00
    24ac:	0105672f 	tsteq	r5, pc, lsr #14
    24b0:	3c100367 	ldccc	3, cr0, [r0], {103}	; 0x67
    24b4:	056a0905 	strbeq	r0, [sl, #-2309]!	; 0xfffff6fb
    24b8:	01052012 	tsteq	r5, r2, lsl r0
    24bc:	7410033d 	ldrvc	r0, [r0], #-829	; 0xfffffcc3
    24c0:	056a0305 	strbeq	r0, [sl, #-773]!	; 0xfffffcfb
    24c4:	22052024 	andcs	r2, r5, #36	; 0x24
    24c8:	2101052e 	tstcs	r1, lr, lsr #10
    24cc:	05661203 	strbeq	r1, [r6, #-515]!	; 0xfffffdfd
    24d0:	3605910c 	strcc	r9, [r5], -ip, lsl #2
    24d4:	4a230534 	bmi	8c39ac <startup-0x1f73c654>
    24d8:	05200705 	streq	r0, [r0, #-1797]!	; 0xfffff8fb
    24dc:	2e054b2b 	vmlacs.f64	d4, d5, d27
    24e0:	2e2b0582 	cfsh64cs	mvdx0, mvdx11, #-62
    24e4:	82300591 	eorshi	r0, r0, #608174080	; 0x24400000
    24e8:	052e6c05 	streq	r6, [lr, #-3077]!	; 0xfffff3fb
    24ec:	50054a59 	andpl	r4, r5, r9, asr sl
    24f0:	2e2b0520 	cfsh64cs	mvdx0, mvdx11, #16
    24f4:	03910105 	orrseq	r0, r1, #1073741825	; 0x40000001
    24f8:	0305740b 	movweq	r7, #21515	; 0x540b
    24fc:	202a054d 	eorcs	r0, sl, sp, asr #10
    2500:	032f0105 			; <UNDEFINED> instruction: 0x032f0105
    2504:	0305740d 	movweq	r7, #21517	; 0x540d
    2508:	2028056a 	eorcs	r0, r8, sl, ror #10
    250c:	052e2605 	streq	r2, [lr, #-1541]!	; 0xfffff9fb
    2510:	056e2101 	strbeq	r2, [lr, #-257]!	; 0xfffffeff
    2514:	053e3d0e 	ldreq	r3, [lr, #-3342]!	; 0xfffff2f2
    2518:	06052e16 			; <UNDEFINED> instruction: 0x06052e16
    251c:	220f053c 	andcs	r0, pc, #60, 10	; 0xf000000
    2520:	3e0a054e 	cfsh32cc	mvfx0, mvfx10, #46
    2524:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
    2528:	01010007 	tsteq	r1, r7

Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	52424149 	subpl	r4, r2, #1073741842	; 0x40000012
       4:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
       8:	6e495f43 	cdpvs	15, 4, cr5, cr9, cr3, {2}
       c:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
      10:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
      14:	564e0066 	strbpl	r0, [lr], -r6, rrx
      18:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
      1c:	68435152 	stmdavs	r3, {r1, r4, r6, r8, ip, lr}^
      20:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xfffff19f
      24:	646d436c 	strbtvs	r4, [sp], #-876	; 0xfffffc94
      28:	73795300 	cmnvc	r9, #0, 6
      2c:	6b636954 	blvs	18da584 <startup-0x1e725a7c>
      30:	4b4c435f 	blmi	1310db4 <startup-0x1ecef24c>
      34:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
      38:	4e006563 	cfsh32mi	mvfx6, mvfx0, #51
      3c:	5f434956 	svcpl	0x00434956
      40:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
      44:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0xfffffbad
      48:	4e007463 	cdpmi	4, 0, cr7, cr0, cr3, {3}
      4c:	5f434956 	svcpl	0x00434956
      50:	6f697250 	svcvs	0x00697250
      54:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
      58:	756f7247 	strbvc	r7, [pc, #-583]!	; fffffe19 <a+0xdfffbe85>
      5c:	4d4d0070 	stclmi	0, cr0, [sp, #-448]	; 0xfffffe40
      60:	00524146 	subseq	r4, r2, r6, asr #2
      64:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
      68:	6e692074 	mcrvs	0, 3, r2, cr9, cr4, {3}
      6c:	564e0074 			; <UNDEFINED> instruction: 0x564e0074
      70:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
      74:	0074696e 	rsbseq	r6, r4, lr, ror #18
      78:	70706d74 	rsbsvc	r6, r0, r4, ror sp
      7c:	5f006572 	svcpl	0x00006572
      80:	6e69755f 	mcrvs	5, 3, r7, cr9, cr15, {2}
      84:	5f323374 	svcpl	0x00323374
      88:	50430074 	subpl	r0, r3, r4, ror r0
      8c:	00444955 	subeq	r4, r4, r5, asr r9
      90:	52455349 	subpl	r5, r5, #603979777	; 0x24000001
      94:	42435300 	submi	r5, r3, #0, 6
      98:	7079545f 	rsbsvc	r5, r9, pc, asr r4
      9c:	654e0065 	strbvs	r0, [lr, #-101]	; 0xffffff9b
      a0:	61745377 	cmnvs	r4, r7, ror r3
      a4:	53006574 	movwpl	r6, #1396	; 0x574
      a8:	00524954 	subseq	r4, r2, r4, asr r9
      ac:	41534944 	cmpmi	r3, r4, asr #18
      b0:	00454c42 	subeq	r4, r5, r2, asr #24
      b4:	52534349 	subspl	r4, r3, #603979777	; 0x24000001
      b8:	45535200 	ldrbmi	r5, [r3, #-512]	; 0xfffffe00
      bc:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
      c0:	6f6c0031 	svcvs	0x006c0031
      c4:	6c20676e 	stcvs	7, cr6, [r0], #-440	; 0xfffffe48
      c8:	20676e6f 	rsbcs	r6, r7, pc, ror #28
      cc:	00746e69 	rsbseq	r6, r4, r9, ror #28
      d0:	7366664f 	cmnvc	r6, #82837504	; 0x4f00000
      d4:	42007465 	andmi	r7, r0, #1694498816	; 0x65000000
      d8:	00524146 	subseq	r4, r2, r6, asr #2
      dc:	69755f5f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
      e0:	5f38746e 	svcpl	0x0038746e
      e4:	46430074 			; <UNDEFINED> instruction: 0x46430074
      e8:	41005253 	tstmi	r0, r3, asr r2
      ec:	52435249 	subpl	r5, r3, #-1879048188	; 0x90000004
      f0:	736e7500 	cmnvc	lr, #0, 10
      f4:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
      f8:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
      fc:	47007261 	strmi	r7, [r0, -r1, ror #4]
     100:	4320554e 			; <UNDEFINED> instruction: 0x4320554e
     104:	39203939 	stmdbcc	r0!, {r0, r3, r4, r5, r8, fp, ip, sp}
     108:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
     10c:	31303220 	teqcc	r0, r0, lsr #4
     110:	32303139 	eorscc	r3, r0, #1073741838	; 0x4000000e
     114:	72282035 	eorvc	r2, r8, #53	; 0x35
     118:	61656c65 	cmnvs	r5, r5, ror #24
     11c:	20296573 	eorcs	r6, r9, r3, ror r5
     120:	4d52415b 	ldfmie	f4, [r2, #-364]	; 0xfffffe94
     124:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
     128:	622d392d 	eorvs	r3, sp, #737280	; 0xb4000
     12c:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
     130:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
     134:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
     138:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
     13c:	39353737 	ldmdbcc	r5!, {r0, r1, r2, r4, r5, r8, r9, sl, ip, sp}
     140:	2d205d39 	stccs	13, cr5, [r0, #-228]!	; 0xffffff1c
     144:	7568746d 	strbvc	r7, [r8, #-1133]!	; 0xfffffb93
     148:	2d20626d 	sfmcs	f6, 4, [r0, #-436]!	; 0xfffffe4c
     14c:	6f6c666d 	svcvs	0x006c666d
     150:	612d7461 			; <UNDEFINED> instruction: 0x612d7461
     154:	733d6962 	teqvc	sp, #1605632	; 0x188000
     158:	2074666f 	rsbscs	r6, r4, pc, ror #12
     15c:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
     160:	613d6863 	teqvs	sp, r3, ror #16
     164:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
     168:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
     16c:	4f2d2067 	svcmi	0x002d2067
     170:	732d2030 			; <UNDEFINED> instruction: 0x732d2030
     174:	633d6474 	teqvs	sp, #116, 8	; 0x74000000
     178:	43003939 	movwmi	r3, #2361	; 0x939
     17c:	004c5254 	subeq	r5, ip, r4, asr r2
     180:	4349564e 	movtmi	r5, #38478	; 0x964e
     184:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
     188:	74636556 	strbtvc	r6, [r3], #-1366	; 0xfffffaaa
     18c:	6154726f 	cmpvs	r4, pc, ror #4
     190:	00656c62 	rsbeq	r6, r5, r2, ror #24
     194:	52504349 	subspl	r4, r0, #603979777	; 0x24000001
     198:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
     19c:	6f6c2067 	svcvs	0x006c2067
     1a0:	7520676e 	strvc	r6, [r0, #-1902]!	; 0xfffff892
     1a4:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
     1a8:	2064656e 	rsbcs	r6, r4, lr, ror #10
     1ac:	00746e69 	rsbseq	r6, r4, r9, ror #28
     1b0:	494c4143 	stmdbmi	ip, {r0, r1, r6, r8, lr}^
     1b4:	48530042 	ldmdami	r3, {r1, r6}^
     1b8:	00525343 	subseq	r5, r2, r3, asr #6
     1bc:	52454349 	subpl	r4, r5, #603979777	; 0x24000001
     1c0:	706d7400 	rsbvc	r7, sp, r0, lsl #8
     1c4:	00627573 	rsbeq	r7, r2, r3, ror r5
     1c8:	4349564e 	movtmi	r5, #38478	; 0x964e
     1cc:	7379535f 	cmnvc	r9, #2080374785	; 0x7c000001
     1d0:	4c6d6574 	cfstr64mi	mvdx6, [sp], #-464	; 0xfffffe30
     1d4:	6e6f4350 	mcrvs	3, 3, r4, cr15, cr0, {2}
     1d8:	00676966 	rsbeq	r6, r7, r6, ror #18
     1dc:	54737953 	ldrbtpl	r7, [r3], #-2387	; 0xfffff6ad
     1e0:	5f6b6369 	svcpl	0x006b6369
     1e4:	534b4c43 	movtpl	r4, #48195	; 0xbc43
     1e8:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     1ec:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
     1f0:	00676966 	rsbeq	r6, r7, r6, ror #18
     1f4:	54737953 	ldrbtpl	r7, [r3], #-2387	; 0xfffff6ad
     1f8:	5f6b6369 	svcpl	0x006b6369
     1fc:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     200:	6f687300 	svcvs	0x00687300
     204:	75207472 	strvc	r7, [r0, #-1138]!	; 0xfffffb8e
     208:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
     20c:	2064656e 	rsbcs	r6, r4, lr, ror #10
     210:	00746e69 	rsbseq	r6, r4, r9, ror #28
     214:	70706d74 	rsbsvc	r6, r0, r4, ror sp
     218:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
     21c:	00797469 	rsbseq	r7, r9, r9, ror #8
     220:	524f5456 	subpl	r5, pc, #1442840576	; 0x56000000
     224:	41534900 	cmpmi	r3, r0, lsl #18
     228:	53490052 	movtpl	r0, #36946	; 0x9052
     22c:	44005250 	strmi	r5, [r0], #-592	; 0xfffffdb0
     230:	00525346 	subseq	r5, r2, r6, asr #6
     234:	4349564e 	movtmi	r5, #38478	; 0x964e
     238:	5152495f 	cmppl	r2, pc, asr r9
     23c:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
     240:	006c656e 	rsbeq	r6, ip, lr, ror #10
     244:	4349564e 	movtmi	r5, #38478	; 0x964e
     248:	5152495f 	cmppl	r2, pc, asr r9
     24c:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
     250:	536c656e 	cmnpl	ip, #461373440	; 0x1b800000
     254:	72506275 	subsvc	r6, r0, #1342177287	; 0x50000007
     258:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     25c:	53007974 	movwpl	r7, #2420	; 0x974
     260:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
     264:	726f436d 	rsbvc	r4, pc, #-1275068415	; 0xb4000001
     268:	6f6c4365 	svcvs	0x006c4365
     26c:	48006b63 	stmdami	r0, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
     270:	00525346 	subseq	r5, r2, r6, asr #6
     274:	52464d4d 	subpl	r4, r6, #4928	; 0x1340
     278:	53455200 	movtpl	r5, #20992	; 0x5200
     27c:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
     280:	52003044 	andpl	r3, r0, #68	; 0x44
     284:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     288:	32444556 	subcc	r4, r4, #360710144	; 0x15800000
     28c:	53455200 	movtpl	r5, #20992	; 0x5200
     290:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
     294:	52003344 	andpl	r3, r0, #68, 6	; 0x10000001
     298:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     29c:	34444556 	strbcc	r4, [r4], #-1366	; 0xfffffaaa
     2a0:	53455200 	movtpl	r5, #20992	; 0x5200
     2a4:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
     2a8:	4e003544 	cfsh32mi	mvfx3, mvfx0, #36
     2ac:	5f434956 	svcpl	0x00434956
     2b0:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     2b4:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     2b8:	52495f43 	subpl	r5, r9, #268	; 0x10c
     2bc:	61684351 	cmnvs	r8, r1, asr r3
     2c0:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
     2c4:	65657250 	strbvs	r7, [r5, #-592]!	; 0xfffffdb0
     2c8:	6974706d 	ldmdbvs	r4!, {r0, r2, r3, r5, r6, ip, sp, lr}^
     2cc:	72506e6f 	subsvc	r6, r0, #1776	; 0x6f0
     2d0:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     2d4:	46007974 			; <UNDEFINED> instruction: 0x46007974
     2d8:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xfffff18b
     2dc:	616e6f69 	cmnvs	lr, r9, ror #30
     2e0:	6174536c 	cmnvs	r4, ip, ror #6
     2e4:	5f006574 	svcpl	0x00006574
     2e8:	746e695f 	strbtvc	r6, [lr], #-2399	; 0xfffff6a1
     2ec:	745f3233 	ldrbvc	r3, [pc], #-563	; 2f4 <startup-0x1ffffd0c>
     2f0:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     2f4:	65565f43 	ldrbvs	r5, [r6, #-3907]	; 0xfffff0bd
     2f8:	61547463 	cmpvs	r4, r3, ror #8
     2fc:	4f4c0062 	svcmi	0x004c0062
     300:	41004441 	tstmi	r0, r1, asr #8
     304:	00525346 	subseq	r5, r2, r6, asr #6
     308:	50776f4c 	rsbspl	r6, r7, ip, asr #30
     30c:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
     310:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
     314:	4d544900 	vldrmi.16	s9, [r4, #-0]	; <UNPREDICTABLE>
     318:	4278525f 	rsbsmi	r5, r8, #-268435451	; 0xf0000005
     31c:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
     320:	3a430072 	bcc	10c04f0 <startup-0x1ef3fb10>
     324:	6573555c 	ldrbvs	r5, [r3, #-1372]!	; 0xfffffaa4
     328:	615c7372 	cmpvs	ip, r2, ror r3
     32c:	726e696d 	rsbvc	r6, lr, #1785856	; 0x1b4000
     330:	7365445c 	cmnvc	r5, #92, 8	; 0x5c000000
     334:	706f746b 	rsbvc	r7, pc, fp, ror #8
     338:	7461645c 	strbtvc	r6, [r1], #-1116	; 0xfffffba4
     33c:	6f727061 	svcvs	0x00727061
     340:	746b656a 	strbtvc	r6, [fp], #-1386	; 0xfffffa96
     344:	7265705c 	rsbvc	r7, r5, #92	; 0x5c
     348:	70687069 	rsbvc	r7, r8, r9, rrx
     34c:	70697265 	rsbvc	r7, r9, r5, ror #4
     350:	61726568 	cmnvs	r2, r8, ror #10
     354:	6e755f6c 	cdpvs	15, 7, cr5, cr5, cr12, {3}
     358:	00327469 	eorseq	r7, r2, r9, ror #8
     35c:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff921 <a+0xdfffb98d>
     360:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
     364:	696d612f 	stmdbvs	sp!, {r0, r1, r2, r3, r5, r8, sp, lr}^
     368:	442f726e 	strtmi	r7, [pc], #-622	; 370 <startup-0x1ffffc90>
     36c:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
     370:	642f706f 	strtvs	r7, [pc], #-111	; 378 <startup-0x1ffffc88>
     374:	70617461 	rsbvc	r7, r1, r1, ror #8
     378:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xfffff08e
     37c:	532f746b 			; <UNDEFINED> instruction: 0x532f746b
     380:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     384:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
     388:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
     38c:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     390:	6c5f3446 	cfldrdvs	mvd3, [pc], {70}	; 0x46
     394:	532f6269 			; <UNDEFINED> instruction: 0x532f6269
     398:	32334d54 	eorscc	r4, r3, #84, 26	; 0x1500
     39c:	78783446 	ldmdavc	r8!, {r1, r2, r6, sl, ip, sp}^
     3a0:	6474535f 	ldrbtvs	r5, [r4], #-863	; 0xfffffca1
     3a4:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     3a8:	445f6870 	ldrbmi	r6, [pc], #-2160	; 3b0 <startup-0x1ffffc50>
     3ac:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
     3b0:	72732f72 	rsbsvc	r2, r3, #456	; 0x1c8
     3b4:	696d2f63 	stmdbvs	sp!, {r0, r1, r5, r6, r8, r9, sl, fp, sp}^
     3b8:	632e6373 			; <UNDEFINED> instruction: 0x632e6373
     3bc:	41504300 	cmpmi	r0, r0, lsl #6
     3c0:	45005243 	strmi	r5, [r0, #-579]	; 0xfffffdbd
     3c4:	4c42414e 	stfmie	f4, [r2], {78}	; 0x4e
     3c8:	564e0045 	strbpl	r0, [lr], -r5, asr #32
     3cc:	505f4349 	subspl	r4, pc, r9, asr #6
     3d0:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
     3d4:	47797469 	ldrbmi	r7, [r9, -r9, ror #8]!
     3d8:	70756f72 	rsbsvc	r6, r5, r2, ror pc
     3dc:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     3e0:	45006769 	strmi	r6, [r0, #-1897]	; 0xfffff897
     3e4:	5f495458 	svcpl	0x00495458
     3e8:	656e694c 	strbvs	r6, [lr, #-2380]!	; 0xfffff6b4
     3ec:	54584500 	ldrbpl	r4, [r8], #-1280	; 0xfffffb00
     3f0:	6f4d5f49 	svcvs	0x004d5f49
     3f4:	43006564 	movwmi	r6, #1380	; 0x564
     3f8:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
     3fc:	2f737265 	svccs	0x00737265
     400:	6e696d61 	cdpvs	13, 6, cr6, cr9, cr1, {3}
     404:	65442f72 	strbvs	r2, [r4, #-3954]	; 0xfffff08e
     408:	6f746b73 	svcvs	0x00746b73
     40c:	61642f70 	smcvs	17136	; 0x42f0
     410:	72706174 	rsbsvc	r6, r0, #116, 2
     414:	6b656a6f 	blvs	195add8 <startup-0x1e6a5228>
     418:	54532f74 	ldrbpl	r2, [r3], #-3956	; 0xfffff08c
     41c:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     420:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
     424:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
     428:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     42c:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
     430:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
     434:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
     438:	5f787834 	svcpl	0x00787834
     43c:	50647453 	rsbpl	r7, r4, r3, asr r4
     440:	70697265 	rsbvc	r7, r9, r5, ror #4
     444:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
     448:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
     44c:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
     450:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!	; 0xffffff44
     454:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
     458:	655f7878 	ldrbvs	r7, [pc, #-2168]	; fffffbe8 <a+0xdfffbc54>
     45c:	2e697478 	mcrcs	4, 3, r7, cr9, cr8, {3}
     460:	58450063 	stmdapl	r5, {r0, r1, r5, r6}^
     464:	4c5f4954 	mrrcmi	9, 5, r4, pc, cr4	; <UNPREDICTABLE>
     468:	43656e69 	cmnmi	r5, #1680	; 0x690
     46c:	4500646d 	strmi	r6, [r0, #-1133]	; 0xfffffb93
     470:	5f495458 	svcpl	0x00495458
     474:	67697254 			; <UNDEFINED> instruction: 0x67697254
     478:	00726567 	rsbseq	r6, r2, r7, ror #10
     47c:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
     480:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 488 <startup-0x1ffffb78>
     484:	76455f65 	strbvc	r5, [r5], -r5, ror #30
     488:	00746e65 	rsbseq	r6, r4, r5, ror #28
     48c:	73746962 	cmnvc	r4, #1605632	; 0x188000
     490:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
     494:	58450073 	stmdapl	r5, {r0, r1, r4, r5, r6}^
     498:	475f4954 			; <UNDEFINED> instruction: 0x475f4954
     49c:	72656e65 	rsbvc	r6, r5, #1616	; 0x650
     4a0:	53657461 	cmnpl	r5, #1627389952	; 0x61000000
     4a4:	746e4957 	strbtvc	r4, [lr], #-2391	; 0xfffff6a9
     4a8:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0xfffffd9b
     4ac:	45007470 	strmi	r7, [r0, #-1136]	; 0xfffffb90
     4b0:	5f495458 	svcpl	0x00495458
     4b4:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
     4b8:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     4bc:	00666544 	rsbeq	r6, r6, r4, asr #10
     4c0:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
     4c4:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
     4c8:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
     4cc:	00746375 	rsbseq	r6, r4, r5, ror r3
     4d0:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
     4d4:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 4dc <startup-0x1ffffb24>
     4d8:	6e495f65 	cdpvs	15, 4, cr5, cr9, cr5, {3}
     4dc:	72726574 	rsbsvc	r6, r2, #116, 10	; 0x1d000000
     4e0:	00747075 	rsbseq	r7, r4, r5, ror r0
     4e4:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
     4e8:	656c435f 	strbvs	r4, [ip, #-863]!	; 0xfffffca1
     4ec:	6c467261 	sfmvs	f7, 2, [r6], {97}	; 0x61
     4f0:	45006761 	strmi	r6, [r0, #-1889]	; 0xfffff89f
     4f4:	4d495458 	cfstrdmi	mvd5, [r9, #-352]	; 0xfffffea0
     4f8:	5f65646f 	svcpl	0x0065646f
     4fc:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     500:	00666544 	rsbeq	r6, r6, r4, asr #10
     504:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
     508:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     50c:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     510:	53545200 	cmppl	r4, #0, 4
     514:	58450052 	stmdapl	r5, {r1, r4, r6}^
     518:	545f4954 	ldrbpl	r4, [pc], #-2388	; 520 <startup-0x1ffffae0>
     51c:	67676972 			; <UNDEFINED> instruction: 0x67676972
     520:	525f7265 	subspl	r7, pc, #1342177286	; 0x50000006
     524:	6e697369 	cdpvs	3, 6, cr7, cr9, cr9, {3}
     528:	58450067 	stmdapl	r5, {r0, r1, r2, r5, r6}^
     52c:	545f4954 	ldrbpl	r4, [pc], #-2388	; 534 <startup-0x1ffffacc>
     530:	67676972 			; <UNDEFINED> instruction: 0x67676972
     534:	525f7265 	subspl	r7, pc, #1342177286	; 0x50000006
     538:	6e697369 	cdpvs	3, 6, cr7, cr9, cr9, {3}
     53c:	61465f67 	cmpvs	r6, r7, ror #30
     540:	6e696c6c 	cdpvs	12, 6, cr6, cr9, cr12, {3}
     544:	58450067 	stmdapl	r5, {r0, r1, r2, r5, r6}^
     548:	495f4954 	ldmdbmi	pc, {r2, r4, r6, r8, fp, lr}^	; <UNPREDICTABLE>
     54c:	0074696e 	rsbseq	r6, r4, lr, ror #18
     550:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
     554:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
     558:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
     55c:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
     560:	45007375 	strmi	r7, [r0, #-885]	; 0xfffffc8b
     564:	5f495458 	svcpl	0x00495458
     568:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0xfffffbad
     56c:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
     570:	45007469 	strmi	r7, [r0, #-1129]	; 0xfffffb97
     574:	5f495458 	svcpl	0x00495458
     578:	49746547 	ldmdbmi	r4!, {r0, r1, r2, r6, r8, sl, sp, lr}^
     57c:	61745354 	cmnvs	r4, r4, asr r3
     580:	00737574 	rsbseq	r7, r3, r4, ror r5
     584:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
     588:	656c435f 	strbvs	r4, [ip, #-863]!	; 0xfffffca1
     58c:	54497261 	strbpl	r7, [r9], #-609	; 0xfffffd9f
     590:	646e6550 	strbtvs	r6, [lr], #-1360	; 0xfffffab0
     594:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
     598:	45007469 	strmi	r7, [r0, #-1129]	; 0xfffffb97
     59c:	5f495458 	svcpl	0x00495458
     5a0:	67697254 			; <UNDEFINED> instruction: 0x67697254
     5a4:	5f726567 	svcpl	0x00726567
     5a8:	6c6c6146 	stfvse	f6, [ip], #-280	; 0xfffffee8
     5ac:	00676e69 	rsbeq	r6, r7, r9, ror #28
     5b0:	52535446 	subspl	r5, r3, #1174405120	; 0x46000000
     5b4:	54584500 	ldrbpl	r4, [r8], #-1280	; 0xfffffb00
     5b8:	69725449 	ldmdbvs	r2!, {r0, r3, r6, sl, ip, lr}^
     5bc:	72656767 	rsbvc	r6, r5, #27000832	; 0x19c0000
     5c0:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     5c4:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     5c8:	49575300 	ldmdbmi	r7, {r8, r9, ip, lr}^
     5cc:	45005245 	strmi	r5, [r0, #-581]	; 0xfffffdbb
     5d0:	5f495458 	svcpl	0x00495458
     5d4:	6e496544 	cdpvs	5, 4, cr6, cr9, cr4, {2}
     5d8:	6f007469 	svcvs	0x00007469
     5dc:	635f7475 	cmpvs	pc, #1962934272	; 0x75000000
     5e0:	00726168 	rsbseq	r6, r2, r8, ror #2
     5e4:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
     5e8:	6e550074 	mrcvs	0, 2, r0, cr5, cr4, {3}
     5ec:	64657375 	strbtvs	r7, [r5], #-885	; 0xfffffc8b
     5f0:	675f0035 	smmlarvs	pc, r5, r0, r0	; <UNPREDICTABLE>
     5f4:	68637465 	stmdavs	r3!, {r0, r2, r5, r6, sl, ip, sp, lr}^
     5f8:	74007261 	strvc	r7, [r0], #-609	; 0xfffffd9f
     5fc:	5f747365 	svcpl	0x00747365
     600:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
     604:	70746700 	rsbsvc	r6, r4, r0, lsl #14
     608:	6e550072 	mrcvs	0, 2, r0, cr5, cr2, {3}
     60c:	64657375 	strbtvs	r7, [r5], #-885	; 0xfffffc8b
     610:	6e550030 	mrcvs	0, 2, r0, cr5, cr0, {1}
     614:	64657375 	strbtvs	r7, [r5], #-885	; 0xfffffc8b
     618:	6e550031 	mrcvs	0, 2, r0, cr5, cr1, {1}
     61c:	64657375 	strbtvs	r7, [r5], #-885	; 0xfffffc8b
     620:	6e550032 	mrcvs	0, 2, r0, cr5, cr2, {1}
     624:	64657375 	strbtvs	r7, [r5], #-885	; 0xfffffc8b
     628:	6e550033 	mrcvs	0, 2, r0, cr5, cr3, {1}
     62c:	64657375 	strbtvs	r7, [r5], #-885	; 0xfffffc8b
     630:	3a430034 	bcc	10c0708 <startup-0x1ef3f8f8>
     634:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
     638:	612f7372 			; <UNDEFINED> instruction: 0x612f7372
     63c:	726e696d 	rsbvc	r6, lr, #1785856	; 0x1b4000
     640:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
     644:	706f746b 	rsbvc	r7, pc, fp, ror #8
     648:	7461642f 	strbtvc	r6, [r1], #-1071	; 0xfffffbd1
     64c:	6f727061 	svcvs	0x00727061
     650:	746b656a 	strbtvc	r6, [fp], #-1386	; 0xfffffa96
     654:	6168632f 	cmnvs	r8, pc, lsr #6
     658:	70615f74 	rsbvc	r5, r1, r4, ror pc
     65c:	73752f70 	cmnvc	r5, #112, 30	; 0x1c0
     660:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
     664:	53550063 	cmppl	r5, #99	; 0x63
     668:	00545241 	subseq	r5, r4, r1, asr #4
     66c:	44505550 	ldrbmi	r5, [r0], #-1360	; 0xfffffab0
     670:	41430052 	qdaddmi	r0, r2, r3
     674:	525f314e 	subspl	r3, pc, #-2147483629	; 0x80000013
     678:	495f3058 	ldmdbmi	pc, {r3, r4, r6, ip, sp}^	; <UNPREDICTABLE>
     67c:	006e5152 	rsbeq	r5, lr, r2, asr r1
     680:	5f445650 	svcpl	0x00445650
     684:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     688:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     68c:	58525f32 	ldmdapl	r2, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
     690:	52495f30 	subpl	r5, r9, #48, 30	; 0xc0
     694:	54006e51 	strpl	r6, [r0], #-3665	; 0xfffff1af
     698:	745f4d49 	ldrbvc	r4, [pc], #-3401	; 6a0 <startup-0x1ffff960>
     69c:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
     6a0:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     6a4:	58525f31 	ldmdapl	r2, {r0, r4, r5, r8, r9, sl, fp, ip, lr}^
     6a8:	52495f31 	subpl	r5, r9, #49, 30	; 0xc4
     6ac:	44006e51 	strmi	r6, [r0], #-3665	; 0xfffff1af
     6b0:	5f32414d 	svcpl	0x0032414d
     6b4:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
     6b8:	5f366d61 	svcpl	0x00366d61
     6bc:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     6c0:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     6c4:	756f435f 	strbvc	r4, [pc, #-863]!	; 36d <startup-0x1ffffc93>
     6c8:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     6cc:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
     6d0:	43324900 	teqmi	r2, #0, 18
     6d4:	52455f33 	subpl	r5, r5, #51, 30	; 0xcc
     6d8:	5152495f 	cmppl	r2, pc, asr r9
     6dc:	3249006e 	subcc	r0, r9, #110	; 0x6e
     6e0:	455f3143 	ldrbmi	r3, [pc, #-323]	; 5a5 <startup-0x1ffffa5b>
     6e4:	52495f56 	subpl	r5, r9, #344	; 0x158
     6e8:	4f006e51 	svcmi	0x00006e51
     6ec:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0xfffff6ac
     6f0:	4d440052 	stclmi	0, cr0, [r4, #-328]	; 0xfffffeb8
     6f4:	535f3241 	cmppl	pc, #268435460	; 0x10000004
     6f8:	61657274 	smcvs	22308	; 0x5724
     6fc:	495f356d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r8, sl, ip, sp}^	; <UNPREDICTABLE>
     700:	006e5152 	rsbeq	r5, lr, r2, asr r1
     704:	5f4d4954 	svcpl	0x004d4954
     708:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     70c:	00666544 	rsbeq	r6, r6, r4, asr #10
     710:	4f495047 	svcmi	0x00495047
     714:	79544f5f 	ldmdbvc	r4, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, lr}^
     718:	505f6570 	subspl	r6, pc, r0, ror r5	; <UNPREDICTABLE>
     71c:	43430050 	movtmi	r0, #12368	; 0x3050
     720:	47003252 	smlsdmi	r0, r2, r2, r3
     724:	5f4f4950 	svcpl	0x004f4950
     728:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
     72c:	0046415f 	subeq	r4, r6, pc, asr r1
     730:	72746c55 	rsbsvc	r6, r4, #21760	; 0x5500
     734:	6e6f5361 	cdpvs	3, 6, cr5, cr15, cr1, {3}
     738:	65536369 	ldrbvs	r6, [r3, #-873]	; 0xfffffc97
     73c:	726f736e 	rsbvc	r7, pc, #-1207959551	; 0xb8000001
     740:	43545200 	cmpmi	r4, #0, 4
     744:	616c415f 	cmnvs	ip, pc, asr r1
     748:	495f6d72 	ldmdbmi	pc, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^	; <UNPREDICTABLE>
     74c:	006e5152 	rsbeq	r5, lr, r2, asr r1
     750:	4f495047 	svcmi	0x00495047
     754:	6570535f 	ldrbvs	r5, [r0, #-863]!	; 0xfffffca1
     758:	49006465 	stmdbmi	r0, {r0, r2, r5, r6, sl, sp, lr}
     75c:	5f324332 	svcpl	0x00324332
     760:	495f5245 	ldmdbmi	pc, {r0, r2, r6, r9, ip, lr}^	; <UNPREDICTABLE>
     764:	006e5152 	rsbeq	r5, lr, r2, asr r1
     768:	4f495047 	svcmi	0x00495047
     76c:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 774 <startup-0x1ffff88c>
     770:	4e415f65 	cdpmi	15, 4, cr5, cr1, cr5, {3}
     774:	74786500 	ldrbtvc	r6, [r8], #-1280	; 0xfffffb00
     778:	6e695f69 	cdpvs	15, 6, cr5, cr9, cr9, {3}
     77c:	52007469 	andpl	r7, r0, #1761607680	; 0x69000000
     780:	575f4354 			; <UNDEFINED> instruction: 0x575f4354
     784:	5f50554b 	svcpl	0x0050554b
     788:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     78c:	696e4900 	stmdbvs	lr!, {r8, fp, lr}^
     790:	50475f74 	subpl	r5, r7, r4, ror pc
     794:	57004f49 	strpl	r4, [r0, -r9, asr #30]
     798:	5f474457 	svcpl	0x00474457
     79c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     7a0:	49445300 	stmdbmi	r4, {r8, r9, ip, lr}^
     7a4:	52495f4f 	subpl	r5, r9, #316	; 0x13c
     7a8:	47006e51 	smlsdmi	r0, r1, lr, r6
     7ac:	4f4f4950 	svcmi	0x004f4950
     7b0:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     7b4:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     7b8:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     7bc:	6f746900 	svcvs	0x00746900
     7c0:	43430061 	movtmi	r0, #12385	; 0x3061
     7c4:	0031524d 	eorseq	r5, r1, sp, asr #4
     7c8:	524d4343 	subpl	r4, sp, #201326593	; 0xc000001
     7cc:	41430032 	cmpmi	r3, r2, lsr r0
     7d0:	525f324e 	subspl	r3, pc, #-536870908	; 0xe0000004
     7d4:	495f3158 	ldmdbmi	pc, {r3, r4, r6, r8, ip, sp}^	; <UNPREDICTABLE>
     7d8:	006e5152 	rsbeq	r5, lr, r2, asr r1
     7dc:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
     7e0:	52495f30 	subpl	r5, r9, #48, 30	; 0xc0
     7e4:	47006e51 	smlsdmi	r0, r1, lr, r6
     7e8:	5f4f4950 	svcpl	0x004f4950
     7ec:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
     7f0:	004e495f 	subeq	r4, lr, pc, asr r9
     7f4:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
     7f8:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
     7fc:	52003031 	andpl	r3, r0, #49	; 0x31
     800:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     804:	31444556 	cmpcc	r4, r6, asr r5
     808:	45520031 	ldrbmi	r0, [r2, #-49]	; 0xffffffcf
     80c:	56524553 			; <UNDEFINED> instruction: 0x56524553
     810:	32314445 	eorscc	r4, r1, #1157627904	; 0x45000000
     814:	53455200 	movtpl	r5, #20992	; 0x5200
     818:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
     81c:	00333144 	eorseq	r3, r3, r4, asr #2
     820:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
     824:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
     828:	44003431 	strmi	r3, [r0], #-1073	; 0xfffffbcf
     82c:	5f31414d 	svcpl	0x0031414d
     830:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
     834:	5f306d61 	svcpl	0x00306d61
     838:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     83c:	43324900 	teqmi	r2, #0, 18
     840:	56455f32 			; <UNDEFINED> instruction: 0x56455f32
     844:	5152495f 	cmppl	r2, pc, asr r9
     848:	7473006e 	ldrbtvc	r0, [r3], #-110	; 0xffffff92
     84c:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
     850:	4d440070 	stclmi	0, cr0, [r4, #-448]	; 0xfffffe40
     854:	535f3141 	cmppl	pc, #1073741840	; 0x40000010
     858:	61657274 	smcvs	22308	; 0x5724
     85c:	495f356d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r8, sl, ip, sp}^	; <UNPREDICTABLE>
     860:	006e5152 	rsbeq	r5, lr, r2, asr r1
     864:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
     868:	5f355f39 	svcpl	0x00355f39
     86c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     870:	45434300 	strbmi	r4, [r3, #-768]	; 0xfffffd00
     874:	54450052 	strbpl	r0, [r5], #-82	; 0xffffffae
     878:	4b575f48 	blmi	15d85a0 <startup-0x1ea27a60>
     87c:	495f5055 	ldmdbmi	pc, {r0, r2, r4, r6, ip, lr}^	; <UNPREDICTABLE>
     880:	006e5152 	rsbeq	r5, lr, r2, asr r1
     884:	65726854 	ldrbvs	r6, [r2, #-2132]!	; 0xfffff7ac
     888:	6c6f6873 	stclvs	8, cr6, [pc], #-460	; 6c4 <startup-0x1ffff93c>
     88c:	69440064 	stmdbvs	r4, {r2, r5, r6}^
     890:	6e617473 	mcrvs	4, 3, r7, cr1, cr3, {3}
     894:	54006563 	strpl	r6, [r0], #-1379	; 0xfffffa9d
     898:	5f364d49 	svcpl	0x00364d49
     89c:	5f434144 	svcpl	0x00434144
     8a0:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     8a4:	52415500 	subpl	r5, r1, #0, 10
     8a8:	495f3454 	ldmdbmi	pc, {r2, r4, r6, sl, ip, sp}^	; <UNPREDICTABLE>
     8ac:	006e5152 	rsbeq	r5, lr, r2, asr r1
     8b0:	5f47544f 	svcpl	0x0047544f
     8b4:	575f5346 	ldrbpl	r5, [pc, -r6, asr #6]
     8b8:	5f50554b 	svcpl	0x0050554b
     8bc:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     8c0:	6e655000 	cdpvs	0, 6, cr5, cr5, cr0, {0}
     8c4:	5f565364 	svcpl	0x00565364
     8c8:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     8cc:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     8d0:	50555f38 	subspl	r5, r5, r8, lsr pc
     8d4:	4d49545f 	cfstrdmi	mvd5, [r9, #-380]	; 0xfffffe84
     8d8:	495f3331 	ldmdbmi	pc, {r0, r4, r5, r8, r9, ip, sp}^	; <UNPREDICTABLE>
     8dc:	006e5152 	rsbeq	r5, lr, r2, asr r1
     8e0:	69755f5f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     8e4:	3631746e 	ldrtcc	r7, [r1], -lr, ror #8
     8e8:	4f00745f 	svcmi	0x0000745f
     8ec:	45455053 	strbmi	r5, [r5, #-83]	; 0xffffffad
     8f0:	42005244 	andmi	r5, r0, #68, 4	; 0x40000004
     8f4:	61467375 	hvcvs	26421	; 0x6735
     8f8:	5f746c75 	svcpl	0x00746c75
     8fc:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     900:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     904:	654d5f4f 	strbvs	r5, [sp, #-3919]	; 0xfffff0b1
     908:	6d756964 			; <UNDEFINED> instruction: 0x6d756964
     90c:	6570535f 	ldrbvs	r5, [r0, #-863]!	; 0xfffffca1
     910:	56006465 	strpl	r6, [r0], -r5, ror #8
     914:	61726269 	cmnvs	r2, r9, ror #4
     918:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     91c:	736e6553 	cmnvc	lr, #348127232	; 0x14c00000
     920:	4f00726f 	svcmi	0x0000726f
     924:	485f4754 	ldmdami	pc, {r2, r4, r6, r8, r9, sl, lr}^	; <UNPREDICTABLE>
     928:	50455f53 	subpl	r5, r5, r3, asr pc
     92c:	4e495f31 	mcrmi	15, 2, r5, cr9, cr1, {1}
     930:	5152495f 	cmppl	r2, pc, asr r9
     934:	4d44006e 	stclmi	0, cr0, [r4, #-440]	; 0xfffffe48
     938:	535f3241 	cmppl	pc, #268435460	; 0x10000004
     93c:	61657274 	smcvs	22308	; 0x5724
     940:	495f376d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r8, r9, sl, ip, sp}^	; <UNPREDICTABLE>
     944:	006e5152 	rsbeq	r5, lr, r2, asr r1
     948:	4f495047 	svcmi	0x00495047
     94c:	65657053 	strbvs	r7, [r5, #-83]!	; 0xffffffad
     950:	79545f64 	ldmdbvc	r4, {r2, r5, r6, r8, r9, sl, fp, ip, lr}^
     954:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
     958:	50470066 	subpl	r0, r7, r6, rrx
     95c:	505f4f49 	subspl	r4, pc, r9, asr #30
     960:	47006e69 	strmi	r6, [r0, -r9, ror #28]
     964:	494f4950 	stmdbmi	pc, {r4, r6, r8, fp, lr}^	; <UNPREDICTABLE>
     968:	0074696e 	rsbseq	r6, r4, lr, ror #18
     96c:	31414d44 	cmpcc	r1, r4, asr #26
     970:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
     974:	336d6165 	cmncc	sp, #1073741849	; 0x40000019
     978:	5152495f 	cmppl	r2, pc, asr r9
     97c:	4d44006e 	stclmi	0, cr0, [r4, #-440]	; 0xfffffe48
     980:	535f3141 	cmppl	pc, #1073741840	; 0x40000010
     984:	61657274 	smcvs	22308	; 0x5724
     988:	495f366d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r9, sl, ip, sp}^	; <UNPREDICTABLE>
     98c:	006e5152 	rsbeq	r5, lr, r2, asr r1
     990:	33433249 	movtcc	r3, #12873	; 0x3249
     994:	5f56455f 	svcpl	0x0056455f
     998:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     99c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     9a0:	79545f4f 	ldmdbvc	r4, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     9a4:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
     9a8:	434c0066 	movtmi	r0, #49254	; 0xc066
     9ac:	5400524b 	strpl	r5, [r0], #-587	; 0xfffffdb5
     9b0:	5f314d49 	svcpl	0x00314d49
     9b4:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     9b8:	006e5152 	rsbeq	r5, lr, r2, asr r1
     9bc:	5f47544f 	svcpl	0x0047544f
     9c0:	455f5348 	ldrbmi	r5, [pc, #-840]	; 680 <startup-0x1ffff980>
     9c4:	4f5f3150 	svcmi	0x005f3150
     9c8:	495f5455 	ldmdbmi	pc, {r0, r2, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
     9cc:	006e5152 	rsbeq	r5, lr, r2, asr r1
     9d0:	5f4d4954 	svcpl	0x004d4954
     9d4:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
     9d8:	65736142 	ldrbvs	r6, [r3, #-322]!	; 0xfffffebe
     9dc:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
     9e0:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     9e4:	00666544 	rsbeq	r6, r6, r4, asr #10
     9e8:	61435653 	cmpvs	r3, r3, asr r6
     9ec:	495f6c6c 	ldmdbmi	pc, {r2, r3, r5, r6, sl, fp, sp, lr}^	; <UNPREDICTABLE>
     9f0:	006e5152 	rsbeq	r5, lr, r2, asr r1
     9f4:	52434d53 	subpl	r4, r3, #5312	; 0x14c0
     9f8:	414d4400 	cmpmi	sp, r0, lsl #8
     9fc:	74535f32 	ldrbvc	r5, [r3], #-3890	; 0xfffff0ce
     a00:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
     a04:	52495f32 	subpl	r5, r9, #50, 30	; 0xc8
     a08:	43006e51 	movwmi	r6, #3665	; 0xe51
     a0c:	5f314e41 	svcpl	0x00314e41
     a10:	495f5854 	ldmdbmi	pc, {r2, r4, r6, fp, ip, lr}^	; <UNPREDICTABLE>
     a14:	006e5152 	rsbeq	r5, lr, r2, asr r1
     a18:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
     a1c:	315f3531 	cmpcc	pc, r1, lsr r5	; <UNPREDICTABLE>
     a20:	52495f30 	subpl	r5, r9, #48, 30	; 0xc0
     a24:	47006e51 	smlsdmi	r0, r1, lr, r6
     a28:	504f4950 	subpl	r4, pc, r0, asr r9	; <UNPREDICTABLE>
     a2c:	5f645075 	svcpl	0x00645075
     a30:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     a34:	00666544 	rsbeq	r6, r6, r4, asr #10
     a38:	31495053 	qdaddcc	r5, r3, r9
     a3c:	5152495f 	cmppl	r2, pc, asr r9
     a40:	4d44006e 	stclmi	0, cr0, [r4, #-440]	; 0xfffffe48
     a44:	535f3141 	cmppl	pc, #1073741840	; 0x40000010
     a48:	61657274 	smcvs	22308	; 0x5724
     a4c:	495f316d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r8, ip, sp}^	; <UNPREDICTABLE>
     a50:	006e5152 	rsbeq	r5, lr, r2, asr r1
     a54:	67697254 			; <UNDEFINED> instruction: 0x67697254
     a58:	6e69505f 	mcrvs	0, 3, r5, cr9, cr15, {2}
     a5c:	62697600 	rsbvs	r7, r9, #0, 12
     a60:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     a64:	65536e6f 	ldrbvs	r6, [r3, #-3695]	; 0xfffff191
     a68:	726f736e 	rsbvc	r7, pc, #-1207959551	; 0xb8000001
     a6c:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     a70:	52425f38 	subpl	r5, r2, #56, 30	; 0xe0
     a74:	49545f4b 	ldmdbmi	r4, {r0, r1, r3, r6, r8, r9, sl, fp, ip, lr}^
     a78:	5f32314d 	svcpl	0x0032314d
     a7c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     a80:	73795300 	cmnvc	r9, #0, 6
     a84:	6b636954 	blvs	18dafdc <startup-0x1e725024>
     a88:	5152495f 	cmppl	r2, pc, asr r9
     a8c:	7355006e 	cmpvc	r5, #110	; 0x6e
     a90:	46656761 	strbtmi	r6, [r5], -r1, ror #14
     a94:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
     a98:	5152495f 	cmppl	r2, pc, asr r9
     a9c:	5047006e 	subpl	r0, r7, lr, rrx
     aa0:	505f4f49 	subspl	r4, pc, r9, asr #30
     aa4:	5f645075 	svcpl	0x00645075
     aa8:	55504f4e 	ldrbpl	r4, [r0, #-3918]	; 0xfffff0b2
     aac:	54004c4c 	strpl	r4, [r0], #-3148	; 0xfffff3b4
     ab0:	5f384d49 	svcpl	0x00384d49
     ab4:	5f475254 	svcpl	0x00475254
     ab8:	5f4d4f43 	svcpl	0x004d4f43
     abc:	314d4954 	cmpcc	sp, r4, asr r9
     ac0:	52495f34 	subpl	r5, r9, #52, 30	; 0xd0
     ac4:	42006e51 	andmi	r6, r0, #1296	; 0x510
     ac8:	00525444 	subseq	r5, r2, r4, asr #8
     acc:	5f4d4954 	svcpl	0x004d4954
     ad0:	73657250 	cmnvc	r5, #80, 4
     ad4:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
     ad8:	50470072 	subpl	r0, r7, r2, ror r0
     adc:	4f5f4f49 	svcmi	0x005f4f49
     ae0:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     ae4:	48544500 	ldmdami	r4, {r8, sl, lr}^
     ae8:	5152495f 	cmppl	r2, pc, asr r9
     aec:	4954006e 	ldmdbmi	r4, {r1, r2, r3, r5, r6}^
     af0:	555f314d 	ldrbpl	r3, [pc, #-333]	; 9ab <startup-0x1ffff655>
     af4:	49545f50 	ldmdbmi	r4, {r4, r6, r8, r9, sl, fp, ip, lr}^
     af8:	5f30314d 	svcpl	0x0030314d
     afc:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     b00:	414d4400 	cmpmi	sp, r0, lsl #8
     b04:	74535f32 	ldrbvc	r5, [r3], #-3890	; 0xfffff0ce
     b08:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
     b0c:	52495f33 	subpl	r5, r9, #51, 30	; 0xcc
     b10:	45006e51 	strmi	r6, [r0, #-3665]	; 0xfffff1af
     b14:	49495458 	stmdbmi	r9, {r3, r4, r6, sl, ip, lr}^
     b18:	0074696e 	rsbseq	r6, r4, lr, ror #18
     b1c:	31414d44 	cmpcc	r1, r4, asr #26
     b20:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
     b24:	346d6165 	strbtcc	r6, [sp], #-357	; 0xfffffe9b
     b28:	5152495f 	cmppl	r2, pc, asr r9
     b2c:	5355006e 	cmppl	r5, #110	; 0x6e
     b30:	36545241 	ldrbcc	r5, [r4], -r1, asr #4
     b34:	5152495f 	cmppl	r2, pc, asr r9
     b38:	4954006e 	ldmdbmi	r4, {r1, r2, r3, r5, r6}^
     b3c:	495f354d 	ldmdbmi	pc, {r0, r2, r3, r6, r8, sl, ip, sp}^	; <UNPREDICTABLE>
     b40:	006e5152 	rsbeq	r5, lr, r2, asr r1
     b44:	4f495047 	svcmi	0x00495047
     b48:	776f4c5f 			; <UNDEFINED> instruction: 0x776f4c5f
     b4c:	6570535f 	ldrbvs	r5, [r0, #-863]!	; 0xfffffca1
     b50:	45006465 	strmi	r6, [r0, #-1125]	; 0xfffffb9b
     b54:	33495458 	movtcc	r5, #37976	; 0x9458
     b58:	5152495f 	cmppl	r2, pc, asr r9
     b5c:	5053006e 	subspl	r0, r3, lr, rrx
     b60:	495f3249 	ldmdbmi	pc, {r0, r3, r6, r9, ip, sp}^	; <UNPREDICTABLE>
     b64:	006e5152 	rsbeq	r5, lr, r2, asr r1
     b68:	31414d44 	cmpcc	r1, r4, asr #26
     b6c:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
     b70:	326d6165 	rsbcc	r6, sp, #1073741849	; 0x40000019
     b74:	5152495f 	cmppl	r2, pc, asr r9
     b78:	3a43006e 	bcc	10c0d38 <startup-0x1ef3f2c8>
     b7c:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
     b80:	612f7372 			; <UNDEFINED> instruction: 0x612f7372
     b84:	726e696d 	rsbvc	r6, lr, #1785856	; 0x1b4000
     b88:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
     b8c:	706f746b 	rsbvc	r7, pc, fp, ror #8
     b90:	7461642f 	strbtvc	r6, [r1], #-1071	; 0xfffffbd1
     b94:	6f727061 	svcvs	0x00727061
     b98:	746b656a 	strbtvc	r6, [fp], #-1386	; 0xfffffa96
     b9c:	7265702f 	rsbvc	r7, r5, #47	; 0x2f
     ba0:	70687069 	rsbvc	r7, r8, r9, rrx
     ba4:	70697265 	rsbvc	r7, r9, r5, ror #4
     ba8:	61726568 	cmnvs	r2, r8, ror #10
     bac:	6e755f6c 	cdpvs	15, 7, cr5, cr5, cr12, {3}
     bb0:	2f327469 	svccs	0x00327469
     bb4:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
     bb8:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
     bbc:	41430063 	cmpmi	r3, r3, rrx
     bc0:	545f324e 	ldrbpl	r3, [pc], #-590	; bc8 <startup-0x1ffff438>
     bc4:	52495f58 	subpl	r5, r9, #88, 30	; 0x160
     bc8:	47006e51 	smlsdmi	r0, r1, lr, r6
     bcc:	5f4f4950 	svcpl	0x004f4950
     bd0:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
     bd4:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     bd8:	00666544 	rsbeq	r6, r6, r4, asr #10
     bdc:	4f495047 	svcmi	0x00495047
     be0:	646f4d5f 	strbtvs	r4, [pc], #-3423	; be8 <startup-0x1ffff418>
     be4:	4f4d0065 	svcmi	0x004d0065
     be8:	00524544 	subseq	r4, r2, r4, asr #10
     bec:	5f47544f 	svcpl	0x0047544f
     bf0:	495f5348 	ldmdbmi	pc, {r3, r6, r8, r9, ip, lr}^	; <UNPREDICTABLE>
     bf4:	006e5152 	rsbeq	r5, lr, r2, asr r1
     bf8:	6f6d654d 	svcvs	0x006d654d
     bfc:	614d7972 	hvcvs	55186	; 0xd792
     c00:	6567616e 	strbvs	r6, [r7, #-366]!	; 0xfffffe92
     c04:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
     c08:	5152495f 	cmppl	r2, pc, asr r9
     c0c:	4552006e 	ldrbmi	r0, [r2, #-110]	; 0xffffff92
     c10:	56524553 			; <UNDEFINED> instruction: 0x56524553
     c14:	00314445 	eorseq	r4, r1, r5, asr #8
     c18:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
     c1c:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
     c20:	50530036 	subspl	r0, r3, r6, lsr r0
     c24:	495f3349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, ip, sp}^	; <UNPREDICTABLE>
     c28:	006e5152 	rsbeq	r5, lr, r2, asr r1
     c2c:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
     c30:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
     c34:	4d440039 	stclmi	0, cr0, [r4, #-228]	; 0xffffff1c
     c38:	535f3241 	cmppl	pc, #268435460	; 0x10000004
     c3c:	61657274 	smcvs	22308	; 0x5724
     c40:	495f346d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, sl, ip, sp}^	; <UNPREDICTABLE>
     c44:	006e5152 	rsbeq	r5, lr, r2, asr r1
     c48:	434d5346 	movtmi	r5, #54086	; 0xd346
     c4c:	5152495f 	cmppl	r2, pc, asr r9
     c50:	4954006e 	ldmdbmi	r4, {r1, r2, r3, r5, r6}^
     c54:	425f314d 	subsmi	r3, pc, #1073741843	; 0x40000013
     c58:	545f4b52 	ldrbpl	r4, [pc], #-2898	; c60 <startup-0x1ffff3a0>
     c5c:	5f394d49 	svcpl	0x00394d49
     c60:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     c64:	54584500 	ldrbpl	r4, [r8], #-1280	; 0xfffffb00
     c68:	495f3449 	ldmdbmi	pc, {r0, r3, r6, sl, ip, sp}^	; <UNPREDICTABLE>
     c6c:	006e5152 	rsbeq	r5, lr, r2, asr r1
     c70:	48534148 	ldmdami	r3, {r3, r6, r8, lr}^
     c74:	474e525f 	smlsldmi	r5, lr, pc, r2	; <UNPREDICTABLE>
     c78:	5152495f 	cmppl	r2, pc, asr r9
     c7c:	4954006e 	ldmdbmi	r4, {r1, r2, r3, r5, r6}^
     c80:	6f435f4d 	svcvs	0x00435f4d
     c84:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     c88:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     c8c:	47006e6f 	strmi	r6, [r0, -pc, ror #28]
     c90:	5f4f4950 	svcpl	0x004f4950
     c94:	74736146 	ldrbtvc	r6, [r3], #-326	; 0xfffffeba
     c98:	6570535f 	ldrbvs	r5, [r0, #-863]!	; 0xfffffca1
     c9c:	55006465 	strpl	r6, [r0, #-1125]	; 0xfffffb9b
     ca0:	35545241 	ldrbcc	r5, [r4, #-577]	; 0xfffffdbf
     ca4:	5152495f 	cmppl	r2, pc, asr r9
     ca8:	4954006e 	ldmdbmi	r4, {r1, r2, r3, r5, r6}^
     cac:	545f314d 	ldrbpl	r3, [pc], #-333	; cb4 <startup-0x1ffff34c>
     cb0:	435f4752 	cmpmi	pc, #21495808	; 0x1480000
     cb4:	545f4d4f 	ldrbpl	r4, [pc], #-3407	; cbc <startup-0x1ffff344>
     cb8:	31314d49 	teqcc	r1, r9, asr #26
     cbc:	5152495f 	cmppl	r2, pc, asr r9
     cc0:	4954006e 	ldmdbmi	r4, {r1, r2, r3, r5, r6}^
     cc4:	6c435f4d 	mcrrvs	15, 4, r5, r3, cr13
     cc8:	446b636f 	strbtmi	r6, [fp], #-879	; 0xfffffc91
     ccc:	73697669 	cmnvc	r9, #110100480	; 0x6900000
     cd0:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     cd4:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
     cd8:	52495f32 	subpl	r5, r9, #50, 30	; 0xc8
     cdc:	46006e51 			; <UNDEFINED> instruction: 0x46006e51
     ce0:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
     ce4:	5152495f 	cmppl	r2, pc, asr r9
     ce8:	6863006e 	stmdavs	r3!, {r1, r2, r3, r5, r6}^
     cec:	5f6b6365 	svcpl	0x006b6365
     cf0:	74736964 	ldrbtvc	r6, [r3], #-2404	; 0xfffff69c
     cf4:	65636e61 	strbvs	r6, [r3, #-3681]!	; 0xfffff19f
     cf8:	746c7500 	strbtvc	r7, [ip], #-1280	; 0xfffffb00
     cfc:	6f536172 	svcvs	0x00536172
     d00:	5363696e 	cmnpl	r3, #1802240	; 0x1b8000
     d04:	6f736e65 	svcvs	0x00736e65
     d08:	544f0072 	strbpl	r0, [pc], #-114	; d10 <startup-0x1ffff2f0>
     d0c:	53465f47 	movtpl	r5, #28487	; 0x6f47
     d10:	5152495f 	cmppl	r2, pc, asr r9
     d14:	4552006e 	ldrbmi	r0, [r2, #-110]	; 0xffffff92
     d18:	56524553 			; <UNDEFINED> instruction: 0x56524553
     d1c:	00374445 	eorseq	r4, r7, r5, asr #8
     d20:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     d24:	495f3254 	ldmdbmi	pc, {r2, r4, r6, r9, ip, sp}^	; <UNPREDICTABLE>
     d28:	006e5152 	rsbeq	r5, lr, r2, asr r1
     d2c:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
     d30:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
     d34:	49540038 	ldmdbmi	r4, {r3, r4, r5}^
     d38:	495f344d 	ldmdbmi	pc, {r0, r2, r3, r6, sl, ip, sp}^	; <UNPREDICTABLE>
     d3c:	006e5152 	rsbeq	r5, lr, r2, asr r1
     d40:	6f686365 	svcvs	0x00686365
     d44:	6174735f 	cmnvs	r4, pc, asr r3
     d48:	44007472 	strmi	r7, [r0], #-1138	; 0xfffffb8e
     d4c:	5f31414d 	svcpl	0x0031414d
     d50:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
     d54:	5f376d61 	svcpl	0x00376d61
     d58:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     d5c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     d60:	6f4d5f4f 	svcvs	0x004d5f4f
     d64:	4f5f6564 	svcmi	0x005f6564
     d68:	6e005455 	cfmvsrvs	mvf0, r5
     d6c:	5f636976 	svcpl	0x00636976
     d70:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
     d74:	59524300 	ldmdbpl	r2, {r8, r9, lr}^
     d78:	52495f50 	subpl	r5, r9, #80, 30	; 0x140
     d7c:	54006e51 	strpl	r6, [r0], #-3665	; 0xfffff1af
     d80:	5f384d49 	svcpl	0x00384d49
     d84:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     d88:	006e5152 	rsbeq	r5, lr, r2, asr r1
     d8c:	6f686365 	svcvs	0x00686365
     d90:	646e655f 	strbtvs	r6, [lr], #-1375	; 0xfffffaa1
     d94:	414d4400 	cmpmi	sp, r0, lsl #8
     d98:	49540052 	ldmdbmi	r4, {r1, r4, r6}^
     d9c:	495f374d 	ldmdbmi	pc, {r0, r2, r3, r6, r8, r9, sl, ip, sp}^	; <UNPREDICTABLE>
     da0:	006e5152 	rsbeq	r5, lr, r2, asr r1
     da4:	72626956 	rsbvc	r6, r2, #1409024	; 0x158000
     da8:	6f697461 	svcvs	0x00697461
     dac:	69505f6e 	ldmdbvs	r0, {r1, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     db0:	4954006e 	ldmdbmi	r4, {r1, r2, r3, r5, r6}^
     db4:	65505f4d 	ldrbvs	r5, [r0, #-3917]	; 0xfffff0b3
     db8:	646f6972 	strbtvs	r6, [pc], #-2418	; dc0 <startup-0x1ffff240>
     dbc:	746c5500 	strbtvc	r5, [ip], #-1280	; 0xfffffb00
     dc0:	6f536172 	svcvs	0x00536172
     dc4:	5f63696e 	svcpl	0x0063696e
     dc8:	5f717269 	svcpl	0x00717269
     dcc:	646e6168 	strbtvs	r6, [lr], #-360	; 0xfffffe98
     dd0:	0072656c 	rsbseq	r6, r2, ip, ror #10
     dd4:	4d6e6f4e 	stclmi	15, cr6, [lr, #-312]!	; 0xfffffec8
     dd8:	616b7361 	cmnvs	fp, r1, ror #6
     ddc:	49656c62 	stmdbmi	r5!, {r1, r5, r6, sl, fp, sp, lr}^
     de0:	495f746e 	ldmdbmi	pc, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
     de4:	006e5152 	rsbeq	r5, lr, r2, asr r1
     de8:	504d4154 	subpl	r4, sp, r4, asr r1
     dec:	4154535f 	cmpmi	r4, pc, asr r3
     df0:	495f504d 	ldmdbmi	pc, {r0, r2, r3, r6, ip, lr}^	; <UNPREDICTABLE>
     df4:	006e5152 	rsbeq	r5, lr, r2, asr r1
     df8:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
     dfc:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
     e00:	306d6165 	rsbcc	r6, sp, r5, ror #2
     e04:	5152495f 	cmppl	r2, pc, asr r9
     e08:	5355006e 	cmppl	r5, #110	; 0x6e
     e0c:	33545241 	cmpcc	r4, #268435460	; 0x10000004
     e10:	5152495f 	cmppl	r2, pc, asr r9
     e14:	5047006e 	subpl	r0, r7, lr, rrx
     e18:	4f5f4f49 	svcmi	0x005f4f49
     e1c:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     e20:	00444f5f 	subeq	r4, r4, pc, asr pc
     e24:	31524343 	cmpcc	r2, r3, asr #6
     e28:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     e2c:	52495f32 	subpl	r5, r9, #50, 30	; 0xc8
     e30:	43006e51 	movwmi	r6, #3665	; 0xe51
     e34:	00335243 	eorseq	r5, r3, r3, asr #4
     e38:	34524343 	ldrbcc	r4, [r2], #-835	; 0xfffffcbd
     e3c:	52534200 	subspl	r4, r3, #0, 4
     e40:	42004c52 	andmi	r4, r0, #20992	; 0x5200
     e44:	48525253 	ldmdami	r2, {r0, r1, r4, r6, r9, ip, lr}^
     e48:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     e4c:	75505f4f 	ldrbvc	r5, [r0, #-3919]	; 0xfffff0b1
     e50:	445f6450 	ldrbmi	r6, [pc], #-1104	; e58 <startup-0x1ffff1a8>
     e54:	004e574f 	subeq	r5, lr, pc, asr #14
     e58:	6f686365 	svcvs	0x00686365
     e5c:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
     e60:	43440065 	movtmi	r0, #16485	; 0x4065
     e64:	495f494d 	ldmdbmi	pc, {r0, r2, r3, r6, r8, fp, lr}^	; <UNPREDICTABLE>
     e68:	006e5152 	rsbeq	r5, lr, r2, asr r1
     e6c:	6f686345 	svcvs	0x00686345
     e70:	6e69505f 	mcrvs	0, 3, r5, cr9, cr15, {2}
     e74:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     e78:	7065525f 	rsbvc	r5, r5, pc, asr r2
     e7c:	74697465 	strbtvc	r7, [r9], #-1125	; 0xfffffb9b
     e80:	436e6f69 	cmnmi	lr, #420	; 0x1a4
     e84:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
     e88:	47007265 	strmi	r7, [r0, -r5, ror #4]
     e8c:	5f4f4950 	svcpl	0x004f4950
     e90:	64507550 	ldrbvs	r7, [r0], #-1360	; 0xfffffab0
     e94:	41535500 	cmpmi	r3, r0, lsl #10
     e98:	5f315452 	svcpl	0x00315452
     e9c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     ea0:	62697600 	rsbvs	r7, r9, #0, 12
     ea4:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     ea8:	695f6e6f 	ldmdbvs	pc, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^	; <UNPREDICTABLE>
     eac:	685f7172 	ldmdavs	pc, {r1, r4, r5, r6, r8, ip, sp, lr}^	; <UNPREDICTABLE>
     eb0:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     eb4:	47007265 	strmi	r7, [r0, -r5, ror #4]
     eb8:	5f4f4950 	svcpl	0x004f4950
     ebc:	64507550 	ldrbvs	r7, [r0], #-1360	; 0xfffffab0
     ec0:	0050555f 	subseq	r5, r0, pc, asr r5
     ec4:	52454944 	subpl	r4, r5, #68, 18	; 0x110000
     ec8:	55504600 	ldrbpl	r4, [r0, #-1536]	; 0xfffffa00
     ecc:	5152495f 	cmppl	r2, pc, asr r9
     ed0:	6544006e 	strbvs	r0, [r4, #-110]	; 0xffffff92
     ed4:	4d677562 	cfstr64mi	mvdx7, [r7, #-392]!	; 0xfffffe78
     ed8:	74696e6f 	strbtvc	r6, [r9], #-3695	; 0xfffff191
     edc:	495f726f 	ldmdbmi	pc, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
     ee0:	006e5152 	rsbeq	r5, lr, r2, asr r1
     ee4:	4f495047 	svcmi	0x00495047
     ee8:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
     eec:	7079545f 	rsbsvc	r5, r9, pc, asr r4
     ef0:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     ef4:	43324900 	teqmi	r2, #0, 18
     ef8:	52455f31 	subpl	r5, r5, #49, 30	; 0xc4
     efc:	5152495f 	cmppl	r2, pc, asr r9
     f00:	4441006e 	strbmi	r0, [r1], #-110	; 0xffffff92
     f04:	52495f43 	subpl	r5, r9, #268	; 0x10c
     f08:	44006e51 	strmi	r6, [r0], #-3665	; 0xfffff1af
     f0c:	5f32414d 	svcpl	0x0032414d
     f10:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
     f14:	5f316d61 	svcpl	0x00316d61
     f18:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     f1c:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
     f20:	5047006e 	subpl	r0, r7, lr, rrx
     f24:	485f4f49 	ldmdami	pc, {r0, r3, r6, r8, r9, sl, fp, lr}^	; <UNPREDICTABLE>
     f28:	5f686769 	svcpl	0x00686769
     f2c:	65657053 	strbvs	r7, [r5, #-83]!	; 0xffffffad
     f30:	41430064 	cmpmi	r3, r4, rrx
     f34:	535f314e 	cmppl	pc, #-2147483629	; 0x80000013
     f38:	495f4543 	ldmdbmi	pc, {r0, r1, r6, r8, sl, lr}^	; <UNPREDICTABLE>
     f3c:	006e5152 	rsbeq	r5, lr, r2, asr r1
     f40:	324e4143 	subcc	r4, lr, #-1073741808	; 0xc0000010
     f44:	4543535f 	strbmi	r5, [r3, #-863]	; 0xfffffca1
     f48:	5152495f 	cmppl	r2, pc, asr r9
     f4c:	4352006e 	cmpmi	r2, #110	; 0x6e
     f50:	52495f43 	subpl	r5, r9, #268	; 0x10c
     f54:	4f006e51 	svcmi	0x00006e51
     f58:	485f4754 	ldmdami	pc, {r2, r4, r6, r8, r9, sl, lr}^	; <UNPREDICTABLE>
     f5c:	4b575f53 	blmi	15d8cb0 <startup-0x1ea27350>
     f60:	495f5055 	ldmdbmi	pc, {r0, r2, r4, r6, ip, lr}^	; <UNPREDICTABLE>
     f64:	006e5152 	rsbeq	r5, lr, r2, asr r1
     f68:	334d4954 	movtcc	r4, #55636	; 0xd954
     f6c:	5152495f 	cmppl	r2, pc, asr r9
     f70:	5845006e 	stmdapl	r5, {r1, r2, r3, r5, r6}^
     f74:	5f314954 	svcpl	0x00314954
     f78:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
     f7c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     f80:	696e554f 	stmdbvs	lr!, {r0, r1, r2, r3, r6, r8, sl, ip, lr}^
     f84:	43520074 	cmpmi	r2, #116	; 0x74
     f88:	43485f43 	movtmi	r5, #36675	; 0x8f43
     f8c:	52004b4c 	andpl	r4, r0, #76, 22	; 0x13000
     f90:	4c5f4343 	mrrcmi	3, 4, r4, pc, cr3	; <UNPREDICTABLE>
     f94:	41004553 	tstmi	r0, r3, asr r5
     f98:	4c314250 	lfmmi	f4, 4, [r1], #-320	; 0xfffffec0
     f9c:	524e4550 	subpl	r4, lr, #80, 10	; 0x14000000
     fa0:	43435200 	movtmi	r5, #12800	; 0x3200
     fa4:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
     fa8:	43494153 	movtmi	r4, #37203	; 0x9153
     fac:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
     fb0:	505f4343 	subspl	r4, pc, r3, asr #6
     fb4:	41534c4c 	cmpmi	r3, ip, asr #24
     fb8:	76694449 	strbtvc	r4, [r9], -r9, asr #8
     fbc:	43520051 	cmpmi	r2, #81	; 0x51
     fc0:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
     fc4:	4941534c 	stmdbmi	r1, {r2, r3, r6, r8, r9, ip, lr}^
     fc8:	52766944 	rsbspl	r6, r6, #68, 18	; 0x110000
     fcc:	61747300 	cmnvs	r4, r0, lsl #6
     fd0:	72737574 	rsbsvc	r7, r3, #116, 10	; 0x1d000000
     fd4:	53006765 	movwpl	r6, #1893	; 0x765
     fd8:	4c435359 	mcrrmi	3, 5, r5, r3, cr9
     fdc:	72465f4b 	subvc	r5, r6, #300	; 0x12c
     fe0:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
     fe4:	0079636e 	rsbseq	r6, r9, lr, ror #6
     fe8:	6d6c6c70 	stclvs	12, cr6, [ip, #-448]!	; 0xfffffe40
     fec:	6c6c7000 	stclvs	0, cr7, [ip], #-0
     ff0:	43520070 	cmpmi	r2, #112	; 0x70
     ff4:	434d5f43 	movtmi	r5, #57155	; 0xdf43
     ff8:	6f53314f 	svcvs	0x0053314f
     ffc:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    1000:	43435200 	movtmi	r5, #12800	; 0x3200
    1004:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
    1008:	72655031 	rsbvc	r5, r5, #49	; 0x31
    100c:	52687069 	rsbpl	r7, r8, #105	; 0x69
    1010:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
    1014:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1018:	4e4c4c50 	mcrmi	12, 2, r4, cr12, cr0, {2}
    101c:	43435200 	movtmi	r5, #12800	; 0x3200
    1020:	4941535f 	stmdbmi	r1, {r0, r1, r2, r3, r4, r6, r8, r9, ip, lr}^
    1024:	534c4c50 	movtpl	r4, #52304	; 0xcc50
    1028:	6c434941 	mcrrvs	9, 4, r4, r3, cr1	; <UNPREDICTABLE>
    102c:	7669446b 	strbtvc	r4, [r9], -fp, ror #8
    1030:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1034:	50006769 	andpl	r6, r0, r9, ror #14
    1038:	00504c4c 	subseq	r4, r0, ip, asr #24
    103c:	514c4c50 	cmppl	ip, r0, asr ip
    1040:	43435200 	movtmi	r5, #12800	; 0x3200
    1044:	656c435f 	strbvs	r4, [ip, #-863]!	; 0xfffffca1
    1048:	54497261 	strbpl	r7, [r9], #-609	; 0xfffffd9f
    104c:	646e6550 	strbtvs	r6, [lr], #-1360	; 0xfffffab0
    1050:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
    1054:	52007469 	andpl	r7, r0, #1761607680	; 0x69000000
    1058:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    105c:	4c500054 	mrrcmi	0, 5, r0, r0, cr4	; <UNPREDICTABLE>
    1060:	52004d4c 	andpl	r4, r0, #76, 26	; 0x1300
    1064:	415f4343 	cmpmi	pc, r3, asr #6
    1068:	50314248 	eorspl	r4, r1, r8, asr #4
    106c:	70697265 	rsbvc	r7, r9, r5, ror #4
    1070:	48410068 	stmdami	r1, {r3, r5, r6}^
    1074:	504c3142 	subpl	r3, ip, r2, asr #2
    1078:	00524e45 	subseq	r4, r2, r5, asr #28
    107c:	5f434352 	svcpl	0x00434352
    1080:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    1084:	5200736b 	andpl	r7, r0, #-1409286143	; 0xac000001
    1088:	415f4343 	cmpmi	pc, r3, asr #6
    108c:	50324250 	eorspl	r4, r2, r0, asr r2
    1090:	70697265 	rsbvc	r7, r9, r5, ror #4
    1094:	6f6c4368 	svcvs	0x006c4368
    1098:	504c6b63 	subpl	r6, ip, r3, ror #22
    109c:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    10a0:	00646d43 	rsbeq	r6, r4, r3, asr #26
    10a4:	434b4344 	movtmi	r4, #45892	; 0xb344
    10a8:	00524746 	subseq	r4, r2, r6, asr #14
    10ac:	5f434352 	svcpl	0x00434352
    10b0:	61656c43 	cmnvs	r5, r3, asr #24
    10b4:	616c4672 	smcvs	50274	; 0xc462
    10b8:	48410067 	stmdami	r1, {r0, r1, r2, r5, r6}^
    10bc:	53523142 	cmppl	r2, #-2147483632	; 0x80000010
    10c0:	44005254 	strmi	r5, [r0], #-596	; 0xfffffdac
    10c4:	46434b43 	strbmi	r4, [r3], -r3, asr #22
    10c8:	00325247 	eorseq	r5, r2, r7, asr #4
    10cc:	72706d74 	rsbsvc	r6, r0, #116, 26	; 0x1d00
    10d0:	50006765 	andpl	r6, r0, r5, ror #14
    10d4:	324b4c43 	subcc	r4, fp, #17152	; 0x4300
    10d8:	6572465f 	ldrbvs	r4, [r2, #-1631]!	; 0xfffff9a1
    10dc:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
    10e0:	52007963 	andpl	r7, r0, #1622016	; 0x18c000
    10e4:	415f4343 	cmpmi	pc, r3, asr #6
    10e8:	50324248 	eorspl	r4, r2, r8, asr #4
    10ec:	70697265 	rsbvc	r7, r9, r5, ror #4
    10f0:	6f6c4368 	svcvs	0x006c4368
    10f4:	6d436b63 	vstrvs	d22, [r3, #-396]	; 0xfffffe74
    10f8:	50410064 	subpl	r0, r1, r4, rrx
    10fc:	53523242 	cmppl	r2, #536870916	; 0x20000004
    1100:	52005254 	andpl	r5, r0, #84, 4	; 0x40000005
    1104:	505f4343 	subspl	r4, pc, r3, asr #6
    1108:	314b4c43 	cmpcc	fp, r3, asr #24
    110c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1110:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
    1114:	415f4343 	cmpmi	pc, r3, asr #6
    1118:	50334248 	eorspl	r4, r3, r8, asr #4
    111c:	70697265 	rsbvc	r7, r9, r5, ror #4
    1120:	73655268 	cmnvc	r5, #104, 4	; 0x80000006
    1124:	6d437465 	cfstrdvs	mvd7, [r3, #-404]	; 0xfffffe6c
    1128:	43520064 	cmpmi	r2, #100	; 0x64
    112c:	41535f43 	cmpmi	r3, r3, asr #30
    1130:	6f6c4249 	svcvs	0x006c4249
    1134:	43416b63 	movtmi	r6, #7011	; 0x1b63
    1138:	6f434b4c 	svcvs	0x00434b4c
    113c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1140:	43435200 	movtmi	r5, #12800	; 0x3200
    1144:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
    1148:	72655031 	rsbvc	r5, r5, #49	; 0x31
    114c:	52687069 	rsbpl	r7, r8, #105	; 0x69
    1150:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
    1154:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1158:	5f434352 	svcpl	0x00434352
    115c:	4b4c4348 	blmi	1311e84 <startup-0x1ecee17c>
    1160:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1164:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
    1168:	535f4343 	cmppl	pc, #201326593	; 0xc000001
    116c:	4c435359 	mcrrmi	3, 5, r5, r3, cr9
    1170:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
    1174:	00676966 	rsbeq	r6, r7, r6, ror #18
    1178:	5f434352 	svcpl	0x00434352
    117c:	4345534c 	movtmi	r5, #21324	; 0x534c
    1180:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1184:	43520067 	cmpmi	r2, #103	; 0x67
    1188:	4c465f43 	mcrrmi	15, 4, r5, r6, cr3
    118c:	50004741 	andpl	r4, r0, r1, asr #14
    1190:	46434c4c 	strbmi	r4, [r3], -ip, asr #24
    1194:	52005247 	andpl	r5, r0, #1879048196	; 0x70000004
    1198:	425f4343 	subsmi	r4, pc, #201326593	; 0xc000001
    119c:	756b6361 	strbvc	r6, [fp, #-865]!	; 0xfffffc9f
    11a0:	73655270 	cmnvc	r5, #112, 4
    11a4:	6d437465 	cfstrdvs	mvd7, [r3, #-404]	; 0xfffffe6c
    11a8:	72450064 	subvc	r0, r5, #100	; 0x64
    11ac:	53726f72 	cmnpl	r2, #456	; 0x1c8
    11b0:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
    11b4:	43520073 	cmpmi	r2, #115	; 0x73
    11b8:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
    11bc:	756f534c 	strbvc	r5, [pc, #-844]!	; e78 <startup-0x1ffff188>
    11c0:	00656372 	rsbeq	r6, r5, r2, ror r3
    11c4:	5f434352 	svcpl	0x00434352
    11c8:	53746547 	cmnpl	r4, #297795584	; 0x11c00000
    11cc:	4c435359 	mcrrmi	3, 5, r5, r3, cr9
    11d0:	756f534b 	strbvc	r5, [pc, #-843]!	; e8d <startup-0x1ffff173>
    11d4:	00656372 	rsbeq	r6, r5, r2, ror r3
    11d8:	5f434352 	svcpl	0x00434352
    11dc:	74696157 	strbtvc	r6, [r9], #-343	; 0xfffffea9
    11e0:	48726f46 	ldmdami	r2!, {r1, r2, r6, r8, r9, sl, fp, sp, lr}^
    11e4:	74534553 	ldrbvc	r4, [r3], #-1363	; 0xfffffaad
    11e8:	55747261 	ldrbpl	r7, [r4, #-609]!	; 0xfffffd9f
    11ec:	43480070 	movtmi	r0, #32880	; 0x8070
    11f0:	465f4b4c 	ldrbmi	r4, [pc], -ip, asr #22
    11f4:	75716572 	ldrbvc	r6, [r1, #-1394]!	; 0xfffffa8e
    11f8:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    11fc:	43435200 	movtmi	r5, #12800	; 0x3200
    1200:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
    1204:	72655031 	rsbvc	r5, r5, #49	; 0x31
    1208:	00687069 	rsbeq	r7, r8, r9, rrx
    120c:	766c6c70 			; <UNDEFINED> instruction: 0x766c6c70
    1210:	52006f63 	andpl	r6, r0, #396	; 0x18c
    1214:	4d5f4343 	ldclmi	3, cr4, [pc, #-268]	; 1110 <startup-0x1fffeef0>
    1218:	43314f43 	teqmi	r1, #268	; 0x10c
    121c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1220:	43520067 	cmpmi	r2, #103	; 0x67
    1224:	59535f43 	ldmdbpl	r3, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    1228:	4b4c4353 	blmi	1311f7c <startup-0x1ecee084>
    122c:	43435200 	movtmi	r5, #12800	; 0x3200
    1230:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
    1234:	43533249 	cmpmi	r3, #-1879048188	; 0x90000004
    1238:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
    123c:	545f4343 	ldrbpl	r4, [pc], #-835	; 1244 <startup-0x1fffedbc>
    1240:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
    1244:	70006665 	andvc	r6, r0, r5, ror #12
    1248:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
    124c:	43435200 	movtmi	r5, #12800	; 0x3200
    1250:	4354525f 	cmpmi	r4, #-268435451	; 0xf0000005
    1254:	534b4c43 	movtpl	r4, #48195	; 0xbc43
    1258:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    125c:	43520065 	cmpmi	r2, #101	; 0x65
    1260:	41535f43 	cmpmi	r3, r3, asr #30
    1264:	6f6c4249 	svcvs	0x006c4249
    1268:	43416b63 	movtmi	r6, #7011	; 0x1b63
    126c:	6f534b4c 	svcvs	0x00534b4c
    1270:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    1274:	43435200 	movtmi	r5, #12800	; 0x3200
    1278:	4941535f 	stmdbmi	r1, {r0, r1, r2, r3, r4, r6, r8, r9, ip, lr}^
    127c:	636f6c42 	cmnvs	pc, #16896	; 0x4200
    1280:	4c43426b 	sfmmi	f4, 2, [r3], {107}	; 0x6b
    1284:	756f534b 	strbvc	r5, [pc, #-843]!	; f41 <startup-0x1ffff0bf>
    1288:	00656372 	rsbeq	r6, r5, r2, ror r3
    128c:	5f434352 	svcpl	0x00434352
    1290:	4344544c 	movtmi	r5, #17484	; 0x444c
    1294:	444b4c43 	strbmi	r4, [fp], #-3139	; 0xfffff3bd
    1298:	6f437669 	svcvs	0x00437669
    129c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    12a0:	4c4c5000 	marmi	acc0, r5, ip
    12a4:	43533249 	cmpmi	r3, #-1879048188	; 0x90000004
    12a8:	00524746 	subseq	r4, r2, r6, asr #14
    12ac:	5f434352 	svcpl	0x00434352
    12b0:	32424841 	subcc	r4, r2, #4259840	; 0x410000
    12b4:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    12b8:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
    12bc:	4c6b636f 	stclmi	3, cr6, [fp], #-444	; 0xfffffe44
    12c0:	646f4d50 	strbtvs	r4, [pc], #-3408	; 12c8 <startup-0x1fffed38>
    12c4:	646d4365 	strbtvs	r4, [sp], #-869	; 0xfffffc9b
    12c8:	43435200 	movtmi	r5, #12800	; 0x3200
    12cc:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
    12d0:	43533249 	cmpmi	r3, #-1879048188	; 0x90000004
    12d4:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    12d8:	43520067 	cmpmi	r2, #103	; 0x67
    12dc:	53485f43 	movtpl	r5, #36675	; 0x8f43
    12e0:	646d4349 	strbtvs	r4, [sp], #-841	; 0xfffffcb7
    12e4:	43435200 	movtmi	r5, #12800	; 0x3200
    12e8:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
    12ec:	72655032 	rsbvc	r5, r5, #50	; 0x32
    12f0:	00687069 	rsbeq	r7, r8, r9, rrx
    12f4:	32425041 	subcc	r5, r2, #65	; 0x41
    12f8:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
    12fc:	43520052 	cmpmi	r2, #82	; 0x52
    1300:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    1304:	65503342 	ldrbvs	r3, [r0, #-834]	; 0xfffffcbe
    1308:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    130c:	43435200 	movtmi	r5, #12800	; 0x3200
    1310:	4f434d5f 	svcmi	0x00434d5f
    1314:	76694432 			; <UNDEFINED> instruction: 0x76694432
    1318:	43435200 	movtmi	r5, #12800	; 0x3200
    131c:	4941535f 	stmdbmi	r1, {r0, r1, r2, r3, r4, r6, r8, r9, ip, lr}^
    1320:	494c4c50 	stmdbmi	ip, {r4, r6, sl, fp, lr}^
    1324:	6c435332 	mcrrvs	3, 3, r5, r3, cr2
    1328:	7669446b 	strbtvc	r4, [r9], -fp, ror #8
    132c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1330:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
    1334:	525f4343 	subspl	r4, pc, #201326593	; 0xc000001
    1338:	4c434354 	mcrrmi	3, 5, r4, r3, cr4
    133c:	646d434b 	strbtvs	r4, [sp], #-843	; 0xfffffcb5
    1340:	52524500 	subspl	r4, r2, #0, 10
    1344:	5200524f 	andpl	r5, r0, #-268435452	; 0xf0000004
    1348:	435f4343 	cmpmi	pc, #201326593	; 0xc000001
    134c:	6b636f6c 	blvs	18dd104 <startup-0x1e722efc>
    1350:	75636553 	strbvc	r6, [r3, #-1363]!	; 0xfffffaad
    1354:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1358:	74737953 	ldrbtvc	r7, [r3], #-2387	; 0xfffff6ad
    135c:	6d436d65 	stclvs	13, cr6, [r3, #-404]	; 0xfffffe6c
    1360:	43520064 	cmpmi	r2, #100	; 0x64
    1364:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
    1368:	5332494c 	teqpl	r2, #76, 18	; 0x130000
    136c:	51766944 	cmnpl	r6, r4, asr #18
    1370:	43435200 	movtmi	r5, #12800	; 0x3200
    1374:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
    1378:	43494153 	movtmi	r4, #37203	; 0x9153
    137c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1380:	48410067 	stmdami	r1, {r0, r1, r2, r5, r6}^
    1384:	4e453342 	cdpmi	3, 4, cr3, cr5, cr2, {2}
    1388:	43520052 	cmpmi	r2, #82	; 0x52
    138c:	534c5f43 	movtpl	r5, #53059	; 0xcf43
    1390:	646f4d45 	strbtvs	r4, [pc], #-3397	; 1398 <startup-0x1fffec68>
    1394:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
    1398:	00676966 	rsbeq	r6, r7, r6, ror #18
    139c:	32424841 	subcc	r4, r2, #4259840	; 0x410000
    13a0:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
    13a4:	43520052 	cmpmi	r2, #82	; 0x52
    13a8:	434d5f43 	movtmi	r5, #57155	; 0xdf43
    13ac:	6944314f 	stmdbvs	r4, {r0, r1, r2, r3, r6, r8, ip, sp}^
    13b0:	43520076 	cmpmi	r2, #118	; 0x76
    13b4:	50415f43 	subpl	r5, r1, r3, asr #30
    13b8:	65503242 	ldrbvs	r3, [r0, #-578]	; 0xfffffdbe
    13bc:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    13c0:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    13c4:	646d4374 	strbtvs	r4, [sp], #-884	; 0xfffffc8c
    13c8:	43435200 	movtmi	r5, #12800	; 0x3200
    13cc:	4f434d5f 	svcmi	0x00434d5f
    13d0:	756f5332 	strbvc	r5, [pc, #-818]!	; 10a6 <startup-0x1fffef5a>
    13d4:	00656372 	rsbeq	r6, r5, r2, ror r3
    13d8:	5f434352 	svcpl	0x00434352
    13dc:	43533249 	cmpmi	r3, #-1879048188	; 0x90000004
    13e0:	6f534b4c 	svcvs	0x00534b4c
    13e4:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    13e8:	4c4c5000 	marmi	acc0, r5, ip
    13ec:	43494153 	movtmi	r4, #37203	; 0x9153
    13f0:	00524746 	subseq	r4, r2, r6, asr #14
    13f4:	5f434352 	svcpl	0x00434352
    13f8:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
    13fc:	5367616c 	cmnpl	r7, #108, 2
    1400:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
    1404:	43520073 	cmpmi	r2, #115	; 0x73
    1408:	53485f43 	movtpl	r5, #36675	; 0x8f43
    140c:	6e6f4345 	cdpvs	3, 6, cr4, cr15, cr5, {2}
    1410:	00676966 	rsbeq	r6, r7, r6, ror #18
    1414:	5f434352 	svcpl	0x00434352
    1418:	42494153 	submi	r4, r9, #-1073741804	; 0xc0000014
    141c:	6b636f6c 	blvs	18dd1d4 <startup-0x1e722e2c>
    1420:	4b4c4342 	blmi	1312130 <startup-0x1eceded0>
    1424:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1428:	50006769 	andpl	r6, r0, r9, ror #14
    142c:	41534c4c 	cmpmi	r3, ip, asr #24
    1430:	50004e49 	andpl	r4, r0, r9, asr #28
    1434:	41534c4c 	cmpmi	r3, ip, asr #24
    1438:	50005149 	andpl	r5, r0, r9, asr #2
    143c:	41534c4c 	cmpmi	r3, ip, asr #24
    1440:	52005249 	andpl	r5, r0, #-1879048188	; 0x90000004
    1444:	545f4343 	ldrbpl	r4, [pc], #-835	; 144c <startup-0x1fffebb4>
    1448:	4c434d49 	mcrrmi	13, 4, r4, r3, cr9
    144c:	6572504b 	ldrbvs	r5, [r2, #-75]!	; 0xffffffb5
    1450:	6c616373 	stclvs	3, cr6, [r1], #-460	; 0xfffffe34
    1454:	52007265 	andpl	r7, r0, #1342177286	; 0x50000006
    1458:	505f4343 	subspl	r4, pc, r3, asr #6
    145c:	6d434c4c 	stclvs	12, cr4, [r3, #-304]	; 0xfffffed0
    1460:	43520064 	cmpmi	r2, #100	; 0x64
    1464:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    1468:	65503142 	ldrbvs	r3, [r0, #-322]	; 0xfffffebe
    146c:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1470:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    1474:	646d436b 	strbtvs	r4, [sp], #-875	; 0xfffffc95
    1478:	42504100 	subsmi	r4, r0, #0, 2
    147c:	524e4532 	subpl	r4, lr, #209715200	; 0xc800000
    1480:	42484100 	submi	r4, r8, #0, 2
    1484:	54535233 	ldrbpl	r5, [r3], #-563	; 0xfffffdcd
    1488:	43520052 	cmpmi	r2, #82	; 0x52
    148c:	6f4d5f43 	svcvs	0x004d5f43
    1490:	52006564 	andpl	r6, r0, #100, 10	; 0x19000000
    1494:	415f4343 	cmpmi	pc, r3, asr #6
    1498:	50324248 	eorspl	r4, r2, r8, asr #4
    149c:	70697265 	rsbvc	r7, r9, r5, ror #4
    14a0:	73655268 	cmnvc	r5, #104, 4	; 0x80000006
    14a4:	6d437465 	cfstrdvs	mvd7, [r3, #-404]	; 0xfffffe6c
    14a8:	43520064 	cmpmi	r2, #100	; 0x64
    14ac:	50415f43 	subpl	r5, r1, r3, asr #30
    14b0:	65503142 	ldrbvs	r3, [r0, #-322]	; 0xfffffebe
    14b4:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    14b8:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    14bc:	4d504c6b 	ldclmi	12, cr4, [r0, #-428]	; 0xfffffe54
    14c0:	4365646f 	cmnmi	r5, #1862270976	; 0x6f000000
    14c4:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
    14c8:	505f4343 	subspl	r4, pc, r3, asr #6
    14cc:	324b4c43 	subcc	r4, fp, #17152	; 0x4300
    14d0:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    14d4:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
    14d8:	535f4343 	cmppl	pc, #201326593	; 0xc000001
    14dc:	4c435359 	mcrrmi	3, 5, r5, r3, cr9
    14e0:	756f534b 	strbvc	r5, [pc, #-843]!	; 119d <startup-0x1fffee63>
    14e4:	00656372 	rsbeq	r6, r5, r2, ror r3
    14e8:	5f434352 	svcpl	0x00434352
    14ec:	00455348 	subeq	r5, r5, r8, asr #6
    14f0:	4b4c4350 	blmi	1312238 <startup-0x1eceddc8>
    14f4:	72465f31 	subvc	r5, r6, #49, 30	; 0xc4
    14f8:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
    14fc:	0079636e 	rsbseq	r6, r9, lr, ror #6
    1500:	41425041 	cmpmi	r2, r1, asr #32
    1504:	72504248 	subsvc	r4, r0, #72, 4	; 0x80000004
    1508:	54637365 	strbtpl	r7, [r3], #-869	; 0xfffffc9b
    150c:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    1510:	43435200 	movtmi	r5, #12800	; 0x3200
    1514:	6a64415f 	bvs	1911a98 <startup-0x1e6ee568>
    1518:	48747375 	ldmdami	r4!, {r0, r2, r4, r5, r6, r8, r9, ip, sp, lr}^
    151c:	61434953 	cmpvs	r3, r3, asr r9
    1520:	7262696c 	rsbvc	r6, r2, #108, 18	; 0x1b0000
    1524:	6f697461 	svcvs	0x00697461
    1528:	6c61566e 	stclvs	6, cr5, [r1], #-440	; 0xfffffe48
    152c:	68006575 	stmdavs	r0, {r0, r2, r4, r5, r6, r8, sl, sp, lr}
    1530:	74736573 	ldrbtvc	r6, [r3], #-1395	; 0xfffffa8d
    1534:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1538:	4c4c5000 	marmi	acc0, r5, ip
    153c:	4e533249 	cdpmi	2, 5, cr3, cr3, cr9, {2}
    1540:	43435200 	movtmi	r5, #12800	; 0x3200
    1544:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    1548:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    154c:	7246736b 	subvc	r7, r6, #-1409286143	; 0xac000001
    1550:	52007165 	andpl	r7, r0, #1073741849	; 0x40000019
    1554:	415f4343 	cmpmi	pc, r3, asr #6
    1558:	50324250 	eorspl	r4, r2, r0, asr r2
    155c:	70697265 	rsbvc	r7, r9, r5, ror #4
    1560:	6f6c4368 	svcvs	0x006c4368
    1564:	6d436b63 	vstrvs	d22, [r3, #-396]	; 0xfffffe74
    1568:	48410064 	stmdami	r1, {r2, r5, r6}^
    156c:	53523242 	cmppl	r2, #536870916	; 0x20000004
    1570:	52005254 	andpl	r5, r0, #84, 4	; 0x40000005
    1574:	445f4343 	ldrbmi	r4, [pc], #-835	; 157c <startup-0x1fffea84>
    1578:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
    157c:	4c500074 	mrrcmi	0, 7, r0, r0, cr4	; <UNPREDICTABLE>
    1580:	5332494c 	teqpl	r2, #76, 18	; 0x130000
    1584:	43520052 	cmpmi	r2, #82	; 0x52
    1588:	65475f43 	strbvs	r5, [r7, #-3907]	; 0xfffff0bd
    158c:	53544974 	cmppl	r4, #116, 18	; 0x1d0000
    1590:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
    1594:	50410073 	subpl	r0, r1, r3, ror r0
    1598:	4e453142 	dvfmism	f3, f5, f2
    159c:	48410052 	stmdami	r1, {r1, r4, r6}^
    15a0:	4e453242 	cdpmi	2, 4, cr3, cr5, cr2, {2}
    15a4:	43520052 	cmpmi	r2, #82	; 0x52
    15a8:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    15ac:	65503342 	ldrbvs	r3, [r0, #-834]	; 0xfffffcbe
    15b0:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    15b4:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    15b8:	4d504c6b 	ldclmi	12, cr4, [r0, #-428]	; 0xfffffe54
    15bc:	4365646f 	cmnmi	r5, #1862270976	; 0x6f000000
    15c0:	7300646d 	movwvc	r6, #1133	; 0x46d
    15c4:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
    15c8:	6f637075 	svcvs	0x00637075
    15cc:	65746e75 	ldrbvs	r6, [r4, #-3701]!	; 0xfffff18b
    15d0:	43520072 	cmpmi	r2, #114	; 0x72
    15d4:	50415f43 	subpl	r5, r1, r3, asr #30
    15d8:	65503242 	ldrbvs	r3, [r0, #-578]	; 0xfffffdbe
    15dc:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    15e0:	43435200 	movtmi	r5, #12800	; 0x3200
    15e4:	4d49545f 	cfstrdmi	mvd5, [r9, #-380]	; 0xfffffe84
    15e8:	504b4c43 	subpl	r4, fp, r3, asr #24
    15ec:	43736572 	cmnmi	r3, #478150656	; 0x1c800000
    15f0:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    15f4:	43520067 	cmpmi	r2, #103	; 0x67
    15f8:	32495f43 	subcc	r5, r9, #268	; 0x10c
    15fc:	4b4c4353 	blmi	1312350 <startup-0x1ecedcb0>
    1600:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1604:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
    1608:	4d5f4343 	ldclmi	3, cr4, [pc, #-268]	; 1504 <startup-0x1fffeafc>
    160c:	43324f43 	teqmi	r2, #268	; 0x10c
    1610:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1614:	53530067 	cmppl	r3, #103	; 0x67
    1618:	00524743 	subseq	r4, r2, r3, asr #14
    161c:	33424841 	movtcc	r4, #10305	; 0x2841
    1620:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
    1624:	3a430052 	bcc	10c1774 <startup-0x1ef3e88c>
    1628:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
    162c:	612f7372 			; <UNDEFINED> instruction: 0x612f7372
    1630:	726e696d 	rsbvc	r6, lr, #1785856	; 0x1b4000
    1634:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    1638:	706f746b 	rsbvc	r7, pc, fp, ror #8
    163c:	7461642f 	strbtvc	r6, [r1], #-1071	; 0xfffffbd1
    1640:	6f727061 	svcvs	0x00727061
    1644:	746b656a 	strbtvc	r6, [fp], #-1386	; 0xfffffa96
    1648:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    164c:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
    1650:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    1654:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    1658:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
    165c:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    1660:	4d54532f 	ldclmi	3, cr5, [r4, #-188]	; 0xffffff44
    1664:	34463233 	strbcc	r3, [r6], #-563	; 0xfffffdcd
    1668:	535f7878 	cmppl	pc, #120, 16	; 0x780000
    166c:	65506474 	ldrbvs	r6, [r0, #-1140]	; 0xfffffb8c
    1670:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1674:	6972445f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    1678:	2f726576 	svccs	0x00726576
    167c:	2f637273 	svccs	0x00637273
    1680:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    1684:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
    1688:	63725f78 	cmnvs	r2, #120, 30	; 0x1e0
    168c:	00632e63 	rsbeq	r2, r3, r3, ror #28
    1690:	31425041 	cmpcc	r2, r1, asr #32
    1694:	52545352 	subspl	r5, r4, #1207959553	; 0x48000001
    1698:	43435200 	movtmi	r5, #12800	; 0x3200
    169c:	49534c5f 	ldmdbmi	r3, {r0, r1, r2, r3, r4, r6, sl, fp, lr}^
    16a0:	00646d43 	rsbeq	r6, r4, r3, asr #26
    16a4:	41474b43 	cmpmi	r7, r3, asr #22
    16a8:	524e4554 	subpl	r4, lr, #84, 10	; 0x15000000
    16ac:	43444200 	movtmi	r4, #16896	; 0x4200
    16b0:	43520052 	cmpmi	r2, #82	; 0x52
    16b4:	50415f43 	subpl	r5, r1, r3, asr #30
    16b8:	65503142 	ldrbvs	r3, [r0, #-322]	; 0xfffffebe
    16bc:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    16c0:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    16c4:	646d436b 	strbtvs	r4, [sp], #-875	; 0xfffffc95
    16c8:	43435200 	movtmi	r5, #12800	; 0x3200
    16cc:	4354495f 	cmpmi	r4, #1556480	; 0x17c000
    16d0:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    16d4:	55530067 	ldrbpl	r0, [r3, #-103]	; 0xffffff99
    16d8:	53454343 	movtpl	r4, #21315	; 0x5343
    16dc:	43520053 	cmpmi	r2, #83	; 0x53
    16e0:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
    16e4:	6e6f434c 	cdpvs	3, 6, cr4, cr15, cr12, {2}
    16e8:	00676966 	rsbeq	r6, r7, r6, ror #18
    16ec:	5f434352 	svcpl	0x00434352
    16f0:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    16f4:	7954736b 	ldmdbvc	r4, {r0, r1, r3, r5, r6, r8, r9, ip, sp, lr}^
    16f8:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
    16fc:	48410066 	stmdami	r1, {r1, r2, r5, r6}^
    1700:	4e453142 	dvfmism	f3, f5, f2
    1704:	43520052 	cmpmi	r2, #82	; 0x52
    1708:	54525f43 	ldrbpl	r5, [r2], #-3907	; 0xfffff0bd
    170c:	4b4c4343 	blmi	1312420 <startup-0x1ecedbe0>
    1710:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1714:	70006769 	andvc	r6, r0, r9, ror #14
    1718:	6f736c6c 	svcvs	0x00736c6c
    171c:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    1720:	43435200 	movtmi	r5, #12800	; 0x3200
    1724:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
    1728:	72655031 	rsbvc	r5, r5, #49	; 0x31
    172c:	43687069 	cmnmi	r8, #105	; 0x69
    1730:	6b636f6c 	blvs	18dd4e8 <startup-0x1e722b18>
    1734:	6f4d504c 	svcvs	0x004d504c
    1738:	6d436564 	cfstr64vs	mvdx6, [r3, #-400]	; 0xfffffe70
    173c:	43520064 	cmpmi	r2, #100	; 0x64
    1740:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    1744:	65503342 	ldrbvs	r3, [r0, #-834]	; 0xfffffcbe
    1748:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    174c:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    1750:	646d436b 	strbtvs	r4, [sp], #-875	; 0xfffffc95
    1754:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    1758:	4d504f5f 	ldclmi	15, cr4, [r0, #-380]	; 0xfffffe84
    175c:	0065646f 	rsbeq	r6, r5, pc, ror #8
    1760:	5f4d4954 	svcpl	0x004d4954
    1764:	63726f46 	cmnvs	r2, #280	; 0x118
    1768:	434f6465 	movtmi	r6, #62565	; 0xf465
    176c:	6e6f4332 	mcrvs	3, 3, r4, cr15, cr2, {1}
    1770:	00676966 	rsbeq	r6, r7, r6, ror #18
    1774:	5f4d4954 	svcpl	0x004d4954
    1778:	656c6553 	strbvs	r6, [ip, #-1363]!	; 0xfffffaad
    177c:	6e4f7463 	cdpvs	4, 4, cr7, cr15, cr3, {3}
    1780:	6c755065 	ldclvs	0, cr5, [r5], #-404	; 0xfffffe6c
    1784:	6f4d6573 	svcvs	0x004d6573
    1788:	54006564 	strpl	r6, [r0], #-1380	; 0xfffffa9c
    178c:	445f4d49 	ldrbmi	r4, [pc], #-3401	; 1794 <startup-0x1fffe86c>
    1790:	6d43414d 	stfvse	f4, [r3, #-308]	; 0xfffffecc
    1794:	49540064 	ldmdbmi	r4, {r2, r5, r6}^
    1798:	6e495f4d 	cdpvs	15, 4, cr5, cr9, cr13, {2}
    179c:	54747570 	ldrbtpl	r7, [r4], #-1392	; 0xfffffa90
    17a0:	67676972 			; <UNDEFINED> instruction: 0x67676972
    17a4:	6f537265 	svcvs	0x00537265
    17a8:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    17ac:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    17b0:	4752545f 			; <UNDEFINED> instruction: 0x4752545f
    17b4:	756f534f 	strbvc	r5, [pc, #-847]!	; 146d <startup-0x1fffeb93>
    17b8:	00656372 	rsbeq	r6, r5, r2, ror r3
    17bc:	5f4d4954 	svcpl	0x004d4954
    17c0:	63726f46 	cmnvs	r2, #280	; 0x118
    17c4:	434f6465 	movtmi	r6, #62565	; 0xf465
    17c8:	6e6f4334 	mcrvs	3, 3, r4, cr15, cr4, {1}
    17cc:	00676966 	rsbeq	r6, r7, r6, ror #18
    17d0:	5f4d4954 	svcpl	0x004d4954
    17d4:	61656c43 	cmnvs	r5, r3, asr #24
    17d8:	31434f72 	hvccc	13554	; 0x34f2
    17dc:	00666552 	rsbeq	r6, r6, r2, asr r5
    17e0:	5f4d4954 	svcpl	0x004d4954
    17e4:	47414c46 	strbmi	r4, [r1, -r6, asr #24]
    17e8:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    17ec:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    17f0:	706d6f43 	rsbvc	r6, sp, r3, asr #30
    17f4:	31657261 	cmncc	r5, r1, ror #4
    17f8:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    17fc:	3243495f 	subcc	r4, r3, #1556480	; 0x17c000
    1800:	616c6f50 	cmnvs	ip, r0, asr pc
    1804:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    1808:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    180c:	6470555f 	ldrbtvs	r5, [r0], #-1375	; 0xfffffaa1
    1810:	44657461 	strbtmi	r7, [r5], #-1121	; 0xfffffb9f
    1814:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
    1818:	6f43656c 	svcvs	0x0043656c
    181c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1820:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    1824:	6c75505f 	ldclvs	0, cr5, [r5], #-380	; 0xfffffe84
    1828:	74006573 	strvc	r6, [r0], #-1395	; 0xfffffa8d
    182c:	6363706d 	cmnvs	r3, #109	; 0x6d
    1830:	0031726d 	eorseq	r7, r1, sp, ror #4
    1834:	63706d74 	cmnvs	r0, #116, 26	; 0x1d00
    1838:	32726d63 	rsbscc	r6, r2, #6336	; 0x18c0
    183c:	706d7400 	rsbvc	r7, sp, r0, lsl #8
    1840:	00317263 	eorseq	r7, r1, r3, ror #4
    1844:	5f4d4954 	svcpl	0x004d4954
    1848:	656c6553 	strbvs	r6, [ip, #-1363]!	; 0xfffffaad
    184c:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
    1850:	54747570 	ldrbtpl	r7, [r4], #-1392	; 0xfffffa90
    1854:	67676972 			; <UNDEFINED> instruction: 0x67676972
    1858:	54007265 	strpl	r7, [r0], #-613	; 0xfffffd9b
    185c:	495f4d49 	ldmdbmi	pc, {r0, r3, r6, r8, sl, fp, lr}^	; <UNPREDICTABLE>
    1860:	6c694643 	stclvs	6, cr4, [r9], #-268	; 0xfffffef4
    1864:	00726574 	rsbseq	r6, r2, r4, ror r5
    1868:	5f4d4954 	svcpl	0x004d4954
    186c:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xfffff1b7
    1870:	6c616e72 	stclvs	14, cr6, [r1], #-456	; 0xfffffe38
    1874:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    1878:	6e6f436b 	cdpvs	3, 6, cr4, cr15, cr11, {3}
    187c:	00676966 	rsbeq	r6, r7, r6, ror #18
    1880:	5f4d4954 	svcpl	0x004d4954
    1884:	5032434f 	eorspl	r4, r2, pc, asr #6
    1888:	72616c6f 	rsbvc	r6, r1, #28416	; 0x6f00
    188c:	43797469 	cmnmi	r9, #1761607680	; 0x69000000
    1890:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1894:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    1898:	52415f4d 	subpl	r5, r1, #308	; 0x134
    189c:	65725052 	ldrbvs	r5, [r2, #-82]!	; 0xffffffae
    18a0:	64616f6c 	strbtvs	r6, [r1], #-3948	; 0xfffff094
    18a4:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    18a8:	54006769 	strpl	r6, [r0], #-1897	; 0xfffff897
    18ac:	495f4d49 	ldmdbmi	pc, {r0, r3, r6, r8, sl, fp, lr}^	; <UNPREDICTABLE>
    18b0:	6c655343 	stclvs	3, cr5, [r5], #-268	; 0xfffffef4
    18b4:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    18b8:	74006e6f 	strvc	r6, [r0], #-3695	; 0xfffff191
    18bc:	0031706d 	eorseq	r7, r1, sp, rrx
    18c0:	5f4d4954 	svcpl	0x004d4954
    18c4:	6f636e45 	svcvs	0x00636e45
    18c8:	49726564 	ldmdbmi	r2!, {r2, r5, r6, r8, sl, sp, lr}^
    18cc:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    18d0:	65636166 	strbvs	r6, [r3, #-358]!	; 0xfffffe9a
    18d4:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    18d8:	54006769 	strpl	r6, [r0], #-1897	; 0xfffff897
    18dc:	4f5f4d49 	svcmi	0x005f4d49
    18e0:	72503243 	subsvc	r3, r0, #805306372	; 0x30000004
    18e4:	616f6c65 	cmnvs	pc, r5, ror #24
    18e8:	6e6f4364 	cdpvs	3, 6, cr4, cr15, cr4, {3}
    18ec:	00676966 	rsbeq	r6, r7, r6, ror #18
    18f0:	5f4d4954 	svcpl	0x004d4954
    18f4:	656e6547 	strbvs	r6, [lr, #-1351]!	; 0xfffffab9
    18f8:	65746172 	ldrbvs	r6, [r4, #-370]!	; 0xfffffe8e
    18fc:	6e657645 	cdpvs	6, 6, cr7, cr5, cr5, {2}
    1900:	49540074 	ldmdbmi	r4, {r2, r4, r5, r6}^
    1904:	43495f4d 	movtmi	r5, #40781	; 0x9f4d
    1908:	6c6f5031 	stclvs	0, cr5, [pc], #-196	; 184c <startup-0x1fffe7b4>
    190c:	74697261 	strbtvc	r7, [r9], #-609	; 0xfffffd9f
    1910:	49540079 	ldmdbmi	r4, {r0, r3, r4, r5, r6}^
    1914:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
    1918:	74736146 	ldrbtvc	r6, [r3], #-326	; 0xfffffeba
    191c:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    1920:	6168435f 	cmnvs	r8, pc, asr r3
    1924:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
    1928:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    192c:	756f435f 	strbvc	r4, [pc, #-863]!	; 15d5 <startup-0x1fffea2b>
    1930:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    1934:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    1938:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    193c:	54006769 	strpl	r6, [r0], #-1897	; 0xfffff897
    1940:	465f4d49 	ldrbmi	r4, [pc], -r9, asr #26
    1944:	6563726f 	strbvs	r7, [r3, #-623]!	; 0xfffffd91
    1948:	74634164 	strbtvc	r4, [r3], #-356	; 0xfffffe9c
    194c:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    1950:	5f4d4954 	svcpl	0x004d4954
    1954:	43784343 	cmnmi	r8, #201326593	; 0xc000001
    1958:	5400646d 	strpl	r6, [r0], #-1133	; 0xfffffb93
    195c:	4f5f4d49 	svcmi	0x005f4d49
    1960:	65725043 	ldrbvs	r5, [r2, #-67]!	; 0xffffffbd
    1964:	64616f6c 	strbtvs	r6, [r1], #-3948	; 0xfffff094
    1968:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    196c:	0054495f 	subseq	r4, r4, pc, asr r9
    1970:	5f4d4954 	svcpl	0x004d4954
    1974:	43525445 	cmpmi	r2, #1157627904	; 0x45000000
    1978:	6b636f6c 	blvs	18dd730 <startup-0x1e7228d0>
    197c:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    1980:	6e6f4331 	mcrvs	3, 3, r4, cr15, cr1, {1}
    1984:	00676966 	rsbeq	r6, r7, r6, ror #18
    1988:	5f4d4954 	svcpl	0x004d4954
    198c:	7074754f 	rsbsvc	r7, r4, pc, asr #10
    1990:	534e7475 	movtpl	r7, #58485	; 0xe475
    1994:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
    1998:	706d7400 	rsbvc	r7, sp, r0, lsl #8
    199c:	726d6363 	rsbvc	r6, sp, #-1946157055	; 0x8c000001
    19a0:	49540078 	ldmdbmi	r4, {r3, r4, r5, r6}^
    19a4:	4b435f4d 	blmi	10d96e0 <startup-0x1ef26920>
    19a8:	49540044 	ldmdbmi	r4, {r2, r6}^
    19ac:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    19b0:	74754174 	ldrbtvc	r4, [r5], #-372	; 0xfffffe8c
    19b4:	6c65726f 	sfmvs	f7, 2, [r5], #-444	; 0xfffffe44
    19b8:	0064616f 	rsbeq	r6, r4, pc, ror #2
    19bc:	5f4d4954 	svcpl	0x004d4954
    19c0:	74534349 	ldrbvc	r4, [r3], #-841	; 0xfffffcb7
    19c4:	74637572 	strbtvc	r7, [r3], #-1394	; 0xfffffa8e
    19c8:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    19cc:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    19d0:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    19d4:	74706143 	ldrbtvc	r6, [r0], #-323	; 0xfffffebd
    19d8:	32657275 	rsbcc	r7, r5, #1342177287	; 0x50000007
    19dc:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    19e0:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    19e4:	74706143 	ldrbtvc	r6, [r0], #-323	; 0xfffffebd
    19e8:	33657275 	cmncc	r5, #1342177287	; 0x50000007
    19ec:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    19f0:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    19f4:	74706143 	ldrbtvc	r6, [r0], #-323	; 0xfffffebd
    19f8:	34657275 	strbtcc	r7, [r5], #-629	; 0xfffffd8b
    19fc:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    1a00:	33434f5f 	movtcc	r4, #16223	; 0x3f5f
    1a04:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    1a08:	6f636900 	svcvs	0x00636900
    1a0c:	736f7070 	cmnvc	pc, #112	; 0x70
    1a10:	70657469 	rsbvc	r7, r5, r9, ror #8
    1a14:	72616c6f 	rsbvc	r6, r1, #28416	; 0x6f00
    1a18:	00797469 	rsbseq	r7, r9, r9, ror #8
    1a1c:	5f4d4954 	svcpl	0x004d4954
    1a20:	61647055 	qdsubvs	r7, r5, r4
    1a24:	6f536574 	svcvs	0x00536574
    1a28:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    1a2c:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    1a30:	7843435f 	stmdavc	r3, {r0, r1, r2, r3, r4, r6, r8, r9, lr}^
    1a34:	4954004e 	ldmdbmi	r4, {r1, r2, r3, r6}^
    1a38:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    1a3c:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
    1a40:	4d444343 	stclmi	3, cr4, [r4, #-268]	; 0xfffffef4
    1a44:	49540041 	ldmdbmi	r4, {r0, r6}^
    1a48:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
    1a4c:	65725031 	ldrbvs	r5, [r2, #-49]!	; 0xffffffcf
    1a50:	64616f6c 	strbtvs	r6, [r1], #-3948	; 0xfffff094
    1a54:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1a58:	54006769 	strpl	r6, [r0], #-1897	; 0xfffff897
    1a5c:	445f4d49 	ldrbmi	r4, [pc], #-3401	; 1a64 <startup-0x1fffe59c>
    1a60:	7542414d 	strbvc	r4, [r2, #-333]	; 0xfffffeb3
    1a64:	4c747372 	ldclmi	3, cr7, [r4], #-456	; 0xfffffe38
    1a68:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xfffff19b
    1a6c:	49540068 	ldmdbmi	r4, {r3, r5, r6}^
    1a70:	6c435f4d 	mcrrvs	15, 4, r5, r3, cr13
    1a74:	46726165 	ldrbtmi	r6, [r2], -r5, ror #2
    1a78:	0067616c 	rsbeq	r6, r7, ip, ror #2
    1a7c:	5f4d4954 	svcpl	0x004d4954
    1a80:	43746553 	cmnmi	r4, #348127232	; 0x14c00000
    1a84:	61706d6f 	cmnvs	r0, pc, ror #26
    1a88:	00326572 	eorseq	r6, r2, r2, ror r5
    1a8c:	5f4d4954 	svcpl	0x004d4954
    1a90:	43746553 	cmnmi	r4, #348127232	; 0x14c00000
    1a94:	61706d6f 	cmnvs	r0, pc, ror #26
    1a98:	00336572 	eorseq	r6, r3, r2, ror r5
    1a9c:	5f4d4954 	svcpl	0x004d4954
    1aa0:	656c6553 	strbvs	r6, [ip, #-1363]!	; 0xfffffaad
    1aa4:	4f437463 	svcmi	0x00437463
    1aa8:	6d74004d 	ldclvs	0, cr0, [r4, #-308]!	; 0xfffffecc
    1aac:	65636370 	strbvs	r6, [r3, #-880]!	; 0xfffffc90
    1ab0:	49540072 	ldmdbmi	r4, {r1, r4, r5, r6}^
    1ab4:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
    1ab8:	6f504e32 	svcvs	0x00504e32
    1abc:	6972616c 	ldmdbvs	r2!, {r2, r3, r5, r6, r8, sp, lr}^
    1ac0:	6f437974 	svcvs	0x00437974
    1ac4:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1ac8:	34495400 	strbcc	r5, [r9], #-1024	; 0xfffffc00
    1acc:	6e6f435f 	mcrvs	3, 3, r4, cr15, cr15, {2}
    1ad0:	00676966 	rsbeq	r6, r7, r6, ror #18
    1ad4:	5f4d4954 	svcpl	0x004d4954
    1ad8:	6f50434f 	svcvs	0x0050434f
    1adc:	6972616c 	ldmdbvs	r2!, {r2, r3, r5, r6, r8, sp, lr}^
    1ae0:	54007974 	strpl	r7, [r0], #-2420	; 0xfffff68c
    1ae4:	475f4d49 	ldrbmi	r4, [pc, -r9, asr #26]
    1ae8:	72507465 	subsvc	r7, r0, #1694498816	; 0x65000000
    1aec:	61637365 	cmnvs	r3, r5, ror #6
    1af0:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1af4:	5f4d4954 	svcpl	0x004d4954
    1af8:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    1afc:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
    1b00:	54007265 	strpl	r7, [r0], #-613	; 0xfffffd9b
    1b04:	545f4d49 	ldrbpl	r4, [pc], #-3401	; 1b0c <startup-0x1fffe4f4>
    1b08:	42656d69 	rsbmi	r6, r5, #6720	; 0x1a40
    1b0c:	53657361 	cmnpl	r5, #-2080374783	; 0x84000001
    1b10:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    1b14:	696e4974 	stmdbvs	lr!, {r2, r4, r5, r6, r8, fp, lr}^
    1b18:	49540074 	ldmdbmi	r4, {r2, r4, r5, r6}^
    1b1c:	65475f4d 	strbvs	r5, [r7, #-3917]	; 0xfffff0b3
    1b20:	70614374 	rsbvc	r4, r1, r4, ror r3
    1b24:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0xfffffa8c
    1b28:	49540031 	ldmdbmi	r4, {r0, r4, r5}^
    1b2c:	614d5f4d 	cmpvs	sp, sp, asr #30
    1b30:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
    1b34:	76616c53 			; <UNDEFINED> instruction: 0x76616c53
    1b38:	646f4d65 	strbtvs	r4, [pc], #-3429	; 1b40 <startup-0x1fffe4c0>
    1b3c:	49540065 	ldmdbmi	r4, {r0, r2, r5, r6}^
    1b40:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    1b44:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
    1b48:	76616c53 			; <UNDEFINED> instruction: 0x76616c53
    1b4c:	646f4d65 	strbtvs	r4, [pc], #-3429	; 1b54 <startup-0x1fffe4ac>
    1b50:	49540065 	ldmdbmi	r4, {r0, r2, r5, r6}^
    1b54:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    1b58:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
    1b5c:	7473614d 	ldrbtvc	r6, [r3], #-333	; 0xfffffeb3
    1b60:	6c537265 	lfmvs	f7, 2, [r3], {101}	; 0x65
    1b64:	4d657661 	stclmi	6, cr7, [r5, #-388]!	; 0xfffffe7c
    1b68:	0065646f 	rsbeq	r6, r5, pc, ror #8
    1b6c:	5f4d4954 	svcpl	0x004d4954
    1b70:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
    1b74:	5367616c 	cmnpl	r7, #108, 2
    1b78:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
    1b7c:	49540073 	ldmdbmi	r4, {r0, r1, r4, r5, r6}^
    1b80:	44425f4d 	strbmi	r5, [r2], #-3917	; 0xfffff0b3
    1b84:	6e495254 	mcrvs	2, 2, r5, cr9, cr4, {2}
    1b88:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
    1b8c:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
    1b90:	49540066 	ldmdbmi	r4, {r1, r2, r5, r6}^
    1b94:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
    1b98:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    1b9c:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0xfffffbad
    1ba0:	54007463 	strpl	r7, [r0], #-1123	; 0xfffffb9d
    1ba4:	4f5f4d49 	svcmi	0x005f4d49
    1ba8:	53525353 	cmppl	r2, #1275068417	; 0x4c000001
    1bac:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
    1bb0:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    1bb4:	49540078 	ldmdbmi	r4, {r3, r4, r5, r6}^
    1bb8:	6e455f4d 	cdpvs	15, 4, cr5, cr5, cr13, {2}
    1bbc:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
    1bc0:	646f4d72 	strbtvs	r4, [pc], #-3442	; 1bc8 <startup-0x1fffe438>
    1bc4:	49540065 	ldmdbmi	r4, {r0, r2, r5, r6}^
    1bc8:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
    1bcc:	6c6f5034 	stclvs	0, cr5, [pc], #-208	; 1b04 <startup-0x1fffe4fc>
    1bd0:	74697261 	strbtvc	r7, [r9], #-609	; 0xfffffd9f
    1bd4:	6e6f4379 	mcrvs	3, 3, r4, cr15, cr9, {3}
    1bd8:	00676966 	rsbeq	r6, r7, r6, ror #18
    1bdc:	5f4d4954 	svcpl	0x004d4954
    1be0:	6f747541 	svcvs	0x00747541
    1be4:	6974616d 	ldmdbvs	r4!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    1be8:	74754f63 	ldrbtvc	r4, [r5], #-3939	; 0xfffff09d
    1bec:	00747570 	rsbseq	r7, r4, r0, ror r5
    1bf0:	5f4d4954 	svcpl	0x004d4954
    1bf4:	656c6553 	strbvs	r6, [ip, #-1363]!	; 0xfffffaad
    1bf8:	754f7463 	strbvc	r7, [pc, #-1123]	; 179d <startup-0x1fffe863>
    1bfc:	74757074 	ldrbtvc	r7, [r5], #-116	; 0xffffff8c
    1c00:	67697254 			; <UNDEFINED> instruction: 0x67697254
    1c04:	00726567 	rsbseq	r6, r2, r7, ror #10
    1c08:	5f4d4954 	svcpl	0x004d4954
    1c0c:	49746553 	ldmdbmi	r4!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    1c10:	72503143 	subsvc	r3, r0, #-1073741808	; 0xc0000010
    1c14:	61637365 	cmnvs	r3, r5, ror #6
    1c18:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1c1c:	5f4d4954 	svcpl	0x004d4954
    1c20:	494d5750 	stmdbmi	sp, {r4, r6, r8, r9, sl, ip, lr}^
    1c24:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1c28:	54006769 	strpl	r6, [r0], #-1897	; 0xfffff897
    1c2c:	435f3349 	cmpmi	pc, #603979777	; 0x24000001
    1c30:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1c34:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    1c38:	4d445f4d 	stclmi	15, cr5, [r4, #-308]	; 0xfffffecc
    1c3c:	756f5341 	strbvc	r5, [pc, #-833]!	; 1903 <startup-0x1fffe6fd>
    1c40:	00656372 	rsbeq	r6, r5, r2, ror r3
    1c44:	5f4d4954 	svcpl	0x004d4954
    1c48:	7453434f 	ldrbvc	r4, [r3], #-847	; 0xfffffcb1
    1c4c:	74637572 	strbtvc	r7, [r3], #-1394	; 0xfffffa8e
    1c50:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    1c54:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    1c58:	4353505f 	cmpmi	r3, #95	; 0x5f
    1c5c:	6f6c6552 	svcvs	0x006c6552
    1c60:	6f4d6461 	svcvs	0x004d6461
    1c64:	54006564 	strpl	r6, [r0], #-1380	; 0xfffffa9c
    1c68:	4f5f4d49 	svcmi	0x005f4d49
    1c6c:	656c4343 	strbvs	r4, [ip, #-835]!	; 0xfffffcbd
    1c70:	74007261 	strvc	r7, [r0], #-609	; 0xfffffd9f
    1c74:	6d73706d 	ldclvs	0, cr7, [r3, #-436]!	; 0xfffffe4c
    1c78:	54007263 	strpl	r7, [r0], #-611	; 0xfffffd9d
    1c7c:	455f4d49 	ldrbmi	r4, [pc, #-3401]	; f3b <startup-0x1ffff0c5>
    1c80:	52547478 	subspl	r7, r4, #120, 8	; 0x78000000
    1c84:	6c6f5047 	stclvs	0, cr5, [pc], #-284	; 1b70 <startup-0x1fffe490>
    1c88:	74697261 	strbtvc	r7, [r9], #-609	; 0xfffffd9f
    1c8c:	49540079 	ldmdbmi	r4, {r0, r3, r4, r5, r6}^
    1c90:	44425f4d 	strbmi	r5, [r2], #-3917	; 0xfffff0b3
    1c94:	74535254 	ldrbvc	r5, [r3], #-596	; 0xfffffdac
    1c98:	74637572 	strbtvc	r7, [r3], #-1394	; 0xfffffa8e
    1c9c:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    1ca0:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    1ca4:	4943495f 	stmdbmi	r3, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    1ca8:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    1cac:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    1cb0:	6d740074 	ldclvs	0, cr0, [r4, #-464]!	; 0xfffffe30
    1cb4:	32726370 	rsbscc	r6, r2, #112, 6	; 0xc0000001
    1cb8:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    1cbc:	7478455f 	ldrbtvc	r4, [r8], #-1375	; 0xfffffaa1
    1cc0:	50475254 	subpl	r5, r7, r4, asr r2
    1cc4:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
    1cc8:	72656c61 	rsbvc	r6, r5, #24832	; 0x6100
    1ccc:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    1cd0:	6572425f 	ldrbvs	r4, [r2, #-607]!	; 0xfffffda1
    1cd4:	54006b61 	strpl	r6, [r0], #-2913	; 0xfffff49f
    1cd8:	445f4d49 	ldrbmi	r4, [pc], #-3401	; 1ce0 <startup-0x1fffe320>
    1cdc:	54646165 	strbtpl	r6, [r4], #-357	; 0xfffffe9b
    1ce0:	00656d69 	rsbeq	r6, r5, r9, ror #26
    1ce4:	5f4d4954 	svcpl	0x004d4954
    1ce8:	5031434f 	eorspl	r4, r1, pc, asr #6
    1cec:	72616c6f 	rsbvc	r6, r1, #28416	; 0x6f00
    1cf0:	43797469 	cmnmi	r9, #1761607680	; 0x69000000
    1cf4:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1cf8:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    1cfc:	6f465f4d 	svcvs	0x00465f4d
    1d00:	64656372 	strbtvs	r6, [r5], #-882	; 0xfffffc8e
    1d04:	4331434f 	teqmi	r1, #1006632961	; 0x3c000001
    1d08:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1d0c:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    1d10:	6f465f4d 	svcvs	0x00465f4d
    1d14:	64656372 	strbtvs	r6, [r5], #-882	; 0xfffffc8e
    1d18:	4333434f 	teqmi	r3, #1006632961	; 0x3c000001
    1d1c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1d20:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    1d24:	43495f4d 	movtmi	r5, #40781	; 0x9f4d
    1d28:	73657250 	cmnvc	r5, #80, 4
    1d2c:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
    1d30:	49540072 	ldmdbmi	r4, {r1, r4, r5, r6}^
    1d34:	43435f4d 	movtmi	r5, #16205	; 0x3f4d
    1d38:	6d434e78 	stclvs	14, cr4, [r3, #-480]	; 0xfffffe20
    1d3c:	49540064 	ldmdbmi	r4, {r2, r5, r6}^
    1d40:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
    1d44:	6c64494e 			; <UNDEFINED> instruction: 0x6c64494e
    1d48:	61745365 	cmnvs	r4, r5, ror #6
    1d4c:	54006574 	strpl	r6, [r0], #-1396	; 0xfffffa8c
    1d50:	445f4d49 	ldrbmi	r4, [pc], #-3401	; 1d58 <startup-0x1fffe2a8>
    1d54:	6142414d 	cmpvs	r2, sp, asr #2
    1d58:	69006573 	stmdbvs	r0, {r0, r1, r4, r5, r6, r8, sl, sp, lr}
    1d5c:	70706f63 	rsbsvc	r6, r0, r3, ror #30
    1d60:	7469736f 	strbtvc	r7, [r9], #-879	; 0xfffffc91
    1d64:	6c657365 	stclvs	3, cr7, [r5], #-404	; 0xfffffe6c
    1d68:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    1d6c:	54006e6f 	strpl	r6, [r0], #-3695	; 0xfffff191
    1d70:	525f4d49 	subspl	r4, pc, #4672	; 0x1240
    1d74:	70616d65 	rsbvc	r6, r1, r5, ror #26
    1d78:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    1d7c:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    1d80:	74535449 	ldrbvc	r5, [r3], #-1097	; 0xfffffbb7
    1d84:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1d88:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    1d8c:	6d69545f 	cfstrdvs	mvd5, [r9, #-380]!	; 0xfffffe84
    1d90:	73614265 	cmnvc	r1, #1342177286	; 0x50000006
    1d94:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
    1d98:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
    1d9c:	00746375 	rsbseq	r6, r4, r5, ror r3
    1da0:	5f4d4954 	svcpl	0x004d4954
    1da4:	43414d44 	movtmi	r4, #7492	; 0x1d44
    1da8:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1dac:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    1db0:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    1db4:	6f6c4374 	svcvs	0x006c4374
    1db8:	69446b63 	stmdbvs	r4, {r0, r1, r5, r6, r8, r9, fp, sp, lr}^
    1dbc:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
    1dc0:	54006e6f 	strpl	r6, [r0], #-3695	; 0xfffff191
    1dc4:	435f4d49 	cmpmi	pc, #4672	; 0x1240
    1dc8:	54007843 	strpl	r7, [r0], #-2115	; 0xfffff7bd
    1dcc:	4f5f4d49 	svcmi	0x005f4d49
    1dd0:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0xfffffb8b
    1dd4:	61745374 	cmnvs	r4, r4, ror r3
    1dd8:	54006574 	strpl	r6, [r0], #-1396	; 0xfffffa8c
    1ddc:	455f4d49 	ldrbmi	r4, [pc, #-3401]	; 109b <startup-0x1fffef65>
    1de0:	746e6576 	strbtvc	r6, [lr], #-1398	; 0xfffffa8a
    1de4:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    1de8:	54006563 	strpl	r6, [r0], #-1379	; 0xfffffa9d
    1dec:	495f4d49 	ldmdbmi	pc, {r0, r3, r6, r8, sl, fp, lr}^	; <UNPREDICTABLE>
    1df0:	6c6f5043 	stclvs	0, cr5, [pc], #-268	; 1cec <startup-0x1fffe314>
    1df4:	74697261 	strbtvc	r7, [r9], #-609	; 0xfffffd9f
    1df8:	49540079 	ldmdbmi	r4, {r0, r3, r4, r5, r6}^
    1dfc:	49545f4d 	ldmdbmi	r4, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    1e00:	74784578 	ldrbtvc	r4, [r8], #-1400	; 0xfffffa88
    1e04:	616e7265 	cmnvs	lr, r5, ror #4
    1e08:	6f6c436c 	svcvs	0x006c436c
    1e0c:	6f436b63 	svcvs	0x00436b63
    1e10:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1e14:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    1e18:	434f4c5f 	movtmi	r4, #64607	; 0xfc5f
    1e1c:	76654c4b 	strbtvc	r4, [r5], -fp, asr #24
    1e20:	54006c65 	strpl	r6, [r0], #-3173	; 0xfffff39b
    1e24:	495f4d49 	ldmdbmi	pc, {r0, r3, r6, r8, sl, fp, lr}^	; <UNPREDICTABLE>
    1e28:	6e6f4354 	mcrvs	3, 3, r4, cr15, cr4, {2}
    1e2c:	00676966 	rsbeq	r6, r7, r6, ror #18
    1e30:	5f4d4954 	svcpl	0x004d4954
    1e34:	52544442 	subspl	r4, r4, #1107296256	; 0x42000000
    1e38:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1e3c:	54006769 	strpl	r6, [r0], #-1897	; 0xfffff897
    1e40:	535f4d49 	cmppl	pc, #4672	; 0x1240
    1e44:	43497465 	movtmi	r7, #37989	; 0x9465
    1e48:	65725032 	ldrbvs	r5, [r2, #-50]!	; 0xffffffce
    1e4c:	6c616373 	stclvs	3, cr6, [r1], #-460	; 0xfffffe34
    1e50:	54007265 	strpl	r7, [r0], #-613	; 0xfffffd9b
    1e54:	505f4d49 	subspl	r4, pc, r9, asr #26
    1e58:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
    1e5c:	72656c61 	rsbvc	r6, r5, #24832	; 0x6100
    1e60:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1e64:	54006769 	strpl	r6, [r0], #-1897	; 0xfffff897
    1e68:	495f4d49 	ldmdbmi	pc, {r0, r3, r6, r8, sl, fp, lr}^	; <UNPREDICTABLE>
    1e6c:	45785254 	ldrbmi	r5, [r8, #-596]!	; 0xfffffdac
    1e70:	72657478 	rsbvc	r7, r5, #120, 8	; 0x78000000
    1e74:	436c616e 	cmnmi	ip, #-2147483621	; 0x8000001b
    1e78:	6b636f6c 	blvs	18ddc30 <startup-0x1e7223d0>
    1e7c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1e80:	54006769 	strpl	r6, [r0], #-1897	; 0xfffff897
    1e84:	4f5f4d49 	svcmi	0x005f4d49
    1e88:	504e3343 	subpl	r3, lr, r3, asr #6
    1e8c:	72616c6f 	rsbvc	r6, r1, #28416	; 0x6f00
    1e90:	43797469 	cmnmi	r9, #1761607680	; 0x69000000
    1e94:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1e98:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    1e9c:	534f5f4d 	movtpl	r5, #65357	; 0xff4d
    1ea0:	74534953 	ldrbvc	r4, [r3], #-2387	; 0xfffff6ad
    1ea4:	00657461 	rsbeq	r7, r5, r1, ror #8
    1ea8:	5f4d4954 	svcpl	0x004d4954
    1eac:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    1eb0:	65736142 	ldrbvs	r6, [r3, #-322]!	; 0xfffffebe
    1eb4:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    1eb8:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    1ebc:	7849545f 	stmdavc	r9, {r0, r1, r2, r3, r4, r6, sl, ip, lr}^
    1ec0:	65747845 	ldrbvs	r7, [r4, #-2117]!	; 0xfffff7bb
    1ec4:	6c616e72 	stclvs	14, cr6, [r1], #-456	; 0xfffffe38
    1ec8:	534b4c43 	movtpl	r4, #48195	; 0xbc43
    1ecc:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    1ed0:	49540065 	ldmdbmi	r4, {r0, r2, r5, r6}^
    1ed4:	44425f4d 	strbmi	r5, [r2], #-3917	; 0xfffff0b3
    1ed8:	6e495254 	mcrvs	2, 2, r5, cr9, cr4, {2}
    1edc:	74537469 	ldrbvc	r7, [r3], #-1129	; 0xfffffb97
    1ee0:	74637572 	strbtvc	r7, [r3], #-1394	; 0xfffffa8e
    1ee4:	32495400 	subcc	r5, r9, #0, 8
    1ee8:	6e6f435f 	mcrvs	3, 3, r4, cr15, cr15, {2}
    1eec:	00676966 	rsbeq	r6, r7, r6, ror #18
    1ef0:	5f4d4954 	svcpl	0x004d4954
    1ef4:	4632434f 	ldrtmi	r4, [r2], -pc, asr #6
    1ef8:	43747361 	cmnmi	r4, #-2080374783	; 0x84000001
    1efc:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1f00:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    1f04:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
    1f08:	73614634 	cmnvc	r1, #52, 12	; 0x3400000
    1f0c:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
    1f10:	00676966 	rsbeq	r6, r7, r6, ror #18
    1f14:	5f4d4954 	svcpl	0x004d4954
    1f18:	504e434f 	subpl	r4, lr, pc, asr #6
    1f1c:	72616c6f 	rsbvc	r6, r1, #28416	; 0x6f00
    1f20:	00797469 	rsbseq	r7, r9, r9, ror #8
    1f24:	5f4d4954 	svcpl	0x004d4954
    1f28:	43525445 	cmpmi	r2, #1157627904	; 0x45000000
    1f2c:	6b636f6c 	blvs	18ddce4 <startup-0x1e72231c>
    1f30:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    1f34:	6e6f4332 	mcrvs	3, 3, r4, cr15, cr2, {1}
    1f38:	00676966 	rsbeq	r6, r7, r6, ror #18
    1f3c:	5f314954 	svcpl	0x00314954
    1f40:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1f44:	54006769 	strpl	r6, [r0], #-1897	; 0xfffff897
    1f48:	435f4d49 	cmpmi	pc, #4672	; 0x1240
    1f4c:	5400646d 	strpl	r6, [r0], #-1133	; 0xfffffb93
    1f50:	535f4d49 	cmppl	pc, #4672	; 0x1240
    1f54:	43497465 	movtmi	r7, #37989	; 0x9465
    1f58:	65725033 	ldrbvs	r5, [r2, #-51]!	; 0xffffffcd
    1f5c:	6c616373 	stclvs	3, cr6, [r1], #-460	; 0xfffffe34
    1f60:	54007265 	strpl	r7, [r0], #-613	; 0xfffffd9b
    1f64:	4f5f4d49 	svcmi	0x005f4d49
    1f68:	6e493243 	cdpvs	2, 4, cr3, cr9, cr3, {2}
    1f6c:	54007469 	strpl	r7, [r0], #-1129	; 0xfffffb97
    1f70:	435f4d49 	cmpmi	pc, #4672	; 0x1240
    1f74:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    1f78:	65505449 	ldrbvs	r5, [r0, #-1097]	; 0xfffffbb7
    1f7c:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
    1f80:	74694267 	strbtvc	r4, [r9], #-615	; 0xfffffd99
    1f84:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    1f88:	4943495f 	stmdbmi	r3, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    1f8c:	5474696e 	ldrbtpl	r6, [r4], #-2414	; 0xfffff692
    1f90:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
    1f94:	54006665 	strpl	r6, [r0], #-1637	; 0xfffff99b
    1f98:	4f5f4d49 	svcmi	0x005f4d49
    1f9c:	6e493443 	cdpvs	4, 4, cr3, cr9, cr3, {2}
    1fa0:	54007469 	strpl	r7, [r0], #-1129	; 0xfffffb97
    1fa4:	495f4d49 	ldmdbmi	pc, {r0, r3, r6, r8, sl, fp, lr}^	; <UNPREDICTABLE>
    1fa8:	696e4943 	stmdbvs	lr!, {r0, r1, r6, r8, fp, lr}^
    1fac:	49540074 	ldmdbmi	r4, {r2, r4, r5, r6}^
    1fb0:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    1fb4:	6d6f4374 	stclvs	3, cr4, [pc, #-464]!	; 1dec <startup-0x1fffe214>
    1fb8:	65726170 	ldrbvs	r6, [r2, #-368]!	; 0xfffffe90
    1fbc:	49540034 	ldmdbmi	r4, {r2, r4, r5}^
    1fc0:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    1fc4:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
    1fc8:	4d78434f 	ldclmi	3, cr4, [r8, #-316]!	; 0xfffffec4
    1fcc:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    1fd0:	6470555f 	ldrbtvs	r5, [r0], #-1375	; 0xfffffaa1
    1fd4:	52657461 	rsbpl	r7, r5, #1627389952	; 0x61000000
    1fd8:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
    1fdc:	6f437473 	svcvs	0x00437473
    1fe0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1fe4:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    1fe8:	34434f5f 	strbcc	r4, [r3], #-3935	; 0xfffff0a1
    1fec:	6c657250 	sfmvs	f7, 2, [r5], #-320	; 0xfffffec0
    1ff0:	4364616f 	cmnmi	r4, #-1073741797	; 0xc000001b
    1ff4:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1ff8:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    1ffc:	6c435f4d 	mcrrvs	15, 4, r5, r3, cr13
    2000:	4f726165 	svcmi	0x00726165
    2004:	65523343 	ldrbvs	r3, [r2, #-835]	; 0xfffffcbd
    2008:	49540066 	ldmdbmi	r4, {r1, r2, r5, r6}^
    200c:	6c535f4d 	mrrcvs	15, 4, r5, r3, cr13
    2010:	4d657661 	stclmi	6, cr7, [r5, #-388]!	; 0xfffffe7c
    2014:	0065646f 	rsbeq	r6, r5, pc, ror #8
    2018:	5f4d4954 	svcpl	0x004d4954
    201c:	6f4d434f 	svcvs	0x004d434f
    2020:	54006564 	strpl	r6, [r0], #-1380	; 0xfffffa9c
    2024:	435f4d49 	cmpmi	pc, #4672	; 0x1240
    2028:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    202c:	5234434f 	eorspl	r4, r4, #1006632961	; 0x3c000001
    2030:	54006665 	strpl	r6, [r0], #-1637	; 0xfffff99b
    2034:	425f4d49 	subsmi	r4, pc, #4672	; 0x1240
    2038:	6b616572 	blvs	185b608 <startup-0x1e7a49f8>
    203c:	616c6f50 	cmnvs	ip, r0, asr pc
    2040:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    2044:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2048:	31434f5f 	cmpcc	r3, pc, asr pc
    204c:	6c6f504e 	stclvs	0, cr5, [pc], #-312	; 1f1c <startup-0x1fffe0e4>
    2050:	74697261 	strbtvc	r7, [r9], #-609	; 0xfffffd9f
    2054:	6e6f4379 	mcrvs	3, 3, r4, cr15, cr9, {3}
    2058:	00676966 	rsbeq	r6, r7, r6, ror #18
    205c:	5f4d4954 	svcpl	0x004d4954
    2060:	72504343 	subsvc	r4, r0, #201326593	; 0xc000001
    2064:	616f6c65 	cmnvs	pc, r5, ror #24
    2068:	6e6f4364 	cdpvs	3, 6, cr4, cr15, cr4, {3}
    206c:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 1ea4 <startup-0x1fffe15c>
    2070:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    2074:	49434f5f 	stmdbmi	r3, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, lr}^
    2078:	5474696e 	ldrbtpl	r6, [r4], #-2414	; 0xfffff692
    207c:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
    2080:	54006665 	strpl	r6, [r0], #-1637	; 0xfffff99b
    2084:	535f4d49 	cmppl	pc, #4672	; 0x1240
    2088:	6f437465 	svcvs	0x00437465
    208c:	65746e75 	ldrbvs	r6, [r4, #-3701]!	; 0xfffff18b
    2090:	74690072 	strbtvc	r0, [r9], #-114	; 0xffffff8e
    2094:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
    2098:	5400656c 	strpl	r6, [r0], #-1388	; 0xfffffa94
    209c:	4f5f4d49 	svcmi	0x005f4d49
    20a0:	6f503343 	svcvs	0x00503343
    20a4:	6972616c 	ldmdbvs	r2!, {r2, r3, r5, r6, r8, sp, lr}^
    20a8:	6f437974 	svcvs	0x00437974
    20ac:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    20b0:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    20b4:	6d65525f 	sfmvs	f5, 2, [r5, #-380]!	; 0xfffffe84
    20b8:	6f437061 	svcvs	0x00437061
    20bc:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    20c0:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    20c4:	31434f5f 	cmpcc	r3, pc, asr pc
    20c8:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    20cc:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    20d0:	6c65535f 	stclvs	3, cr5, [r5], #-380	; 0xfffffe84
    20d4:	48746365 	ldmdami	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    20d8:	536c6c61 	cmnpl	ip, #24832	; 0x6100
    20dc:	6f736e65 	svcvs	0x00736e65
    20e0:	49540072 	ldmdbmi	r4, {r1, r4, r5, r6}^
    20e4:	6c435f4d 	mcrrvs	15, 4, r5, r3, cr13
    20e8:	4f726165 	svcmi	0x00726165
    20ec:	65523243 	ldrbvs	r3, [r2, #-579]	; 0xfffffdbd
    20f0:	78450066 	stmdavc	r5, {r1, r2, r5, r6}^
    20f4:	47525474 			; <UNDEFINED> instruction: 0x47525474
    20f8:	746c6946 	strbtvc	r6, [ip], #-2374	; 0xfffff6ba
    20fc:	43007265 	movwmi	r7, #613	; 0x265
    2100:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
    2104:	2f737265 	svccs	0x00737265
    2108:	6e696d61 	cdpvs	13, 6, cr6, cr9, cr1, {3}
    210c:	65442f72 	strbvs	r2, [r4, #-3954]	; 0xfffff08e
    2110:	6f746b73 	svcvs	0x00746b73
    2114:	61642f70 	smcvs	17136	; 0x42f0
    2118:	72706174 	rsbsvc	r6, r0, #116, 2
    211c:	6b656a6f 	blvs	195cae0 <startup-0x1e6a3520>
    2120:	54532f74 	ldrbpl	r2, [r3], #-3956	; 0xfffff08c
    2124:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    2128:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
    212c:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
    2130:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    2134:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
    2138:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
    213c:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    2140:	5f787834 	svcpl	0x00787834
    2144:	50647453 	rsbpl	r7, r4, r3, asr r4
    2148:	70697265 	rsbvc	r7, r9, r5, ror #4
    214c:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
    2150:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    2154:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    2158:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!	; 0xffffff44
    215c:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
    2160:	745f7878 	ldrbvc	r7, [pc], #-2168	; 2168 <startup-0x1fffde98>
    2164:	632e6d69 			; <UNDEFINED> instruction: 0x632e6d69
    2168:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    216c:	49434f5f 	stmdbmi	r3, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, lr}^
    2170:	53656c64 	cmnpl	r5, #100, 24	; 0x6400
    2174:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
    2178:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    217c:	7274435f 	rsbsvc	r4, r4, #2080374785	; 0x7c000001
    2180:	4d57506c 	ldclmi	0, cr5, [r7, #-432]	; 0xfffffe50
    2184:	7074754f 	rsbsvc	r7, r4, pc, asr #10
    2188:	00737475 	rsbseq	r7, r3, r5, ror r4
    218c:	5f4d4954 	svcpl	0x004d4954
    2190:	53504349 	cmppl	r0, #603979777	; 0x24000001
    2194:	49540043 	ldmdbmi	r4, {r0, r1, r6}^
    2198:	54455f4d 	strbpl	r5, [r5], #-3917	; 0xfffff0b3
    219c:	6e6f4352 	mcrvs	3, 3, r4, cr15, cr2, {2}
    21a0:	00676966 	rsbeq	r6, r7, r6, ror #18
    21a4:	5f4d4954 	svcpl	0x004d4954
    21a8:	6e496544 	cdpvs	5, 4, cr6, cr9, cr4, {2}
    21ac:	54007469 	strpl	r7, [r0], #-1129	; 0xfffffb97
    21b0:	4f5f4d49 	svcmi	0x005f4d49
    21b4:	61463343 	cmpvs	r6, r3, asr #6
    21b8:	6f437473 	svcvs	0x00437473
    21bc:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    21c0:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    21c4:	33434f5f 	movtcc	r4, #16223	; 0x3f5f
    21c8:	6c657250 	sfmvs	f7, 2, [r5], #-320	; 0xfffffec0
    21cc:	4364616f 	cmnmi	r4, #-1073741797	; 0xc000001b
    21d0:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    21d4:	49540067 	ldmdbmi	r4, {r0, r1, r2, r5, r6}^
    21d8:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    21dc:	34434974 	strbcc	r4, [r3], #-2420	; 0xfffff68c
    21e0:	73657250 	cmnvc	r5, #80, 4
    21e4:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
    21e8:	49540072 	ldmdbmi	r4, {r1, r4, r5, r6}^
    21ec:	434f5f4d 	movtmi	r5, #65357	; 0xff4d
    21f0:	73614631 	cmnvc	r1, #51380224	; 0x3100000
    21f4:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
    21f8:	00676966 	rsbeq	r6, r7, r6, ror #18
    21fc:	706e6970 	rsbvc	r6, lr, r0, ror r9
    2200:	4200736f 	andmi	r7, r0, #-1140850687	; 0xbc000001
    2204:	535f7469 	cmppl	pc, #1761607680	; 0x69000000
    2208:	47005445 	strmi	r5, [r0, -r5, asr #8]
    220c:	5f4f4950 	svcpl	0x004f4950
    2210:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
    2214:	7074754f 	rsbsvc	r7, r4, pc, asr #10
    2218:	61447475 	hvcvs	18245	; 0x4745
    221c:	43006174 	movwmi	r6, #372	; 0x174
    2220:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
    2224:	2f737265 	svccs	0x00737265
    2228:	6e696d61 	cdpvs	13, 6, cr6, cr9, cr1, {3}
    222c:	65442f72 	strbvs	r2, [r4, #-3954]	; 0xfffff08e
    2230:	6f746b73 	svcvs	0x00746b73
    2234:	61642f70 	smcvs	17136	; 0x42f0
    2238:	72706174 	rsbsvc	r6, r0, #116, 2
    223c:	6b656a6f 	blvs	195cc00 <startup-0x1e6a3400>
    2240:	54532f74 	ldrbpl	r2, [r3], #-3956	; 0xfffff08c
    2244:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    2248:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
    224c:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
    2250:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    2254:	696c5f34 	stmdbvs	ip!, {r2, r4, r5, r8, r9, sl, fp, ip, lr}^
    2258:	54532f62 	ldrbpl	r2, [r3], #-3938	; 0xfffff09e
    225c:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
    2260:	5f787834 	svcpl	0x00787834
    2264:	50647453 	rsbpl	r7, r4, r3, asr r4
    2268:	70697265 	rsbvc	r7, r9, r5, ror #4
    226c:	72445f68 	subvc	r5, r4, #104, 30	; 0x1a0
    2270:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    2274:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    2278:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!	; 0xffffff44
    227c:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
    2280:	675f7878 			; <UNDEFINED> instruction: 0x675f7878
    2284:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
    2288:	50470063 	subpl	r0, r7, r3, rrx
    228c:	415f4f49 	cmpmi	pc, r9, asr #30
    2290:	65740046 	ldrbvs	r0, [r4, #-70]!	; 0xffffffba
    2294:	4700706d 	strmi	r7, [r0, -sp, rrx]
    2298:	5f4f4950 	svcpl	0x004f4950
    229c:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0xfffffbad
    22a0:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
    22a4:	42007469 	andmi	r7, r0, #1761607680	; 0x69000000
    22a8:	61567469 	cmpvs	r6, r9, ror #8
    22ac:	6942006c 	stmdbvs	r2, {r2, r3, r5, r6}^
    22b0:	45525f74 	ldrbmi	r5, [r2, #-3956]	; 0xfffff08c
    22b4:	00544553 	subseq	r4, r4, r3, asr r5
    22b8:	4f495047 	svcmi	0x00495047
    22bc:	6972575f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
    22c0:	69426574 	stmdbvs	r2, {r2, r4, r5, r6, r8, sl, sp, lr}^
    22c4:	50470074 	subpl	r0, r7, r4, ror r0
    22c8:	535f4f49 	cmppl	pc, #292	; 0x124
    22cc:	69427465 	stmdbvs	r2, {r0, r2, r5, r6, sl, ip, sp, lr}^
    22d0:	47007374 	smlsdxmi	r0, r4, r3, r7
    22d4:	5f4f4950 	svcpl	0x004f4950
    22d8:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    22dc:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    22e0:	65525f4f 	ldrbvs	r5, [r2, #-3919]	; 0xfffff0b1
    22e4:	42746573 	rsbsmi	r6, r4, #482344960	; 0x1cc00000
    22e8:	00737469 	rsbseq	r7, r3, r9, ror #8
    22ec:	4f495047 	svcmi	0x00495047
    22f0:	4965445f 	stmdbmi	r5!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    22f4:	0074696e 	rsbseq	r6, r4, lr, ror #18
    22f8:	4f495047 	svcmi	0x00495047
    22fc:	6165525f 	cmnvs	r5, pc, asr r2
    2300:	706e4964 	rsbvc	r4, lr, r4, ror #18
    2304:	61447475 	hvcvs	18245	; 0x4745
    2308:	69426174 	stmdbvs	r2, {r2, r4, r5, r6, r8, sp, lr}^
    230c:	50470074 	subpl	r0, r7, r4, ror r0
    2310:	495f4f49 	ldmdbmi	pc, {r0, r3, r6, r8, r9, sl, fp, lr}^	; <UNPREDICTABLE>
    2314:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    2318:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    231c:	6f500074 	svcvs	0x00500074
    2320:	61567472 	cmpvs	r6, r2, ror r4
    2324:	5047006c 	subpl	r0, r7, ip, rrx
    2328:	505f4f49 	subspl	r4, pc, r9, asr #30
    232c:	6f536e69 	svcvs	0x00536e69
    2330:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    2334:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    2338:	65525f4f 	ldrbvs	r5, [r2, #-3919]	; 0xfffff0b1
    233c:	6e496461 	cdpvs	4, 4, cr6, cr9, cr1, {3}
    2340:	44747570 	ldrbtmi	r7, [r4], #-1392	; 0xfffffa90
    2344:	00617461 	rsbeq	r7, r1, r1, ror #8
    2348:	4f495047 	svcmi	0x00495047
    234c:	6e69505f 	mcrvs	0, 3, r5, cr9, cr15, {2}
    2350:	6b636f4c 	blvs	18de088 <startup-0x1e721f78>
    2354:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2358:	42006769 	andmi	r6, r0, #27525120	; 0x1a40000
    235c:	63417469 	movtvs	r7, #5225	; 0x1469
    2360:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    2364:	72756300 	rsbsvc	r6, r5, #0, 6
    2368:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
    236c:	006e6970 	rsbeq	r6, lr, r0, ror r9
    2370:	4f495047 	svcmi	0x00495047
    2374:	6972575f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
    2378:	47006574 	smlsdxmi	r0, r4, r5, r6
    237c:	5f4f4950 	svcpl	0x004f4950
    2380:	67676f54 			; <UNDEFINED> instruction: 0x67676f54
    2384:	6942656c 	stmdbvs	r2, {r2, r3, r5, r6, r8, sl, sp, lr}^
    2388:	74007374 	strvc	r7, [r0], #-884	; 0xfffffc8c
    238c:	5f706d65 	svcpl	0x00706d65
    2390:	50470032 	subpl	r0, r7, r2, lsr r0
    2394:	505f4f49 	subspl	r4, pc, r9, asr #30
    2398:	46416e69 	strbmi	r6, [r1], -r9, ror #28
    239c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    23a0:	47006769 	strmi	r6, [r0, -r9, ror #14]
    23a4:	5f4f4950 	svcpl	0x004f4950
    23a8:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
    23ac:	7074754f 	rsbsvc	r7, r4, pc, asr #10
    23b0:	61447475 	hvcvs	18245	; 0x4745
    23b4:	69426174 	stmdbvs	r2, {r2, r4, r5, r6, r8, sp, lr}^
    23b8:	59530074 	ldmdbpl	r3, {r2, r4, r5, r6}^
    23bc:	47464353 	smlsldmi	r4, r6, r3, r3
    23c0:	6d6f435f 	stclvs	3, cr4, [pc, #-380]!	; 224c <startup-0x1fffddb4>
    23c4:	736e6570 	cmnvc	lr, #112, 10	; 0x1c000000
    23c8:	6f697461 	svcvs	0x00697461
    23cc:	6c65436e 	stclvs	3, cr4, [r5], #-440	; 0xfffffe48
    23d0:	646d436c 	strbtvs	r4, [sp], #-876	; 0xfffffc94
    23d4:	53595300 	cmppl	r9, #0, 6
    23d8:	5f474643 	svcpl	0x00474643
    23dc:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    23e0:	65706d6f 	ldrbvs	r6, [r0, #-3439]!	; 0xfffff291
    23e4:	7461736e 	strbtvc	r7, [r1], #-878	; 0xfffffc92
    23e8:	436e6f69 	cmnmi	lr, #420	; 0x1a4
    23ec:	536c6c65 	cmnpl	ip, #25856	; 0x6500
    23f0:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
    23f4:	59530073 	ldmdbpl	r3, {r0, r1, r4, r5, r6}^
    23f8:	47464353 	smlsldmi	r4, r6, r3, r3
    23fc:	4965445f 	stmdbmi	r5!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    2400:	0074696e 	rsbseq	r6, r4, lr, ror #18
    2404:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
    2408:	726f505f 	rsbvc	r5, pc, #95	; 0x5f
    240c:	756f5374 	strbvc	r5, [pc, #-884]!	; 20a0 <startup-0x1fffdf60>
    2410:	47656372 			; <UNDEFINED> instruction: 0x47656372
    2414:	784f4950 	stmdavc	pc, {r4, r6, r8, fp, lr}^	; <UNPREDICTABLE>
    2418:	2f3a4300 	svccs	0x003a4300
    241c:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    2420:	6d612f73 	stclvs	15, cr2, [r1, #-460]!	; 0xfffffe34
    2424:	2f726e69 	svccs	0x00726e69
    2428:	6b736544 	blvs	1cdb940 <startup-0x1e3246c0>
    242c:	2f706f74 	svccs	0x00706f74
    2430:	61746164 	cmnvs	r4, r4, ror #2
    2434:	6a6f7270 	bvs	1bdedfc <startup-0x1e421204>
    2438:	2f746b65 	svccs	0x00746b65
    243c:	334d5453 	movtcc	r5, #54355	; 0xd453
    2440:	5f344632 	svcpl	0x00344632
    2444:	2f62696c 	svccs	0x0062696c
    2448:	334d5453 	movtcc	r5, #54355	; 0xd453
    244c:	5f344632 	svcpl	0x00344632
    2450:	2f62696c 	svccs	0x0062696c
    2454:	334d5453 	movtcc	r5, #54355	; 0xd453
    2458:	78344632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, lr}
    245c:	74535f78 	ldrbvc	r5, [r3], #-3960	; 0xfffff088
    2460:	72655064 	rsbvc	r5, r5, #100	; 0x64
    2464:	5f687069 	svcpl	0x00687069
    2468:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    246c:	732f7265 			; <UNDEFINED> instruction: 0x732f7265
    2470:	732f6372 			; <UNDEFINED> instruction: 0x732f6372
    2474:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    2478:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
    247c:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    2480:	2e676663 	cdpcs	6, 6, cr6, cr7, cr3, {3}
    2484:	59530063 	ldmdbpl	r3, {r0, r1, r5, r6}^
    2488:	47464353 	smlsldmi	r4, r6, r3, r3
    248c:	5458455f 	ldrbpl	r4, [r8], #-1375	; 0xfffffaa1
    2490:	6e694c49 	cdpvs	12, 6, cr4, cr9, cr9, {2}
    2494:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
    2498:	00676966 	rsbeq	r6, r7, r6, ror #18
    249c:	43504d43 	cmpmi	r0, #4288	; 0x10c0
    24a0:	454d0052 	strbmi	r0, [sp, #-82]	; 0xffffffae
    24a4:	504d524d 	subpl	r5, sp, sp, asr #4
    24a8:	53595300 	cmppl	r9, #0, 6
    24ac:	5f474643 	svcpl	0x00474643
    24b0:	5f485445 	svcpl	0x00485445
    24b4:	6964654d 	stmdbvs	r4!, {r0, r2, r3, r6, r8, sl, sp, lr}^
    24b8:	746e4961 	strbtvc	r4, [lr], #-2401	; 0xfffff69f
    24bc:	61667265 	cmnvs	r6, r5, ror #4
    24c0:	52006563 	andpl	r6, r0, #415236096	; 0x18c00000
    24c4:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
    24c8:	00444556 	subeq	r4, r4, r6, asr r5
    24cc:	43535953 	cmpmi	r3, #1359872	; 0x14c000
    24d0:	4d5f4746 	ldclmi	7, cr4, [pc, #-280]	; 23c0 <startup-0x1fffdc40>
    24d4:	726f6d65 	rsbvc	r6, pc, #6464	; 0x1940
    24d8:	61775379 	cmnvs	r7, r9, ror r3
    24dc:	6e697070 	mcrvs	0, 3, r7, cr9, cr0, {3}
    24e0:	6e614267 	cdpvs	2, 6, cr4, cr1, cr7, {3}
    24e4:	5845006b 	stmdapl	r5, {r0, r1, r3, r5, r6}^
    24e8:	52434954 	subpl	r4, r3, #84, 18	; 0x150000
    24ec:	54584500 	ldrbpl	r4, [r8], #-1280	; 0xfffffb00
    24f0:	69505f49 	ldmdbvs	r0, {r0, r3, r6, r8, r9, sl, fp, ip, lr}^
    24f4:	756f536e 	strbvc	r5, [pc, #-878]!	; 218e <startup-0x1fffde72>
    24f8:	78656372 	stmdavc	r5!, {r1, r4, r5, r6, r8, r9, sp, lr}^
    24fc:	53595300 	cmppl	r9, #0, 6
    2500:	5f474643 	svcpl	0x00474643
    2504:	5f485445 	svcpl	0x00485445
    2508:	6964654d 	stmdbvs	r4!, {r0, r2, r3, r6, r8, sl, sp, lr}^
    250c:	746e4961 	strbtvc	r4, [lr], #-2401	; 0xfffff69f
    2510:	61667265 	cmnvs	r6, r5, ror #4
    2514:	6f436563 	svcvs	0x00436563
    2518:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    251c:	53595300 	cmppl	r9, #0, 6
    2520:	5f474643 	svcpl	0x00474643
    2524:	6f6d654d 	svcvs	0x006d654d
    2528:	65527972 	ldrbvs	r7, [r2, #-2418]	; 0xfffff68e
    252c:	0070616d 	rsbseq	r6, r0, sp, ror #2
    2530:	43535953 	cmpmi	r3, #1359872	; 0x14c000
    2534:	545f4746 	ldrbpl	r4, [pc], #-1862	; 253c <startup-0x1fffdac4>
    2538:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
    253c:	53006665 	movwpl	r6, #1637	; 0x665
    2540:	46435359 			; <UNDEFINED> instruction: 0x46435359
    2544:	654d5f47 	strbvs	r5, [sp, #-3911]	; 0xfffff0b9
    2548:	79726f6d 	ldmdbvc	r2!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    254c:	616d6552 	cmnvs	sp, r2, asr r5
    2550:	6e6f4370 	mcrvs	3, 3, r4, cr15, cr0, {3}
    2554:	00676966 	rsbeq	r6, r7, r6, ror #18

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d39 	eorscc	r2, r2, r9, lsr sp
  30:	712d3931 			; <UNDEFINED> instruction: 0x712d3931
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	31393130 	teqcc	r9, r0, lsr r1
  48:	20353230 	eorscs	r3, r5, r0, lsr r2
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
  5c:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
  60:	6172622d 	cmnvs	r2, sp, lsr #4
  64:	2068636e 	rsbcs	r6, r8, lr, ror #6
  68:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  6c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  70:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  74:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
       0:	0000000c 	andeq	r0, r0, ip
       4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
       8:	7c020001 	stcvc	0, cr0, [r2], {1}
       c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
      10:	0000001c 	andeq	r0, r0, ip, lsl r0
      14:	00000000 	andeq	r0, r0, r0
      18:	20000010 	andcs	r0, r0, r0, lsl r0
      1c:	00000024 	andeq	r0, r0, r4, lsr #32
      20:	87080e41 	strhi	r0, [r8, -r1, asr #28]
      24:	41018e02 	tstmi	r1, r2, lsl #28
      28:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
      2c:	00000007 	andeq	r0, r0, r7
      30:	00000020 	andeq	r0, r0, r0, lsr #32
      34:	00000000 	andeq	r0, r0, r0
      38:	20000034 	andcs	r0, r0, r4, lsr r0
      3c:	000000f4 	strdeq	r0, [r0], -r4
      40:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
      44:	87038504 	strhi	r8, [r3, -r4, lsl #10]
      48:	41018e02 	tstmi	r1, r2, lsl #28
      4c:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
      50:	00000007 	andeq	r0, r0, r7
      54:	0000001c 	andeq	r0, r0, ip, lsl r0
      58:	00000000 	andeq	r0, r0, r0
      5c:	20000128 	andcs	r0, r0, r8, lsr #2
      60:	0000002c 	andeq	r0, r0, ip, lsr #32
      64:	87080e41 	strhi	r0, [r8, -r1, asr #28]
      68:	41018e02 	tstmi	r1, r2, lsl #28
      6c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
      70:	00000007 	andeq	r0, r0, r7
      74:	0000001c 	andeq	r0, r0, ip, lsl r0
      78:	00000000 	andeq	r0, r0, r0
      7c:	20000154 	andcs	r0, r0, r4, asr r1
      80:	00000048 	andeq	r0, r0, r8, asr #32
      84:	87080e41 	strhi	r0, [r8, -r1, asr #28]
      88:	41018e02 	tstmi	r1, r2, lsl #28
      8c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
      90:	00000007 	andeq	r0, r0, r7
      94:	0000001c 	andeq	r0, r0, ip, lsl r0
      98:	00000000 	andeq	r0, r0, r0
      9c:	2000019c 	mulcs	r0, ip, r1
      a0:	00000034 	andeq	r0, r0, r4, lsr r0
      a4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
      a8:	41018e02 	tstmi	r1, r2, lsl #28
      ac:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
      b0:	00000007 	andeq	r0, r0, r7
      b4:	0000000c 	andeq	r0, r0, ip
      b8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
      bc:	7c020001 	stcvc	0, cr0, [r2], {1}
      c0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
      c4:	00000018 	andeq	r0, r0, r8, lsl r0
      c8:	000000b4 	strheq	r0, [r0], -r4
      cc:	200001d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
      d0:	00000030 	andeq	r0, r0, r0, lsr r0
      d4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
      d8:	41018e02 	tstmi	r1, r2, lsl #28
      dc:	0000070d 	andeq	r0, r0, sp, lsl #14
      e0:	0000001c 	andeq	r0, r0, ip, lsl r0
      e4:	000000b4 	strheq	r0, [r0], -r4
      e8:	20000200 	andcs	r0, r0, r0, lsl #4
      ec:	000000e0 	andeq	r0, r0, r0, ror #1
      f0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
      f4:	41018e02 	tstmi	r1, r2, lsl #28
      f8:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
      fc:	00000007 	andeq	r0, r0, r7
     100:	0000001c 	andeq	r0, r0, ip, lsl r0
     104:	000000b4 	strheq	r0, [r0], -r4
     108:	200002e0 	andcs	r0, r0, r0, ror #5
     10c:	00000028 	andeq	r0, r0, r8, lsr #32
     110:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     114:	41018e02 	tstmi	r1, r2, lsl #28
     118:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     11c:	00000007 	andeq	r0, r0, r7
     120:	0000001c 	andeq	r0, r0, ip, lsl r0
     124:	000000b4 	strheq	r0, [r0], -r4
     128:	20000308 	andcs	r0, r0, r8, lsl #6
     12c:	00000020 	andeq	r0, r0, r0, lsr #32
     130:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     134:	41018e02 	tstmi	r1, r2, lsl #28
     138:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     13c:	00000007 	andeq	r0, r0, r7
     140:	0000001c 	andeq	r0, r0, ip, lsl r0
     144:	000000b4 	strheq	r0, [r0], -r4
     148:	20000328 	andcs	r0, r0, r8, lsr #6
     14c:	0000003c 	andeq	r0, r0, ip, lsr r0
     150:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     154:	41018e02 	tstmi	r1, r2, lsl #28
     158:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     15c:	00000007 	andeq	r0, r0, r7
     160:	0000001c 	andeq	r0, r0, ip, lsl r0
     164:	000000b4 	strheq	r0, [r0], -r4
     168:	20000364 	andcs	r0, r0, r4, ror #6
     16c:	0000001c 	andeq	r0, r0, ip, lsl r0
     170:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     174:	41018e02 	tstmi	r1, r2, lsl #28
     178:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     17c:	00000007 	andeq	r0, r0, r7
     180:	0000001c 	andeq	r0, r0, ip, lsl r0
     184:	000000b4 	strheq	r0, [r0], -r4
     188:	20000380 	andcs	r0, r0, r0, lsl #7
     18c:	0000003c 	andeq	r0, r0, ip, lsr r0
     190:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     194:	41018e02 	tstmi	r1, r2, lsl #28
     198:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     19c:	00000007 	andeq	r0, r0, r7
     1a0:	0000001c 	andeq	r0, r0, ip, lsl r0
     1a4:	000000b4 	strheq	r0, [r0], -r4
     1a8:	200003bc 			; <UNDEFINED> instruction: 0x200003bc
     1ac:	0000001c 	andeq	r0, r0, ip, lsl r0
     1b0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     1b4:	41018e02 	tstmi	r1, r2, lsl #28
     1b8:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     1bc:	00000007 	andeq	r0, r0, r7
     1c0:	0000000c 	andeq	r0, r0, ip
     1c4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     1c8:	7c020001 	stcvc	0, cr0, [r2], {1}
     1cc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     1d0:	0000001c 	andeq	r0, r0, ip, lsl r0
     1d4:	000001c0 	andeq	r0, r0, r0, asr #3
     1d8:	200003d8 	ldrdcs	r0, [r0], -r8
     1dc:	00000040 	andeq	r0, r0, r0, asr #32
     1e0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     1e4:	41018e02 	tstmi	r1, r2, lsl #28
     1e8:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     1ec:	00000007 	andeq	r0, r0, r7
     1f0:	00000018 	andeq	r0, r0, r8, lsl r0
     1f4:	000001c0 	andeq	r0, r0, r0, asr #3
     1f8:	20000418 	andcs	r0, r0, r8, lsl r4
     1fc:	00000028 	andeq	r0, r0, r8, lsr #32
     200:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     204:	41018e02 	tstmi	r1, r2, lsl #28
     208:	0000070d 	andeq	r0, r0, sp, lsl #14
     20c:	00000018 	andeq	r0, r0, r8, lsl r0
     210:	000001c0 	andeq	r0, r0, r0, asr #3
     214:	20000440 	andcs	r0, r0, r0, asr #8
     218:	00000028 	andeq	r0, r0, r8, lsr #32
     21c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     220:	41018e02 	tstmi	r1, r2, lsl #28
     224:	0000070d 	andeq	r0, r0, sp, lsl #14
     228:	0000001c 	andeq	r0, r0, ip, lsl r0
     22c:	000001c0 	andeq	r0, r0, r0, asr #3
     230:	20000468 	andcs	r0, r0, r8, ror #8
     234:	0000002a 	andeq	r0, r0, sl, lsr #32
     238:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     23c:	41018e02 	tstmi	r1, r2, lsl #28
     240:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     244:	00000007 	andeq	r0, r0, r7
     248:	0000000c 	andeq	r0, r0, ip
     24c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     250:	7c020001 	stcvc	0, cr0, [r2], {1}
     254:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     258:	0000000c 	andeq	r0, r0, ip
     25c:	00000248 	andeq	r0, r0, r8, asr #4
     260:	20000000 	andcs	r0, r0, r0
     264:	0000000c 	andeq	r0, r0, ip
     268:	0000001c 	andeq	r0, r0, ip, lsl r0
     26c:	00000248 	andeq	r0, r0, r8, asr #4
     270:	20000494 	mulcs	r0, r4, r4
     274:	00000084 	andeq	r0, r0, r4, lsl #1
     278:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     27c:	41018e02 	tstmi	r1, r2, lsl #28
     280:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     284:	00000007 	andeq	r0, r0, r7
     288:	0000001c 	andeq	r0, r0, ip, lsl r0
     28c:	00000248 	andeq	r0, r0, r8, asr #4
     290:	20000518 	andcs	r0, r0, r8, lsl r5
     294:	0000004a 	andeq	r0, r0, sl, asr #32
     298:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     29c:	41018e02 	tstmi	r1, r2, lsl #28
     2a0:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     2a4:	00000007 	andeq	r0, r0, r7
     2a8:	00000018 	andeq	r0, r0, r8, lsl r0
     2ac:	00000248 	andeq	r0, r0, r8, asr #4
     2b0:	20000562 	andcs	r0, r0, r2, ror #10
     2b4:	00000036 	andeq	r0, r0, r6, lsr r0
     2b8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     2bc:	41018e02 	tstmi	r1, r2, lsl #28
     2c0:	0000070d 	andeq	r0, r0, sp, lsl #14
     2c4:	00000018 	andeq	r0, r0, r8, lsl r0
     2c8:	00000248 	andeq	r0, r0, r8, asr #4
     2cc:	20000598 	mulcs	r0, r8, r5
     2d0:	0000003c 	andeq	r0, r0, ip, lsr r0
     2d4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     2d8:	41018e02 	tstmi	r1, r2, lsl #28
     2dc:	0000070d 	andeq	r0, r0, sp, lsl #14
     2e0:	0000001c 	andeq	r0, r0, ip, lsl r0
     2e4:	00000248 	andeq	r0, r0, r8, asr #4
     2e8:	200005d4 	ldrdcs	r0, [r0], -r4
     2ec:	000000d8 	ldrdeq	r0, [r0], -r8
     2f0:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
     2f4:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     2f8:	200e4101 	andcs	r4, lr, r1, lsl #2
     2fc:	00070d41 	andeq	r0, r7, r1, asr #26
     300:	00000018 	andeq	r0, r0, r8, lsl r0
     304:	00000248 	andeq	r0, r0, r8, asr #4
     308:	200006ac 	andcs	r0, r0, ip, lsr #13
     30c:	0000011c 	andeq	r0, r0, ip, lsl r1
     310:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     314:	41018e02 	tstmi	r1, r2, lsl #28
     318:	0000070d 	andeq	r0, r0, sp, lsl #14
     31c:	00000018 	andeq	r0, r0, r8, lsl r0
     320:	00000248 	andeq	r0, r0, r8, asr #4
     324:	200007c8 	andcs	r0, r0, r8, asr #15
     328:	00000038 	andeq	r0, r0, r8, lsr r0
     32c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     330:	41018e02 	tstmi	r1, r2, lsl #28
     334:	0000070d 	andeq	r0, r0, sp, lsl #14
     338:	0000000c 	andeq	r0, r0, ip
     33c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     340:	7c020001 	stcvc	0, cr0, [r2], {1}
     344:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     348:	00000018 	andeq	r0, r0, r8, lsl r0
     34c:	00000338 	andeq	r0, r0, r8, lsr r3
     350:	20000800 	andcs	r0, r0, r0, lsl #16
     354:	00000070 	andeq	r0, r0, r0, ror r0
     358:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     35c:	41018e02 	tstmi	r1, r2, lsl #28
     360:	0000070d 	andeq	r0, r0, sp, lsl #14
     364:	0000001c 	andeq	r0, r0, ip, lsl r0
     368:	00000338 	andeq	r0, r0, r8, lsr r3
     36c:	20000870 	andcs	r0, r0, r0, ror r8
     370:	00000028 	andeq	r0, r0, r8, lsr #32
     374:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     378:	41018e02 	tstmi	r1, r2, lsl #28
     37c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     380:	00000007 	andeq	r0, r0, r7
     384:	0000001c 	andeq	r0, r0, ip, lsl r0
     388:	00000338 	andeq	r0, r0, r8, lsr r3
     38c:	20000898 	mulcs	r0, r8, r8
     390:	0000005e 	andeq	r0, r0, lr, asr r0
     394:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
     398:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     39c:	180e4101 	stmdane	lr, {r0, r8, lr}
     3a0:	00070d41 	andeq	r0, r7, r1, asr #26
     3a4:	0000001c 	andeq	r0, r0, ip, lsl r0
     3a8:	00000338 	andeq	r0, r0, r8, lsr r3
     3ac:	200008f6 	strdcs	r0, [r0], -r6
     3b0:	0000003e 	andeq	r0, r0, lr, lsr r0
     3b4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     3b8:	41018e02 	tstmi	r1, r2, lsl #28
     3bc:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     3c0:	00000007 	andeq	r0, r0, r7
     3c4:	0000001c 	andeq	r0, r0, ip, lsl r0
     3c8:	00000338 	andeq	r0, r0, r8, lsr r3
     3cc:	20000934 	andcs	r0, r0, r4, lsr r9
     3d0:	00000020 	andeq	r0, r0, r0, lsr #32
     3d4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     3d8:	41018e02 	tstmi	r1, r2, lsl #28
     3dc:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     3e0:	00000007 	andeq	r0, r0, r7
     3e4:	0000001c 	andeq	r0, r0, ip, lsl r0
     3e8:	00000338 	andeq	r0, r0, r8, lsr r3
     3ec:	20000954 	andcs	r0, r0, r4, asr r9
     3f0:	00000044 	andeq	r0, r0, r4, asr #32
     3f4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     3f8:	41018e02 	tstmi	r1, r2, lsl #28
     3fc:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     400:	00000007 	andeq	r0, r0, r7
     404:	0000001c 	andeq	r0, r0, ip, lsl r0
     408:	00000338 	andeq	r0, r0, r8, lsr r3
     40c:	20000998 	mulcs	r0, r8, r9
     410:	00000020 	andeq	r0, r0, r0, lsr #32
     414:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     418:	41018e02 	tstmi	r1, r2, lsl #28
     41c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     420:	00000007 	andeq	r0, r0, r7
     424:	0000001c 	andeq	r0, r0, ip, lsl r0
     428:	00000338 	andeq	r0, r0, r8, lsr r3
     42c:	200009b8 			; <UNDEFINED> instruction: 0x200009b8
     430:	0000003c 	andeq	r0, r0, ip, lsr r0
     434:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     438:	41018e02 	tstmi	r1, r2, lsl #28
     43c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     440:	00000007 	andeq	r0, r0, r7
     444:	0000001c 	andeq	r0, r0, ip, lsl r0
     448:	00000338 	andeq	r0, r0, r8, lsr r3
     44c:	200009f4 	strdcs	r0, [r0], -r4
     450:	00000020 	andeq	r0, r0, r0, lsr #32
     454:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     458:	41018e02 	tstmi	r1, r2, lsl #28
     45c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     460:	00000007 	andeq	r0, r0, r7
     464:	0000001c 	andeq	r0, r0, ip, lsl r0
     468:	00000338 	andeq	r0, r0, r8, lsr r3
     46c:	20000a14 	andcs	r0, r0, r4, lsl sl
     470:	00000028 	andeq	r0, r0, r8, lsr #32
     474:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     478:	41018e02 	tstmi	r1, r2, lsl #28
     47c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     480:	00000007 	andeq	r0, r0, r7
     484:	0000001c 	andeq	r0, r0, ip, lsl r0
     488:	00000338 	andeq	r0, r0, r8, lsr r3
     48c:	20000a3c 	andcs	r0, r0, ip, lsr sl
     490:	00000020 	andeq	r0, r0, r0, lsr #32
     494:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     498:	41018e02 	tstmi	r1, r2, lsl #28
     49c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     4a0:	00000007 	andeq	r0, r0, r7
     4a4:	0000001c 	andeq	r0, r0, ip, lsl r0
     4a8:	00000338 	andeq	r0, r0, r8, lsr r3
     4ac:	20000a5c 	andcs	r0, r0, ip, asr sl
     4b0:	00000030 	andeq	r0, r0, r0, lsr r0
     4b4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     4b8:	41018e02 	tstmi	r1, r2, lsl #28
     4bc:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     4c0:	00000007 	andeq	r0, r0, r7
     4c4:	0000001c 	andeq	r0, r0, ip, lsl r0
     4c8:	00000338 	andeq	r0, r0, r8, lsr r3
     4cc:	20000a8c 	andcs	r0, r0, ip, lsl #21
     4d0:	00000020 	andeq	r0, r0, r0, lsr #32
     4d4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     4d8:	41018e02 	tstmi	r1, r2, lsl #28
     4dc:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     4e0:	00000007 	andeq	r0, r0, r7
     4e4:	0000001c 	andeq	r0, r0, ip, lsl r0
     4e8:	00000338 	andeq	r0, r0, r8, lsr r3
     4ec:	20000aac 	andcs	r0, r0, ip, lsr #21
     4f0:	00000020 	andeq	r0, r0, r0, lsr #32
     4f4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     4f8:	41018e02 	tstmi	r1, r2, lsl #28
     4fc:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     500:	00000007 	andeq	r0, r0, r7
     504:	0000001c 	andeq	r0, r0, ip, lsl r0
     508:	00000338 	andeq	r0, r0, r8, lsr r3
     50c:	20000acc 	andcs	r0, r0, ip, asr #21
     510:	00000040 	andeq	r0, r0, r0, asr #32
     514:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     518:	41018e02 	tstmi	r1, r2, lsl #28
     51c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     520:	00000007 	andeq	r0, r0, r7
     524:	0000001c 	andeq	r0, r0, ip, lsl r0
     528:	00000338 	andeq	r0, r0, r8, lsr r3
     52c:	20000b0c 	andcs	r0, r0, ip, lsl #22
     530:	0000003c 	andeq	r0, r0, ip, lsr r0
     534:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     538:	41018e02 	tstmi	r1, r2, lsl #28
     53c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     540:	00000007 	andeq	r0, r0, r7
     544:	0000001c 	andeq	r0, r0, ip, lsl r0
     548:	00000338 	andeq	r0, r0, r8, lsr r3
     54c:	20000b48 	andcs	r0, r0, r8, asr #22
     550:	00000034 	andeq	r0, r0, r4, lsr r0
     554:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     558:	41018e02 	tstmi	r1, r2, lsl #28
     55c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     560:	00000007 	andeq	r0, r0, r7
     564:	00000018 	andeq	r0, r0, r8, lsl r0
     568:	00000338 	andeq	r0, r0, r8, lsr r3
     56c:	20000b7c 	andcs	r0, r0, ip, ror fp
     570:	0000001c 	andeq	r0, r0, ip, lsl r0
     574:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     578:	41018e02 	tstmi	r1, r2, lsl #28
     57c:	0000070d 	andeq	r0, r0, sp, lsl #14
     580:	0000001c 	andeq	r0, r0, ip, lsl r0
     584:	00000338 	andeq	r0, r0, r8, lsr r3
     588:	20000b98 	mulcs	r0, r8, fp
     58c:	00000034 	andeq	r0, r0, r4, lsr r0
     590:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     594:	41018e02 	tstmi	r1, r2, lsl #28
     598:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     59c:	00000007 	andeq	r0, r0, r7
     5a0:	0000001c 	andeq	r0, r0, ip, lsl r0
     5a4:	00000338 	andeq	r0, r0, r8, lsr r3
     5a8:	20000bcc 	andcs	r0, r0, ip, asr #23
     5ac:	00000038 	andeq	r0, r0, r8, lsr r0
     5b0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     5b4:	41018e02 	tstmi	r1, r2, lsl #28
     5b8:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     5bc:	00000007 	andeq	r0, r0, r7
     5c0:	0000001c 	andeq	r0, r0, ip, lsl r0
     5c4:	00000338 	andeq	r0, r0, r8, lsr r3
     5c8:	20000c04 	andcs	r0, r0, r4, lsl #24
     5cc:	0000003c 	andeq	r0, r0, ip, lsr r0
     5d0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     5d4:	41018e02 	tstmi	r1, r2, lsl #28
     5d8:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     5dc:	00000007 	andeq	r0, r0, r7
     5e0:	0000001c 	andeq	r0, r0, ip, lsl r0
     5e4:	00000338 	andeq	r0, r0, r8, lsr r3
     5e8:	20000c40 	andcs	r0, r0, r0, asr #24
     5ec:	00000164 	andeq	r0, r0, r4, ror #2
     5f0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     5f4:	41018e02 	tstmi	r1, r2, lsl #28
     5f8:	0d41280e 	stcleq	8, cr2, [r1, #-56]	; 0xffffffc8
     5fc:	00000007 	andeq	r0, r0, r7
     600:	0000001c 	andeq	r0, r0, ip, lsl r0
     604:	00000338 	andeq	r0, r0, r8, lsr r3
     608:	20000da4 	andcs	r0, r0, r4, lsr #27
     60c:	00000060 	andeq	r0, r0, r0, rrx
     610:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     614:	41018e02 	tstmi	r1, r2, lsl #28
     618:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     61c:	00000007 	andeq	r0, r0, r7
     620:	0000001c 	andeq	r0, r0, ip, lsl r0
     624:	00000338 	andeq	r0, r0, r8, lsr r3
     628:	20000e04 	andcs	r0, r0, r4, lsl #28
     62c:	00000020 	andeq	r0, r0, r0, lsr #32
     630:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     634:	41018e02 	tstmi	r1, r2, lsl #28
     638:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     63c:	00000007 	andeq	r0, r0, r7
     640:	0000001c 	andeq	r0, r0, ip, lsl r0
     644:	00000338 	andeq	r0, r0, r8, lsr r3
     648:	20000e24 	andcs	r0, r0, r4, lsr #28
     64c:	00000020 	andeq	r0, r0, r0, lsr #32
     650:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     654:	41018e02 	tstmi	r1, r2, lsl #28
     658:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     65c:	00000007 	andeq	r0, r0, r7
     660:	0000001c 	andeq	r0, r0, ip, lsl r0
     664:	00000338 	andeq	r0, r0, r8, lsr r3
     668:	20000e44 	andcs	r0, r0, r4, asr #28
     66c:	0000001c 	andeq	r0, r0, ip, lsl r0
     670:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     674:	41018e02 	tstmi	r1, r2, lsl #28
     678:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     67c:	00000007 	andeq	r0, r0, r7
     680:	0000001c 	andeq	r0, r0, ip, lsl r0
     684:	00000338 	andeq	r0, r0, r8, lsr r3
     688:	20000e60 	andcs	r0, r0, r0, ror #28
     68c:	0000003c 	andeq	r0, r0, ip, lsr r0
     690:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     694:	41018e02 	tstmi	r1, r2, lsl #28
     698:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     69c:	00000007 	andeq	r0, r0, r7
     6a0:	0000001c 	andeq	r0, r0, ip, lsl r0
     6a4:	00000338 	andeq	r0, r0, r8, lsr r3
     6a8:	20000e9c 	mulcs	r0, ip, lr
     6ac:	0000003c 	andeq	r0, r0, ip, lsr r0
     6b0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     6b4:	41018e02 	tstmi	r1, r2, lsl #28
     6b8:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     6bc:	00000007 	andeq	r0, r0, r7
     6c0:	0000001c 	andeq	r0, r0, ip, lsl r0
     6c4:	00000338 	andeq	r0, r0, r8, lsr r3
     6c8:	20000ed8 	ldrdcs	r0, [r0], -r8
     6cc:	0000003c 	andeq	r0, r0, ip, lsr r0
     6d0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     6d4:	41018e02 	tstmi	r1, r2, lsl #28
     6d8:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     6dc:	00000007 	andeq	r0, r0, r7
     6e0:	0000001c 	andeq	r0, r0, ip, lsl r0
     6e4:	00000338 	andeq	r0, r0, r8, lsr r3
     6e8:	20000f14 	andcs	r0, r0, r4, lsl pc
     6ec:	00000040 	andeq	r0, r0, r0, asr #32
     6f0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     6f4:	41018e02 	tstmi	r1, r2, lsl #28
     6f8:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     6fc:	00000007 	andeq	r0, r0, r7
     700:	0000001c 	andeq	r0, r0, ip, lsl r0
     704:	00000338 	andeq	r0, r0, r8, lsr r3
     708:	20000f54 	andcs	r0, r0, r4, asr pc
     70c:	0000003c 	andeq	r0, r0, ip, lsr r0
     710:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     714:	41018e02 	tstmi	r1, r2, lsl #28
     718:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     71c:	00000007 	andeq	r0, r0, r7
     720:	0000001c 	andeq	r0, r0, ip, lsl r0
     724:	00000338 	andeq	r0, r0, r8, lsr r3
     728:	20000f90 	mulcs	r0, r0, pc	; <UNPREDICTABLE>
     72c:	0000001c 	andeq	r0, r0, ip, lsl r0
     730:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     734:	41018e02 	tstmi	r1, r2, lsl #28
     738:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     73c:	00000007 	andeq	r0, r0, r7
     740:	0000001c 	andeq	r0, r0, ip, lsl r0
     744:	00000338 	andeq	r0, r0, r8, lsr r3
     748:	20000fac 	andcs	r0, r0, ip, lsr #31
     74c:	00000040 	andeq	r0, r0, r0, asr #32
     750:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     754:	41018e02 	tstmi	r1, r2, lsl #28
     758:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     75c:	00000007 	andeq	r0, r0, r7
     760:	0000001c 	andeq	r0, r0, ip, lsl r0
     764:	00000338 	andeq	r0, r0, r8, lsr r3
     768:	20000fec 	andcs	r0, r0, ip, ror #31
     76c:	00000040 	andeq	r0, r0, r0, asr #32
     770:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     774:	41018e02 	tstmi	r1, r2, lsl #28
     778:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     77c:	00000007 	andeq	r0, r0, r7
     780:	0000001c 	andeq	r0, r0, ip, lsl r0
     784:	00000338 	andeq	r0, r0, r8, lsr r3
     788:	2000102c 	andcs	r1, r0, ip, lsr #32
     78c:	00000040 	andeq	r0, r0, r0, asr #32
     790:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     794:	41018e02 	tstmi	r1, r2, lsl #28
     798:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     79c:	00000007 	andeq	r0, r0, r7
     7a0:	0000001c 	andeq	r0, r0, ip, lsl r0
     7a4:	00000338 	andeq	r0, r0, r8, lsr r3
     7a8:	2000106c 	andcs	r1, r0, ip, rrx
     7ac:	00000040 	andeq	r0, r0, r0, asr #32
     7b0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     7b4:	41018e02 	tstmi	r1, r2, lsl #28
     7b8:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     7bc:	00000007 	andeq	r0, r0, r7
     7c0:	0000001c 	andeq	r0, r0, ip, lsl r0
     7c4:	00000338 	andeq	r0, r0, r8, lsr r3
     7c8:	200010ac 	andcs	r1, r0, ip, lsr #1
     7cc:	00000040 	andeq	r0, r0, r0, asr #32
     7d0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     7d4:	41018e02 	tstmi	r1, r2, lsl #28
     7d8:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     7dc:	00000007 	andeq	r0, r0, r7
     7e0:	0000001c 	andeq	r0, r0, ip, lsl r0
     7e4:	00000338 	andeq	r0, r0, r8, lsr r3
     7e8:	200010ec 	andcs	r1, r0, ip, ror #1
     7ec:	00000040 	andeq	r0, r0, r0, asr #32
     7f0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     7f4:	41018e02 	tstmi	r1, r2, lsl #28
     7f8:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     7fc:	00000007 	andeq	r0, r0, r7
     800:	0000001c 	andeq	r0, r0, ip, lsl r0
     804:	00000338 	andeq	r0, r0, r8, lsr r3
     808:	2000112c 	andcs	r1, r0, ip, lsr #2
     80c:	00000040 	andeq	r0, r0, r0, asr #32
     810:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     814:	41018e02 	tstmi	r1, r2, lsl #28
     818:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     81c:	00000007 	andeq	r0, r0, r7
     820:	0000001c 	andeq	r0, r0, ip, lsl r0
     824:	00000338 	andeq	r0, r0, r8, lsr r3
     828:	2000116c 	andcs	r1, r0, ip, ror #2
     82c:	00000040 	andeq	r0, r0, r0, asr #32
     830:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     834:	41018e02 	tstmi	r1, r2, lsl #28
     838:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     83c:	00000007 	andeq	r0, r0, r7
     840:	0000001c 	andeq	r0, r0, ip, lsl r0
     844:	00000338 	andeq	r0, r0, r8, lsr r3
     848:	200011ac 	andcs	r1, r0, ip, lsr #3
     84c:	00000040 	andeq	r0, r0, r0, asr #32
     850:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     854:	41018e02 	tstmi	r1, r2, lsl #28
     858:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     85c:	00000007 	andeq	r0, r0, r7
     860:	0000001c 	andeq	r0, r0, ip, lsl r0
     864:	00000338 	andeq	r0, r0, r8, lsr r3
     868:	200011ec 	andcs	r1, r0, ip, ror #3
     86c:	00000040 	andeq	r0, r0, r0, asr #32
     870:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     874:	41018e02 	tstmi	r1, r2, lsl #28
     878:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     87c:	00000007 	andeq	r0, r0, r7
     880:	0000001c 	andeq	r0, r0, ip, lsl r0
     884:	00000338 	andeq	r0, r0, r8, lsr r3
     888:	2000122c 	andcs	r1, r0, ip, lsr #4
     88c:	00000040 	andeq	r0, r0, r0, asr #32
     890:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     894:	41018e02 	tstmi	r1, r2, lsl #28
     898:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     89c:	00000007 	andeq	r0, r0, r7
     8a0:	0000001c 	andeq	r0, r0, ip, lsl r0
     8a4:	00000338 	andeq	r0, r0, r8, lsr r3
     8a8:	2000126c 	andcs	r1, r0, ip, ror #4
     8ac:	00000040 	andeq	r0, r0, r0, asr #32
     8b0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     8b4:	41018e02 	tstmi	r1, r2, lsl #28
     8b8:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     8bc:	00000007 	andeq	r0, r0, r7
     8c0:	0000001c 	andeq	r0, r0, ip, lsl r0
     8c4:	00000338 	andeq	r0, r0, r8, lsr r3
     8c8:	200012ac 	andcs	r1, r0, ip, lsr #5
     8cc:	00000040 	andeq	r0, r0, r0, asr #32
     8d0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     8d4:	41018e02 	tstmi	r1, r2, lsl #28
     8d8:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     8dc:	00000007 	andeq	r0, r0, r7
     8e0:	0000001c 	andeq	r0, r0, ip, lsl r0
     8e4:	00000338 	andeq	r0, r0, r8, lsr r3
     8e8:	200012ec 	andcs	r1, r0, ip, ror #5
     8ec:	00000040 	andeq	r0, r0, r0, asr #32
     8f0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     8f4:	41018e02 	tstmi	r1, r2, lsl #28
     8f8:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     8fc:	00000007 	andeq	r0, r0, r7
     900:	0000001c 	andeq	r0, r0, ip, lsl r0
     904:	00000338 	andeq	r0, r0, r8, lsr r3
     908:	2000132c 	andcs	r1, r0, ip, lsr #6
     90c:	00000040 	andeq	r0, r0, r0, asr #32
     910:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     914:	41018e02 	tstmi	r1, r2, lsl #28
     918:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     91c:	00000007 	andeq	r0, r0, r7
     920:	0000001c 	andeq	r0, r0, ip, lsl r0
     924:	00000338 	andeq	r0, r0, r8, lsr r3
     928:	2000136c 	andcs	r1, r0, ip, ror #6
     92c:	0000003c 	andeq	r0, r0, ip, lsr r0
     930:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     934:	41018e02 	tstmi	r1, r2, lsl #28
     938:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     93c:	00000007 	andeq	r0, r0, r7
     940:	0000001c 	andeq	r0, r0, ip, lsl r0
     944:	00000338 	andeq	r0, r0, r8, lsr r3
     948:	200013a8 	andcs	r1, r0, r8, lsr #7
     94c:	00000050 	andeq	r0, r0, r0, asr r0
     950:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     954:	41018e02 	tstmi	r1, r2, lsl #28
     958:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     95c:	00000007 	andeq	r0, r0, r7
     960:	0000001c 	andeq	r0, r0, ip, lsl r0
     964:	00000338 	andeq	r0, r0, r8, lsr r3
     968:	200013f8 	strdcs	r1, [r0], -r8
     96c:	00000084 	andeq	r0, r0, r4, lsl #1
     970:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     974:	41018e02 	tstmi	r1, r2, lsl #28
     978:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
     97c:	00000007 	andeq	r0, r0, r7
     980:	00000018 	andeq	r0, r0, r8, lsl r0
     984:	00000338 	andeq	r0, r0, r8, lsr r3
     988:	2000147c 	andcs	r1, r0, ip, ror r4
     98c:	0000001c 	andeq	r0, r0, ip, lsl r0
     990:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     994:	41018e02 	tstmi	r1, r2, lsl #28
     998:	0000070d 	andeq	r0, r0, sp, lsl #14
     99c:	0000001c 	andeq	r0, r0, ip, lsl r0
     9a0:	00000338 	andeq	r0, r0, r8, lsr r3
     9a4:	20001498 	mulcs	r0, r8, r4
     9a8:	00000044 	andeq	r0, r0, r4, asr #32
     9ac:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     9b0:	41018e02 	tstmi	r1, r2, lsl #28
     9b4:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     9b8:	00000007 	andeq	r0, r0, r7
     9bc:	0000001c 	andeq	r0, r0, ip, lsl r0
     9c0:	00000338 	andeq	r0, r0, r8, lsr r3
     9c4:	200014dc 	ldrdcs	r1, [r0], -ip
     9c8:	00000020 	andeq	r0, r0, r0, lsr #32
     9cc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     9d0:	41018e02 	tstmi	r1, r2, lsl #28
     9d4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     9d8:	00000007 	andeq	r0, r0, r7
     9dc:	0000000c 	andeq	r0, r0, ip
     9e0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     9e4:	7c020001 	stcvc	0, cr0, [r2], {1}
     9e8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     9ec:	0000001c 	andeq	r0, r0, ip, lsl r0
     9f0:	000009dc 	ldrdeq	r0, [r0], -ip
     9f4:	200014fc 	strdcs	r1, [r0], -ip
     9f8:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     9fc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     a00:	41018e02 	tstmi	r1, r2, lsl #28
     a04:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     a08:	00000007 	andeq	r0, r0, r7
     a0c:	0000001c 	andeq	r0, r0, ip, lsl r0
     a10:	000009dc 	ldrdeq	r0, [r0], -ip
     a14:	200016cc 	andcs	r1, r0, ip, asr #13
     a18:	000000f8 	strdeq	r0, [r0], -r8
     a1c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     a20:	41018e02 	tstmi	r1, r2, lsl #28
     a24:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     a28:	00000007 	andeq	r0, r0, r7
     a2c:	0000001c 	andeq	r0, r0, ip, lsl r0
     a30:	000009dc 	ldrdeq	r0, [r0], -ip
     a34:	200017c4 	andcs	r1, r0, r4, asr #15
     a38:	00000030 	andeq	r0, r0, r0, lsr r0
     a3c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     a40:	41018e02 	tstmi	r1, r2, lsl #28
     a44:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     a48:	00000007 	andeq	r0, r0, r7
     a4c:	0000001c 	andeq	r0, r0, ip, lsl r0
     a50:	000009dc 	ldrdeq	r0, [r0], -ip
     a54:	200017f4 	strdcs	r1, [r0], -r4
     a58:	00000030 	andeq	r0, r0, r0, lsr r0
     a5c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     a60:	41018e02 	tstmi	r1, r2, lsl #28
     a64:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     a68:	00000007 	andeq	r0, r0, r7
     a6c:	0000001c 	andeq	r0, r0, ip, lsl r0
     a70:	000009dc 	ldrdeq	r0, [r0], -ip
     a74:	20001824 	andcs	r1, r0, r4, lsr #16
     a78:	00000048 	andeq	r0, r0, r8, asr #32
     a7c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     a80:	41018e02 	tstmi	r1, r2, lsl #28
     a84:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     a88:	00000007 	andeq	r0, r0, r7
     a8c:	0000001c 	andeq	r0, r0, ip, lsl r0
     a90:	000009dc 	ldrdeq	r0, [r0], -ip
     a94:	2000186c 	andcs	r1, r0, ip, ror #16
     a98:	00000018 	andeq	r0, r0, r8, lsl r0
     a9c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     aa0:	41018e02 	tstmi	r1, r2, lsl #28
     aa4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     aa8:	00000007 	andeq	r0, r0, r7
     aac:	0000001c 	andeq	r0, r0, ip, lsl r0
     ab0:	000009dc 	ldrdeq	r0, [r0], -ip
     ab4:	20001884 	andcs	r1, r0, r4, lsl #17
     ab8:	00000018 	andeq	r0, r0, r8, lsl r0
     abc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     ac0:	41018e02 	tstmi	r1, r2, lsl #28
     ac4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     ac8:	00000007 	andeq	r0, r0, r7
     acc:	0000001c 	andeq	r0, r0, ip, lsl r0
     ad0:	000009dc 	ldrdeq	r0, [r0], -ip
     ad4:	2000189c 	mulcs	r0, ip, r8
     ad8:	00000014 	andeq	r0, r0, r4, lsl r0
     adc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     ae0:	41018e02 	tstmi	r1, r2, lsl #28
     ae4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     ae8:	00000007 	andeq	r0, r0, r7
     aec:	0000001c 	andeq	r0, r0, ip, lsl r0
     af0:	000009dc 	ldrdeq	r0, [r0], -ip
     af4:	200018b0 			; <UNDEFINED> instruction: 0x200018b0
     af8:	00000016 	andeq	r0, r0, r6, lsl r0
     afc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     b00:	41018e02 	tstmi	r1, r2, lsl #28
     b04:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     b08:	00000007 	andeq	r0, r0, r7
     b0c:	0000001c 	andeq	r0, r0, ip, lsl r0
     b10:	000009dc 	ldrdeq	r0, [r0], -ip
     b14:	200018c6 	andcs	r1, r0, r6, asr #17
     b18:	00000040 	andeq	r0, r0, r0, asr #32
     b1c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     b20:	41018e02 	tstmi	r1, r2, lsl #28
     b24:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     b28:	00000007 	andeq	r0, r0, r7
     b2c:	0000001c 	andeq	r0, r0, ip, lsl r0
     b30:	000009dc 	ldrdeq	r0, [r0], -ip
     b34:	20001906 	andcs	r1, r0, r6, lsl #18
     b38:	00000040 	andeq	r0, r0, r0, asr #32
     b3c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     b40:	41018e02 	tstmi	r1, r2, lsl #28
     b44:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     b48:	00000007 	andeq	r0, r0, r7
     b4c:	0000001c 	andeq	r0, r0, ip, lsl r0
     b50:	000009dc 	ldrdeq	r0, [r0], -ip
     b54:	20001946 	andcs	r1, r0, r6, asr #18
     b58:	00000040 	andeq	r0, r0, r0, asr #32
     b5c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     b60:	41018e02 	tstmi	r1, r2, lsl #28
     b64:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     b68:	00000007 	andeq	r0, r0, r7
     b6c:	0000001c 	andeq	r0, r0, ip, lsl r0
     b70:	000009dc 	ldrdeq	r0, [r0], -ip
     b74:	20001986 	andcs	r1, r0, r6, lsl #19
     b78:	00000038 	andeq	r0, r0, r8, lsr r0
     b7c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     b80:	41018e02 	tstmi	r1, r2, lsl #28
     b84:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     b88:	00000007 	andeq	r0, r0, r7
     b8c:	0000001c 	andeq	r0, r0, ip, lsl r0
     b90:	000009dc 	ldrdeq	r0, [r0], -ip
     b94:	200019be 			; <UNDEFINED> instruction: 0x200019be
     b98:	0000003e 	andeq	r0, r0, lr, lsr r0
     b9c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     ba0:	41018e02 	tstmi	r1, r2, lsl #28
     ba4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     ba8:	00000007 	andeq	r0, r0, r7
     bac:	0000001c 	andeq	r0, r0, ip, lsl r0
     bb0:	000009dc 	ldrdeq	r0, [r0], -ip
     bb4:	200019fc 	strdcs	r1, [r0], -ip
     bb8:	00000040 	andeq	r0, r0, r0, asr #32
     bbc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     bc0:	41018e02 	tstmi	r1, r2, lsl #28
     bc4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     bc8:	00000007 	andeq	r0, r0, r7
     bcc:	0000001c 	andeq	r0, r0, ip, lsl r0
     bd0:	000009dc 	ldrdeq	r0, [r0], -ip
     bd4:	20001a3c 	andcs	r1, r0, ip, lsr sl
     bd8:	00000158 	andeq	r0, r0, r8, asr r1
     bdc:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
     be0:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     be4:	200e4101 	andcs	r4, lr, r1, lsl #2
     be8:	00070d41 	andeq	r0, r7, r1, asr #26
     bec:	0000001c 	andeq	r0, r0, ip, lsl r0
     bf0:	000009dc 	ldrdeq	r0, [r0], -ip
     bf4:	20001b94 	mulcs	r0, r4, fp
     bf8:	0000017c 	andeq	r0, r0, ip, ror r1
     bfc:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
     c00:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     c04:	200e4101 	andcs	r4, lr, r1, lsl #2
     c08:	00070d41 	andeq	r0, r7, r1, asr #26
     c0c:	0000001c 	andeq	r0, r0, ip, lsl r0
     c10:	000009dc 	ldrdeq	r0, [r0], -ip
     c14:	20001d10 	andcs	r1, r0, r0, lsl sp
     c18:	00000180 	andeq	r0, r0, r0, lsl #3
     c1c:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
     c20:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     c24:	200e4101 	andcs	r4, lr, r1, lsl #2
     c28:	00070d41 	andeq	r0, r7, r1, asr #26
     c2c:	0000001c 	andeq	r0, r0, ip, lsl r0
     c30:	000009dc 	ldrdeq	r0, [r0], -ip
     c34:	20001e90 	mulcs	r0, r0, lr
     c38:	00000124 	andeq	r0, r0, r4, lsr #2
     c3c:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
     c40:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     c44:	200e4101 	andcs	r4, lr, r1, lsl #2
     c48:	00070d41 	andeq	r0, r7, r1, asr #26
     c4c:	0000001c 	andeq	r0, r0, ip, lsl r0
     c50:	000009dc 	ldrdeq	r0, [r0], -ip
     c54:	20001fb4 			; <UNDEFINED> instruction: 0x20001fb4
     c58:	00000040 	andeq	r0, r0, r0, asr #32
     c5c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     c60:	41018e02 	tstmi	r1, r2, lsl #28
     c64:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     c68:	00000007 	andeq	r0, r0, r7
     c6c:	0000001c 	andeq	r0, r0, ip, lsl r0
     c70:	000009dc 	ldrdeq	r0, [r0], -ip
     c74:	20001ff4 	strdcs	r1, [r0], -r4
     c78:	000000d4 	ldrdeq	r0, [r0], -r4
     c7c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     c80:	41018e02 	tstmi	r1, r2, lsl #28
     c84:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     c88:	00000007 	andeq	r0, r0, r7
     c8c:	0000001c 	andeq	r0, r0, ip, lsl r0
     c90:	000009dc 	ldrdeq	r0, [r0], -ip
     c94:	200020c8 	andcs	r2, r0, r8, asr #1
     c98:	00000018 	andeq	r0, r0, r8, lsl r0
     c9c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     ca0:	41018e02 	tstmi	r1, r2, lsl #28
     ca4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     ca8:	00000007 	andeq	r0, r0, r7
     cac:	0000001c 	andeq	r0, r0, ip, lsl r0
     cb0:	000009dc 	ldrdeq	r0, [r0], -ip
     cb4:	200020e0 	andcs	r2, r0, r0, ror #1
     cb8:	00000018 	andeq	r0, r0, r8, lsl r0
     cbc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     cc0:	41018e02 	tstmi	r1, r2, lsl #28
     cc4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     cc8:	00000007 	andeq	r0, r0, r7
     ccc:	0000001c 	andeq	r0, r0, ip, lsl r0
     cd0:	000009dc 	ldrdeq	r0, [r0], -ip
     cd4:	200020f8 	strdcs	r2, [r0], -r8
     cd8:	00000018 	andeq	r0, r0, r8, lsl r0
     cdc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     ce0:	41018e02 	tstmi	r1, r2, lsl #28
     ce4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     ce8:	00000007 	andeq	r0, r0, r7
     cec:	0000001c 	andeq	r0, r0, ip, lsl r0
     cf0:	000009dc 	ldrdeq	r0, [r0], -ip
     cf4:	20002110 	andcs	r2, r0, r0, lsl r1
     cf8:	00000018 	andeq	r0, r0, r8, lsl r0
     cfc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     d00:	41018e02 	tstmi	r1, r2, lsl #28
     d04:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
     d08:	00000007 	andeq	r0, r0, r7
     d0c:	0000001c 	andeq	r0, r0, ip, lsl r0
     d10:	000009dc 	ldrdeq	r0, [r0], -ip
     d14:	20002128 	andcs	r2, r0, r8, lsr #2
     d18:	00000048 	andeq	r0, r0, r8, asr #32
     d1c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     d20:	41018e02 	tstmi	r1, r2, lsl #28
     d24:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     d28:	00000007 	andeq	r0, r0, r7
     d2c:	0000001c 	andeq	r0, r0, ip, lsl r0
     d30:	000009dc 	ldrdeq	r0, [r0], -ip
     d34:	20002170 	andcs	r2, r0, r0, ror r1
     d38:	00000050 	andeq	r0, r0, r0, asr r0
     d3c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     d40:	41018e02 	tstmi	r1, r2, lsl #28
     d44:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     d48:	00000007 	andeq	r0, r0, r7
     d4c:	0000001c 	andeq	r0, r0, ip, lsl r0
     d50:	000009dc 	ldrdeq	r0, [r0], -ip
     d54:	200021c0 	andcs	r2, r0, r0, asr #3
     d58:	00000048 	andeq	r0, r0, r8, asr #32
     d5c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     d60:	41018e02 	tstmi	r1, r2, lsl #28
     d64:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     d68:	00000007 	andeq	r0, r0, r7
     d6c:	0000001c 	andeq	r0, r0, ip, lsl r0
     d70:	000009dc 	ldrdeq	r0, [r0], -ip
     d74:	20002208 	andcs	r2, r0, r8, lsl #4
     d78:	00000050 	andeq	r0, r0, r0, asr r0
     d7c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     d80:	41018e02 	tstmi	r1, r2, lsl #28
     d84:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     d88:	00000007 	andeq	r0, r0, r7
     d8c:	0000001c 	andeq	r0, r0, ip, lsl r0
     d90:	000009dc 	ldrdeq	r0, [r0], -ip
     d94:	20002258 	andcs	r2, r0, r8, asr r2
     d98:	00000048 	andeq	r0, r0, r8, asr #32
     d9c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     da0:	41018e02 	tstmi	r1, r2, lsl #28
     da4:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     da8:	00000007 	andeq	r0, r0, r7
     dac:	0000001c 	andeq	r0, r0, ip, lsl r0
     db0:	000009dc 	ldrdeq	r0, [r0], -ip
     db4:	200022a0 	andcs	r2, r0, r0, lsr #5
     db8:	00000050 	andeq	r0, r0, r0, asr r0
     dbc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     dc0:	41018e02 	tstmi	r1, r2, lsl #28
     dc4:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     dc8:	00000007 	andeq	r0, r0, r7
     dcc:	0000001c 	andeq	r0, r0, ip, lsl r0
     dd0:	000009dc 	ldrdeq	r0, [r0], -ip
     dd4:	200022f0 	strdcs	r2, [r0], -r0
     dd8:	00000048 	andeq	r0, r0, r8, asr #32
     ddc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     de0:	41018e02 	tstmi	r1, r2, lsl #28
     de4:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     de8:	00000007 	andeq	r0, r0, r7
     dec:	0000001c 	andeq	r0, r0, ip, lsl r0
     df0:	000009dc 	ldrdeq	r0, [r0], -ip
     df4:	20002338 	andcs	r2, r0, r8, lsr r3
     df8:	00000050 	andeq	r0, r0, r0, asr r0
     dfc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     e00:	41018e02 	tstmi	r1, r2, lsl #28
     e04:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     e08:	00000007 	andeq	r0, r0, r7
     e0c:	0000001c 	andeq	r0, r0, ip, lsl r0
     e10:	000009dc 	ldrdeq	r0, [r0], -ip
     e14:	20002388 	andcs	r2, r0, r8, lsl #7
     e18:	00000048 	andeq	r0, r0, r8, asr #32
     e1c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     e20:	41018e02 	tstmi	r1, r2, lsl #28
     e24:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     e28:	00000007 	andeq	r0, r0, r7
     e2c:	0000001c 	andeq	r0, r0, ip, lsl r0
     e30:	000009dc 	ldrdeq	r0, [r0], -ip
     e34:	200023d0 	ldrdcs	r2, [r0], -r0
     e38:	00000050 	andeq	r0, r0, r0, asr r0
     e3c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     e40:	41018e02 	tstmi	r1, r2, lsl #28
     e44:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     e48:	00000007 	andeq	r0, r0, r7
     e4c:	0000001c 	andeq	r0, r0, ip, lsl r0
     e50:	000009dc 	ldrdeq	r0, [r0], -ip
     e54:	20002420 	andcs	r2, r0, r0, lsr #8
     e58:	00000048 	andeq	r0, r0, r8, asr #32
     e5c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     e60:	41018e02 	tstmi	r1, r2, lsl #28
     e64:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     e68:	00000007 	andeq	r0, r0, r7
     e6c:	0000001c 	andeq	r0, r0, ip, lsl r0
     e70:	000009dc 	ldrdeq	r0, [r0], -ip
     e74:	20002468 	andcs	r2, r0, r8, ror #8
     e78:	00000050 	andeq	r0, r0, r0, asr r0
     e7c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     e80:	41018e02 	tstmi	r1, r2, lsl #28
     e84:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     e88:	00000007 	andeq	r0, r0, r7
     e8c:	0000001c 	andeq	r0, r0, ip, lsl r0
     e90:	000009dc 	ldrdeq	r0, [r0], -ip
     e94:	200024b8 			; <UNDEFINED> instruction: 0x200024b8
     e98:	00000048 	andeq	r0, r0, r8, asr #32
     e9c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     ea0:	41018e02 	tstmi	r1, r2, lsl #28
     ea4:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     ea8:	00000007 	andeq	r0, r0, r7
     eac:	0000001c 	andeq	r0, r0, ip, lsl r0
     eb0:	000009dc 	ldrdeq	r0, [r0], -ip
     eb4:	20002500 	andcs	r2, r0, r0, lsl #10
     eb8:	0000004c 	andeq	r0, r0, ip, asr #32
     ebc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     ec0:	41018e02 	tstmi	r1, r2, lsl #28
     ec4:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     ec8:	00000007 	andeq	r0, r0, r7
     ecc:	0000001c 	andeq	r0, r0, ip, lsl r0
     ed0:	000009dc 	ldrdeq	r0, [r0], -ip
     ed4:	2000254c 	andcs	r2, r0, ip, asr #10
     ed8:	00000048 	andeq	r0, r0, r8, asr #32
     edc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     ee0:	41018e02 	tstmi	r1, r2, lsl #28
     ee4:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     ee8:	00000007 	andeq	r0, r0, r7
     eec:	0000001c 	andeq	r0, r0, ip, lsl r0
     ef0:	000009dc 	ldrdeq	r0, [r0], -ip
     ef4:	20002594 	mulcs	r0, r4, r5
     ef8:	0000004c 	andeq	r0, r0, ip, asr #32
     efc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     f00:	41018e02 	tstmi	r1, r2, lsl #28
     f04:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     f08:	00000007 	andeq	r0, r0, r7
     f0c:	0000001c 	andeq	r0, r0, ip, lsl r0
     f10:	000009dc 	ldrdeq	r0, [r0], -ip
     f14:	200025e0 	andcs	r2, r0, r0, ror #11
     f18:	00000048 	andeq	r0, r0, r8, asr #32
     f1c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     f20:	41018e02 	tstmi	r1, r2, lsl #28
     f24:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     f28:	00000007 	andeq	r0, r0, r7
     f2c:	0000001c 	andeq	r0, r0, ip, lsl r0
     f30:	000009dc 	ldrdeq	r0, [r0], -ip
     f34:	20002628 	andcs	r2, r0, r8, lsr #12
     f38:	00000048 	andeq	r0, r0, r8, asr #32
     f3c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     f40:	41018e02 	tstmi	r1, r2, lsl #28
     f44:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     f48:	00000007 	andeq	r0, r0, r7
     f4c:	0000001c 	andeq	r0, r0, ip, lsl r0
     f50:	000009dc 	ldrdeq	r0, [r0], -ip
     f54:	20002670 	andcs	r2, r0, r0, ror r6
     f58:	0000004c 	andeq	r0, r0, ip, asr #32
     f5c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     f60:	41018e02 	tstmi	r1, r2, lsl #28
     f64:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     f68:	00000007 	andeq	r0, r0, r7
     f6c:	0000001c 	andeq	r0, r0, ip, lsl r0
     f70:	000009dc 	ldrdeq	r0, [r0], -ip
     f74:	200026bc 			; <UNDEFINED> instruction: 0x200026bc
     f78:	0000004c 	andeq	r0, r0, ip, asr #32
     f7c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     f80:	41018e02 	tstmi	r1, r2, lsl #28
     f84:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     f88:	00000007 	andeq	r0, r0, r7
     f8c:	0000001c 	andeq	r0, r0, ip, lsl r0
     f90:	000009dc 	ldrdeq	r0, [r0], -ip
     f94:	20002708 	andcs	r2, r0, r8, lsl #14
     f98:	00000050 	andeq	r0, r0, r0, asr r0
     f9c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     fa0:	41018e02 	tstmi	r1, r2, lsl #28
     fa4:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     fa8:	00000007 	andeq	r0, r0, r7
     fac:	0000001c 	andeq	r0, r0, ip, lsl r0
     fb0:	000009dc 	ldrdeq	r0, [r0], -ip
     fb4:	20002758 	andcs	r2, r0, r8, asr r7
     fb8:	00000050 	andeq	r0, r0, r0, asr r0
     fbc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     fc0:	41018e02 	tstmi	r1, r2, lsl #28
     fc4:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     fc8:	00000007 	andeq	r0, r0, r7
     fcc:	0000001c 	andeq	r0, r0, ip, lsl r0
     fd0:	000009dc 	ldrdeq	r0, [r0], -ip
     fd4:	200027a8 	andcs	r2, r0, r8, lsr #15
     fd8:	00000050 	andeq	r0, r0, r0, asr r0
     fdc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
     fe0:	41018e02 	tstmi	r1, r2, lsl #28
     fe4:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
     fe8:	00000007 	andeq	r0, r0, r7
     fec:	0000001c 	andeq	r0, r0, ip, lsl r0
     ff0:	000009dc 	ldrdeq	r0, [r0], -ip
     ff4:	200027f8 	strdcs	r2, [r0], -r8
     ff8:	00000066 	andeq	r0, r0, r6, rrx
     ffc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1000:	41018e02 	tstmi	r1, r2, lsl #28
    1004:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    1008:	00000007 	andeq	r0, r0, r7
    100c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1010:	000009dc 	ldrdeq	r0, [r0], -ip
    1014:	2000285e 	andcs	r2, r0, lr, asr r8
    1018:	00000066 	andeq	r0, r0, r6, rrx
    101c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1020:	41018e02 	tstmi	r1, r2, lsl #28
    1024:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    1028:	00000007 	andeq	r0, r0, r7
    102c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1030:	000009dc 	ldrdeq	r0, [r0], -ip
    1034:	200028c4 	andcs	r2, r0, r4, asr #17
    1038:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    103c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1040:	41018e02 	tstmi	r1, r2, lsl #28
    1044:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    1048:	00000007 	andeq	r0, r0, r7
    104c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1050:	000009dc 	ldrdeq	r0, [r0], -ip
    1054:	20002974 	andcs	r2, r0, r4, ror r9
    1058:	0000002e 	andeq	r0, r0, lr, lsr #32
    105c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1060:	41018e02 	tstmi	r1, r2, lsl #28
    1064:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    1068:	00000007 	andeq	r0, r0, r7
    106c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1070:	000009dc 	ldrdeq	r0, [r0], -ip
    1074:	200029a2 	andcs	r2, r0, r2, lsr #19
    1078:	000000ea 	andeq	r0, r0, sl, ror #1
    107c:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
    1080:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    1084:	200e4101 	andcs	r4, lr, r1, lsl #2
    1088:	00070d41 	andeq	r0, r7, r1, asr #26
    108c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1090:	000009dc 	ldrdeq	r0, [r0], -ip
    1094:	20002a8c 	andcs	r2, r0, ip, lsl #21
    1098:	00000014 	andeq	r0, r0, r4, lsl r0
    109c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    10a0:	41018e02 	tstmi	r1, r2, lsl #28
    10a4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    10a8:	00000007 	andeq	r0, r0, r7
    10ac:	0000001c 	andeq	r0, r0, ip, lsl r0
    10b0:	000009dc 	ldrdeq	r0, [r0], -ip
    10b4:	20002aa0 	andcs	r2, r0, r0, lsr #21
    10b8:	00000014 	andeq	r0, r0, r4, lsl r0
    10bc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    10c0:	41018e02 	tstmi	r1, r2, lsl #28
    10c4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    10c8:	00000007 	andeq	r0, r0, r7
    10cc:	0000001c 	andeq	r0, r0, ip, lsl r0
    10d0:	000009dc 	ldrdeq	r0, [r0], -ip
    10d4:	20002ab4 			; <UNDEFINED> instruction: 0x20002ab4
    10d8:	00000014 	andeq	r0, r0, r4, lsl r0
    10dc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    10e0:	41018e02 	tstmi	r1, r2, lsl #28
    10e4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    10e8:	00000007 	andeq	r0, r0, r7
    10ec:	0000001c 	andeq	r0, r0, ip, lsl r0
    10f0:	000009dc 	ldrdeq	r0, [r0], -ip
    10f4:	20002ac8 	andcs	r2, r0, r8, asr #21
    10f8:	00000014 	andeq	r0, r0, r4, lsl r0
    10fc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1100:	41018e02 	tstmi	r1, r2, lsl #28
    1104:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    1108:	00000007 	andeq	r0, r0, r7
    110c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1110:	000009dc 	ldrdeq	r0, [r0], -ip
    1114:	20002adc 	ldrdcs	r2, [r0], -ip
    1118:	00000038 	andeq	r0, r0, r8, lsr r0
    111c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1120:	41018e02 	tstmi	r1, r2, lsl #28
    1124:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    1128:	00000007 	andeq	r0, r0, r7
    112c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1130:	000009dc 	ldrdeq	r0, [r0], -ip
    1134:	20002b14 	andcs	r2, r0, r4, lsl fp
    1138:	00000040 	andeq	r0, r0, r0, asr #32
    113c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1140:	41018e02 	tstmi	r1, r2, lsl #28
    1144:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    1148:	00000007 	andeq	r0, r0, r7
    114c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1150:	000009dc 	ldrdeq	r0, [r0], -ip
    1154:	20002b54 	andcs	r2, r0, r4, asr fp
    1158:	00000038 	andeq	r0, r0, r8, lsr r0
    115c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1160:	41018e02 	tstmi	r1, r2, lsl #28
    1164:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    1168:	00000007 	andeq	r0, r0, r7
    116c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1170:	000009dc 	ldrdeq	r0, [r0], -ip
    1174:	20002b8c 	andcs	r2, r0, ip, lsl #23
    1178:	00000040 	andeq	r0, r0, r0, asr #32
    117c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1180:	41018e02 	tstmi	r1, r2, lsl #28
    1184:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    1188:	00000007 	andeq	r0, r0, r7
    118c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1190:	000009dc 	ldrdeq	r0, [r0], -ip
    1194:	20002bcc 	andcs	r2, r0, ip, asr #23
    1198:	0000004c 	andeq	r0, r0, ip, asr #32
    119c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    11a0:	41018e02 	tstmi	r1, r2, lsl #28
    11a4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    11a8:	00000007 	andeq	r0, r0, r7
    11ac:	0000001c 	andeq	r0, r0, ip, lsl r0
    11b0:	000009dc 	ldrdeq	r0, [r0], -ip
    11b4:	20002c18 	andcs	r2, r0, r8, lsl ip
    11b8:	0000003a 	andeq	r0, r0, sl, lsr r0
    11bc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    11c0:	41018e02 	tstmi	r1, r2, lsl #28
    11c4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    11c8:	00000007 	andeq	r0, r0, r7
    11cc:	0000001c 	andeq	r0, r0, ip, lsl r0
    11d0:	000009dc 	ldrdeq	r0, [r0], -ip
    11d4:	20002c52 	andcs	r2, r0, r2, asr ip
    11d8:	0000004e 	andeq	r0, r0, lr, asr #32
    11dc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    11e0:	41018e02 	tstmi	r1, r2, lsl #28
    11e4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    11e8:	00000007 	andeq	r0, r0, r7
    11ec:	0000001c 	andeq	r0, r0, ip, lsl r0
    11f0:	000009dc 	ldrdeq	r0, [r0], -ip
    11f4:	20002ca0 	andcs	r2, r0, r0, lsr #25
    11f8:	00000040 	andeq	r0, r0, r0, asr #32
    11fc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1200:	41018e02 	tstmi	r1, r2, lsl #28
    1204:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    1208:	00000007 	andeq	r0, r0, r7
    120c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1210:	000009dc 	ldrdeq	r0, [r0], -ip
    1214:	20002ce0 	andcs	r2, r0, r0, ror #25
    1218:	00000040 	andeq	r0, r0, r0, asr #32
    121c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1220:	41018e02 	tstmi	r1, r2, lsl #28
    1224:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    1228:	00000007 	andeq	r0, r0, r7
    122c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1230:	000009dc 	ldrdeq	r0, [r0], -ip
    1234:	20002d20 	andcs	r2, r0, r0, lsr #26
    1238:	00000052 	andeq	r0, r0, r2, asr r0
    123c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1240:	41018e02 	tstmi	r1, r2, lsl #28
    1244:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    1248:	00000007 	andeq	r0, r0, r7
    124c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1250:	000009dc 	ldrdeq	r0, [r0], -ip
    1254:	20002d72 	andcs	r2, r0, r2, ror sp
    1258:	0000001e 	andeq	r0, r0, lr, lsl r0
    125c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1260:	41018e02 	tstmi	r1, r2, lsl #28
    1264:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    1268:	00000007 	andeq	r0, r0, r7
    126c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1270:	000009dc 	ldrdeq	r0, [r0], -ip
    1274:	20002d90 	mulcs	r0, r0, sp
    1278:	00000046 	andeq	r0, r0, r6, asr #32
    127c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1280:	41018e02 	tstmi	r1, r2, lsl #28
    1284:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    1288:	00000007 	andeq	r0, r0, r7
    128c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1290:	000009dc 	ldrdeq	r0, [r0], -ip
    1294:	20002dd6 	ldrdcs	r2, [r0], -r6
    1298:	00000022 	andeq	r0, r0, r2, lsr #32
    129c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    12a0:	41018e02 	tstmi	r1, r2, lsl #28
    12a4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    12a8:	00000007 	andeq	r0, r0, r7
    12ac:	00000020 	andeq	r0, r0, r0, lsr #32
    12b0:	000009dc 	ldrdeq	r0, [r0], -ip
    12b4:	20002df8 	strdcs	r2, [r0], -r8
    12b8:	00000074 	andeq	r0, r0, r4, ror r0
    12bc:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    12c0:	87038504 	strhi	r8, [r3, -r4, lsl #10]
    12c4:	41018e02 	tstmi	r1, r2, lsl #28
    12c8:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
    12cc:	00000007 	andeq	r0, r0, r7
    12d0:	0000001c 	andeq	r0, r0, ip, lsl r0
    12d4:	000009dc 	ldrdeq	r0, [r0], -ip
    12d8:	20002e6c 	andcs	r2, r0, ip, ror #28
    12dc:	00000022 	andeq	r0, r0, r2, lsr #32
    12e0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    12e4:	41018e02 	tstmi	r1, r2, lsl #28
    12e8:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    12ec:	00000007 	andeq	r0, r0, r7
    12f0:	0000001c 	andeq	r0, r0, ip, lsl r0
    12f4:	000009dc 	ldrdeq	r0, [r0], -ip
    12f8:	20002e8e 	andcs	r2, r0, lr, lsl #29
    12fc:	00000032 	andeq	r0, r0, r2, lsr r0
    1300:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1304:	41018e02 	tstmi	r1, r2, lsl #28
    1308:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    130c:	00000007 	andeq	r0, r0, r7
    1310:	0000001c 	andeq	r0, r0, ip, lsl r0
    1314:	000009dc 	ldrdeq	r0, [r0], -ip
    1318:	20002ec0 	andcs	r2, r0, r0, asr #29
    131c:	00000052 	andeq	r0, r0, r2, asr r0
    1320:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1324:	41018e02 	tstmi	r1, r2, lsl #28
    1328:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    132c:	00000007 	andeq	r0, r0, r7
    1330:	0000001c 	andeq	r0, r0, ip, lsl r0
    1334:	000009dc 	ldrdeq	r0, [r0], -ip
    1338:	20002f12 	andcs	r2, r0, r2, lsl pc
    133c:	00000040 	andeq	r0, r0, r0, asr #32
    1340:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1344:	41018e02 	tstmi	r1, r2, lsl #28
    1348:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    134c:	00000007 	andeq	r0, r0, r7
    1350:	0000001c 	andeq	r0, r0, ip, lsl r0
    1354:	000009dc 	ldrdeq	r0, [r0], -ip
    1358:	20002f52 	andcs	r2, r0, r2, asr pc
    135c:	00000020 	andeq	r0, r0, r0, lsr #32
    1360:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1364:	41018e02 	tstmi	r1, r2, lsl #28
    1368:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    136c:	00000007 	andeq	r0, r0, r7
    1370:	0000001c 	andeq	r0, r0, ip, lsl r0
    1374:	000009dc 	ldrdeq	r0, [r0], -ip
    1378:	20002f72 	andcs	r2, r0, r2, ror pc
    137c:	00000034 	andeq	r0, r0, r4, lsr r0
    1380:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1384:	41018e02 	tstmi	r1, r2, lsl #28
    1388:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    138c:	00000007 	andeq	r0, r0, r7
    1390:	00000020 	andeq	r0, r0, r0, lsr #32
    1394:	000009dc 	ldrdeq	r0, [r0], -ip
    1398:	20002fa6 	andcs	r2, r0, r6, lsr #31
    139c:	0000007c 	andeq	r0, r0, ip, ror r0
    13a0:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    13a4:	87038504 	strhi	r8, [r3, -r4, lsl #10]
    13a8:	41018e02 	tstmi	r1, r2, lsl #28
    13ac:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
    13b0:	00000007 	andeq	r0, r0, r7
    13b4:	00000020 	andeq	r0, r0, r0, lsr #32
    13b8:	000009dc 	ldrdeq	r0, [r0], -ip
    13bc:	20003022 	andcs	r3, r0, r2, lsr #32
    13c0:	0000008c 	andeq	r0, r0, ip, lsl #1
    13c4:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
    13c8:	86048505 	strhi	r8, [r4], -r5, lsl #10
    13cc:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    13d0:	300e4101 	andcc	r4, lr, r1, lsl #2
    13d4:	00070d41 	andeq	r0, r7, r1, asr #26
    13d8:	00000020 	andeq	r0, r0, r0, lsr #32
    13dc:	000009dc 	ldrdeq	r0, [r0], -ip
    13e0:	200030ae 	andcs	r3, r0, lr, lsr #1
    13e4:	00000052 	andeq	r0, r0, r2, asr r0
    13e8:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
    13ec:	86048505 	strhi	r8, [r4], -r5, lsl #10
    13f0:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    13f4:	280e4101 	stmdacs	lr, {r0, r8, lr}
    13f8:	00070d41 	andeq	r0, r7, r1, asr #26
    13fc:	0000001c 	andeq	r0, r0, ip, lsl r0
    1400:	000009dc 	ldrdeq	r0, [r0], -ip
    1404:	20003100 	andcs	r3, r0, r0, lsl #2
    1408:	00000048 	andeq	r0, r0, r8, asr #32
    140c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1410:	41018e02 	tstmi	r1, r2, lsl #28
    1414:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    1418:	00000007 	andeq	r0, r0, r7
    141c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1420:	000009dc 	ldrdeq	r0, [r0], -ip
    1424:	20003148 	andcs	r3, r0, r8, asr #2
    1428:	00000038 	andeq	r0, r0, r8, lsr r0
    142c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1430:	41018e02 	tstmi	r1, r2, lsl #28
    1434:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    1438:	00000007 	andeq	r0, r0, r7
    143c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1440:	000009dc 	ldrdeq	r0, [r0], -ip
    1444:	20003180 	andcs	r3, r0, r0, lsl #3
    1448:	00000038 	andeq	r0, r0, r8, lsr r0
    144c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1450:	41018e02 	tstmi	r1, r2, lsl #28
    1454:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    1458:	00000007 	andeq	r0, r0, r7
    145c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1460:	000009dc 	ldrdeq	r0, [r0], -ip
    1464:	200031b8 			; <UNDEFINED> instruction: 0x200031b8
    1468:	00000038 	andeq	r0, r0, r8, lsr r0
    146c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1470:	41018e02 	tstmi	r1, r2, lsl #28
    1474:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    1478:	00000007 	andeq	r0, r0, r7
    147c:	00000020 	andeq	r0, r0, r0, lsr #32
    1480:	000009dc 	ldrdeq	r0, [r0], -ip
    1484:	200031f0 	strdcs	r3, [r0], -r0
    1488:	00000072 	andeq	r0, r0, r2, ror r0
    148c:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    1490:	87038504 	strhi	r8, [r3, -r4, lsl #10]
    1494:	41018e02 	tstmi	r1, r2, lsl #28
    1498:	0d41280e 	stcleq	8, cr2, [r1, #-56]	; 0xffffffc8
    149c:	00000007 	andeq	r0, r0, r7
    14a0:	00000020 	andeq	r0, r0, r0, lsr #32
    14a4:	000009dc 	ldrdeq	r0, [r0], -ip
    14a8:	20003262 	andcs	r3, r0, r2, ror #4
    14ac:	000000d6 	ldrdeq	r0, [r0], -r6
    14b0:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
    14b4:	86048505 	strhi	r8, [r4], -r5, lsl #10
    14b8:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    14bc:	300e4101 	andcc	r4, lr, r1, lsl #2
    14c0:	00070d41 	andeq	r0, r7, r1, asr #26
    14c4:	0000001c 	andeq	r0, r0, ip, lsl r0
    14c8:	000009dc 	ldrdeq	r0, [r0], -ip
    14cc:	20003338 	andcs	r3, r0, r8, lsr r3
    14d0:	00000040 	andeq	r0, r0, r0, asr #32
    14d4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    14d8:	41018e02 	tstmi	r1, r2, lsl #28
    14dc:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    14e0:	00000007 	andeq	r0, r0, r7
    14e4:	0000001c 	andeq	r0, r0, ip, lsl r0
    14e8:	000009dc 	ldrdeq	r0, [r0], -ip
    14ec:	20003378 	andcs	r3, r0, r8, ror r3
    14f0:	00000020 	andeq	r0, r0, r0, lsr #32
    14f4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    14f8:	41018e02 	tstmi	r1, r2, lsl #28
    14fc:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    1500:	00000007 	andeq	r0, r0, r7
    1504:	00000020 	andeq	r0, r0, r0, lsr #32
    1508:	000009dc 	ldrdeq	r0, [r0], -ip
    150c:	20003398 	mulcs	r0, r8, r3
    1510:	000000b2 	strheq	r0, [r0], -r2
    1514:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
    1518:	86048505 	strhi	r8, [r4], -r5, lsl #10
    151c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    1520:	300e4101 	andcc	r4, lr, r1, lsl #2
    1524:	00070d41 	andeq	r0, r7, r1, asr #26
    1528:	00000020 	andeq	r0, r0, r0, lsr #32
    152c:	000009dc 	ldrdeq	r0, [r0], -ip
    1530:	2000344a 	andcs	r3, r0, sl, asr #8
    1534:	000000d6 	ldrdeq	r0, [r0], -r6
    1538:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
    153c:	86048505 	strhi	r8, [r4], -r5, lsl #10
    1540:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    1544:	300e4101 	andcc	r4, lr, r1, lsl #2
    1548:	00070d41 	andeq	r0, r7, r1, asr #26
    154c:	00000020 	andeq	r0, r0, r0, lsr #32
    1550:	000009dc 	ldrdeq	r0, [r0], -ip
    1554:	20003520 	andcs	r3, r0, r0, lsr #10
    1558:	000000d4 	ldrdeq	r0, [r0], -r4
    155c:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
    1560:	86048505 	strhi	r8, [r4], -r5, lsl #10
    1564:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    1568:	300e4101 	andcc	r4, lr, r1, lsl #2
    156c:	00070d41 	andeq	r0, r7, r1, asr #26
    1570:	00000020 	andeq	r0, r0, r0, lsr #32
    1574:	000009dc 	ldrdeq	r0, [r0], -ip
    1578:	200035f4 	strdcs	r3, [r0], -r4
    157c:	000000e0 	andeq	r0, r0, r0, ror #1
    1580:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
    1584:	86048505 	strhi	r8, [r4], -r5, lsl #10
    1588:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    158c:	300e4101 	andcc	r4, lr, r1, lsl #2
    1590:	00070d41 	andeq	r0, r7, r1, asr #26
    1594:	0000000c 	andeq	r0, r0, ip
    1598:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    159c:	7c020001 	stcvc	0, cr0, [r2], {1}
    15a0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    15a4:	0000001c 	andeq	r0, r0, ip, lsl r0
    15a8:	00001594 	muleq	r0, r4, r5
    15ac:	200036d4 	ldrdcs	r3, [r0], -r4
    15b0:	00000170 	andeq	r0, r0, r0, ror r1
    15b4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    15b8:	41018e02 	tstmi	r1, r2, lsl #28
    15bc:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    15c0:	00000007 	andeq	r0, r0, r7
    15c4:	0000001c 	andeq	r0, r0, ip, lsl r0
    15c8:	00001594 	muleq	r0, r4, r5
    15cc:	20003844 	andcs	r3, r0, r4, asr #16
    15d0:	0000011a 	andeq	r0, r0, sl, lsl r1
    15d4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    15d8:	41018e02 	tstmi	r1, r2, lsl #28
    15dc:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
    15e0:	00000007 	andeq	r0, r0, r7
    15e4:	0000001c 	andeq	r0, r0, ip, lsl r0
    15e8:	00001594 	muleq	r0, r4, r5
    15ec:	2000395e 	andcs	r3, r0, lr, asr r9
    15f0:	00000032 	andeq	r0, r0, r2, lsr r0
    15f4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    15f8:	41018e02 	tstmi	r1, r2, lsl #28
    15fc:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    1600:	00000007 	andeq	r0, r0, r7
    1604:	0000001c 	andeq	r0, r0, ip, lsl r0
    1608:	00001594 	muleq	r0, r4, r5
    160c:	20003990 	mulcs	r0, r0, r9
    1610:	00000046 	andeq	r0, r0, r6, asr #32
    1614:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1618:	41018e02 	tstmi	r1, r2, lsl #28
    161c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    1620:	00000007 	andeq	r0, r0, r7
    1624:	0000001c 	andeq	r0, r0, ip, lsl r0
    1628:	00001594 	muleq	r0, r4, r5
    162c:	200039d6 	ldrdcs	r3, [r0], -r6
    1630:	00000040 	andeq	r0, r0, r0, asr #32
    1634:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1638:	41018e02 	tstmi	r1, r2, lsl #28
    163c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    1640:	00000007 	andeq	r0, r0, r7
    1644:	0000001c 	andeq	r0, r0, ip, lsl r0
    1648:	00001594 	muleq	r0, r4, r5
    164c:	20003a16 	andcs	r3, r0, r6, lsl sl
    1650:	00000016 	andeq	r0, r0, r6, lsl r0
    1654:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1658:	41018e02 	tstmi	r1, r2, lsl #28
    165c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    1660:	00000007 	andeq	r0, r0, r7
    1664:	0000001c 	andeq	r0, r0, ip, lsl r0
    1668:	00001594 	muleq	r0, r4, r5
    166c:	20003a2c 	andcs	r3, r0, ip, lsr #20
    1670:	00000040 	andeq	r0, r0, r0, asr #32
    1674:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1678:	41018e02 	tstmi	r1, r2, lsl #28
    167c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    1680:	00000007 	andeq	r0, r0, r7
    1684:	0000001c 	andeq	r0, r0, ip, lsl r0
    1688:	00001594 	muleq	r0, r4, r5
    168c:	20003a6c 	andcs	r3, r0, ip, ror #20
    1690:	00000016 	andeq	r0, r0, r6, lsl r0
    1694:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1698:	41018e02 	tstmi	r1, r2, lsl #28
    169c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    16a0:	00000007 	andeq	r0, r0, r7
    16a4:	0000001c 	andeq	r0, r0, ip, lsl r0
    16a8:	00001594 	muleq	r0, r4, r5
    16ac:	20003a82 	andcs	r3, r0, r2, lsl #21
    16b0:	0000001e 	andeq	r0, r0, lr, lsl r0
    16b4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    16b8:	41018e02 	tstmi	r1, r2, lsl #28
    16bc:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    16c0:	00000007 	andeq	r0, r0, r7
    16c4:	0000001c 	andeq	r0, r0, ip, lsl r0
    16c8:	00001594 	muleq	r0, r4, r5
    16cc:	20003aa0 	andcs	r3, r0, r0, lsr #21
    16d0:	0000001e 	andeq	r0, r0, lr, lsl r0
    16d4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    16d8:	41018e02 	tstmi	r1, r2, lsl #28
    16dc:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    16e0:	00000007 	andeq	r0, r0, r7
    16e4:	0000001c 	andeq	r0, r0, ip, lsl r0
    16e8:	00001594 	muleq	r0, r4, r5
    16ec:	20003abe 			; <UNDEFINED> instruction: 0x20003abe
    16f0:	0000003a 	andeq	r0, r0, sl, lsr r0
    16f4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    16f8:	41018e02 	tstmi	r1, r2, lsl #28
    16fc:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    1700:	00000007 	andeq	r0, r0, r7
    1704:	0000001c 	andeq	r0, r0, ip, lsl r0
    1708:	00001594 	muleq	r0, r4, r5
    170c:	20003af8 	strdcs	r3, [r0], -r8
    1710:	0000001e 	andeq	r0, r0, lr, lsl r0
    1714:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1718:	41018e02 	tstmi	r1, r2, lsl #28
    171c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    1720:	00000007 	andeq	r0, r0, r7
    1724:	0000001c 	andeq	r0, r0, ip, lsl r0
    1728:	00001594 	muleq	r0, r4, r5
    172c:	20003b16 	andcs	r3, r0, r6, lsl fp
    1730:	00000024 	andeq	r0, r0, r4, lsr #32
    1734:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1738:	41018e02 	tstmi	r1, r2, lsl #28
    173c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    1740:	00000007 	andeq	r0, r0, r7
    1744:	0000001c 	andeq	r0, r0, ip, lsl r0
    1748:	00001594 	muleq	r0, r4, r5
    174c:	20003b3a 	andcs	r3, r0, sl, lsr fp
    1750:	000000a4 	andeq	r0, r0, r4, lsr #1
    1754:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1758:	41018e02 	tstmi	r1, r2, lsl #28
    175c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    1760:	00000007 	andeq	r0, r0, r7
    1764:	0000000c 	andeq	r0, r0, ip
    1768:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    176c:	7c020001 	stcvc	0, cr0, [r2], {1}
    1770:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1774:	00000018 	andeq	r0, r0, r8, lsl r0
    1778:	00001764 	andeq	r1, r0, r4, ror #14
    177c:	20003be0 	andcs	r3, r0, r0, ror #23
    1780:	00000022 	andeq	r0, r0, r2, lsr #32
    1784:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1788:	41018e02 	tstmi	r1, r2, lsl #28
    178c:	0000070d 	andeq	r0, r0, sp, lsl #14
    1790:	0000001c 	andeq	r0, r0, ip, lsl r0
    1794:	00001764 	andeq	r1, r0, r4, ror #14
    1798:	20003c02 	andcs	r3, r0, r2, lsl #24
    179c:	00000022 	andeq	r0, r0, r2, lsr #32
    17a0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    17a4:	41018e02 	tstmi	r1, r2, lsl #28
    17a8:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    17ac:	00000007 	andeq	r0, r0, r7
    17b0:	0000001c 	andeq	r0, r0, ip, lsl r0
    17b4:	00001764 	andeq	r1, r0, r4, ror #14
    17b8:	20003c24 	andcs	r3, r0, r4, lsr #24
    17bc:	00000020 	andeq	r0, r0, r0, lsr #32
    17c0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    17c4:	41018e02 	tstmi	r1, r2, lsl #28
    17c8:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    17cc:	00000007 	andeq	r0, r0, r7
    17d0:	0000001c 	andeq	r0, r0, ip, lsl r0
    17d4:	00001764 	andeq	r1, r0, r4, ror #14
    17d8:	20003c44 	andcs	r3, r0, r4, asr #24
    17dc:	00000090 	muleq	r0, r0, r0
    17e0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    17e4:	41018e02 	tstmi	r1, r2, lsl #28
    17e8:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
    17ec:	00000007 	andeq	r0, r0, r7
    17f0:	0000001c 	andeq	r0, r0, ip, lsl r0
    17f4:	00001764 	andeq	r1, r0, r4, ror #14
    17f8:	20003cd4 	ldrdcs	r3, [r0], -r4
    17fc:	0000001c 	andeq	r0, r0, ip, lsl r0
    1800:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1804:	41018e02 	tstmi	r1, r2, lsl #28
    1808:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    180c:	00000007 	andeq	r0, r0, r7
    1810:	0000001c 	andeq	r0, r0, ip, lsl r0
    1814:	00001764 	andeq	r1, r0, r4, ror #14
    1818:	20003cf0 	strdcs	r3, [r0], -r0
    181c:	00000020 	andeq	r0, r0, r0, lsr #32
    1820:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1824:	41018e02 	tstmi	r1, r2, lsl #28
    1828:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    182c:	00000007 	andeq	r0, r0, r7
    1830:	0000001c 	andeq	r0, r0, ip, lsl r0
    1834:	00001764 	andeq	r1, r0, r4, ror #14
    1838:	20003d10 	andcs	r3, r0, r0, lsl sp
    183c:	00000038 	andeq	r0, r0, r8, lsr r0
    1840:	87080e41 	strhi	r0, [r8, -r1, asr #28]
    1844:	41018e02 	tstmi	r1, r2, lsl #28
    1848:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
    184c:	00000007 	andeq	r0, r0, r7
    1850:	0000000c 	andeq	r0, r0, ip
    1854:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1858:	7c010001 	stcvc	0, cr0, [r1], {1}
    185c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1860:	0000000c 	andeq	r0, r0, ip
    1864:	00001850 	andeq	r1, r0, r0, asr r8
    1868:	20003d49 	andcs	r3, r0, r9, asr #26
    186c:	0000010a 	andeq	r0, r0, sl, lsl #2
    1870:	0000000c 	andeq	r0, r0, ip
    1874:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1878:	7c020001 	stcvc	0, cr0, [r2], {1}
    187c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1880:	00000014 	andeq	r0, r0, r4, lsl r0
    1884:	00001870 	andeq	r1, r0, r0, ror r8
    1888:	20003e60 	andcs	r3, r0, r0, ror #28
    188c:	00000030 	andeq	r0, r0, r0, lsr r0
    1890:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
    1894:	00018e02 	andeq	r8, r1, r2, lsl #28
    1898:	00000014 	andeq	r0, r0, r4, lsl r0
    189c:	00001870 	andeq	r1, r0, r0, ror r8
    18a0:	20003e90 	mulcs	r0, r0, lr
    18a4:	00000008 	andeq	r0, r0, r8
    18a8:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    18ac:	00018e02 	andeq	r8, r1, r2, lsl #28
    18b0:	0000000c 	andeq	r0, r0, ip
    18b4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    18b8:	7c020001 	stcvc	0, cr0, [r2], {1}
    18bc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    18c0:	0000001c 	andeq	r0, r0, ip, lsl r0
    18c4:	000018b0 			; <UNDEFINED> instruction: 0x000018b0
    18c8:	20003e98 	mulcs	r0, r8, lr
    18cc:	0000006c 	andeq	r0, r0, ip, rrx
    18d0:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
    18d4:	86048505 	strhi	r8, [r4], -r5, lsl #10
    18d8:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    18dc:	480e4201 	stmdami	lr, {r0, r9, lr}
    18e0:	00000014 	andeq	r0, r0, r4, lsl r0
    18e4:	000018b0 			; <UNDEFINED> instruction: 0x000018b0
    18e8:	20003f04 	andcs	r3, r0, r4, lsl #30
    18ec:	00000008 	andeq	r0, r0, r8
    18f0:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    18f4:	00018e02 	andeq	r8, r1, r2, lsl #28
    18f8:	0000000c 	andeq	r0, r0, ip
    18fc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1900:	7c020001 	stcvc	0, cr0, [r2], {1}
    1904:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1908:	00000014 	andeq	r0, r0, r4, lsl r0
    190c:	000018f8 	strdeq	r1, [r0], -r8
    1910:	20003f0c 	andcs	r3, r0, ip, lsl #30
    1914:	00000012 	andeq	r0, r0, r2, lsl r0
    1918:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
    191c:	00018e02 	andeq	r8, r1, r2, lsl #28

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000494 	mulcs	r0, r4, r4
   4:	20000800 	andcs	r0, r0, r0, lsl #16
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...
